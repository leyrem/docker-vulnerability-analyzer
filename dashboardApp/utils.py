import streamlit as st
import pandas as pd

def parse_unique_cves_field(scanner_cve_info):
    # Initialize lists to store extracted data
    scanner_names = []
    cve_ids = []
    packages = []
    cvssv3_scores = []
    severities = []
    types = []
    is_fixeds = []
    fixed_versions = []

    # Extract data from each dictionary in 'scanner_cve_info'
    for item in scanner_cve_info:
        scanner_names.append(item['scanner_name'])
        cve_ids.append(item['cve_info']['cve_id'])
        # Convert list to comma-separated string
        packages.append(', '.join(item['cve_info']['package']))
        cvssv3_scores.append(item['cve_info']['cvssv3_score'])
        severities.append(item['cve_info']['severity'])
        types.append(item['cve_info']['type'])
        is_fixeds.append(item['cve_info']['is_fixed'])
        fixed_versions.append(item['cve_info']['fixed_version'])

    # Create DataFrame
    df = pd.DataFrame({
        'scanner_name': scanner_names,
        'cve_id': cve_ids,
        'package': packages,
        'cvssv3_score': cvssv3_scores,
        'severity': severities,
        'type': types,
        'is_fixed': is_fixeds,
        'fixed_version': fixed_versions
    })

    return df


def get_distribution_cves_per_scanner(df_cves_detected_all_scanners, selected_scanner_name):
    
    selected_rows = df_cves_detected_all_scanners[df_cves_detected_all_scanners['scanner_name'] == selected_scanner_name]
    
    num_low_vulns = 0
    num_medium_vulns = 0
    num_high_vulns = 0
    num_critical_vulns = 0
    num_unassigned_vulns = 0
    num_diff_vulns = 0
    
    for ind, row in selected_rows.iterrows():
        if row['num_cves'] == 0 :
            continue
        for cve in  row['cves']:
            sev = cve['severity'].upper().strip()
            if sev == "MEDIUM":
                num_medium_vulns += 1
            elif sev == "HIGH":
                num_high_vulns += 1
            elif sev == "LOW":
                num_low_vulns += 1
            elif sev == "CRITICAL":
                num_critical_vulns += 1
            elif sev == "" or sev ==  "UNSPECIFIED":
                num_unassigned_vulns += 1
            else:
                num_diff_vulns += 1
     
    with st.expander("See detailed analysis"):
        st.write("The distribution  of vulnerabilities detected by scanner " + selected_scanner_name + " is:")
        col1, col2, col3 = st.columns(3)
        col1.metric(label ="Number of CRITICAL vulnerabilities", value=num_critical_vulns)
        col2.metric(label ="Number of HIGH vulnerabilities", value=num_high_vulns)
        col3.metric(label ="Number of MEDIUM vulnerabilities", value=num_medium_vulns)
    
        col4, col5, col6 = st.columns(3)
        col4.metric(label ="Number of LOW vulnerabilities", value=num_low_vulns)
        col5.metric(label ="Number of UNASSIGNED vulnerabilities", value=num_unassigned_vulns)
        col6.metric(label ="Number of vulnerabilities with different severity level", value=num_diff_vulns)
    
    
        for ind, row in selected_rows.iterrows():
            for cve in  row['cves']:
                st.json(cve)
                
                
                
def extract_severity(scanner_cve_info_obj_df):
    
    value_sev = ""
        
    diff_severities = []
    diff_cvss_scores = []
    pkg_list = set()
    
    for ind, r in scanner_cve_info_obj_df.iterrows():
        packages = r['package']
        pkgs = packages.split(',')
        scanner = r['scanner_name']
        
        current_sev = r['severity'].upper().strip()
        current_score = r['cvssv3_score'].upper().strip()
        if current_sev != "":
            diff_severities.append(current_sev)
        if current_score != "":
            current_score = float(current_score)
            if current_score != 0.0 :
                diff_cvss_scores.append(current_score)
    
    diff_severities = set(diff_severities)
    diff_cvss_scores = set(diff_cvss_scores)

    if len(diff_severities) == 0:
        #st.metric(label="Severity of this vulnerability", value="UNASIGNED")
        value_sev = "UNASSIGNED"
    elif len(diff_severities) >  1:
        #diff_severities = ', '.join(diff_severities)
        #st.markdown("   :red[Different severities were assigned by different scanners for this vulnerability:]")
        #st.write("      "+diff_severities)
        value_sev = "DIFFERING"
    else:
        #st.metric(label="Severity of this vulnerability", value=list(diff_severities)[0])
        val =  list(diff_severities)[0]
        if val == "MEDIUM":
            value_sev = "MEDIUM"
        elif val == "HIGH":
            value_sev = "HIGH"
        elif val == "LOW":
            value_sev = "LOW"
        elif val == "CRITICAL":
            value_sev = "CRITICAL"
            
    return value_sev