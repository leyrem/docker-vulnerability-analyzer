import streamlit as st
import pandas as pd
import altair as alt
import json
import glob
import os
from concurrent.futures import ProcessPoolExecutor, as_completed
import itertools

from utils import get_distribution_cves_per_scanner, parse_unique_cves_field, extract_severity, get_cve_details

GENERAL_STATS_OFFICIAL = '/root/docker-vulnerability-analyzer/computeResults/out/general_stats_Official_Images.json'
GENERAL_STATS_VERIFIED = '/root/docker-vulnerability-analyzer/computeResults/out/general_stats_Verified_Images.json'
GENERAL_STATS_SPONSORED = '/root/docker-vulnerability-analyzer/computeResults/out/general_stats_Sponsored_Images.json'
GENERAL_STATS_ALL = '/root/docker-vulnerability-analyzer/computeResults/out/general_stats_All_Images.json'

DATA_RESULTS_OFFICIAL = '/root/docker-vulnerability-analyzer/computeResults/out/data_results_Official_Images.json'
DATA_RESULTS_VERIFIED = '/root/docker-vulnerability-analyzer/computeResults/out/data_results_Verified_Images.json'
DATA_RESULTS_SPONSORED = '/root/docker-vulnerability-analyzer/computeResults/out/data_results_Sponsored_Images.json'
DATA_RESULTS_ALL = '/root/docker-vulnerability-analyzer/computeResults/out/data_results_All_Images.json'

CVES_FREQ_OFFICIAL = '/root/docker-vulnerability-analyzer/computeResults/out/cves_freq_sorted_df_Official_Images.csv'
CVES_FREQ_VERIFIED = '/root/docker-vulnerability-analyzer/computeResults/out/cves_freq_sorted_df_Verified_Images.csv'
CVES_FREQ_SPONSORED = '/root/docker-vulnerability-analyzer/computeResults/out/cves_freq_sorted_df_Sponsored_Images.csv'
CVES_FREQ_ALL = '/root/docker-vulnerability-analyzer/computeResults/out/cves_freq_sorted_df_All_Images.csv'

data_stats = None
data_cves_df = pd.DataFrame()
data_results = None

# Page config
st.set_page_config(
    page_title="Docker Large Scale Image Vulnerability Analysis Dashboard",
    page_icon="üèÇ",
    layout="wide",
    initial_sidebar_state="expanded")

alt.themes.enable("dark")

# Create dropdown widgets on a sidebar for users to select data
with st.sidebar:
    st.title('üèÇ Docker Large Scale Image Vulnerability Analysis Dashboard')

    # Select a image repo name
    image_name_list = ["All Images", "Verified Images", "Sponsored Images", "Official Images"]
    selected_name = st.selectbox('Select a set of Docker images', image_name_list, index=len(image_name_list)-1)

    file_path_stats = ""
    file_path_results = ""
    file_path_cves_freq = ""
    if selected_name == "All Images":
        file_path_stats = GENERAL_STATS_ALL
        file_path_results = DATA_RESULTS_ALL
        file_path_cves_freq = CVES_FREQ_ALL
    elif selected_name == "Sponsored Images":
        file_path_stats = GENERAL_STATS_SPONSORED
        file_path_results = DATA_RESULTS_SPONSORED
        file_path_cves_freq = CVES_FREQ_SPONSORED
    elif selected_name == "Official Images":
        file_path_stats = GENERAL_STATS_OFFICIAL
        file_path_results = DATA_RESULTS_OFFICIAL
        file_path_cves_freq = CVES_FREQ_OFFICIAL
    elif selected_name == "Verified Images":
        file_path_stats = GENERAL_STATS_VERIFIED
        file_path_results = DATA_RESULTS_VERIFIED
        file_path_cves_freq = CVES_FREQ_VERIFIED
        
    # Load Data
    with open(file_path_stats, 'r') as file:
        data_stats = json.load(file)
        
    with open(file_path_results, 'r') as file2:
        data_results = json.load(file2)
        
    data_cves_df = pd.read_csv(file_path_cves_freq)
    
                
tab1, tab2 = st.tabs(["Images Information and Metadata", "Vulnerability Analysis"])

with tab1:
    st.header("Image Information and Metadata")

    # Display the filtered dataframe for debugging

with tab2:
    st.header("Vulnerability Analysis")
    
    tab2_1, tab2_2, tab2_3 = st.tabs(["Overall Vulnerability Landscape", "Detailed Unique Vulnerabilities", "Scanner Performance Analysis"])
    
    with tab2_1:
        st.subheader("Overall Vulnerability Landscape", divider='rainbow')
        
        st.metric(label = "Number of Docker images analysed", value=data_results["number_images_analysed"])
        
        if selected_name == "All Images":
            col1, col2, col3 = st.columns(3)
                 
            col1.metric(label ="Number of Official Images analysed", value=689)
            col2.metric(label ="Number of Verified Images analysed", value=702)
            col3.metric(label ="Number of Sponsored Images analysed", value=712)
            
        st.metric(label = "Number of total unique vulnerabilities found by all scanners", value=data_results["num_unique_vulnerabilities"])
        
        # -------- DONUT CHART WITH SEVERITY DISTRIBUTION
        categories = ["LOW VULNERABILITIES", "MEDIUM VULNERABILITIES", "HIGH VULNERABILITIES", "CRITICAL VULNERABILITIES", "UNASSIGNED VULNERABILITIES", "DIFFERING VULNERABILITIES"]
        values = [
            data_results["low_vulnerabilities"], 
            data_results["medium_vulnerabilitites"],
            data_results["high_vulnerabilities"],
            data_results["critical_vulnerabilitites"],
            data_results["unassigned_vulnerabilities"],
            data_results["differing_vulnerabilitites"],
        ]
        source = pd.DataFrame({"category": categories, "value": values})

        chart = alt.Chart(source).mark_arc(innerRadius=50).encode(
            theta=alt.Theta(field="value", type="quantitative"),
            color=alt.Color(field="category", type="nominal"),
        )
        st.altair_chart(chart, theme=None, use_container_width=True)
        # ----------------------
        #-------- Severity Distribution -----
        tot = data_results["num_unique_vulnerabilities"]
        col1, col2, col3 = st.columns(3)
                 
        col1.metric(label ="Number of LOW vulnerabilities", value=str(values[0]) + ' (' + str(round(values[0] / tot * 100, 1)) + '%)')
        col2.metric(label ="Number of MEDIUM vulnerabilities", value=str(values[1]) + ' (' + str(round(values[1] / tot * 100, 1)) + '%)')
        col3.metric(label ="Number of HIGH vulnerabilities", value=str(values[2]) + ' (' + str(round(values[2] / tot * 100, 1)) + '%)')
            
        col4, col5, col6 = st.columns(3)
                 
        col4.metric(label ="Number of CRITICAL vulnerabilities", value=str(values[3]) + ' (' + str(round(values[3] / tot * 100, 1)) + '%)')
        col5.metric(label ="Number of UNASSIGNED vulnerabilities", value=str(values[4]) + ' (' + str(round(values[4] / tot * 100, 1)) + '%)')
        col6.metric(label ="Number of DIFFERING vulnerabilities", value=str(values[5]) + ' (' + str(round(values[5] / tot * 100, 1)) + '%)')
        # -----------------------------------------
        
        
    with tab2_3:
        
        scanners = ["Snyk", "Trivy", "Grype", "Docker Scout", "JFrog"]
        values_cves_found = [
            data_results["Snyk_results"]["num_CVES_detected"],
            data_results["Trivy_results"]["num_CVES_detected"],
            data_results["Grype_results"]["num_CVES_detected"],
            data_results["DockerScout_results"]["num_CVES_detected"],
            data_results["JFrog_results"]["num_CVES_detected"],
        ]
        
        source_dist_scanners = source = pd.DataFrame({"scanners": scanners, "values": values_cves_found})

        bars = alt.Chart(source_dist_scanners).mark_bar().encode(
            x='values:Q',
            y="scanners:O"
        )

        text = bars.mark_text(
            align='left',
            baseline='middle',
            dx=3  # Nudges text to right so it doesn't appear on top of the bar
        ).encode(
            text='values:Q'
        )

        chart_cves_scanners = (bars + text).properties(height=900)
        st.altair_chart(chart_cves_scanners, theme="streamlit", use_container_width=True)
            
