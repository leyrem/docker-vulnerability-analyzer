{
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "informationUri": "https://docs.jfrog-applications.jfrog.io/jfrog-security-features/sca",
          "name": "JFrog Xray SCA",
          "rules": [
            {
              "id": "CVE-2023-37920_certifi_2020.12.5",
              "shortDescription": {
                "text": "[CVE-2023-37920] certifi 2020.12.5"
              },
              "help": {
                "text": "Certifi is a curated collection of Root Certificates for validating the trustworthiness of SSL certificates while verifying the identity of TLS hosts. Certifi prior to version 2023.07.22 recognizes \"e-Tugra\" root certificates. e-Tugra's root certificates were subject to an investigation prompted by reporting of security issues in their systems. Certifi 2023.07.22 removes root certificates from \"e-Tugra\" from the root store.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Applicable       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [2023.7.22]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2021-34552_Pillow_6.2.2",
              "shortDescription": {
                "text": "[CVE-2021-34552] Pillow 6.2.2"
              },
              "help": {
                "text": "Pillow through 8.2.0 and PIL (aka Python Imaging Library) through 1.1.7 allow an attacker to pass controlled parameters directly into a convert function to trigger a buffer overflow in Convert.c.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [8.3.0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2021-25288_Pillow_6.2.2",
              "shortDescription": {
                "text": "[CVE-2021-25288] Pillow 6.2.2"
              },
              "help": {
                "text": "An issue was discovered in Pillow before 8.2.0. There is an out-of-bounds read in J2kDecode, in j2ku_gray_i.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.1      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [8.2.0]   |"
              },
              "properties": {
                "security-severity": "9.1"
              }
            },
            {
              "id": "CVE-2021-25287_Pillow_6.2.2",
              "shortDescription": {
                "text": "[CVE-2021-25287] Pillow 6.2.2"
              },
              "help": {
                "text": "An issue was discovered in Pillow before 8.2.0. There is an out-of-bounds read in J2kDecode, in j2ku_graya_la.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.1      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [8.2.0]   |"
              },
              "properties": {
                "security-severity": "9.1"
              }
            },
            {
              "id": "CVE-2020-36242_cryptography_3.3.1",
              "shortDescription": {
                "text": "[CVE-2020-36242] cryptography 3.3.1"
              },
              "help": {
                "text": "In the cryptography package before 3.3.2 for Python, certain sequences of update calls to symmetrically encrypt multi-GB values could result in an integer overflow and buffer overflow, as demonstrated by the Fernet class.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.1      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [3.3.2]   |"
              },
              "properties": {
                "security-severity": "9.1"
              }
            },
            {
              "id": "CVE-2022-23491_certifi_2020.12.5",
              "shortDescription": {
                "text": "[CVE-2022-23491] certifi 2020.12.5"
              },
              "help": {
                "text": "Certifi is a curated collection of Root Certificates for validating the trustworthiness of SSL certificates while verifying the identity of TLS hosts. Certifi 2022.12.07 removes root certificates from \"TrustCor\" from the root store. These are in the process of being removed from Mozilla's trust store. TrustCor's root certificates are being removed pursuant to an investigation prompted by media reporting that TrustCor's ownership also operated a business that produced spyware. Conclusions of Mozilla's investigation can be found in the linked google group discussion.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [2022.12.07]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2020-11538_Pillow_6.2.2",
              "shortDescription": {
                "text": "[CVE-2020-11538] Pillow 6.2.2"
              },
              "help": {
                "text": "In libImaging/SgiRleDecode.c in Pillow through 7.0.0, a number of out-of-bounds reads exist in the parsing of SGI image files, a different issue than CVE-2020-5311.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [7.1.0]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2021-28676_Pillow_6.2.2",
              "shortDescription": {
                "text": "[CVE-2021-28676] Pillow 6.2.2"
              },
              "help": {
                "text": "An issue was discovered in Pillow before 8.2.0. For FLI data, FliDecode did not properly check that the block advance was non-zero, potentially leading to an infinite loop on load.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [8.2.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-28677_Pillow_6.2.2",
              "shortDescription": {
                "text": "[CVE-2021-28677] Pillow 6.2.2"
              },
              "help": {
                "text": "An issue was discovered in Pillow before 8.2.0. For EPS data, the readline implementation used in EPSImageFile has to deal with any combination of \\r and \\n as line endings. It used an accidentally quadratic method of accumulating lines while looking for a line ending. A malicious EPS file could use this to perform a DoS of Pillow in the open phase, before an image was accepted for opening.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [8.2.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-27923_Pillow_6.2.2",
              "shortDescription": {
                "text": "[CVE-2021-27923] Pillow 6.2.2"
              },
              "help": {
                "text": "Pillow before 8.1.1 allows attackers to cause a denial of service (memory consumption) because the reported size of a contained image is not properly checked for an ICO container, and thus an attempted memory allocation can be very large.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [8.1.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-25291_Pillow_6.2.2",
              "shortDescription": {
                "text": "[CVE-2021-25291] Pillow 6.2.2"
              },
              "help": {
                "text": "An issue was discovered in Pillow before 8.1.1. In TiffDecode.c, there is an out-of-bounds read in TiffreadRGBATile via invalid tile boundaries.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [8.2.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-27922_Pillow_6.2.2",
              "shortDescription": {
                "text": "[CVE-2021-27922] Pillow 6.2.2"
              },
              "help": {
                "text": "Pillow before 8.1.1 allows attackers to cause a denial of service (memory consumption) because the reported size of a contained image is not properly checked for an ICNS container, and thus an attempted memory allocation can be very large.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [8.1.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-23437_Pillow_6.2.2",
              "shortDescription": {
                "text": "[CVE-2021-23437] Pillow 6.2.2"
              },
              "help": {
                "text": "The package pillow 5.2.0 and before 8.3.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the getrgb function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [8.3.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2020-10379_Pillow_6.2.2",
              "shortDescription": {
                "text": "[CVE-2020-10379] Pillow 6.2.2"
              },
              "help": {
                "text": "In Pillow before 7.1.0, there are two Buffer Overflows in libImaging/TiffDecode.c.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [7.1.0]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2021-25290_Pillow_6.2.2",
              "shortDescription": {
                "text": "[CVE-2021-25290] Pillow 6.2.2"
              },
              "help": {
                "text": "An issue was discovered in Pillow before 8.1.1. In TiffDecode.c, there is a negative-offset memcpy with an invalid size.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [8.1.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2019-20916_pip_19.1.1",
              "shortDescription": {
                "text": "[CVE-2019-20916] pip 19.1.1"
              },
              "help": {
                "text": "The pip package before 19.2 for Python allows Directory Traversal when a URL is given in an install command, because a Content-Disposition header can have ../ in a filename, as demonstrated by overwriting the /root/.ssh/authorized_keys file. This occurs in _download_http_url in _internal/download.py.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [19.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2020-35653_Pillow_6.2.2",
              "shortDescription": {
                "text": "[CVE-2020-35653] Pillow 6.2.2"
              },
              "help": {
                "text": "In Pillow before 8.1.0, PcxDecode has a buffer over-read when decoding a crafted PCX file because the user-supplied stride value is trusted for buffer calculations.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.1      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [8.1.0]   |"
              },
              "properties": {
                "security-severity": "7.1"
              }
            },
            {
              "id": "CVE-2021-27921_Pillow_6.2.2",
              "shortDescription": {
                "text": "[CVE-2021-27921] Pillow 6.2.2"
              },
              "help": {
                "text": "Pillow before 8.1.1 allows attackers to cause a denial of service (memory consumption) because the reported size of a contained image is not properly checked for a BLP container, and thus an attempted memory allocation can be very large.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [8.1.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-25293_Pillow_6.2.2",
              "shortDescription": {
                "text": "[CVE-2021-25293] Pillow 6.2.2"
              },
              "help": {
                "text": "An issue was discovered in Pillow before 8.1.1. There is an out-of-bounds read in SGIRleDecode.c.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [8.1.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2020-35654_Pillow_6.2.2",
              "shortDescription": {
                "text": "[CVE-2020-35654] Pillow 6.2.2"
              },
              "help": {
                "text": "In Pillow before 8.1.0, TiffDecode has a heap-based buffer overflow when decoding crafted YCbCr files because of certain interpretation conflicts with LibTIFF in RGBA mode.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.8      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [8.1.0]   |"
              },
              "properties": {
                "security-severity": "8.8"
              }
            },
            {
              "id": "CVE-2018-20225_pip_20.3.1",
              "shortDescription": {
                "text": "[CVE-2018-20225] pip 20.3.1"
              },
              "help": {
                "text": "An issue was discovered in pip (all versions) because it installs the version with the highest version number, even if the user had intended to obtain a private package from a private index. This only affects use of the --extra-index-url option, and exploitation requires that the package does not already exist in the public index (and thus the attacker can put the package there with an arbitrary version number). NOTE: it has been reported that this is intended functionality and the user is responsible for using --extra-index-url securely",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2018-20225_pip_19.1.1",
              "shortDescription": {
                "text": "[CVE-2018-20225] pip 19.1.1"
              },
              "help": {
                "text": "An issue was discovered in pip (all versions) because it installs the version with the highest version number, even if the user had intended to obtain a private package from a private index. This only affects use of the --extra-index-url option, and exploitation requires that the package does not already exist in the public index (and thus the attacker can put the package there with an arbitrary version number). NOTE: it has been reported that this is intended functionality and the user is responsible for using --extra-index-url securely",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2018-20225_pip_19.2.3",
              "shortDescription": {
                "text": "[CVE-2018-20225] pip 19.2.3"
              },
              "help": {
                "text": "An issue was discovered in pip (all versions) because it installs the version with the highest version number, even if the user had intended to obtain a private package from a private index. This only affects use of the --extra-index-url option, and exploitation requires that the package does not already exist in the public index (and thus the attacker can put the package there with an arbitrary version number). NOTE: it has been reported that this is intended functionality and the user is responsible for using --extra-index-url securely",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2018-20225_pip_20.3.3",
              "shortDescription": {
                "text": "[CVE-2018-20225] pip 20.3.3"
              },
              "help": {
                "text": "An issue was discovered in pip (all versions) because it installs the version with the highest version number, even if the user had intended to obtain a private package from a private index. This only affects use of the --extra-index-url option, and exploitation requires that the package does not already exist in the public index (and thus the attacker can put the package there with an arbitrary version number). NOTE: it has been reported that this is intended functionality and the user is responsible for using --extra-index-url securely",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2023-48795_paramiko_2.7.2",
              "shortDescription": {
                "text": "[CVE-2023-48795] paramiko 2.7.2"
              },
              "help": {
                "text": "The SSH transport protocol with certain OpenSSH extensions, found in OpenSSH before 9.6 and other products, allows remote attackers to bypass integrity checks such that some packets are omitted (from the extension negotiation message), and a client and server may consequently end up with a connection for which some security features have been downgraded or disabled, aka a Terrapin attack. This occurs because the SSH Binary Packet Protocol (BPP), implemented by these extensions, mishandles the handshake phase and mishandles use of sequence numbers. For example, there is an effective attack against SSH's use of ChaCha20-Poly1305 (and CBC with Encrypt-then-MAC). The bypass occurs in chacha20-poly1305@openssh.com and (if CBC is used) the -etm@openssh.com MAC algorithms. This also affects Maverick Synergy Java SSH API before 3.1.0-SNAPSHOT, Dropbear through 2022.83, Ssh before 5.1.1 in Erlang/OTP, PuTTY before 0.80, AsyncSSH before 2.14.2, golang.org/x/crypto before 0.17.0, libssh before 0.10.6, libssh2 through 1.11.0, Thorn Tech SFTP Gateway before 3.4.6, Tera Term before 5.1, Paramiko before 3.4.0, jsch before 0.2.15, SFTPGo before 2.5.6, Netgate pfSense Plus through 23.09.1, Netgate pfSense CE through 2.7.2, HPN-SSH through 18.2.0, ProFTPD before 1.3.8b (and before 1.3.9rc2), ORYX CycloneSSH before 2.3.4, NetSarang XShell 7 before Build 0144, CrushFTP before 10.6.0, ConnectBot SSH library before 2.2.22, Apache MINA sshd through 2.11.0, sshj through 0.37.0, TinySSH through 20230101, trilead-ssh2 6401, LANCOM LCOS and LANconfig, FileZilla before 3.66.4, Nova before 11.8, PKIX-SSH before 14.4, SecureCRT before 9.4.3, Transmit5 before 5.10.4, Win32-OpenSSH before 9.5.0.0p1-Beta, WinSCP before 6.2.2, Bitvise SSH Server before 9.32, Bitvise SSH Client before 9.33, KiTTY through 0.76.1.13, the net-ssh gem 7.2.0 for Ruby, the mscdex ssh2 module before 1.15.0 for Node.js, the thrussh library before 0.35.1 for Rust, and the Russh crate before 0.40.2 for Rust.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Undetermined       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [3.4.0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2022-22815_Pillow_6.2.2",
              "shortDescription": {
                "text": "[CVE-2022-22815] Pillow 6.2.2"
              },
              "help": {
                "text": "path_getbbox in path.c in Pillow before 9.0.0 improperly initializes ImagePath.Path.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [9.0.0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-4203_cryptography_3.3.1",
              "shortDescription": {
                "text": "[CVE-2022-4203] cryptography 3.3.1"
              },
              "help": {
                "text": "A read buffer overrun can be triggered in X.509 certificate verification,\nspecifically in name constraint checking. Note that this occurs\nafter certificate chain signature verification and requires either a\nCA to have signed the malicious certificate or for the application to\ncontinue certificate verification despite failure to construct a path\nto a trusted issuer.\n\nThe read buffer overrun might result in a crash which could lead to\na denial of service attack. In theory it could also result in the disclosure\nof private memory contents (such as private keys, or sensitive plaintext)\nalthough we are not aware of any working exploit leading to memory\ncontents disclosure as of the time of release of this advisory.\n\nIn a TLS client, this can be triggered by connecting to a malicious\nserver. In a TLS server, this can be triggered if the server requests\nclient authentication and a malicious client connects.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.9      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [39.0.1]   |"
              },
              "properties": {
                "security-severity": "4.9"
              }
            },
            {
              "id": "CVE-2024-35195_requests_2.25.1",
              "shortDescription": {
                "text": "[CVE-2024-35195] requests 2.25.1"
              },
              "help": {
                "text": "Requests is a HTTP library. Prior to 2.32.0, when making requests through a Requests `Session`, if the first request is made with `verify=False` to disable cert verification, all subsequent requests to the same host will continue to ignore cert verification regardless of changes to the value of `verify`. This behavior will continue for the lifecycle of the connection in the connection pool. This vulnerability is fixed in 2.32.0.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.6      | Not Covered       | `sha256__cc81a2d1403603703d11ec9d6098382f81a3aced52e74d7d9d3b7a7bb1b2f282.tar `       | [2.32.0]   |"
              },
              "properties": {
                "security-severity": "5.6"
              }
            },
            {
              "id": "CVE-2021-28957_lxml_4.6.2",
              "shortDescription": {
                "text": "[CVE-2021-28957] lxml 4.6.2"
              },
              "help": {
                "text": "An XSS vulnerability was discovered in python-lxml's clean module versions before 4.6.3. When disabling the safe_attrs_only and forms arguments, the Cleaner class does not remove the formaction attribute allowing for JS to bypass the sanitizer. A remote attacker could exploit this flaw to run arbitrary JS code on users who interact with incorrectly sanitized HTML. This issue is patched in lxml 4.6.3.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [4.6.3]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2023-23931_cryptography_3.3.1",
              "shortDescription": {
                "text": "[CVE-2023-23931] cryptography 3.3.1"
              },
              "help": {
                "text": "cryptography is a package designed to expose cryptographic primitives and recipes to Python developers. In affected versions `Cipher.update_into` would accept Python objects which implement the buffer protocol, but provide only immutable buffers. This would allow immutable objects (such as `bytes`) to be mutated, thus violating fundamental rules of Python and resulting in corrupted output. This now correctly raises an exception. This issue has been present since `update_into` was originally introduced in cryptography 1.8.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [39.0.1]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2021-28678_Pillow_6.2.2",
              "shortDescription": {
                "text": "[CVE-2021-28678] Pillow 6.2.2"
              },
              "help": {
                "text": "An issue was discovered in Pillow before 8.2.0. For BLP data, BlpImagePlugin did not properly check that reads (after jumping to file offsets) returned data. This could lead to a DoS where the decoder could be run a large number of times on empty data.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [8.2.0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2021-3572_pip_20.3.1",
              "shortDescription": {
                "text": "[CVE-2021-3572] pip 20.3.1"
              },
              "help": {
                "text": "A flaw was found in python-pip in the way it handled Unicode separators in git references. A remote attacker could possibly use this issue to install a different revision on a repository. The highest threat from this vulnerability is to data integrity. This is fixed in python-pip version 21.1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.7      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [21.1]   |"
              },
              "properties": {
                "security-severity": "5.7"
              }
            },
            {
              "id": "CVE-2024-0727_cryptography_3.3.1",
              "shortDescription": {
                "text": "[CVE-2024-0727] cryptography 3.3.1"
              },
              "help": {
                "text": "Issue summary: Processing a maliciously formatted PKCS12 file may lead OpenSSL\nto crash leading to a potential Denial of Service attack\n\nImpact summary: Applications loading files in the PKCS12 format from untrusted\nsources might terminate abruptly.\n\nA file in PKCS12 format can contain certificates and keys and may come from an\nuntrusted source. The PKCS12 specification allows certain fields to be NULL, but\nOpenSSL does not correctly check for this case. This can lead to a NULL pointer\ndereference that results in OpenSSL crashing. If an application processes PKCS12\nfiles from an untrusted source using the OpenSSL APIs then that application will\nbe vulnerable to this issue.\n\nOpenSSL APIs that are vulnerable to this are: PKCS12_parse(),\nPKCS12_unpack_p7data(), PKCS12_unpack_p7encdata(), PKCS12_unpack_authsafes()\nand PKCS12_newpass().\n\nWe have also fixed a similar issue in SMIME_write_PKCS7(). However since this\nfunction is related to writing data we do not consider it security significant.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [42.0.2]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2021-3572_pip_19.1.1",
              "shortDescription": {
                "text": "[CVE-2021-3572] pip 19.1.1"
              },
              "help": {
                "text": "A flaw was found in python-pip in the way it handled Unicode separators in git references. A remote attacker could possibly use this issue to install a different revision on a repository. The highest threat from this vulnerability is to data integrity. This is fixed in python-pip version 21.1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.7      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [21.1]   |"
              },
              "properties": {
                "security-severity": "5.7"
              }
            },
            {
              "id": "CVE-2020-10177_Pillow_6.2.2",
              "shortDescription": {
                "text": "[CVE-2020-10177] Pillow 6.2.2"
              },
              "help": {
                "text": "Pillow before 7.1.0 has multiple out-of-bounds reads in libImaging/FliDecode.c.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [7.1.0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2021-28675_Pillow_6.2.2",
              "shortDescription": {
                "text": "[CVE-2021-28675] Pillow 6.2.2"
              },
              "help": {
                "text": "An issue was discovered in Pillow before 8.2.0. PSDImagePlugin.PsdImageFile lacked a sanity check on the number of input layers relative to the size of the data block. This could lead to a DoS on Image.open prior to Image.load.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [8.2.0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2021-3572_pip_20.3.3",
              "shortDescription": {
                "text": "[CVE-2021-3572] pip 20.3.3"
              },
              "help": {
                "text": "A flaw was found in python-pip in the way it handled Unicode separators in git references. A remote attacker could possibly use this issue to install a different revision on a repository. The highest threat from this vulnerability is to data integrity. This is fixed in python-pip version 21.1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.7      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [21.1]   |"
              },
              "properties": {
                "security-severity": "5.7"
              }
            },
            {
              "id": "CVE-2020-10378_Pillow_6.2.2",
              "shortDescription": {
                "text": "[CVE-2020-10378] Pillow 6.2.2"
              },
              "help": {
                "text": "In libImaging/PcxDecode.c in Pillow before 7.1.0, an out-of-bounds read can occur when reading PCX files where state-\u003eshuffle is instructed to read beyond state-\u003ebuffer.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [7.1.0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2024-37891_urllib3_1.26.2",
              "shortDescription": {
                "text": "[CVE-2024-37891] urllib3 1.26.2"
              },
              "help": {
                "text": "urllib3 is a user-friendly HTTP client library for Python. When using urllib3's proxy support with `ProxyManager`, the `Proxy-Authorization` header is only sent to the configured proxy, as expected. However, when sending HTTP requests *without* using urllib3's proxy support, it's possible to accidentally configure the `Proxy-Authorization` header even though it won't have any effect as the request is not using a forwarding proxy or a tunneling proxy. In those cases, urllib3 doesn't treat the `Proxy-Authorization` HTTP header as one carrying authentication material and thus doesn't strip the header on cross-origin redirects. Because this is a highly unlikely scenario, we believe the severity of this vulnerability is low for almost all users. Out of an abundance of caution urllib3 will automatically strip the `Proxy-Authorization` header during cross-origin redirects to avoid the small chance that users are doing this on accident. Users should use urllib3's proxy support or disable automatic redirects to achieve safe processing of the `Proxy-Authorization` header, but we still decided to strip the header by default in order to further protect users who aren't using the correct approach. We believe the number of usages affected by this advisory is low. It requires all of the following to be true to be exploited: 1. Setting the `Proxy-Authorization` header without using urllib3's built-in proxy support. 2. Not disabling HTTP redirects. 3. Either not using an HTTPS origin server or for the proxy or target origin to redirect to a malicious origin. Users are advised to update to either version 1.26.19 or version 2.2.2. Users unable to upgrade may use the `Proxy-Authorization` header with urllib3's `ProxyManager`, disable HTTP redirects using `redirects=False` when sending requests, or not user the `Proxy-Authorization` header as mitigations.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.4      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [1.26.19], [2.2.2]   |"
              },
              "properties": {
                "security-severity": "4.4"
              }
            },
            {
              "id": "CVE-2021-3572_pip_19.2.3",
              "shortDescription": {
                "text": "[CVE-2021-3572] pip 19.2.3"
              },
              "help": {
                "text": "A flaw was found in python-pip in the way it handled Unicode separators in git references. A remote attacker could possibly use this issue to install a different revision on a repository. The highest threat from this vulnerability is to data integrity. This is fixed in python-pip version 21.1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.7      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [21.1]   |"
              },
              "properties": {
                "security-severity": "5.7"
              }
            },
            {
              "id": "CVE-2021-25292_Pillow_6.2.2",
              "shortDescription": {
                "text": "[CVE-2021-25292] Pillow 6.2.2"
              },
              "help": {
                "text": "An issue was discovered in Pillow before 8.1.1. The PDF parser allows a regular expression DoS (ReDoS) attack via a crafted PDF file because of a catastrophic backtracking regex.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [8.1.1]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2020-35655_Pillow_6.2.2",
              "shortDescription": {
                "text": "[CVE-2020-35655] Pillow 6.2.2"
              },
              "help": {
                "text": "In Pillow before 8.1.0, SGIRleDecode has a 4-byte buffer over-read when decoding crafted SGI RLE image files because offsets and length tables are mishandled.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.4      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [8.1.0]   |"
              },
              "properties": {
                "security-severity": "5.4"
              }
            },
            {
              "id": "CVE-2022-22816_Pillow_6.2.2",
              "shortDescription": {
                "text": "[CVE-2022-22816] Pillow 6.2.2"
              },
              "help": {
                "text": "path_getbbox in path.c in Pillow before 9.0.0 has a buffer over-read during initialization of ImagePath.Path.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [9.0.0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2020-10994_Pillow_6.2.2",
              "shortDescription": {
                "text": "[CVE-2020-10994] Pillow 6.2.2"
              },
              "help": {
                "text": "In libImaging/Jpeg2KDecode.c in Pillow before 7.1.0, there are multiple out-of-bounds reads via a crafted JP2 file.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [7.1.0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2022-4304_cryptography_3.3.1",
              "shortDescription": {
                "text": "[CVE-2022-4304] cryptography 3.3.1"
              },
              "help": {
                "text": "A timing based side channel exists in the OpenSSL RSA Decryption implementation\nwhich could be sufficient to recover a plaintext across a network in a\nBleichenbacher style attack. To achieve a successful decryption an attacker\nwould have to be able to send a very large number of trial messages for\ndecryption. The vulnerability affects all RSA padding modes: PKCS#1 v1.5,\nRSA-OEAP and RSASVE.\n\nFor example, in a TLS connection, RSA is commonly used by a client to send an\nencrypted pre-master secret to the server. An attacker that had observed a\ngenuine connection between a client and a server could use this flaw to send\ntrial messages to the server and record the time taken to process them. After a\nsufficiently large number of messages the attacker could recover the pre-master\nsecret used for the original connection and thus be able to decrypt the\napplication data sent over that connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [39.0.1]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-36810_PyPDF2_1.24",
              "shortDescription": {
                "text": "[CVE-2023-36810] PyPDF2 1.24"
              },
              "help": {
                "text": "pypdf is a pure-python PDF library capable of splitting, merging, cropping, and transforming the pages of PDF files. An attacker who uses this vulnerability can craft a PDF which leads to unexpected long runtime. This quadratic runtime blocks the current process and can utilize a single core of the CPU by 100%. It does not affect memory usage. This issue has been addressed in PR 808 and versions from 1.27.9 include this fix. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__cc81a2d1403603703d11ec9d6098382f81a3aced52e74d7d9d3b7a7bb1b2f282.tar `       | [1.27.9]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-3446_cryptography_3.3.1",
              "shortDescription": {
                "text": "[CVE-2023-3446] cryptography 3.3.1"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. One of those\nchecks confirms that the modulus ('p' parameter) is not too large. Trying to use\na very large modulus is slow and OpenSSL will not normally use a modulus which\nis over 10,000 bits in length.\n\nHowever the DH_check() function checks numerous aspects of the key or parameters\nthat have been supplied. Some of those checks use the supplied modulus value\neven if it has already been found to be too large.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulernable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the '-check' option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [41.0.3]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-24859_PyPDF2_1.24",
              "shortDescription": {
                "text": "[CVE-2022-24859] PyPDF2 1.24"
              },
              "help": {
                "text": "PyPDF2 is an open source python PDF library capable of splitting, merging, cropping, and transforming the pages of PDF files. In versions prior to 1.27.5 an attacker who uses this vulnerability can craft a PDF which leads to an infinite loop if the PyPDF2 if the code attempts to get the content stream. The reason is that the last while-loop in `ContentStream._readInlineImage` only terminates when it finds the `EI` token, but never actually checks if the stream has already ended. This issue has been resolved in version `1.27.5`. Users unable to upgrade should validate and PDFs prior to iterating over their content stream.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__cc81a2d1403603703d11ec9d6098382f81a3aced52e74d7d9d3b7a7bb1b2f282.tar `       | [1.27.5]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-45803_urllib3_1.26.2",
              "shortDescription": {
                "text": "[CVE-2023-45803] urllib3 1.26.2"
              },
              "help": {
                "text": "urllib3 is a user-friendly HTTP client library for Python. urllib3 previously wouldn't remove the HTTP request body when an HTTP redirect response using status 301, 302, or 303 after the request had its method changed from one that could accept a request body (like `POST`) to `GET` as is required by HTTP RFCs. Although this behavior is not specified in the section for redirects, it can be inferred by piecing together information from different sections and we have observed the behavior in other major HTTP client implementations like curl and web browsers. Because the vulnerability requires a previously trusted service to become compromised in order to have an impact on confidentiality we believe the exploitability of this vulnerability is low. Additionally, many users aren't putting sensitive data in HTTP request bodies, if this is the case then this vulnerability isn't exploitable. Both of the following conditions must be true to be affected by this vulnerability: 1. Using urllib3 and submitting sensitive information in the HTTP request body (such as form data or JSON) and 2. The origin service is compromised and starts redirecting using 301, 302, or 303 to a malicious peer or the redirected-to service becomes compromised. This issue has been addressed in versions 1.26.18 and 2.0.7 and users are advised to update to resolve this issue. Users unable to update should disable redirects for services that aren't expecting to respond with redirects with `redirects=False` and disable automatic redirects with `redirects=False` and handle 301, 302, and 303 redirects manually by stripping the HTTP request body.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.2      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [1.26.18], [2.0.7]   |"
              },
              "properties": {
                "security-severity": "4.2"
              }
            },
            {
              "id": "CVE-2023-5752_pip_19.1.1",
              "shortDescription": {
                "text": "[CVE-2023-5752] pip 19.1.1"
              },
              "help": {
                "text": "When installing a package from a Mercurial VCS URL  (ie \"pip install \nhg+...\") with pip prior to v23.3, the specified Mercurial revision could\n be used to inject arbitrary configuration options to the \"hg clone\" \ncall (ie \"--config\"). Controlling the Mercurial configuration can modify\n how and which repository is installed. This vulnerability does not \naffect users who aren't installing from Mercurial.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.3      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [23.3]   |"
              },
              "properties": {
                "security-severity": "3.3"
              }
            },
            {
              "id": "CVE-2023-5752_pip_19.2.3",
              "shortDescription": {
                "text": "[CVE-2023-5752] pip 19.2.3"
              },
              "help": {
                "text": "When installing a package from a Mercurial VCS URL  (ie \"pip install \nhg+...\") with pip prior to v23.3, the specified Mercurial revision could\n be used to inject arbitrary configuration options to the \"hg clone\" \ncall (ie \"--config\"). Controlling the Mercurial configuration can modify\n how and which repository is installed. This vulnerability does not \naffect users who aren't installing from Mercurial.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.3      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [23.3]   |"
              },
              "properties": {
                "security-severity": "3.3"
              }
            },
            {
              "id": "CVE-2023-5752_pip_20.3.1",
              "shortDescription": {
                "text": "[CVE-2023-5752] pip 20.3.1"
              },
              "help": {
                "text": "When installing a package from a Mercurial VCS URL  (ie \"pip install \nhg+...\") with pip prior to v23.3, the specified Mercurial revision could\n be used to inject arbitrary configuration options to the \"hg clone\" \ncall (ie \"--config\"). Controlling the Mercurial configuration can modify\n how and which repository is installed. This vulnerability does not \naffect users who aren't installing from Mercurial.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.3      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [23.3]   |"
              },
              "properties": {
                "security-severity": "3.3"
              }
            },
            {
              "id": "CVE-2023-5752_pip_20.3.3",
              "shortDescription": {
                "text": "[CVE-2023-5752] pip 20.3.3"
              },
              "help": {
                "text": "When installing a package from a Mercurial VCS URL  (ie \"pip install \nhg+...\") with pip prior to v23.3, the specified Mercurial revision could\n be used to inject arbitrary configuration options to the \"hg clone\" \ncall (ie \"--config\"). Controlling the Mercurial configuration can modify\n how and which repository is installed. This vulnerability does not \naffect users who aren't installing from Mercurial.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.3      | Not Covered       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [23.3]   |"
              },
              "properties": {
                "security-severity": "3.3"
              }
            },
            {
              "id": "CVE-2022-24303_Pillow_6.2.2",
              "shortDescription": {
                "text": "[CVE-2022-24303] Pillow 6.2.2"
              },
              "help": {
                "text": "Pillow before 9.0.1 allows attackers to delete files because spaces in temporary pathnames are mishandled.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.1      | Not Applicable       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [9.0.1]   |"
              },
              "properties": {
                "security-severity": "9.1"
              }
            },
            {
              "id": "CVE-2022-22817_Pillow_6.2.2",
              "shortDescription": {
                "text": "[CVE-2022-22817] Pillow 6.2.2"
              },
              "help": {
                "text": "PIL.ImageMath.eval in Pillow before 9.0.0 allows evaluation of arbitrary expressions, such as ones that use the Python exec method. A lambda expression could also be used.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [9.0.1]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-44271_Pillow_6.2.2",
              "shortDescription": {
                "text": "[CVE-2023-44271] Pillow 6.2.2"
              },
              "help": {
                "text": "An issue was discovered in Pillow before 10.0.0. It is a Denial of Service that uncontrollably allocates memory to process a given task, potentially causing a service to crash by having it run out of memory. This occurs for truetype in ImageFont when textlength in an ImageDraw instance operates on a long text argument.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [10.0.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0215_cryptography_3.3.1",
              "shortDescription": {
                "text": "[CVE-2023-0215] cryptography 3.3.1"
              },
              "help": {
                "text": "The public API function BIO_new_NDEF is a helper function used for streaming\nASN.1 data via a BIO. It is primarily used internally to OpenSSL to support the\nSMIME, CMS and PKCS7 streaming capabilities, but may also be called directly by\nend user applications.\n\nThe function receives a BIO from the caller, prepends a new BIO_f_asn1 filter\nBIO onto the front of it to form a BIO chain, and then returns the new head of\nthe BIO chain to the caller. Under certain conditions, for example if a CMS\nrecipient public key is invalid, the new filter BIO is freed and the function\nreturns a NULL result indicating a failure. However, in this case, the BIO chain\nis not properly cleaned up and the BIO passed by the caller still retains\ninternal pointers to the previously freed filter BIO. If the caller then goes on\nto call BIO_pop() on the BIO then a use-after-free will occur. This will most\nlikely result in a crash.\n\n\n\nThis scenario occurs directly in the internal function B64_write_ASN1() which\nmay cause BIO_new_NDEF() to be called and will subsequently call BIO_pop() on\nthe BIO. This internal function is in turn called by the public API functions\nPEM_write_bio_ASN1_stream, PEM_write_bio_CMS_stream, PEM_write_bio_PKCS7_stream,\nSMIME_write_ASN1, SMIME_write_CMS and SMIME_write_PKCS7.\n\nOther public API functions that may be impacted by this include\ni2d_ASN1_bio_stream, BIO_new_CMS, BIO_new_PKCS7, i2d_CMS_bio_stream and\ni2d_PKCS7_bio_stream.\n\nThe OpenSSL cms and smime command line applications are similarly affected.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [39.0.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-40898_wheel_0.36.1",
              "shortDescription": {
                "text": "[CVE-2022-40898] wheel 0.36.1"
              },
              "help": {
                "text": "An issue discovered in Python Packaging Authority (PyPA) Wheel 0.37.1 and earlier allows remote attackers to cause a denial of service via attacker controlled input to wheel cli.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [0.38.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-4863_Pillow_6.2.2",
              "shortDescription": {
                "text": "[CVE-2023-4863] Pillow 6.2.2"
              },
              "help": {
                "text": "Heap buffer overflow in libwebp in Google Chrome prior to 116.0.5845.187 and libwebp 1.3.2 allowed a remote attacker to perform an out of bounds memory write via a crafted HTML page. (Chromium security severity: Critical)",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.8      | Not Applicable       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [10.0.1]   |"
              },
              "properties": {
                "security-severity": "8.8"
              }
            },
            {
              "id": "CVE-2023-0217_cryptography_3.3.1",
              "shortDescription": {
                "text": "[CVE-2023-0217] cryptography 3.3.1"
              },
              "help": {
                "text": "An invalid pointer dereference on read can be triggered when an\napplication tries to check a malformed DSA public key by the\nEVP_PKEY_public_check() function. This will most likely lead\nto an application crash. This function can be called on public\nkeys supplied from untrusted sources which could allow an attacker\nto cause a denial of service attack.\n\nThe TLS implementation in OpenSSL does not call this function\nbut applications might call the function if there are additional\nsecurity requirements imposed by standards such as FIPS 140-3.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [39.0.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-43804_urllib3_1.26.2",
              "shortDescription": {
                "text": "[CVE-2023-43804] urllib3 1.26.2"
              },
              "help": {
                "text": "urllib3 is a user-friendly HTTP client library for Python. urllib3 doesn't treat the `Cookie` HTTP header special or provide any helpers for managing cookies over HTTP, that is the responsibility of the user. However, it is possible for a user to specify a `Cookie` header and unknowingly leak information via HTTP redirects to a different origin if that user doesn't disable redirects explicitly. This issue has been patched in urllib3 version 1.26.17 or 2.0.5.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Applicable       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [1.26.17], [2.0.6]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2023-50782_cryptography_3.3.1",
              "shortDescription": {
                "text": "[CVE-2023-50782] cryptography 3.3.1"
              },
              "help": {
                "text": "A flaw was found in the python-cryptography package. This issue may allow a remote attacker to decrypt captured messages in TLS servers that use RSA key exchanges, which may lead to exposure of confidential or sensitive data.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [42.0.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-3996_cryptography_3.3.1",
              "shortDescription": {
                "text": "[CVE-2022-3996] cryptography 3.3.1"
              },
              "help": {
                "text": "If an X.509 certificate contains a malformed policy constraint and\npolicy processing is enabled, then a write lock will be taken twice\nrecursively.  On some operating systems (most widely: Windows) this\nresults in a denial of service when the affected process hangs.  Policy\nprocessing being enabled on a publicly facing server is not considered\nto be a common setup.\n\nPolicy processing is enabled by passing the `-policy'\nargument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.\n\nUpdate (31 March 2023): The description of the policy processing enablement\nwas corrected based on CVE-2023-0466.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [39.0.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-45198_Pillow_6.2.2",
              "shortDescription": {
                "text": "[CVE-2022-45198] Pillow 6.2.2"
              },
              "help": {
                "text": "Pillow before 9.2.0 performs Improper Handling of Highly Compressed GIF Data (Data Amplification).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [9.2.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-2309_lxml_4.6.2",
              "shortDescription": {
                "text": "[CVE-2022-2309] lxml 4.6.2"
              },
              "help": {
                "text": "NULL Pointer Dereference allows attackers to cause a denial of service (or application crash). This only applies when lxml is used together with libxml2 2.9.10 through 2.9.14. libxml2 2.9.9 and earlier are not affected. It allows triggering crashes through forged input data, given a vulnerable code sequence in the application. The vulnerability is caused by the iterwalk function (also used by the canonicalize function). Such code shouldn't be in wide-spread use, given that parsing + iterwalk would usually be replaced with the more efficient iterparse function. However, an XML converter that serialises to C14N would also be vulnerable, for example, and there are legitimate use cases for this code sequence. If untrusted input is received (also remotely) and processed via iterwalk function, a crash can be triggered.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [4.9.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0401_cryptography_3.3.1",
              "shortDescription": {
                "text": "[CVE-2023-0401] cryptography 3.3.1"
              },
              "help": {
                "text": "A NULL pointer can be dereferenced when signatures are being\nverified on PKCS7 signed or signedAndEnveloped data. In case the hash\nalgorithm used for the signature is known to the OpenSSL library but\nthe implementation of the hash algorithm is not available the digest\ninitialization will fail. There is a missing check for the return\nvalue from the initialization function which later leads to invalid\nusage of the digest API most likely leading to a crash.\n\nThe unavailability of an algorithm can be caused by using FIPS\nenabled configuration of providers or more commonly by not loading\nthe legacy provider.\n\nPKCS7 data is processed by the SMIME library calls and also by the\ntime stamp (TS) library calls. The TLS implementation in OpenSSL does\nnot call these functions however third party applications would be\naffected if they call these functions to verify signatures on untrusted\ndata.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [39.0.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-4807_cryptography_3.3.1",
              "shortDescription": {
                "text": "[CVE-2023-4807] cryptography 3.3.1"
              },
              "help": {
                "text": "Issue summary: The POLY1305 MAC (message authentication code) implementation\ncontains a bug that might corrupt the internal state of applications on the\nWindows 64 platform when running on newer X86_64 processors supporting the\nAVX512-IFMA instructions.\n\nImpact summary: If in an application that uses the OpenSSL library an attacker\ncan influence whether the POLY1305 MAC algorithm is used, the application\nstate might be corrupted with various application dependent consequences.\n\nThe POLY1305 MAC (message authentication code) implementation in OpenSSL does\nnot save the contents of non-volatile XMM registers on Windows 64 platform\nwhen calculating the MAC of data larger than 64 bytes. Before returning to\nthe caller all the XMM registers are set to zero rather than restoring their\nprevious content. The vulnerable code is used only on newer x86_64 processors\nsupporting the AVX512-IFMA instructions.\n\nThe consequences of this kind of internal application state corruption can\nbe various - from no consequences, if the calling application does not\ndepend on the contents of non-volatile XMM registers at all, to the worst\nconsequences, where the attacker could get complete control of the application\nprocess. However given the contents of the registers are just zeroized so\nthe attacker cannot put arbitrary values inside, the most likely consequence,\nif any, would be an incorrect result of some application dependent\ncalculations or a crash leading to a denial of service.\n\nThe POLY1305 MAC algorithm is most frequently used as part of the\nCHACHA20-POLY1305 AEAD (authenticated encryption with associated data)\nalgorithm. The most common usage of this AEAD cipher is with TLS protocol\nversions 1.2 and 1.3 and a malicious client can influence whether this AEAD\ncipher is used by the server. This implies that server applications using\nOpenSSL can be potentially impacted. However we are currently not aware of\nany concrete application that would be affected by this issue therefore we\nconsider this a Low severity security issue.\n\n...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Applicable       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [41.0.4]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2021-33503_urllib3_1.26.2",
              "shortDescription": {
                "text": "[CVE-2021-33503] urllib3 1.26.2"
              },
              "help": {
                "text": "An issue was discovered in urllib3 before 1.26.5. When provided with a URL containing many @ characters in the authority component, the authority regular expression exhibits catastrophic backtracking, causing a denial of service if a URL were passed as a parameter or redirected to via an HTTP redirect.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [1.26.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-4450_cryptography_3.3.1",
              "shortDescription": {
                "text": "[CVE-2022-4450] cryptography 3.3.1"
              },
              "help": {
                "text": "The function PEM_read_bio_ex() reads a PEM file from a BIO and parses and\ndecodes the \"name\" (e.g. \"CERTIFICATE\"), any header data and the payload data.\nIf the function succeeds then the \"name_out\", \"header\" and \"data\" arguments are\npopulated with pointers to buffers containing the relevant decoded data. The\ncaller is responsible for freeing those buffers. It is possible to construct a\nPEM file that results in 0 bytes of payload data. In this case PEM_read_bio_ex()\nwill return a failure code but will populate the header argument with a pointer\nto a buffer that has already been freed. If the caller also frees this buffer\nthen a double free will occur. This will most likely lead to a crash. This\ncould be exploited by an attacker who has the ability to supply malicious PEM\nfiles for parsing to achieve a denial of service attack.\n\nThe functions PEM_read_bio() and PEM_read() are simple wrappers around\nPEM_read_bio_ex() and therefore these functions are also directly affected.\n\nThese functions are also called indirectly by a number of other OpenSSL\nfunctions including PEM_X509_INFO_read_bio_ex() and\nSSL_CTX_use_serverinfo_file() which are also vulnerable. Some OpenSSL internal\nuses of these functions are not vulnerable because the caller does not free the\nheader argument if PEM_read_bio_ex() returns a failure code. These locations\ninclude the PEM_read_bio_TYPE() functions as well as the decoders introduced in\nOpenSSL 3.0.\n\nThe OpenSSL asn1parse command line application is also impacted by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [39.0.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0286_cryptography_3.3.1",
              "shortDescription": {
                "text": "[CVE-2023-0286] cryptography 3.3.1"
              },
              "help": {
                "text": "There is a type confusion vulnerability relating to X.400 address processing\ninside an X.509 GeneralName. X.400 addresses were parsed as an ASN1_STRING but\nthe public structure definition for GENERAL_NAME incorrectly specified the type\nof the x400Address field as ASN1_TYPE. This field is subsequently interpreted by\nthe OpenSSL function GENERAL_NAME_cmp as an ASN1_TYPE rather than an\nASN1_STRING.\n\nWhen CRL checking is enabled (i.e. the application sets the\nX509_V_FLAG_CRL_CHECK flag), this vulnerability may allow an attacker to pass\narbitrary pointers to a memcmp call, enabling them to read memory contents or\nenact a denial of service. In most cases, the attack requires the attacker to\nprovide both the certificate chain and CRL, neither of which need to have a\nvalid signature. If the attacker only controls one of these inputs, the other\ninput must already contain an X.400 address as a CRL distribution point, which\nis uncommon. As such, this vulnerability is most likely to only affect\napplications which have implemented their own functionality for retrieving CRLs\nover a network.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.4      | Not Applicable       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [39.0.1]   |"
              },
              "properties": {
                "security-severity": "7.4"
              }
            },
            {
              "id": "CVE-2022-40898_wheel_0.33.6",
              "shortDescription": {
                "text": "[CVE-2022-40898] wheel 0.33.6"
              },
              "help": {
                "text": "An issue discovered in Python Packaging Authority (PyPA) Wheel 0.37.1 and earlier allows remote attackers to cause a denial of service via attacker controlled input to wheel cli.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [0.38.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0216_cryptography_3.3.1",
              "shortDescription": {
                "text": "[CVE-2023-0216] cryptography 3.3.1"
              },
              "help": {
                "text": "An invalid pointer dereference on read can be triggered when an\napplication tries to load malformed PKCS7 data with the\nd2i_PKCS7(), d2i_PKCS7_bio() or d2i_PKCS7_fp() functions.\n\nThe result of the dereference is an application crash which could\nlead to a denial of service attack. The TLS implementation in OpenSSL\ndoes not call this function however third party applications might\ncall these functions on untrusted data.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [39.0.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-49083_cryptography_3.3.1",
              "shortDescription": {
                "text": "[CVE-2023-49083] cryptography 3.3.1"
              },
              "help": {
                "text": "cryptography is a package designed to expose cryptographic primitives and recipes to Python developers. Calling `load_pem_pkcs7_certificates` or `load_der_pkcs7_certificates` could lead to a NULL-pointer dereference and segfault. Exploitation of this vulnerability poses a serious risk of Denial of Service (DoS) for any application attempting to deserialize a PKCS7 blob/certificate. The consequences extend to potential disruptions in system availability and stability. This vulnerability has been patched in version 41.0.6.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [41.0.6]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-50447_Pillow_6.2.2",
              "shortDescription": {
                "text": "[CVE-2023-50447] Pillow 6.2.2"
              },
              "help": {
                "text": "Pillow through 10.1.0 allows PIL.ImageMath.eval Arbitrary Code Execution via the environment parameter, a different vulnerability than CVE-2022-22817 (which was about the expression parameter).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Applicable       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [10.2.0]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2021-43818_lxml_4.6.2",
              "shortDescription": {
                "text": "[CVE-2021-43818] lxml 4.6.2"
              },
              "help": {
                "text": "lxml is a library for processing XML and HTML in the Python language. Prior to version 4.6.5, the HTML Cleaner in lxml.html lets certain crafted script content pass through, as well as script content in SVG files embedded using data URIs. Users that employ the HTML cleaner in a security relevant context should upgrade to lxml 4.6.5 to receive a patch. There are no known workarounds available.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.1      | Not Applicable       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [4.6.5]   |"
              },
              "properties": {
                "security-severity": "7.1"
              }
            },
            {
              "id": "CVE-2022-40897_setuptools_44.1.1",
              "shortDescription": {
                "text": "[CVE-2022-40897] setuptools 44.1.1"
              },
              "help": {
                "text": "Python Packaging Authority (PyPA) setuptools before 65.5.1 allows remote attackers to cause a denial of service via HTML in a crafted package or custom PackageIndex page. There is a Regular Expression Denial of Service (ReDoS) in package_index.py.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Applicable       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [65.5.1]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2022-40897_setuptools_51.0.0",
              "shortDescription": {
                "text": "[CVE-2022-40897] setuptools 51.0.0"
              },
              "help": {
                "text": "Python Packaging Authority (PyPA) setuptools before 65.5.1 allows remote attackers to cause a denial of service via HTML in a crafted package or custom PackageIndex page. There is a Regular Expression Denial of Service (ReDoS) in package_index.py.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Applicable       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [65.5.1]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-2650_cryptography_3.3.1",
              "shortDescription": {
                "text": "[CVE-2023-2650] cryptography 3.3.1"
              },
              "help": {
                "text": "Issue summary: Processing some specially crafted ASN.1 object identifiers or\ndata containing them may be very slow.\n\nImpact summary: Applications that use OBJ_obj2txt() directly, or use any of\nthe OpenSSL subsystems OCSP, PKCS7/SMIME, CMS, CMP/CRMF or TS with no message\nsize limit may experience notable to very long delays when processing those\nmessages, which may lead to a Denial of Service.\n\nAn OBJECT IDENTIFIER is composed of a series of numbers - sub-identifiers -\nmost of which have no size limit.  OBJ_obj2txt() may be used to translate\nan ASN.1 OBJECT IDENTIFIER given in DER encoding form (using the OpenSSL\ntype ASN1_OBJECT) to its canonical numeric text form, which are the\nsub-identifiers of the OBJECT IDENTIFIER in decimal form, separated by\nperiods.\n\nWhen one of the sub-identifiers in the OBJECT IDENTIFIER is very large\n(these are sizes that are seen as absurdly large, taking up tens or hundreds\nof KiBs), the translation to a decimal number in text may take a very long\ntime.  The time complexity is O(n^2) with 'n' being the size of the\nsub-identifiers in bytes (*).\n\nWith OpenSSL 3.0, support to fetch cryptographic algorithms using names /\nidentifiers in string form was introduced.  This includes using OBJECT\nIDENTIFIERs in canonical numeric text form as identifiers for fetching\nalgorithms.\n\nSuch OBJECT IDENTIFIERs may be received through the ASN.1 structure\nAlgorithmIdentifier, which is commonly used in multiple protocols to specify\nwhat cryptographic algorithm should be used to sign or verify, encrypt or\ndecrypt, or digest passed data.\n\nApplications that call OBJ_obj2txt() directly with untrusted data are\naffected, with any version of OpenSSL.  If the use is for the mere purpose\nof display, the severity is considered low.\n\nIn OpenSSL 3.0 and newer, this affects the subsystems OCSP, PKCS7/SMIME,\nCMS, CMP/CRMF or TS.  It also impacts anything that processes X.509\ncertificates, including simple things like verifying its signature.\n\nThe impact on TLS is relatively low, because all versions of OpenSSL...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Applicable       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [41.0.0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2024-28219_Pillow_6.2.2",
              "shortDescription": {
                "text": "[CVE-2024-28219] Pillow 6.2.2"
              },
              "help": {
                "text": "In _imagingcms.c in Pillow before 10.3.0, a buffer overflow exists because strcpy is used instead of strncpy.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.7      | Not Applicable       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [10.3.0]   |"
              },
              "properties": {
                "security-severity": "6.7"
              }
            },
            {
              "id": "CVE-2022-40897_setuptools_43.0.0",
              "shortDescription": {
                "text": "[CVE-2022-40897] setuptools 43.0.0"
              },
              "help": {
                "text": "Python Packaging Authority (PyPA) setuptools before 65.5.1 allows remote attackers to cause a denial of service via HTML in a crafted package or custom PackageIndex page. There is a Regular Expression Denial of Service (ReDoS) in package_index.py.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Applicable       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [65.5.1]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-32681_requests_2.25.1",
              "shortDescription": {
                "text": "[CVE-2023-32681] requests 2.25.1"
              },
              "help": {
                "text": "Requests is a HTTP library. Since Requests 2.3.0, Requests has been leaking Proxy-Authorization headers to destination servers when redirected to an HTTPS endpoint. This is a product of how we use `rebuild_proxies` to reattach the `Proxy-Authorization` header to requests. For HTTP connections sent through the tunnel, the proxy will identify the header in the request itself and remove it prior to forwarding to the destination server. However when sent over HTTPS, the `Proxy-Authorization` header must be sent in the CONNECT request as the proxy has no visibility into the tunneled request. This results in Requests forwarding proxy credentials to the destination server unintentionally, allowing a malicious actor to potentially exfiltrate sensitive information. This issue has been patched in version 2.31.0.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Applicable       | `sha256__cc81a2d1403603703d11ec9d6098382f81a3aced52e74d7d9d3b7a7bb1b2f282.tar `       | [2.31.0]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2022-40897_setuptools_50.3.2",
              "shortDescription": {
                "text": "[CVE-2022-40897] setuptools 50.3.2"
              },
              "help": {
                "text": "Python Packaging Authority (PyPA) setuptools before 65.5.1 allows remote attackers to cause a denial of service via HTML in a crafted package or custom PackageIndex page. There is a Regular Expression Denial of Service (ReDoS) in package_index.py.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Applicable       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [65.5.1]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2022-40897_setuptools_41.2.0",
              "shortDescription": {
                "text": "[CVE-2022-40897] setuptools 41.2.0"
              },
              "help": {
                "text": "Python Packaging Authority (PyPA) setuptools before 65.5.1 allows remote attackers to cause a denial of service via HTML in a crafted package or custom PackageIndex page. There is a Regular Expression Denial of Service (ReDoS) in package_index.py.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Applicable       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [65.5.1]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2021-28363_urllib3_1.26.2",
              "shortDescription": {
                "text": "[CVE-2021-28363] urllib3 1.26.2"
              },
              "help": {
                "text": "The urllib3 library 1.26.x before 1.26.4 for Python omits SSL certificate validation in some cases involving HTTPS to HTTPS proxies. The initial connection to the HTTPS proxy (if an SSLContext isn't given via proxy_config) doesn't verify the hostname of the certificate. This means certificates for different servers that still validate properly with the default urllib3 SSLContext will be silently accepted.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Applicable       | `sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar `       | [1.26.4]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            }
          ],
          "version": "3.96.1"
        }
      },
      "results": [
        {
          "ruleId": "CVE-2023-37920_certifi_2020.12.5",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "[CVE-2023-37920] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-34552_Pillow_6.2.2",
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "[CVE-2021-34552] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-25288_Pillow_6.2.2",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "[CVE-2021-25288] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-25287_Pillow_6.2.2",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "text": "[CVE-2021-25287] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-36242_cryptography_3.3.1",
          "ruleIndex": 4,
          "level": "error",
          "message": {
            "text": "[CVE-2020-36242] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23491_certifi_2020.12.5",
          "ruleIndex": 5,
          "level": "error",
          "message": {
            "text": "[CVE-2022-23491] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-11538_Pillow_6.2.2",
          "ruleIndex": 6,
          "level": "error",
          "message": {
            "text": "[CVE-2020-11538] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-28676_Pillow_6.2.2",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "[CVE-2021-28676] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-28677_Pillow_6.2.2",
          "ruleIndex": 8,
          "level": "error",
          "message": {
            "text": "[CVE-2021-28677] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-27923_Pillow_6.2.2",
          "ruleIndex": 9,
          "level": "error",
          "message": {
            "text": "[CVE-2021-27923] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-25291_Pillow_6.2.2",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "[CVE-2021-25291] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-27922_Pillow_6.2.2",
          "ruleIndex": 11,
          "level": "error",
          "message": {
            "text": "[CVE-2021-27922] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-23437_Pillow_6.2.2",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "[CVE-2021-23437] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-10379_Pillow_6.2.2",
          "ruleIndex": 13,
          "level": "error",
          "message": {
            "text": "[CVE-2020-10379] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-25290_Pillow_6.2.2",
          "ruleIndex": 14,
          "level": "error",
          "message": {
            "text": "[CVE-2021-25290] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-20916_pip_19.1.1",
          "ruleIndex": 15,
          "level": "error",
          "message": {
            "text": "[CVE-2019-20916] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-35653_Pillow_6.2.2",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "[CVE-2020-35653] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-27921_Pillow_6.2.2",
          "ruleIndex": 17,
          "level": "error",
          "message": {
            "text": "[CVE-2021-27921] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-25293_Pillow_6.2.2",
          "ruleIndex": 18,
          "level": "error",
          "message": {
            "text": "[CVE-2021-25293] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-35654_Pillow_6.2.2",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "[CVE-2020-35654] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-20225_pip_20.3.1",
          "ruleIndex": 20,
          "level": "error",
          "message": {
            "text": "[CVE-2018-20225] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-20225_pip_19.1.1",
          "ruleIndex": 21,
          "level": "error",
          "message": {
            "text": "[CVE-2018-20225] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-20225_pip_19.2.3",
          "ruleIndex": 22,
          "level": "error",
          "message": {
            "text": "[CVE-2018-20225] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-20225_pip_20.3.3",
          "ruleIndex": 23,
          "level": "error",
          "message": {
            "text": "[CVE-2018-20225] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-48795_paramiko_2.7.2",
          "ruleIndex": 24,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-48795] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-22815_Pillow_6.2.2",
          "ruleIndex": 25,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-22815] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4203_cryptography_3.3.1",
          "ruleIndex": 26,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-4203] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-35195_requests_2.25.1",
          "ruleIndex": 27,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-35195] sha256__cc81a2d1403603703d11ec9d6098382f81a3aced52e74d7d9d3b7a7bb1b2f282.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-28957_lxml_4.6.2",
          "ruleIndex": 28,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-28957] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-23931_cryptography_3.3.1",
          "ruleIndex": 29,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-23931] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-28678_Pillow_6.2.2",
          "ruleIndex": 30,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-28678] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3572_pip_20.3.1",
          "ruleIndex": 31,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-3572] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-0727_cryptography_3.3.1",
          "ruleIndex": 32,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-0727] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3572_pip_19.1.1",
          "ruleIndex": 33,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-3572] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-10177_Pillow_6.2.2",
          "ruleIndex": 34,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-10177] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-28675_Pillow_6.2.2",
          "ruleIndex": 35,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-28675] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3572_pip_20.3.3",
          "ruleIndex": 36,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-3572] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-10378_Pillow_6.2.2",
          "ruleIndex": 37,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-10378] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-37891_urllib3_1.26.2",
          "ruleIndex": 38,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-37891] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3572_pip_19.2.3",
          "ruleIndex": 39,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-3572] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-25292_Pillow_6.2.2",
          "ruleIndex": 40,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-25292] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-35655_Pillow_6.2.2",
          "ruleIndex": 41,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-35655] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-22816_Pillow_6.2.2",
          "ruleIndex": 42,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-22816] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-10994_Pillow_6.2.2",
          "ruleIndex": 43,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-10994] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4304_cryptography_3.3.1",
          "ruleIndex": 44,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-4304] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-36810_PyPDF2_1.24",
          "ruleIndex": 45,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-36810] sha256__cc81a2d1403603703d11ec9d6098382f81a3aced52e74d7d9d3b7a7bb1b2f282.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3446_cryptography_3.3.1",
          "ruleIndex": 46,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3446] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24859_PyPDF2_1.24",
          "ruleIndex": 47,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-24859] sha256__cc81a2d1403603703d11ec9d6098382f81a3aced52e74d7d9d3b7a7bb1b2f282.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45803_urllib3_1.26.2",
          "ruleIndex": 48,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45803] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5752_pip_19.1.1",
          "ruleIndex": 49,
          "level": "note",
          "message": {
            "text": "[CVE-2023-5752] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5752_pip_19.2.3",
          "ruleIndex": 50,
          "level": "note",
          "message": {
            "text": "[CVE-2023-5752] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5752_pip_20.3.1",
          "ruleIndex": 51,
          "level": "note",
          "message": {
            "text": "[CVE-2023-5752] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5752_pip_20.3.3",
          "ruleIndex": 52,
          "level": "note",
          "message": {
            "text": "[CVE-2023-5752] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24303_Pillow_6.2.2",
          "ruleIndex": 53,
          "level": "error",
          "message": {
            "text": "[CVE-2022-24303] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-22817_Pillow_6.2.2",
          "ruleIndex": 54,
          "level": "error",
          "message": {
            "text": "[CVE-2022-22817] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-44271_Pillow_6.2.2",
          "ruleIndex": 55,
          "level": "error",
          "message": {
            "text": "[CVE-2023-44271] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0215_cryptography_3.3.1",
          "ruleIndex": 56,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0215] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-40898_wheel_0.36.1",
          "ruleIndex": 57,
          "level": "error",
          "message": {
            "text": "[CVE-2022-40898] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-4863_Pillow_6.2.2",
          "ruleIndex": 58,
          "level": "error",
          "message": {
            "text": "[CVE-2023-4863] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0217_cryptography_3.3.1",
          "ruleIndex": 59,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0217] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-43804_urllib3_1.26.2",
          "ruleIndex": 60,
          "level": "error",
          "message": {
            "text": "[CVE-2023-43804] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-50782_cryptography_3.3.1",
          "ruleIndex": 61,
          "level": "error",
          "message": {
            "text": "[CVE-2023-50782] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-3996_cryptography_3.3.1",
          "ruleIndex": 62,
          "level": "error",
          "message": {
            "text": "[CVE-2022-3996] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-45198_Pillow_6.2.2",
          "ruleIndex": 63,
          "level": "error",
          "message": {
            "text": "[CVE-2022-45198] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2309_lxml_4.6.2",
          "ruleIndex": 64,
          "level": "error",
          "message": {
            "text": "[CVE-2022-2309] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0401_cryptography_3.3.1",
          "ruleIndex": 65,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0401] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-4807_cryptography_3.3.1",
          "ruleIndex": 66,
          "level": "error",
          "message": {
            "text": "[CVE-2023-4807] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-33503_urllib3_1.26.2",
          "ruleIndex": 67,
          "level": "error",
          "message": {
            "text": "[CVE-2021-33503] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4450_cryptography_3.3.1",
          "ruleIndex": 68,
          "level": "error",
          "message": {
            "text": "[CVE-2022-4450] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0286_cryptography_3.3.1",
          "ruleIndex": 69,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0286] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-40898_wheel_0.33.6",
          "ruleIndex": 70,
          "level": "error",
          "message": {
            "text": "[CVE-2022-40898] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0216_cryptography_3.3.1",
          "ruleIndex": 71,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0216] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-49083_cryptography_3.3.1",
          "ruleIndex": 72,
          "level": "error",
          "message": {
            "text": "[CVE-2023-49083] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-50447_Pillow_6.2.2",
          "ruleIndex": 73,
          "level": "error",
          "message": {
            "text": "[CVE-2023-50447] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-43818_lxml_4.6.2",
          "ruleIndex": 74,
          "level": "error",
          "message": {
            "text": "[CVE-2021-43818] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-40897_setuptools_44.1.1",
          "ruleIndex": 75,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-40897] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-40897_setuptools_51.0.0",
          "ruleIndex": 76,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-40897] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-2650_cryptography_3.3.1",
          "ruleIndex": 77,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-2650] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-28219_Pillow_6.2.2",
          "ruleIndex": 78,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-28219] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-40897_setuptools_43.0.0",
          "ruleIndex": 79,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-40897] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-32681_requests_2.25.1",
          "ruleIndex": 80,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-32681] sha256__cc81a2d1403603703d11ec9d6098382f81a3aced52e74d7d9d3b7a7bb1b2f282.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-40897_setuptools_50.3.2",
          "ruleIndex": 81,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-40897] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-40897_setuptools_41.2.0",
          "ruleIndex": 82,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-40897] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-28363_urllib3_1.26.2",
          "ruleIndex": 83,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-28363] sha256__a7e4f26f82e817b93ef4ea59389a9b1bc49556e8cf012b5306430eefa7e9738a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://jfrog.com/help/r/jfrog-security-documentation/jfrog-advanced-security",
          "name": "JFrog Applicability Scanner",
          "rules": [
            {
              "id": "applic_CVE-2022-3996",
              "name": "CVE-2022-3996",
              "shortDescription": {
                "text": "Scanner for CVE-2022-3996"
              },
              "fullDescription": {
                "text": "The vulnerability is only exploitable when running under the Windows OS.\nSince currently only Linux containers are supported, the scanner will always conclude that this vulnerability is not applicable.",
                "markdown": "The vulnerability is only exploitable when running under the Windows OS.\nSince currently only Linux containers are supported, the scanner will always conclude that this vulnerability is not applicable."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-4807",
              "name": "CVE-2023-4807",
              "shortDescription": {
                "text": "Scanner for CVE-2023-4807"
              },
              "fullDescription": {
                "text": "The vulnerability is only exploitable when running under the Windows OS.\nSince currently only Linux containers are supported, the scanner will always conclude that this vulnerability is not applicable.",
                "markdown": "The vulnerability is only exploitable when running under the Windows OS.\nSince currently only Linux containers are supported, the scanner will always conclude that this vulnerability is not applicable."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-28363",
              "name": "CVE-2021-28363",
              "shortDescription": {
                "text": "Scanner for CVE-2021-28363"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `HTTPSConnection.connect` is called.",
                "markdown": "The scanner checks whether the vulnerable function `HTTPSConnection.connect` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-43818",
              "name": "CVE-2021-43818",
              "shortDescription": {
                "text": "Scanner for CVE-2021-43818"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable class `html.clean.Cleaner` is referenced.",
                "markdown": "The scanner checks whether the vulnerable class `html.clean.Cleaner` is referenced."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-22817",
              "name": "CVE-2022-22817",
              "shortDescription": {
                "text": "Scanner for CVE-2022-22817"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `ImageMath.eval` is called with external input to its 1st (`expression`) argument.",
                "markdown": "The scanner checks whether the vulnerable function `ImageMath.eval` is called with external input to its 1st (`expression`) argument."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-40897",
              "name": "CVE-2022-40897",
              "shortDescription": {
                "text": "Scanner for CVE-2022-40897"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `find_external_links` is called.\n\nNote that the scanner does not check for an additional vulnerable case in which the `pip` CLI tool is executed with the  `--editable` flag. In this case, the vulnerability will lead to a DoS of a forked command-line utility, which has a minimal security impact.",
                "markdown": "The scanner checks whether the vulnerable function `find_external_links` is called.\n\nNote that the scanner does not check for an additional vulnerable case in which the `pip` CLI tool is executed with the  `--editable` flag. In this case, the vulnerability will lead to a DoS of a forked command-line utility, which has a minimal security impact."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-45198",
              "name": "CVE-2022-45198",
              "shortDescription": {
                "text": "Scanner for CVE-2022-45198"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-4450",
              "name": "CVE-2022-4450",
              "shortDescription": {
                "text": "Scanner for CVE-2022-4450"
              },
              "fullDescription": {
                "text": "The scanner checks if at least one of the vulnerable functions is called:\n```\nPEM_read_bio_ex()\nPEM_read_bio()\nPEM_read()\nPEM_read_DHparams()\nPEM_read_PrivateKey()\nPEM_read_bio_PrivateKey()\nPEM_read_RSA_PUBKEY()\nPEM_read_bio_RSA_PUBKEY()\nPEM_read_RSAPrivateKey()\nPEM_read_bio_RSAPrivateKey()\nPEM_read_PKCS7()\nPEM_read_bio_PKCS7()\nPEM_read_X509()\nPEM_read_bio_X509()\nPEM_read_X509_AUX()\nPEM_read_bio_X509_AUX()\nPEM_read_X509_CRL()\nPEM_read_bio_X509_CRL()\nPEM_read_bio_X509_REQ()\nPEM_read_bio_ECPrivateKey()\nPEM_read_bio_PKCS8()\n\nPEM_X509_INFO_read_bio_ex()\nSSL_CTX_use_serverinfo_file()\nSSL_use_cert_and_key() \nSSL_CTX_use_certificate_chain_file()\nSSL_CTX_load_verify_locations()\nSSL_CTX_set1_verify_file()\nSSL_CTX_set1_verify_path()\nX509_LOOKUP_load_file()\n\nSSL_load_client_CA_file_ex()\nSSL_load_client_CA_file()\nSSL_add_file_cert_subjects_to_stack()\nSSL_add_dir_cert_subjects_to_stack()\nSSL_add_store_cert_subjects_to_stack()\n\nuse_certificate_chain_file\nSSL_use_certificate_file\nSSL_CTX_use_certificate_file\nSSL_use_PrivateKey_file\nSSL_CTX_use_PrivateKey_file\nSSL_CTX_use_serverinfo_file\n\nSSL_use_RSAPrivateKey_file\nSSL_CTX_use_RSAPrivateKey_file\n```\n\nNote that while the vulnerability is also exploitable through the use of the command line tool `openssl asn1parse`, the vulnerability's DoS impact in this case does not pose a threat, since the DoS will crash the forked `openssl` tool process only",
                "markdown": "The scanner checks if at least one of the vulnerable functions is called:\n```\nPEM_read_bio_ex()\nPEM_read_bio()\nPEM_read()\nPEM_read_DHparams()\nPEM_read_PrivateKey()\nPEM_read_bio_PrivateKey()\nPEM_read_RSA_PUBKEY()\nPEM_read_bio_RSA_PUBKEY()\nPEM_read_RSAPrivateKey()\nPEM_read_bio_RSAPrivateKey()\nPEM_read_PKCS7()\nPEM_read_bio_PKCS7()\nPEM_read_X509()\nPEM_read_bio_X509()\nPEM_read_X509_AUX()\nPEM_read_bio_X509_AUX()\nPEM_read_X509_CRL()\nPEM_read_bio_X509_CRL()\nPEM_read_bio_X509_REQ()\nPEM_read_bio_ECPrivateKey()\nPEM_read_bio_PKCS8()\n\nPEM_X509_INFO_read_bio_ex()\nSSL_CTX_use_serverinfo_file()\nSSL_use_cert_and_key() \nSSL_CTX_use_certificate_chain_file()\nSSL_CTX_load_verify_locations()\nSSL_CTX_set1_verify_file()\nSSL_CTX_set1_verify_path()\nX509_LOOKUP_load_file()\n\nSSL_load_client_CA_file_ex()\nSSL_load_client_CA_file()\nSSL_add_file_cert_subjects_to_stack()\nSSL_add_dir_cert_subjects_to_stack()\nSSL_add_store_cert_subjects_to_stack()\n\nuse_certificate_chain_file\nSSL_use_certificate_file\nSSL_CTX_use_certificate_file\nSSL_use_PrivateKey_file\nSSL_CTX_use_PrivateKey_file\nSSL_CTX_use_serverinfo_file\n\nSSL_use_RSAPrivateKey_file\nSSL_CTX_use_RSAPrivateKey_file\n```\n\nNote that while the vulnerability is also exploitable through the use of the command line tool `openssl asn1parse`, the vulnerability's DoS impact in this case does not pose a threat, since the DoS will crash the forked `openssl` tool process only"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0215",
              "name": "CVE-2023-0215",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0215"
              },
              "fullDescription": {
                "text": "The scanner checks if at least one of the vulnerable functions is called:\n```\nPEM_write_bio_ASN1_stream()\nPEM_write_bio_CMS_stream()\nPEM_write_bio_PKCS7_stream()\nSMIME_write_ASN1()\nSMIME_write_CMS()\nSMIME_write_PKCS7()\nBIO_new_CMS()\nBIO_new_PKCS7()\ni2d_CMS_bio_stream()\ni2d_PKCS7_bio_stream()\ni2d_ASN1_bio_stream()\nBIO_new_NDEF()\n```",
                "markdown": "The scanner checks if at least one of the vulnerable functions is called:\n```\nPEM_write_bio_ASN1_stream()\nPEM_write_bio_CMS_stream()\nPEM_write_bio_PKCS7_stream()\nSMIME_write_ASN1()\nSMIME_write_CMS()\nSMIME_write_PKCS7()\nBIO_new_CMS()\nBIO_new_PKCS7()\ni2d_CMS_bio_stream()\ni2d_PKCS7_bio_stream()\ni2d_ASN1_bio_stream()\nBIO_new_NDEF()\n```"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0217",
              "name": "CVE-2023-0217",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0217"
              },
              "fullDescription": {
                "text": "When checking ELF files, the scanner checks whether the vulnerable `EVP_PKEY_public_check()` function is called.\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked",
                "markdown": "When checking ELF files, the scanner checks whether the vulnerable `EVP_PKEY_public_check()` function is called.\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0286",
              "name": "CVE-2023-0286",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0286"
              },
              "fullDescription": {
                "text": "The scanner checks if at least one of the vulnerable API calls is called:\n\n* `X509_STORE_CTX_get_check_revocation`\n* `X509_STORE_get_check_revocation`\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The CRL checking option must also be enabled.",
                "markdown": "The scanner checks if at least one of the vulnerable API calls is called:\n\n* `X509_STORE_CTX_get_check_revocation`\n* `X509_STORE_get_check_revocation`\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The CRL checking option must also be enabled."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0401",
              "name": "CVE-2023-0401",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0401"
              },
              "fullDescription": {
                "text": "When checking ELF files, the scanner checks whether at least one of the vulnerable API calls is called:\n\n* `PKCS7_decrypt`\n* `PKCS7_dataInit`\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked",
                "markdown": "When checking ELF files, the scanner checks whether at least one of the vulnerable API calls is called:\n\n* `PKCS7_decrypt`\n* `PKCS7_dataInit`\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-40898",
              "name": "CVE-2022-40898",
              "shortDescription": {
                "text": "Scanner for CVE-2022-40898"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following functions are called:\n\n- `wheelfile.WheelFile()` with user-controlled input to its `1st` (`file`) argument\n- `cli.unpack_f()`\n- `cli.pack_f()`\n- `cli.convert_f()`\n\nNote: The scanner does not check for wheel command line execution because a ReDoS attack on a forked process is not considered a security issue.",
                "markdown": "The scanner checks whether any of the following functions are called:\n\n- `wheelfile.WheelFile()` with user-controlled input to its `1st` (`file`) argument\n- `cli.unpack_f()`\n- `cli.pack_f()`\n- `cli.convert_f()`\n\nNote: The scanner does not check for wheel command line execution because a ReDoS attack on a forked process is not considered a security issue."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-23491",
              "name": "CVE-2022-23491",
              "shortDescription": {
                "text": "Scanner for CVE-2022-23491"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `certifi.where()` is called, or if any of the following functions are called with the `verify` argument set to false:\n\n* `requests.get()` \n* `requests.options()`\n* `requests.head()`\n* `requests.post()`\n* `requests.put()`\n* `requests.patch()`\n* `requests.delete()`",
                "markdown": "The scanner checks whether the vulnerable function `certifi.where()` is called, or if any of the following functions are called with the `verify` argument set to false:\n\n* `requests.get()` \n* `requests.options()`\n* `requests.head()`\n* `requests.post()`\n* `requests.put()`\n* `requests.patch()`\n* `requests.delete()`"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-37920",
              "name": "CVE-2023-37920",
              "shortDescription": {
                "text": "Scanner for CVE-2023-37920"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `certifi.where()` is called, or if any of the following functions are called with the `verify` argument set to false:\n\n* `requests.get()` \n* `requests.options()`\n* `requests.head()`\n* `requests.post()`\n* `requests.put()`\n* `requests.patch()`\n* `requests.delete()`",
                "markdown": "The scanner checks whether the vulnerable function `certifi.where()` is called, or if any of the following functions are called with the `verify` argument set to false:\n\n* `requests.get()` \n* `requests.options()`\n* `requests.head()`\n* `requests.post()`\n* `requests.put()`\n* `requests.patch()`\n* `requests.delete()`"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-32681",
              "name": "CVE-2023-32681",
              "shortDescription": {
                "text": "Scanner for CVE-2023-32681"
              },
              "fullDescription": {
                "text": "The scanner checks for any of the following usages of the library `requests`.\nCalls for the vulnerable function:\n\n* `requests.Session.rebuild_proxies`\n\nOr, calls for the following vulnerable functions that have the `proxies` argument, but not the `allow_redirects` argument set to false:\n\n* `requests.request`\n* `requests.get`\n* `requests.options`\n* `requests.head`\n* `requests.post`\n* `requests.put`\n* `requests.patch`\n* `requests.delete`\n* `requests.send`\n* `requests.Session.request`\n* `requests.Session.get`\n* `requests.Session.options`\n* `requests.Session.head`\n* `requests.Session.post`\n* `requests.Session.put`\n* `requests.Session.patch`\n* `requests.Session.delete`\n* `requests.Session.send`\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: the proxy should have authorization information in its URL (e.g. `https://username:password@proxy:8080`).",
                "markdown": "The scanner checks for any of the following usages of the library `requests`.\nCalls for the vulnerable function:\n\n* `requests.Session.rebuild_proxies`\n\nOr, calls for the following vulnerable functions that have the `proxies` argument, but not the `allow_redirects` argument set to false:\n\n* `requests.request`\n* `requests.get`\n* `requests.options`\n* `requests.head`\n* `requests.post`\n* `requests.put`\n* `requests.patch`\n* `requests.delete`\n* `requests.send`\n* `requests.Session.request`\n* `requests.Session.get`\n* `requests.Session.options`\n* `requests.Session.head`\n* `requests.Session.post`\n* `requests.Session.put`\n* `requests.Session.patch`\n* `requests.Session.delete`\n* `requests.Session.send`\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: the proxy should have authorization information in its URL (e.g. `https://username:password@proxy:8080`)."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-4863",
              "name": "CVE-2023-4863",
              "shortDescription": {
                "text": "Scanner for CVE-2023-4863"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `WebPDecodeRGB`\n* `WebPDecodeARGB`\n* `WebPDecodeBGR`\n* `WebPDecodeBGRA`\n* `WebPDecodeRGBA`\n* `WebPDecodeYUV`\n* `WebPDecode`\n* `WebPDecodeARGBInto`\n* `WebPDecodeBGRAInto`\n* `WebPDecodeBGRInto`\n* `WebPDecodeRGBAInto`\n* `WebPDecodeRGBInto`\n* `WebPDecodeYUVInto`\n* `WebPIAppend`\n* `WebPIUpdate`",
                "markdown": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `WebPDecodeRGB`\n* `WebPDecodeARGB`\n* `WebPDecodeBGR`\n* `WebPDecodeBGRA`\n* `WebPDecodeRGBA`\n* `WebPDecodeYUV`\n* `WebPDecode`\n* `WebPDecodeARGBInto`\n* `WebPDecodeBGRAInto`\n* `WebPDecodeBGRInto`\n* `WebPDecodeRGBAInto`\n* `WebPDecodeRGBInto`\n* `WebPDecodeYUVInto`\n* `WebPIAppend`\n* `WebPIUpdate`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-43804",
              "name": "CVE-2023-43804",
              "shortDescription": {
                "text": "Scanner for CVE-2023-43804"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are called, with a `headers` argument and `redirect` argument is not set to `False`:\n\n* `urllib3.request()`\n* `urllib3.request_encode_url()`\n* `urllib3.request_encode_body()`\n* `urllib3.urlopen()`\n* `urllib3.PoolManager().request()`\n* `urllib3.PoolManager().request_encode_url()`\n* `urllib3.PoolManager().request_encode_body()`\n* `urllib3.PoolManager().urlopen()`",
                "markdown": "The scanner checks whether any of the following vulnerable functions are called, with a `headers` argument and `redirect` argument is not set to `False`:\n\n* `urllib3.request()`\n* `urllib3.request_encode_url()`\n* `urllib3.request_encode_body()`\n* `urllib3.urlopen()`\n* `urllib3.PoolManager().request()`\n* `urllib3.PoolManager().request_encode_url()`\n* `urllib3.PoolManager().request_encode_body()`\n* `urllib3.PoolManager().urlopen()`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-2309",
              "name": "CVE-2022-2309",
              "shortDescription": {
                "text": "Scanner for CVE-2022-2309"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are called:\n\nVulnerable libxml2 functions - \n\n* `xmlCtxtReset`\n* `xmlCtxtResetPush`\n* `xmlCtxtReadFile`\n* `xmlCtxtReadMemory`\n* `xmlCtxtReadFd`\n* `xmlCtxtReadIO`\n* `xmlClearParserCtxt`\n* `xmlSchemaParseImport`\n* `xmlSchemaParseSchemaTopLevel`\n* `xmlSchemaParseIncludeOrRedefine`\n* `xmlReaderForFd`\n* `xmlReaderForIO`\n* `xmlReaderNewFd`\n* `xmlReaderNewIO`\n* `xmlSetupParserForBuffer`\n\nAnd also the vulnerable lxml Python functions:\n\n* `iterwalk`\n* `canonicalize`",
                "markdown": "The scanner checks whether any of the following vulnerable functions are called:\n\nVulnerable libxml2 functions - \n\n* `xmlCtxtReset`\n* `xmlCtxtResetPush`\n* `xmlCtxtReadFile`\n* `xmlCtxtReadMemory`\n* `xmlCtxtReadFd`\n* `xmlCtxtReadIO`\n* `xmlClearParserCtxt`\n* `xmlSchemaParseImport`\n* `xmlSchemaParseSchemaTopLevel`\n* `xmlSchemaParseIncludeOrRedefine`\n* `xmlReaderForFd`\n* `xmlReaderForIO`\n* `xmlReaderNewFd`\n* `xmlReaderNewIO`\n* `xmlSetupParserForBuffer`\n\nAnd also the vulnerable lxml Python functions:\n\n* `iterwalk`\n* `canonicalize`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0216",
              "name": "CVE-2023-0216",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0216"
              },
              "fullDescription": {
                "text": "When checking ELF files, the scanner checks if at least one of the vulnerable functions is called:\n\n* `d2i_PKCS7()`\n* `d2i_PKCS7_bio()`\n* `d2i_PKCS7_fp()`\n\nWhen checking Python files, the scanner checks if at least one of the vulnerable functions is called with external input to its 1st (`bytes`) argument:\n\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_der_pkcs7_certificates`\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_pem_pkcs7_certificates`",
                "markdown": "When checking ELF files, the scanner checks if at least one of the vulnerable functions is called:\n\n* `d2i_PKCS7()`\n* `d2i_PKCS7_bio()`\n* `d2i_PKCS7_fp()`\n\nWhen checking Python files, the scanner checks if at least one of the vulnerable functions is called with external input to its 1st (`bytes`) argument:\n\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_der_pkcs7_certificates`\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_pem_pkcs7_certificates`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-2650",
              "name": "CVE-2023-2650",
              "shortDescription": {
                "text": "Scanner for CVE-2023-2650"
              },
              "fullDescription": {
                "text": "When checking ELF files, the scanner checks whether one of the following function is called with an external input:\n\n* Direct call to `OBJ_obj2txt()` function (for OpenSSL 1.x and OpenSSL 3.x)\n\n**Only for OpenSSL 3.x:**\n\n* OCSP: `OCSP_basic_verify()`\n\n* PKCS7/SMIME:\n`PKCS7_decrypt()`\n`PKCS7_sign()`\n`PKCS7_verify()`\n\n* CMS:\n`CMS_EncryptedData_decrypt()`\n`CMS_EncryptedData_encrypt()`\n`CMS_EnvelopedData_decrypt()`\n`CMS_final()`\n`CMS_decrypt_set1_password()`\n`CMS_RecipientInfo_decrypt()`\n`CMS_decrypt()`\n`CMS_decrypt_set1_pkey()`\n`CMS_decrypt_set1_pkey_and_peer()`\n`CMS_SignedData_verify()`\n`CMS_verify()`\n`CMS_SignerInfo_verify()`\n`CMS_compress()`\n`CMS_data_create()`\n`CMS_data_create_ex()`\n`CMS_digest_create()`\n`CMS_digest_create_ex()`\n`CMS_digest_verify()`\n`CMS_encrypt()`\n`CMS_encrypt_ex()`\n`CMS_final_digest()`\n`CMS_sign()`\n`CMS_sign_ex()`\n`CMS_add1_signer()`\n`CMS_sign_receipt()`\n`CMS_uncompress()`\n`CMS_verify_receipt()`\n\n* CMP/CRMF:\n`OSSL_CMP_get_caCerts()`\n`OSSL_CRMF_ENCRYPTEDVALUE_get1_encCert()`\n`OSSL_CRMF_pbm_new()`\n\n* TS:\n`TS_REQ_print_bio()`\n`TS_OBJ_print_bio()`\n`TS_RESP_create_response()`\n`TS_RESP_print_bio()`\n`TS_RESP_verify_response()`\n`TS_RESP_verify_token()`\n\n* ASN1:\n`ASN1_parse()`\n`X509_NAME_print_ex()`\n`X509_NAME_print_ex_fp()`\n`d2i_AutoPrivateKey()`\n`d2i_PrivateKey()`\n`X509_STORE_CTX_print_verify_cb()`\n`x509_pubkey_ex_d2i_ex()`\n\n* EVP:\n`EVP_PKCS82PKEY()`\n`EVP_PKCS82PKEY_ex()`\n`PKCS5_v2_PBE_keyivgen()`\n`PKCS5_v2_PBE_keyivgen_ex()`\n\n* ESS:\n`OSSL_ESS_check_signing_certs()`\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked",
                "markdown": "When checking ELF files, the scanner checks whether one of the following function is called with an external input:\n\n* Direct call to `OBJ_obj2txt()` function (for OpenSSL 1.x and OpenSSL 3.x)\n\n**Only for OpenSSL 3.x:**\n\n* OCSP: `OCSP_basic_verify()`\n\n* PKCS7/SMIME:\n`PKCS7_decrypt()`\n`PKCS7_sign()`\n`PKCS7_verify()`\n\n* CMS:\n`CMS_EncryptedData_decrypt()`\n`CMS_EncryptedData_encrypt()`\n`CMS_EnvelopedData_decrypt()`\n`CMS_final()`\n`CMS_decrypt_set1_password()`\n`CMS_RecipientInfo_decrypt()`\n`CMS_decrypt()`\n`CMS_decrypt_set1_pkey()`\n`CMS_decrypt_set1_pkey_and_peer()`\n`CMS_SignedData_verify()`\n`CMS_verify()`\n`CMS_SignerInfo_verify()`\n`CMS_compress()`\n`CMS_data_create()`\n`CMS_data_create_ex()`\n`CMS_digest_create()`\n`CMS_digest_create_ex()`\n`CMS_digest_verify()`\n`CMS_encrypt()`\n`CMS_encrypt_ex()`\n`CMS_final_digest()`\n`CMS_sign()`\n`CMS_sign_ex()`\n`CMS_add1_signer()`\n`CMS_sign_receipt()`\n`CMS_uncompress()`\n`CMS_verify_receipt()`\n\n* CMP/CRMF:\n`OSSL_CMP_get_caCerts()`\n`OSSL_CRMF_ENCRYPTEDVALUE_get1_encCert()`\n`OSSL_CRMF_pbm_new()`\n\n* TS:\n`TS_REQ_print_bio()`\n`TS_OBJ_print_bio()`\n`TS_RESP_create_response()`\n`TS_RESP_print_bio()`\n`TS_RESP_verify_response()`\n`TS_RESP_verify_token()`\n\n* ASN1:\n`ASN1_parse()`\n`X509_NAME_print_ex()`\n`X509_NAME_print_ex_fp()`\n`d2i_AutoPrivateKey()`\n`d2i_PrivateKey()`\n`X509_STORE_CTX_print_verify_cb()`\n`x509_pubkey_ex_d2i_ex()`\n\n* EVP:\n`EVP_PKCS82PKEY()`\n`EVP_PKCS82PKEY_ex()`\n`PKCS5_v2_PBE_keyivgen()`\n`PKCS5_v2_PBE_keyivgen_ex()`\n\n* ESS:\n`OSSL_ESS_check_signing_certs()`\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-33503",
              "name": "CVE-2021-33503",
              "shortDescription": {
                "text": "Scanner for CVE-2021-33503"
              },
              "fullDescription": {
                "text": "The scanner checks if any of these vulnerable functions are called with user input:\n\n- `urllib3.HTTPConnectionPool.connection_from_url`\n- `urllib3.HTTPConnectionPool.is_same_host`\n- `urllib3.HTTPConnectionPool.urlopen`\n- `urllib3.PoolManager.connection_from_url`\n- `urllib3.PoolManager.urlopen`\n- `urllib3.ProxyManager._set_proxy_headers`\n- `urllib3.ProxyManager`\n- `urllib3.ProxyManager.urlopen`\n- `urllib3.RequestMethods.request`\n- `urllib3.RequestMethods.request_encode_body`\n- `urllib3.RequestMethods.request_encode_url`\n- `urllib3.contrib.socks.SOCKSProxyManager`\n- `urllib3.util.url.get_host`\n- `urllib3.util.url.parse_url`",
                "markdown": "The scanner checks if any of these vulnerable functions are called with user input:\n\n- `urllib3.HTTPConnectionPool.connection_from_url`\n- `urllib3.HTTPConnectionPool.is_same_host`\n- `urllib3.HTTPConnectionPool.urlopen`\n- `urllib3.PoolManager.connection_from_url`\n- `urllib3.PoolManager.urlopen`\n- `urllib3.ProxyManager._set_proxy_headers`\n- `urllib3.ProxyManager`\n- `urllib3.ProxyManager.urlopen`\n- `urllib3.RequestMethods.request`\n- `urllib3.RequestMethods.request_encode_body`\n- `urllib3.RequestMethods.request_encode_url`\n- `urllib3.contrib.socks.SOCKSProxyManager`\n- `urllib3.util.url.get_host`\n- `urllib3.util.url.parse_url`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-49083",
              "name": "CVE-2023-49083",
              "shortDescription": {
                "text": "Scanner for CVE-2023-49083"
              },
              "fullDescription": {
                "text": "The scanner checks whether the following vulnerable functions are called with external input:\n\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_pem_pkcs7_certificates`\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_der_pkcs7_certificates`",
                "markdown": "The scanner checks whether the following vulnerable functions are called with external input:\n\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_pem_pkcs7_certificates`\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_der_pkcs7_certificates`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-48795",
              "name": "CVE-2023-48795",
              "shortDescription": {
                "text": "Scanner for CVE-2023-48795"
              },
              "fullDescription": {
                "text": "The scanner looks for the OpenSSH/libssh server and client configurations in the following locations:\n\n* `/etc/ssh/sshd_config`\n* `/etc/ssh/ssh_config`\n* `~/.ssh/config`\n* `/root/.ssh/config`\n\nAnd checks if all of the following steps were taken to mitigate the vulnerability:\n\n1. Disabling/overriding the vulnerable `chacha20-poly1305` cipher, which is enabled by default.\n\n2. Turning off `AES-CBC`, unless you combine it with case 3.\n\n3. Disabling/overriding the vulnerable Message Authentication Code (MAC) algorithms, some of which are enabled by default. This is only relevant when `AES-CBC` is enabled.\n\nThe scanner currently only checks for libssh and OpenSSH attack prerequisites, even though other SSH programs may be vulnerable with different prerequisites. Therefore - the scanner either returns an Applicable result (libssh or OpenSSH are applicable) or an Undetermined result (libssh or OpenSSH are not applicable, other SSH programs may be applicable).",
                "markdown": "The scanner looks for the OpenSSH/libssh server and client configurations in the following locations:\n\n* `/etc/ssh/sshd_config`\n* `/etc/ssh/ssh_config`\n* `~/.ssh/config`\n* `/root/.ssh/config`\n\nAnd checks if all of the following steps were taken to mitigate the vulnerability:\n\n1. Disabling/overriding the vulnerable `chacha20-poly1305` cipher, which is enabled by default.\n\n2. Turning off `AES-CBC`, unless you combine it with case 3.\n\n3. Disabling/overriding the vulnerable Message Authentication Code (MAC) algorithms, some of which are enabled by default. This is only relevant when `AES-CBC` is enabled.\n\nThe scanner currently only checks for libssh and OpenSSH attack prerequisites, even though other SSH programs may be vulnerable with different prerequisites. Therefore - the scanner either returns an Applicable result (libssh or OpenSSH are applicable) or an Undetermined result (libssh or OpenSSH are not applicable, other SSH programs may be applicable)."
              },
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private"
              }
            },
            {
              "id": "applic_CVE-2023-50447",
              "name": "CVE-2023-50447",
              "shortDescription": {
                "text": "Scanner for CVE-2023-50447"
              },
              "fullDescription": {
                "text": "The scanner checks whether `PIL.ImageMath.eval()` is called with external `expression` and `environment` arguments.",
                "markdown": "The scanner checks whether `PIL.ImageMath.eval()` is called with external `expression` and `environment` arguments."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-50782",
              "name": "CVE-2023-50782",
              "shortDescription": {
                "text": "Scanner for CVE-2023-50782"
              },
              "fullDescription": {
                "text": "The scanner checks whether the PKCS1v15 vulnerable padding is used in a decryption function.",
                "markdown": "The scanner checks whether the PKCS1v15 vulnerable padding is used in a decryption function."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2024-28219",
              "name": "CVE-2024-28219",
              "shortDescription": {
                "text": "Scanner for CVE-2024-28219"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are called with external input: \n\n- `PIL.ImageCms.ImageCmsTransform`\n\n- `PIL.ImageCms.profileToProfile`\n\n- `PIL.ImageCms.buildTransform`\n\n- `PIL.ImageCms.buildProofTransform`",
                "markdown": "The scanner checks whether any of the following vulnerable functions are called with external input: \n\n- `PIL.ImageCms.ImageCmsTransform`\n\n- `PIL.ImageCms.profileToProfile`\n\n- `PIL.ImageCms.buildTransform`\n\n- `PIL.ImageCms.buildProofTransform`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-44271",
              "name": "CVE-2023-44271",
              "shortDescription": {
                "text": "Scanner for CVE-2023-44271"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the vulnerable function are called with external input:\n\n* `PIL.ImageFont.getlength()`\n* `PIL.ImageFont.getbbox()`\n* `PIL.ImageFont.getmask2()`",
                "markdown": "The scanner checks whether any of the vulnerable function are called with external input:\n\n* `PIL.ImageFont.getlength()`\n* `PIL.ImageFont.getbbox()`\n* `PIL.ImageFont.getmask2()`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-24303",
              "name": "CVE-2022-24303",
              "shortDescription": {
                "text": "Scanner for CVE-2022-24303"
              },
              "fullDescription": {
                "text": "The scanner checks whether all of the following conditions are true:\n\n* An image is opened using the function `PIL.Image.open()` with an external input path.\n* The vulnerable function `PIL.Image.show()` is called.",
                "markdown": "The scanner checks whether all of the following conditions are true:\n\n* An image is opened using the function `PIL.Image.open()` with an external input path.\n* The vulnerable function `PIL.Image.show()` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-25292",
              "name": "CVE-2021-25292",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-25292"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-27923",
              "name": "CVE-2021-27923",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-27923"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-25291",
              "name": "CVE-2021-25291",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-25291"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-34552",
              "name": "CVE-2021-34552",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-34552"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-23437",
              "name": "CVE-2021-23437",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-23437"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-3446",
              "name": "CVE-2023-3446",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-3446"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-28678",
              "name": "CVE-2021-28678",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-28678"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-4304",
              "name": "CVE-2022-4304",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-4304"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2019-20916",
              "name": "CVE-2019-20916",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2019-20916"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-35654",
              "name": "CVE-2020-35654",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-35654"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-28677",
              "name": "CVE-2021-28677",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-28677"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-25293",
              "name": "CVE-2021-25293",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-25293"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-11538",
              "name": "CVE-2020-11538",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-11538"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-10994",
              "name": "CVE-2020-10994",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-10994"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-25287",
              "name": "CVE-2021-25287",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-25287"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-28675",
              "name": "CVE-2021-28675",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-28675"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2018-20225",
              "name": "CVE-2018-20225",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2018-20225"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-22816",
              "name": "CVE-2022-22816",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-22816"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-0727",
              "name": "CVE-2024-0727",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-0727"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-4203",
              "name": "CVE-2022-4203",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-4203"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `SSL_CTX_set_verify()` or `SSL_set_verify()` functions are called.\nA call with the `SSL_VERIFY_PEER` mode is enabling client authentication and makes this vulnerability possible.",
                "markdown": "The scanner checks whether the `SSL_CTX_set_verify()` or `SSL_set_verify()` functions are called.\nA call with the `SSL_VERIFY_PEER` mode is enabling client authentication and makes this vulnerability possible."
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-25288",
              "name": "CVE-2021-25288",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-25288"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-22815",
              "name": "CVE-2022-22815",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-22815"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-28957",
              "name": "CVE-2021-28957",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-28957"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-35653",
              "name": "CVE-2020-35653",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-35653"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-5752",
              "name": "CVE-2023-5752",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-5752"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-36810",
              "name": "CVE-2023-36810",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-36810"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-27921",
              "name": "CVE-2021-27921",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-27921"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-10378",
              "name": "CVE-2020-10378",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-10378"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-23931",
              "name": "CVE-2023-23931",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-23931"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-36242",
              "name": "CVE-2020-36242",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-36242"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-45803",
              "name": "CVE-2023-45803",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-45803"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-24859",
              "name": "CVE-2022-24859",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-24859"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-28676",
              "name": "CVE-2021-28676",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-28676"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-35655",
              "name": "CVE-2020-35655",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-35655"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-3572",
              "name": "CVE-2021-3572",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-3572"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-25290",
              "name": "CVE-2021-25290",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-25290"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-10379",
              "name": "CVE-2020-10379",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-10379"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-37891",
              "name": "CVE-2024-37891",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-37891"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-10177",
              "name": "CVE-2020-10177",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-10177"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-35195",
              "name": "CVE-2024-35195",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-35195"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-27922",
              "name": "CVE-2021-27922",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-27922"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            }
          ],
          "version": "1.0"
        }
      },
      "invocations": [
        {
          "arguments": [
            "/root/.jfrog/dependencies/analyzerManager/jas_scanner/jas_scanner",
            "scan",
            "/tmp/jfrog.cli.temp.-1718703357-2026883208/config.yaml"
          ],
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "/tmp/jfrog.cli.temp.-1718703298-2594446103/image.tar"
          }
        }
      ],
      "results": [
        {
          "ruleId": "applic_CVE-2022-3996",
          "kind": "pass",
          "message": {
            "text": "The vulnerability is only exploitable when running under the Windows OS.\nSince currently only Linux containers are supported, the scanner will always conclude that this vulnerability is not applicable."
          }
        },
        {
          "ruleId": "applic_CVE-2023-4807",
          "kind": "pass",
          "message": {
            "text": "The vulnerability is only exploitable when running under the Windows OS.\nSince currently only Linux containers are supported, the scanner will always conclude that this vulnerability is not applicable."
          }
        },
        {
          "ruleId": "applic_CVE-2021-28363",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `HTTPSConnection.connect` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2021-43818",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable class `html.clean.Cleaner` is referenced."
          }
        },
        {
          "ruleId": "applic_CVE-2022-22817",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `ImageMath.eval` is called with external input to its 1st (`expression`) argument."
          }
        },
        {
          "ruleId": "applic_CVE-2022-40897",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `find_external_links` is called.\n\nNote that the scanner does not check for an additional vulnerable case in which the `pip` CLI tool is executed with the  `--editable` flag. In this case, the vulnerability will lead to a DoS of a forked command-line utility, which has a minimal security impact."
          }
        },
        {
          "ruleId": "applic_CVE-2022-45198",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "kind": "pass",
          "message": {
            "text": "The scanner checks if at least one of the vulnerable functions is called:\n```\nPEM_read_bio_ex()\nPEM_read_bio()\nPEM_read()\nPEM_read_DHparams()\nPEM_read_PrivateKey()\nPEM_read_bio_PrivateKey()\nPEM_read_RSA_PUBKEY()\nPEM_read_bio_RSA_PUBKEY()\nPEM_read_RSAPrivateKey()\nPEM_read_bio_RSAPrivateKey()\nPEM_read_PKCS7()\nPEM_read_bio_PKCS7()\nPEM_read_X509()\nPEM_read_bio_X509()\nPEM_read_X509_AUX()\nPEM_read_bio_X509_AUX()\nPEM_read_X509_CRL()\nPEM_read_bio_X509_CRL()\nPEM_read_bio_X509_REQ()\nPEM_read_bio_ECPrivateKey()\nPEM_read_bio_PKCS8()\n\nPEM_X509_INFO_read_bio_ex()\nSSL_CTX_use_serverinfo_file()\nSSL_use_cert_and_key() \nSSL_CTX_use_certificate_chain_file()\nSSL_CTX_load_verify_locations()\nSSL_CTX_set1_verify_file()\nSSL_CTX_set1_verify_path()\nX509_LOOKUP_load_file()\n\nSSL_load_client_CA_file_ex()\nSSL_load_client_CA_file()\nSSL_add_file_cert_subjects_to_stack()\nSSL_add_dir_cert_subjects_to_stack()\nSSL_add_store_cert_subjects_to_stack()\n\nuse_certificate_chain_file\nSSL_use_certificate_file\nSSL_CTX_use_certificate_file\nSSL_use_PrivateKey_file\nSSL_CTX_use_PrivateKey_file\nSSL_CTX_use_serverinfo_file\n\nSSL_use_RSAPrivateKey_file\nSSL_CTX_use_RSAPrivateKey_file\n```\n\nNote that while the vulnerability is also exploitable through the use of the command line tool `openssl asn1parse`, the vulnerability's DoS impact in this case does not pose a threat, since the DoS will crash the forked `openssl` tool process only"
          }
        },
        {
          "ruleId": "applic_CVE-2023-0215",
          "kind": "pass",
          "message": {
            "text": "The scanner checks if at least one of the vulnerable functions is called:\n```\nPEM_write_bio_ASN1_stream()\nPEM_write_bio_CMS_stream()\nPEM_write_bio_PKCS7_stream()\nSMIME_write_ASN1()\nSMIME_write_CMS()\nSMIME_write_PKCS7()\nBIO_new_CMS()\nBIO_new_PKCS7()\ni2d_CMS_bio_stream()\ni2d_PKCS7_bio_stream()\ni2d_ASN1_bio_stream()\nBIO_new_NDEF()\n```"
          }
        },
        {
          "ruleId": "applic_CVE-2023-0217",
          "kind": "pass",
          "message": {
            "text": "When checking ELF files, the scanner checks whether the vulnerable `EVP_PKEY_public_check()` function is called.\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked"
          }
        },
        {
          "ruleId": "applic_CVE-2023-0286",
          "kind": "pass",
          "message": {
            "text": "The scanner checks if at least one of the vulnerable API calls is called:\n\n* `X509_STORE_CTX_get_check_revocation`\n* `X509_STORE_get_check_revocation`\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The CRL checking option must also be enabled."
          }
        },
        {
          "ruleId": "applic_CVE-2023-0401",
          "kind": "pass",
          "message": {
            "text": "When checking ELF files, the scanner checks whether at least one of the vulnerable API calls is called:\n\n* `PKCS7_decrypt`\n* `PKCS7_dataInit`\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked"
          }
        },
        {
          "ruleId": "applic_CVE-2022-40898",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following functions are called:\n\n- `wheelfile.WheelFile()` with user-controlled input to its `1st` (`file`) argument\n- `cli.unpack_f()`\n- `cli.pack_f()`\n- `cli.convert_f()`\n\nNote: The scanner does not check for wheel command line execution because a ReDoS attack on a forked process is not considered a security issue."
          }
        },
        {
          "ruleId": "applic_CVE-2022-23491",
          "message": {
            "text": "The vulnerable function certifi.where is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp25szuheu/unpacked/filesystem/blobs/sha256/8e7dbae2fb438904431050d2361b5cf8323f2be47b6b4f954294be3847b0892b/app/mylar/lib/requests/certs.py"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 10,
                  "endLine": 25,
                  "endColumn": 17,
                  "snippet": {
                    "text": "where()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23491",
          "message": {
            "text": "The vulnerable function requests.get is called with SSL certificate verification enabled."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp25szuheu/unpacked/filesystem/blobs/sha256/8e7dbae2fb438904431050d2361b5cf8323f2be47b6b4f954294be3847b0892b/app/mylar/mylar/auth32p.py"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 28,
                  "endLine": 249,
                  "endColumn": 195,
                  "snippet": {
                    "text": "requests.get(url, params=params, verify=True, headers={'USER-AGENT': mylar.USER_AGENT[:mylar.USER_AGENT.find('/')+7] + mylar.USER_AGENT[mylar.USER_AGENT.find('(')+1]})"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23491",
          "message": {
            "text": "The vulnerable function requests.get is called with SSL certificate verification enabled."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp25szuheu/unpacked/filesystem/blobs/sha256/8e7dbae2fb438904431050d2361b5cf8323f2be47b6b4f954294be3847b0892b/app/mylar/mylar/locg.py"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 16,
                  "endLine": 56,
                  "endColumn": 183,
                  "snippet": {
                    "text": "requests.get(url, params=params, verify=True, headers={'User-Agent': mylar.USER_AGENT[:mylar.USER_AGENT.find('/')+7] + mylar.USER_AGENT[mylar.USER_AGENT.find('(')+1]})"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23491",
          "message": {
            "text": "The vulnerable function requests.post is called with SSL certificate verification enabled"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp25szuheu/unpacked/filesystem/blobs/sha256/8e7dbae2fb438904431050d2361b5cf8323f2be47b6b4f954294be3847b0892b/app/mylar/mylar/utorrent.py"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 12,
                  "endLine": 119,
                  "endColumn": 101,
                  "snippet": {
                    "text": "requests.post(url=self.utorrent_url, auth=self.auth, cookies=self.cookies, params=params)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23491",
          "message": {
            "text": "The vulnerable function requests.get is called with SSL certificate verification enabled."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp25szuheu/unpacked/filesystem/blobs/sha256/8e7dbae2fb438904431050d2361b5cf8323f2be47b6b4f954294be3847b0892b/app/mylar/mylar/utorrent.py"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 16,
                  "endLine": 51,
                  "endColumn": 64,
                  "snippet": {
                    "text": "requests.get(utorrent_url_token, auth=self.auth)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23491",
          "message": {
            "text": "The vulnerable function requests.post is called with SSL certificate verification enabled"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp25szuheu/unpacked/filesystem/blobs/sha256/8e7dbae2fb438904431050d2361b5cf8323f2be47b6b4f954294be3847b0892b/app/mylar/mylar/utorrent.py"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 16,
                  "endLine": 74,
                  "endColumn": 118,
                  "snippet": {
                    "text": "requests.post(url=self.utorrent_url, auth=self.auth, cookies=self.cookies, params=params, files=files)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23491",
          "message": {
            "text": "The vulnerable function requests.post is called with SSL certificate verification enabled"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp25szuheu/unpacked/filesystem/blobs/sha256/8e7dbae2fb438904431050d2361b5cf8323f2be47b6b4f954294be3847b0892b/app/mylar/mylar/utorrent.py"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 16,
                  "endLine": 97,
                  "endColumn": 105,
                  "snippet": {
                    "text": "requests.post(url=self.utorrent_url, auth=self.auth, cookies=self.cookies, params=params)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23491",
          "message": {
            "text": "The vulnerable function requests.get is called with SSL certificate verification enabled."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp25szuheu/unpacked/filesystem/blobs/sha256/8e7dbae2fb438904431050d2361b5cf8323f2be47b6b4f954294be3847b0892b/app/mylar/mylar/versioncheck.py"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 19,
                  "endLine": 171,
                  "endColumn": 49,
                  "snippet": {
                    "text": "requests.get(url, verify=True)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23491",
          "message": {
            "text": "The vulnerable function requests.get is called with SSL certificate verification enabled."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp25szuheu/unpacked/filesystem/blobs/sha256/8e7dbae2fb438904431050d2361b5cf8323f2be47b6b4f954294be3847b0892b/app/mylar/mylar/versioncheck.py"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 23,
                  "endLine": 185,
                  "endColumn": 53,
                  "snippet": {
                    "text": "requests.get(url, verify=True)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23491",
          "message": {
            "text": "The vulnerable function requests.get is called with SSL certificate verification enabled."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp25szuheu/unpacked/filesystem/blobs/sha256/8e7dbae2fb438904431050d2361b5cf8323f2be47b6b4f954294be3847b0892b/app/mylar/mylar/versioncheck.py"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 23,
                  "endLine": 241,
                  "endColumn": 79,
                  "snippet": {
                    "text": "requests.get(tar_download_url, verify=True, stream=True)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-37920",
          "message": {
            "text": "The vulnerable function certifi.where is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp25szuheu/unpacked/filesystem/blobs/sha256/8e7dbae2fb438904431050d2361b5cf8323f2be47b6b4f954294be3847b0892b/app/mylar/lib/requests/certs.py"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 10,
                  "endLine": 25,
                  "endColumn": 17,
                  "snippet": {
                    "text": "where()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-37920",
          "message": {
            "text": "The vulnerable function requests.get is called with SSL certificate verification enabled."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp25szuheu/unpacked/filesystem/blobs/sha256/8e7dbae2fb438904431050d2361b5cf8323f2be47b6b4f954294be3847b0892b/app/mylar/mylar/auth32p.py"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 28,
                  "endLine": 249,
                  "endColumn": 195,
                  "snippet": {
                    "text": "requests.get(url, params=params, verify=True, headers={'USER-AGENT': mylar.USER_AGENT[:mylar.USER_AGENT.find('/')+7] + mylar.USER_AGENT[mylar.USER_AGENT.find('(')+1]})"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-37920",
          "message": {
            "text": "The vulnerable function requests.get is called with SSL certificate verification enabled."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp25szuheu/unpacked/filesystem/blobs/sha256/8e7dbae2fb438904431050d2361b5cf8323f2be47b6b4f954294be3847b0892b/app/mylar/mylar/locg.py"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 16,
                  "endLine": 56,
                  "endColumn": 183,
                  "snippet": {
                    "text": "requests.get(url, params=params, verify=True, headers={'User-Agent': mylar.USER_AGENT[:mylar.USER_AGENT.find('/')+7] + mylar.USER_AGENT[mylar.USER_AGENT.find('(')+1]})"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-37920",
          "message": {
            "text": "The vulnerable function requests.post is called with SSL certificate verification enabled"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp25szuheu/unpacked/filesystem/blobs/sha256/8e7dbae2fb438904431050d2361b5cf8323f2be47b6b4f954294be3847b0892b/app/mylar/mylar/utorrent.py"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 12,
                  "endLine": 119,
                  "endColumn": 101,
                  "snippet": {
                    "text": "requests.post(url=self.utorrent_url, auth=self.auth, cookies=self.cookies, params=params)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-37920",
          "message": {
            "text": "The vulnerable function requests.get is called with SSL certificate verification enabled."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp25szuheu/unpacked/filesystem/blobs/sha256/8e7dbae2fb438904431050d2361b5cf8323f2be47b6b4f954294be3847b0892b/app/mylar/mylar/utorrent.py"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 16,
                  "endLine": 51,
                  "endColumn": 64,
                  "snippet": {
                    "text": "requests.get(utorrent_url_token, auth=self.auth)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-37920",
          "message": {
            "text": "The vulnerable function requests.post is called with SSL certificate verification enabled"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp25szuheu/unpacked/filesystem/blobs/sha256/8e7dbae2fb438904431050d2361b5cf8323f2be47b6b4f954294be3847b0892b/app/mylar/mylar/utorrent.py"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 16,
                  "endLine": 74,
                  "endColumn": 118,
                  "snippet": {
                    "text": "requests.post(url=self.utorrent_url, auth=self.auth, cookies=self.cookies, params=params, files=files)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-37920",
          "message": {
            "text": "The vulnerable function requests.post is called with SSL certificate verification enabled"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp25szuheu/unpacked/filesystem/blobs/sha256/8e7dbae2fb438904431050d2361b5cf8323f2be47b6b4f954294be3847b0892b/app/mylar/mylar/utorrent.py"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 16,
                  "endLine": 97,
                  "endColumn": 105,
                  "snippet": {
                    "text": "requests.post(url=self.utorrent_url, auth=self.auth, cookies=self.cookies, params=params)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-37920",
          "message": {
            "text": "The vulnerable function requests.get is called with SSL certificate verification enabled."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp25szuheu/unpacked/filesystem/blobs/sha256/8e7dbae2fb438904431050d2361b5cf8323f2be47b6b4f954294be3847b0892b/app/mylar/mylar/versioncheck.py"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 19,
                  "endLine": 171,
                  "endColumn": 49,
                  "snippet": {
                    "text": "requests.get(url, verify=True)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-37920",
          "message": {
            "text": "The vulnerable function requests.get is called with SSL certificate verification enabled."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp25szuheu/unpacked/filesystem/blobs/sha256/8e7dbae2fb438904431050d2361b5cf8323f2be47b6b4f954294be3847b0892b/app/mylar/mylar/versioncheck.py"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 23,
                  "endLine": 185,
                  "endColumn": 53,
                  "snippet": {
                    "text": "requests.get(url, verify=True)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-37920",
          "message": {
            "text": "The vulnerable function requests.get is called with SSL certificate verification enabled."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp25szuheu/unpacked/filesystem/blobs/sha256/8e7dbae2fb438904431050d2361b5cf8323f2be47b6b4f954294be3847b0892b/app/mylar/mylar/versioncheck.py"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 23,
                  "endLine": 241,
                  "endColumn": 79,
                  "snippet": {
                    "text": "requests.get(tar_download_url, verify=True, stream=True)"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-32681",
          "kind": "pass",
          "message": {
            "text": "The scanner checks for any of the following usages of the library `requests`.\nCalls for the vulnerable function:\n\n* `requests.Session.rebuild_proxies`\n\nOr, calls for the following vulnerable functions that have the `proxies` argument, but not the `allow_redirects` argument set to false:\n\n* `requests.request`\n* `requests.get`\n* `requests.options`\n* `requests.head`\n* `requests.post`\n* `requests.put`\n* `requests.patch`\n* `requests.delete`\n* `requests.send`\n* `requests.Session.request`\n* `requests.Session.get`\n* `requests.Session.options`\n* `requests.Session.head`\n* `requests.Session.post`\n* `requests.Session.put`\n* `requests.Session.patch`\n* `requests.Session.delete`\n* `requests.Session.send`\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: the proxy should have authorization information in its URL (e.g. `https://username:password@proxy:8080`)."
          }
        },
        {
          "ruleId": "applic_CVE-2023-4863",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `WebPDecodeRGB`\n* `WebPDecodeARGB`\n* `WebPDecodeBGR`\n* `WebPDecodeBGRA`\n* `WebPDecodeRGBA`\n* `WebPDecodeYUV`\n* `WebPDecode`\n* `WebPDecodeARGBInto`\n* `WebPDecodeBGRAInto`\n* `WebPDecodeBGRInto`\n* `WebPDecodeRGBAInto`\n* `WebPDecodeRGBInto`\n* `WebPDecodeYUVInto`\n* `WebPIAppend`\n* `WebPIUpdate`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-43804",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following vulnerable functions are called, with a `headers` argument and `redirect` argument is not set to `False`:\n\n* `urllib3.request()`\n* `urllib3.request_encode_url()`\n* `urllib3.request_encode_body()`\n* `urllib3.urlopen()`\n* `urllib3.PoolManager().request()`\n* `urllib3.PoolManager().request_encode_url()`\n* `urllib3.PoolManager().request_encode_body()`\n* `urllib3.PoolManager().urlopen()`"
          }
        },
        {
          "ruleId": "applic_CVE-2022-2309",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following vulnerable functions are called:\n\nVulnerable libxml2 functions - \n\n* `xmlCtxtReset`\n* `xmlCtxtResetPush`\n* `xmlCtxtReadFile`\n* `xmlCtxtReadMemory`\n* `xmlCtxtReadFd`\n* `xmlCtxtReadIO`\n* `xmlClearParserCtxt`\n* `xmlSchemaParseImport`\n* `xmlSchemaParseSchemaTopLevel`\n* `xmlSchemaParseIncludeOrRedefine`\n* `xmlReaderForFd`\n* `xmlReaderForIO`\n* `xmlReaderNewFd`\n* `xmlReaderNewIO`\n* `xmlSetupParserForBuffer`\n\nAnd also the vulnerable lxml Python functions:\n\n* `iterwalk`\n* `canonicalize`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-0216",
          "kind": "pass",
          "message": {
            "text": "When checking ELF files, the scanner checks if at least one of the vulnerable functions is called:\n\n* `d2i_PKCS7()`\n* `d2i_PKCS7_bio()`\n* `d2i_PKCS7_fp()`\n\nWhen checking Python files, the scanner checks if at least one of the vulnerable functions is called with external input to its 1st (`bytes`) argument:\n\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_der_pkcs7_certificates`\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_pem_pkcs7_certificates`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "kind": "pass",
          "message": {
            "text": "When checking ELF files, the scanner checks whether one of the following function is called with an external input:\n\n* Direct call to `OBJ_obj2txt()` function (for OpenSSL 1.x and OpenSSL 3.x)\n\n**Only for OpenSSL 3.x:**\n\n* OCSP: `OCSP_basic_verify()`\n\n* PKCS7/SMIME:\n`PKCS7_decrypt()`\n`PKCS7_sign()`\n`PKCS7_verify()`\n\n* CMS:\n`CMS_EncryptedData_decrypt()`\n`CMS_EncryptedData_encrypt()`\n`CMS_EnvelopedData_decrypt()`\n`CMS_final()`\n`CMS_decrypt_set1_password()`\n`CMS_RecipientInfo_decrypt()`\n`CMS_decrypt()`\n`CMS_decrypt_set1_pkey()`\n`CMS_decrypt_set1_pkey_and_peer()`\n`CMS_SignedData_verify()`\n`CMS_verify()`\n`CMS_SignerInfo_verify()`\n`CMS_compress()`\n`CMS_data_create()`\n`CMS_data_create_ex()`\n`CMS_digest_create()`\n`CMS_digest_create_ex()`\n`CMS_digest_verify()`\n`CMS_encrypt()`\n`CMS_encrypt_ex()`\n`CMS_final_digest()`\n`CMS_sign()`\n`CMS_sign_ex()`\n`CMS_add1_signer()`\n`CMS_sign_receipt()`\n`CMS_uncompress()`\n`CMS_verify_receipt()`\n\n* CMP/CRMF:\n`OSSL_CMP_get_caCerts()`\n`OSSL_CRMF_ENCRYPTEDVALUE_get1_encCert()`\n`OSSL_CRMF_pbm_new()`\n\n* TS:\n`TS_REQ_print_bio()`\n`TS_OBJ_print_bio()`\n`TS_RESP_create_response()`\n`TS_RESP_print_bio()`\n`TS_RESP_verify_response()`\n`TS_RESP_verify_token()`\n\n* ASN1:\n`ASN1_parse()`\n`X509_NAME_print_ex()`\n`X509_NAME_print_ex_fp()`\n`d2i_AutoPrivateKey()`\n`d2i_PrivateKey()`\n`X509_STORE_CTX_print_verify_cb()`\n`x509_pubkey_ex_d2i_ex()`\n\n* EVP:\n`EVP_PKCS82PKEY()`\n`EVP_PKCS82PKEY_ex()`\n`PKCS5_v2_PBE_keyivgen()`\n`PKCS5_v2_PBE_keyivgen_ex()`\n\n* ESS:\n`OSSL_ESS_check_signing_certs()`\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked"
          }
        },
        {
          "ruleId": "applic_CVE-2021-33503",
          "kind": "pass",
          "message": {
            "text": "The scanner checks if any of these vulnerable functions are called with user input:\n\n- `urllib3.HTTPConnectionPool.connection_from_url`\n- `urllib3.HTTPConnectionPool.is_same_host`\n- `urllib3.HTTPConnectionPool.urlopen`\n- `urllib3.PoolManager.connection_from_url`\n- `urllib3.PoolManager.urlopen`\n- `urllib3.ProxyManager._set_proxy_headers`\n- `urllib3.ProxyManager`\n- `urllib3.ProxyManager.urlopen`\n- `urllib3.RequestMethods.request`\n- `urllib3.RequestMethods.request_encode_body`\n- `urllib3.RequestMethods.request_encode_url`\n- `urllib3.contrib.socks.SOCKSProxyManager`\n- `urllib3.util.url.get_host`\n- `urllib3.util.url.parse_url`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-49083",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the following vulnerable functions are called with external input:\n\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_pem_pkcs7_certificates`\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_der_pkcs7_certificates`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-50447",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether `PIL.ImageMath.eval()` is called with external `expression` and `environment` arguments."
          }
        },
        {
          "ruleId": "applic_CVE-2023-50782",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the PKCS1v15 vulnerable padding is used in a decryption function."
          }
        },
        {
          "ruleId": "applic_CVE-2024-28219",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following vulnerable functions are called with external input: \n\n- `PIL.ImageCms.ImageCmsTransform`\n\n- `PIL.ImageCms.profileToProfile`\n\n- `PIL.ImageCms.buildTransform`\n\n- `PIL.ImageCms.buildProofTransform`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-44271",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the vulnerable function are called with external input:\n\n* `PIL.ImageFont.getlength()`\n* `PIL.ImageFont.getbbox()`\n* `PIL.ImageFont.getmask2()`"
          }
        },
        {
          "ruleId": "applic_CVE-2022-24303",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether all of the following conditions are true:\n\n* An image is opened using the function `PIL.Image.open()` with an external input path.\n* The vulnerable function `PIL.Image.show()` is called."
          }
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://jfrog.com/help/r/jfrog-security-documentation/jfrog-advanced-security",
          "name": "JFrog Secrets scanner",
          "rules": [
            {
              "id": "REQ.SECRET.GENERIC.TEXT",
              "name": "REQ.SECRET.GENERIC.TEXT",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.TEXT"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive"
              }
            },
            {
              "id": "REQ.SECRET.GENERIC.CODE",
              "name": "REQ.SECRET.GENERIC.CODE",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.CODE"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "REQ.SECRET.GENERIC.URL",
              "name": "REQ.SECRET.GENERIC.URL",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.URL"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive"
              }
            },
            {
              "id": "REQ.SECRET.KEYS",
              "name": "REQ.SECRET.KEYS",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.KEYS"
              },
              "fullDescription": {
                "text": "\nStoring an API key in the image could lead to several risks.\n\nIf the key is associated with a wide scope of privileges, attackers could extract it from a single image or firmware and use it maliciously to attack many targets. For example, if the embedded key allows querying/modifying data for all cloud user accounts, without per-user authentication, the attackers who extract it would gain access to system-wide data.\n\nIf the cloud/SaaS provider bills by key usage - for example, every million queries cost the key's owner a fixed sum of money - attackers could use the keys for their own purposes (or just as a form of vandalism), incurring a large cost to the legitimate user or operator.\n\n## Best practices\n\nUse narrow scopes for stored API keys. As much as possible, API keys should be unique per host and require additional authentication with the user's individual credentials for any sensitive actions.\n\nAvoid placing keys whose use incurs costs directly in the image. Store the key with any software or hardware protection available on the host for key storage (such as operating system key-stores, hardware cryptographic storage mechanisms or cloud-managed secure storage services such as [AWS KMS](https://aws.amazon.com/kms/)).\n\nTokens that were detected as exposed should be revoked and replaced -\n\n* [AWS Key Revocation](https://aws.amazon.com/premiumsupport/knowledge-center/delete-access-key/#:~:text=If%20you%20see%20a%20warning,the%20confirmation%20box%2C%20choose%20Deactivate.)\n* [GCP Key Revocation](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/CloudIAM/delete-api-keys.html)\n* [Azure Key Revocation](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops\u0026tabs=Windows#revoke-a-pat)\n* [GitHub Key Revocation](https://docs.github.com/en/rest/apps/oauth-applications#delete-an-app-authorization)\n",
                "markdown": "\nStoring an API key in the image could lead to several risks.\n\nIf the key is associated with a wide scope of privileges, attackers could extract it from a single image or firmware and use it maliciously to attack many targets. For example, if the embedded key allows querying/modifying data for all cloud user accounts, without per-user authentication, the attackers who extract it would gain access to system-wide data.\n\nIf the cloud/SaaS provider bills by key usage - for example, every million queries cost the key's owner a fixed sum of money - attackers could use the keys for their own purposes (or just as a form of vandalism), incurring a large cost to the legitimate user or operator.\n\n## Best practices\n\nUse narrow scopes for stored API keys. As much as possible, API keys should be unique per host and require additional authentication with the user's individual credentials for any sensitive actions.\n\nAvoid placing keys whose use incurs costs directly in the image. Store the key with any software or hardware protection available on the host for key storage (such as operating system key-stores, hardware cryptographic storage mechanisms or cloud-managed secure storage services such as [AWS KMS](https://aws.amazon.com/kms/)).\n\nTokens that were detected as exposed should be revoked and replaced -\n\n* [AWS Key Revocation](https://aws.amazon.com/premiumsupport/knowledge-center/delete-access-key/#:~:text=If%20you%20see%20a%20warning,the%20confirmation%20box%2C%20choose%20Deactivate.)\n* [GCP Key Revocation](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/CloudIAM/delete-api-keys.html)\n* [Azure Key Revocation](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops\u0026tabs=Windows#revoke-a-pat)\n* [GitHub Key Revocation](https://docs.github.com/en/rest/apps/oauth-applications#delete-an-app-authorization)\n"
              },
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private"
              }
            }
          ],
          "version": "1.0"
        }
      },
      "invocations": [
        {
          "arguments": [
            "/root/.jfrog/dependencies/analyzerManager/jas_scanner/jas_scanner",
            "scan",
            "/tmp/jfrog.cli.temp.-1718703357-2026883208/config.yaml"
          ],
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "/tmp/jfrog.cli.temp.-1718703298-2594446103/image.tar"
          }
        }
      ],
      "results": [
        {
          "ruleId": "REQ.SECRET.GENERIC.CODE",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpxxj39kve/unpacked/filesystem/blobs/sha256/8e7dbae2fb438904431050d2361b5cf8323f2be47b6b4f954294be3847b0892b/app/mylar/lib/comictaggerlib/comicvinetalker.py"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 8,
                  "endLine": 105,
                  "endColumn": 8,
                  "snippet": {
                    "text": "def************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.CODE",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpxxj39kve/unpacked/filesystem/blobs/sha256/8e7dbae2fb438904431050d2361b5cf8323f2be47b6b4f954294be3847b0892b/app/mylar/mylar/rsscheck.py"
                },
                "region": {
                  "startLine": 545,
                  "startColumn": 27,
                  "endLine": 545,
                  "endColumn": 27,
                  "snippet": {
                    "text": "api************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.CODE",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpxxj39kve/unpacked/filesystem/blobs/sha256/8e7dbae2fb438904431050d2361b5cf8323f2be47b6b4f954294be3847b0892b/app/mylar/mylar/rsscheck.py"
                },
                "region": {
                  "startLine": 563,
                  "startColumn": 31,
                  "endLine": 563,
                  "endColumn": 31,
                  "snippet": {
                    "text": "api************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.CODE",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpxxj39kve/unpacked/filesystem/blobs/sha256/8e7dbae2fb438904431050d2361b5cf8323f2be47b6b4f954294be3847b0892b/app/mylar/mylar/sabnzbd.py"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 14,
                  "endLine": 30,
                  "endColumn": 14,
                  "snippet": {
                    "text": "sab************"
                  }
                }
              }
            }
          ]
        }
      ]
    }
  ]
}
