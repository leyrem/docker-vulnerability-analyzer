{
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "fullName": "Trivy Vulnerability Scanner",
          "informationUri": "https://github.com/aquasecurity/trivy",
          "name": "Trivy",
          "rules": [
            {
              "id": "GHSA-c827-hfw6-qwvm",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "rustix\u0026#39;s `rustix::fs::Dir` iterator with the `linux_raw` backend can cause memory explosion"
              },
              "fullDescription": {
                "text": "### Summary\n\nWhen using `rustix::fs::Dir` using the `linux_raw` backend, it\u0026#39;s possible for the iterator to \u0026#34;get stuck\u0026#34; when an IO error is encountered. Combined with a memory over-allocation issue in `rustix::fs::Dir::read_more`, this can cause quick and unbounded memory explosion (gigabytes in a few seconds if used on a hot path) and eventually lead to an OOM crash of the application.\n\n### Details\n\n#### Discovery\n\nThe symptoms were initially discovered in https://github.com/imsnif/bandwhich/issues/284. That post has lots of details of our investigation. See [this post](https://github.com/imsnif/bandwhich/issues/284#issuecomment-1754321993) and the [Discord thread](https://discord.com/channels/273534239310479360/1161137828395237556) for details.\n\n#### Diagnosis\n\nThis issue is caused by the combination of two independent bugs:\n\n1. Stuck iterator\n- The `rustix::fs::Dir` iterator can fail to halt after encountering an IO error, causing the caller to be stuck in an infinite loop.\n2. Memory over-allocation\n- `Dir::read_more` incorrectly grows the read buffer unconditionally each time it is called, regardless of necessity.\n\nSince `\u0026lt;Dir as Iterator\u0026gt;::next` calls `Dir::read`, which in turn calls `Dir::read_more`, this means an IO error encountered during reading a directory can lead to rapid and unbounded growth of memory use.\n\n### PoC\n\n```rust\nfn main() -\u0026gt; Result\u0026lt;(), Box\u0026lt;dyn std::error::Error\u0026gt;\u0026gt; {\n    // create a directory, get a FD to it, then unlink the directory but keep the FD\n    std::fs::create_dir(\u0026#34;tmp_dir\u0026#34;)?;\n    let dir_fd = rustix::fs::openat(\n        rustix::fs::CWD,\n        rustix::cstr!(\u0026#34;tmp_dir\u0026#34;),\n        rustix::fs::OFlags::RDONLY | rustix::fs::OFlags::CLOEXEC,\n        rustix::fs::Mode::empty(),\n    )?;\n    std::fs::remove_dir(\u0026#34;tmp_dir\u0026#34;)?;\n\n    // iterator gets stuck in infinite loop and memory explodes\n    rustix::fs::Dir::read_from(dir_fd)?\n        // the iterator keeps returning `Some(Err(_))`, but never halts by returning `None`\n        // therefore if the implementation ignores the error (or otherwise continues\n        // after seeing the error instead of breaking), the loop will not halt\n        .filter_map(|dirent_maybe_error| dirent_maybe_error.ok())\n        .for_each(|dirent| {\n            // your happy path\n            println!(\u0026#34;{dirent:?}\u0026#34;);\n        });\n\n    Ok(())\n}\n```\n\n### Impact\n\nIf a program tries to access a directory with its file descriptor after the file has been unlinked (or any other action that leaves the `Dir` iterator in the stuck state), and the implementation does not break after seeing an error, it can cause a memory explosion.\n\nAs an example, Linux\u0026#39;s various virtual file systems (e.g. `/proc`, `/sys`) can contain directories that spontaneously pop in and out of existence. Attempting to iterate over them using `rustix::fs::Dir` directly or indirectly (e.g. with the `procfs` crate) can trigger this fault condition if the implementation decides to continue on errors.\n\nAn attacker knowledgeable about the implementation details of a vulnerable target can therefore try to trigger this fault condition via any one or a combination of several available APIs. If successful, the application host will quickly run out of memory, after which the application will likely be terminated by an OOM killer, leading to denial of service."
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://github.com/advisories/GHSA-c827-hfw6-qwvm",
              "help": {
                "text": "Vulnerability GHSA-c827-hfw6-qwvm\nSeverity: MEDIUM\nPackage: rustix\nFixed Version: 0.35.15, 0.36.16, 0.37.25, 0.38.19\nLink: [GHSA-c827-hfw6-qwvm](https://github.com/advisories/GHSA-c827-hfw6-qwvm)\n### Summary\n\nWhen using `rustix::fs::Dir` using the `linux_raw` backend, it's possible for the iterator to \"get stuck\" when an IO error is encountered. Combined with a memory over-allocation issue in `rustix::fs::Dir::read_more`, this can cause quick and unbounded memory explosion (gigabytes in a few seconds if used on a hot path) and eventually lead to an OOM crash of the application.\n\n### Details\n\n#### Discovery\n\nThe symptoms were initially discovered in https://github.com/imsnif/bandwhich/issues/284. That post has lots of details of our investigation. See [this post](https://github.com/imsnif/bandwhich/issues/284#issuecomment-1754321993) and the [Discord thread](https://discord.com/channels/273534239310479360/1161137828395237556) for details.\n\n#### Diagnosis\n\nThis issue is caused by the combination of two independent bugs:\n\n1. Stuck iterator\n- The `rustix::fs::Dir` iterator can fail to halt after encountering an IO error, causing the caller to be stuck in an infinite loop.\n2. Memory over-allocation\n- `Dir::read_more` incorrectly grows the read buffer unconditionally each time it is called, regardless of necessity.\n\nSince `\u003cDir as Iterator\u003e::next` calls `Dir::read`, which in turn calls `Dir::read_more`, this means an IO error encountered during reading a directory can lead to rapid and unbounded growth of memory use.\n\n### PoC\n\n```rust\nfn main() -\u003e Result\u003c(), Box\u003cdyn std::error::Error\u003e\u003e {\n    // create a directory, get a FD to it, then unlink the directory but keep the FD\n    std::fs::create_dir(\"tmp_dir\")?;\n    let dir_fd = rustix::fs::openat(\n        rustix::fs::CWD,\n        rustix::cstr!(\"tmp_dir\"),\n        rustix::fs::OFlags::RDONLY | rustix::fs::OFlags::CLOEXEC,\n        rustix::fs::Mode::empty(),\n    )?;\n    std::fs::remove_dir(\"tmp_dir\")?;\n\n    // iterator gets stuck in infinite loop and memory explodes\n    rustix::fs::Dir::read_from(dir_fd)?\n        // the iterator keeps returning `Some(Err(_))`, but never halts by returning `None`\n        // therefore if the implementation ignores the error (or otherwise continues\n        // after seeing the error instead of breaking), the loop will not halt\n        .filter_map(|dirent_maybe_error| dirent_maybe_error.ok())\n        .for_each(|dirent| {\n            // your happy path\n            println!(\"{dirent:?}\");\n        });\n\n    Ok(())\n}\n```\n\n### Impact\n\nIf a program tries to access a directory with its file descriptor after the file has been unlinked (or any other action that leaves the `Dir` iterator in the stuck state), and the implementation does not break after seeing an error, it can cause a memory explosion.\n\nAs an example, Linux's various virtual file systems (e.g. `/proc`, `/sys`) can contain directories that spontaneously pop in and out of existence. Attempting to iterate over them using `rustix::fs::Dir` directly or indirectly (e.g. with the `procfs` crate) can trigger this fault condition if the implementation decides to continue on errors.\n\nAn attacker knowledgeable about the implementation details of a vulnerable target can therefore try to trigger this fault condition via any one or a combination of several available APIs. If successful, the application host will quickly run out of memory, after which the application will likely be terminated by an OOM killer, leading to denial of service.",
                "markdown": "**Vulnerability GHSA-c827-hfw6-qwvm**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|rustix|0.35.15, 0.36.16, 0.37.25, 0.38.19|[GHSA-c827-hfw6-qwvm](https://github.com/advisories/GHSA-c827-hfw6-qwvm)|\n\n### Summary\n\nWhen using `rustix::fs::Dir` using the `linux_raw` backend, it's possible for the iterator to \"get stuck\" when an IO error is encountered. Combined with a memory over-allocation issue in `rustix::fs::Dir::read_more`, this can cause quick and unbounded memory explosion (gigabytes in a few seconds if used on a hot path) and eventually lead to an OOM crash of the application.\n\n### Details\n\n#### Discovery\n\nThe symptoms were initially discovered in https://github.com/imsnif/bandwhich/issues/284. That post has lots of details of our investigation. See [this post](https://github.com/imsnif/bandwhich/issues/284#issuecomment-1754321993) and the [Discord thread](https://discord.com/channels/273534239310479360/1161137828395237556) for details.\n\n#### Diagnosis\n\nThis issue is caused by the combination of two independent bugs:\n\n1. Stuck iterator\n- The `rustix::fs::Dir` iterator can fail to halt after encountering an IO error, causing the caller to be stuck in an infinite loop.\n2. Memory over-allocation\n- `Dir::read_more` incorrectly grows the read buffer unconditionally each time it is called, regardless of necessity.\n\nSince `\u003cDir as Iterator\u003e::next` calls `Dir::read`, which in turn calls `Dir::read_more`, this means an IO error encountered during reading a directory can lead to rapid and unbounded growth of memory use.\n\n### PoC\n\n```rust\nfn main() -\u003e Result\u003c(), Box\u003cdyn std::error::Error\u003e\u003e {\n    // create a directory, get a FD to it, then unlink the directory but keep the FD\n    std::fs::create_dir(\"tmp_dir\")?;\n    let dir_fd = rustix::fs::openat(\n        rustix::fs::CWD,\n        rustix::cstr!(\"tmp_dir\"),\n        rustix::fs::OFlags::RDONLY | rustix::fs::OFlags::CLOEXEC,\n        rustix::fs::Mode::empty(),\n    )?;\n    std::fs::remove_dir(\"tmp_dir\")?;\n\n    // iterator gets stuck in infinite loop and memory explodes\n    rustix::fs::Dir::read_from(dir_fd)?\n        // the iterator keeps returning `Some(Err(_))`, but never halts by returning `None`\n        // therefore if the implementation ignores the error (or otherwise continues\n        // after seeing the error instead of breaking), the loop will not halt\n        .filter_map(|dirent_maybe_error| dirent_maybe_error.ok())\n        .for_each(|dirent| {\n            // your happy path\n            println!(\"{dirent:?}\");\n        });\n\n    Ok(())\n}\n```\n\n### Impact\n\nIf a program tries to access a directory with its file descriptor after the file has been unlinked (or any other action that leaves the `Dir` iterator in the stuck state), and the implementation does not break after seeing an error, it can cause a memory explosion.\n\nAs an example, Linux's various virtual file systems (e.g. `/proc`, `/sys`) can contain directories that spontaneously pop in and out of existence. Attempting to iterate over them using `rustix::fs::Dir` directly or indirectly (e.g. with the `procfs` crate) can trigger this fault condition if the implementation decides to continue on errors.\n\nAn attacker knowledgeable about the implementation details of a vulnerable target can therefore try to trigger this fault condition via any one or a combination of several available APIs. If successful, the application host will quickly run out of memory, after which the application will likely be terminated by an OOM killer, leading to denial of service."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "6.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "MEDIUM"
                ]
              }
            }
          ],
          "version": "0.52.0"
        }
      },
      "results": [
        {
          "ruleId": "GHSA-c827-hfw6-qwvm",
          "ruleIndex": 0,
          "level": "warning",
          "message": {
            "text": "Package: rustix\nInstalled Version: 0.37.19\nVulnerability GHSA-c827-hfw6-qwvm\nSeverity: MEDIUM\nFixed Version: 0.35.15, 0.36.16, 0.37.25, 0.38.19\nLink: [GHSA-c827-hfw6-qwvm](https://github.com/advisories/GHSA-c827-hfw6-qwvm)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "usr/lib/librav1e.so.0.6.6",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "usr/lib/librav1e.so.0.6.6: rustix@0.37.19"
              }
            }
          ]
        }
      ],
      "columnKind": "utf16CodeUnits",
      "originalUriBaseIds": {
        "ROOTPATH": {
          "uri": "file:///"
        }
      },
      "properties": {
        "imageName": "linuxserver/beets:arm64v8-nightly",
        "repoDigests": [
          "linuxserver/beets@sha256:3571448a12af30bcbad6da9fe409fb284ba32902a69ec9d784a1bf7831072fd9"
        ],
        "repoTags": [
          "linuxserver/beets:arm64v8-nightly"
        ]
      }
    }
  ]
}