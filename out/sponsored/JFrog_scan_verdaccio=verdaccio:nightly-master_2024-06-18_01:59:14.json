{
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "informationUri": "https://docs.jfrog-applications.jfrog.io/jfrog-security-features/sca",
          "name": "JFrog Xray SCA",
          "rules": [
            {
              "id": "CVE-2022-23806_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-23806] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Curve.IsOnCurve in crypto/elliptic in Go before 1.16.14 and 1.17.x before 1.17.7 can incorrectly return true in situations with a big.Int value that is not a valid field element.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.1      | Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.16.14], [1.17.7]   |"
              },
              "properties": {
                "security-severity": "9.1"
              }
            },
            {
              "id": "CVE-2023-24534_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-24534] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "HTTP and MIME header parsing can allocate large amounts of memory, even when parsing small inputs, potentially leading to a denial of service. Certain unusual patterns of input data can cause the common function used to parse HTTP and MIME headers to allocate substantially more memory than required to hold the parsed headers. An attacker can exploit this behavior to cause an HTTP server to allocate large amounts of memory from a small request, potentially leading to memory exhaustion and a denial of service. With fix, header parsing now correctly allocates only the memory required to hold parsed headers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24536_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-24536] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Multipart form parsing can consume large amounts of CPU and memory when processing form inputs containing very large numbers of parts. This stems from several causes: 1. mime/multipart.Reader.ReadForm limits the total memory a parsed multipart form can consume. ReadForm can undercount the amount of memory consumed, leading it to accept larger inputs than intended. 2. Limiting total memory does not account for increased pressure on the garbage collector from large numbers of small allocations in forms with many parts. 3. ReadForm can allocate a large number of short-lived buffers, further increasing pressure on the garbage collector. The combination of these factors can permit an attacker to cause an program that parses multipart forms to consume large amounts of CPU and memory, potentially resulting in a denial of service. This affects programs that use mime/multipart.Reader.ReadForm, as well as form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. With fix, ReadForm now does a better job of estimating the memory consumption of parsed forms, and performs many fewer short-lived allocations. In addition, the fixed mime/multipart.Reader imposes the following limits on the size of parsed forms: 1. Forms parsed with ReadForm may contain no more than 1000 parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxparts=. 2. Form parts parsed with NextPart and NextRawPart may contain no more than 10,000 header fields. In addition, forms parsed with ReadForm may contain no more than 10,000 header fields across all parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxheaders=.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41715_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-41715] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Programs which compile regular expressions from untrusted sources may be vulnerable to memory exhaustion or denial of service. The parsed regexp representation is linear in the size of the input, but in some cases the constant factor can be as high as 40,000, making relatively small regexps consume much larger amounts of memory. After fix, each regexp being parsed is limited to a 256 MB memory footprint. Regular expressions whose representation would use more space than that are rejected. Normal use of regular expressions is unaffected.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.18.7], [1.19.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45287_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-45287] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Before Go 1.20, the RSA based TLS key exchanges used the math/big library, which is not constant time. RSA blinding was applied to prevent timing attacks, but analysis shows this may not have been fully effective. In particular it appears as if the removal of PKCS#1 padding may leak timing information, which in turn could be used to recover session key bits. In Go 1.20, the crypto/tls library switched to a fully constant time RSA implementation, which we do not believe exhibits any timing side channels.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.20.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45133_@babel/traverse_7.21.4",
              "shortDescription": {
                "text": "[CVE-2023-45133] @babel/traverse 7.21.4"
              },
              "help": {
                "text": "Babel is a compiler for writingJavaScript. In `@babel/traverse` prior to versions 7.23.2 and 8.0.0-alpha.4 and all versions of `babel-traverse`, using Babel to compile code that was specifically crafted by an attacker can lead to arbitrary code execution during compilation, when using plugins that rely on the `path.evaluate()`or `path.evaluateTruthy()` internal Babel methods. Known affected plugins are `@babel/plugin-transform-runtime`; `@babel/preset-env` when using its `useBuiltIns` option; and any \"polyfill provider\" plugin that depends on `@babel/helper-define-polyfill-provider`, such as `babel-plugin-polyfill-corejs3`, `babel-plugin-polyfill-corejs2`, `babel-plugin-polyfill-es-shims`, `babel-plugin-polyfill-regenerator`. No other plugins under the `@babel/` namespace are impacted, but third-party plugins might be. Users that only compile trusted code are not impacted. The vulnerability has been fixed in `@babel/traverse@7.23.2` and `@babel/traverse@8.0.0-alpha.4`. Those who cannot upgrade `@babel/traverse` and are using one of the affected packages mentioned above should upgrade them to their latest version to avoid triggering the vulnerable code path in affected `@babel/traverse` versions: `@babel/plugin-transform-runtime` v7.23.2, `@babel/preset-env` v7.23.2, `@babel/helper-define-polyfill-provider` v0.4.3, `babel-plugin-polyfill-corejs2` v0.4.6, `babel-plugin-polyfill-corejs3` v0.8.5, `babel-plugin-polyfill-es-shims` v0.10.0, `babel-plugin-polyfill-regenerator` v0.5.3.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.8      | Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [7.23.2], [8.0.0-alpha.4]   |"
              },
              "properties": {
                "security-severity": "8.8"
              }
            },
            {
              "id": "CVE-2022-41725_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-41725] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "A denial of service is possible from excessive resource consumption in net/http and mime/multipart. Multipart form parsing with mime/multipart.Reader.ReadForm can consume largely unlimited amounts of memory and disk files. This also affects form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. ReadForm takes a maxMemory parameter, and is documented as storing \"up to maxMemory bytes +10MB (reserved for non-file parts) in memory\". File parts which cannot be stored in memory are stored on disk in temporary files. The unconfigurable 10MB reserved for non-file parts is excessively large and can potentially open a denial of service vector on its own. However, ReadForm did not properly account for all memory consumed by a parsed form, such as map entry overhead, part names, and MIME headers, permitting a maliciously crafted form to consume well over 10MB. In addition, ReadForm contained no limit on the number of disk files created, permitting a relatively small request body to create a large number of disk temporary files. With fix, ReadForm now properly accounts for various forms of memory overhead, and should now stay within its documented limit of 10MB + maxMemory bytes of memory consumption. Users should still be aware that this limit is high and may still be hazardous. In addition, ReadForm now creates at most one on-disk temporary file, combining multiple form parts into a single temporary file. The mime/multipart.File interface type's documentation states, \"If stored on disk, the File's underlying concrete type will be an *os.File.\". This is no longer the case when a form contains more than one file part, due to this coalescing of parts into a single file. The previous behavior of using distinct files for each form part may be reenabled with the environment variable GODEBUG=multipartfiles=distinct. Users should be aware that multipart.ReadForm and the http.Request methods that call it do not limit the amount of disk consumed by temporary ...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45133_@babel/traverse_7.23.0",
              "shortDescription": {
                "text": "[CVE-2023-45133] @babel/traverse 7.23.0"
              },
              "help": {
                "text": "Babel is a compiler for writingJavaScript. In `@babel/traverse` prior to versions 7.23.2 and 8.0.0-alpha.4 and all versions of `babel-traverse`, using Babel to compile code that was specifically crafted by an attacker can lead to arbitrary code execution during compilation, when using plugins that rely on the `path.evaluate()`or `path.evaluateTruthy()` internal Babel methods. Known affected plugins are `@babel/plugin-transform-runtime`; `@babel/preset-env` when using its `useBuiltIns` option; and any \"polyfill provider\" plugin that depends on `@babel/helper-define-polyfill-provider`, such as `babel-plugin-polyfill-corejs3`, `babel-plugin-polyfill-corejs2`, `babel-plugin-polyfill-es-shims`, `babel-plugin-polyfill-regenerator`. No other plugins under the `@babel/` namespace are impacted, but third-party plugins might be. Users that only compile trusted code are not impacted. The vulnerability has been fixed in `@babel/traverse@7.23.2` and `@babel/traverse@8.0.0-alpha.4`. Those who cannot upgrade `@babel/traverse` and are using one of the affected packages mentioned above should upgrade them to their latest version to avoid triggering the vulnerable code path in affected `@babel/traverse` versions: `@babel/plugin-transform-runtime` v7.23.2, `@babel/preset-env` v7.23.2, `@babel/helper-define-polyfill-provider` v0.4.3, `babel-plugin-polyfill-corejs2` v0.4.6, `babel-plugin-polyfill-corejs3` v0.8.5, `babel-plugin-polyfill-es-shims` v0.10.0, `babel-plugin-polyfill-regenerator` v0.5.3.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.8      | Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [7.23.2], [8.0.0-alpha.4]   |"
              },
              "properties": {
                "security-severity": "8.8"
              }
            },
            {
              "id": "CVE-2022-24675_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-24675] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "encoding/pem in Go before 1.17.9 and 1.18.x before 1.18.1 has a Decode stack overflow via a large amount of PEM data.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.17.9], [1.18.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-28327_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-28327] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "The generic P-256 feature in crypto/elliptic in Go before 1.17.9 and 1.18.x before 1.18.1 allows a panic via long scalar input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.17.9], [1.18.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-24921_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-24921] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "regexp.Compile in Go before 1.16.15 and 1.17.x before 1.17.8 allows stack exhaustion via a deeply nested expression.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.16.15], [1.17.8]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2020-7753_trim_0.0.1",
              "shortDescription": {
                "text": "[CVE-2020-7753] trim 0.0.1"
              },
              "help": {
                "text": "All versions of package trim are vulnerable to Regular Expression Denial of Service (ReDoS) via trim().",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [0.0.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2024-29180_webpack-dev-middleware_4.3.0",
              "shortDescription": {
                "text": "[CVE-2024-29180] webpack-dev-middleware 4.3.0"
              },
              "help": {
                "text": "Prior to versions 7.1.0, 6.1.2, and 5.3.4, the webpack-dev-middleware development middleware for devpack does not validate the supplied URL address sufficiently before returning the local file. It is possible to access any file on the developer's machine. The middleware can either work with the physical filesystem when reading the files or it can use a virtualized in-memory `memfs` filesystem. If `writeToDisk` configuration option is set to `true`, the physical filesystem is used. The `getFilenameFromUrl` method is used to parse URL and build the local file path. The public path prefix is stripped from the URL, and the `unsecaped` path suffix is appended to the `outputPath`. As the URL is not unescaped and normalized automatically before calling the midlleware, it is possible to use `%2e` and `%2f` sequences to perform path traversal attack.\n\nDevelopers using `webpack-dev-server` or `webpack-dev-middleware` are affected by the issue. When the project is started, an attacker might access any file on the developer's machine and exfiltrate the content. If the development server is listening on a public IP address (or `0.0.0.0`), an attacker on the local network can access the local files without any interaction from the victim (direct connection to the port). If the server allows access from third-party domains, an attacker can send a malicious link to the victim. When visited, the client side script can connect to the local server and exfiltrate the local files. Starting with fixed versions 7.1.0, 6.1.2, and 5.3.4, the URL is unescaped and normalized before any further processing.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.4      | Not Covered       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [5.3.4], [6.1.2], [7.1.0]   |"
              },
              "properties": {
                "security-severity": "7.4"
              }
            },
            {
              "id": "CVE-2024-4068_braces_2.3.2",
              "shortDescription": {
                "text": "[CVE-2024-4068] braces 2.3.2"
              },
              "help": {
                "text": "The NPM package `braces`, versions prior to 3.0.3, fails to limit the number of characters it can handle, which could lead to Memory Exhaustion. In `lib/parse.js,` if a malicious user sends \"imbalanced braces\" as input, the parsing will enter a loop, which will cause the program to start allocating heap memory without freeing it at any moment of the loop. Eventually, the JavaScript heap limit is reached, and the program will crash.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [3.0.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-33623_trim-newlines_1.0.0",
              "shortDescription": {
                "text": "[CVE-2021-33623] trim-newlines 1.0.0"
              },
              "help": {
                "text": "The trim-newlines package before 3.0.1 and 4.x before 4.0.1 for Node.js has an issue related to regular expression denial-of-service (ReDoS) for the .end() method.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [3.0.1], [4.0.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2024-29180_webpack-dev-middleware_3.7.3",
              "shortDescription": {
                "text": "[CVE-2024-29180] webpack-dev-middleware 3.7.3"
              },
              "help": {
                "text": "Prior to versions 7.1.0, 6.1.2, and 5.3.4, the webpack-dev-middleware development middleware for devpack does not validate the supplied URL address sufficiently before returning the local file. It is possible to access any file on the developer's machine. The middleware can either work with the physical filesystem when reading the files or it can use a virtualized in-memory `memfs` filesystem. If `writeToDisk` configuration option is set to `true`, the physical filesystem is used. The `getFilenameFromUrl` method is used to parse URL and build the local file path. The public path prefix is stripped from the URL, and the `unsecaped` path suffix is appended to the `outputPath`. As the URL is not unescaped and normalized automatically before calling the midlleware, it is possible to use `%2e` and `%2f` sequences to perform path traversal attack.\n\nDevelopers using `webpack-dev-server` or `webpack-dev-middleware` are affected by the issue. When the project is started, an attacker might access any file on the developer's machine and exfiltrate the content. If the development server is listening on a public IP address (or `0.0.0.0`), an attacker on the local network can access the local files without any interaction from the victim (direct connection to the port). If the server allows access from third-party domains, an attacker can send a malicious link to the victim. When visited, the client side script can connect to the local server and exfiltrate the local files. Starting with fixed versions 7.1.0, 6.1.2, and 5.3.4, the URL is unescaped and normalized before any further processing.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.4      | Not Covered       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [5.3.4], [6.1.2], [7.1.0]   |"
              },
              "properties": {
                "security-severity": "7.4"
              }
            },
            {
              "id": "CVE-2024-4068_braces_3.0.2",
              "shortDescription": {
                "text": "[CVE-2024-4068] braces 3.0.2"
              },
              "help": {
                "text": "The NPM package `braces`, versions prior to 3.0.3, fails to limit the number of characters it can handle, which could lead to Memory Exhaustion. In `lib/parse.js,` if a malicious user sends \"imbalanced braces\" as input, the parsing will enter a loop, which will cause the program to start allocating heap memory without freeing it at any moment of the loop. Eventually, the JavaScript heap limit is reached, and the program will crash.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [3.0.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-46234_browserify-sign_4.2.1",
              "shortDescription": {
                "text": "[CVE-2023-46234] browserify-sign 4.2.1"
              },
              "help": {
                "text": "browserify-sign is a package to duplicate the functionality of node's crypto public key functions, much of this is based on Fedor Indutny's work on indutny/tls.js. An upper bound check issue in `dsaVerify` function allows an attacker to construct signatures that can be successfully verified by any public key, thus leading to a signature forgery attack. All places in this project that involve DSA verification of user-input signatures will be affected by this vulnerability. This issue has been patched in version 4.2.2.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [4.2.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2020-28469_glob-parent_3.1.0",
              "shortDescription": {
                "text": "[CVE-2020-28469] glob-parent 3.1.0"
              },
              "help": {
                "text": "This affects the package glob-parent before 5.1.2. The enclosure regex used to check for strings ending in enclosure containing path separator.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [5.1.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2024-29415_ip_1.1.8",
              "shortDescription": {
                "text": "[CVE-2024-29415] ip 1.1.8"
              },
              "help": {
                "text": "The ip package through 2.0.1 for Node.js might allow SSRF because some IP addresses (such as 127.1, 01200034567, 012.1.2.3, 000:0:0000::01, and ::fFFf:127.0.0.1) are improperly categorized as globally routable via isPublic. NOTE: this issue exists because of an incomplete fix for CVE-2023-42282.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-29415_ip_2.0.0",
              "shortDescription": {
                "text": "[CVE-2024-29415] ip 2.0.0"
              },
              "help": {
                "text": "The ip package through 2.0.1 for Node.js might allow SSRF because some IP addresses (such as 127.1, 01200034567, 012.1.2.3, 000:0:0000::01, and ::fFFf:127.0.0.1) are improperly categorized as globally routable via isPublic. NOTE: this issue exists because of an incomplete fix for CVE-2023-42282.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-45288_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-45288] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.21.9], [1.22.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-32148_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-32148] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Improper exposure of client IP addresses in net/http before Go 1.17.12 and Go 1.18.4 can be triggered by calling httputil.ReverseProxy.ServeHTTP with a Request.Header map containing a nil value for the X-Forwarded-For header, which causes ReverseProxy to set the client IP as the value of the X-Forwarded-For header.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-29409_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-29409] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Extremely large RSA keys in certificate chains can cause a client/server to expend significant CPU time verifying signatures. With fix, the size of RSA keys transmitted during handshakes is restricted to \u003c= 8192 bits. Based on a survey of publicly trusted RSA keys, there are currently only three certificates in circulation with keys larger than this, and all three appear to be test certificates that are not actively deployed. It is possible there are larger keys in use in private PKIs, but we target the web PKI, so causing breakage here in the interests of increasing the default safety of users of crypto/tls seems reasonable.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.19.12], [1.20.7], [1.21.0-rc.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-45288_github.com/golang/go_1.20.12",
              "shortDescription": {
                "text": "[CVE-2023-45288] github.com/golang/go 1.20.12"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.21.9], [1.22.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-26144_graphql_16.6.0",
              "shortDescription": {
                "text": "[CVE-2023-26144] graphql 16.6.0"
              },
              "help": {
                "text": "Versions of the package graphql from 16.3.0 and before 16.8.1 are vulnerable to Denial of Service (DoS) due to insufficient checks in the OverlappingFieldsCanBeMergedRule.ts file when parsing large queries. This vulnerability allows an attacker to degrade system performance.\r\r**Note:** It was not proven that this vulnerability can crash the process.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [16.8.1]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-42365_3.20:busybox-binsh_1.36.1-r28",
              "shortDescription": {
                "text": "[CVE-2023-42365] 3.20:busybox-binsh 1.36.1-r28"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in BusyBox v.1.36.1 via a crafted awk pattern in the awk.c copyvar function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__02f2bcb26af5ea6d185dcf509dc795746d907ae10c53918b6944ac85447a0c72.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-45857_axios_1.3.6",
              "shortDescription": {
                "text": "[CVE-2023-45857] axios 1.3.6"
              },
              "help": {
                "text": "An issue discovered in Axios 1.5.1 inadvertently reveals the confidential XSRF-TOKEN stored in cookies by including it in the HTTP header X-XSRF-TOKEN for every request made to any host allowing attackers to view sensitive information.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [0.28.0], [1.6.0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-44270_postcss_7.0.39",
              "shortDescription": {
                "text": "[CVE-2023-44270] postcss 7.0.39"
              },
              "help": {
                "text": "An issue was discovered in PostCSS before 8.4.31. The vulnerability affects linters using PostCSS to parse external untrusted CSS. An attacker can prepare CSS in such a way that it will contains parts parsed by PostCSS as a CSS comment. After processing by PostCSS, it will be included in the PostCSS output in CSS nodes (rules, properties) despite being included in a comment.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [8.4.31]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-39319_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-39319] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "The html/template package does not apply the proper rules for handling occurrences of \"\u003cscript\", \"\u003c!--\", and \"\u003c/script\" within JS literals in \u003cscript\u003e contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2024-28849_follow-redirects_1.15.2",
              "shortDescription": {
                "text": "[CVE-2024-28849] follow-redirects 1.15.2"
              },
              "help": {
                "text": "follow-redirects is an open source, drop-in replacement for Node's `http` and `https` modules that automatically follows redirects. In affected versions follow-redirects only clears authorization header during cross-domain redirect, but keep the proxy-authentication header which contains credentials too. This vulnerability may lead to credentials leak, but has been addressed in version 1.15.6. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.15.6]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-42365_3.20:ssl_client_1.36.1-r28",
              "shortDescription": {
                "text": "[CVE-2023-42365] 3.20:ssl_client 1.36.1-r28"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in BusyBox v.1.36.1 via a crafted awk pattern in the awk.c copyvar function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__02f2bcb26af5ea6d185dcf509dc795746d907ae10c53918b6944ac85447a0c72.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42364_3.20:ssl_client_1.36.1-r28",
              "shortDescription": {
                "text": "[CVE-2023-42364] 3.20:ssl_client 1.36.1-r28"
              },
              "help": {
                "text": "A use-after-free vulnerability in BusyBox v.1.36.1 allows attackers to cause a denial of service via a crafted awk pattern in the awk.c evaluate function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__02f2bcb26af5ea6d185dcf509dc795746d907ae10c53918b6944ac85447a0c72.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-39326_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-39326] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "A malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body. A malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request. Chunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-1705_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-1705] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Acceptance of some invalid Transfer-Encoding headers in the HTTP/1 client in net/http before Go 1.17.12 and Go 1.18.4 allows HTTP request smuggling if combined with an intermediate server that also improperly fails to reject the header as invalid.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-24532_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-24532] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "The ScalarMult and ScalarBaseMult methods of the P256 Curve may return an incorrect result if called with some specific unreduced scalars (a scalar larger than the order of the curve). This does not impact usages of crypto/ecdsa or crypto/ecdh.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.19.7], [1.20.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-42364_3.20:busybox_1.36.1-r28",
              "shortDescription": {
                "text": "[CVE-2023-42364] 3.20:busybox 1.36.1-r28"
              },
              "help": {
                "text": "A use-after-free vulnerability in BusyBox v.1.36.1 allows attackers to cause a denial of service via a crafted awk pattern in the awk.c evaluate function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__02f2bcb26af5ea6d185dcf509dc795746d907ae10c53918b6944ac85447a0c72.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42365_3.20:busybox_1.36.1-r28",
              "shortDescription": {
                "text": "[CVE-2023-42365] 3.20:busybox 1.36.1-r28"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in BusyBox v.1.36.1 via a crafted awk pattern in the awk.c copyvar function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__02f2bcb26af5ea6d185dcf509dc795746d907ae10c53918b6944ac85447a0c72.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-39318_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-39318] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "The html/template package does not properly handle HTML-like \"\" comment tokens, nor hashbang \"#!\" comment tokens, in \u003cscript\u003e contexts. This may cause the template parser to improperly interpret the contents of \u003cscript\u003e contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2023-26159_follow-redirects_1.15.2",
              "shortDescription": {
                "text": "[CVE-2023-26159] follow-redirects 1.15.2"
              },
              "help": {
                "text": "Versions of the package follow-redirects before 1.15.4 are vulnerable to Improper Input Validation due to the improper handling of URLs by the url.parse() function. When new URL() throws an error, it can be manipulated to misinterpret the hostname. An attacker could exploit this weakness to redirect traffic to a malicious site, potentially leading to information disclosure, phishing attacks, or other security breaches.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.15.4]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2022-0122_node-forge_0.10.0",
              "shortDescription": {
                "text": "[CVE-2022-0122] node-forge 0.10.0"
              },
              "help": {
                "text": "forge is vulnerable to URL Redirection to Untrusted Site",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.0.0]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2023-42364_3.20:busybox-binsh_1.36.1-r28",
              "shortDescription": {
                "text": "[CVE-2023-42364] 3.20:busybox-binsh 1.36.1-r28"
              },
              "help": {
                "text": "A use-after-free vulnerability in BusyBox v.1.36.1 allows attackers to cause a denial of service via a crafted awk pattern in the awk.c evaluate function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__02f2bcb26af5ea6d185dcf509dc795746d907ae10c53918b6944ac85447a0c72.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-44270_postcss_8.4.21",
              "shortDescription": {
                "text": "[CVE-2023-44270] postcss 8.4.21"
              },
              "help": {
                "text": "An issue was discovered in PostCSS before 8.4.31. The vulnerability affects linters using PostCSS to parse external untrusted CSS. An attacker can prepare CSS in such a way that it will contains parts parsed by PostCSS as a CSS comment. After processing by PostCSS, it will be included in the PostCSS output in CSS nodes (rules, properties) despite being included in a comment.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [8.4.31]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-24773_node-forge_0.10.0",
              "shortDescription": {
                "text": "[CVE-2022-24773] node-forge 0.10.0"
              },
              "help": {
                "text": "Forge (also called `node-forge`) is a native implementation of Transport Layer Security in JavaScript. Prior to version 1.3.0, RSA PKCS#1 v1.5 signature verification code does not properly check `DigestInfo` for a proper ASN.1 structure. This can lead to successful verification with signatures that contain invalid structures but a valid digest. The issue has been addressed in `node-forge` version 1.3.0. There are currently no known workarounds.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.3.0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-45284_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-45284] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "On Windows, The IsLocal function does not correctly detect reserved device names in some cases. Reserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local. With fix, IsLocal now correctly reports these names as non-local.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.20.11], [1.21.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-30629_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-30629] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Non-random values for ticket_age_add in session tickets in crypto/tls before Go 1.17.11 and Go 1.18.3 allow an attacker that can observe TLS handshakes to correlate successive connections by comparing ticket ages during session resumption.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.1      | Not Covered       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "3.1"
              }
            },
            {
              "id": "CVE-2023-42282_ip_1.1.8",
              "shortDescription": {
                "text": "[CVE-2023-42282] ip 1.1.8"
              },
              "help": {
                "text": "The ip package before 1.1.9 for Node.js might allow SSRF because some IP addresses (such as 0x7f.1) are improperly categorized as globally routable via isPublic.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.1.9], [2.0.1]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29402_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-29402] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "The go command may generate unexpected code at build time when using cgo. This may result in unexpected behavior when running a go program which uses cgo. This may occur when running an untrusted module which contains directories with newline characters in their names. Modules which are retrieved using the go command, i.e. via \"go get\", are not affected (modules retrieved using GOPATH-mode, i.e. GO111MODULE=off, may be affected).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29827_ejs_3.1.10",
              "shortDescription": {
                "text": "[CVE-2023-29827] ejs 3.1.10"
              },
              "help": {
                "text": "ejs v3.1.9 is vulnerable to server-side template injection. If the ejs file is controllable, template injection can be implemented through the configuration settings of the closeDelimiter parameter. NOTE: this is disputed by the vendor because the render function is not intended to be used with untrusted input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-24540_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-24540] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Not all valid JavaScript whitespace characters are considered to be whitespace. Templates containing whitespace characters outside of the character set \"\\t\\n\\f\\r\\u0020\\u2028\\u2029\" in JavaScript contexts that also contain actions may not be properly sanitized during execution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-24538_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-24538] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Templates do not properly consider backticks (`) as Javascript string delimiters, and do not escape them as expected. Backticks are used, since ES6, for JS template literals. If a template contains a Go template action within a Javascript template literal, the contents of the action can be used to terminate the literal, injecting arbitrary Javascript code into the Go template. As ES6 template literals are rather complex, and themselves can do string interpolation, the decision was made to simply disallow Go template actions from being used inside of them (e.g. \"var a = {{.}}\"), since there is no obviously safe way to allow this behavior. This takes the same approach as github.com/google/safehtml. With fix, Template.Parse returns an Error when it encounters templates like this, with an ErrorCode of value 12. This ErrorCode is currently unexported, but will be exported in the release of Go 1.21. Users who rely on the previous behavior can re-enable it using the GODEBUG flag jstmpllitinterp=1, with the caveat that backticks will now be escaped. This should be used with caution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29404_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-29404] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. The arguments for a number of flags which are non-optional are incorrectly considered optional, allowing disallowed flags to be smuggled through the LDFLAGS sanitization. This affects usage of both the gc and gccgo compilers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29405_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-29405] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. Flags containing embedded spaces are mishandled, allowing disallowed flags to be smuggled through the LDFLAGS sanitization by including them in the argument of another flag. This only affects usage of the gccgo compiler.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-42282_ip_2.0.0",
              "shortDescription": {
                "text": "[CVE-2023-42282] ip 2.0.0"
              },
              "help": {
                "text": "The ip package before 1.1.9 for Node.js might allow SSRF because some IP addresses (such as 0x7f.1) are improperly categorized as globally routable via isPublic.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.1.9], [2.0.1]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-29622_formidable_2.1.2",
              "shortDescription": {
                "text": "[CVE-2022-29622] formidable 2.1.2"
              },
              "help": {
                "text": "An arbitrary file upload vulnerability in formidable v3.1.4 allows attackers to execute arbitrary code via a crafted filename. NOTE: some third parties dispute this issue because the product has common use cases in which uploading arbitrary files is the desired behavior. Also, there are configuration options in all versions that can change the default behavior of how files are handled. Strapi does not consider this to be a valid vulnerability.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [3.2.4]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-29804_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-29804] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Incorrect conversion of certain invalid paths to valid, absolute paths in Clean in path/filepath before Go 1.17.11 and Go 1.18.3 on Windows allows potential directory traversal attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30631_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-30631] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Uncontrolled recursion in Reader.Read in compress/gzip before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via an archive containing a large number of concatenated 0-length compressed files.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-24772_node-forge_0.10.0",
              "shortDescription": {
                "text": "[CVE-2022-24772] node-forge 0.10.0"
              },
              "help": {
                "text": "Forge (also called `node-forge`) is a native implementation of Transport Layer Security in JavaScript. Prior to version 1.3.0, RSA PKCS#1 v1.5 signature verification code does not check for tailing garbage bytes after decoding a `DigestInfo` ASN.1 structure. This can allow padding bytes to be removed and garbage data added to forge a signature when a low public exponent is being used. The issue has been addressed in `node-forge` version 1.3.0. There are currently no known workarounds.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.3.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-2880_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-2880] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Requests forwarded by ReverseProxy include the raw query parameters from the inbound request, including unparsable parameters rejected by net/http. This could permit query parameter smuggling when a Go proxy forwards a parameter with an unparsable value. After fix, ReverseProxy sanitizes the query parameters in the forwarded query when the outbound request's Form field is set after the ReverseProxy. Director function returns, indicating that the proxy has parsed the query parameters. Proxies which do not parse query parameters continue to forward the original query parameters unchanged.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.18.7], [1.19.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-32189_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-32189] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "A too-short encoded message can cause a panic in Float.GobDecode and Rat GobDecode in math/big in Go before 1.17.13 and 1.18.5, potentially allowing a denial of service.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.17.13], [1.18.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24537_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-24537] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Calling any of the Parse functions on Go source code which contains //line directives with very large line numbers can cause an infinite loop due to integer overflow.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30632_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-30632] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Uncontrolled recursion in Glob in path/filepath before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a path containing a large number of path separators.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-39323_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-39323] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Line directives (\"//line\") can be used to bypass the restrictions on \"//go:cgo_\" directives, allowing blocked linker and compiler flags to be passed during compilation. This can result in unexpected execution of arbitrary code when running \"go build\". The line directive requires the absolute path of the file in which the directive lives, which makes exploiting this issue significantly more complex.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.20.9], [1.21.2]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2022-23772_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-23772] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Rat.SetString in math/big in Go before 1.16.14 and 1.17.x before 1.17.7 has an overflow that can lead to Uncontrolled Memory Consumption.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.16.14], [1.17.7]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30634_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-30634] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Infinite loop in Read in crypto/rand before Go 1.17.11 and Go 1.18.3 on Windows allows attacker to cause an indefinite hang by passing a buffer larger than 1 \u003c\u003c 32 - 1 bytes.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-29400_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-29400] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Templates containing actions in unquoted HTML attributes (e.g. \"attr={{.}}\") executed with empty input can result in output with unexpected results when parsed due to HTML normalization rules. This may allow injection of arbitrary attributes into tags.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.3      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2023-45285_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-45285] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Using go get to fetch a module with the \".git\" suffix may unexpectedly fallback to the insecure \"git://\" protocol if the module is unavailable via the secure \"https://\" and \"git+ssh://\" protocols, even if GOINSECURE is not set for said module. This only affects users who are not using the module proxy and are fetching modules directly (i.e. GOPROXY=off).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41716_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-41716] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Due to unsanitized NUL values, attackers may be able to maliciously set environment variables on Windows. In syscall.StartProcess and os/exec.Cmd, invalid environment variable values containing NUL values are not properly checked for. A malicious environment variable value can exploit this behavior to set a value for a different environment variable. For example, the environment variable string \"A=B\\x00C=D\" sets the variables \"A=B\" and \"C=D\".",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.18.8], [1.19.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-24771_node-forge_0.10.0",
              "shortDescription": {
                "text": "[CVE-2022-24771] node-forge 0.10.0"
              },
              "help": {
                "text": "Forge (also called `node-forge`) is a native implementation of Transport Layer Security in JavaScript. Prior to version 1.3.0, RSA PKCS#1 v1.5 signature verification code is lenient in checking the digest algorithm structure. This can allow a crafted structure that steals padding bytes and uses unchecked portion of the PKCS#1 encoded message to forge a signature when a low public exponent is being used. The issue has been addressed in `node-forge` version 1.3.0. There are currently no known workarounds.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.3.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30633_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-30633] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Uncontrolled recursion in Unmarshal in encoding/xml before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via unmarshalling an XML document into a Go struct which has a nested field that uses the 'any' field tag.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-29403_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-29403] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "On Unix platforms, the Go runtime does not behave differently when a binary is run with the setuid/setgid bits. This can be dangerous in certain cases, such as when dumping memory state, or assuming the status of standard i/o file descriptors. If a setuid/setgid binary is executed with standard I/O file descriptors closed, opening any files can result in unexpected content being read or written with elevated privileges. Similarly, if a setuid/setgid program is terminated, either via panic or signal, it may leak the contents of its registers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2023-45283_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-45283] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "The filepath package does not recognize paths with a \\??\\ prefix as special. On Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x. Before fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b. Similarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b. In addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name. UPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.20.11], [1.20.12], [1.21.4], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-26115_word-wrap_1.2.3",
              "shortDescription": {
                "text": "[CVE-2023-26115] word-wrap 1.2.3"
              },
              "help": {
                "text": "All versions of the package word-wrap are vulnerable to Regular Expression Denial of Service (ReDoS) due to the usage of an insecure regular expression within the result variable.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.2.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30580_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-30580] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Code injection in Cmd.Start in os/exec before Go 1.17.11 and Go 1.18.3 allows execution of any binaries in the working directory named either \"..com\" or \"..exe\" by calling Cmd.Run, Cmd.Start, Cmd.Output, or Cmd.CombinedOutput when Cmd.Path is unset.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2022-2879_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-2879] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Reader.Read does not set a limit on the maximum size of file headers. A maliciously crafted archive could cause Read to allocate unbounded amounts of memory, potentially causing resource exhaustion or panics. After fix, Reader.Read limits the maximum size of header blocks to 1 MiB.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.18.7], [1.19.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30635_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-30635] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Uncontrolled recursion in Decoder.Decode in encoding/gob before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a message which contains deeply nested structures.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24539_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-24539] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Angle brackets (\u003c\u003e) are not considered dangerous characters when inserted into CSS contexts. Templates containing multiple actions separated by a '/' character can result in unexpectedly closing the CSS context and allowing for injection of unexpected HTML, if executed with untrusted input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.3      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2022-28131_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-28131] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Uncontrolled recursion in Decoder.Skip in encoding/xml before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a deeply nested XML document.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41720_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-41720] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "On Windows, restricted files can be accessed via os.DirFS and http.Dir. The os.DirFS function and http.Dir type provide access to a tree of files rooted at a given directory. These functions permit access to Windows device files under that root. For example, os.DirFS(\"C:/tmp\").Open(\"COM1\") opens the COM1 device. Both os.DirFS and http.Dir only provide read-only filesystem access. In addition, on Windows, an os.DirFS for the directory (the root of the current drive) can permit a maliciously crafted path to escape from the drive and access any path on the system. With fix applied, the behavior of os.DirFS(\"\") has changed. Previously, an empty root was treated equivalently to \"/\", so os.DirFS(\"\").Open(\"tmp\") would open the path \"/tmp\". This now returns an error.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.18.9], [1.19.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30630_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-30630] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Uncontrolled recursion in Glob in io/fs before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a path which contains a large number of path separators.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-23773_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-23773] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "cmd/go in Go before 1.16.14 and 1.17.x before 1.17.7 can misinterpret branch names that falsely appear to be version tags. This can lead to incorrect access control if an actor is supposed to be able to create branches but not tags.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.16.14], [1.17.7]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41724_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-41724] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Large handshake records may cause panics in crypto/tls. Both clients and servers may send large TLS handshake records which cause servers and clients, respectively, to panic when attempting to construct responses. This affects all TLS 1.3 clients, TLS 1.2 clients which explicitly enable session resumption (by setting Config.ClientSessionCache to a non-nil value), and TLS 1.3 servers which request client certificates (by setting Config.ClientAuth \u003e= RequestClientCert).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41722_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-41722] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "A path traversal vulnerability exists in filepath.Clean on Windows. On Windows, the filepath.Clean function could transform an invalid path such as \"a/../c:/b\" into the valid path \"c:\\b\". This transformation of a relative (if invalid) path into an absolute path could enable a directory traversal attack. After fix, the filepath.Clean function transforms this path into the relative (but still invalid) path \".\\c:\\b\".",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-29526_golang.org/x/sys_0.0.0-20210908233432-aa78b53d3365",
              "shortDescription": {
                "text": "[CVE-2022-29526] golang.org/x/sys 0.0.0-20210908233432-aa78b53d3365"
              },
              "help": {
                "text": "Go before 1.17.10 and 1.18.x before 1.18.2 has Incorrect Privilege Assignment. When called with a non-zero flags parameter, the Faccessat function could incorrectly report that a file is accessible.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [0.0.0-20220412211240-33da011f77ad]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2024-28863_tar_6.2.0",
              "shortDescription": {
                "text": "[CVE-2024-28863] tar 6.2.0"
              },
              "help": {
                "text": "node-tar is a Tar for Node.js. node-tar prior to version 6.2.1 has no limit on the number of sub-folders created in the folder creation process. An attacker who generates a large number of sub-folders can consume memory on the system running node-tar and even crash the Node.js client within few seconds of running it using a path with too many sub-folders inside. Version 6.2.1 fixes this issue by preventing extraction in excessively deep sub-folders.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Applicable       | `sha256__4dd0418cbdf984db8b6c3143ee155c3adda63296ae2f3d2aa52b63396f71b507.tar `\u003cbr/\u003e`sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [6.2.1]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-35116_com.fasterxml.jackson.core:jackson-databind_2.14.0",
              "shortDescription": {
                "text": "[CVE-2023-35116] com.fasterxml.jackson.core:jackson-databind 2.14.0"
              },
              "help": {
                "text": "jackson-databind through 2.15.2 allows attackers to cause a denial of service or other unspecified impact via a crafted object that uses cyclic dependencies. NOTE: the vendor's perspective is that this is not a valid vulnerability report, because the steps of constructing a cyclic data structure and trying to serialize it cannot be achieved by an external attacker.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.7      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "4.7"
              }
            },
            {
              "id": "CVE-2024-28863_tar_6.1.13",
              "shortDescription": {
                "text": "[CVE-2024-28863] tar 6.1.13"
              },
              "help": {
                "text": "node-tar is a Tar for Node.js. node-tar prior to version 6.2.1 has no limit on the number of sub-folders created in the folder creation process. An attacker who generates a large number of sub-folders can consume memory on the system running node-tar and even crash the Node.js client within few seconds of running it using a path with too many sub-folders inside. Version 6.2.1 fixes this issue by preventing extraction in excessively deep sub-folders.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [6.2.1]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2024-28863_tar_4.4.19",
              "shortDescription": {
                "text": "[CVE-2024-28863] tar 4.4.19"
              },
              "help": {
                "text": "node-tar is a Tar for Node.js. node-tar prior to version 6.2.1 has no limit on the number of sub-folders created in the folder creation process. An attacker who generates a large number of sub-folders can consume memory on the system running node-tar and even crash the Node.js client within few seconds of running it using a path with too many sub-folders inside. Version 6.2.1 fixes this issue by preventing extraction in excessively deep sub-folders.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [6.2.1]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-1962_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-1962] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Uncontrolled recursion in the Parse functions in go/parser before Go 1.17.12 and Go 1.18.4 allow an attacker to cause a panic due to stack exhaustion via deeply nested types or declarations.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-29406_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-29406] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "The HTTP/1 client does not fully validate the contents of the Host header. A maliciously crafted Host header can inject additional headers or entire requests. With fix, the HTTP/1 client now refuses to send requests containing an invalid Request.Host or Request.URL.Host value.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Applicable       | `sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar `       | [1.19.11], [1.20.6]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            }
          ],
          "version": "3.96.1"
        }
      },
      "results": [
        {
          "ruleId": "CVE-2022-23806_github.com/golang/go_1.17.5",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "[CVE-2022-23806] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24534_github.com/golang/go_1.17.5",
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24534] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24536_github.com/golang/go_1.17.5",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24536] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41715_github.com/golang/go_1.17.5",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41715] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45287_github.com/golang/go_1.17.5",
          "ruleIndex": 4,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45287] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45133_@babel/traverse_7.21.4",
          "ruleIndex": 5,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45133] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41725_github.com/golang/go_1.17.5",
          "ruleIndex": 6,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41725] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45133_@babel/traverse_7.23.0",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45133] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24675_github.com/golang/go_1.17.5",
          "ruleIndex": 8,
          "level": "error",
          "message": {
            "text": "[CVE-2022-24675] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-28327_github.com/golang/go_1.17.5",
          "ruleIndex": 9,
          "level": "error",
          "message": {
            "text": "[CVE-2022-28327] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24921_github.com/golang/go_1.17.5",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "[CVE-2022-24921] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-7753_trim_0.0.1",
          "ruleIndex": 11,
          "level": "error",
          "message": {
            "text": "[CVE-2020-7753] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-29180_webpack-dev-middleware_4.3.0",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "[CVE-2024-29180] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-4068_braces_2.3.2",
          "ruleIndex": 13,
          "level": "error",
          "message": {
            "text": "[CVE-2024-4068] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-33623_trim-newlines_1.0.0",
          "ruleIndex": 14,
          "level": "error",
          "message": {
            "text": "[CVE-2021-33623] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-29180_webpack-dev-middleware_3.7.3",
          "ruleIndex": 15,
          "level": "error",
          "message": {
            "text": "[CVE-2024-29180] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-4068_braces_3.0.2",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "[CVE-2024-4068] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-46234_browserify-sign_4.2.1",
          "ruleIndex": 17,
          "level": "error",
          "message": {
            "text": "[CVE-2023-46234] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-28469_glob-parent_3.1.0",
          "ruleIndex": 18,
          "level": "error",
          "message": {
            "text": "[CVE-2020-28469] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-29415_ip_1.1.8",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "[CVE-2024-29415] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-29415_ip_2.0.0",
          "ruleIndex": 20,
          "level": "error",
          "message": {
            "text": "[CVE-2024-29415] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_github.com/golang/go_1.17.5",
          "ruleIndex": 21,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32148_github.com/golang/go_1.17.5",
          "ruleIndex": 22,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-32148] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29409_github.com/golang/go_1.17.5",
          "ruleIndex": 23,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29409] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_github.com/golang/go_1.20.12",
          "ruleIndex": 24,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-26144_graphql_16.6.0",
          "ruleIndex": 25,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-26144] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42365_3.20:busybox-binsh_1.36.1-r28",
          "ruleIndex": 26,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42365] sha256__02f2bcb26af5ea6d185dcf509dc795746d907ae10c53918b6944ac85447a0c72.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45857_axios_1.3.6",
          "ruleIndex": 27,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45857] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-44270_postcss_7.0.39",
          "ruleIndex": 28,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-44270] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39319_github.com/golang/go_1.17.5",
          "ruleIndex": 29,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39319] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-28849_follow-redirects_1.15.2",
          "ruleIndex": 30,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-28849] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42365_3.20:ssl_client_1.36.1-r28",
          "ruleIndex": 31,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42365] sha256__02f2bcb26af5ea6d185dcf509dc795746d907ae10c53918b6944ac85447a0c72.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42364_3.20:ssl_client_1.36.1-r28",
          "ruleIndex": 32,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42364] sha256__02f2bcb26af5ea6d185dcf509dc795746d907ae10c53918b6944ac85447a0c72.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39326_github.com/golang/go_1.17.5",
          "ruleIndex": 33,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39326] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1705_github.com/golang/go_1.17.5",
          "ruleIndex": 34,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-1705] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24532_github.com/golang/go_1.17.5",
          "ruleIndex": 35,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-24532] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42364_3.20:busybox_1.36.1-r28",
          "ruleIndex": 36,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42364] sha256__02f2bcb26af5ea6d185dcf509dc795746d907ae10c53918b6944ac85447a0c72.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42365_3.20:busybox_1.36.1-r28",
          "ruleIndex": 37,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42365] sha256__02f2bcb26af5ea6d185dcf509dc795746d907ae10c53918b6944ac85447a0c72.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39318_github.com/golang/go_1.17.5",
          "ruleIndex": 38,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39318] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-26159_follow-redirects_1.15.2",
          "ruleIndex": 39,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-26159] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-0122_node-forge_0.10.0",
          "ruleIndex": 40,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-0122] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42364_3.20:busybox-binsh_1.36.1-r28",
          "ruleIndex": 41,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42364] sha256__02f2bcb26af5ea6d185dcf509dc795746d907ae10c53918b6944ac85447a0c72.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-44270_postcss_8.4.21",
          "ruleIndex": 42,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-44270] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24773_node-forge_0.10.0",
          "ruleIndex": 43,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-24773] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45284_github.com/golang/go_1.17.5",
          "ruleIndex": 44,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45284] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30629_github.com/golang/go_1.17.5",
          "ruleIndex": 45,
          "level": "note",
          "message": {
            "text": "[CVE-2022-30629] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42282_ip_1.1.8",
          "ruleIndex": 46,
          "level": "error",
          "message": {
            "text": "[CVE-2023-42282] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29402_github.com/golang/go_1.17.5",
          "ruleIndex": 47,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29402] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29827_ejs_3.1.10",
          "ruleIndex": 48,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29827] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24540_github.com/golang/go_1.17.5",
          "ruleIndex": 49,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24540] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24538_github.com/golang/go_1.17.5",
          "ruleIndex": 50,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24538] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29404_github.com/golang/go_1.17.5",
          "ruleIndex": 51,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29404] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29405_github.com/golang/go_1.17.5",
          "ruleIndex": 52,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29405] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42282_ip_2.0.0",
          "ruleIndex": 53,
          "level": "error",
          "message": {
            "text": "[CVE-2023-42282] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-29622_formidable_2.1.2",
          "ruleIndex": 54,
          "level": "error",
          "message": {
            "text": "[CVE-2022-29622] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-29804_github.com/golang/go_1.17.5",
          "ruleIndex": 55,
          "level": "error",
          "message": {
            "text": "[CVE-2022-29804] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30631_github.com/golang/go_1.17.5",
          "ruleIndex": 56,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30631] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24772_node-forge_0.10.0",
          "ruleIndex": 57,
          "level": "error",
          "message": {
            "text": "[CVE-2022-24772] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2880_github.com/golang/go_1.17.5",
          "ruleIndex": 58,
          "level": "error",
          "message": {
            "text": "[CVE-2022-2880] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32189_github.com/golang/go_1.17.5",
          "ruleIndex": 59,
          "level": "error",
          "message": {
            "text": "[CVE-2022-32189] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24537_github.com/golang/go_1.17.5",
          "ruleIndex": 60,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24537] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30632_github.com/golang/go_1.17.5",
          "ruleIndex": 61,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30632] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39323_github.com/golang/go_1.17.5",
          "ruleIndex": 62,
          "level": "error",
          "message": {
            "text": "[CVE-2023-39323] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23772_github.com/golang/go_1.17.5",
          "ruleIndex": 63,
          "level": "error",
          "message": {
            "text": "[CVE-2022-23772] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30634_github.com/golang/go_1.17.5",
          "ruleIndex": 64,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30634] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29400_github.com/golang/go_1.17.5",
          "ruleIndex": 65,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29400] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45285_github.com/golang/go_1.17.5",
          "ruleIndex": 66,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45285] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41716_github.com/golang/go_1.17.5",
          "ruleIndex": 67,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41716] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24771_node-forge_0.10.0",
          "ruleIndex": 68,
          "level": "error",
          "message": {
            "text": "[CVE-2022-24771] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30633_github.com/golang/go_1.17.5",
          "ruleIndex": 69,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30633] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29403_github.com/golang/go_1.17.5",
          "ruleIndex": 70,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29403] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45283_github.com/golang/go_1.17.5",
          "ruleIndex": 71,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45283] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-26115_word-wrap_1.2.3",
          "ruleIndex": 72,
          "level": "error",
          "message": {
            "text": "[CVE-2023-26115] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30580_github.com/golang/go_1.17.5",
          "ruleIndex": 73,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30580] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2879_github.com/golang/go_1.17.5",
          "ruleIndex": 74,
          "level": "error",
          "message": {
            "text": "[CVE-2022-2879] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30635_github.com/golang/go_1.17.5",
          "ruleIndex": 75,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30635] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24539_github.com/golang/go_1.17.5",
          "ruleIndex": 76,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24539] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-28131_github.com/golang/go_1.17.5",
          "ruleIndex": 77,
          "level": "error",
          "message": {
            "text": "[CVE-2022-28131] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41720_github.com/golang/go_1.17.5",
          "ruleIndex": 78,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41720] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30630_github.com/golang/go_1.17.5",
          "ruleIndex": 79,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30630] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23773_github.com/golang/go_1.17.5",
          "ruleIndex": 80,
          "level": "error",
          "message": {
            "text": "[CVE-2022-23773] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41724_github.com/golang/go_1.17.5",
          "ruleIndex": 81,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41724] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41722_github.com/golang/go_1.17.5",
          "ruleIndex": 82,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41722] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-29526_golang.org/x/sys_0.0.0-20210908233432-aa78b53d3365",
          "ruleIndex": 83,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-29526] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-28863_tar_6.2.0",
          "ruleIndex": 84,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-28863] sha256__4dd0418cbdf984db8b6c3143ee155c3adda63296ae2f3d2aa52b63396f71b507.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-28863_tar_6.2.0",
          "ruleIndex": 84,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-28863] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-35116_com.fasterxml.jackson.core:jackson-databind_2.14.0",
          "ruleIndex": 85,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-35116] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-28863_tar_6.1.13",
          "ruleIndex": 86,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-28863] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-28863_tar_4.4.19",
          "ruleIndex": 87,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-28863] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1962_github.com/golang/go_1.17.5",
          "ruleIndex": 88,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-1962] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29406_github.com/golang/go_1.17.5",
          "ruleIndex": 89,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29406] sha256__96368718b7c461c41173f48aaf05cc4989c60ac2499418e9489d2f16f4964f90.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://jfrog.com/help/r/jfrog-security-documentation/jfrog-advanced-security",
          "name": "JFrog Applicability Scanner",
          "rules": [
            {
              "id": "applic_CVE-2022-29804",
              "name": "CVE-2022-29804",
              "shortDescription": {
                "text": "Scanner for CVE-2022-29804"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41722",
              "name": "CVE-2022-41722",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41722"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41720",
              "name": "CVE-2022-41720",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41720"
              },
              "fullDescription": {
                "text": "The scanner checks whether one of the vulnerable functions `os.dirFS.Open` or  `net/http.Dir.Open` is called.",
                "markdown": "The scanner checks whether one of the vulnerable functions `os.dirFS.Open` or  `net/http.Dir.Open` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41716",
              "name": "CVE-2022-41716",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41716"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-30634",
              "name": "CVE-2022-30634",
              "shortDescription": {
                "text": "Scanner for CVE-2022-30634"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-30580",
              "name": "CVE-2022-30580",
              "shortDescription": {
                "text": "Scanner for CVE-2022-30580"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-45283",
              "name": "CVE-2023-45283",
              "shortDescription": {
                "text": "Scanner for CVE-2023-45283"
              },
              "fullDescription": {
                "text": "The vulnerability is only exploitable when running under the Windows OS.\nSince currently only Linux containers are supported, the scanner will always conclude that this vulnerability is not applicable.",
                "markdown": "The vulnerability is only exploitable when running under the Windows OS.\nSince currently only Linux containers are supported, the scanner will always conclude that this vulnerability is not applicable."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2024-28863",
              "name": "CVE-2024-28863",
              "shortDescription": {
                "text": "Scanner for CVE-2024-28863"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `tar.x`\n* `tar.extract`",
                "markdown": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `tar.x`\n* `tar.extract`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-2880",
              "name": "CVE-2022-2880",
              "shortDescription": {
                "text": "Scanner for CVE-2022-2880"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-1962",
              "name": "CVE-2022-1962",
              "shortDescription": {
                "text": "Scanner for CVE-2022-1962"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-23772",
              "name": "CVE-2022-23772",
              "shortDescription": {
                "text": "Scanner for CVE-2022-23772"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `Rat.SetString` is called.",
                "markdown": "The scanner checks whether the vulnerable function `Rat.SetString` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-23806",
              "name": "CVE-2022-23806",
              "shortDescription": {
                "text": "Scanner for CVE-2022-23806"
              },
              "fullDescription": {
                "text": "The scanner checks if at least one of the following vulnerable functions is called with external output - \n```\ncrypto/elliptic.(*CurveParams).IsOnCurve()\ncrypto/elliptic.p224Curve.IsOnCurve()\ncrypto/elliptic.p521Curve.IsOnCurve()\ncrypto/elliptic.Curve.IsOnCurve()\ncrypto/elliptic.p256Curve.IsOnCurve()\ncrypto/elliptic.(*p224Curve).IsOnCurve()\ncrypto/elliptic.(*p256Curve).IsOnCurve()\ncrypto/elliptic.(*p521Curve).IsOnCurve()\n```",
                "markdown": "The scanner checks if at least one of the following vulnerable functions is called with external output - \n```\ncrypto/elliptic.(*CurveParams).IsOnCurve()\ncrypto/elliptic.p224Curve.IsOnCurve()\ncrypto/elliptic.p521Curve.IsOnCurve()\ncrypto/elliptic.Curve.IsOnCurve()\ncrypto/elliptic.p256Curve.IsOnCurve()\ncrypto/elliptic.(*p224Curve).IsOnCurve()\ncrypto/elliptic.(*p256Curve).IsOnCurve()\ncrypto/elliptic.(*p521Curve).IsOnCurve()\n```"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-24675",
              "name": "CVE-2022-24675",
              "shortDescription": {
                "text": "Scanner for CVE-2022-24675"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `pem.Decode` is called.",
                "markdown": "The scanner checks whether the vulnerable function `pem.Decode` is called."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-24772",
              "name": "CVE-2022-24772",
              "shortDescription": {
                "text": "Scanner for CVE-2022-24772"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `publicKey.verify` is called.",
                "markdown": "The scanner checks whether the vulnerable function `publicKey.verify` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-24771",
              "name": "CVE-2022-24771",
              "shortDescription": {
                "text": "Scanner for CVE-2022-24771"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `publicKey.verify` is called.",
                "markdown": "The scanner checks whether the vulnerable function `publicKey.verify` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-24921",
              "name": "CVE-2022-24921",
              "shortDescription": {
                "text": "Scanner for CVE-2022-24921"
              },
              "fullDescription": {
                "text": "The scanner checks whether at least one of the vulnerable functions is called : \n```\nregexp.Match\nregexp.MatchReader \nregexp.MatchString\nregexp.Compile\nregexp.CompilePOSIX \nregexp.MustCompile\nregexp.MustCompilePOSIX\n```",
                "markdown": "The scanner checks whether at least one of the vulnerable functions is called : \n```\nregexp.Match\nregexp.MatchReader \nregexp.MatchString\nregexp.Compile\nregexp.CompilePOSIX \nregexp.MustCompile\nregexp.MustCompilePOSIX\n```"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-28131",
              "name": "CVE-2022-28131",
              "shortDescription": {
                "text": "Scanner for CVE-2022-28131"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `Decoder.Skip` is called.",
                "markdown": "The scanner checks whether the vulnerable function `Decoder.Skip` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-28327",
              "name": "CVE-2022-28327",
              "shortDescription": {
                "text": "Scanner for CVE-2022-28327"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-2879",
              "name": "CVE-2022-2879",
              "shortDescription": {
                "text": "Scanner for CVE-2022-2879"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `archive/tar.(*Reader).Next` is called.",
                "markdown": "The scanner checks whether the vulnerable function `archive/tar.(*Reader).Next` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-29526",
              "name": "CVE-2022-29526",
              "shortDescription": {
                "text": "Scanner for CVE-2022-29526"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-29622",
              "name": "CVE-2022-29622",
              "shortDescription": {
                "text": "Scanner for CVE-2022-29622"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `formidable` is called with any of the following values to its 1st (`options`) argument :\n\n- `options.keepExtensions` set to `true`.\n- With external input to `options.keepExtensions`.",
                "markdown": "The scanner checks whether the vulnerable function `formidable` is called with any of the following values to its 1st (`options`) argument :\n\n- `options.keepExtensions` set to `true`.\n- With external input to `options.keepExtensions`."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-30630",
              "name": "CVE-2022-30630",
              "shortDescription": {
                "text": "Scanner for CVE-2022-30630"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `fs.Glob` is called.",
                "markdown": "The scanner checks whether the vulnerable function `fs.Glob` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-30631",
              "name": "CVE-2022-30631",
              "shortDescription": {
                "text": "Scanner for CVE-2022-30631"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `Reader.Read` is called.",
                "markdown": "The scanner checks whether the vulnerable function `Reader.Read` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-30632",
              "name": "CVE-2022-30632",
              "shortDescription": {
                "text": "Scanner for CVE-2022-30632"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `filepath.Glob` is called.",
                "markdown": "The scanner checks whether the vulnerable function `filepath.Glob` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-30633",
              "name": "CVE-2022-30633",
              "shortDescription": {
                "text": "Scanner for CVE-2022-30633"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-32148",
              "name": "CVE-2022-32148",
              "shortDescription": {
                "text": "Scanner for CVE-2022-32148"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-32189",
              "name": "CVE-2022-32189",
              "shortDescription": {
                "text": "Scanner for CVE-2022-32189"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable functions `Float.GobDecode()` or `Rat.GobDecode()` are called.",
                "markdown": "The scanner checks whether the vulnerable functions `Float.GobDecode()` or `Rat.GobDecode()` are called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41715",
              "name": "CVE-2022-41715",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41715"
              },
              "fullDescription": {
                "text": "The scanner checks whether any function eventually calls the vulnerable function `regexp/syntax.parse`.",
                "markdown": "The scanner checks whether any function eventually calls the vulnerable function `regexp/syntax.parse`."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41724",
              "name": "CVE-2022-41724",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41724"
              },
              "fullDescription": {
                "text": "The CVE is never applicable. A closer inspection of the issue shows there are no potential user-controllable paths that allow creating a panic (see also original commit message - https://go.dev/cl/468125)",
                "markdown": "The CVE is never applicable. A closer inspection of the issue shows there are no potential user-controllable paths that allow creating a panic (see also original commit message - https://go.dev/cl/468125)"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41725",
              "name": "CVE-2022-41725",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41725"
              },
              "fullDescription": {
                "text": "The scanner checks whether one of the following vulnerable functions is called:\n- `mime/multipart Reader.ReadForm`\n- `net/http Request.FormFile`\n- `net/http Request.FormValue`\n- `net/http Request.ParseMultipartForm`\n- `net/http Request.PostFormValue`",
                "markdown": "The scanner checks whether one of the following vulnerable functions is called:\n- `mime/multipart Reader.ReadForm`\n- `net/http Request.FormFile`\n- `net/http Request.FormValue`\n- `net/http Request.ParseMultipartForm`\n- `net/http Request.PostFormValue`"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-24536",
              "name": "CVE-2023-24536",
              "shortDescription": {
                "text": "Scanner for CVE-2023-24536"
              },
              "fullDescription": {
                "text": "The scanner checks whether one of the following vulnerable functions is called:\n- `mime/multipart Reader.ReadForm`\n- `net/http Request.FormFile`\n- `net/http Request.FormValue`\n- `net/http Request.ParseMultipartForm`\n- `net/http Request.PostFormValue`",
                "markdown": "The scanner checks whether one of the following vulnerable functions is called:\n- `mime/multipart Reader.ReadForm`\n- `net/http Request.FormFile`\n- `net/http Request.FormValue`\n- `net/http Request.ParseMultipartForm`\n- `net/http Request.PostFormValue`"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-24534",
              "name": "CVE-2023-24534",
              "shortDescription": {
                "text": "Scanner for CVE-2023-24534"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-24537",
              "name": "CVE-2023-24537",
              "shortDescription": {
                "text": "Scanner for CVE-2023-24537"
              },
              "fullDescription": {
                "text": "The scanner checks whether one of the following vulnerable functions is called:\n\n- `scanner.Scanner.Scan`\n- `parser.ParseDir`\n- `parser.ParseExpr`\n- `parser.ExprFrom`\n- `parser.ParseFile`\n\nNote that the scanner does not check for the invocation of command-line utilities (such as `go build`) that can indirectly trigger this vulnerability",
                "markdown": "The scanner checks whether one of the following vulnerable functions is called:\n\n- `scanner.Scanner.Scan`\n- `parser.ParseDir`\n- `parser.ParseExpr`\n- `parser.ExprFrom`\n- `parser.ParseFile`\n\nNote that the scanner does not check for the invocation of command-line utilities (such as `go build`) that can indirectly trigger this vulnerability"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-24538",
              "name": "CVE-2023-24538",
              "shortDescription": {
                "text": "Scanner for CVE-2023-24538"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `Template.Execute`\n\t\n* `Template.ExecuteTemplate`",
                "markdown": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `Template.Execute`\n\t\n* `Template.ExecuteTemplate`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-24539",
              "name": "CVE-2023-24539",
              "shortDescription": {
                "text": "Scanner for CVE-2023-24539"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-24540",
              "name": "CVE-2023-24540",
              "shortDescription": {
                "text": "Scanner for CVE-2023-24540"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29400",
              "name": "CVE-2023-29400",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29400"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29402",
              "name": "CVE-2023-29402",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29402"
              },
              "fullDescription": {
                "text": "The scanner looks for Go program binaries that were built with \"cgo\" support (C language bindings)",
                "markdown": "The scanner looks for Go program binaries that were built with \"cgo\" support (C language bindings)"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29403",
              "name": "CVE-2023-29403",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29403"
              },
              "fullDescription": {
                "text": "The scanner checks whether any Go binaries exist in the image, that have the SETUID or SETGID flags enabled",
                "markdown": "The scanner checks whether any Go binaries exist in the image, that have the SETUID or SETGID flags enabled"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29406",
              "name": "CVE-2023-29406",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29406"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29409",
              "name": "CVE-2023-29409",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29409"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-26115",
              "name": "CVE-2023-26115",
              "shortDescription": {
                "text": "Scanner for CVE-2023-26115"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable module `word-wrap` is called with external input and the `trim` option set to true.",
                "markdown": "The scanner checks whether the vulnerable module `word-wrap` is called with external input and the `trim` option set to true."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-23773",
              "name": "CVE-2022-23773",
              "shortDescription": {
                "text": "Scanner for CVE-2022-23773"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable, since exploitation depends on the structure of the organization's Git repositories (see extended information).",
                "markdown": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable, since exploitation depends on the structure of the organization's Git repositories (see extended information)."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-39323",
              "name": "CVE-2023-39323",
              "shortDescription": {
                "text": "Scanner for CVE-2023-39323"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information).",
                "markdown": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information)."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29405",
              "name": "CVE-2023-29405",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29405"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information).",
                "markdown": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information)."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29404",
              "name": "CVE-2023-29404",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29404"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information).",
                "markdown": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information)."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-45285",
              "name": "CVE-2023-45285",
              "shortDescription": {
                "text": "Scanner for CVE-2023-45285"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue is only exploitable via user interaction.",
                "markdown": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue is only exploitable via user interaction."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-45133",
              "name": "CVE-2023-45133",
              "shortDescription": {
                "text": "Scanner for CVE-2023-45133"
              },
              "fullDescription": {
                "text": "The scanner checks whether:\n\n* One of the vulnerable functions `NodePath.evaluate()` or `NodePath.evaluateTruthy()` is used.\n\n* One of the vulnerable plugins is enabled:\n    - `@babel/plugin-transform-runtime`\n    - `@babel/preset-env` when using the `useBuiltIns` option\n    - Any `polyfill provider` plugin that depends on `@babel/helper-define-polyfill-provider`. \n\nNote: Babel has multiple ways to enable plugins. Our scanner checks all the possible ways: through the JSON config file of Babel, through CLI, API, and dynamic configuration in JS.",
                "markdown": "The scanner checks whether:\n\n* One of the vulnerable functions `NodePath.evaluate()` or `NodePath.evaluateTruthy()` is used.\n\n* One of the vulnerable plugins is enabled:\n    - `@babel/plugin-transform-runtime`\n    - `@babel/preset-env` when using the `useBuiltIns` option\n    - Any `polyfill provider` plugin that depends on `@babel/helper-define-polyfill-provider`. \n\nNote: Babel has multiple ways to enable plugins. Our scanner checks all the possible ways: through the JSON config file of Babel, through CLI, API, and dynamic configuration in JS."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-45287",
              "name": "CVE-2023-45287",
              "shortDescription": {
                "text": "Scanner for CVE-2023-45287"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following functions are called:\n\n* `Conn.Handshake()`\n\n* `Conn.HandshakeContext()`\n\n* `Conn.Read()`\n\n* `Conn.Write()`\n\n* `Dial()`\n\n* `DialWithDialer()`\n\n* `Dialer.Dial()`\n\n* `Dialer.DialContext()`",
                "markdown": "The scanner checks whether any of the following functions are called:\n\n* `Conn.Handshake()`\n\n* `Conn.HandshakeContext()`\n\n* `Conn.Read()`\n\n* `Conn.Write()`\n\n* `Dial()`\n\n* `DialWithDialer()`\n\n* `Dialer.Dial()`\n\n* `Dialer.DialContext()`"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-35116",
              "name": "CVE-2023-35116",
              "shortDescription": {
                "text": "Scanner for CVE-2023-35116"
              },
              "fullDescription": {
                "text": "The scanner checks for calls to the vulnerable functions with external input:\n\n*  `ObjectMapper.writeValue()`\n*  `ObjectMapper.writeValueAsString()`\n*  `ObjectMapper.writeValueAsBytes()`\n*  `ObjectWriter.writeValue()`\n*  `ObjectWriter.writeValueAsString()`\n*  `ObjectWriter.writeValueAsBytes()`\n* `ser.DefaultSerializerProvider.serializeValue()`\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The input argument to those functions is a cyclic object (e.g. a `HashMap` object with a reference to itself).",
                "markdown": "The scanner checks for calls to the vulnerable functions with external input:\n\n*  `ObjectMapper.writeValue()`\n*  `ObjectMapper.writeValueAsString()`\n*  `ObjectMapper.writeValueAsBytes()`\n*  `ObjectWriter.writeValue()`\n*  `ObjectWriter.writeValueAsString()`\n*  `ObjectWriter.writeValueAsBytes()`\n* `ser.DefaultSerializerProvider.serializeValue()`\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The input argument to those functions is a cyclic object (e.g. a `HashMap` object with a reference to itself)."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-42282",
              "name": "CVE-2023-42282",
              "shortDescription": {
                "text": "Scanner for CVE-2023-42282"
              },
              "fullDescription": {
                "text": "The scanner checks whether `isPublic()` is called with external input.",
                "markdown": "The scanner checks whether `isPublic()` is called with external input."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-45288",
              "name": "CVE-2023-45288",
              "shortDescription": {
                "text": "Scanner for CVE-2023-45288"
              },
              "fullDescription": {
                "text": "The scanner checks if any of the following functions are called:\n\n* `net/http/ServeTLS`\n* `x/net/http2/Server/ServeConn`\n* `x/net/http2/ConfigureServer`\n\nAn additional condition (that the scanner currently does not check) should be verified to determine if the CVE is applicable: `crypto/tls/Config/NextProtos` or `net/http/TLSNextProto` are not used to disable `HTTP/2`.",
                "markdown": "The scanner checks if any of the following functions are called:\n\n* `net/http/ServeTLS`\n* `x/net/http2/Server/ServeConn`\n* `x/net/http2/ConfigureServer`\n\nAn additional condition (that the scanner currently does not check) should be verified to determine if the CVE is applicable: `crypto/tls/Config/NextProtos` or `net/http/TLSNextProto` are not used to disable `HTTP/2`."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29827",
              "name": "CVE-2023-29827",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29827"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following conditions are met:\n\n1. The `ejs.renderFile` function is called with an unknown third argument.\n\n2. The `ejs.compile` function is called with an unknown second argument.\n\n3. The `express.set` function is called with any of the following arguments:\n\n* `express.set(\"view engine\", \"ejs\")`\n* `express.set(\"view engine\", {USER_INPUT})`\n* `express.set({USER_INPUT}, \"ejs\")`\n* `express.set({USER_INPUT}, {USER_INPUT})`",
                "markdown": "The scanner checks whether any of the following conditions are met:\n\n1. The `ejs.renderFile` function is called with an unknown third argument.\n\n2. The `ejs.compile` function is called with an unknown second argument.\n\n3. The `express.set` function is called with any of the following arguments:\n\n* `express.set(\"view engine\", \"ejs\")`\n* `express.set(\"view engine\", {USER_INPUT})`\n* `express.set({USER_INPUT}, \"ejs\")`\n* `express.set({USER_INPUT}, {USER_INPUT})`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-30635",
              "name": "CVE-2022-30635",
              "shortDescription": {
                "text": "Scanner for CVE-2022-30635"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function Decoder.Decode of encoding/gob is called.",
                "markdown": "The scanner checks whether the vulnerable function Decoder.Decode of encoding/gob is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2020-28469",
              "name": "CVE-2020-28469",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-28469"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-1705",
              "name": "CVE-2022-1705",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-1705"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-46234",
              "name": "CVE-2023-46234",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-46234"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-7753",
              "name": "CVE-2020-7753",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-7753"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-39318",
              "name": "CVE-2023-39318",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-39318"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-30629",
              "name": "CVE-2022-30629",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-30629"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-4068",
              "name": "CVE-2024-4068",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-4068"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-45857",
              "name": "CVE-2023-45857",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-45857"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-33623",
              "name": "CVE-2021-33623",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-33623"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-0122",
              "name": "CVE-2022-0122",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-0122"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-28849",
              "name": "CVE-2024-28849",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-28849"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-29180",
              "name": "CVE-2024-29180",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-29180"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-45284",
              "name": "CVE-2023-45284",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-45284"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42365",
              "name": "CVE-2023-42365",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42365"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-26159",
              "name": "CVE-2023-26159",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-26159"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-26144",
              "name": "CVE-2023-26144",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-26144"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-24532",
              "name": "CVE-2023-24532",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-24532"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-39319",
              "name": "CVE-2023-39319",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-39319"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-24773",
              "name": "CVE-2022-24773",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-24773"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-44270",
              "name": "CVE-2023-44270",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-44270"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-29415",
              "name": "CVE-2024-29415",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-29415"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-39326",
              "name": "CVE-2023-39326",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-39326"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42364",
              "name": "CVE-2023-42364",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42364"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            }
          ],
          "version": "1.0"
        }
      },
      "invocations": [
        {
          "arguments": [
            "/root/.jfrog/dependencies/analyzerManager/jas_scanner/jas_scanner",
            "scan",
            "/tmp/jfrog.cli.temp.-1718676279-4196158361/config.yaml"
          ],
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "/tmp/jfrog.cli.temp.-1718675954-2458120540/image.tar"
          }
        }
      ],
      "results": [
        {
          "ruleId": "applic_CVE-2022-29804",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-41722",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-41720",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether one of the vulnerable functions `os.dirFS.Open` or  `net/http.Dir.Open` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2022-41716",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-30634",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-30580",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2023-45283",
          "kind": "pass",
          "message": {
            "text": "The vulnerability is only exploitable when running under the Windows OS.\nSince currently only Linux containers are supported, the scanner will always conclude that this vulnerability is not applicable."
          }
        },
        {
          "ruleId": "applic_CVE-2024-28863",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `tar.x`\n* `tar.extract`"
          }
        },
        {
          "ruleId": "applic_CVE-2022-2880",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-1962",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-23772",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `Rat.SetString` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///opt/verdaccio/node_modules/.pnpm/%40esbuild%2Blinux-x64%400.21.5/node_modules/%40esbuild/linux-x64/bin/esbuild"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///opt/verdaccio/node_modules/.pnpm/%40esbuild%2Blinux-x64%400.21.5/node_modules/%40esbuild/linux-x64/bin/esbuild"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24675",
          "message": {
            "text": "The vulnerable function pem.Decode is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///opt/verdaccio/node_modules/.pnpm/%40esbuild%2Blinux-x64%400.21.5/node_modules/%40esbuild/linux-x64/bin/esbuild"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24772",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `publicKey.verify` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2022-24771",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `publicKey.verify` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.Compile is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///opt/verdaccio/node_modules/.pnpm/%40esbuild%2Blinux-x64%400.21.5/node_modules/%40esbuild/linux-x64/bin/esbuild"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.MustCompile is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///opt/verdaccio/node_modules/.pnpm/%40esbuild%2Blinux-x64%400.21.5/node_modules/%40esbuild/linux-x64/bin/esbuild"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.Compile is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///opt/verdaccio/node_modules/.pnpm/%40esbuild%2Blinux-x64%400.21.5/node_modules/%40esbuild/linux-x64/bin/esbuild"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28131",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `Decoder.Skip` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function CurveParams.ScalarMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///opt/verdaccio/node_modules/.pnpm/%40esbuild%2Blinux-x64%400.21.5/node_modules/%40esbuild/linux-x64/bin/esbuild"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function CurveParams.ScalarBaseMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///opt/verdaccio/node_modules/.pnpm/%40esbuild%2Blinux-x64%400.21.5/node_modules/%40esbuild/linux-x64/bin/esbuild"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.ScalarBaseMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///opt/verdaccio/node_modules/.pnpm/%40esbuild%2Blinux-x64%400.21.5/node_modules/%40esbuild/linux-x64/bin/esbuild"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.ScalarMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///opt/verdaccio/node_modules/.pnpm/%40esbuild%2Blinux-x64%400.21.5/node_modules/%40esbuild/linux-x64/bin/esbuild"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-2879",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `archive/tar.(*Reader).Next` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2022-29526",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-29622",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `formidable` is called with any of the following values to its 1st (`options`) argument :\n\n- `options.keepExtensions` set to `true`.\n- With external input to `options.keepExtensions`."
          }
        },
        {
          "ruleId": "applic_CVE-2022-30630",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `fs.Glob` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2022-30631",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `Reader.Read` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2022-30632",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `filepath.Glob` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2022-30633",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-32148",
          "message": {
            "text": "The vulnerable function Header.Clone is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///opt/verdaccio/node_modules/.pnpm/%40esbuild%2Blinux-x64%400.21.5/node_modules/%40esbuild/linux-x64/bin/esbuild"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-32189",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable functions `Float.GobDecode()` or `Rat.GobDecode()` are called."
          }
        },
        {
          "ruleId": "applic_CVE-2022-41715",
          "message": {
            "text": "The vulnerable function regexp/syntax.parse is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///opt/verdaccio/node_modules/.pnpm/%40esbuild%2Blinux-x64%400.21.5/node_modules/%40esbuild/linux-x64/bin/esbuild"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41724",
          "kind": "pass",
          "message": {
            "text": "The CVE is never applicable. A closer inspection of the issue shows there are no potential user-controllable paths that allow creating a panic (see also original commit message - https://go.dev/cl/468125)"
          }
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function readMIMEHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///opt/verdaccio/node_modules/.pnpm/%40esbuild%2Blinux-x64%400.21.5/node_modules/%40esbuild/linux-x64/bin/esbuild"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.ReadMIMEHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///opt/verdaccio/node_modules/.pnpm/%40esbuild%2Blinux-x64%400.21.5/node_modules/%40esbuild/linux-x64/bin/esbuild"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function readMIMEHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///opt/verdaccio/node_modules/.pnpm/%40esbuild%2Blinux-x64%400.21.5/node_modules/%40esbuild/linux-x64/bin/esbuild"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.ReadMIMEHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///opt/verdaccio/node_modules/.pnpm/%40esbuild%2Blinux-x64%400.21.5/node_modules/%40esbuild/linux-x64/bin/esbuild"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24534",
          "message": {
            "text": "The vulnerable function readMIMEHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///opt/verdaccio/node_modules/.pnpm/%40esbuild%2Blinux-x64%400.21.5/node_modules/%40esbuild/linux-x64/bin/esbuild"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24534",
          "message": {
            "text": "The vulnerable function Reader.ReadMIMEHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///opt/verdaccio/node_modules/.pnpm/%40esbuild%2Blinux-x64%400.21.5/node_modules/%40esbuild/linux-x64/bin/esbuild"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24537",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether one of the following vulnerable functions is called:\n\n- `scanner.Scanner.Scan`\n- `parser.ParseDir`\n- `parser.ParseExpr`\n- `parser.ExprFrom`\n- `parser.ParseFile`\n\nNote that the scanner does not check for the invocation of command-line utilities (such as `go build`) that can indirectly trigger this vulnerability"
          }
        },
        {
          "ruleId": "applic_CVE-2023-24538",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `Template.Execute`\n\t\n* `Template.ExecuteTemplate`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-24539",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2023-24540",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2023-29400",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2023-29402",
          "kind": "pass",
          "message": {
            "text": "The scanner looks for Go program binaries that were built with \"cgo\" support (C language bindings)"
          }
        },
        {
          "ruleId": "applic_CVE-2023-29403",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any Go binaries exist in the image, that have the SETUID or SETGID flags enabled"
          }
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.Write is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///opt/verdaccio/node_modules/.pnpm/%40esbuild%2Blinux-x64%400.21.5/node_modules/%40esbuild/linux-x64/bin/esbuild"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.Handshake is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///opt/verdaccio/node_modules/.pnpm/%40esbuild%2Blinux-x64%400.21.5/node_modules/%40esbuild/linux-x64/bin/esbuild"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.HandshakeContext is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///opt/verdaccio/node_modules/.pnpm/%40esbuild%2Blinux-x64%400.21.5/node_modules/%40esbuild/linux-x64/bin/esbuild"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.Read is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///opt/verdaccio/node_modules/.pnpm/%40esbuild%2Blinux-x64%400.21.5/node_modules/%40esbuild/linux-x64/bin/esbuild"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.verifyServerCertificate is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///opt/verdaccio/node_modules/.pnpm/%40esbuild%2Blinux-x64%400.21.5/node_modules/%40esbuild/linux-x64/bin/esbuild"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.processCertsFromClient is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///opt/verdaccio/node_modules/.pnpm/%40esbuild%2Blinux-x64%400.21.5/node_modules/%40esbuild/linux-x64/bin/esbuild"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-26115",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable module `word-wrap` is called with external input and the `trim` option set to true."
          }
        },
        {
          "ruleId": "applic_CVE-2022-23773",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable, since exploitation depends on the structure of the organization's Git repositories (see extended information)."
          }
        },
        {
          "ruleId": "applic_CVE-2023-39323",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information)."
          }
        },
        {
          "ruleId": "applic_CVE-2023-29405",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information)."
          }
        },
        {
          "ruleId": "applic_CVE-2023-29404",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information)."
          }
        },
        {
          "ruleId": "applic_CVE-2023-45285",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue is only exploitable via user interaction."
          }
        },
        {
          "ruleId": "applic_CVE-2023-45133",
          "message": {
            "text": "At least one of the vulnerable plugins/presets is dynamically configured"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpvc3uahur/unpacked/filesystem/blobs/sha256/20a36e5c655223652dd6d0a5f9760e992d6a91cdd3ee3da1c187c21fbd2f1e25/opt/verdaccio/node_modules/.pnpm/%40storybook%2Bcsf%400.0.2--canary.4566f4d.1/node_modules/%40storybook/csf/.babelrc.js"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 5,
                  "endLine": 3,
                  "endColumn": 5,
                  "snippet": {
                    "text": "@babel/preset-env"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45133",
          "message": {
            "text": "At least one of the vulnerable plugins/presets is dynamically configured"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpvc3uahur/unpacked/filesystem/blobs/sha256/20a36e5c655223652dd6d0a5f9760e992d6a91cdd3ee3da1c187c21fbd2f1e25/opt/verdaccio/node_modules/.pnpm/%40storybook%2Bmdx1-csf%400.0.1_%40babel%2Bcore%407.23.0/node_modules/%40storybook/mdx1-csf/.babelrc.js"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 11,
                  "endLine": 13,
                  "endColumn": 11,
                  "snippet": {
                    "text": "@babel/preset-env"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45133",
          "message": {
            "text": "At least one of the vulnerable plugins/presets is dynamically configured"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpvc3uahur/unpacked/filesystem/blobs/sha256/20a36e5c655223652dd6d0a5f9760e992d6a91cdd3ee3da1c187c21fbd2f1e25/opt/verdaccio/node_modules/.pnpm/%40storybook%2Bmdx1-csf%400.0.1_%40babel%2Bcore%407.23.0/node_modules/%40storybook/mdx1-csf/.babelrc.js"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 6,
                  "endLine": 5,
                  "endColumn": 6,
                  "snippet": {
                    "text": "@babel/preset-env"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45133",
          "message": {
            "text": "At least one of the vulnerable plugins/presets is dynamically configured"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpvc3uahur/unpacked/filesystem/blobs/sha256/20a36e5c655223652dd6d0a5f9760e992d6a91cdd3ee3da1c187c21fbd2f1e25/opt/verdaccio/node_modules/.pnpm/%40storybook%2Bmdx1-csf%400.0.1_%40babel%2Bcore%407.23.9/node_modules/%40storybook/mdx1-csf/.babelrc.js"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 11,
                  "endLine": 13,
                  "endColumn": 11,
                  "snippet": {
                    "text": "@babel/preset-env"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45133",
          "message": {
            "text": "At least one of the vulnerable plugins/presets is dynamically configured"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpvc3uahur/unpacked/filesystem/blobs/sha256/20a36e5c655223652dd6d0a5f9760e992d6a91cdd3ee3da1c187c21fbd2f1e25/opt/verdaccio/node_modules/.pnpm/%40storybook%2Bmdx1-csf%400.0.1_%40babel%2Bcore%407.23.9/node_modules/%40storybook/mdx1-csf/.babelrc.js"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 6,
                  "endLine": 5,
                  "endColumn": 6,
                  "snippet": {
                    "text": "@babel/preset-env"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///opt/verdaccio/node_modules/.pnpm/%40esbuild%2Blinux-x64%400.21.5/node_modules/%40esbuild/linux-x64/bin/esbuild"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///opt/verdaccio/node_modules/.pnpm/%40esbuild%2Blinux-x64%400.21.5/node_modules/%40esbuild/linux-x64/bin/esbuild"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///opt/verdaccio/node_modules/.pnpm/%40esbuild%2Blinux-x64%400.21.5/node_modules/%40esbuild/linux-x64/bin/esbuild"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///opt/verdaccio/node_modules/.pnpm/%40esbuild%2Blinux-x64%400.21.5/node_modules/%40esbuild/linux-x64/bin/esbuild"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///opt/verdaccio/node_modules/.pnpm/%40esbuild%2Blinux-x64%400.21.5/node_modules/%40esbuild/linux-x64/bin/esbuild"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-35116",
          "kind": "pass",
          "message": {
            "text": "The scanner checks for calls to the vulnerable functions with external input:\n\n*  `ObjectMapper.writeValue()`\n*  `ObjectMapper.writeValueAsString()`\n*  `ObjectMapper.writeValueAsBytes()`\n*  `ObjectWriter.writeValue()`\n*  `ObjectWriter.writeValueAsString()`\n*  `ObjectWriter.writeValueAsBytes()`\n* `ser.DefaultSerializerProvider.serializeValue()`\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The input argument to those functions is a cyclic object (e.g. a `HashMap` object with a reference to itself)."
          }
        },
        {
          "ruleId": "applic_CVE-2023-42282",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether `isPublic()` is called with external input."
          }
        },
        {
          "ruleId": "applic_CVE-2023-45288",
          "message": {
            "text": "The vulnerable function ServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///opt/verdaccio/node_modules/.pnpm/%40esbuild%2Blinux-x64%400.21.5/node_modules/%40esbuild/linux-x64/bin/esbuild"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29827",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following conditions are met:\n\n1. The `ejs.renderFile` function is called with an unknown third argument.\n\n2. The `ejs.compile` function is called with an unknown second argument.\n\n3. The `express.set` function is called with any of the following arguments:\n\n* `express.set(\"view engine\", \"ejs\")`\n* `express.set(\"view engine\", {USER_INPUT})`\n* `express.set({USER_INPUT}, \"ejs\")`\n* `express.set({USER_INPUT}, {USER_INPUT})`"
          }
        },
        {
          "ruleId": "applic_CVE-2022-30635",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function Decoder.Decode of encoding/gob is called."
          }
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://jfrog.com/help/r/jfrog-security-documentation/jfrog-advanced-security",
          "name": "JFrog Secrets scanner",
          "rules": [
            {
              "id": "REQ.SECRET.GENERIC.TEXT",
              "name": "REQ.SECRET.GENERIC.TEXT",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.TEXT"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "REQ.SECRET.GENERIC.CODE",
              "name": "REQ.SECRET.GENERIC.CODE",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.CODE"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive"
              }
            },
            {
              "id": "REQ.SECRET.GENERIC.URL",
              "name": "REQ.SECRET.GENERIC.URL",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.URL"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive"
              }
            },
            {
              "id": "REQ.SECRET.KEYS",
              "name": "REQ.SECRET.KEYS",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.KEYS"
              },
              "fullDescription": {
                "text": "\nStoring an API key in the image could lead to several risks.\n\nIf the key is associated with a wide scope of privileges, attackers could extract it from a single image or firmware and use it maliciously to attack many targets. For example, if the embedded key allows querying/modifying data for all cloud user accounts, without per-user authentication, the attackers who extract it would gain access to system-wide data.\n\nIf the cloud/SaaS provider bills by key usage - for example, every million queries cost the key's owner a fixed sum of money - attackers could use the keys for their own purposes (or just as a form of vandalism), incurring a large cost to the legitimate user or operator.\n\n## Best practices\n\nUse narrow scopes for stored API keys. As much as possible, API keys should be unique per host and require additional authentication with the user's individual credentials for any sensitive actions.\n\nAvoid placing keys whose use incurs costs directly in the image. Store the key with any software or hardware protection available on the host for key storage (such as operating system key-stores, hardware cryptographic storage mechanisms or cloud-managed secure storage services such as [AWS KMS](https://aws.amazon.com/kms/)).\n\nTokens that were detected as exposed should be revoked and replaced -\n\n* [AWS Key Revocation](https://aws.amazon.com/premiumsupport/knowledge-center/delete-access-key/#:~:text=If%20you%20see%20a%20warning,the%20confirmation%20box%2C%20choose%20Deactivate.)\n* [GCP Key Revocation](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/CloudIAM/delete-api-keys.html)\n* [Azure Key Revocation](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops\u0026tabs=Windows#revoke-a-pat)\n* [GitHub Key Revocation](https://docs.github.com/en/rest/apps/oauth-applications#delete-an-app-authorization)\n",
                "markdown": "\nStoring an API key in the image could lead to several risks.\n\nIf the key is associated with a wide scope of privileges, attackers could extract it from a single image or firmware and use it maliciously to attack many targets. For example, if the embedded key allows querying/modifying data for all cloud user accounts, without per-user authentication, the attackers who extract it would gain access to system-wide data.\n\nIf the cloud/SaaS provider bills by key usage - for example, every million queries cost the key's owner a fixed sum of money - attackers could use the keys for their own purposes (or just as a form of vandalism), incurring a large cost to the legitimate user or operator.\n\n## Best practices\n\nUse narrow scopes for stored API keys. As much as possible, API keys should be unique per host and require additional authentication with the user's individual credentials for any sensitive actions.\n\nAvoid placing keys whose use incurs costs directly in the image. Store the key with any software or hardware protection available on the host for key storage (such as operating system key-stores, hardware cryptographic storage mechanisms or cloud-managed secure storage services such as [AWS KMS](https://aws.amazon.com/kms/)).\n\nTokens that were detected as exposed should be revoked and replaced -\n\n* [AWS Key Revocation](https://aws.amazon.com/premiumsupport/knowledge-center/delete-access-key/#:~:text=If%20you%20see%20a%20warning,the%20confirmation%20box%2C%20choose%20Deactivate.)\n* [GCP Key Revocation](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/CloudIAM/delete-api-keys.html)\n* [Azure Key Revocation](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops\u0026tabs=Windows#revoke-a-pat)\n* [GitHub Key Revocation](https://docs.github.com/en/rest/apps/oauth-applications#delete-an-app-authorization)\n"
              },
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private"
              }
            }
          ],
          "version": "1.0"
        }
      },
      "invocations": [
        {
          "arguments": [
            "/root/.jfrog/dependencies/analyzerManager/jas_scanner/jas_scanner",
            "scan",
            "/tmp/jfrog.cli.temp.-1718676279-4196158361/config.yaml"
          ],
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "/tmp/jfrog.cli.temp.-1718675954-2458120540/image.tar"
          }
        }
      ],
      "results": [
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpn0_5ffgt/unpacked/filesystem/blobs/sha256/20a36e5c655223652dd6d0a5f9760e992d6a91cdd3ee3da1c187c21fbd2f1e25/opt/verdaccio/e2e/docker/docker-build-install-plugin/docker.yaml"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 6,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "tok************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpn0_5ffgt/unpacked/filesystem/blobs/sha256/20a36e5c655223652dd6d0a5f9760e992d6a91cdd3ee3da1c187c21fbd2f1e25/opt/verdaccio/packages/auth/package.json"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 5,
                  "endLine": 49,
                  "endColumn": 5,
                  "snippet": {
                    "text": "ver************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpn0_5ffgt/unpacked/filesystem/blobs/sha256/20a36e5c655223652dd6d0a5f9760e992d6a91cdd3ee3da1c187c21fbd2f1e25/opt/verdaccio/packages/ui-components/build/components/Install/__partials__/data.json"
                },
                "region": {
                  "startLine": 5859,
                  "startColumn": 9,
                  "endLine": 5859,
                  "endColumn": 9,
                  "snippet": {
                    "text": "1-p************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpn0_5ffgt/unpacked/filesystem/blobs/sha256/20a36e5c655223652dd6d0a5f9760e992d6a91cdd3ee3da1c187c21fbd2f1e25/opt/verdaccio/packages/ui-components/build/components/Install/__partials__/data.json"
                },
                "region": {
                  "startLine": 5860,
                  "startColumn": 9,
                  "endLine": 5860,
                  "endColumn": 9,
                  "snippet": {
                    "text": "1-p************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpn0_5ffgt/unpacked/filesystem/blobs/sha256/20a36e5c655223652dd6d0a5f9760e992d6a91cdd3ee3da1c187c21fbd2f1e25/opt/verdaccio/packages/ui-components/build/components/Install/__partials__/data.json"
                },
                "region": {
                  "startLine": 5861,
                  "startColumn": 9,
                  "endLine": 5861,
                  "endColumn": 9,
                  "snippet": {
                    "text": "1-p************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpn0_5ffgt/unpacked/filesystem/blobs/sha256/20a36e5c655223652dd6d0a5f9760e992d6a91cdd3ee3da1c187c21fbd2f1e25/opt/verdaccio/packages/ui-components/build/components/Install/__partials__/data.json"
                },
                "region": {
                  "startLine": 5862,
                  "startColumn": 9,
                  "endLine": 5862,
                  "endColumn": 9,
                  "snippet": {
                    "text": "1-p************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpn0_5ffgt/unpacked/filesystem/blobs/sha256/20a36e5c655223652dd6d0a5f9760e992d6a91cdd3ee3da1c187c21fbd2f1e25/opt/verdaccio/packages/ui-components/build/components/Repository/__partials__/data.json"
                },
                "region": {
                  "startLine": 5859,
                  "startColumn": 9,
                  "endLine": 5859,
                  "endColumn": 9,
                  "snippet": {
                    "text": "1-p************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpn0_5ffgt/unpacked/filesystem/blobs/sha256/20a36e5c655223652dd6d0a5f9760e992d6a91cdd3ee3da1c187c21fbd2f1e25/opt/verdaccio/packages/ui-components/build/components/Repository/__partials__/data.json"
                },
                "region": {
                  "startLine": 5860,
                  "startColumn": 9,
                  "endLine": 5860,
                  "endColumn": 9,
                  "snippet": {
                    "text": "1-p************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpn0_5ffgt/unpacked/filesystem/blobs/sha256/20a36e5c655223652dd6d0a5f9760e992d6a91cdd3ee3da1c187c21fbd2f1e25/opt/verdaccio/packages/ui-components/build/components/Repository/__partials__/data.json"
                },
                "region": {
                  "startLine": 5861,
                  "startColumn": 9,
                  "endLine": 5861,
                  "endColumn": 9,
                  "snippet": {
                    "text": "1-p************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpn0_5ffgt/unpacked/filesystem/blobs/sha256/20a36e5c655223652dd6d0a5f9760e992d6a91cdd3ee3da1c187c21fbd2f1e25/opt/verdaccio/packages/ui-components/build/components/Repository/__partials__/data.json"
                },
                "region": {
                  "startLine": 5862,
                  "startColumn": 9,
                  "endLine": 5862,
                  "endColumn": 9,
                  "snippet": {
                    "text": "1-p************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpn0_5ffgt/unpacked/filesystem/blobs/sha256/20a36e5c655223652dd6d0a5f9760e992d6a91cdd3ee3da1c187c21fbd2f1e25/opt/verdaccio/packages/ui-components/build/components/Versions/__partials__/data.json"
                },
                "region": {
                  "startLine": 5860,
                  "startColumn": 9,
                  "endLine": 5860,
                  "endColumn": 9,
                  "snippet": {
                    "text": "1-p************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpn0_5ffgt/unpacked/filesystem/blobs/sha256/20a36e5c655223652dd6d0a5f9760e992d6a91cdd3ee3da1c187c21fbd2f1e25/opt/verdaccio/packages/ui-components/build/components/Versions/__partials__/data.json"
                },
                "region": {
                  "startLine": 5861,
                  "startColumn": 9,
                  "endLine": 5861,
                  "endColumn": 9,
                  "snippet": {
                    "text": "1-p************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpn0_5ffgt/unpacked/filesystem/blobs/sha256/20a36e5c655223652dd6d0a5f9760e992d6a91cdd3ee3da1c187c21fbd2f1e25/opt/verdaccio/packages/ui-components/build/components/Versions/__partials__/data.json"
                },
                "region": {
                  "startLine": 5862,
                  "startColumn": 9,
                  "endLine": 5862,
                  "endColumn": 9,
                  "snippet": {
                    "text": "1-p************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpn0_5ffgt/unpacked/filesystem/blobs/sha256/20a36e5c655223652dd6d0a5f9760e992d6a91cdd3ee3da1c187c21fbd2f1e25/opt/verdaccio/packages/ui-components/build/components/Versions/__partials__/data.json"
                },
                "region": {
                  "startLine": 5863,
                  "startColumn": 9,
                  "endLine": 5863,
                  "endColumn": 9,
                  "snippet": {
                    "text": "1-p************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpn0_5ffgt/unpacked/filesystem/blobs/sha256/20a36e5c655223652dd6d0a5f9760e992d6a91cdd3ee3da1c187c21fbd2f1e25/opt/verdaccio/packages/ui-components/src/components/Install/__partials__/data.json"
                },
                "region": {
                  "startLine": 5859,
                  "startColumn": 9,
                  "endLine": 5859,
                  "endColumn": 9,
                  "snippet": {
                    "text": "1-p************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpn0_5ffgt/unpacked/filesystem/blobs/sha256/20a36e5c655223652dd6d0a5f9760e992d6a91cdd3ee3da1c187c21fbd2f1e25/opt/verdaccio/packages/ui-components/src/components/Install/__partials__/data.json"
                },
                "region": {
                  "startLine": 5860,
                  "startColumn": 9,
                  "endLine": 5860,
                  "endColumn": 9,
                  "snippet": {
                    "text": "1-p************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpn0_5ffgt/unpacked/filesystem/blobs/sha256/20a36e5c655223652dd6d0a5f9760e992d6a91cdd3ee3da1c187c21fbd2f1e25/opt/verdaccio/packages/ui-components/src/components/Install/__partials__/data.json"
                },
                "region": {
                  "startLine": 5861,
                  "startColumn": 9,
                  "endLine": 5861,
                  "endColumn": 9,
                  "snippet": {
                    "text": "1-p************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpn0_5ffgt/unpacked/filesystem/blobs/sha256/20a36e5c655223652dd6d0a5f9760e992d6a91cdd3ee3da1c187c21fbd2f1e25/opt/verdaccio/packages/ui-components/src/components/Install/__partials__/data.json"
                },
                "region": {
                  "startLine": 5862,
                  "startColumn": 9,
                  "endLine": 5862,
                  "endColumn": 9,
                  "snippet": {
                    "text": "1-p************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpn0_5ffgt/unpacked/filesystem/blobs/sha256/20a36e5c655223652dd6d0a5f9760e992d6a91cdd3ee3da1c187c21fbd2f1e25/opt/verdaccio/packages/ui-components/src/components/Repository/__partials__/data.json"
                },
                "region": {
                  "startLine": 5859,
                  "startColumn": 9,
                  "endLine": 5859,
                  "endColumn": 9,
                  "snippet": {
                    "text": "1-p************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpn0_5ffgt/unpacked/filesystem/blobs/sha256/20a36e5c655223652dd6d0a5f9760e992d6a91cdd3ee3da1c187c21fbd2f1e25/opt/verdaccio/packages/ui-components/src/components/Repository/__partials__/data.json"
                },
                "region": {
                  "startLine": 5860,
                  "startColumn": 9,
                  "endLine": 5860,
                  "endColumn": 9,
                  "snippet": {
                    "text": "1-p************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpn0_5ffgt/unpacked/filesystem/blobs/sha256/20a36e5c655223652dd6d0a5f9760e992d6a91cdd3ee3da1c187c21fbd2f1e25/opt/verdaccio/packages/ui-components/src/components/Repository/__partials__/data.json"
                },
                "region": {
                  "startLine": 5861,
                  "startColumn": 9,
                  "endLine": 5861,
                  "endColumn": 9,
                  "snippet": {
                    "text": "1-p************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpn0_5ffgt/unpacked/filesystem/blobs/sha256/20a36e5c655223652dd6d0a5f9760e992d6a91cdd3ee3da1c187c21fbd2f1e25/opt/verdaccio/packages/ui-components/src/components/Repository/__partials__/data.json"
                },
                "region": {
                  "startLine": 5862,
                  "startColumn": 9,
                  "endLine": 5862,
                  "endColumn": 9,
                  "snippet": {
                    "text": "1-p************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpn0_5ffgt/unpacked/filesystem/blobs/sha256/20a36e5c655223652dd6d0a5f9760e992d6a91cdd3ee3da1c187c21fbd2f1e25/opt/verdaccio/packages/ui-components/src/components/Versions/__partials__/data.json"
                },
                "region": {
                  "startLine": 5860,
                  "startColumn": 9,
                  "endLine": 5860,
                  "endColumn": 9,
                  "snippet": {
                    "text": "1-p************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpn0_5ffgt/unpacked/filesystem/blobs/sha256/20a36e5c655223652dd6d0a5f9760e992d6a91cdd3ee3da1c187c21fbd2f1e25/opt/verdaccio/packages/ui-components/src/components/Versions/__partials__/data.json"
                },
                "region": {
                  "startLine": 5861,
                  "startColumn": 9,
                  "endLine": 5861,
                  "endColumn": 9,
                  "snippet": {
                    "text": "1-p************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpn0_5ffgt/unpacked/filesystem/blobs/sha256/20a36e5c655223652dd6d0a5f9760e992d6a91cdd3ee3da1c187c21fbd2f1e25/opt/verdaccio/packages/ui-components/src/components/Versions/__partials__/data.json"
                },
                "region": {
                  "startLine": 5862,
                  "startColumn": 9,
                  "endLine": 5862,
                  "endColumn": 9,
                  "snippet": {
                    "text": "1-p************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpn0_5ffgt/unpacked/filesystem/blobs/sha256/20a36e5c655223652dd6d0a5f9760e992d6a91cdd3ee3da1c187c21fbd2f1e25/opt/verdaccio/packages/ui-components/src/components/Versions/__partials__/data.json"
                },
                "region": {
                  "startLine": 5863,
                  "startColumn": 9,
                  "endLine": 5863,
                  "endColumn": 9,
                  "snippet": {
                    "text": "1-p************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpn0_5ffgt/unpacked/filesystem/blobs/sha256/20a36e5c655223652dd6d0a5f9760e992d6a91cdd3ee3da1c187c21fbd2f1e25/opt/verdaccio/packages/verdaccio/package.json"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 5,
                  "endLine": 48,
                  "endColumn": 5,
                  "snippet": {
                    "text": "ver************"
                  }
                }
              }
            }
          ]
        }
      ]
    }
  ]
}
