{
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "fullName": "Docker Scout",
          "informationUri": "https://docker.com/products/docker-scout",
          "name": "docker scout",
          "rules": [
            {
              "id": "CVE-2024-24788",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2024-24788"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2024-24788?s=golang&n=stdlib&t=golang&vr=%3E%3D1.22.0-0%2C%3C1.22.3",
              "help": {
                "text": "A malformed DNS message in response to a query can cause the Lookup functions to get stuck in an infinite loop.\n",
                "markdown": "> A malformed DNS message in response to a query can cause the Lookup functions to get stuck in an infinite loop.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.22.2 |\n| Affected range | >=1.22.0-0,<1.22.3       |\n| Fixed version  | 1.22.3                   |\n"
              },
              "properties": {
                "affected_version": ">=1.22.0-0,<1.22.3",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "1.22.3",
                "purls": [
                  "pkg:golang/stdlib@1.22.2"
                ],
                "security-severity": "3.1",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "CVE-2024-24789",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2024-24789"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2024-24789?s=golang&n=stdlib&t=golang&vr=%3E%3D1.22.0-0%2C%3C1.22.4",
              "help": {
                "text": "The archive/zip package's handling of certain types of invalid zip files differs from the behavior of most zip implementations. This misalignment could be exploited to create an zip file with contents that vary depending on the implementation reading the file. The archive/zip package now rejects files containing these errors.\n",
                "markdown": "> The archive/zip package's handling of certain types of invalid zip files differs from the behavior of most zip implementations. This misalignment could be exploited to create an zip file with contents that vary depending on the implementation reading the file. The archive/zip package now rejects files containing these errors.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.22.2 |\n| Affected range | >=1.22.0-0,<1.22.4       |\n| Fixed version  | 1.22.4                   |\n"
              },
              "properties": {
                "affected_version": ">=1.22.0-0,<1.22.4",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "1.22.4",
                "purls": [
                  "pkg:golang/stdlib@1.22.2"
                ],
                "security-severity": "3.1",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "CVE-2024-24790",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2024-24790"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2024-24790?s=golang&n=stdlib&t=golang&vr=%3E%3D1.22.0-0%2C%3C1.22.4",
              "help": {
                "text": "The various Is methods (IsPrivate, IsLoopback, etc) did not work as expected for IPv4-mapped IPv6 addresses, returning false for addresses which would return true in their traditional IPv4 forms.\n",
                "markdown": "> The various Is methods (IsPrivate, IsLoopback, etc) did not work as expected for IPv4-mapped IPv6 addresses, returning false for addresses which would return true in their traditional IPv4 forms.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.22.2 |\n| Affected range | >=1.22.0-0,<1.22.4       |\n| Fixed version  | 1.22.4                   |\n"
              },
              "properties": {
                "affected_version": ">=1.22.0-0,<1.22.4",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "1.22.4",
                "purls": [
                  "pkg:golang/stdlib@1.22.2"
                ],
                "security-severity": "3.1",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "CVE-2019-25210",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2019-25210: Exposure of Sensitive Information to an Unauthorized Actor"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2019-25210?s=github&n=v3&ns=helm.sh%2Fhelm&t=golang&vr=%3E%3D3.0.0%2C%3C%3D3.14.2",
              "help": {
                "text": "An issue was discovered in Cloud Native Computing Foundation (CNCF) Helm. It displays values of secrets when the --dry-run flag is used. This is a security concern in some use cases, such as a --dry-run call by a CI/CD tool. NOTE: the vendor's position is that this behavior was introduced intentionally, and cannot be removed without breaking backwards compatibility (some users may be relying on these values).\n",
                "markdown": "> An issue was discovered in Cloud Native Computing Foundation (CNCF) Helm. It displays values of secrets when the --dry-run flag is used. This is a security concern in some use cases, such as a --dry-run call by a CI/CD tool. NOTE: the vendor's position is that this behavior was introduced intentionally, and cannot be removed without breaking backwards compatibility (some users may be relying on these values).\n\n|                |                                   |\n|----------------|-----------------------------------|\n| Package        | pkg:golang/helm.sh/helm/v3@3.14.2 |\n| Affected range | >=3.0.0,<=3.14.2                  |\n| Fixed version  | not fixed                         |\n"
              },
              "properties": {
                "affected_version": ">=3.0.0,<=3.14.2",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "not fixed",
                "purls": [
                  "pkg:golang/helm.sh/helm/v3@3.14.2"
                ],
                "security-severity": "4.1",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2020-8552",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-8552: OWASP Top Ten 2017 Category A9 - Using Components with Known Vulnerabilities"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2020-8552?s=gitlab&n=apiserver&ns=k8s.io&t=golang&vr=%3C1.15.10",
              "help": {
                "text": "The Kubernetes API server component has been found to be vulnerable to a denial of service attack via successful API requests.\n",
                "markdown": "> The Kubernetes API server component has been found to be vulnerable to a denial of service attack via successful API requests.\n\n|                |                                              |\n|----------------|----------------------------------------------|\n| Package        | pkg:golang/k8s.io/apiserver@0.29.0           |\n| Affected range | <1.15.10                                     |\n| Fixed version  | 1.15.10, 1.16.7, 1.17.3                      |\n| CVSS Score     |                                          4.3 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:L |\n"
              },
              "properties": {
                "affected_version": "<1.15.10",
                "cvssV3": 4.3,
                "cvssV3_severity": "MEDIUM",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:L",
                "fixed_version": "1.15.10, 1.16.7, 1.17.3",
                "purls": [
                  "pkg:golang/k8s.io/apiserver@0.29.0"
                ],
                "security-severity": "4.3",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2024-28180",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2024-28180: Improper Handling of Highly Compressed Data (Data Amplification)"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2024-28180?s=github&n=v3&ns=github.com%2Fgo-jose%2Fgo-jose&t=golang&vr=%3C3.0.3",
              "help": {
                "text": "### Impact\nAn attacker could send a JWE containing compressed data that used large amounts of memory and CPU when decompressed by Decrypt or DecryptMulti. Those functions now return an error if the decompressed data would exceed 250kB or 10x the compressed size (whichever is larger). Thanks to Enze Wang@Alioth and Jianjun Chen@Zhongguancun Lab (@zer0yu and @chenjj) for reporting.\n\n### Patches\nThe problem is fixed in the following packages and versions:\n- github.com/go-jose/go-jose/v4 version 4.0.1\n- github.com/go-jose/go-jose/v3 version 3.0.3\n- gopkg.in/go-jose/go-jose.v2 version 2.6.3\n\nThe problem will not be fixed in the following package because the package is archived:\n- gopkg.in/square/go-jose.v2\n",
                "markdown": "> ### Impact\nAn attacker could send a JWE containing compressed data that used large amounts of memory and CPU when decompressed by Decrypt or DecryptMulti. Those functions now return an error if the decompressed data would exceed 250kB or 10x the compressed size (whichever is larger). Thanks to Enze Wang@Alioth and Jianjun Chen@Zhongguancun Lab (@zer0yu and @chenjj) for reporting.\n\n### Patches\nThe problem is fixed in the following packages and versions:\n- github.com/go-jose/go-jose/v4 version 4.0.1\n- github.com/go-jose/go-jose/v3 version 3.0.3\n- gopkg.in/go-jose/go-jose.v2 version 2.6.3\n\nThe problem will not be fixed in the following package because the package is archived:\n- gopkg.in/square/go-jose.v2\n\n|                |                                                |\n|----------------|------------------------------------------------|\n| Package        | pkg:golang/github.com/go-jose/go-jose@3.0.1#v3 |\n| Affected range | <3.0.3                                         |\n| Fixed version  | 3.0.3                                          |\n| CVSS Score     |                                            4.3 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:L   |\n"
              },
              "properties": {
                "affected_version": "<3.0.3",
                "cvssV3": 4.3,
                "cvssV3_severity": "MEDIUM",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:L",
                "fixed_version": "3.0.3",
                "purls": [
                  "pkg:golang/github.com/go-jose/go-jose@3.0.1#v3"
                ],
                "security-severity": "4.3",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2024-28122",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2024-28122: Uncontrolled Resource Consumption"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2024-28122?s=github&n=jwx&ns=github.com%2Flestrrat-go&t=golang&vr=%3C1.2.29",
              "help": {
                "text": "### Summary\nThis vulnerability allows an attacker with a trusted public key to cause a Denial-of-Service (DoS) condition by crafting a malicious JSON Web Encryption (JWE) token with an exceptionally high compression ratio. When this token is processed by the recipient, it results in significant memory allocation and processing time during decompression.\n\n### Details\n\n**The attacker needs to obtain a valid public key to compress the payload**. It needs to be valid so that the recipient can use to successfully decompress the payload. Furthermore in context JWT processing in the v2 versions, the recipient must explicitly allow JWE handling .\n\nThe attacker then crafts a message with high compression ratio, e.g. a payload with very high frequency of repeating patterns that can decompress to a much larger size.  If the payload is large enough, recipient who is decompressing the data will have to allocate a large amount of memory, which then can lead to a denial of service.\n\nThe original report includes a reference to [1], but there are some very subtle differences between this library and the aforementioned issue. The most important aspect is that the referenced issue focuses on JWT processing, whereas this library is intentionally divided into parts that comprise JOSE, i.e. JWT, JWS, JWE, JWK. In particular, v2 of this library does not attempt to handle JWT payload enveloped in a JWE message automatically (v1 attempted to do this automatically, but it was never stable).\n\nReflecting this subtle difference, the approach taken to mitigate this vulnerability is slightly different from the referenced issue. The referenced issue limits the size of JWT when parsing, but the fixes for this library limits the maximum size of the decompressed data when decrypting JWE messages. Therefore the fix in this library is applicable regardless of the usage context, and a limit is now imposed on the size of the message that our JWE implementation can handle.\n\n### Proof of Concept\n\nModified from the original report to fit the vulnerability better:\n\n```go\n// The value below just needs to be \"large enough\" so that the it puts enough strain on the\n// recipient's environment. The value below is a safe size on my machine to run the test\n// without causing problems. When you increase the payload size, at some point the processing\n// will be slow enough to virtually freeze the program or cause a memory allocation error\nconst payloadSize = 1 << 31\n\nprivkey, err := rsa.GenerateKey(rand.Reader, 2048)\nrequire.NoError(t, err, `rsa.GenerateKey should succeed`)\npubkey := &privkey.PublicKey\npayload := strings.Repeat(\"x\", payloadSize)\n\nencrypted, err := jwe.Encrypt([]byte(payload), jwe.WithKey(jwa.RSA_OAEP, pubkey), jwe.WithContentEncryption(\"A128CBC-HS256\"), jwe.WithCompress(jwa.Deflate))\nrequire.NoError(t, err, `jwe.Encrypt should succeed`)\n_, err = jwe.Decrypt(encrypted, jwe.WithKey(jwa.RSA_OAEP, privkey)) // Will be allocating large amounts of memory\nrequire.Error(t, err, `jwe.Decrypt should fail`)\n```\n\n###  References\n\n[1] [CVE-2024-21319](https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/security/advisories/GHSA-8g9c-28fc-mcx2)\n",
                "markdown": "> ### Summary\nThis vulnerability allows an attacker with a trusted public key to cause a Denial-of-Service (DoS) condition by crafting a malicious JSON Web Encryption (JWE) token with an exceptionally high compression ratio. When this token is processed by the recipient, it results in significant memory allocation and processing time during decompression.\n\n### Details\n\n**The attacker needs to obtain a valid public key to compress the payload**. It needs to be valid so that the recipient can use to successfully decompress the payload. Furthermore in context JWT processing in the v2 versions, the recipient must explicitly allow JWE handling .\n\nThe attacker then crafts a message with high compression ratio, e.g. a payload with very high frequency of repeating patterns that can decompress to a much larger size.  If the payload is large enough, recipient who is decompressing the data will have to allocate a large amount of memory, which then can lead to a denial of service.\n\nThe original report includes a reference to [1], but there are some very subtle differences between this library and the aforementioned issue. The most important aspect is that the referenced issue focuses on JWT processing, whereas this library is intentionally divided into parts that comprise JOSE, i.e. JWT, JWS, JWE, JWK. In particular, v2 of this library does not attempt to handle JWT payload enveloped in a JWE message automatically (v1 attempted to do this automatically, but it was never stable).\n\nReflecting this subtle difference, the approach taken to mitigate this vulnerability is slightly different from the referenced issue. The referenced issue limits the size of JWT when parsing, but the fixes for this library limits the maximum size of the decompressed data when decrypting JWE messages. Therefore the fix in this library is applicable regardless of the usage context, and a limit is now imposed on the size of the message that our JWE implementation can handle.\n\n### Proof of Concept\n\nModified from the original report to fit the vulnerability better:\n\n```go\n// The value below just needs to be \"large enough\" so that the it puts enough strain on the\n// recipient's environment. The value below is a safe size on my machine to run the test\n// without causing problems. When you increase the payload size, at some point the processing\n// will be slow enough to virtually freeze the program or cause a memory allocation error\nconst payloadSize = 1 << 31\n\nprivkey, err := rsa.GenerateKey(rand.Reader, 2048)\nrequire.NoError(t, err, `rsa.GenerateKey should succeed`)\npubkey := &privkey.PublicKey\npayload := strings.Repeat(\"x\", payloadSize)\n\nencrypted, err := jwe.Encrypt([]byte(payload), jwe.WithKey(jwa.RSA_OAEP, pubkey), jwe.WithContentEncryption(\"A128CBC-HS256\"), jwe.WithCompress(jwa.Deflate))\nrequire.NoError(t, err, `jwe.Encrypt should succeed`)\n_, err = jwe.Decrypt(encrypted, jwe.WithKey(jwa.RSA_OAEP, privkey)) // Will be allocating large amounts of memory\nrequire.Error(t, err, `jwe.Decrypt should fail`)\n```\n\n###  References\n\n[1] [CVE-2024-21319](https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/security/advisories/GHSA-8g9c-28fc-mcx2)\n\n|                |                                              |\n|----------------|----------------------------------------------|\n| Package        | pkg:golang/github.com/lestrrat-go/jwx@1.2.28 |\n| Affected range | <1.2.29                                      |\n| Fixed version  | 1.2.29                                       |\n| CVSS Score     |                                          6.8 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:C/C:N/I:N/A:H |\n"
              },
              "properties": {
                "affected_version": "<1.2.29",
                "cvssV3": 6.8,
                "cvssV3_severity": "MEDIUM",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:C/C:N/I:N/A:H",
                "fixed_version": "1.2.29",
                "purls": [
                  "pkg:golang/github.com/lestrrat-go/jwx@1.2.28"
                ],
                "security-severity": "6.8",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2024-21664",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2024-21664: OWASP Top Ten 2017 Category A9 - Using Components with Known Vulnerabilities"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2024-21664?s=gitlab&n=jwx&ns=github.com%2Flestrrat-go&t=golang&vr=%3E%3D1.0.8",
              "help": {
                "text": "jwx is a Go module implementing various JWx (JWA/JWE/JWK/JWS/JWT, otherwise known as JOSE) technologies. Calling `jws.Parse` with a JSON serialized payload where the `signature` field is present while `protected` is absent can lead to a nil pointer dereference. The vulnerability can be used to crash/DOS a system doing JWS verification. This vulnerability has been patched in version 2.0.19.\n\n",
                "markdown": "> jwx is a Go module implementing various JWx (JWA/JWE/JWK/JWS/JWT, otherwise known as JOSE) technologies. Calling `jws.Parse` with a JSON serialized payload where the `signature` field is present while `protected` is absent can lead to a nil pointer dereference. The vulnerability can be used to crash/DOS a system doing JWS verification. This vulnerability has been patched in version 2.0.19.\n\n\n|                |                                              |\n|----------------|----------------------------------------------|\n| Package        | pkg:golang/github.com/lestrrat-go/jwx@1.2.28 |\n| Affected range | >=1.0.8                                      |\n| Fixed version  | not fixed                                    |\n| CVSS Score     |                                          7.5 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H |\n"
              },
              "properties": {
                "affected_version": ">=1.0.8",
                "cvssV3": 7.5,
                "cvssV3_severity": "HIGH",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                "fixed_version": "not fixed",
                "purls": [
                  "pkg:golang/github.com/lestrrat-go/jwx@1.2.28"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            }
          ],
          "version": "1.9.3"
        }
      },
      "results": [
        {
          "ruleId": "CVE-2024-24788",
          "ruleIndex": 0,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability   : CVE-2024-24788            \n  Severity        : UNSPECIFIED               \n  Package         : pkg:golang/stdlib@1.22.2  \n  Affected range  : >=1.22.0-0,<1.22.3        \n  Fixed version   : 1.22.3                    \n  EPSS Score      : 0.000440                  \n  EPSS Percentile : 0.102860                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/local/bin/operator"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24789",
          "ruleIndex": 1,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability   : CVE-2024-24789            \n  Severity        : UNSPECIFIED               \n  Package         : pkg:golang/stdlib@1.22.2  \n  Affected range  : >=1.22.0-0,<1.22.4        \n  Fixed version   : 1.22.4                    \n  EPSS Score      : 0.000450                  \n  EPSS Percentile : 0.154970                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/local/bin/operator"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24790",
          "ruleIndex": 2,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability   : CVE-2024-24790            \n  Severity        : UNSPECIFIED               \n  Package         : pkg:golang/stdlib@1.22.2  \n  Affected range  : >=1.22.0-0,<1.22.4        \n  Fixed version   : 1.22.4                    \n  EPSS Score      : 0.000450                  \n  EPSS Percentile : 0.154970                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/local/bin/operator"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-25210",
          "ruleIndex": 3,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2019-25210                     \n  Severity        : MEDIUM                             \n  Package         : pkg:golang/helm.sh/helm/v3@3.14.2  \n  Affected range  : >=3.0.0,<=3.14.2                   \n  Fixed version   : not fixed                          \n  EPSS Score      : 0.000450                           \n  EPSS Percentile : 0.154970                           \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/local/bin/operator"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-8552",
          "ruleIndex": 4,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2020-8552                                 \n  Severity        : MEDIUM                                        \n  Package         : pkg:golang/k8s.io/apiserver@0.29.0            \n  Affected range  : <1.15.10                                      \n  Fixed version   : 1.15.10, 1.16.7, 1.17.3                       \n  CVSS Score      : 4.3                                           \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:L  \n  EPSS Score      : 0.001660                                      \n  EPSS Percentile : 0.533740                                      \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/local/bin/operator"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-28180",
          "ruleIndex": 5,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2024-28180                                  \n  Severity        : MEDIUM                                          \n  Package         : pkg:golang/github.com/go-jose/go-jose@3.0.1#v3  \n  Affected range  : <3.0.3                                          \n  Fixed version   : 3.0.3                                           \n  CVSS Score      : 4.3                                             \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:L    \n  EPSS Score      : 0.000460                                        \n  EPSS Percentile : 0.170690                                        \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/local/bin/operator"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-28122",
          "ruleIndex": 6,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2024-28122                                \n  Severity        : MEDIUM                                        \n  Package         : pkg:golang/github.com/lestrrat-go/jwx@1.2.28  \n  Affected range  : <1.2.29                                       \n  Fixed version   : 1.2.29                                        \n  CVSS Score      : 6.8                                           \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:C/C:N/I:N/A:H  \n  EPSS Score      : 0.000450                                      \n  EPSS Percentile : 0.154970                                      \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/local/bin/operator"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-21664",
          "ruleIndex": 7,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2024-21664                                \n  Severity        : HIGH                                          \n  Package         : pkg:golang/github.com/lestrrat-go/jwx@1.2.28  \n  Affected range  : >=1.0.8                                       \n  Fixed version   : not fixed                                     \n  CVSS Score      : 7.5                                           \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H  \n  EPSS Score      : 0.000560                                      \n  EPSS Percentile : 0.230830                                      \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/local/bin/operator"
                }
              }
            }
          ]
        }
      ]
    }
  ]
}
