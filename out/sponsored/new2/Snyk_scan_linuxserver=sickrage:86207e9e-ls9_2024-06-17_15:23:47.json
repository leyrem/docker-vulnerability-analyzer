{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Snyk Container",
          "properties": {
            "artifactsScanned": 68
          },
          "rules": []
        }
      },
      "results": []
    },
    {
      "tool": {
        "driver": {
          "name": "Snyk Container",
          "properties": {
            "artifactsScanned": 0
          },
          "rules": []
        }
      },
      "results": []
    },
    {
      "tool": {
        "driver": {
          "name": "Snyk Container",
          "properties": {
            "artifactsScanned": 13
          },
          "rules": [
            {
              "id": "SNYK-PYTHON-CERTIFI-3164749",
              "shortDescription": {
                "text": "Medium severity - Insufficient Verification of Data Authenticity vulnerability in certifi"
              },
              "fullDescription": {
                "text": "(CVE-2022-23491) certifi@2019.3.9"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Insufficient Verification of Data Authenticity resulting in Certifi root certificate removal from TrustCor. The root certificates are being removed pursuant to an investigation prompted by media reporting that TrustCor's ownership also operated a business that produced spyware.\n## Remediation\nUpgrade `certifi` to version 2022.12.7 or higher.\n## References\n- [GitHub Commit](https://github.com/certifi/python-certifi/commit/9e9e840925d7b8e76c76fdac1fab7e6e88c1c3b8)\n- [Google Groups Forum](https://groups.google.com/a/mozilla.org/g/dev-security-policy/c/oxX69KFvsm4/m/yLohoVqtCgAJ)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-345",
                  "pip"
                ],
                "cvssv3_baseScore": 6.8,
                "security-severity": "6.8"
              }
            },
            {
              "id": "SNYK-PYTHON-CERTIFI-5805047",
              "shortDescription": {
                "text": "Critical severity - Improper Following of a Certificate's Chain of Trust vulnerability in certifi"
              },
              "fullDescription": {
                "text": "(CVE-2023-37920) certifi@2019.3.9"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Improper Following of a Certificate's Chain of Trust. E-Tugra's root certificates are being removed pursuant to an investigation prompted by reporting of security issues in their systems. Conclusions of Mozilla's investigation can be found [here](https://groups.google.com/a/mozilla.org/g/dev-security-policy/c/C-HrP1SEq1A).\r\n\r\n**Note:**\r\n\r\nThis issue is not an inherent vulnerability in the package, but a security measure against potential harmful effects of trusting the now-revoked root certificates.\n## Remediation\nUpgrade `certifi` to version 2023.7.22 or higher.\n## References\n- [GitHub Commit](https://github.com/certifi/python-certifi/commit/8fb96ed81f71e7097ed11bc4d9b19afd7ea5c909)\n- [Google Groups Forum](https://groups.google.com/a/mozilla.org/g/dev-security-policy/c/C-HrP1SEq1A)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-296",
                  "pip"
                ],
                "cvssv3_baseScore": 9.8,
                "security-severity": "9.8"
              }
            },
            {
              "id": "SNYK-PYTHON-CRYPTOGRAPHY-1022152",
              "shortDescription": {
                "text": "Medium severity - Timing Attack vulnerability in cryptography"
              },
              "fullDescription": {
                "text": "(CVE-2020-25659) cryptography@2.6.1"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Timing Attack. It is vulnerable to Bleichenbacher timing attacks in the RSA decryption API, via timed processing of valid PKCS#1 v1.5 ciphertext (Marvin).\r\n\r\n**Notes:**\r\n\r\n1) Version 3.2 of this package contains an incomplete fix, which might help reduce the chances of this vulnerability being exploited. We recommend updating to version 42.0.0 for the complete fix, as advised in the advisory for [CVE-2023-50782](https://security.snyk.io/vuln/SNYK-PYTHON-CRYPTOGRAPHY-6126975).\r\n\r\n2) This vulnerability presents a moderate severity concern due to its specific impact on applications utilizing RSA decryption with PKCS#1 v1.5 padding. While the vulnerability could potentially lead to leakage in RSA decryption operations, its severity is downgraded to medium by several factors. Firstly, the exploitability of the vulnerability is limited to scenarios where RSA decryption with PKCS#1 v1.5 padding is employed, narrowing the scope of affected systems. Additionally, the implementation of implicit rejection, such as the Marvin workaround, provides a viable mitigation strategy.\n## Remediation\nUpgrade `cryptography` to version 3.2 or higher.\n## References\n- [GitHub Commit](https://github.com/pyca/cryptography/commit/58494b41d6ecb0f56b7c5f05d5f5e3ca0320d494)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=1889988)\n- [Vulnerability Report](https://people.redhat.com/~hkario/marvin/)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-208",
                  "pip"
                ],
                "cvssv3_baseScore": 5.9,
                "security-severity": "5.9"
              }
            },
            {
              "id": "SNYK-PYTHON-CRYPTOGRAPHY-3172287",
              "shortDescription": {
                "text": "Medium severity - Denial of Service (DoS) vulnerability in cryptography"
              },
              "fullDescription": {
                "text": "(CVE-2022-3996) cryptography@2.6.1"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). If an X.509 certificate contains a malformed policy constraint and policy processing is enabled, then a write lock will be taken twice recursively. On some operating systems (most widely: Windows), this results in a denial of service when the affected process hangs. \r\n\r\n**NOTE:**\r\nPolicy processing being enabled on a publicly-facing server is not considered to be a common setup.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `cryptography` to version 39.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/openssl/openssl/commit/4d0340a6d2f327700a059f0b8f954d6160f8eef5)\n- [GitHub Commit](https://github.com/pyca/infra/commit/c20c22a40c52003d679f16cbad1854b864b8dde7)\n- [GitHub Issue](https://github.com/openssl/openssl/issues/19643)\n- [GitHub Issue (Python)](https://github.com/pyca/cryptography/issues/7940)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=2153239)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-609",
                  "pip"
                ],
                "cvssv3_baseScore": 5.9,
                "security-severity": "5.9"
              }
            },
            {
              "id": "SNYK-PYTHON-CRYPTOGRAPHY-3314966",
              "shortDescription": {
                "text": "Medium severity - Expected Behavior Violation vulnerability in cryptography"
              },
              "fullDescription": {
                "text": "(CVE-2023-23931) cryptography@2.6.1"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Expected Behavior Violation in `Cipher.update_into`, which allows immutable objects (such as `bytes`) to be mutated, violating fundamental rules of Python. This allows programmers to misuse an API, and cannot be exploited by attacker-controlled data alone.\n## Remediation\nUpgrade `cryptography` to version 39.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/pyca/cryptography/pull/8230/commits/94a50a9731f35405f0357fa5f3b177d46a726ab3)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-440",
                  "pip"
                ],
                "cvssv3_baseScore": 4.8,
                "security-severity": "4.8"
              }
            },
            {
              "id": "SNYK-PYTHON-CRYPTOGRAPHY-3315324",
              "shortDescription": {
                "text": "Medium severity - Use After Free vulnerability in cryptography"
              },
              "fullDescription": {
                "text": "(CVE-2023-0215) cryptography@2.6.1"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Use After Free in the `BIO_new_NDEF()` function. A new filter BIO can be freed, with the function returning a NULL result indicating a failure. But the BIO passed by the caller still holds pointers to the previously freed filter BIO. This could allow an attacker to cause a crash.\n## Remediation\nUpgrade `cryptography` to version 39.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/openssl/openssl/commit/8818064ce3c3c0f1b740a5aaba2a987e75bfbafd)\n- [GitHub PR](https://github.com/pyca/cryptography/issues/8229)\n- [Node.js Advisory](https://nodejs.org/en/blog/vulnerability/february-2023-security-releases/#openssl-security-updates)\n- [Vulnerability Advisory](https://www.openssl.org/news/secadv/20230207.txt)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-416",
                  "pip"
                ],
                "cvssv3_baseScore": 5.9,
                "security-severity": "5.9"
              }
            },
            {
              "id": "SNYK-PYTHON-CRYPTOGRAPHY-3315328",
              "shortDescription": {
                "text": "High severity - Access of Resource Using Incompatible Type ('Type Confusion') vulnerability in cryptography"
              },
              "fullDescription": {
                "text": "(CVE-2023-0286) cryptography@2.6.1"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Access of Resource Using Incompatible Type ('Type Confusion') in `x509/v3_genn.c`, when processing X.400 addresses with CRL checking enabled (e.g. when `X509_V_FLAG_CRL_CHECK` is set). An attacker in possession of both the certificate chain and CRL, of which neither needs a valid signature, can expose memory or cause a denial of service. If the attacker only controls one of these inputs, the other input must already contain an X.400 address as a CRL distribution point, which is uncommon.\n## Remediation\nUpgrade `cryptography` to version 39.0.1 or higher.\n## References\n- [Changelog (cryptography)](https://cryptography.io/en/latest/changelog/#v39-0-1)\n- [GitHub Commit](https://github.com/openssl/openssl/commit/2f7530077e0ef79d98718138716bc51ca0cad658)\n- [GitHub Issue](https://github.com/pyca/cryptography/issues/8229)\n- [Node.js Advisory](https://nodejs.org/en/blog/vulnerability/february-2023-security-releases/#openssl-security-updates)\n- [Vulnerability Advisory](https://www.openssl.org/news/secadv/20230207.txt)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-843",
                  "pip"
                ],
                "cvssv3_baseScore": 7.4,
                "security-severity": "7.4"
              }
            },
            {
              "id": "SNYK-PYTHON-CRYPTOGRAPHY-3315331",
              "shortDescription": {
                "text": "Medium severity - Timing Attack vulnerability in cryptography"
              },
              "fullDescription": {
                "text": "(CVE-2022-4304) cryptography@2.6.1"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Timing Attack in `rsa/rsa_ossl.c`. An attacker can recover ciphertext with a Bleichenbacher style attack by sending a large number of trial messages (Marvin). This affects all RSA padding modes: `PKCS#1 v1.5`, `RSA-OEAP`, and `RSASVE`.\n## Remediation\nUpgrade `cryptography` to version 39.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/openssl/openssl/commit/8e257b86e5812c6e1cfa9e8e5f5660ac7bed899d)\n- [GitHub Issue](https://github.com/pyca/cryptography/issues/8229)\n- [Node.js Advisory](https://nodejs.org/en/blog/vulnerability/february-2023-security-releases/#openssl-security-updates)\n- [Vulnerability Advisory](https://www.openssl.org/news/secadv/20230207.txt)\n- [Vulnerability Report](https://people.redhat.com/~hkario/marvin/)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-208",
                  "pip"
                ],
                "cvssv3_baseScore": 5.3,
                "security-severity": "5.3"
              }
            },
            {
              "id": "SNYK-PYTHON-CRYPTOGRAPHY-3315452",
              "shortDescription": {
                "text": "Medium severity - Denial of Service (DoS) vulnerability in cryptography"
              },
              "fullDescription": {
                "text": "(CVE-2022-4203) cryptography@2.6.1"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) due to a read buffer overflow in certificate name constraint checking in `x509/v3_ncons.c`. This occurs after certificate chain signature verification, and requires either a CA to have signed the malicious certificate or for the application to continue certificate verification despite failure to construct a path to a trusted issuer.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `cryptography` to version 39.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/openssl/openssl/commit/c927a3492698c254637da836762f9b1f86cffabc)\n- [GitHub Issue](https://github.com/pyca/cryptography/issues/8229)\n- [Node.js Advisory](https://nodejs.org/en/blog/vulnerability/february-2023-security-releases/#openssl-security-updates)\n- [Vulnerability Advisory](https://www.openssl.org/news/secadv/20230207.txt)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "pip"
                ],
                "cvssv3_baseScore": 5.9,
                "security-severity": "5.9"
              }
            },
            {
              "id": "SNYK-PYTHON-CRYPTOGRAPHY-3315972",
              "shortDescription": {
                "text": "Medium severity - Denial of Service (DoS) vulnerability in cryptography"
              },
              "fullDescription": {
                "text": "(CVE-2022-4450) cryptography@2.6.1"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) due to a double free after calling the `PEM_read_bio_ex()` function. An attacker who supplies a malicious PEM file with a 0-length payload can trigger a crash.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `cryptography` to version 39.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/openssl/openssl/commit/63bcf189be73a9cc1264059bed6f57974be74a83)\n- [GitHub Issue](https://github.com/pyca/cryptography/issues/8229)\n- [Node.js Advisory](https://nodejs.org/en/blog/vulnerability/february-2023-security-releases/#openssl-security-updates)\n- [Vulnerability Advisory](https://www.openssl.org/news/secadv/20230207.txt)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-415",
                  "pip"
                ],
                "cvssv3_baseScore": 5.9,
                "security-severity": "5.9"
              }
            },
            {
              "id": "SNYK-PYTHON-CRYPTOGRAPHY-3315975",
              "shortDescription": {
                "text": "Medium severity - Denial of Service (DoS) vulnerability in cryptography"
              },
              "fullDescription": {
                "text": "(CVE-2023-0216) cryptography@2.6.1"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) due to an invalid pointer dereference in the `d2i_PKCS7()`, `d2i_PKCS7_bio()` and `d2i_PKCS7_fp()`. An attacker could trigger a crash by supplying malicious PKCS7 data.\r\n\r\n**NOTE:** The TLS implementation in OpenSSL does not call these functions.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `cryptography` to version 39.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/openssl/openssl/commit/934a04f0e775309cadbef0aa6b9692e1b12a76c6)\n- [GitHub Issue](https://github.com/pyca/cryptography/issues/8229)\n- [Node.js Advisory](https://nodejs.org/en/blog/vulnerability/february-2023-security-releases/#openssl-security-updates)\n- [Vulnerability Advisory](https://www.openssl.org/news/secadv/20230207.txt)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "pip"
                ],
                "cvssv3_baseScore": 5.9,
                "security-severity": "5.9"
              }
            },
            {
              "id": "SNYK-PYTHON-CRYPTOGRAPHY-3316038",
              "shortDescription": {
                "text": "Medium severity - Denial of Service (DoS) vulnerability in cryptography"
              },
              "fullDescription": {
                "text": "(CVE-2023-0217) cryptography@2.6.1"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) due to a null dereference when validating DSA public keys in the `EVP_PKEY_public_check()` function.\r\n\r\n**NOTE:** The TLS implementation in OpenSSL does not call this function.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `cryptography` to version 39.0.1 or higher.\n## References\n- [GitHub Commit](https://github.com/openssl/openssl/commit/23985bac83fd50c8e29431009302b5442f985096)\n- [GitHub Issue](https://github.com/pyca/cryptography/issues/8229)\n- [Node.js Advisory](https://nodejs.org/en/blog/vulnerability/february-2023-security-releases/#openssl-security-updates)\n- [Vulnerability Advisory](https://www.openssl.org/news/secadv/20230207.txt)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "pip"
                ],
                "cvssv3_baseScore": 5.9,
                "security-severity": "5.9"
              }
            },
            {
              "id": "SNYK-PYTHON-CRYPTOGRAPHY-3316211",
              "shortDescription": {
                "text": "High severity - Denial of Service (DoS) vulnerability in cryptography"
              },
              "fullDescription": {
                "text": "(CVE-2023-0401) cryptography@2.6.1"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) due to a null pointer dereference in when signatures are being verified on PKCS7 signed or signedAndEnveloped data in `pkcs7/pk7_doit.c`. If the hash algorithm used for the signature is known to the OpenSSL library but the implementation of the hash algorithm is not available, the digest initialization will fail. \r\n\r\n**NOTE:** The TLS implementation in OpenSSL does not call these functions.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `cryptography` to version 39.0.1 or higher.\n## References\n- [Changelog (cryptography)](https://cryptography.io/en/latest/changelog/#v39-0-1)\n- [GitHub Commit](https://github.com/openssl/openssl/commit/d3b6dfd70db844c4499bec6ad6601623a565e674)\n- [GitHub Issue](https://github.com/pyca/cryptography/issues/8229)\n- [Node.js Advisory](https://nodejs.org/en/blog/vulnerability/february-2023-security-releases/#openssl-security-updates)\n- [Vulnerability Advisory](https://www.openssl.org/news/secadv/20230207.txt)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "pip"
                ],
                "cvssv3_baseScore": 7.5,
                "security-severity": "7.5"
              }
            },
            {
              "id": "SNYK-PYTHON-CRYPTOGRAPHY-5663682",
              "shortDescription": {
                "text": "Medium severity - Denial of Service (DoS) vulnerability in cryptography"
              },
              "fullDescription": {
                "text": "(CVE-2023-2650) cryptography@2.6.1"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) when processing specially crafted ASN.1 objects identifiers.\r\nApplications that use `OBJ_obj2txt()` directly, or use any of the OpenSSL subsystems OCSP, `PKCS7/SMIME`, `CMS`, `CMP/CRMF` or `TS` with no message size limit may experience notable to very long delays when processing those messages, which may lead to a exploitation of this vulnerability.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `cryptography` to version 41.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/openssl/openssl/commit/db779b0e10b047f2585615e0b8f2acdf21f8544a)\n- [GitHub Commit](https://github.com/pyca/cryptography/commit/8708245ccdeaff21d65eea68a4f8d2a7c5949a22)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=2207947)\n- [Security Advisory](https://www.openssl.org/news/secadv/20230530.txt)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "pip"
                ],
                "cvssv3_baseScore": 5.9,
                "security-severity": "5.9"
              }
            },
            {
              "id": "SNYK-PYTHON-CRYPTOGRAPHY-5777683",
              "shortDescription": {
                "text": "High severity - Improper Certificate Validation vulnerability in cryptography"
              },
              "fullDescription": {
                "text": "(CVE-2023-38325) cryptography@2.6.1"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Improper Certificate Validation in the SSH certificate decoding process. An attacker can cause the application to accept unauthorized SSH certificates generated by `ssh-keygen`, or cause certificates generated by `SSHCertificateBuilder ` to fail when read by `ssh-keygen`. \r\n\r\n**Note:**\r\nThis is only exploitable if the attacker controls the SSH certificate generation process or can introduce crafted SSH certificates into the system.\n## Remediation\nUpgrade `cryptography` to version 41.0.2 or higher.\n## References\n- [GitHub Commit](https://github.com/pyca/cryptography/commit/e190ef190525999d1f599cf8c3aef5cb7f3a8bc4)\n- [GitHub Diff](https://github.com/pyca/cryptography/compare/41.0.1...41.0.2)\n- [GitHub Issue](https://github.com/pyca/cryptography/issues/9207)\n- [GitHub PR](https://github.com/pyca/cryptography/pull/9208)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-295",
                  "pip"
                ],
                "cvssv3_baseScore": 7.4,
                "security-severity": "7.4"
              }
            },
            {
              "id": "SNYK-PYTHON-CRYPTOGRAPHY-5813745",
              "shortDescription": {
                "text": "Low severity - Insufficient Verification of Data Authenticity vulnerability in cryptography"
              },
              "fullDescription": {
                "text": "(CVE-2023-2975) cryptography@2.6.1"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Insufficient Verification of Data Authenticity in the AES-SIV cipher implementation in `ciphers/cipher_aes_siv.c`, which ignores empty associated data entries, making them unauthenticated. \r\n\r\nApplications that use the AES-SIV algorithm and want to authenticate empty data entries as associated data can be misled by removing, adding or reordering such empty entries as these are ignored by the OpenSSL implementation. \r\n\r\n**NOTE:**  This issue does not affect non-empty associated data authentication and the maintainers are currently unaware of any applications that use empty associated data entries.\n## Remediation\nUpgrade `cryptography` to version 41.0.3 or higher.\n## References\n- [GitHub Commit](https://github.com/openssl/openssl/commit/00e2f5eea29994d19293ec4e8c8775ba73678598)\n- [GitHub Commit](https://github.com/openssl/openssl/commit/6a83f0c958811f07e0d11dfc6b5a6a98edfd5bdc)\n- [GitHub Commit](https://github.com/pyca/cryptography/commit/b22271cf3c3dd8dc8978f8f4b00b5c7060b6538d)\n- [GitHub Commit](https://github.com/pyca/cryptography/commit/bfa4d95f0f356f2d535efd5c775e0fb3efe90ef2)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=2223016)\n- [Vulnerability Advisory](https://www.openssl.org/news/secadv/20230714.txt)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-345",
                  "pip"
                ],
                "cvssv3_baseScore": 3.7,
                "security-severity": "3.7"
              }
            },
            {
              "id": "SNYK-PYTHON-CRYPTOGRAPHY-5813746",
              "shortDescription": {
                "text": "Medium severity - Denial of Service (DoS) vulnerability in cryptography"
              },
              "fullDescription": {
                "text": "(CVE-2023-3446) cryptography@2.6.1"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) in the `DH_check()`, `DH_check_ex()` and `EVP_PKEY_param_check()` functions, which are used to check a DH key or DH parameters.\r\n\r\nWhen the key or parameters that are being checked contain an excessively large modulus value (the `p` parameter) this may cause slowness in processing. Some checks use the supplied modulus value even if it has already been found to be too large. \r\n\r\nThe OpenSSL `dhparam` and `pkeyparam` command line applications are also vulnerable, when using the `-check` option. \r\n\r\n**NOTE:** The OpenSSL SSL/TLS implementation is not affected by this issue.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `cryptography` to version 41.0.3 or higher.\n## References\n- [GitHub Commit](https://github.com/openssl/openssl/commit/1fa20cf2f506113c761777127a38bce5068740eb)\n- [GitHub Commit](https://github.com/openssl/openssl/commit/8780a896543a654e757db1b9396383f9d8095528)\n- [GitHub Commit](https://github.com/openssl/openssl/commit/fc9867c1e03c22ebf56943be205202e576aabf23)\n- [GitHub Commit](https://github.com/pyca/cryptography/commit/b22271cf3c3dd8dc8978f8f4b00b5c7060b6538d)\n- [GitHub Commit](https://github.com/pyca/cryptography/commit/bfa4d95f0f356f2d535efd5c775e0fb3efe90ef2)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=2224962)\n- [Vulnerability Advisory](https://www.openssl.org/news/secadv/20230719.txt)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "pip"
                ],
                "cvssv3_baseScore": 5.3,
                "security-severity": "5.3"
              }
            },
            {
              "id": "SNYK-PYTHON-CRYPTOGRAPHY-5813750",
              "shortDescription": {
                "text": "Low severity - Denial of Service (DoS) vulnerability in cryptography"
              },
              "fullDescription": {
                "text": "(CVE-2023-3817) cryptography@2.6.1"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) when the `DH_check()`, `DH_check_ex()`, or `EVP_PKEY_param_check()` functions are used to check a DH key or DH parameters. An attacker can cause long delays and potentially a Denial of Service (DoS) by providing excessively long DH keys or parameters from an untrusted source. This is only exploitable if the application calls these functions and supplies a key or parameters obtained from an untrusted source.\r\n\r\n**Note:**\r\nThe OpenSSL SSL/TLS implementation and the OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `cryptography` to version 41.0.3 or higher.\n## References\n- [GitHub Commit](https://github.com/openssl/openssl/commit/1c16253f3c3a8d1e25918c3f404aae6a5b0893de)\n- [GitHub Commit](https://github.com/openssl/openssl/commit/91ddeba0f2269b017dc06c46c993a788974b1aa5)\n- [GitHub Commit](https://github.com/pyca/cryptography/commit/b22271cf3c3dd8dc8978f8f4b00b5c7060b6538d)\n- [Security Advisory](https://www.openssl.org/news/secadv/20230731.txt)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "pip"
                ],
                "cvssv3_baseScore": 3.7,
                "security-severity": "3.7"
              }
            },
            {
              "id": "SNYK-PYTHON-CRYPTOGRAPHY-5914629",
              "shortDescription": {
                "text": "Medium severity - Denial of Service (DoS) vulnerability in cryptography"
              },
              "fullDescription": {
                "text": "(CVE-2023-4807) cryptography@2.6.1"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). The POLY1305 MAC (message authentication code) implementation might corrupt the internal state of applications on the Windows 64 platform when running on newer X86_64 processors supporting AVX512-IFMA instructions. If an attacker can influence whether the POLY1305 MAC algorithm is used in an application, the application state might be corrupted with various application dependent consequences, the most likely of which being denial of service. The maintainers are currently not aware of any concrete application that would be affected by this issue.\r\n\r\n\r\n**NOTES:**\r\n\r\nThis vulnerability is only exploitable on Windows.\r\n\r\nThe FIPS provider is not affected by this issue.\r\n\r\n## Workaround \r\n\r\nDisable `AVX512-IFMA` instructions by setting the environment variable `OPENSSL_ia32cap: OPENSSL_ia32cap=:~0x200000`\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `cryptography` to version 41.0.4 or higher.\n## References\n- [Github Commit](https://github.com/pyca/cryptography/commit/fc11bce6930e591ce26a2317b31b9ce2b3e25512)\n- [GitHub Commit](https://github.com/openssl/openssl/commit/4bfac4471f53c4f74c8d81020beb938f92d84ca5)\n- [GitHub Commit](https://github.com/openssl/openssl/commit/6754de4a121ec7f261b16723180df6592cbb4508)\n- [GitHub Commit](https://github.com/openssl/openssl/commit/a632d534c73eeb3e3db8c7540d811194ef7c79ff)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=2238009)\n- [Vulnerability Advisory](https://www.openssl.org/news/secadv/20230908.txt)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "pip"
                ],
                "cvssv3_baseScore": 6.5,
                "security-severity": "6.5"
              }
            },
            {
              "id": "SNYK-PYTHON-CRYPTOGRAPHY-6036192",
              "shortDescription": {
                "text": "Medium severity - Missing Cryptographic Step vulnerability in cryptography"
              },
              "fullDescription": {
                "text": "(CVE-2023-5363) cryptography@2.6.1"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Missing Cryptographic Step when the `EVP_EncryptInit_ex2()`, `EVP_DecryptInit_ex2()` or `EVP_CipherInit_ex2()` functions are used. An attacker can cause truncation or overreading of key and initialization vector (IV) lengths by altering the \"keylen\" or \"ivlen\" parameters within the `OSSL_PARAM` array after the key and IV have been established. This can lead to potential truncation or overruns during the initialization of some symmetric ciphers, such as RC2, RC4, RC5, CCM, GCM, and OCB. A truncation in the IV can result in non-uniqueness, which could result in loss of confidentiality for some cipher modes. \r\n\r\nBoth truncations and overruns of the key and the IV will produce incorrect results and could, in some cases, trigger a memory exception.\n## Remediation\nUpgrade `cryptography` to version 41.0.5 or higher.\n## References\n- [GitHub Commit](https://github.com/openssl/openssl/commit/0df40630850fb2740e6be6890bb905d3fc623b2d)\n- [GitHub Commit](https://github.com/openssl/openssl/commit/5f69f5c65e483928c4b28ed16af6e5742929f1ee)\n- [Security Advisory](https://www.openssl.org/news/secadv/20231024.txt)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-325",
                  "pip"
                ],
                "cvssv3_baseScore": 5.3,
                "security-severity": "5.3"
              }
            },
            {
              "id": "SNYK-PYTHON-CRYPTOGRAPHY-6050294",
              "shortDescription": {
                "text": "Medium severity - Denial of Service (DoS) vulnerability in cryptography"
              },
              "fullDescription": {
                "text": "(CVE-2023-5678) cryptography@2.6.1"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) when the `DH_generate_key()`, `DH_check_pub_key()`, `DH_check_pub_key_ex()`, `EVP_PKEY_public_check()`, and `EVP_PKEY_generate()` functions are used. An attacker can cause long delays and potentially a Denial of Service by supplying excessively long X9.42 DH keys or parameters obtained from an untrusted source. \r\n\r\n**Note:**\r\n\r\nThis is only exploitable if the application uses these functions to generate or check an X9.42 DH key or parameters. Also, the OpenSSL `pkey` command line application, when using the `-pubcheck` option, as well as the OpenSSL `genpkey` command line application, are vulnerable to this issue.\n## Remediation\nUpgrade `cryptography` to version 42.0.0 or higher.\n## References\n- [GitHub Commit](https://github.com/openssl/openssl/commit/db925ae2e65d0d925adef429afc37f75bd1c2017)\n- [GitHub Commit](https://github.com/openssl/openssl/commit/ddeb4b6c6d527e54ce9a99cba785c0f7776e54b6)\n- [GitHub Commit](https://github.com/openssl/openssl/commit/ec061bf8ff2add8050599058557178c03295bcc0)\n- [GitHub Commit](https://github.com/pyca/cryptography/commit/01d55b2af8ae167315288c03b192c59c86425009)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=2248616)\n- [Security Advisory](https://www.openssl.org/news/secadv/20231106.txt)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "pip"
                ],
                "cvssv3_baseScore": 5.3,
                "security-severity": "5.3"
              }
            },
            {
              "id": "SNYK-PYTHON-CRYPTOGRAPHY-6126975",
              "shortDescription": {
                "text": "High severity - Observable Timing Discrepancy vulnerability in cryptography"
              },
              "fullDescription": {
                "text": "(CVE-2023-50782) cryptography@2.6.1"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Observable Timing Discrepancy. This issue may allow a remote attacker to decrypt captured messages in TLS servers that use RSA key exchanges, which may lead to exposure of confidential or sensitive data (Marvin).\r\n\r\n**Note:**\r\n\r\n\r\nThis vulnerability exists due to an incomplete fix for [CVE-2020-25659](https://security.snyk.io/vuln/SNYK-PYTHON-CRYPTOGRAPHY-1022152).\n## Remediation\nUpgrade `cryptography` to version 42.0.0 or higher.\n## References\n- [GitHub Issue](https://github.com/pyca/cryptography/issues/9785#issuecomment-1856209406)\n- [Vulnerability Report](https://people.redhat.com/~hkario/marvin/)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-203",
                  "pip"
                ],
                "cvssv3_baseScore": 7.5,
                "security-severity": "7.5"
              }
            },
            {
              "id": "SNYK-PYTHON-CRYPTOGRAPHY-6210214",
              "shortDescription": {
                "text": "Medium severity - NULL Pointer Dereference vulnerability in cryptography"
              },
              "fullDescription": {
                "text": "(CVE-2024-0727) cryptography@2.6.1"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to NULL Pointer Dereference when processing a maliciously formatted PKCS12 file. The vulnerability exists due to improper handling of optional `ContentInfo` fields, which can be set to null. An attacker can cause a denial of service by sending crafted input that leads to applications loading files in PKCS12 format from untrusted sources to terminate abruptly.\n## Remediation\nUpgrade `cryptography` to version 42.0.2 or higher.\n## References\n- [GitHub Commit](https://github.com/alexcrichton/openssl-src-rs/commit/add20f73b6b42be7451af2e1044d4e0e778992b2)\n- [GitHub Commit](https://github.com/openssl/openssl/commit/09df4395b5071217b76dc7d3d2e630eb8c5a79c2)\n- [GitHub Commit](https://github.com/openssl/openssl/commit/775acfdbd0c6af9ac855f34969cdab0c0c90844a)\n- [GitHub Commit](https://github.com/openssl/openssl/commit/d135eeab8a5dbf72b3da5240bab9ddb7678dbd2c)\n- [GitHub Commit](https://github.com/pyca/cryptography/commit/3519591d255d4506fbcd0d04037d45271903c64d)\n- [GitHub PR](https://github.com/openssl/openssl/pull/23362)\n- [OpenSSL Advisory](https://www.openssl.org/news/secadv/20240125.txt)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-476",
                  "pip"
                ],
                "cvssv3_baseScore": 5.5,
                "security-severity": "5.5"
              }
            },
            {
              "id": "SNYK-PYTHON-CRYPTOGRAPHY-6913422",
              "shortDescription": {
                "text": "Low severity - Uncontrolled Resource Consumption vulnerability in cryptography"
              },
              "fullDescription": {
                "text": "(CVE-2024-4603) cryptography@2.6.1"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Uncontrolled Resource Consumption due to improper user input validation in the `EVP_PKEY_param_check` or `EVP_PKEY_public_check` functions. An attacker can cause a denial of service by supplying excessively long DSA keys or parameters obtained from an untrusted source.\r\n\r\n**Note:**\r\n\r\nOpenSSL does not call these functions on untrusted DSA keys, so only applications that directly call these functions may be vulnerable.\r\n\r\nAlso vulnerable are the OpenSSL `pkey` and `pkeyparam` command line applications when using the \"-check\" option.\n## Remediation\nUpgrade `cryptography` to version 42.0.8 or higher.\n## References\n- [GitHub Commit](https://github.com/openssl/openssl/commit/85ccbab216da245cf9a6503dd327072f21950d9b)\n- [GitHub Commit 3.0](https://github.com/openssl/openssl/commit/3559e868e58005d15c6013a0c1fd832e51c73397)\n- [GitHub Commit 3.1](https://github.com/openssl/openssl/commit/9c39b3858091c152f52513c066ff2c5a47969f0d)\n- [GitHub Commit 3.2](https://github.com/openssl/openssl/commit/da343d0605c826ef197aceedc67e8e04f065f740)\n- [GitHub Commit 3.3](https://github.com/openssl/openssl/commit/53ea06486d296b890d565fb971b2764fcd826e7e)\n- [GitHub Commit cryptography](https://github.com/pyca/cryptography/commit/38852224f455af1915a628542b930ad11d2a884c)\n- [GitHub PR](https://github.com/openssl/openssl/pull/24346)\n- [OpenSSL advisory](https://www.openssl.org/news/secadv/20240516.txt)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "pip"
                ],
                "cvssv3_baseScore": 3.7,
                "security-severity": "3.7"
              }
            },
            {
              "id": "SNYK-PYTHON-IDNA-6597975",
              "shortDescription": {
                "text": "Medium severity - Resource Exhaustion vulnerability in idna"
              },
              "fullDescription": {
                "text": "(CVE-2024-3651) idna@2.8.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Resource Exhaustion via the `idna.encode` function. An attacker can consume significant resources and potentially cause a denial-of-service by supplying specially crafted arguments to this function. \r\n\r\n**Note:**\r\nThis is triggered by arbitrarily large inputs that would not occur in normal usage but may be passed to the library assuming there is no preliminary input validation by the higher-level application.\n## Remediation\nUpgrade `idna` to version 3.7 or higher.\n## References\n- [GitHub Commit](https://github.com/kjd/idna/commit/5beb28b9dd77912c0dd656d8b0fdba3eb80222e7)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "pip"
                ],
                "cvssv3_baseScore": 6.2,
                "security-severity": "6.2"
              }
            },
            {
              "id": "SNYK-PYTHON-IPADDRESS-1041793",
              "shortDescription": {
                "text": "Medium severity - Hash Collision vulnerability in ipaddress"
              },
              "fullDescription": {
                "text": "ipaddress@1.0.22"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[ipaddress](https://www.pypi.org/project/ipaddress) is an IPv4/IPv6 manipulation library\n\nAffected versions of this package are vulnerable to Hash Collision. The package improperly computes hash values in the `IPv4Interface` and` IPv6Interface` classes, which might allow a remote attacker to cause a denial of service if an application is affected by the performance of a dictionary containing `IPv4Interface` or `IPv6Interface` objects, and this attacker can cause many dictionary entries to be created.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nThere is no fixed version for `ipaddress`.\n\n## References\n- [GitHub PR 1](https://github.com/phihag/ipaddress/pull/56#issuecomment-729847166)\n- [GitHub PR 2](https://github.com/phihag/ipaddress/pull/60)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-327",
                  "pip"
                ],
                "cvssv3_baseScore": 5.3,
                "security-severity": "5.3"
              }
            },
            {
              "id": "SNYK-PYTHON-IPADDRESS-1290073",
              "shortDescription": {
                "text": "High severity - Improper Input Validation vulnerability in ipaddress"
              },
              "fullDescription": {
                "text": "(CVE-2021-29921) ipaddress@1.0.22"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[ipaddress](https://www.pypi.org/project/ipaddress) is an IPv4/IPv6 manipulation library\n\nAffected versions of this package are vulnerable to Improper Input Validation. Improper input validation of octal strings in stdlib `ipaddress` allows unauthenticated remote attackers to perform indeterminate SSRF, RFI, and LFI attacks on many programs that rely on Python stdlib `ipaddress`. The highest threat from this vulnerability is to data integrity and system availability.\n## Remediation\nThere is no fixed version for `ipaddress`.\n\n## References\n- [POC: Potential Exploit](https://sick.codes/sick-2021-014)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=1957458)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-20",
                  "pip"
                ],
                "cvssv3_baseScore": 7.4,
                "security-severity": "7.4"
              }
            },
            {
              "id": "SNYK-PYTHON-IPADDRESS-590065",
              "shortDescription": {
                "text": "Medium severity - Cryptographic Issues vulnerability in ipaddress"
              },
              "fullDescription": {
                "text": "(CVE-2020-14422) ipaddress@1.0.22"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[ipaddress](https://www.pypi.org/project/ipaddress) is an IPv4/IPv6 manipulation library\n\nAffected versions of this package are vulnerable to Cryptographic Issues. The hash`()` methods of classes `IPv4Interface` and `IPv6Interface` had issue of generating constant hash values of 32 and 128 respectively causing hash collisions. The fix uses the `hash()` function to generate hash values for the objects instead of XOR operation.\n## Remediation\nThere is no fixed version for `ipaddress`.\n\n## References\n- [GitHub Issue](https://github.com/phihag/ipaddress/issues/55)\n- [GitHub PR](https://github.com/phihag/ipaddress/pull/56)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-310",
                  "pip"
                ],
                "cvssv3_baseScore": 5.9,
                "security-severity": "5.9"
              }
            },
            {
              "id": "SNYK-PYTHON-REQUESTS-5595532",
              "shortDescription": {
                "text": "Medium severity - Information Exposure vulnerability in requests"
              },
              "fullDescription": {
                "text": "(CVE-2023-32681) requests@2.22.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Information Exposure by leaking `Proxy-Authorization` headers to destination servers during redirects to an HTTPS origin. This is a result of how `rebuild_proxies` is used to recompute and [reattach the `Proxy-Authorization` header](https://github.com/psf/requests/blob/f2629e9e3c7ce3c3c8c025bcd8db551101cbc773/requests/sessions.py#L319-L328) to requests when redirected. \r\n\r\n**NOTE:** This behavior has only been observed to affect proxied requests when credentials are supplied in the URL user information component (e.g. `https://username:password@proxy:8080`), and only when redirecting to HTTPS:\r\n\r\n1) HTTP → HTTPS: leak\r\n\r\n2) HTTPS → HTTP: no leak\r\n\r\n3) HTTPS → HTTPS: leak\r\n\r\n4) HTTP → HTTP: no leak\r\n\r\nFor HTTP connections sent through the proxy, the proxy will identify the header in the request and remove it prior to forwarding to the destination server. However when sent over HTTPS, the `Proxy-Authorization` header must be sent in the `CONNECT` request as the proxy has no visibility into further tunneled requests. This results in Requests forwarding the header to the destination server unintentionally, allowing a malicious actor to potentially exfiltrate those credentials.\r\n\r\n## Workaround\r\n\r\nThis vulnerability can be avoided by setting `allow_redirects` to `False` on all calls through Requests top-level APIs, and then capturing the 3xx response codes to make a new request to the redirect destination.\n## Remediation\nUpgrade `requests` to version 2.31.0 or higher.\n## References\n- [GitHub Commit](https://github.com/psf/requests/commit/74ea7cf7a6a27a4eeb2ae24e162bcc942a6706d5)\n- [GitHub Release](https://github.com/psf/requests/releases/tag/v2.31.0)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-200",
                  "pip"
                ],
                "cvssv3_baseScore": 6.1,
                "security-severity": "6.1"
              }
            },
            {
              "id": "SNYK-PYTHON-REQUESTS-6928867",
              "shortDescription": {
                "text": "Medium severity - Always-Incorrect Control Flow Implementation vulnerability in requests"
              },
              "fullDescription": {
                "text": "(CVE-2024-35195) requests@2.22.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Always-Incorrect Control Flow Implementation when making requests through a Requests `Session`. An attacker can bypass certificate verification by making the first request with `verify=False`, causing all subsequent requests to ignore certificate verification regardless of changes to the `verify` value.\r\n\r\n**Notes:**\r\n\r\n1) For requests <2.32.0, avoid setting `verify=False` for the first request to a host while using a Requests Session.\r\n\r\n2) For requests <2.32.0, call `close()` on Session objects to clear existing connections if `verify=False` is used.\r\n\r\n3) This vulnerability was initially fixed in version [2.32.0](https://pypi.org/project/requests/2.32.0/), which was yanked. Therefore, the next available fixed version is 2.32.2.\n## Remediation\nUpgrade `requests` to version 2.32.2 or higher.\n## References\n- [GitHub Commit](https://github.com/psf/requests/commit/a58d7f2ffb4d00b46dca2d70a3932a0b37e22fac)\n- [GitHub PR](https://github.com/psf/requests/pull/6655)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-670",
                  "pip"
                ],
                "cvssv3_baseScore": 5.6,
                "security-severity": "5.6"
              }
            },
            {
              "id": "SNYK-PYTHON-URLLIB3-1014645",
              "shortDescription": {
                "text": "High severity - HTTP Header Injection vulnerability in urllib3"
              },
              "fullDescription": {
                "text": "(CVE-2020-26137) urllib3@1.25.2"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[urllib3](https://pypi.org/project/urllib3/) is a HTTP library with thread-safe connection pooling, file post, and more.\n\nAffected versions of this package are vulnerable to HTTP Header Injection. The 'method' parameter is not filtered to prevent the injection from altering the entire request.\r\n\r\nFor example:\r\n```\r\n>>> conn = http.client.HTTPConnection(\"localhost\", 80)\r\n>>> conn.request(method=\"GET / HTTP/1.1\\r\\nHost: abc\\r\\nRemainder:\", url=\"/index.html\")\r\n```\r\n\r\nThis will result in the following request being generated:\r\n```\r\nGET / HTTP/1.1\r\nHost: abc\r\nRemainder: /index.html HTTP/1.1\r\nHost: localhost\r\nAccept-Encoding: identity\r\n```\n## Remediation\nUpgrade `urllib3` to version 1.25.9 or higher.\n## References\n- [GitHub Commit](https://github.com/urllib3/urllib3/commit/1dd69c5c5982fae7c87a620d487c2ebf7a6b436b)\n- [GitHub PR](https://github.com/urllib3/urllib3/pull/1800)\n- [Python Issue Tracker](https://bugs.python.org/issue39603)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-644",
                  "pip"
                ],
                "cvssv3_baseScore": 7.7,
                "security-severity": "7.7"
              }
            },
            {
              "id": "SNYK-PYTHON-URLLIB3-1533435",
              "shortDescription": {
                "text": "Medium severity - Regular Expression Denial of Service (ReDoS) vulnerability in urllib3"
              },
              "fullDescription": {
                "text": "(CVE-2021-33503) urllib3@1.25.2"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[urllib3](https://pypi.org/project/urllib3/) is a HTTP library with thread-safe connection pooling, file post, and more.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) via the `SUBAUTHORITY_PAT` regex pattern in `src/urllib3/util/url.py`. \r\n\r\nIf a URL is passed as a parameter or redirected to via an HTTP redirect and it contains many `@` characters in the authority component, the authority regular expression exhibits catastrophic backtracking, causing a denial of service.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `urllib3` to version 1.26.5 or higher.\n## References\n- [GitHub Commit](https://github.com/urllib3/urllib3/commit/2d4a3fee6de2fa45eb82169361918f759269b4ec)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "pip"
                ],
                "cvssv3_baseScore": 5.3,
                "security-severity": "5.3"
              }
            },
            {
              "id": "SNYK-PYTHON-URLLIB3-559452",
              "shortDescription": {
                "text": "Medium severity - Denial of Service (DoS) vulnerability in urllib3"
              },
              "fullDescription": {
                "text": "(CVE-2020-7212) urllib3@1.25.2"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[urllib3](https://pypi.org/project/urllib3/) is a HTTP library with thread-safe connection pooling, file post, and more.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). The `_encode_invalid_chars` function in `util/url.py` in the urllib3 allows a denial of service (CPU consumption) because of an inefficient algorithm. The percent_encodings array contains all matches of percent encodings. It is not deduplicated. For a URL of length N, the size of percent_encodings may be up to O(N). The next step (normalize existing percent-encoded bytes) also takes up to O(N) for each step, so the total time is O(N^2). If percent_encodings were deduplicated, the time to compute _encode_invalid_chars would be O(kN), where k is at most 484 ((10+6*2)^2).\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `urllib3` to version 1.25.8 or higher.\n## References\n- [GitHub Commit Introducing Vuln](https://github.com/urllib3/urllib3/commit/a74c9cfbaed9f811e7563cfc3dce894928e0221a)\n- [GitHub Fix Commit](https://github.com/urllib3/urllib3/commit/a2697e7c6b275f05879b60f593c5854a816489f0)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "pip"
                ],
                "cvssv3_baseScore": 5.9,
                "security-severity": "5.9"
              }
            },
            {
              "id": "SNYK-PYTHON-URLLIB3-5926907",
              "shortDescription": {
                "text": "Medium severity - Information Exposure Through Sent Data vulnerability in urllib3"
              },
              "fullDescription": {
                "text": "(CVE-2023-43804) urllib3@1.25.2"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[urllib3](https://pypi.org/project/urllib3/) is a HTTP library with thread-safe connection pooling, file post, and more.\n\nAffected versions of this package are vulnerable to Information Exposure Through Sent Data when the `Cookie` HTTP header is used. An attacker can leak information via HTTP redirects to a different origin by exploiting the fact that the `Cookie` HTTP header isn't stripped on cross-origin redirects. \r\n\r\n**Note:**\r\n\r\nThis is only exploitable if the user is using the `Cookie` header on requests, not disabling HTTP redirects, and either not using HTTPS or for the origin server to redirect to a malicious origin.\r\n\r\n##Workaround:\r\n\r\nThis vulnerability can be mitigated by disabling HTTP redirects using `redirects=False` when sending requests and by not using the `Cookie` header.\n## Remediation\nUpgrade `urllib3` to version 1.26.17, 2.0.6 or higher.\n## References\n- [GitHub Commit](https://github.com/urllib3/urllib3/commit/01220354d389cd05474713f8c982d05c9b17aafb)\n- [GitHub Commit](https://github.com/urllib3/urllib3/commit/644124ecd0b6e417c527191f866daa05a5a2056d)\n- [GitHub Release](https://github.com/urllib3/urllib3/releases/tag/1.26.17)\n- [GitHub Release](https://github.com/urllib3/urllib3/releases/tag/2.0.6)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-200",
                  "pip"
                ],
                "cvssv3_baseScore": 5.9,
                "security-severity": "5.9"
              }
            },
            {
              "id": "SNYK-PYTHON-URLLIB3-6002459",
              "shortDescription": {
                "text": "Medium severity - Information Exposure Through Sent Data vulnerability in urllib3"
              },
              "fullDescription": {
                "text": "(CVE-2023-45803) urllib3@1.25.2"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[urllib3](https://pypi.org/project/urllib3/) is a HTTP library with thread-safe connection pooling, file post, and more.\n\nAffected versions of this package are vulnerable to Information Exposure Through Sent Data when it processes HTTP redirects with a 303 status code, due to not stripping the request body when changing the request method from `POST` to `GET`. An attacker can potentially expose sensitive information by compromising the origin service and redirecting requests to a malicious peer.\r\n\r\n**Note:**\r\n\r\nThis is only exploitable if sensitive information is being submitted in the HTTP request body and the origin service is compromised, starting to redirect using 303 to a malicious peer or the redirected-to service becomes compromised.\r\n\r\n## Workaround\r\n\r\nThis vulnerability can be mitigated by disabling redirects for services that are not expected to respond with redirects, or disabling automatic redirects and manually handling 303 redirects by stripping the HTTP request body.\n## Remediation\nUpgrade `urllib3` to version 1.26.18, 2.0.7 or higher.\n## References\n- [GitHub Commit](https://github.com/urllib3/urllib3/commit/4e50fbc5db74e32cabd5ccc1ab81fc103adfe0b3)\n- [GitHub Commit](https://github.com/urllib3/urllib3/commit/b594c5ceaca38e1ac215f916538fb128e3526a36)\n- [GitHub Release](https://github.com/urllib3/urllib3/releases/tag/1.26.18)\n- [GitHub Release](https://github.com/urllib3/urllib3/releases/tag/2.0.7)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-201",
                  "pip"
                ],
                "cvssv3_baseScore": 4.2,
                "security-severity": "4.2"
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "SNYK-PYTHON-CERTIFI-3164749",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable certifi package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/app/sickrage/requirements/requirements.txt"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "certifi@2019.3.9"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-PYTHON-CERTIFI-5805047",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable certifi package with a critical severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/app/sickrage/requirements/requirements.txt"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "certifi@2019.3.9"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-PYTHON-CRYPTOGRAPHY-1022152",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable cryptography package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/app/sickrage/requirements/requirements.txt"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "cryptography@2.6.1"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-PYTHON-CRYPTOGRAPHY-3172287",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable cryptography package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/app/sickrage/requirements/requirements.txt"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "cryptography@2.6.1"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-PYTHON-CRYPTOGRAPHY-3314966",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable cryptography package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/app/sickrage/requirements/requirements.txt"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "cryptography@2.6.1"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-PYTHON-CRYPTOGRAPHY-3315324",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable cryptography package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/app/sickrage/requirements/requirements.txt"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "cryptography@2.6.1"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-PYTHON-CRYPTOGRAPHY-3315328",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable cryptography package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/app/sickrage/requirements/requirements.txt"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "cryptography@2.6.1"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-PYTHON-CRYPTOGRAPHY-3315331",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable cryptography package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/app/sickrage/requirements/requirements.txt"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "cryptography@2.6.1"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-PYTHON-CRYPTOGRAPHY-3315452",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable cryptography package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/app/sickrage/requirements/requirements.txt"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "cryptography@2.6.1"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-PYTHON-CRYPTOGRAPHY-3315972",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable cryptography package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/app/sickrage/requirements/requirements.txt"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "cryptography@2.6.1"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-PYTHON-CRYPTOGRAPHY-3315975",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable cryptography package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/app/sickrage/requirements/requirements.txt"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "cryptography@2.6.1"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-PYTHON-CRYPTOGRAPHY-3316038",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable cryptography package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/app/sickrage/requirements/requirements.txt"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "cryptography@2.6.1"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-PYTHON-CRYPTOGRAPHY-3316211",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable cryptography package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/app/sickrage/requirements/requirements.txt"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "cryptography@2.6.1"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-PYTHON-CRYPTOGRAPHY-5663682",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable cryptography package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/app/sickrage/requirements/requirements.txt"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "cryptography@2.6.1"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-PYTHON-CRYPTOGRAPHY-5777683",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable cryptography package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/app/sickrage/requirements/requirements.txt"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "cryptography@2.6.1"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-PYTHON-CRYPTOGRAPHY-5813745",
          "level": "note",
          "message": {
            "text": "This file introduces a vulnerable cryptography package with a low severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/app/sickrage/requirements/requirements.txt"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "cryptography@2.6.1"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-PYTHON-CRYPTOGRAPHY-5813746",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable cryptography package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/app/sickrage/requirements/requirements.txt"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "cryptography@2.6.1"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-PYTHON-CRYPTOGRAPHY-5813750",
          "level": "note",
          "message": {
            "text": "This file introduces a vulnerable cryptography package with a low severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/app/sickrage/requirements/requirements.txt"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "cryptography@2.6.1"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-PYTHON-CRYPTOGRAPHY-5914629",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable cryptography package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/app/sickrage/requirements/requirements.txt"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "cryptography@2.6.1"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-PYTHON-CRYPTOGRAPHY-6036192",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable cryptography package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/app/sickrage/requirements/requirements.txt"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "cryptography@2.6.1"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-PYTHON-CRYPTOGRAPHY-6050294",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable cryptography package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/app/sickrage/requirements/requirements.txt"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "cryptography@2.6.1"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-PYTHON-CRYPTOGRAPHY-6126975",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable cryptography package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/app/sickrage/requirements/requirements.txt"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "cryptography@2.6.1"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-PYTHON-CRYPTOGRAPHY-6210214",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable cryptography package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/app/sickrage/requirements/requirements.txt"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "cryptography@2.6.1"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-PYTHON-CRYPTOGRAPHY-6913422",
          "level": "note",
          "message": {
            "text": "This file introduces a vulnerable cryptography package with a low severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/app/sickrage/requirements/requirements.txt"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "cryptography@2.6.1"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-PYTHON-IDNA-6597975",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable idna package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/app/sickrage/requirements/requirements.txt"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "idna@2.8.0"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-PYTHON-IPADDRESS-1041793",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable ipaddress package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/app/sickrage/requirements/requirements.txt"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "ipaddress@1.0.22"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-PYTHON-IPADDRESS-1290073",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable ipaddress package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/app/sickrage/requirements/requirements.txt"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "ipaddress@1.0.22"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-PYTHON-IPADDRESS-590065",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable ipaddress package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/app/sickrage/requirements/requirements.txt"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "ipaddress@1.0.22"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-PYTHON-REQUESTS-5595532",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable requests package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/app/sickrage/requirements/requirements.txt"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "requests@2.22.0"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-PYTHON-REQUESTS-6928867",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable requests package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/app/sickrage/requirements/requirements.txt"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "requests@2.22.0"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-PYTHON-URLLIB3-1014645",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable urllib3 package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/app/sickrage/requirements/requirements.txt"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "urllib3@1.25.2"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-PYTHON-URLLIB3-1533435",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable urllib3 package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/app/sickrage/requirements/requirements.txt"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "urllib3@1.25.2"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-PYTHON-URLLIB3-559452",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable urllib3 package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/app/sickrage/requirements/requirements.txt"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "urllib3@1.25.2"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-PYTHON-URLLIB3-5926907",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable urllib3 package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/app/sickrage/requirements/requirements.txt"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "urllib3@1.25.2"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-PYTHON-URLLIB3-6002459",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable urllib3 package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/app/sickrage/requirements/requirements.txt"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "urllib3@1.25.2"
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}
