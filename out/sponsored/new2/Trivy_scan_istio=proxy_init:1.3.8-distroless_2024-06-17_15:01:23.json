{
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "fullName": "Trivy Vulnerability Scanner",
          "informationUri": "https://github.com/aquasecurity/trivy",
          "name": "Trivy",
          "rules": [
            {
              "id": "CVE-2018-12886",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "gcc: spilling of stack protection address in cfgexpand.c and function.c leads to stack-overflow protection bypass"
              },
              "fullDescription": {
                "text": "stack_protect_prologue in cfgexpand.c and stack_protect_epilogue in function.c in GNU Compiler Collection (GCC) 4.1 through 8 (under certain circumstances) generate instruction sequences when targeting ARM targets that spill the address of the stack protector guard, which allows an attacker to bypass the protection of -fstack-protector, -fstack-protector-all, -fstack-protector-strong, and -fstack-protector-explicit against stack overflow by controlling what the stack canary is compared against."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2018-12886",
              "help": {
                "text": "Vulnerability CVE-2018-12886\nSeverity: HIGH\nPackage: libstdc++6\nFixed Version: \nLink: [CVE-2018-12886](https://avd.aquasec.com/nvd/cve-2018-12886)\nstack_protect_prologue in cfgexpand.c and stack_protect_epilogue in function.c in GNU Compiler Collection (GCC) 4.1 through 8 (under certain circumstances) generate instruction sequences when targeting ARM targets that spill the address of the stack protector guard, which allows an attacker to bypass the protection of -fstack-protector, -fstack-protector-all, -fstack-protector-strong, and -fstack-protector-explicit against stack overflow by controlling what the stack canary is compared against.",
                "markdown": "**Vulnerability CVE-2018-12886**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|libstdc++6||[CVE-2018-12886](https://avd.aquasec.com/nvd/cve-2018-12886)|\n\nstack_protect_prologue in cfgexpand.c and stack_protect_epilogue in function.c in GNU Compiler Collection (GCC) 4.1 through 8 (under certain circumstances) generate instruction sequences when targeting ARM targets that spill the address of the stack protector guard, which allows an attacker to bypass the protection of -fstack-protector, -fstack-protector-all, -fstack-protector-strong, and -fstack-protector-explicit against stack overflow by controlling what the stack canary is compared against."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "8.1",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-1292",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "openssl: c_rehash script allows command injection"
              },
              "fullDescription": {
                "text": "The c_rehash script does not properly sanitise shell metacharacters to prevent command injection. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.3 (Affected 3.0.0,3.0.1,3.0.2). Fixed in OpenSSL 1.1.1o (Affected 1.1.1-1.1.1n). Fixed in OpenSSL 1.0.2ze (Affected 1.0.2-1.0.2zd)."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2022-1292",
              "help": {
                "text": "Vulnerability CVE-2022-1292\nSeverity: CRITICAL\nPackage: openssl\nFixed Version: 1.1.0l-1~deb9u6\nLink: [CVE-2022-1292](https://avd.aquasec.com/nvd/cve-2022-1292)\nThe c_rehash script does not properly sanitise shell metacharacters to prevent command injection. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.3 (Affected 3.0.0,3.0.1,3.0.2). Fixed in OpenSSL 1.1.1o (Affected 1.1.1-1.1.1n). Fixed in OpenSSL 1.0.2ze (Affected 1.0.2-1.0.2zd).",
                "markdown": "**Vulnerability CVE-2022-1292**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|CRITICAL|openssl|1.1.0l-1~deb9u6|[CVE-2022-1292](https://avd.aquasec.com/nvd/cve-2022-1292)|\n\nThe c_rehash script does not properly sanitise shell metacharacters to prevent command injection. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.3 (Affected 3.0.0,3.0.1,3.0.2). Fixed in OpenSSL 1.1.1o (Affected 1.1.1-1.1.1n). Fixed in OpenSSL 1.0.2ze (Affected 1.0.2-1.0.2zd)."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "9.8",
                "tags": [
                  "vulnerability",
                  "security",
                  "CRITICAL"
                ]
              }
            },
            {
              "id": "CVE-2021-23840",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "openssl: integer overflow in CipherUpdate"
              },
              "fullDescription": {
                "text": "Calls to EVP_CipherUpdate, EVP_EncryptUpdate and EVP_DecryptUpdate may overflow the output length argument in some cases where the input length is close to the maximum permissable length for an integer on the platform. In such cases the return value from the function call will be 1 (indicating success), but the output length value will be negative. This could cause applications to behave incorrectly or crash. OpenSSL versions 1.1.1i and below are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1j. OpenSSL versions 1.0.2x and below are affected by this issue. However OpenSSL 1.0.2 is out of support and no longer receiving public updates. Premium support customers of OpenSSL 1.0.2 should upgrade to 1.0.2y. Other users should upgrade to 1.1.1j. Fixed in OpenSSL 1.1.1j (Affected 1.1.1-1.1.1i). Fixed in OpenSSL 1.0.2y (Affected 1.0.2-1.0.2x)."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2021-23840",
              "help": {
                "text": "Vulnerability CVE-2021-23840\nSeverity: HIGH\nPackage: openssl\nFixed Version: 1.1.0l-1~deb9u3\nLink: [CVE-2021-23840](https://avd.aquasec.com/nvd/cve-2021-23840)\nCalls to EVP_CipherUpdate, EVP_EncryptUpdate and EVP_DecryptUpdate may overflow the output length argument in some cases where the input length is close to the maximum permissable length for an integer on the platform. In such cases the return value from the function call will be 1 (indicating success), but the output length value will be negative. This could cause applications to behave incorrectly or crash. OpenSSL versions 1.1.1i and below are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1j. OpenSSL versions 1.0.2x and below are affected by this issue. However OpenSSL 1.0.2 is out of support and no longer receiving public updates. Premium support customers of OpenSSL 1.0.2 should upgrade to 1.0.2y. Other users should upgrade to 1.1.1j. Fixed in OpenSSL 1.1.1j (Affected 1.1.1-1.1.1i). Fixed in OpenSSL 1.0.2y (Affected 1.0.2-1.0.2x).",
                "markdown": "**Vulnerability CVE-2021-23840**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|openssl|1.1.0l-1~deb9u3|[CVE-2021-23840](https://avd.aquasec.com/nvd/cve-2021-23840)|\n\nCalls to EVP_CipherUpdate, EVP_EncryptUpdate and EVP_DecryptUpdate may overflow the output length argument in some cases where the input length is close to the maximum permissable length for an integer on the platform. In such cases the return value from the function call will be 1 (indicating success), but the output length value will be negative. This could cause applications to behave incorrectly or crash. OpenSSL versions 1.1.1i and below are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1j. OpenSSL versions 1.0.2x and below are affected by this issue. However OpenSSL 1.0.2 is out of support and no longer receiving public updates. Premium support customers of OpenSSL 1.0.2 should upgrade to 1.0.2y. Other users should upgrade to 1.1.1j. Fixed in OpenSSL 1.1.1j (Affected 1.1.1-1.1.1i). Fixed in OpenSSL 1.0.2y (Affected 1.0.2-1.0.2x)."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2021-3712",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "openssl: Read buffer overruns processing ASN.1 strings"
              },
              "fullDescription": {
                "text": "ASN.1 strings are represented internally within OpenSSL as an ASN1_STRING structure which contains a buffer holding the string data and a field holding the buffer length. This contrasts with normal C strings which are repesented as a buffer for the string data which is terminated with a NUL (0) byte. Although not a strict requirement, ASN.1 strings that are parsed using OpenSSL\u0026#39;s own \u0026#34;d2i\u0026#34; functions (and other similar parsing functions) as well as any string whose value has been set with the ASN1_STRING_set() function will additionally NUL terminate the byte array in the ASN1_STRING structure. However, it is possible for applications to directly construct valid ASN1_STRING structures which do not NUL terminate the byte array by directly setting the \u0026#34;data\u0026#34; and \u0026#34;length\u0026#34; fields in the ASN1_STRING array. This can also happen by using the ASN1_STRING_set0() function. Numerous OpenSSL functions that print ASN.1 data have been found to assume that the ASN1_STRING byte array will be NUL terminated, even though this is not guaranteed for strings that have been directly constructed. Where an application requests an ASN.1 structure to be printed, and where that ASN.1 structure contains ASN1_STRINGs that have been directly constructed by the application without NUL terminating the \u0026#34;data\u0026#34; field, then a read buffer overrun can occur. The same thing can also occur during name constraints processing of certificates (for example if a certificate has been directly constructed by the application instead of loading it via the OpenSSL parsing functions, and the certificate contains non NUL terminated ASN1_STRING structures). It can also occur in the X509_get1_email(), X509_REQ_get1_email() and X509_get1_ocsp() functions. If a malicious actor can cause an application to directly construct an ASN1_STRING and then process it through one of the affected OpenSSL functions then this issue could be hit. This might result in a crash (causing a Denial of Service attack). It could also result in the disclosure of private memory contents (such as private keys, or sensitive plaintext). Fixed in OpenSSL 1.1.1l (Affected 1.1.1-1.1.1k). Fixed in OpenSSL 1.0.2za (Affected 1.0.2-1.0.2y)."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2021-3712",
              "help": {
                "text": "Vulnerability CVE-2021-3712\nSeverity: HIGH\nPackage: openssl\nFixed Version: 1.1.0l-1~deb9u4\nLink: [CVE-2021-3712](https://avd.aquasec.com/nvd/cve-2021-3712)\nASN.1 strings are represented internally within OpenSSL as an ASN1_STRING structure which contains a buffer holding the string data and a field holding the buffer length. This contrasts with normal C strings which are repesented as a buffer for the string data which is terminated with a NUL (0) byte. Although not a strict requirement, ASN.1 strings that are parsed using OpenSSL's own \"d2i\" functions (and other similar parsing functions) as well as any string whose value has been set with the ASN1_STRING_set() function will additionally NUL terminate the byte array in the ASN1_STRING structure. However, it is possible for applications to directly construct valid ASN1_STRING structures which do not NUL terminate the byte array by directly setting the \"data\" and \"length\" fields in the ASN1_STRING array. This can also happen by using the ASN1_STRING_set0() function. Numerous OpenSSL functions that print ASN.1 data have been found to assume that the ASN1_STRING byte array will be NUL terminated, even though this is not guaranteed for strings that have been directly constructed. Where an application requests an ASN.1 structure to be printed, and where that ASN.1 structure contains ASN1_STRINGs that have been directly constructed by the application without NUL terminating the \"data\" field, then a read buffer overrun can occur. The same thing can also occur during name constraints processing of certificates (for example if a certificate has been directly constructed by the application instead of loading it via the OpenSSL parsing functions, and the certificate contains non NUL terminated ASN1_STRING structures). It can also occur in the X509_get1_email(), X509_REQ_get1_email() and X509_get1_ocsp() functions. If a malicious actor can cause an application to directly construct an ASN1_STRING and then process it through one of the affected OpenSSL functions then this issue could be hit. This might result in a crash (causing a Denial of Service attack). It could also result in the disclosure of private memory contents (such as private keys, or sensitive plaintext). Fixed in OpenSSL 1.1.1l (Affected 1.1.1-1.1.1k). Fixed in OpenSSL 1.0.2za (Affected 1.0.2-1.0.2y).",
                "markdown": "**Vulnerability CVE-2021-3712**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|openssl|1.1.0l-1~deb9u4|[CVE-2021-3712](https://avd.aquasec.com/nvd/cve-2021-3712)|\n\nASN.1 strings are represented internally within OpenSSL as an ASN1_STRING structure which contains a buffer holding the string data and a field holding the buffer length. This contrasts with normal C strings which are repesented as a buffer for the string data which is terminated with a NUL (0) byte. Although not a strict requirement, ASN.1 strings that are parsed using OpenSSL's own \"d2i\" functions (and other similar parsing functions) as well as any string whose value has been set with the ASN1_STRING_set() function will additionally NUL terminate the byte array in the ASN1_STRING structure. However, it is possible for applications to directly construct valid ASN1_STRING structures which do not NUL terminate the byte array by directly setting the \"data\" and \"length\" fields in the ASN1_STRING array. This can also happen by using the ASN1_STRING_set0() function. Numerous OpenSSL functions that print ASN.1 data have been found to assume that the ASN1_STRING byte array will be NUL terminated, even though this is not guaranteed for strings that have been directly constructed. Where an application requests an ASN.1 structure to be printed, and where that ASN.1 structure contains ASN1_STRINGs that have been directly constructed by the application without NUL terminating the \"data\" field, then a read buffer overrun can occur. The same thing can also occur during name constraints processing of certificates (for example if a certificate has been directly constructed by the application instead of loading it via the OpenSSL parsing functions, and the certificate contains non NUL terminated ASN1_STRING structures). It can also occur in the X509_get1_email(), X509_REQ_get1_email() and X509_get1_ocsp() functions. If a malicious actor can cause an application to directly construct an ASN1_STRING and then process it through one of the affected OpenSSL functions then this issue could be hit. This might result in a crash (causing a Denial of Service attack). It could also result in the disclosure of private memory contents (such as private keys, or sensitive plaintext). Fixed in OpenSSL 1.1.1l (Affected 1.1.1-1.1.1k). Fixed in OpenSSL 1.0.2za (Affected 1.0.2-1.0.2y)."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.4",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-0778",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "openssl: Infinite loop in BN_mod_sqrt() reachable when parsing certificates"
              },
              "fullDescription": {
                "text": "The BN_mod_sqrt() function, which computes a modular square root, contains a bug that can cause it to loop forever for non-prime moduli. Internally this function is used when parsing certificates that contain elliptic curve public keys in compressed form or explicit elliptic curve parameters with a base point encoded in compressed form. It is possible to trigger the infinite loop by crafting a certificate that has invalid explicit curve parameters. Since certificate parsing happens prior to verification of the certificate signature, any process that parses an externally supplied certificate may thus be subject to a denial of service attack. The infinite loop can also be reached when parsing crafted private keys as they can contain explicit elliptic curve parameters. Thus vulnerable situations include: - TLS clients consuming server certificates - TLS servers consuming client certificates - Hosting providers taking certificates or private keys from customers - Certificate authorities parsing certification requests from subscribers - Anything else which parses ASN.1 elliptic curve parameters Also any other applications that use the BN_mod_sqrt() where the attacker can control the parameter values are vulnerable to this DoS issue. In the OpenSSL 1.0.2 version the public key is not parsed during initial parsing of the certificate which makes it slightly harder to trigger the infinite loop. However any operation which requires the public key from the certificate will trigger the infinite loop. In particular the attacker can use a self-signed certificate to trigger the loop during verification of the certificate signature. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0. It was addressed in the releases of 1.1.1n and 3.0.2 on the 15th March 2022. Fixed in OpenSSL 3.0.2 (Affected 3.0.0,3.0.1). Fixed in OpenSSL 1.1.1n (Affected 1.1.1-1.1.1m). Fixed in OpenSSL 1.0.2zd (Affected 1.0.2-1.0.2zc)."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2022-0778",
              "help": {
                "text": "Vulnerability CVE-2022-0778\nSeverity: HIGH\nPackage: openssl\nFixed Version: 1.1.0l-1~deb9u5\nLink: [CVE-2022-0778](https://avd.aquasec.com/nvd/cve-2022-0778)\nThe BN_mod_sqrt() function, which computes a modular square root, contains a bug that can cause it to loop forever for non-prime moduli. Internally this function is used when parsing certificates that contain elliptic curve public keys in compressed form or explicit elliptic curve parameters with a base point encoded in compressed form. It is possible to trigger the infinite loop by crafting a certificate that has invalid explicit curve parameters. Since certificate parsing happens prior to verification of the certificate signature, any process that parses an externally supplied certificate may thus be subject to a denial of service attack. The infinite loop can also be reached when parsing crafted private keys as they can contain explicit elliptic curve parameters. Thus vulnerable situations include: - TLS clients consuming server certificates - TLS servers consuming client certificates - Hosting providers taking certificates or private keys from customers - Certificate authorities parsing certification requests from subscribers - Anything else which parses ASN.1 elliptic curve parameters Also any other applications that use the BN_mod_sqrt() where the attacker can control the parameter values are vulnerable to this DoS issue. In the OpenSSL 1.0.2 version the public key is not parsed during initial parsing of the certificate which makes it slightly harder to trigger the infinite loop. However any operation which requires the public key from the certificate will trigger the infinite loop. In particular the attacker can use a self-signed certificate to trigger the loop during verification of the certificate signature. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0. It was addressed in the releases of 1.1.1n and 3.0.2 on the 15th March 2022. Fixed in OpenSSL 3.0.2 (Affected 3.0.0,3.0.1). Fixed in OpenSSL 1.1.1n (Affected 1.1.1-1.1.1m). Fixed in OpenSSL 1.0.2zd (Affected 1.0.2-1.0.2zc).",
                "markdown": "**Vulnerability CVE-2022-0778**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|openssl|1.1.0l-1~deb9u5|[CVE-2022-0778](https://avd.aquasec.com/nvd/cve-2022-0778)|\n\nThe BN_mod_sqrt() function, which computes a modular square root, contains a bug that can cause it to loop forever for non-prime moduli. Internally this function is used when parsing certificates that contain elliptic curve public keys in compressed form or explicit elliptic curve parameters with a base point encoded in compressed form. It is possible to trigger the infinite loop by crafting a certificate that has invalid explicit curve parameters. Since certificate parsing happens prior to verification of the certificate signature, any process that parses an externally supplied certificate may thus be subject to a denial of service attack. The infinite loop can also be reached when parsing crafted private keys as they can contain explicit elliptic curve parameters. Thus vulnerable situations include: - TLS clients consuming server certificates - TLS servers consuming client certificates - Hosting providers taking certificates or private keys from customers - Certificate authorities parsing certification requests from subscribers - Anything else which parses ASN.1 elliptic curve parameters Also any other applications that use the BN_mod_sqrt() where the attacker can control the parameter values are vulnerable to this DoS issue. In the OpenSSL 1.0.2 version the public key is not parsed during initial parsing of the certificate which makes it slightly harder to trigger the infinite loop. However any operation which requires the public key from the certificate will trigger the infinite loop. In particular the attacker can use a self-signed certificate to trigger the loop during verification of the certificate signature. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0. It was addressed in the releases of 1.1.1n and 3.0.2 on the 15th March 2022. Fixed in OpenSSL 3.0.2 (Affected 3.0.0,3.0.1). Fixed in OpenSSL 1.1.1n (Affected 1.1.1-1.1.1m). Fixed in OpenSSL 1.0.2zd (Affected 1.0.2-1.0.2zc)."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2019-1551",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "openssl: Integer overflow in RSAZ modular exponentiation on x86_64"
              },
              "fullDescription": {
                "text": "There is an overflow bug in the x64_64 Montgomery squaring procedure used in exponentiation with 512-bit moduli. No EC algorithms are affected. Analysis suggests that attacks against 2-prime RSA1024, 3-prime RSA1536, and DSA1024 as a result of this defect would be very difficult to perform and are not believed likely. Attacks against DH512 are considered just feasible. However, for an attack the target would have to re-use the DH512 private key, which is not recommended anyway. Also applications directly using the low level API BN_mod_exp may be affected if they use BN_FLG_CONSTTIME. Fixed in OpenSSL 1.1.1e (Affected 1.1.1-1.1.1d). Fixed in OpenSSL 1.0.2u (Affected 1.0.2-1.0.2t)."
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2019-1551",
              "help": {
                "text": "Vulnerability CVE-2019-1551\nSeverity: MEDIUM\nPackage: openssl\nFixed Version: 1.1.0l-1~deb9u5\nLink: [CVE-2019-1551](https://avd.aquasec.com/nvd/cve-2019-1551)\nThere is an overflow bug in the x64_64 Montgomery squaring procedure used in exponentiation with 512-bit moduli. No EC algorithms are affected. Analysis suggests that attacks against 2-prime RSA1024, 3-prime RSA1536, and DSA1024 as a result of this defect would be very difficult to perform and are not believed likely. Attacks against DH512 are considered just feasible. However, for an attack the target would have to re-use the DH512 private key, which is not recommended anyway. Also applications directly using the low level API BN_mod_exp may be affected if they use BN_FLG_CONSTTIME. Fixed in OpenSSL 1.1.1e (Affected 1.1.1-1.1.1d). Fixed in OpenSSL 1.0.2u (Affected 1.0.2-1.0.2t).",
                "markdown": "**Vulnerability CVE-2019-1551**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|openssl|1.1.0l-1~deb9u5|[CVE-2019-1551](https://avd.aquasec.com/nvd/cve-2019-1551)|\n\nThere is an overflow bug in the x64_64 Montgomery squaring procedure used in exponentiation with 512-bit moduli. No EC algorithms are affected. Analysis suggests that attacks against 2-prime RSA1024, 3-prime RSA1536, and DSA1024 as a result of this defect would be very difficult to perform and are not believed likely. Attacks against DH512 are considered just feasible. However, for an attack the target would have to re-use the DH512 private key, which is not recommended anyway. Also applications directly using the low level API BN_mod_exp may be affected if they use BN_FLG_CONSTTIME. Fixed in OpenSSL 1.1.1e (Affected 1.1.1-1.1.1d). Fixed in OpenSSL 1.0.2u (Affected 1.0.2-1.0.2t)."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "5.3",
                "tags": [
                  "vulnerability",
                  "security",
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2020-1971",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "openssl: EDIPARTYNAME NULL pointer de-reference"
              },
              "fullDescription": {
                "text": "The X.509 GeneralName type is a generic type for representing different types of names. One of those name types is known as EDIPartyName. OpenSSL provides a function GENERAL_NAME_cmp which compares different instances of a GENERAL_NAME to see if they are equal or not. This function behaves incorrectly when both GENERAL_NAMEs contain an EDIPARTYNAME. A NULL pointer dereference and a crash may occur leading to a possible denial of service attack. OpenSSL itself uses the GENERAL_NAME_cmp function for two purposes: 1) Comparing CRL distribution point names between an available CRL and a CRL distribution point embedded in an X509 certificate 2) When verifying that a timestamp response token signer matches the timestamp authority name (exposed via the API functions TS_RESP_verify_response and TS_RESP_verify_token) If an attacker can control both items being compared then that attacker could trigger a crash. For example if the attacker can trick a client or server into checking a malicious certificate against a malicious CRL then this may occur. Note that some applications automatically download CRLs based on a URL embedded in a certificate. This checking happens prior to the signatures on the certificate and CRL being verified. OpenSSL\u0026#39;s s_server, s_client and verify tools have support for the \u0026#34;-crl_download\u0026#34; option which implements automatic CRL downloading and this attack has been demonstrated to work against those tools. Note that an unrelated bug means that affected versions of OpenSSL cannot parse or construct correct encodings of EDIPARTYNAME. However it is possible to construct a malformed EDIPARTYNAME that OpenSSL\u0026#39;s parser will accept and hence trigger this attack. All OpenSSL 1.1.1 and 1.0.2 versions are affected by this issue. Other OpenSSL releases are out of support and have not been checked. Fixed in OpenSSL 1.1.1i (Affected 1.1.1-1.1.1h). Fixed in OpenSSL 1.0.2x (Affected 1.0.2-1.0.2w)."
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2020-1971",
              "help": {
                "text": "Vulnerability CVE-2020-1971\nSeverity: MEDIUM\nPackage: openssl\nFixed Version: 1.1.0l-1~deb9u2\nLink: [CVE-2020-1971](https://avd.aquasec.com/nvd/cve-2020-1971)\nThe X.509 GeneralName type is a generic type for representing different types of names. One of those name types is known as EDIPartyName. OpenSSL provides a function GENERAL_NAME_cmp which compares different instances of a GENERAL_NAME to see if they are equal or not. This function behaves incorrectly when both GENERAL_NAMEs contain an EDIPARTYNAME. A NULL pointer dereference and a crash may occur leading to a possible denial of service attack. OpenSSL itself uses the GENERAL_NAME_cmp function for two purposes: 1) Comparing CRL distribution point names between an available CRL and a CRL distribution point embedded in an X509 certificate 2) When verifying that a timestamp response token signer matches the timestamp authority name (exposed via the API functions TS_RESP_verify_response and TS_RESP_verify_token) If an attacker can control both items being compared then that attacker could trigger a crash. For example if the attacker can trick a client or server into checking a malicious certificate against a malicious CRL then this may occur. Note that some applications automatically download CRLs based on a URL embedded in a certificate. This checking happens prior to the signatures on the certificate and CRL being verified. OpenSSL's s_server, s_client and verify tools have support for the \"-crl_download\" option which implements automatic CRL downloading and this attack has been demonstrated to work against those tools. Note that an unrelated bug means that affected versions of OpenSSL cannot parse or construct correct encodings of EDIPARTYNAME. However it is possible to construct a malformed EDIPARTYNAME that OpenSSL's parser will accept and hence trigger this attack. All OpenSSL 1.1.1 and 1.0.2 versions are affected by this issue. Other OpenSSL releases are out of support and have not been checked. Fixed in OpenSSL 1.1.1i (Affected 1.1.1-1.1.1h). Fixed in OpenSSL 1.0.2x (Affected 1.0.2-1.0.2w).",
                "markdown": "**Vulnerability CVE-2020-1971**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|openssl|1.1.0l-1~deb9u2|[CVE-2020-1971](https://avd.aquasec.com/nvd/cve-2020-1971)|\n\nThe X.509 GeneralName type is a generic type for representing different types of names. One of those name types is known as EDIPartyName. OpenSSL provides a function GENERAL_NAME_cmp which compares different instances of a GENERAL_NAME to see if they are equal or not. This function behaves incorrectly when both GENERAL_NAMEs contain an EDIPARTYNAME. A NULL pointer dereference and a crash may occur leading to a possible denial of service attack. OpenSSL itself uses the GENERAL_NAME_cmp function for two purposes: 1) Comparing CRL distribution point names between an available CRL and a CRL distribution point embedded in an X509 certificate 2) When verifying that a timestamp response token signer matches the timestamp authority name (exposed via the API functions TS_RESP_verify_response and TS_RESP_verify_token) If an attacker can control both items being compared then that attacker could trigger a crash. For example if the attacker can trick a client or server into checking a malicious certificate against a malicious CRL then this may occur. Note that some applications automatically download CRLs based on a URL embedded in a certificate. This checking happens prior to the signatures on the certificate and CRL being verified. OpenSSL's s_server, s_client and verify tools have support for the \"-crl_download\" option which implements automatic CRL downloading and this attack has been demonstrated to work against those tools. Note that an unrelated bug means that affected versions of OpenSSL cannot parse or construct correct encodings of EDIPARTYNAME. However it is possible to construct a malformed EDIPARTYNAME that OpenSSL's parser will accept and hence trigger this attack. All OpenSSL 1.1.1 and 1.0.2 versions are affected by this issue. Other OpenSSL releases are out of support and have not been checked. Fixed in OpenSSL 1.1.1i (Affected 1.1.1-1.1.1h). Fixed in OpenSSL 1.0.2x (Affected 1.0.2-1.0.2w)."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2021-23841",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "openssl: NULL pointer dereference in X509_issuer_and_serial_hash()"
              },
              "fullDescription": {
                "text": "The OpenSSL public API function X509_issuer_and_serial_hash() attempts to create a unique hash value based on the issuer and serial number data contained within an X509 certificate. However it fails to correctly handle any errors that may occur while parsing the issuer field (which might occur if the issuer field is maliciously constructed). This may subsequently result in a NULL pointer deref and a crash leading to a potential denial of service attack. The function X509_issuer_and_serial_hash() is never directly called by OpenSSL itself so applications are only vulnerable if they use this function directly and they use it on certificates that may have been obtained from untrusted sources. OpenSSL versions 1.1.1i and below are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1j. OpenSSL versions 1.0.2x and below are affected by this issue. However OpenSSL 1.0.2 is out of support and no longer receiving public updates. Premium support customers of OpenSSL 1.0.2 should upgrade to 1.0.2y. Other users should upgrade to 1.1.1j. Fixed in OpenSSL 1.1.1j (Affected 1.1.1-1.1.1i). Fixed in OpenSSL 1.0.2y (Affected 1.0.2-1.0.2x)."
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2021-23841",
              "help": {
                "text": "Vulnerability CVE-2021-23841\nSeverity: MEDIUM\nPackage: openssl\nFixed Version: 1.1.0l-1~deb9u3\nLink: [CVE-2021-23841](https://avd.aquasec.com/nvd/cve-2021-23841)\nThe OpenSSL public API function X509_issuer_and_serial_hash() attempts to create a unique hash value based on the issuer and serial number data contained within an X509 certificate. However it fails to correctly handle any errors that may occur while parsing the issuer field (which might occur if the issuer field is maliciously constructed). This may subsequently result in a NULL pointer deref and a crash leading to a potential denial of service attack. The function X509_issuer_and_serial_hash() is never directly called by OpenSSL itself so applications are only vulnerable if they use this function directly and they use it on certificates that may have been obtained from untrusted sources. OpenSSL versions 1.1.1i and below are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1j. OpenSSL versions 1.0.2x and below are affected by this issue. However OpenSSL 1.0.2 is out of support and no longer receiving public updates. Premium support customers of OpenSSL 1.0.2 should upgrade to 1.0.2y. Other users should upgrade to 1.1.1j. Fixed in OpenSSL 1.1.1j (Affected 1.1.1-1.1.1i). Fixed in OpenSSL 1.0.2y (Affected 1.0.2-1.0.2x).",
                "markdown": "**Vulnerability CVE-2021-23841**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|openssl|1.1.0l-1~deb9u3|[CVE-2021-23841](https://avd.aquasec.com/nvd/cve-2021-23841)|\n\nThe OpenSSL public API function X509_issuer_and_serial_hash() attempts to create a unique hash value based on the issuer and serial number data contained within an X509 certificate. However it fails to correctly handle any errors that may occur while parsing the issuer field (which might occur if the issuer field is maliciously constructed). This may subsequently result in a NULL pointer deref and a crash leading to a potential denial of service attack. The function X509_issuer_and_serial_hash() is never directly called by OpenSSL itself so applications are only vulnerable if they use this function directly and they use it on certificates that may have been obtained from untrusted sources. OpenSSL versions 1.1.1i and below are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1j. OpenSSL versions 1.0.2x and below are affected by this issue. However OpenSSL 1.0.2 is out of support and no longer receiving public updates. Premium support customers of OpenSSL 1.0.2 should upgrade to 1.0.2y. Other users should upgrade to 1.1.1j. Fixed in OpenSSL 1.1.1j (Affected 1.1.1-1.1.1i). Fixed in OpenSSL 1.0.2y (Affected 1.0.2-1.0.2x)."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2021-4160",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "openssl: Carry propagation bug in the MIPS32 and MIPS64 squaring procedure"
              },
              "fullDescription": {
                "text": "There is a carry propagation bug in the MIPS32 and MIPS64 squaring procedure. Many EC algorithms are affected, including some of the TLS 1.3 default curves. Impact was not analyzed in detail, because the pre-requisites for attack are considered unlikely and include reusing private keys. Analysis suggests that attacks against RSA and DSA as a result of this defect would be very difficult to perform and are not believed likely. Attacks against DH are considered just feasible (although very difficult) because most of the work necessary to deduce information about a private key may be performed offline. The amount of resources required for such an attack would be significant. However, for an attack on TLS to be meaningful, the server would have to share the DH private key among multiple clients, which is no longer an option since CVE-2016-0701. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0.0. It was addressed in the releases of 1.1.1m and 3.0.1 on the 15th of December 2021. For the 1.0.2 release it is addressed in git commit 6fc1aaaf3 that is available to premium support customers only. It will be made available in 1.0.2zc when it is released. The issue only affects OpenSSL on MIPS platforms. Fixed in OpenSSL 3.0.1 (Affected 3.0.0). Fixed in OpenSSL 1.1.1m (Affected 1.1.1-1.1.1l). Fixed in OpenSSL 1.0.2zc-dev (Affected 1.0.2-1.0.2zb)."
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2021-4160",
              "help": {
                "text": "Vulnerability CVE-2021-4160\nSeverity: MEDIUM\nPackage: openssl\nFixed Version: \nLink: [CVE-2021-4160](https://avd.aquasec.com/nvd/cve-2021-4160)\nThere is a carry propagation bug in the MIPS32 and MIPS64 squaring procedure. Many EC algorithms are affected, including some of the TLS 1.3 default curves. Impact was not analyzed in detail, because the pre-requisites for attack are considered unlikely and include reusing private keys. Analysis suggests that attacks against RSA and DSA as a result of this defect would be very difficult to perform and are not believed likely. Attacks against DH are considered just feasible (although very difficult) because most of the work necessary to deduce information about a private key may be performed offline. The amount of resources required for such an attack would be significant. However, for an attack on TLS to be meaningful, the server would have to share the DH private key among multiple clients, which is no longer an option since CVE-2016-0701. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0.0. It was addressed in the releases of 1.1.1m and 3.0.1 on the 15th of December 2021. For the 1.0.2 release it is addressed in git commit 6fc1aaaf3 that is available to premium support customers only. It will be made available in 1.0.2zc when it is released. The issue only affects OpenSSL on MIPS platforms. Fixed in OpenSSL 3.0.1 (Affected 3.0.0). Fixed in OpenSSL 1.1.1m (Affected 1.1.1-1.1.1l). Fixed in OpenSSL 1.0.2zc-dev (Affected 1.0.2-1.0.2zb).",
                "markdown": "**Vulnerability CVE-2021-4160**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|openssl||[CVE-2021-4160](https://avd.aquasec.com/nvd/cve-2021-4160)|\n\nThere is a carry propagation bug in the MIPS32 and MIPS64 squaring procedure. Many EC algorithms are affected, including some of the TLS 1.3 default curves. Impact was not analyzed in detail, because the pre-requisites for attack are considered unlikely and include reusing private keys. Analysis suggests that attacks against RSA and DSA as a result of this defect would be very difficult to perform and are not believed likely. Attacks against DH are considered just feasible (although very difficult) because most of the work necessary to deduce information about a private key may be performed offline. The amount of resources required for such an attack would be significant. However, for an attack on TLS to be meaningful, the server would have to share the DH private key among multiple clients, which is no longer an option since CVE-2016-0701. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0.0. It was addressed in the releases of 1.1.1m and 3.0.1 on the 15th of December 2021. For the 1.0.2 release it is addressed in git commit 6fc1aaaf3 that is available to premium support customers only. It will be made available in 1.0.2zc when it is released. The issue only affects OpenSSL on MIPS platforms. Fixed in OpenSSL 3.0.1 (Affected 3.0.0). Fixed in OpenSSL 1.1.1m (Affected 1.1.1-1.1.1l). Fixed in OpenSSL 1.0.2zc-dev (Affected 1.0.2-1.0.2zb)."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "5.9",
                "tags": [
                  "vulnerability",
                  "security",
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "DLA-2424-1",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "tzdata - new upstream version"
              },
              "fullDescription": {
                "text": "tzdata - new upstream version"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "text": "Vulnerability DLA-2424-1\nSeverity: UNKNOWN\nPackage: tzdata\nFixed Version: 2020d-0+deb9u1\nLink: [DLA-2424-1]()\n",
                "markdown": "**Vulnerability DLA-2424-1**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|UNKNOWN|tzdata|2020d-0+deb9u1|[DLA-2424-1]()|\n\n"
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0",
                "tags": [
                  "vulnerability",
                  "security",
                  "UNKNOWN"
                ]
              }
            },
            {
              "id": "DLA-2509-1",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "tzdata - new upstream version"
              },
              "fullDescription": {
                "text": "tzdata - new upstream version"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "text": "Vulnerability DLA-2509-1\nSeverity: UNKNOWN\nPackage: tzdata\nFixed Version: 2020e-0+deb9u1\nLink: [DLA-2509-1]()\n",
                "markdown": "**Vulnerability DLA-2509-1**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|UNKNOWN|tzdata|2020e-0+deb9u1|[DLA-2509-1]()|\n\n"
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0",
                "tags": [
                  "vulnerability",
                  "security",
                  "UNKNOWN"
                ]
              }
            },
            {
              "id": "DLA-2542-1",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "tzdata - new upstream version"
              },
              "fullDescription": {
                "text": "tzdata - new upstream version"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "text": "Vulnerability DLA-2542-1\nSeverity: UNKNOWN\nPackage: tzdata\nFixed Version: 2021a-0+deb9u1\nLink: [DLA-2542-1]()\n",
                "markdown": "**Vulnerability DLA-2542-1**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|UNKNOWN|tzdata|2021a-0+deb9u1|[DLA-2542-1]()|\n\n"
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0",
                "tags": [
                  "vulnerability",
                  "security",
                  "UNKNOWN"
                ]
              }
            },
            {
              "id": "DLA-2797-1",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "tzdata - new upstream version"
              },
              "fullDescription": {
                "text": "tzdata - new upstream version"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "text": "Vulnerability DLA-2797-1\nSeverity: UNKNOWN\nPackage: tzdata\nFixed Version: 2021a-0+deb9u2\nLink: [DLA-2797-1]()\n",
                "markdown": "**Vulnerability DLA-2797-1**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|UNKNOWN|tzdata|2021a-0+deb9u2|[DLA-2797-1]()|\n\n"
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0",
                "tags": [
                  "vulnerability",
                  "security",
                  "UNKNOWN"
                ]
              }
            },
            {
              "id": "DLA-2963-1",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "tzdata - new timezone database"
              },
              "fullDescription": {
                "text": "tzdata - new timezone database"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "text": "Vulnerability DLA-2963-1\nSeverity: UNKNOWN\nPackage: tzdata\nFixed Version: 2021a-0+deb9u3\nLink: [DLA-2963-1]()\n",
                "markdown": "**Vulnerability DLA-2963-1**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|UNKNOWN|tzdata|2021a-0+deb9u3|[DLA-2963-1]()|\n\n"
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0",
                "tags": [
                  "vulnerability",
                  "security",
                  "UNKNOWN"
                ]
              }
            },
            {
              "id": "DLA-3051-1",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "tzdata - new timezone database"
              },
              "fullDescription": {
                "text": "tzdata - new timezone database"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "help": {
                "text": "Vulnerability DLA-3051-1\nSeverity: UNKNOWN\nPackage: tzdata\nFixed Version: 2021a-0+deb9u4\nLink: [DLA-3051-1]()\n",
                "markdown": "**Vulnerability DLA-3051-1**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|UNKNOWN|tzdata|2021a-0+deb9u4|[DLA-3051-1]()|\n\n"
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "0.0",
                "tags": [
                  "vulnerability",
                  "security",
                  "UNKNOWN"
                ]
              }
            }
          ],
          "version": "0.52.0"
        }
      },
      "results": [
        {
          "ruleId": "CVE-2018-12886",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Package: libgcc1\nInstalled Version: 1:6.3.0-18+deb9u1\nVulnerability CVE-2018-12886\nSeverity: HIGH\nFixed Version: \nLink: [CVE-2018-12886](https://avd.aquasec.com/nvd/cve-2018-12886)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "istio/proxy_init",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "istio/proxy_init: libgcc1@1:6.3.0-18+deb9u1"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-12886",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Package: libgomp1\nInstalled Version: 6.3.0-18+deb9u1\nVulnerability CVE-2018-12886\nSeverity: HIGH\nFixed Version: \nLink: [CVE-2018-12886](https://avd.aquasec.com/nvd/cve-2018-12886)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "istio/proxy_init",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "istio/proxy_init: libgomp1@6.3.0-18+deb9u1"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1292",
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "Package: libssl1.1\nInstalled Version: 1.1.0l-1~deb9u1\nVulnerability CVE-2022-1292\nSeverity: CRITICAL\nFixed Version: 1.1.0l-1~deb9u6\nLink: [CVE-2022-1292](https://avd.aquasec.com/nvd/cve-2022-1292)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "istio/proxy_init",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "istio/proxy_init: libssl1.1@1.1.0l-1~deb9u1"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-23840",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "Package: libssl1.1\nInstalled Version: 1.1.0l-1~deb9u1\nVulnerability CVE-2021-23840\nSeverity: HIGH\nFixed Version: 1.1.0l-1~deb9u3\nLink: [CVE-2021-23840](https://avd.aquasec.com/nvd/cve-2021-23840)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "istio/proxy_init",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "istio/proxy_init: libssl1.1@1.1.0l-1~deb9u1"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3712",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "text": "Package: libssl1.1\nInstalled Version: 1.1.0l-1~deb9u1\nVulnerability CVE-2021-3712\nSeverity: HIGH\nFixed Version: 1.1.0l-1~deb9u4\nLink: [CVE-2021-3712](https://avd.aquasec.com/nvd/cve-2021-3712)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "istio/proxy_init",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "istio/proxy_init: libssl1.1@1.1.0l-1~deb9u1"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-0778",
          "ruleIndex": 4,
          "level": "error",
          "message": {
            "text": "Package: libssl1.1\nInstalled Version: 1.1.0l-1~deb9u1\nVulnerability CVE-2022-0778\nSeverity: HIGH\nFixed Version: 1.1.0l-1~deb9u5\nLink: [CVE-2022-0778](https://avd.aquasec.com/nvd/cve-2022-0778)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "istio/proxy_init",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "istio/proxy_init: libssl1.1@1.1.0l-1~deb9u1"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-1551",
          "ruleIndex": 5,
          "level": "warning",
          "message": {
            "text": "Package: libssl1.1\nInstalled Version: 1.1.0l-1~deb9u1\nVulnerability CVE-2019-1551\nSeverity: MEDIUM\nFixed Version: 1.1.0l-1~deb9u5\nLink: [CVE-2019-1551](https://avd.aquasec.com/nvd/cve-2019-1551)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "istio/proxy_init",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "istio/proxy_init: libssl1.1@1.1.0l-1~deb9u1"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-1971",
          "ruleIndex": 6,
          "level": "warning",
          "message": {
            "text": "Package: libssl1.1\nInstalled Version: 1.1.0l-1~deb9u1\nVulnerability CVE-2020-1971\nSeverity: MEDIUM\nFixed Version: 1.1.0l-1~deb9u2\nLink: [CVE-2020-1971](https://avd.aquasec.com/nvd/cve-2020-1971)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "istio/proxy_init",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "istio/proxy_init: libssl1.1@1.1.0l-1~deb9u1"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-23841",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "Package: libssl1.1\nInstalled Version: 1.1.0l-1~deb9u1\nVulnerability CVE-2021-23841\nSeverity: MEDIUM\nFixed Version: 1.1.0l-1~deb9u3\nLink: [CVE-2021-23841](https://avd.aquasec.com/nvd/cve-2021-23841)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "istio/proxy_init",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "istio/proxy_init: libssl1.1@1.1.0l-1~deb9u1"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-4160",
          "ruleIndex": 8,
          "level": "warning",
          "message": {
            "text": "Package: libssl1.1\nInstalled Version: 1.1.0l-1~deb9u1\nVulnerability CVE-2021-4160\nSeverity: MEDIUM\nFixed Version: \nLink: [CVE-2021-4160](https://avd.aquasec.com/nvd/cve-2021-4160)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "istio/proxy_init",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "istio/proxy_init: libssl1.1@1.1.0l-1~deb9u1"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-12886",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Package: libstdc++6\nInstalled Version: 6.3.0-18+deb9u1\nVulnerability CVE-2018-12886\nSeverity: HIGH\nFixed Version: \nLink: [CVE-2018-12886](https://avd.aquasec.com/nvd/cve-2018-12886)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "istio/proxy_init",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "istio/proxy_init: libstdc++6@6.3.0-18+deb9u1"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1292",
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "Package: openssl\nInstalled Version: 1.1.0l-1~deb9u1\nVulnerability CVE-2022-1292\nSeverity: CRITICAL\nFixed Version: 1.1.0l-1~deb9u6\nLink: [CVE-2022-1292](https://avd.aquasec.com/nvd/cve-2022-1292)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "istio/proxy_init",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "istio/proxy_init: openssl@1.1.0l-1~deb9u1"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-23840",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "Package: openssl\nInstalled Version: 1.1.0l-1~deb9u1\nVulnerability CVE-2021-23840\nSeverity: HIGH\nFixed Version: 1.1.0l-1~deb9u3\nLink: [CVE-2021-23840](https://avd.aquasec.com/nvd/cve-2021-23840)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "istio/proxy_init",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "istio/proxy_init: openssl@1.1.0l-1~deb9u1"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3712",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "text": "Package: openssl\nInstalled Version: 1.1.0l-1~deb9u1\nVulnerability CVE-2021-3712\nSeverity: HIGH\nFixed Version: 1.1.0l-1~deb9u4\nLink: [CVE-2021-3712](https://avd.aquasec.com/nvd/cve-2021-3712)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "istio/proxy_init",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "istio/proxy_init: openssl@1.1.0l-1~deb9u1"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-0778",
          "ruleIndex": 4,
          "level": "error",
          "message": {
            "text": "Package: openssl\nInstalled Version: 1.1.0l-1~deb9u1\nVulnerability CVE-2022-0778\nSeverity: HIGH\nFixed Version: 1.1.0l-1~deb9u5\nLink: [CVE-2022-0778](https://avd.aquasec.com/nvd/cve-2022-0778)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "istio/proxy_init",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "istio/proxy_init: openssl@1.1.0l-1~deb9u1"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-1551",
          "ruleIndex": 5,
          "level": "warning",
          "message": {
            "text": "Package: openssl\nInstalled Version: 1.1.0l-1~deb9u1\nVulnerability CVE-2019-1551\nSeverity: MEDIUM\nFixed Version: 1.1.0l-1~deb9u5\nLink: [CVE-2019-1551](https://avd.aquasec.com/nvd/cve-2019-1551)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "istio/proxy_init",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "istio/proxy_init: openssl@1.1.0l-1~deb9u1"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-1971",
          "ruleIndex": 6,
          "level": "warning",
          "message": {
            "text": "Package: openssl\nInstalled Version: 1.1.0l-1~deb9u1\nVulnerability CVE-2020-1971\nSeverity: MEDIUM\nFixed Version: 1.1.0l-1~deb9u2\nLink: [CVE-2020-1971](https://avd.aquasec.com/nvd/cve-2020-1971)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "istio/proxy_init",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "istio/proxy_init: openssl@1.1.0l-1~deb9u1"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-23841",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "Package: openssl\nInstalled Version: 1.1.0l-1~deb9u1\nVulnerability CVE-2021-23841\nSeverity: MEDIUM\nFixed Version: 1.1.0l-1~deb9u3\nLink: [CVE-2021-23841](https://avd.aquasec.com/nvd/cve-2021-23841)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "istio/proxy_init",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "istio/proxy_init: openssl@1.1.0l-1~deb9u1"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-4160",
          "ruleIndex": 8,
          "level": "warning",
          "message": {
            "text": "Package: openssl\nInstalled Version: 1.1.0l-1~deb9u1\nVulnerability CVE-2021-4160\nSeverity: MEDIUM\nFixed Version: \nLink: [CVE-2021-4160](https://avd.aquasec.com/nvd/cve-2021-4160)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "istio/proxy_init",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "istio/proxy_init: openssl@1.1.0l-1~deb9u1"
              }
            }
          ]
        },
        {
          "ruleId": "DLA-2424-1",
          "ruleIndex": 9,
          "level": "note",
          "message": {
            "text": "Package: tzdata\nInstalled Version: 2019b-0+deb9u1\nVulnerability DLA-2424-1\nSeverity: UNKNOWN\nFixed Version: 2020d-0+deb9u1\nLink: [DLA-2424-1]()"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "istio/proxy_init",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "istio/proxy_init: tzdata@2019b-0+deb9u1"
              }
            }
          ]
        },
        {
          "ruleId": "DLA-2509-1",
          "ruleIndex": 10,
          "level": "note",
          "message": {
            "text": "Package: tzdata\nInstalled Version: 2019b-0+deb9u1\nVulnerability DLA-2509-1\nSeverity: UNKNOWN\nFixed Version: 2020e-0+deb9u1\nLink: [DLA-2509-1]()"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "istio/proxy_init",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "istio/proxy_init: tzdata@2019b-0+deb9u1"
              }
            }
          ]
        },
        {
          "ruleId": "DLA-2542-1",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "Package: tzdata\nInstalled Version: 2019b-0+deb9u1\nVulnerability DLA-2542-1\nSeverity: UNKNOWN\nFixed Version: 2021a-0+deb9u1\nLink: [DLA-2542-1]()"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "istio/proxy_init",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "istio/proxy_init: tzdata@2019b-0+deb9u1"
              }
            }
          ]
        },
        {
          "ruleId": "DLA-2797-1",
          "ruleIndex": 12,
          "level": "note",
          "message": {
            "text": "Package: tzdata\nInstalled Version: 2019b-0+deb9u1\nVulnerability DLA-2797-1\nSeverity: UNKNOWN\nFixed Version: 2021a-0+deb9u2\nLink: [DLA-2797-1]()"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "istio/proxy_init",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "istio/proxy_init: tzdata@2019b-0+deb9u1"
              }
            }
          ]
        },
        {
          "ruleId": "DLA-2963-1",
          "ruleIndex": 13,
          "level": "note",
          "message": {
            "text": "Package: tzdata\nInstalled Version: 2019b-0+deb9u1\nVulnerability DLA-2963-1\nSeverity: UNKNOWN\nFixed Version: 2021a-0+deb9u3\nLink: [DLA-2963-1]()"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "istio/proxy_init",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "istio/proxy_init: tzdata@2019b-0+deb9u1"
              }
            }
          ]
        },
        {
          "ruleId": "DLA-3051-1",
          "ruleIndex": 14,
          "level": "note",
          "message": {
            "text": "Package: tzdata\nInstalled Version: 2019b-0+deb9u1\nVulnerability DLA-3051-1\nSeverity: UNKNOWN\nFixed Version: 2021a-0+deb9u4\nLink: [DLA-3051-1]()"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "istio/proxy_init",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "istio/proxy_init: tzdata@2019b-0+deb9u1"
              }
            }
          ]
        }
      ],
      "columnKind": "utf16CodeUnits",
      "originalUriBaseIds": {
        "ROOTPATH": {
          "uri": "file:///"
        }
      },
      "properties": {
        "imageName": "istio/proxy_init:1.3.8-distroless",
        "repoDigests": [
          "istio/proxy_init@sha256:6cfa37738f6a9cb2717eab0eb212a56854b8881ae6d153e81982c8138213dd86"
        ],
        "repoTags": [
          "istio/proxy_init:1.3.8-distroless"
        ]
      }
    }
  ]
}