{
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "informationUri": "https://docs.jfrog-applications.jfrog.io/jfrog-security-features/sca",
          "name": "JFrog Xray SCA",
          "rules": [
            {
              "id": "CVE-2022-23806_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2022-23806] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Curve.IsOnCurve in crypto/elliptic in Go before 1.16.14 and 1.17.x before 1.17.7 can incorrectly return true in situations with a big.Int value that is not a valid field element.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.1      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.16.14], [1.17.7]   |"
              },
              "properties": {
                "security-severity": "9.1"
              }
            },
            {
              "id": "CVE-2023-24540_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2023-24540] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Not all valid JavaScript whitespace characters are considered to be whitespace. Templates containing whitespace characters outside of the character set \"\\t\\n\\f\\r\\u0020\\u2028\\u2029\" in JavaScript contexts that also contain actions may not be properly sanitized during execution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-24538_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2023-24538] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Templates do not properly consider backticks (`) as Javascript string delimiters, and do not escape them as expected. Backticks are used, since ES6, for JS template literals. If a template contains a Go template action within a Javascript template literal, the contents of the action can be used to terminate the literal, injecting arbitrary Javascript code into the Go template. As ES6 template literals are rather complex, and themselves can do string interpolation, the decision was made to simply disallow Go template actions from being used inside of them (e.g. \"var a = {{.}}\"), since there is no obviously safe way to allow this behavior. This takes the same approach as github.com/google/safehtml. With fix, Template.Parse returns an Error when it encounters templates like this, with an ErrorCode of value 12. This ErrorCode is currently unexported, but will be exported in the release of Go 1.21. Users who rely on the previous behavior can re-enable it using the GODEBUG flag jstmpllitinterp=1, with the caveat that backticks will now be escaped. This should be used with caution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-24540_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2023-24540] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "Not all valid JavaScript whitespace characters are considered to be whitespace. Templates containing whitespace characters outside of the character set \"\\t\\n\\f\\r\\u0020\\u2028\\u2029\" in JavaScript contexts that also contain actions may not be properly sanitized during execution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-1292_3.15:libcrypto1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2022-1292] 3.15:libcrypto1.1 1.1.1n-r0"
              },
              "help": {
                "text": "The c_rehash script does not properly sanitise shell metacharacters to prevent command injection. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.3 (Affected 3.0.0,3.0.1,3.0.2). Fixed in OpenSSL 1.1.1o (Affected 1.1.1-1.1.1n). Fixed in OpenSSL 1.0.2ze (Affected 1.0.2-1.0.2zd).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.1.1o-r0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-24540_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2023-24540] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "Not all valid JavaScript whitespace characters are considered to be whitespace. Templates containing whitespace characters outside of the character set \"\\t\\n\\f\\r\\u0020\\u2028\\u2029\" in JavaScript contexts that also contain actions may not be properly sanitized during execution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-2068_3.15:libssl1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2022-2068] 3.15:libssl1.1 1.1.1n-r0"
              },
              "help": {
                "text": "In addition to the c_rehash shell command injection identified in CVE-2022-1292, further circumstances where the c_rehash script does not properly sanitise shell metacharacters to prevent command injection were found by code review. When the CVE-2022-1292 was fixed it was not discovered that there are other places in the script where the file names of certificates being hashed were possibly passed to a command executed through the shell. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.4 (Affected 3.0.0,3.0.1,3.0.2,3.0.3). Fixed in OpenSSL 1.1.1p (Affected 1.1.1-1.1.1o). Fixed in OpenSSL 1.0.2zf (Affected 1.0.2-1.0.2ze).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.1.1p-r0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-24538_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2023-24538] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "Templates do not properly consider backticks (`) as Javascript string delimiters, and do not escape them as expected. Backticks are used, since ES6, for JS template literals. If a template contains a Go template action within a Javascript template literal, the contents of the action can be used to terminate the literal, injecting arbitrary Javascript code into the Go template. As ES6 template literals are rather complex, and themselves can do string interpolation, the decision was made to simply disallow Go template actions from being used inside of them (e.g. \"var a = {{.}}\"), since there is no obviously safe way to allow this behavior. This takes the same approach as github.com/google/safehtml. With fix, Template.Parse returns an Error when it encounters templates like this, with an ErrorCode of value 12. This ErrorCode is currently unexported, but will be exported in the release of Go 1.21. Users who rely on the previous behavior can re-enable it using the GODEBUG flag jstmpllitinterp=1, with the caveat that backticks will now be escaped. This should be used with caution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-24538_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2023-24538] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "Templates do not properly consider backticks (`) as Javascript string delimiters, and do not escape them as expected. Backticks are used, since ES6, for JS template literals. If a template contains a Go template action within a Javascript template literal, the contents of the action can be used to terminate the literal, injecting arbitrary Javascript code into the Go template. As ES6 template literals are rather complex, and themselves can do string interpolation, the decision was made to simply disallow Go template actions from being used inside of them (e.g. \"var a = {{.}}\"), since there is no obviously safe way to allow this behavior. This takes the same approach as github.com/google/safehtml. With fix, Template.Parse returns an Error when it encounters templates like this, with an ErrorCode of value 12. This ErrorCode is currently unexported, but will be exported in the release of Go 1.21. Users who rely on the previous behavior can re-enable it using the GODEBUG flag jstmpllitinterp=1, with the caveat that backticks will now be escaped. This should be used with caution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-37434_3.15:zlib_1.2.12-r0",
              "shortDescription": {
                "text": "[CVE-2022-37434] 3.15:zlib 1.2.12-r0"
              },
              "help": {
                "text": "zlib through 1.2.12 has a heap-based buffer over-read or buffer overflow in inflate in inflate.c via a large gzip header extra field. NOTE: only applications that call inflateGetHeader are affected. Some common applications bundle the affected zlib source code but may be unable to call inflateGetHeader (e.g., see the nodejs/node reference).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.2.12-r2]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-23806_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2022-23806] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "Curve.IsOnCurve in crypto/elliptic in Go before 1.16.14 and 1.17.x before 1.17.7 can incorrectly return true in situations with a big.Int value that is not a valid field element.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.1      | Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.16.14], [1.17.7]   |"
              },
              "properties": {
                "security-severity": "9.1"
              }
            },
            {
              "id": "CVE-2023-24540_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2023-24540] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "Not all valid JavaScript whitespace characters are considered to be whitespace. Templates containing whitespace characters outside of the character set \"\\t\\n\\f\\r\\u0020\\u2028\\u2029\" in JavaScript contexts that also contain actions may not be properly sanitized during execution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-24538_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2023-24538] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "Templates do not properly consider backticks (`) as Javascript string delimiters, and do not escape them as expected. Backticks are used, since ES6, for JS template literals. If a template contains a Go template action within a Javascript template literal, the contents of the action can be used to terminate the literal, injecting arbitrary Javascript code into the Go template. As ES6 template literals are rather complex, and themselves can do string interpolation, the decision was made to simply disallow Go template actions from being used inside of them (e.g. \"var a = {{.}}\"), since there is no obviously safe way to allow this behavior. This takes the same approach as github.com/google/safehtml. With fix, Template.Parse returns an Error when it encounters templates like this, with an ErrorCode of value 12. This ErrorCode is currently unexported, but will be exported in the release of Go 1.21. Users who rely on the previous behavior can re-enable it using the GODEBUG flag jstmpllitinterp=1, with the caveat that backticks will now be escaped. This should be used with caution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-23806_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2022-23806] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "Curve.IsOnCurve in crypto/elliptic in Go before 1.16.14 and 1.17.x before 1.17.7 can incorrectly return true in situations with a big.Int value that is not a valid field element.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.1      | Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.16.14], [1.17.7]   |"
              },
              "properties": {
                "security-severity": "9.1"
              }
            },
            {
              "id": "CVE-2022-1292_3.15:libssl1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2022-1292] 3.15:libssl1.1 1.1.1n-r0"
              },
              "help": {
                "text": "The c_rehash script does not properly sanitise shell metacharacters to prevent command injection. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.3 (Affected 3.0.0,3.0.1,3.0.2). Fixed in OpenSSL 1.1.1o (Affected 1.1.1-1.1.1n). Fixed in OpenSSL 1.0.2ze (Affected 1.0.2-1.0.2zd).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.1.1o-r0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-2068_3.15:libcrypto1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2022-2068] 3.15:libcrypto1.1 1.1.1n-r0"
              },
              "help": {
                "text": "In addition to the c_rehash shell command injection identified in CVE-2022-1292, further circumstances where the c_rehash script does not properly sanitise shell metacharacters to prevent command injection were found by code review. When the CVE-2022-1292 was fixed it was not discovered that there are other places in the script where the file names of certificates being hashed were possibly passed to a command executed through the shell. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.4 (Affected 3.0.0,3.0.1,3.0.2,3.0.3). Fixed in OpenSSL 1.1.1p (Affected 1.1.1-1.1.1o). Fixed in OpenSSL 1.0.2zf (Affected 1.0.2-1.0.2ze).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.1.1p-r0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-38408_3.15:openssh-client-default_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2023-38408] 3.15:openssh-client-default 8.8_p1-r1"
              },
              "help": {
                "text": "The PKCS#11 feature in ssh-agent in OpenSSH before 9.3p2 has an insufficiently trustworthy search path, leading to remote code execution if an agent is forwarded to an attacker-controlled system. (Code in /usr/lib is not necessarily safe for loading into ssh-agent.) NOTE: this issue exists because of an incomplete fix for CVE-2016-10009.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Undetermined       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [9.1_p1-r4]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-38408_3.15:openssh-client-common_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2023-38408] 3.15:openssh-client-common 8.8_p1-r1"
              },
              "help": {
                "text": "The PKCS#11 feature in ssh-agent in OpenSSH before 9.3p2 has an insufficiently trustworthy search path, leading to remote code execution if an agent is forwarded to an attacker-controlled system. (Code in /usr/lib is not necessarily safe for loading into ssh-agent.) NOTE: this issue exists because of an incomplete fix for CVE-2016-10009.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Undetermined       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [9.1_p1-r4]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-38408_3.15:openssh-keygen_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2023-38408] 3.15:openssh-keygen 8.8_p1-r1"
              },
              "help": {
                "text": "The PKCS#11 feature in ssh-agent in OpenSSH before 9.3p2 has an insufficiently trustworthy search path, leading to remote code execution if an agent is forwarded to an attacker-controlled system. (Code in /usr/lib is not necessarily safe for loading into ssh-agent.) NOTE: this issue exists because of an incomplete fix for CVE-2016-10009.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Undetermined       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [9.1_p1-r4]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-41903_3.15:git_2.34.2-r0",
              "shortDescription": {
                "text": "[CVE-2022-41903] 3.15:git 2.34.2-r0"
              },
              "help": {
                "text": "Git is distributed revision control system. `git log` can display commits in an arbitrary format using its `--format` specifiers. This functionality is also exposed to `git archive` via the `export-subst` gitattribute. When processing the padding operators, there is a integer overflow in `pretty.c::format_and_pad_commit()` where a `size_t` is stored improperly as an `int`, and then added as an offset to a `memcpy()`. This overflow can be triggered directly by a user running a command which invokes the commit formatting machinery (e.g., `git log --format=...`). It may also be triggered indirectly through git archive via the export-subst mechanism, which expands format specifiers inside of files within the repository during a git archive. This integer overflow can result in arbitrary heap writes, which may result in arbitrary code execution. The problem has been patched in the versions published on 2023-01-17, going back to v2.30.7. Users are advised to upgrade. Users who are unable to upgrade should disable `git archive` in untrusted repositories. If you expose git archive via `git daemon`, disable it by running `git config --global daemon.uploadArch false`.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [2.34.6-r0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-23521_3.15:git_2.34.2-r0",
              "shortDescription": {
                "text": "[CVE-2022-23521] 3.15:git 2.34.2-r0"
              },
              "help": {
                "text": "Git is distributed revision control system. gitattributes are a mechanism to allow defining attributes for paths. These attributes can be defined by adding a `.gitattributes` file to the repository, which contains a set of file patterns and the attributes that should be set for paths matching this pattern. When parsing gitattributes, multiple integer overflows can occur when there is a huge number of path patterns, a huge number of attributes for a single pattern, or when the declared attribute names are huge. These overflows can be triggered via a crafted `.gitattributes` file that may be part of the commit history. Git silently splits lines longer than 2KB when parsing gitattributes from a file, but not when parsing them from the index. Consequentially, the failure mode depends on whether the file exists in the working tree, the index or both. This integer overflow can result in arbitrary heap reads and writes, which may result in remote code execution. The problem has been patched in the versions published on 2023-01-17, going back to v2.30.7. Users are advised to upgrade. There are no known workarounds for this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [2.34.6-r0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-32207_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-32207] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "When curl \u003c 7.84.0 saves cookies, alt-svc and hsts data to local files, it makes the operation atomic by finalizing the operation with a rename from a temporary name to the final target file name.In that rename operation, it might accidentally *widen* the permissions for the target file, leaving the updated file accessible to more users than intended.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [7.80.0-r2]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-48174_3.15:ssl_client_1.34.1-r5",
              "shortDescription": {
                "text": "[CVE-2022-48174] 3.15:ssl_client 1.34.1-r5"
              },
              "help": {
                "text": "There is a stack overflow vulnerability in ash.c:6030 in busybox before 1.35. In the environment of Internet of Vehicles, this vulnerability can be executed from command to arbitrary code execution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.36.1-r2]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-48174_3.15:busybox_1.34.1-r5",
              "shortDescription": {
                "text": "[CVE-2022-48174] 3.15:busybox 1.34.1-r5"
              },
              "help": {
                "text": "There is a stack overflow vulnerability in ash.c:6030 in busybox before 1.35. In the environment of Internet of Vehicles, this vulnerability can be executed from command to arbitrary code execution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.36.1-r2]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-28327_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2022-28327] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "The generic P-256 feature in crypto/elliptic in Go before 1.17.9 and 1.18.x before 1.18.1 allows a panic via long scalar input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.17.9], [1.18.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0216_3.15:libssl1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2023-0216] 3.15:libssl1.1 1.1.1n-r0"
              },
              "help": {
                "text": "An invalid pointer dereference on read can be triggered when an\napplication tries to load malformed PKCS7 data with the\nd2i_PKCS7(), d2i_PKCS7_bio() or d2i_PKCS7_fp() functions.\n\nThe result of the dereference is an application crash which could\nlead to a denial of service attack. The TLS implementation in OpenSSL\ndoes not call this function however third party applications might\ncall these functions on untrusted data.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-28131_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2022-28131] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "Uncontrolled recursion in Decoder.Skip in encoding/xml before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a deeply nested XML document.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-33196_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2021-33196] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "In archive/zip in Go before 1.15.13 and 1.16.x before 1.16.5, a crafted file count (in an archive's header) can cause a NewReader or OpenReader panic.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.15.13], [1.16.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-4450_3.15:libssl1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2022-4450] 3.15:libssl1.1 1.1.1n-r0"
              },
              "help": {
                "text": "The function PEM_read_bio_ex() reads a PEM file from a BIO and parses and\ndecodes the \"name\" (e.g. \"CERTIFICATE\"), any header data and the payload data.\nIf the function succeeds then the \"name_out\", \"header\" and \"data\" arguments are\npopulated with pointers to buffers containing the relevant decoded data. The\ncaller is responsible for freeing those buffers. It is possible to construct a\nPEM file that results in 0 bytes of payload data. In this case PEM_read_bio_ex()\nwill return a failure code but will populate the header argument with a pointer\nto a buffer that has already been freed. If the caller also frees this buffer\nthen a double free will occur. This will most likely lead to a crash. This\ncould be exploited by an attacker who has the ability to supply malicious PEM\nfiles for parsing to achieve a denial of service attack.\n\nThe functions PEM_read_bio() and PEM_read() are simple wrappers around\nPEM_read_bio_ex() and therefore these functions are also directly affected.\n\nThese functions are also called indirectly by a number of other OpenSSL\nfunctions including PEM_X509_INFO_read_bio_ex() and\nSSL_CTX_use_serverinfo_file() which are also vulnerable. Some OpenSSL internal\nuses of these functions are not vulnerable because the caller does not free the\nheader argument if PEM_read_bio_ex() returns a failure code. These locations\ninclude the PEM_read_bio_TYPE() functions as well as the decoders introduced in\nOpenSSL 3.0.\n\nThe OpenSSL asn1parse command line application is also impacted by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.1.1t-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45287_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2023-45287] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "Before Go 1.20, the RSA based TLS key exchanges used the math/big library, which is not constant time. RSA blinding was applied to prevent timing attacks, but analysis shows this may not have been fully effective. In particular it appears as if the removal of PKCS#1 padding may leak timing information, which in turn could be used to recover session key bits. In Go 1.20, the crypto/tls library switched to a fully constant time RSA implementation, which we do not believe exhibits any timing side channels.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.20.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30635_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2022-30635] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Uncontrolled recursion in Decoder.Decode in encoding/gob before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a message which contains deeply nested structures.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-32189_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2022-32189] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "A too-short encoded message can cause a panic in Float.GobDecode and Rat GobDecode in math/big in Go before 1.17.13 and 1.18.5, potentially allowing a denial of service.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.17.13], [1.18.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-39325_golang.org/x/net_0.0.0-20201110031124-69a78807bb2b",
              "shortDescription": {
                "text": "[CVE-2023-39325] golang.org/x/net 0.0.0-20201110031124-69a78807bb2b"
              },
              "help": {
                "text": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing. With the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection. This issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2. The default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24536_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2023-24536] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "Multipart form parsing can consume large amounts of CPU and memory when processing form inputs containing very large numbers of parts. This stems from several causes: 1. mime/multipart.Reader.ReadForm limits the total memory a parsed multipart form can consume. ReadForm can undercount the amount of memory consumed, leading it to accept larger inputs than intended. 2. Limiting total memory does not account for increased pressure on the garbage collector from large numbers of small allocations in forms with many parts. 3. ReadForm can allocate a large number of short-lived buffers, further increasing pressure on the garbage collector. The combination of these factors can permit an attacker to cause an program that parses multipart forms to consume large amounts of CPU and memory, potentially resulting in a denial of service. This affects programs that use mime/multipart.Reader.ReadForm, as well as form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. With fix, ReadForm now does a better job of estimating the memory consumption of parsed forms, and performs many fewer short-lived allocations. In addition, the fixed mime/multipart.Reader imposes the following limits on the size of parsed forms: 1. Forms parsed with ReadForm may contain no more than 1000 parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxparts=. 2. Form parts parsed with NextPart and NextRawPart may contain no more than 10,000 header fields. In addition, forms parsed with ReadForm may contain no more than 10,000 header fields across all parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxheaders=.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30633_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2022-30633] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "Uncontrolled recursion in Unmarshal in encoding/xml before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via unmarshalling an XML document into a Go struct which has a nested field that uses the 'any' field tag.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0217_3.15:libssl1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2023-0217] 3.15:libssl1.1 1.1.1n-r0"
              },
              "help": {
                "text": "An invalid pointer dereference on read can be triggered when an\napplication tries to check a malformed DSA public key by the\nEVP_PKEY_public_check() function. This will most likely lead\nto an application crash. This function can be called on public\nkeys supplied from untrusted sources which could allow an attacker\nto cause a denial of service attack.\n\nThe TLS implementation in OpenSSL does not call this function\nbut applications might call the function if there are additional\nsecurity requirements imposed by standards such as FIPS 140-3.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0286_3.15:libssl1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2023-0286] 3.15:libssl1.1 1.1.1n-r0"
              },
              "help": {
                "text": "There is a type confusion vulnerability relating to X.400 address processing\ninside an X.509 GeneralName. X.400 addresses were parsed as an ASN1_STRING but\nthe public structure definition for GENERAL_NAME incorrectly specified the type\nof the x400Address field as ASN1_TYPE. This field is subsequently interpreted by\nthe OpenSSL function GENERAL_NAME_cmp as an ASN1_TYPE rather than an\nASN1_STRING.\n\nWhen CRL checking is enabled (i.e. the application sets the\nX509_V_FLAG_CRL_CHECK flag), this vulnerability may allow an attacker to pass\narbitrary pointers to a memcmp call, enabling them to read memory contents or\nenact a denial of service. In most cases, the attack requires the attacker to\nprovide both the certificate chain and CRL, neither of which need to have a\nvalid signature. If the attacker only controls one of these inputs, the other\ninput must already contain an X.400 address as a CRL distribution point, which\nis uncommon. As such, this vulnerability is most likely to only affect\napplications which have implemented their own functionality for retrieving CRLs\nover a network.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.4      | Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.1.1t-r0]   |"
              },
              "properties": {
                "security-severity": "7.4"
              }
            },
            {
              "id": "CVE-2022-30635_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2022-30635] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "Uncontrolled recursion in Decoder.Decode in encoding/gob before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a message which contains deeply nested structures.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-39293_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2021-39293] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "In archive/zip in Go before 1.16.8 and 1.17.x before 1.17.1, a crafted archive header (falsely designating that many files are present) can cause a NewReader or OpenReader panic. NOTE: this issue exists because of an incomplete fix for CVE-2021-33196.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.16.8], [1.17.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-44487_google.golang.org/grpc_1.27.0",
              "shortDescription": {
                "text": "[CVE-2023-44487] google.golang.org/grpc 1.27.0"
              },
              "help": {
                "text": "The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.56.3], [1.57.1], [1.58.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-23772_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2022-23772] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "Rat.SetString in math/big in Go before 1.16.14 and 1.17.x before 1.17.7 has an overflow that can lead to Uncontrolled Memory Consumption.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.16.14], [1.17.7]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41725_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2022-41725] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "A denial of service is possible from excessive resource consumption in net/http and mime/multipart. Multipart form parsing with mime/multipart.Reader.ReadForm can consume largely unlimited amounts of memory and disk files. This also affects form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. ReadForm takes a maxMemory parameter, and is documented as storing \"up to maxMemory bytes +10MB (reserved for non-file parts) in memory\". File parts which cannot be stored in memory are stored on disk in temporary files. The unconfigurable 10MB reserved for non-file parts is excessively large and can potentially open a denial of service vector on its own. However, ReadForm did not properly account for all memory consumed by a parsed form, such as map entry overhead, part names, and MIME headers, permitting a maliciously crafted form to consume well over 10MB. In addition, ReadForm contained no limit on the number of disk files created, permitting a relatively small request body to create a large number of disk temporary files. With fix, ReadForm now properly accounts for various forms of memory overhead, and should now stay within its documented limit of 10MB + maxMemory bytes of memory consumption. Users should still be aware that this limit is high and may still be hazardous. In addition, ReadForm now creates at most one on-disk temporary file, combining multiple form parts into a single temporary file. The mime/multipart.File interface type's documentation states, \"If stored on disk, the File's underlying concrete type will be an *os.File.\". This is no longer the case when a form contains more than one file part, due to this coalescing of parts into a single file. The previous behavior of using distinct files for each form part may be reenabled with the environment variable GODEBUG=multipartfiles=distinct. Users should be aware that multipart.ReadForm and the http.Request methods that call it do not limit the amount of disk consumed by temporary ...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-29400_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2023-29400] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "Templates containing actions in unquoted HTML attributes (e.g. \"attr={{.}}\") executed with empty input can result in output with unexpected results when parsed due to HTML normalization rules. This may allow injection of arbitrary attributes into tags.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.3      | Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2023-39325_golang.org/x/net_0.0.0-20220127200216-cd36cc0744dd",
              "shortDescription": {
                "text": "[CVE-2023-39325] golang.org/x/net 0.0.0-20220127200216-cd36cc0744dd"
              },
              "help": {
                "text": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing. With the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection. This issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2. The default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0286_3.15:libcrypto1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2023-0286] 3.15:libcrypto1.1 1.1.1n-r0"
              },
              "help": {
                "text": "There is a type confusion vulnerability relating to X.400 address processing\ninside an X.509 GeneralName. X.400 addresses were parsed as an ASN1_STRING but\nthe public structure definition for GENERAL_NAME incorrectly specified the type\nof the x400Address field as ASN1_TYPE. This field is subsequently interpreted by\nthe OpenSSL function GENERAL_NAME_cmp as an ASN1_TYPE rather than an\nASN1_STRING.\n\nWhen CRL checking is enabled (i.e. the application sets the\nX509_V_FLAG_CRL_CHECK flag), this vulnerability may allow an attacker to pass\narbitrary pointers to a memcmp call, enabling them to read memory contents or\nenact a denial of service. In most cases, the attack requires the attacker to\nprovide both the certificate chain and CRL, neither of which need to have a\nvalid signature. If the attacker only controls one of these inputs, the other\ninput must already contain an X.400 address as a CRL distribution point, which\nis uncommon. As such, this vulnerability is most likely to only affect\napplications which have implemented their own functionality for retrieving CRLs\nover a network.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.4      | Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.1.1t-r0]   |"
              },
              "properties": {
                "security-severity": "7.4"
              }
            },
            {
              "id": "CVE-2023-0215_3.15:libcrypto1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2023-0215] 3.15:libcrypto1.1 1.1.1n-r0"
              },
              "help": {
                "text": "The public API function BIO_new_NDEF is a helper function used for streaming\nASN.1 data via a BIO. It is primarily used internally to OpenSSL to support the\nSMIME, CMS and PKCS7 streaming capabilities, but may also be called directly by\nend user applications.\n\nThe function receives a BIO from the caller, prepends a new BIO_f_asn1 filter\nBIO onto the front of it to form a BIO chain, and then returns the new head of\nthe BIO chain to the caller. Under certain conditions, for example if a CMS\nrecipient public key is invalid, the new filter BIO is freed and the function\nreturns a NULL result indicating a failure. However, in this case, the BIO chain\nis not properly cleaned up and the BIO passed by the caller still retains\ninternal pointers to the previously freed filter BIO. If the caller then goes on\nto call BIO_pop() on the BIO then a use-after-free will occur. This will most\nlikely result in a crash.\n\n\n\nThis scenario occurs directly in the internal function B64_write_ASN1() which\nmay cause BIO_new_NDEF() to be called and will subsequently call BIO_pop() on\nthe BIO. This internal function is in turn called by the public API functions\nPEM_write_bio_ASN1_stream, PEM_write_bio_CMS_stream, PEM_write_bio_PKCS7_stream,\nSMIME_write_ASN1, SMIME_write_CMS and SMIME_write_PKCS7.\n\nOther public API functions that may be impacted by this include\ni2d_ASN1_bio_stream, BIO_new_CMS, BIO_new_PKCS7, i2d_CMS_bio_stream and\ni2d_PKCS7_bio_stream.\n\nThe OpenSSL cms and smime command line applications are similarly affected.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.1.1t-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-24921_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2022-24921] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "regexp.Compile in Go before 1.16.15 and 1.17.x before 1.17.8 allows stack exhaustion via a deeply nested expression.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.16.15], [1.17.8]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-32189_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2022-32189] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "A too-short encoded message can cause a panic in Float.GobDecode and Rat GobDecode in math/big in Go before 1.17.13 and 1.18.5, potentially allowing a denial of service.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.17.13], [1.18.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-28948_gopkg.in/yaml.v3_3.0.0-20200313102051-9f266ea9e77c",
              "shortDescription": {
                "text": "[CVE-2022-28948] gopkg.in/yaml.v3 3.0.0-20200313102051-9f266ea9e77c"
              },
              "help": {
                "text": "An issue in the Unmarshal function in Go-Yaml v3 causes the program to crash when attempting to deserialize invalid input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [3.0.0-20220521103104-8f96da9f5d5e]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-40674_3.15:expat_2.4.7-r0",
              "shortDescription": {
                "text": "[CVE-2022-40674] 3.15:expat 2.4.7-r0"
              },
              "help": {
                "text": "libexpat before 2.4.9 has a use-after-free in the doContent function in xmlparse.c.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [2.4.9-r0]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2022-21698_github.com/prometheus/client_golang_1.11.0",
              "shortDescription": {
                "text": "[CVE-2022-21698] github.com/prometheus/client_golang 1.11.0"
              },
              "help": {
                "text": "client_golang is the instrumentation library for Go applications in Prometheus, and the promhttp package in client_golang provides tooling around HTTP servers and clients. In client_golang prior to version 1.11.1, HTTP server is susceptible to a Denial of Service through unbounded cardinality, and potential memory exhaustion, when handling requests with non-standard HTTP methods. In order to be affected, an instrumented software must use any of `promhttp.InstrumentHandler*` middleware except `RequestsInFlight`; not filter any specific methods (e.g GET) before middleware; pass metric with `method` label name to our middleware; and not have any firewall/LB/proxy that filters away requests with unknown `method`. client_golang version 1.11.1 contains a patch for this issue. Several workarounds are available, including removing the `method` label name from counter/gauge used in the InstrumentHandler; turning off affected promhttp handlers; adding custom middleware before promhttp handler that will sanitize the request method given by Go http.Request; and using a reverse proxy or web application firewall, configured to only allow a limited set of methods.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.11.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-23772_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2022-23772] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Rat.SetString in math/big in Go before 1.16.14 and 1.17.x before 1.17.7 has an overflow that can lead to Uncontrolled Memory Consumption.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.16.14], [1.17.7]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30632_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2022-30632] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "Uncontrolled recursion in Glob in path/filepath before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a path containing a large number of path separators.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-28131_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2022-28131] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "Uncontrolled recursion in Decoder.Skip in encoding/xml before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a deeply nested XML document.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-28327_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2022-28327] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "The generic P-256 feature in crypto/elliptic in Go before 1.17.9 and 1.18.x before 1.18.1 allows a panic via long scalar input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.17.9], [1.18.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-44487_golang.org/x/net_0.0.0-20201110031124-69a78807bb2b",
              "shortDescription": {
                "text": "[CVE-2023-44487] golang.org/x/net 0.0.0-20201110031124-69a78807bb2b"
              },
              "help": {
                "text": "The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-44487_golang.org/x/net_0.0.0-20220127200216-cd36cc0744dd",
              "shortDescription": {
                "text": "[CVE-2023-44487] golang.org/x/net 0.0.0-20220127200216-cd36cc0744dd"
              },
              "help": {
                "text": "The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-28327_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2022-28327] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "The generic P-256 feature in crypto/elliptic in Go before 1.17.9 and 1.18.x before 1.18.1 allows a panic via long scalar input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.17.9], [1.18.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-24675_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2022-24675] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "encoding/pem in Go before 1.17.9 and 1.18.x before 1.18.1 has a Decode stack overflow via a large amount of PEM data.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.17.9], [1.18.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24536_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2023-24536] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "Multipart form parsing can consume large amounts of CPU and memory when processing form inputs containing very large numbers of parts. This stems from several causes: 1. mime/multipart.Reader.ReadForm limits the total memory a parsed multipart form can consume. ReadForm can undercount the amount of memory consumed, leading it to accept larger inputs than intended. 2. Limiting total memory does not account for increased pressure on the garbage collector from large numbers of small allocations in forms with many parts. 3. ReadForm can allocate a large number of short-lived buffers, further increasing pressure on the garbage collector. The combination of these factors can permit an attacker to cause an program that parses multipart forms to consume large amounts of CPU and memory, potentially resulting in a denial of service. This affects programs that use mime/multipart.Reader.ReadForm, as well as form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. With fix, ReadForm now does a better job of estimating the memory consumption of parsed forms, and performs many fewer short-lived allocations. In addition, the fixed mime/multipart.Reader imposes the following limits on the size of parsed forms: 1. Forms parsed with ReadForm may contain no more than 1000 parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxparts=. 2. Form parts parsed with NextPart and NextRawPart may contain no more than 10,000 header fields. In addition, forms parsed with ReadForm may contain no more than 10,000 header fields across all parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxheaders=.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-24675_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2022-24675] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "encoding/pem in Go before 1.17.9 and 1.18.x before 1.18.1 has a Decode stack overflow via a large amount of PEM data.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.17.9], [1.18.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-29400_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2023-29400] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "Templates containing actions in unquoted HTML attributes (e.g. \"attr={{.}}\") executed with empty input can result in output with unexpected results when parsed due to HTML normalization rules. This may allow injection of arbitrary attributes into tags.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.3      | Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2023-24539_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2023-24539] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "Angle brackets (\u003c\u003e) are not considered dangerous characters when inserted into CSS contexts. Templates containing multiple actions separated by a '/' character can result in unexpectedly closing the CSS context and allowing for injection of unexpected HTML, if executed with untrusted input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.3      | Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2023-0217_3.15:libcrypto1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2023-0217] 3.15:libcrypto1.1 1.1.1n-r0"
              },
              "help": {
                "text": "An invalid pointer dereference on read can be triggered when an\napplication tries to check a malformed DSA public key by the\nEVP_PKEY_public_check() function. This will most likely lead\nto an application crash. This function can be called on public\nkeys supplied from untrusted sources which could allow an attacker\nto cause a denial of service attack.\n\nThe TLS implementation in OpenSSL does not call this function\nbut applications might call the function if there are additional\nsecurity requirements imposed by standards such as FIPS 140-3.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30633_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2022-30633] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "Uncontrolled recursion in Unmarshal in encoding/xml before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via unmarshalling an XML document into a Go struct which has a nested field that uses the 'any' field tag.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24539_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2023-24539] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "Angle brackets (\u003c\u003e) are not considered dangerous characters when inserted into CSS contexts. Templates containing multiple actions separated by a '/' character can result in unexpectedly closing the CSS context and allowing for injection of unexpected HTML, if executed with untrusted input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.3      | Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2022-28131_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2022-28131] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "Uncontrolled recursion in Decoder.Skip in encoding/xml before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a deeply nested XML document.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30632_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2022-30632] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Uncontrolled recursion in Glob in path/filepath before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a path containing a large number of path separators.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-27664_golang.org/x/net_0.0.0-20200625001655-4c5254603344",
              "shortDescription": {
                "text": "[CVE-2022-27664] golang.org/x/net 0.0.0-20200625001655-4c5254603344"
              },
              "help": {
                "text": "In net/http in Go before 1.18.6 and 1.19.x before 1.19.1, attackers can cause a denial of service because an HTTP/2 connection can hang during closing if shutdown were preempted by a fatal error.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [0.0.0-20220906165146-f3363e06e74c]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-32189_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2022-32189] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "A too-short encoded message can cause a panic in Float.GobDecode and Rat GobDecode in math/big in Go before 1.17.13 and 1.18.5, potentially allowing a denial of service.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.17.13], [1.18.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-29482_github.com/ulikunitz/xz_0.5.5",
              "shortDescription": {
                "text": "[CVE-2021-29482] github.com/ulikunitz/xz 0.5.5"
              },
              "help": {
                "text": "xz is a compression and decompression library focusing on the xz format completely written in Go. The function readUvarint used to read the xz container format may not terminate a loop provide malicous input. The problem has been fixed in release v0.5.8. As a workaround users can limit the size of the compressed file input to a reasonable size for their use case. The standard library had recently the same issue and got the CVE-2020-16845 allocated.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [0.5.8]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-3602_3.15:libcrypto1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2022-3602] 3.15:libcrypto1.1 1.1.1n-r0"
              },
              "help": {
                "text": "A buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed the malicious certificate or for the application to continue certificate verification despite failure to construct a path to a trusted issuer. An attacker can craft a malicious email address to overflow four attacker-controlled bytes on the stack. This buffer overflow could result in a crash (causing a denial of service) or potentially remote code execution. Many platforms implement stack overflow protections which would mitigate against the risk of remote code execution. The risk may be further mitigated based on stack layout for any given platform/compiler. Pre-announcements of CVE-2022-3602 described this issue as CRITICAL. Further analysis based on some of the mitigating factors described above have led this to be downgraded to HIGH. Users are still encouraged to upgrade to a new version as soon as possible. In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects. Fixed in OpenSSL 3.0.7 (Affected 3.0.0,3.0.1,3.0.2,3.0.3,3.0.4,3.0.5,3.0.6).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [3.0.7-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-2879_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2022-2879] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "Reader.Read does not set a limit on the maximum size of file headers. A maliciously crafted archive could cause Read to allocate unbounded amounts of memory, potentially causing resource exhaustion or panics. After fix, Reader.Read limits the maximum size of header blocks to 1 MiB.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.18.7], [1.19.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-24675_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2022-24675] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "encoding/pem in Go before 1.17.9 and 1.18.x before 1.18.1 has a Decode stack overflow via a large amount of PEM data.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.17.9], [1.18.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45287_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2023-45287] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "Before Go 1.20, the RSA based TLS key exchanges used the math/big library, which is not constant time. RSA blinding was applied to prevent timing attacks, but analysis shows this may not have been fully effective. In particular it appears as if the removal of PKCS#1 padding may leak timing information, which in turn could be used to recover session key bits. In Go 1.20, the crypto/tls library switched to a fully constant time RSA implementation, which we do not believe exhibits any timing side channels.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.20.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-24921_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2022-24921] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "regexp.Compile in Go before 1.16.15 and 1.17.x before 1.17.8 allows stack exhaustion via a deeply nested expression.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.16.15], [1.17.8]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24534_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2023-24534] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "HTTP and MIME header parsing can allocate large amounts of memory, even when parsing small inputs, potentially leading to a denial of service. Certain unusual patterns of input data can cause the common function used to parse HTTP and MIME headers to allocate substantially more memory than required to hold the parsed headers. An attacker can exploit this behavior to cause an HTTP server to allocate large amounts of memory from a small request, potentially leading to memory exhaustion and a denial of service. With fix, header parsing now correctly allocates only the memory required to hold parsed headers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30631_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2022-30631] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Uncontrolled recursion in Reader.Read in compress/gzip before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via an archive containing a large number of concatenated 0-length compressed files.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-28948_gopkg.in/yaml.v3_3.0.0-20210107172259-749611fa9fcc",
              "shortDescription": {
                "text": "[CVE-2022-28948] gopkg.in/yaml.v3 3.0.0-20210107172259-749611fa9fcc"
              },
              "help": {
                "text": "An issue in the Unmarshal function in Go-Yaml v3 causes the program to crash when attempting to deserialize invalid input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [3.0.0-20220521103104-8f96da9f5d5e]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-27664_golang.org/x/net_0.0.0-20220127200216-cd36cc0744dd",
              "shortDescription": {
                "text": "[CVE-2022-27664] golang.org/x/net 0.0.0-20220127200216-cd36cc0744dd"
              },
              "help": {
                "text": "In net/http in Go before 1.18.6 and 1.19.x before 1.19.1, attackers can cause a denial of service because an HTTP/2 connection can hang during closing if shutdown were preempted by a fatal error.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [0.0.0-20220906165146-f3363e06e74c]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30631_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2022-30631] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "Uncontrolled recursion in Reader.Read in compress/gzip before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via an archive containing a large number of concatenated 0-length compressed files.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0215_3.15:libssl1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2023-0215] 3.15:libssl1.1 1.1.1n-r0"
              },
              "help": {
                "text": "The public API function BIO_new_NDEF is a helper function used for streaming\nASN.1 data via a BIO. It is primarily used internally to OpenSSL to support the\nSMIME, CMS and PKCS7 streaming capabilities, but may also be called directly by\nend user applications.\n\nThe function receives a BIO from the caller, prepends a new BIO_f_asn1 filter\nBIO onto the front of it to form a BIO chain, and then returns the new head of\nthe BIO chain to the caller. Under certain conditions, for example if a CMS\nrecipient public key is invalid, the new filter BIO is freed and the function\nreturns a NULL result indicating a failure. However, in this case, the BIO chain\nis not properly cleaned up and the BIO passed by the caller still retains\ninternal pointers to the previously freed filter BIO. If the caller then goes on\nto call BIO_pop() on the BIO then a use-after-free will occur. This will most\nlikely result in a crash.\n\n\n\nThis scenario occurs directly in the internal function B64_write_ASN1() which\nmay cause BIO_new_NDEF() to be called and will subsequently call BIO_pop() on\nthe BIO. This internal function is in turn called by the public API functions\nPEM_write_bio_ASN1_stream, PEM_write_bio_CMS_stream, PEM_write_bio_PKCS7_stream,\nSMIME_write_ASN1, SMIME_write_CMS and SMIME_write_PKCS7.\n\nOther public API functions that may be impacted by this include\ni2d_ASN1_bio_stream, BIO_new_CMS, BIO_new_PKCS7, i2d_CMS_bio_stream and\ni2d_PKCS7_bio_stream.\n\nThe OpenSSL cms and smime command line applications are similarly affected.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.1.1t-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-32189_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2022-32189] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "A too-short encoded message can cause a panic in Float.GobDecode and Rat GobDecode in math/big in Go before 1.17.13 and 1.18.5, potentially allowing a denial of service.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.17.13], [1.18.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45287_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2023-45287] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Before Go 1.20, the RSA based TLS key exchanges used the math/big library, which is not constant time. RSA blinding was applied to prevent timing attacks, but analysis shows this may not have been fully effective. In particular it appears as if the removal of PKCS#1 padding may leak timing information, which in turn could be used to recover session key bits. In Go 1.20, the crypto/tls library switched to a fully constant time RSA implementation, which we do not believe exhibits any timing side channels.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.20.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-27918_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2021-27918] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "encoding/xml in Go before 1.15.9 and 1.16.x before 1.16.1 has an infinite loop if a custom TokenReader (for xml.NewTokenDecoder) returns EOF in the middle of an element. This can occur in the Decode, DecodeElement, or Skip method.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.15.9], [1.16.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-44487_google.golang.org/grpc_1.43.0",
              "shortDescription": {
                "text": "[CVE-2023-44487] google.golang.org/grpc 1.43.0"
              },
              "help": {
                "text": "The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.56.3], [1.57.1], [1.58.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-2879_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2022-2879] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "Reader.Read does not set a limit on the maximum size of file headers. A maliciously crafted archive could cause Read to allocate unbounded amounts of memory, potentially causing resource exhaustion or panics. After fix, Reader.Read limits the maximum size of header blocks to 1 MiB.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.18.7], [1.19.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-24675_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2022-24675] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "encoding/pem in Go before 1.17.9 and 1.18.x before 1.18.1 has a Decode stack overflow via a large amount of PEM data.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.17.9], [1.18.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0216_3.15:libcrypto1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2023-0216] 3.15:libcrypto1.1 1.1.1n-r0"
              },
              "help": {
                "text": "An invalid pointer dereference on read can be triggered when an\napplication tries to load malformed PKCS7 data with the\nd2i_PKCS7(), d2i_PKCS7_bio() or d2i_PKCS7_fp() functions.\n\nThe result of the dereference is an application crash which could\nlead to a denial of service attack. The TLS implementation in OpenSSL\ndoes not call this function however third party applications might\ncall these functions on untrusted data.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24539_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2023-24539] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "Angle brackets (\u003c\u003e) are not considered dangerous characters when inserted into CSS contexts. Templates containing multiple actions separated by a '/' character can result in unexpectedly closing the CSS context and allowing for injection of unexpected HTML, if executed with untrusted input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.3      | Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2022-4450_3.15:libcrypto1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2022-4450] 3.15:libcrypto1.1 1.1.1n-r0"
              },
              "help": {
                "text": "The function PEM_read_bio_ex() reads a PEM file from a BIO and parses and\ndecodes the \"name\" (e.g. \"CERTIFICATE\"), any header data and the payload data.\nIf the function succeeds then the \"name_out\", \"header\" and \"data\" arguments are\npopulated with pointers to buffers containing the relevant decoded data. The\ncaller is responsible for freeing those buffers. It is possible to construct a\nPEM file that results in 0 bytes of payload data. In this case PEM_read_bio_ex()\nwill return a failure code but will populate the header argument with a pointer\nto a buffer that has already been freed. If the caller also frees this buffer\nthen a double free will occur. This will most likely lead to a crash. This\ncould be exploited by an attacker who has the ability to supply malicious PEM\nfiles for parsing to achieve a denial of service attack.\n\nThe functions PEM_read_bio() and PEM_read() are simple wrappers around\nPEM_read_bio_ex() and therefore these functions are also directly affected.\n\nThese functions are also called indirectly by a number of other OpenSSL\nfunctions including PEM_X509_INFO_read_bio_ex() and\nSSL_CTX_use_serverinfo_file() which are also vulnerable. Some OpenSSL internal\nuses of these functions are not vulnerable because the caller does not free the\nheader argument if PEM_read_bio_ex() returns a failure code. These locations\ninclude the PEM_read_bio_TYPE() functions as well as the decoders introduced in\nOpenSSL 3.0.\n\nThe OpenSSL asn1parse command line application is also impacted by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.1.1t-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-27782_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-27782] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "libcurl would reuse a previously created connection even when a TLS or SSHrelated option had been changed that should have prohibited reuse.libcurl keeps previously used connections in a connection pool for subsequenttransfers to reuse if one of them matches the setup. However, several TLS andSSH settings were left out from the configuration match checks, making themmatch too easily.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [7.80.0-r2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41723_golang.org/x/net_0.0.0-20200625001655-4c5254603344",
              "shortDescription": {
                "text": "[CVE-2022-41723] golang.org/x/net 0.0.0-20200625001655-4c5254603344"
              },
              "help": {
                "text": "A maliciously crafted HTTP/2 stream could cause excessive CPU consumption in the HPACK decoder, sufficient to cause a denial of service from a small number of small requests.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [0.7.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0401_3.15:libssl1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2023-0401] 3.15:libssl1.1 1.1.1n-r0"
              },
              "help": {
                "text": "A NULL pointer can be dereferenced when signatures are being\nverified on PKCS7 signed or signedAndEnveloped data. In case the hash\nalgorithm used for the signature is known to the OpenSSL library but\nthe implementation of the hash algorithm is not available the digest\ninitialization will fail. There is a missing check for the return\nvalue from the initialization function which later leads to invalid\nusage of the digest API most likely leading to a crash.\n\nThe unavailability of an algorithm can be caused by using FIPS\nenabled configuration of providers or more commonly by not loading\nthe legacy provider.\n\nPKCS7 data is processed by the SMIME library calls and also by the\ntime stamp (TS) library calls. The TLS implementation in OpenSSL does\nnot call these functions however third party applications would be\naffected if they call these functions to verify signatures on untrusted\ndata.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-39325_golang.org/x/net_0.0.0-20200625001655-4c5254603344",
              "shortDescription": {
                "text": "[CVE-2023-39325] golang.org/x/net 0.0.0-20200625001655-4c5254603344"
              },
              "help": {
                "text": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing. With the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection. This issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2. The default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-2879_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2022-2879] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "Reader.Read does not set a limit on the maximum size of file headers. A maliciously crafted archive could cause Read to allocate unbounded amounts of memory, potentially causing resource exhaustion or panics. After fix, Reader.Read limits the maximum size of header blocks to 1 MiB.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.18.7], [1.19.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-27664_golang.org/x/net_0.0.0-20201110031124-69a78807bb2b",
              "shortDescription": {
                "text": "[CVE-2022-27664] golang.org/x/net 0.0.0-20201110031124-69a78807bb2b"
              },
              "help": {
                "text": "In net/http in Go before 1.18.6 and 1.19.x before 1.19.1, attackers can cause a denial of service because an HTTP/2 connection can hang during closing if shutdown were preempted by a fatal error.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [0.0.0-20220906165146-f3363e06e74c]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-43680_3.15:expat_2.4.7-r0",
              "shortDescription": {
                "text": "[CVE-2022-43680] 3.15:expat 2.4.7-r0"
              },
              "help": {
                "text": "In libexpat through 2.4.9, there is a use-after free caused by overeager destruction of a shared DTD in XML_ExternalEntityParserCreate in out-of-memory situations.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [2.5.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41723_golang.org/x/net_0.0.0-20201110031124-69a78807bb2b",
              "shortDescription": {
                "text": "[CVE-2022-41723] golang.org/x/net 0.0.0-20201110031124-69a78807bb2b"
              },
              "help": {
                "text": "A maliciously crafted HTTP/2 stream could cause excessive CPU consumption in the HPACK decoder, sufficient to cause a denial of service from a small number of small requests.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [0.7.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41723_golang.org/x/net_0.0.0-20220127200216-cd36cc0744dd",
              "shortDescription": {
                "text": "[CVE-2022-41723] golang.org/x/net 0.0.0-20220127200216-cd36cc0744dd"
              },
              "help": {
                "text": "A maliciously crafted HTTP/2 stream could cause excessive CPU consumption in the HPACK decoder, sufficient to cause a denial of service from a small number of small requests.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [0.7.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24539_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2023-24539] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Angle brackets (\u003c\u003e) are not considered dangerous characters when inserted into CSS contexts. Templates containing multiple actions separated by a '/' character can result in unexpectedly closing the CSS context and allowing for injection of unexpected HTML, if executed with untrusted input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.3      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2022-3602_3.15:libssl1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2022-3602] 3.15:libssl1.1 1.1.1n-r0"
              },
              "help": {
                "text": "A buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed the malicious certificate or for the application to continue certificate verification despite failure to construct a path to a trusted issuer. An attacker can craft a malicious email address to overflow four attacker-controlled bytes on the stack. This buffer overflow could result in a crash (causing a denial of service) or potentially remote code execution. Many platforms implement stack overflow protections which would mitigate against the risk of remote code execution. The risk may be further mitigated based on stack layout for any given platform/compiler. Pre-announcements of CVE-2022-3602 described this issue as CRITICAL. Further analysis based on some of the mitigating factors described above have led this to be downgraded to HIGH. Users are still encouraged to upgrade to a new version as soon as possible. In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects. Fixed in OpenSSL 3.0.7 (Affected 3.0.0,3.0.1,3.0.2,3.0.3,3.0.4,3.0.5,3.0.6).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [3.0.7-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30632_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2022-30632] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "Uncontrolled recursion in Glob in path/filepath before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a path containing a large number of path separators.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0464_3.15:libssl1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2023-0464] 3.15:libssl1.1 1.1.1n-r0"
              },
              "help": {
                "text": "A security vulnerability has been identified in all supported versions\n\nof OpenSSL related to the verification of X.509 certificate chains\nthat include policy constraints.  Attackers may be able to exploit this\nvulnerability by creating a malicious certificate chain that triggers\nexponential use of computational resources, leading to a denial-of-service\n(DoS) attack on affected systems.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.1.1t-r2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-33195_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2021-33195] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Go before 1.15.13 and 1.16.x before 1.16.5 has functions for DNS lookups that do not validate replies from DNS servers, and thus a return value may contain an unsafe injection (e.g., XSS) that does not conform to the RFC1035 format.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.3      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.15.13], [1.16.5]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2022-30633_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2022-30633] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Uncontrolled recursion in Unmarshal in encoding/xml before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via unmarshalling an XML document into a Go struct which has a nested field that uses the 'any' field tag.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24534_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2023-24534] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "HTTP and MIME header parsing can allocate large amounts of memory, even when parsing small inputs, potentially leading to a denial of service. Certain unusual patterns of input data can cause the common function used to parse HTTP and MIME headers to allocate substantially more memory than required to hold the parsed headers. An attacker can exploit this behavior to cause an HTTP server to allocate large amounts of memory from a small request, potentially leading to memory exhaustion and a denial of service. With fix, header parsing now correctly allocates only the memory required to hold parsed headers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-29400_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2023-29400] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Templates containing actions in unquoted HTML attributes (e.g. \"attr={{.}}\") executed with empty input can result in output with unexpected results when parsed due to HTML normalization rules. This may allow injection of arbitrary attributes into tags.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.3      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2022-28948_gopkg.in/yaml.v3_3.0.0-20210107192922-496545a6307b",
              "shortDescription": {
                "text": "[CVE-2022-28948] gopkg.in/yaml.v3 3.0.0-20210107192922-496545a6307b"
              },
              "help": {
                "text": "An issue in the Unmarshal function in Go-Yaml v3 causes the program to crash when attempting to deserialize invalid input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [3.0.0-20220521103104-8f96da9f5d5e]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-24921_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2022-24921] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "regexp.Compile in Go before 1.16.15 and 1.17.x before 1.17.8 allows stack exhaustion via a deeply nested expression.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.16.15], [1.17.8]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30633_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2022-30633] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "Uncontrolled recursion in Unmarshal in encoding/xml before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via unmarshalling an XML document into a Go struct which has a nested field that uses the 'any' field tag.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-28131_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2022-28131] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Uncontrolled recursion in Decoder.Skip in encoding/xml before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a deeply nested XML document.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24536_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2023-24536] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Multipart form parsing can consume large amounts of CPU and memory when processing form inputs containing very large numbers of parts. This stems from several causes: 1. mime/multipart.Reader.ReadForm limits the total memory a parsed multipart form can consume. ReadForm can undercount the amount of memory consumed, leading it to accept larger inputs than intended. 2. Limiting total memory does not account for increased pressure on the garbage collector from large numbers of small allocations in forms with many parts. 3. ReadForm can allocate a large number of short-lived buffers, further increasing pressure on the garbage collector. The combination of these factors can permit an attacker to cause an program that parses multipart forms to consume large amounts of CPU and memory, potentially resulting in a denial of service. This affects programs that use mime/multipart.Reader.ReadForm, as well as form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. With fix, ReadForm now does a better job of estimating the memory consumption of parsed forms, and performs many fewer short-lived allocations. In addition, the fixed mime/multipart.Reader imposes the following limits on the size of parsed forms: 1. Forms parsed with ReadForm may contain no more than 1000 parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxparts=. 2. Form parts parsed with NextPart and NextRawPart may contain no more than 10,000 header fields. In addition, forms parsed with ReadForm may contain no more than 10,000 header fields across all parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxheaders=.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41725_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2022-41725] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "A denial of service is possible from excessive resource consumption in net/http and mime/multipart. Multipart form parsing with mime/multipart.Reader.ReadForm can consume largely unlimited amounts of memory and disk files. This also affects form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. ReadForm takes a maxMemory parameter, and is documented as storing \"up to maxMemory bytes +10MB (reserved for non-file parts) in memory\". File parts which cannot be stored in memory are stored on disk in temporary files. The unconfigurable 10MB reserved for non-file parts is excessively large and can potentially open a denial of service vector on its own. However, ReadForm did not properly account for all memory consumed by a parsed form, such as map entry overhead, part names, and MIME headers, permitting a maliciously crafted form to consume well over 10MB. In addition, ReadForm contained no limit on the number of disk files created, permitting a relatively small request body to create a large number of disk temporary files. With fix, ReadForm now properly accounts for various forms of memory overhead, and should now stay within its documented limit of 10MB + maxMemory bytes of memory consumption. Users should still be aware that this limit is high and may still be hazardous. In addition, ReadForm now creates at most one on-disk temporary file, combining multiple form parts into a single temporary file. The mime/multipart.File interface type's documentation states, \"If stored on disk, the File's underlying concrete type will be an *os.File.\". This is no longer the case when a form contains more than one file part, due to this coalescing of parts into a single file. The previous behavior of using distinct files for each form part may be reenabled with the environment variable GODEBUG=multipartfiles=distinct. Users should be aware that multipart.ReadForm and the http.Request methods that call it do not limit the amount of disk consumed by temporary ...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0464_3.15:libcrypto1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2023-0464] 3.15:libcrypto1.1 1.1.1n-r0"
              },
              "help": {
                "text": "A security vulnerability has been identified in all supported versions\n\nof OpenSSL related to the verification of X.509 certificate chains\nthat include policy constraints.  Attackers may be able to exploit this\nvulnerability by creating a malicious certificate chain that triggers\nexponential use of computational resources, leading to a denial-of-service\n(DoS) attack on affected systems.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.1.1t-r2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24536_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2023-24536] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "Multipart form parsing can consume large amounts of CPU and memory when processing form inputs containing very large numbers of parts. This stems from several causes: 1. mime/multipart.Reader.ReadForm limits the total memory a parsed multipart form can consume. ReadForm can undercount the amount of memory consumed, leading it to accept larger inputs than intended. 2. Limiting total memory does not account for increased pressure on the garbage collector from large numbers of small allocations in forms with many parts. 3. ReadForm can allocate a large number of short-lived buffers, further increasing pressure on the garbage collector. The combination of these factors can permit an attacker to cause an program that parses multipart forms to consume large amounts of CPU and memory, potentially resulting in a denial of service. This affects programs that use mime/multipart.Reader.ReadForm, as well as form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. With fix, ReadForm now does a better job of estimating the memory consumption of parsed forms, and performs many fewer short-lived allocations. In addition, the fixed mime/multipart.Reader imposes the following limits on the size of parsed forms: 1. Forms parsed with ReadForm may contain no more than 1000 parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxparts=. 2. Form parts parsed with NextPart and NextRawPart may contain no more than 10,000 header fields. In addition, forms parsed with ReadForm may contain no more than 10,000 header fields across all parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxheaders=.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30632_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2022-30632] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "Uncontrolled recursion in Glob in path/filepath before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a path containing a large number of path separators.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24534_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2023-24534] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "HTTP and MIME header parsing can allocate large amounts of memory, even when parsing small inputs, potentially leading to a denial of service. Certain unusual patterns of input data can cause the common function used to parse HTTP and MIME headers to allocate substantially more memory than required to hold the parsed headers. An attacker can exploit this behavior to cause an HTTP server to allocate large amounts of memory from a small request, potentially leading to memory exhaustion and a denial of service. With fix, header parsing now correctly allocates only the memory required to hold parsed headers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-3786_3.15:libcrypto1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2022-3786] 3.15:libcrypto1.1 1.1.1n-r0"
              },
              "help": {
                "text": "A buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed a malicious certificate or for an application to continue certificate verification despite failure to construct a path to a trusted issuer. An attacker can craft a malicious email address in a certificate to overflow an arbitrary number of bytes containing the `.' character (decimal 46) on the stack. This buffer overflow could result in a crash (causing a denial of service). In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [3.0.7-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-3786_3.15:libssl1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2022-3786] 3.15:libssl1.1 1.1.1n-r0"
              },
              "help": {
                "text": "A buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed a malicious certificate or for an application to continue certificate verification despite failure to construct a path to a trusted issuer. An attacker can craft a malicious email address in a certificate to overflow an arbitrary number of bytes containing the `.' character (decimal 46) on the stack. This buffer overflow could result in a crash (causing a denial of service). In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [3.0.7-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-52425_3.15:expat_2.4.7-r0",
              "shortDescription": {
                "text": "[CVE-2023-52425] 3.15:expat 2.4.7-r0"
              },
              "help": {
                "text": "libexpat through 2.5.0 allows a denial of service (resource consumption) because many full reparsings are required in the case of a large token for which multiple buffer fills are needed.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [2.6.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41725_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2022-41725] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "A denial of service is possible from excessive resource consumption in net/http and mime/multipart. Multipart form parsing with mime/multipart.Reader.ReadForm can consume largely unlimited amounts of memory and disk files. This also affects form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. ReadForm takes a maxMemory parameter, and is documented as storing \"up to maxMemory bytes +10MB (reserved for non-file parts) in memory\". File parts which cannot be stored in memory are stored on disk in temporary files. The unconfigurable 10MB reserved for non-file parts is excessively large and can potentially open a denial of service vector on its own. However, ReadForm did not properly account for all memory consumed by a parsed form, such as map entry overhead, part names, and MIME headers, permitting a maliciously crafted form to consume well over 10MB. In addition, ReadForm contained no limit on the number of disk files created, permitting a relatively small request body to create a large number of disk temporary files. With fix, ReadForm now properly accounts for various forms of memory overhead, and should now stay within its documented limit of 10MB + maxMemory bytes of memory consumption. Users should still be aware that this limit is high and may still be hazardous. In addition, ReadForm now creates at most one on-disk temporary file, combining multiple form parts into a single temporary file. The mime/multipart.File interface type's documentation states, \"If stored on disk, the File's underlying concrete type will be an *os.File.\". This is no longer the case when a form contains more than one file part, due to this coalescing of parts into a single file. The previous behavior of using distinct files for each form part may be reenabled with the environment variable GODEBUG=multipartfiles=distinct. Users should be aware that multipart.ReadForm and the http.Request methods that call it do not limit the amount of disk consumed by temporary ...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30635_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2022-30635] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "Uncontrolled recursion in Decoder.Decode in encoding/gob before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a message which contains deeply nested structures.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-23772_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2022-23772] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "Rat.SetString in math/big in Go before 1.16.14 and 1.17.x before 1.17.7 has an overflow that can lead to Uncontrolled Memory Consumption.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.16.14], [1.17.7]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-28327_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2022-28327] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "The generic P-256 feature in crypto/elliptic in Go before 1.17.9 and 1.18.x before 1.18.1 allows a panic via long scalar input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.17.9], [1.18.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-27534_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-27534] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "A path traversal vulnerability exists in curl \u003c8.0.0 SFTP implementation causes the tilde (~) character to be wrongly replaced when used as a prefix in the first path element, in addition to its intended use as the first element to indicate a path relative to the user's home directory. Attackers can exploit this flaw to bypass filtering or execute arbitrary code by crafting a path like /~2/foo while accessing a server with a specific user.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.8      | Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [8.0.1-r0]   |"
              },
              "properties": {
                "security-severity": "8.8"
              }
            },
            {
              "id": "CVE-2023-44487_3.15:nghttp2-libs_1.46.0-r0",
              "shortDescription": {
                "text": "[CVE-2023-44487] 3.15:nghttp2-libs 1.46.0-r0"
              },
              "help": {
                "text": "The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [1.46.0-r2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30631_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2022-30631] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "Uncontrolled recursion in Reader.Read in compress/gzip before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via an archive containing a large number of concatenated 0-length compressed files.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45287_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2023-45287] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "Before Go 1.20, the RSA based TLS key exchanges used the math/big library, which is not constant time. RSA blinding was applied to prevent timing attacks, but analysis shows this may not have been fully effective. In particular it appears as if the removal of PKCS#1 padding may leak timing information, which in turn could be used to recover session key bits. In Go 1.20, the crypto/tls library switched to a fully constant time RSA implementation, which we do not believe exhibits any timing side channels.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.20.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-33198_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2021-33198] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "In Go before 1.15.13 and 1.16.x before 1.16.5, there can be a panic for a large exponent to the math/big.Rat SetString or UnmarshalText method.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.15.13], [1.16.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41725_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2022-41725] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "A denial of service is possible from excessive resource consumption in net/http and mime/multipart. Multipart form parsing with mime/multipart.Reader.ReadForm can consume largely unlimited amounts of memory and disk files. This also affects form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. ReadForm takes a maxMemory parameter, and is documented as storing \"up to maxMemory bytes +10MB (reserved for non-file parts) in memory\". File parts which cannot be stored in memory are stored on disk in temporary files. The unconfigurable 10MB reserved for non-file parts is excessively large and can potentially open a denial of service vector on its own. However, ReadForm did not properly account for all memory consumed by a parsed form, such as map entry overhead, part names, and MIME headers, permitting a maliciously crafted form to consume well over 10MB. In addition, ReadForm contained no limit on the number of disk files created, permitting a relatively small request body to create a large number of disk temporary files. With fix, ReadForm now properly accounts for various forms of memory overhead, and should now stay within its documented limit of 10MB + maxMemory bytes of memory consumption. Users should still be aware that this limit is high and may still be hazardous. In addition, ReadForm now creates at most one on-disk temporary file, combining multiple form parts into a single temporary file. The mime/multipart.File interface type's documentation states, \"If stored on disk, the File's underlying concrete type will be an *os.File.\". This is no longer the case when a form contains more than one file part, due to this coalescing of parts into a single file. The previous behavior of using distinct files for each form part may be reenabled with the environment variable GODEBUG=multipartfiles=distinct. Users should be aware that multipart.ReadForm and the http.Request methods that call it do not limit the amount of disk consumed by temporary ...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30631_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2022-30631] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "Uncontrolled recursion in Reader.Read in compress/gzip before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via an archive containing a large number of concatenated 0-length compressed files.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-44487_golang.org/x/net_0.0.0-20200625001655-4c5254603344",
              "shortDescription": {
                "text": "[CVE-2023-44487] golang.org/x/net 0.0.0-20200625001655-4c5254603344"
              },
              "help": {
                "text": "The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0401_3.15:libcrypto1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2023-0401] 3.15:libcrypto1.1 1.1.1n-r0"
              },
              "help": {
                "text": "A NULL pointer can be dereferenced when signatures are being\nverified on PKCS7 signed or signedAndEnveloped data. In case the hash\nalgorithm used for the signature is known to the OpenSSL library but\nthe implementation of the hash algorithm is not available the digest\ninitialization will fail. There is a missing check for the return\nvalue from the initialization function which later leads to invalid\nusage of the digest API most likely leading to a crash.\n\nThe unavailability of an algorithm can be caused by using FIPS\nenabled configuration of providers or more commonly by not loading\nthe legacy provider.\n\nPKCS7 data is processed by the SMIME library calls and also by the\ntime stamp (TS) library calls. The TLS implementation in OpenSSL does\nnot call these functions however third party applications would be\naffected if they call these functions to verify signatures on untrusted\ndata.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-2879_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2022-2879] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Reader.Read does not set a limit on the maximum size of file headers. A maliciously crafted archive could cause Read to allocate unbounded amounts of memory, potentially causing resource exhaustion or panics. After fix, Reader.Read limits the maximum size of header blocks to 1 MiB.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.18.7], [1.19.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30635_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2022-30635] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "Uncontrolled recursion in Decoder.Decode in encoding/gob before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a message which contains deeply nested structures.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-39293_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2021-39293] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "In archive/zip in Go before 1.16.8 and 1.17.x before 1.17.1, a crafted archive header (falsely designating that many files are present) can cause a NewReader or OpenReader panic. NOTE: this issue exists because of an incomplete fix for CVE-2021-33196.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.16.8], [1.17.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24534_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2023-24534] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "HTTP and MIME header parsing can allocate large amounts of memory, even when parsing small inputs, potentially leading to a denial of service. Certain unusual patterns of input data can cause the common function used to parse HTTP and MIME headers to allocate substantially more memory than required to hold the parsed headers. An attacker can exploit this behavior to cause an HTTP server to allocate large amounts of memory from a small request, potentially leading to memory exhaustion and a denial of service. With fix, header parsing now correctly allocates only the memory required to hold parsed headers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-29400_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2023-29400] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "Templates containing actions in unquoted HTML attributes (e.g. \"attr={{.}}\") executed with empty input can result in output with unexpected results when parsed due to HTML normalization rules. This may allow injection of arbitrary attributes into tags.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.3      | Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2023-51767_3.15:openssh-client-common_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2023-51767] 3.15:openssh-client-common 8.8_p1-r1"
              },
              "help": {
                "text": "OpenSSH through 9.6, when common types of DRAM are used, might allow row hammer attacks (for authentication bypass) because the integer value of authenticated in mm_answer_authpassword does not resist flips of a single bit. NOTE: this is applicable to a certain threat model of attacker-victim co-location in which the attacker has user privileges.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.0      | Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.0"
              }
            },
            {
              "id": "CVE-2023-51767_3.15:openssh-client-default_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2023-51767] 3.15:openssh-client-default 8.8_p1-r1"
              },
              "help": {
                "text": "OpenSSH through 9.6, when common types of DRAM are used, might allow row hammer attacks (for authentication bypass) because the integer value of authenticated in mm_answer_authpassword does not resist flips of a single bit. NOTE: this is applicable to a certain threat model of attacker-victim co-location in which the attacker has user privileges.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.0      | Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.0"
              }
            },
            {
              "id": "CVE-2023-51767_3.15:openssh-keygen_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2023-51767] 3.15:openssh-keygen 8.8_p1-r1"
              },
              "help": {
                "text": "OpenSSH through 9.6, when common types of DRAM are used, might allow row hammer attacks (for authentication bypass) because the integer value of authenticated in mm_answer_authpassword does not resist flips of a single bit. NOTE: this is applicable to a certain threat model of attacker-victim co-location in which the attacker has user privileges.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.0      | Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.0"
              }
            },
            {
              "id": "CVE-2020-26160_github.com/dgrijalva/jwt-go_3.2.0+incompatible",
              "shortDescription": {
                "text": "[CVE-2020-26160] github.com/dgrijalva/jwt-go 3.2.0+incompatible"
              },
              "help": {
                "text": "jwt-go before 4.0.0-preview1 allows attackers to bypass intended access restrictions in situations with []string{} for m[\"aud\"] (which is allowed by the specification). Because the type assertion fails, \"\" is the value of aud. This is a security problem if the JWT token is presented to a service that lacks its own audience check.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `\u003cbr/\u003e`sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-29007_3.15:git_2.34.2-r0",
              "shortDescription": {
                "text": "[CVE-2023-29007] 3.15:git 2.34.2-r0"
              },
              "help": {
                "text": "Git is a revision control system. Prior to versions 2.30.9, 2.31.8, 2.32.7, 2.33.8, 2.34.8, 2.35.8, 2.36.6, 2.37.7, 2.38.5, 2.39.3, and 2.40.1, a specially crafted `.gitmodules` file with submodule URLs that are longer than 1024 characters can used to exploit a bug in `config.c::git_config_copy_or_rename_section_in_file()`. This bug can be used to inject arbitrary configuration into a user's `$GIT_DIR/config` when attempting to remove the configuration section associated with that submodule. When the attacker injects configuration values which specify executables to run (such as `core.pager`, `core.editor`, `core.sshCommand`, etc.) this can lead to a remote code execution. A fix A fix is available in versions 2.30.9, 2.31.8, 2.32.7, 2.33.8, 2.34.8, 2.35.8, 2.36.6, 2.37.7, 2.38.5, 2.39.3, and 2.40.1. As a workaround, avoid running `git submodule deinit` on untrusted repositories or without prior inspection of any submodule sections in `$GIT_DIR/config`.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Undetermined       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [2.34.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2023-23749_3.15:libldap_2.6.0-r0",
              "shortDescription": {
                "text": "[CVE-2023-23749] 3.15:libldap 2.6.0-r0"
              },
              "help": {
                "text": "The 'LDAP Integration with Active Directory and OpenLDAP - NTLM \u0026 Kerberos Login' extension is vulnerable to LDAP Injection since is not properly sanitizing the 'username' POST parameter. An attacker can manipulate this paramter to dump arbitrary contents form the LDAP Database.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-3121_github.com/gogo/protobuf_1.3.1",
              "shortDescription": {
                "text": "[CVE-2021-3121] github.com/gogo/protobuf 1.3.1"
              },
              "help": {
                "text": "An issue was discovered in GoGo Protobuf before 1.3.2. plugin/unmarshal/unmarshal.go lacks certain index validation, aka the \"skippy peanut butter\" issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.6      | Not Covered       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.3.2]   |"
              },
              "properties": {
                "security-severity": "8.6"
              }
            },
            {
              "id": "CVE-2023-32643_3.15:glib_2.70.1-r0",
              "shortDescription": {
                "text": "[CVE-2023-32643] 3.15:glib 2.70.1-r0"
              },
              "help": {
                "text": "A flaw was found in GLib. The GVariant deserialization code is vulnerable to a heap buffer overflow introduced by the fix for CVE-2023-32665. This bug does not affect any released version of GLib, but does affect GLib distributors who followed the guidance of GLib developers to backport the initial fix for CVE-2023-32665.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2022-24975_3.15:git_2.34.2-r0",
              "shortDescription": {
                "text": "[CVE-2022-24975] 3.15:git 2.34.2-r0"
              },
              "help": {
                "text": "The --mirror documentation for Git through 2.35.1 does not mention the availability of deleted content, aka the \"GitBleed\" issue. This could present a security risk if information-disclosure auditing processes rely on a clone operation without the --mirror option. Note: This has been disputed by multiple 3rd parties who believe this is an intended feature of the git binary and does not pose a security risk.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-31012_3.15:git_2.34.2-r0",
              "shortDescription": {
                "text": "[CVE-2022-31012] 3.15:git 2.34.2-r0"
              },
              "help": {
                "text": "Git for Windows is a fork of Git that contains Windows-specific patches. This vulnerability in versions prior to 2.37.1 lets Git for Windows' installer execute a binary into `C:\\mingw64\\bin\\git.exe` by mistake. This only happens upon a fresh install, not when upgrading Git for Windows. A patch is included in version 2.37.1. Two workarounds are available. Create the `C:\\mingw64` folder and remove read/write access from this folder, or disallow arbitrary authenticated users to create folders in `C:\\`.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.3      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2003-0693_3.15:openssh-client-common_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2003-0693] 3.15:openssh-client-common 8.8_p1-r1"
              },
              "help": {
                "text": "A \"buffer management error\" in buffer_append_space of buffer.c for OpenSSH before 3.7 may allow remote attackers to execute arbitrary code by causing an incorrect amount of memory to be freed and corrupting the heap, a different vulnerability than CVE-2003-0695.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2006-5051_3.15:openssh-keygen_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2006-5051] 3.15:openssh-keygen 8.8_p1-r1"
              },
              "help": {
                "text": "Signal handler race condition in OpenSSH before 4.4 allows remote attackers to cause a denial of service (crash), and possibly execute arbitrary code if GSSAPI authentication is enabled, via unspecified vectors that lead to a double-free.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2003-0682_3.15:openssh-client-default_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2003-0682] 3.15:openssh-client-default 8.8_p1-r1"
              },
              "help": {
                "text": "\"Memory bugs\" in OpenSSH 3.7.1 and earlier, with unknown impact, a different set of vulnerabilities than CVE-2003-0693 and CVE-2003-0695.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2006-5051_3.15:openssh-client-common_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2006-5051] 3.15:openssh-client-common 8.8_p1-r1"
              },
              "help": {
                "text": "Signal handler race condition in OpenSSH before 4.4 allows remote attackers to cause a denial of service (crash), and possibly execute arbitrary code if GSSAPI authentication is enabled, via unspecified vectors that lead to a double-free.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2003-0693_3.15:openssh-client-default_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2003-0693] 3.15:openssh-client-default 8.8_p1-r1"
              },
              "help": {
                "text": "A \"buffer management error\" in buffer_append_space of buffer.c for OpenSSH before 3.7 may allow remote attackers to execute arbitrary code by causing an incorrect amount of memory to be freed and corrupting the heap, a different vulnerability than CVE-2003-0695.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2003-0695_3.15:openssh-keygen_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2003-0695] 3.15:openssh-keygen 8.8_p1-r1"
              },
              "help": {
                "text": "Multiple \"buffer management errors\" in OpenSSH before 3.7.1 may allow attackers to cause a denial of service or execute arbitrary code using (1) buffer_init in buffer.c, (2) buffer_free in buffer.c, or (3) a separate function in channels.c, a different vulnerability than CVE-2003-0693.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2006-5794_3.15:openssh-client-common_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2006-5794] 3.15:openssh-client-common 8.8_p1-r1"
              },
              "help": {
                "text": "Unspecified vulnerability in the sshd Privilege Separation Monitor in OpenSSH before 4.5 causes weaker verification that authentication has been successful, which might allow attackers to bypass authentication. NOTE: as of 20061108, it is believed that this issue is only exploitable by leveraging vulnerabilities in the unprivileged process, which are not known to exist.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2003-0682_3.15:openssh-client-common_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2003-0682] 3.15:openssh-client-common 8.8_p1-r1"
              },
              "help": {
                "text": "\"Memory bugs\" in OpenSSH 3.7.1 and earlier, with unknown impact, a different set of vulnerabilities than CVE-2003-0693 and CVE-2003-0695.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2006-5794_3.15:openssh-client-default_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2006-5794] 3.15:openssh-client-default 8.8_p1-r1"
              },
              "help": {
                "text": "Unspecified vulnerability in the sshd Privilege Separation Monitor in OpenSSH before 4.5 causes weaker verification that authentication has been successful, which might allow attackers to bypass authentication. NOTE: as of 20061108, it is believed that this issue is only exploitable by leveraging vulnerabilities in the unprivileged process, which are not known to exist.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2006-5051_3.15:openssh-client-default_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2006-5051] 3.15:openssh-client-default 8.8_p1-r1"
              },
              "help": {
                "text": "Signal handler race condition in OpenSSH before 4.4 allows remote attackers to cause a denial of service (crash), and possibly execute arbitrary code if GSSAPI authentication is enabled, via unspecified vectors that lead to a double-free.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2023-46402_github.com/whilp/git-urls_1.0.0",
              "shortDescription": {
                "text": "[CVE-2023-46402] github.com/whilp/git-urls 1.0.0"
              },
              "help": {
                "text": "git-urls 1.0.0 allows ReDOS (Regular Expression Denial of Service) in urls.go.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2003-0695_3.15:openssh-client-common_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2003-0695] 3.15:openssh-client-common 8.8_p1-r1"
              },
              "help": {
                "text": "Multiple \"buffer management errors\" in OpenSSH before 3.7.1 may allow attackers to cause a denial of service or execute arbitrary code using (1) buffer_init in buffer.c, (2) buffer_free in buffer.c, or (3) a separate function in channels.c, a different vulnerability than CVE-2003-0693.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2003-0693_3.15:openssh-keygen_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2003-0693] 3.15:openssh-keygen 8.8_p1-r1"
              },
              "help": {
                "text": "A \"buffer management error\" in buffer_append_space of buffer.c for OpenSSH before 3.7 may allow remote attackers to execute arbitrary code by causing an incorrect amount of memory to be freed and corrupting the heap, a different vulnerability than CVE-2003-0695.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2006-5794_3.15:openssh-keygen_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2006-5794] 3.15:openssh-keygen 8.8_p1-r1"
              },
              "help": {
                "text": "Unspecified vulnerability in the sshd Privilege Separation Monitor in OpenSSH before 4.5 causes weaker verification that authentication has been successful, which might allow attackers to bypass authentication. NOTE: as of 20061108, it is believed that this issue is only exploitable by leveraging vulnerabilities in the unprivileged process, which are not known to exist.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2021-36690_3.15:sqlite-libs_3.36.0-r0",
              "shortDescription": {
                "text": "[CVE-2021-36690] 3.15:sqlite-libs 3.36.0-r0"
              },
              "help": {
                "text": "A segmentation fault can occur in the sqlite3.exe command-line component of SQLite 3.36.0 via the idxGetTableInfo function when there is a crafted SQL query. NOTE: the vendor disputes the relevance of this report because a sqlite3.exe user already has full privileges (e.g., is intentionally allowed to execute commands). This report does NOT imply any problem in the SQLite library.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2003-0695_3.15:openssh-client-default_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2003-0695] 3.15:openssh-client-default 8.8_p1-r1"
              },
              "help": {
                "text": "Multiple \"buffer management errors\" in OpenSSH before 3.7.1 may allow attackers to cause a denial of service or execute arbitrary code using (1) buffer_init in buffer.c, (2) buffer_free in buffer.c, or (3) a separate function in channels.c, a different vulnerability than CVE-2003-0693.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2003-0682_3.15:openssh-keygen_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2003-0682] 3.15:openssh-keygen 8.8_p1-r1"
              },
              "help": {
                "text": "\"Memory bugs\" in OpenSSH 3.7.1 and earlier, with unknown impact, a different set of vulnerabilities than CVE-2003-0693 and CVE-2003-0695.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2022-29458_3.15:ncurses-libs_6.3_p20211120-r0",
              "shortDescription": {
                "text": "[CVE-2022-29458] 3.15:ncurses-libs 6.3_p20211120-r0"
              },
              "help": {
                "text": "ncurses 6.3 before patch 20220416 has an out-of-bounds read and segmentation violation in convert_strings in tinfo/read_entry.c in the terminfo library.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.1      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [6.3_p20211120-r1]   |"
              },
              "properties": {
                "security-severity": "7.1"
              }
            },
            {
              "id": "CVE-2020-28852_golang.org/x/text_0.3.3",
              "shortDescription": {
                "text": "[CVE-2020-28852] golang.org/x/text 0.3.3"
              },
              "help": {
                "text": "In x/text in Go before v0.3.5, a \"slice bounds out of range\" panic occurs in language.ParseAcceptLanguage while processing a BCP 47 tag. (x/text/language is supposed to be able to parse an HTTP Accept-Language header.)",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [0.3.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-39260_3.15:git_2.34.2-r0",
              "shortDescription": {
                "text": "[CVE-2022-39260] 3.15:git 2.34.2-r0"
              },
              "help": {
                "text": "Git is an open source, scalable, distributed revision control system. `git shell` is a restricted login shell that can be used to implement Git's push/pull functionality via SSH. In versions prior to 2.30.6, 2.31.5, 2.32.4, 2.33.5, 2.34.5, 2.35.5, 2.36.3, and 2.37.4, the function that splits the command arguments into an array improperly uses an `int` to represent the number of entries in the array, allowing a malicious actor to intentionally overflow the return value, leading to arbitrary heap writes. Because the resulting array is then passed to `execv()`, it is possible to leverage this attack to gain remote code execution on a victim machine. Note that a victim must first allow access to `git shell` as a login shell in order to be vulnerable to this attack. This problem is patched in versions 2.30.6, 2.31.5, 2.32.4, 2.33.5, 2.34.5, 2.35.5, 2.36.3, and 2.37.4 and users are advised to upgrade to the latest version. Disabling `git shell` access via remote logins is a viable short-term workaround.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.8      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [2.34.5-r0]   |"
              },
              "properties": {
                "security-severity": "8.8"
              }
            },
            {
              "id": "CVE-2022-27780_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-27780] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "The curl URL parser wrongly accepts percent-encoded URL separators like '/'when decoding the host name part of a URL, making it a *different* URL usingthe wrong host name when it is later retrieved.For example, a URL like `http://example.com%2F127.0.0.1/`, would be allowed bythe parser and get transposed into `http://example.com/127.0.0.1/`. This flawcan be used to circumvent filters, checks and more.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [7.80.0-r2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "XRAY-129384_go.mongodb.org/mongo-driver_1.1.2",
              "shortDescription": {
                "text": "[XRAY-129384] go.mongodb.org/mongo-driver 1.1.2"
              },
              "help": {
                "text": "Security Vulnerability: system DLL loaded without path specified",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.4.3]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-28319_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-28319] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "A use after free vulnerability exists in curl \u003cv8.1.0 in the way libcurl offers a feature to verify an SSH server's public key using a SHA 256 hash. When this check fails, libcurl would free the memory for the fingerprint before it returns an error message containing the (now freed) hash. This flaw risks inserting sensitive heap-based data into the error message that might be shown to users or otherwise get leaked and revealed.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [8.1.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2020-28852_golang.org/x/text_0.3.2",
              "shortDescription": {
                "text": "[CVE-2020-28852] golang.org/x/text 0.3.2"
              },
              "help": {
                "text": "In x/text in Go before v0.3.5, a \"slice bounds out of range\" panic occurs in language.ParseAcceptLanguage while processing a BCP 47 tag. (x/text/language is supposed to be able to parse an HTTP Accept-Language header.)",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [0.3.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-42915_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-42915] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "curl before 7.86.0 has a double free. If curl is told to use an HTTP proxy for a transfer with a non-HTTP(S) URL, it sets up the connection to the remote server by issuing a CONNECT request to the proxy, and then tunnels the rest of the protocol through. An HTTP proxy might refuse this request (HTTP proxies often only allow outgoing connections to specific port numbers, like 443 for HTTPS) and instead return a non-200 status code to the client. Due to flaws in the error/cleanup handling, this could trigger a double free in curl if one of the following schemes were used in the URL for the transfer: dict, gopher, gophers, ldap, ldaps, rtmp, rtmps, or telnet. The earliest affected version is 7.77.0.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [7.80.0-r4]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2023-42915_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-42915] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "Multiple issues were addressed by updating to curl version 8.4.0. This issue is fixed in macOS Ventura 13.6.4, macOS Sonoma 14.2, macOS Monterey 12.7.3, iOS 16.7.5 and iPadOS 16.7.5. Multiple issues in curl.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [8.4.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2023-38039_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-38039] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "When curl retrieves an HTTP response, it stores the incoming headers so that\nthey can be accessed later via the libcurl headers API.\n\nHowever, curl did not have a limit in how many or how large headers it would\naccept in a response, allowing a malicious server to stream an endless series\nof headers and eventually cause curl to run out of heap memory.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [8.3.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-29458_3.15:ncurses-terminfo-base_6.3_p20211120-r0",
              "shortDescription": {
                "text": "[CVE-2022-29458] 3.15:ncurses-terminfo-base 6.3_p20211120-r0"
              },
              "help": {
                "text": "ncurses 6.3 before patch 20220416 has an out-of-bounds read and segmentation violation in convert_strings in tinfo/read_entry.c in the terminfo library.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.1      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [6.3_p20211120-r1]   |"
              },
              "properties": {
                "security-severity": "7.1"
              }
            },
            {
              "id": "CVE-2020-28366_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2020-28366] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Code injection in the go command with cgo before Go 1.14.12 and Go 1.15.5 allows arbitrary code execution at build time via a malicious unquoted symbol name in a linked object file.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.14.12], [1.15.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-23946_3.15:git_2.34.2-r0",
              "shortDescription": {
                "text": "[CVE-2023-23946] 3.15:git 2.34.2-r0"
              },
              "help": {
                "text": "Git, a revision control system, is vulnerable to path traversal prior to versions 2.39.2, 2.38.4, 2.37.6, 2.36.5, 2.35.7, 2.34.7, 2.33.7, 2.32.6, 2.31.7, and 2.30.8. By feeding a crafted input to `git apply`, a path outside the working tree can be overwritten as the user who is running `git apply`. A fix has been prepared and will appear in v2.39.2, v2.38.4, v2.37.6, v2.36.5, v2.35.7, v2.34.7, v2.33.7, v2.32.6, v2.31.7, and v2.30.8. As a workaround, use `git apply --stat` to inspect a patch before applying; avoid applying one that creates a symbolic link and then creates a file beyond the symbolic link.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [2.34.7-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2020-28367_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2020-28367] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Code injection in the go command with cgo before Go 1.14.12 and Go 1.15.5 allows arbitrary code execution at build time via malicious gcc flags specified via a #cgo directive.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.14.12], [1.15.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-29187_3.15:git_2.34.2-r0",
              "shortDescription": {
                "text": "[CVE-2022-29187] 3.15:git 2.34.2-r0"
              },
              "help": {
                "text": "Git is a distributed revision control system. Git prior to versions 2.37.1, 2.36.2, 2.35.4, 2.34.4, 2.33.4, 2.32.3, 2.31.4, and 2.30.5, is vulnerable to privilege escalation in all platforms. An unsuspecting user could still be affected by the issue reported in CVE-2022-24765, for example when navigating as root into a shared tmp directory that is owned by them, but where an attacker could create a git repository. Versions 2.37.1, 2.36.2, 2.35.4, 2.34.4, 2.33.4, 2.32.3, 2.31.4, and 2.30.5 contain a patch for this issue. The simplest way to avoid being affected by the exploit described in the example is to avoid running git as root (or an Administrator in Windows), and if needed to reduce its use to a minimum. While a generic workaround is not possible, a system could be hardened from the exploit described in the example by removing any such repository if it exists already and creating one as root to block any future attacks.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [2.34.4-r0]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2022-32148_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2022-32148] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "Improper exposure of client IP addresses in net/http before Go 1.17.12 and Go 1.18.4 can be triggered by calling httputil.ReverseProxy.ServeHTTP with a Request.Header map containing a nil value for the X-Forwarded-For header, which causes ReverseProxy to set the client IP as the value of the X-Forwarded-For header.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-48795_golang.org/x/crypto_0.0.0-20220427172511-eb4f295cb31f",
              "shortDescription": {
                "text": "[CVE-2023-48795] golang.org/x/crypto 0.0.0-20220427172511-eb4f295cb31f"
              },
              "help": {
                "text": "The SSH transport protocol with certain OpenSSH extensions, found in OpenSSH before 9.6 and other products, allows remote attackers to bypass integrity checks such that some packets are omitted (from the extension negotiation message), and a client and server may consequently end up with a connection for which some security features have been downgraded or disabled, aka a Terrapin attack. This occurs because the SSH Binary Packet Protocol (BPP), implemented by these extensions, mishandles the handshake phase and mishandles use of sequence numbers. For example, there is an effective attack against SSH's use of ChaCha20-Poly1305 (and CBC with Encrypt-then-MAC). The bypass occurs in chacha20-poly1305@openssh.com and (if CBC is used) the -etm@openssh.com MAC algorithms. This also affects Maverick Synergy Java SSH API before 3.1.0-SNAPSHOT, Dropbear through 2022.83, Ssh before 5.1.1 in Erlang/OTP, PuTTY before 0.80, AsyncSSH before 2.14.2, golang.org/x/crypto before 0.17.0, libssh before 0.10.6, libssh2 through 1.11.0, Thorn Tech SFTP Gateway before 3.4.6, Tera Term before 5.1, Paramiko before 3.4.0, jsch before 0.2.15, SFTPGo before 2.5.6, Netgate pfSense Plus through 23.09.1, Netgate pfSense CE through 2.7.2, HPN-SSH through 18.2.0, ProFTPD before 1.3.8b (and before 1.3.9rc2), ORYX CycloneSSH before 2.3.4, NetSarang XShell 7 before Build 0144, CrushFTP before 10.6.0, ConnectBot SSH library before 2.2.22, Apache MINA sshd through 2.11.0, sshj through 0.37.0, TinySSH through 20230101, trilead-ssh2 6401, LANCOM LCOS and LANconfig, FileZilla before 3.66.4, Nova before 11.8, PKIX-SSH before 14.4, SecureCRT before 9.4.3, Transmit5 before 5.10.4, Win32-OpenSSH before 9.5.0.0p1-Beta, WinSCP before 6.2.2, Bitvise SSH Server before 9.32, Bitvise SSH Client before 9.33, KiTTY through 0.76.1.13, the net-ssh gem 7.2.0 for Ruby, the mscdex ssh2 module before 1.15.0 for Node.js, the thrussh library before 0.35.1 for Rust, and the Russh crate before 0.40.2 for Rust.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-48795_3.15:openssh-client-default_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2023-48795] 3.15:openssh-client-default 8.8_p1-r1"
              },
              "help": {
                "text": "The SSH transport protocol with certain OpenSSH extensions, found in OpenSSH before 9.6 and other products, allows remote attackers to bypass integrity checks such that some packets are omitted (from the extension negotiation message), and a client and server may consequently end up with a connection for which some security features have been downgraded or disabled, aka a Terrapin attack. This occurs because the SSH Binary Packet Protocol (BPP), implemented by these extensions, mishandles the handshake phase and mishandles use of sequence numbers. For example, there is an effective attack against SSH's use of ChaCha20-Poly1305 (and CBC with Encrypt-then-MAC). The bypass occurs in chacha20-poly1305@openssh.com and (if CBC is used) the -etm@openssh.com MAC algorithms. This also affects Maverick Synergy Java SSH API before 3.1.0-SNAPSHOT, Dropbear through 2022.83, Ssh before 5.1.1 in Erlang/OTP, PuTTY before 0.80, AsyncSSH before 2.14.2, golang.org/x/crypto before 0.17.0, libssh before 0.10.6, libssh2 through 1.11.0, Thorn Tech SFTP Gateway before 3.4.6, Tera Term before 5.1, Paramiko before 3.4.0, jsch before 0.2.15, SFTPGo before 2.5.6, Netgate pfSense Plus through 23.09.1, Netgate pfSense CE through 2.7.2, HPN-SSH through 18.2.0, ProFTPD before 1.3.8b (and before 1.3.9rc2), ORYX CycloneSSH before 2.3.4, NetSarang XShell 7 before Build 0144, CrushFTP before 10.6.0, ConnectBot SSH library before 2.2.22, Apache MINA sshd through 2.11.0, sshj through 0.37.0, TinySSH through 20230101, trilead-ssh2 6401, LANCOM LCOS and LANconfig, FileZilla before 3.66.4, Nova before 11.8, PKIX-SSH before 14.4, SecureCRT before 9.4.3, Transmit5 before 5.10.4, Win32-OpenSSH before 9.5.0.0p1-Beta, WinSCP before 6.2.2, Bitvise SSH Server before 9.32, Bitvise SSH Client before 9.33, KiTTY through 0.76.1.13, the net-ssh gem 7.2.0 for Ruby, the mscdex ssh2 module before 1.15.0 for Node.js, the thrussh library before 0.35.1 for Rust, and the Russh crate before 0.40.2 for Rust.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [9.6_p1-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2021-44717_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2021-44717] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Go before 1.16.12 and 1.17.x before 1.17.5 on UNIX allows write operations to an unintended file or unintended network connection as a consequence of erroneous closing of file descriptor 0 after file-descriptor exhaustion.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.8      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.16.12], [1.17.5]   |"
              },
              "properties": {
                "security-severity": "4.8"
              }
            },
            {
              "id": "CVE-2023-45288_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2023-45288] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.21.9], [1.22.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-29409_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2023-29409] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Extremely large RSA keys in certificate chains can cause a client/server to expend significant CPU time verifying signatures. With fix, the size of RSA keys transmitted during handshakes is restricted to \u003c= 8192 bits. Based on a survey of publicly trusted RSA keys, there are currently only three certificates in circulation with keys larger than this, and all three appear to be test certificates that are not actively deployed. It is possible there are larger keys in use in private PKIs, but we target the web PKI, so causing breakage here in the interests of increasing the default safety of users of crypto/tls seems reasonable.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.19.12], [1.20.7], [1.21.0-rc.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-29406_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2023-29406] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "The HTTP/1 client does not fully validate the contents of the Host header. A maliciously crafted Host header can inject additional headers or entire requests. With fix, the HTTP/1 client now refuses to send requests containing an invalid Request.Host or Request.URL.Host value.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.19.11], [1.20.6]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-48795_golang.org/x/crypto_0.0.0-20200622213623-75b288015ac9",
              "shortDescription": {
                "text": "[CVE-2023-48795] golang.org/x/crypto 0.0.0-20200622213623-75b288015ac9"
              },
              "help": {
                "text": "The SSH transport protocol with certain OpenSSH extensions, found in OpenSSH before 9.6 and other products, allows remote attackers to bypass integrity checks such that some packets are omitted (from the extension negotiation message), and a client and server may consequently end up with a connection for which some security features have been downgraded or disabled, aka a Terrapin attack. This occurs because the SSH Binary Packet Protocol (BPP), implemented by these extensions, mishandles the handshake phase and mishandles use of sequence numbers. For example, there is an effective attack against SSH's use of ChaCha20-Poly1305 (and CBC with Encrypt-then-MAC). The bypass occurs in chacha20-poly1305@openssh.com and (if CBC is used) the -etm@openssh.com MAC algorithms. This also affects Maverick Synergy Java SSH API before 3.1.0-SNAPSHOT, Dropbear through 2022.83, Ssh before 5.1.1 in Erlang/OTP, PuTTY before 0.80, AsyncSSH before 2.14.2, golang.org/x/crypto before 0.17.0, libssh before 0.10.6, libssh2 through 1.11.0, Thorn Tech SFTP Gateway before 3.4.6, Tera Term before 5.1, Paramiko before 3.4.0, jsch before 0.2.15, SFTPGo before 2.5.6, Netgate pfSense Plus through 23.09.1, Netgate pfSense CE through 2.7.2, HPN-SSH through 18.2.0, ProFTPD before 1.3.8b (and before 1.3.9rc2), ORYX CycloneSSH before 2.3.4, NetSarang XShell 7 before Build 0144, CrushFTP before 10.6.0, ConnectBot SSH library before 2.2.22, Apache MINA sshd through 2.11.0, sshj through 0.37.0, TinySSH through 20230101, trilead-ssh2 6401, LANCOM LCOS and LANconfig, FileZilla before 3.66.4, Nova before 11.8, PKIX-SSH before 14.4, SecureCRT before 9.4.3, Transmit5 before 5.10.4, Win32-OpenSSH before 9.5.0.0p1-Beta, WinSCP before 6.2.2, Bitvise SSH Server before 9.32, Bitvise SSH Client before 9.33, KiTTY through 0.76.1.13, the net-ssh gem 7.2.0 for Ruby, the mscdex ssh2 module before 1.15.0 for Node.js, the thrussh library before 0.35.1 for Rust, and the Russh crate before 0.40.2 for Rust.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-0465_3.15:libcrypto1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2023-0465] 3.15:libcrypto1.1 1.1.1n-r0"
              },
              "help": {
                "text": "Applications that use a non-default option when verifying certificates may be\nvulnerable to an attack from a malicious CA to circumvent certain checks.\n\nInvalid certificate policies in leaf certificates are silently ignored by\nOpenSSL and other certificate policy checks are skipped for that certificate.\nA malicious CA could use this to deliberately assert invalid certificate policies\nin order to circumvent policy checking on the certificate altogether.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.1.1t-r2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-31525_golang.org/x/net_0.0.0-20201110031124-69a78807bb2b",
              "shortDescription": {
                "text": "[CVE-2021-31525] golang.org/x/net 0.0.0-20201110031124-69a78807bb2b"
              },
              "help": {
                "text": "net/http in Go before 1.15.12 and 1.16.x before 1.16.4 allows remote attackers to cause a denial of service (panic) via a large header to ReadRequest or ReadResponse. Server, Transport, and Client can each be affected in some configurations.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [0.0.0-20210428140749-89ef3d95e781]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-45288_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2023-45288] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.21.9], [1.22.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-29409_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2023-29409] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "Extremely large RSA keys in certificate chains can cause a client/server to expend significant CPU time verifying signatures. With fix, the size of RSA keys transmitted during handshakes is restricted to \u003c= 8192 bits. Based on a survey of publicly trusted RSA keys, there are currently only three certificates in circulation with keys larger than this, and all three appear to be test certificates that are not actively deployed. It is possible there are larger keys in use in private PKIs, but we target the web PKI, so causing breakage here in the interests of increasing the default safety of users of crypto/tls seems reasonable.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.19.12], [1.20.7], [1.21.0-rc.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-44717_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2021-44717] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "Go before 1.16.12 and 1.17.x before 1.17.5 on UNIX allows write operations to an unintended file or unintended network connection as a consequence of erroneous closing of file descriptor 0 after file-descriptor exhaustion.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.8      | Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.16.12], [1.17.5]   |"
              },
              "properties": {
                "security-severity": "4.8"
              }
            },
            {
              "id": "CVE-2023-28321_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-28321] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "An improper certificate validation vulnerability exists in curl \u003cv8.1.0 in the way it supports matching of wildcard patterns when listed as \"Subject Alternative Name\" in TLS server certificates. curl can be built to use its own name matching function for TLS rather than one provided by a TLS library. This private wildcard matching function would match IDN (International Domain Name) hosts incorrectly and could as a result accept patterns that otherwise should mismatch. IDN hostnames are converted to puny code before used for certificate checks. Puny coded names always start with `xn--` and should not be allowed to pattern match, but the wildcard check in curl could still check for `x*`, which would match even though the IDN name most likely contained nothing even resembling an `x`.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [8.1.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-29406_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2023-29406] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "The HTTP/1 client does not fully validate the contents of the Host header. A maliciously crafted Host header can inject additional headers or entire requests. With fix, the HTTP/1 client now refuses to send requests containing an invalid Request.Host or Request.URL.Host value.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.19.11], [1.20.6]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-29409_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2023-29409] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "Extremely large RSA keys in certificate chains can cause a client/server to expend significant CPU time verifying signatures. With fix, the size of RSA keys transmitted during handshakes is restricted to \u003c= 8192 bits. Based on a survey of publicly trusted RSA keys, there are currently only three certificates in circulation with keys larger than this, and all three appear to be test certificates that are not actively deployed. It is possible there are larger keys in use in private PKIs, but we target the web PKI, so causing breakage here in the interests of increasing the default safety of users of crypto/tls seems reasonable.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.19.12], [1.20.7], [1.21.0-rc.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-0466_3.15:libcrypto1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2023-0466] 3.15:libcrypto1.1 1.1.1n-r0"
              },
              "help": {
                "text": "The function X509_VERIFY_PARAM_add0_policy() is documented to\nimplicitly enable the certificate policy check when doing certificate\nverification. However the implementation of the function does not\nenable the check which allows certificates with invalid or incorrect\npolicies to pass the certificate verification.\n\nAs suddenly enabling the policy check could break existing deployments it was\ndecided to keep the existing behavior of the X509_VERIFY_PARAM_add0_policy()\nfunction.\n\nInstead the applications that require OpenSSL to perform certificate\npolicy check need to use X509_VERIFY_PARAM_set1_policies() or explicitly\nenable the policy check by calling X509_VERIFY_PARAM_set_flags() with\nthe X509_V_FLAG_POLICY_CHECK flag argument.\n\nCertificate policy checks are disabled by default in OpenSSL and are not\ncommonly used by applications.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [3.0.8-r3]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-29409_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2023-29409] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "Extremely large RSA keys in certificate chains can cause a client/server to expend significant CPU time verifying signatures. With fix, the size of RSA keys transmitted during handshakes is restricted to \u003c= 8192 bits. Based on a survey of publicly trusted RSA keys, there are currently only three certificates in circulation with keys larger than this, and all three appear to be test certificates that are not actively deployed. It is possible there are larger keys in use in private PKIs, but we target the web PKI, so causing breakage here in the interests of increasing the default safety of users of crypto/tls seems reasonable.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.19.12], [1.20.7], [1.21.0-rc.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-45288_golang.org/x/net_0.0.0-20201110031124-69a78807bb2b",
              "shortDescription": {
                "text": "[CVE-2023-45288] golang.org/x/net 0.0.0-20201110031124-69a78807bb2b"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [0.23.0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-32148_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2022-32148] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "Improper exposure of client IP addresses in net/http before Go 1.17.12 and Go 1.18.4 can be triggered by calling httputil.ReverseProxy.ServeHTTP with a Request.Header map containing a nil value for the X-Forwarded-For header, which causes ReverseProxy to set the client IP as the value of the X-Forwarded-For header.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-41717_golang.org/x/net_0.0.0-20200625001655-4c5254603344",
              "shortDescription": {
                "text": "[CVE-2022-41717] golang.org/x/net 0.0.0-20200625001655-4c5254603344"
              },
              "help": {
                "text": "An attacker can cause excessive memory growth in a Go server accepting HTTP/2 requests. HTTP/2 server connections contain a cache of HTTP header keys sent by the client. While the total number of entries in this cache is capped, an attacker sending very large keys can cause the server to allocate approximately 64 MiB per open connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [0.4.0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-48795_golang.org/x/crypto_0.0.0-20210220033148-5ea612d1eb83",
              "shortDescription": {
                "text": "[CVE-2023-48795] golang.org/x/crypto 0.0.0-20210220033148-5ea612d1eb83"
              },
              "help": {
                "text": "The SSH transport protocol with certain OpenSSH extensions, found in OpenSSH before 9.6 and other products, allows remote attackers to bypass integrity checks such that some packets are omitted (from the extension negotiation message), and a client and server may consequently end up with a connection for which some security features have been downgraded or disabled, aka a Terrapin attack. This occurs because the SSH Binary Packet Protocol (BPP), implemented by these extensions, mishandles the handshake phase and mishandles use of sequence numbers. For example, there is an effective attack against SSH's use of ChaCha20-Poly1305 (and CBC with Encrypt-then-MAC). The bypass occurs in chacha20-poly1305@openssh.com and (if CBC is used) the -etm@openssh.com MAC algorithms. This also affects Maverick Synergy Java SSH API before 3.1.0-SNAPSHOT, Dropbear through 2022.83, Ssh before 5.1.1 in Erlang/OTP, PuTTY before 0.80, AsyncSSH before 2.14.2, golang.org/x/crypto before 0.17.0, libssh before 0.10.6, libssh2 through 1.11.0, Thorn Tech SFTP Gateway before 3.4.6, Tera Term before 5.1, Paramiko before 3.4.0, jsch before 0.2.15, SFTPGo before 2.5.6, Netgate pfSense Plus through 23.09.1, Netgate pfSense CE through 2.7.2, HPN-SSH through 18.2.0, ProFTPD before 1.3.8b (and before 1.3.9rc2), ORYX CycloneSSH before 2.3.4, NetSarang XShell 7 before Build 0144, CrushFTP before 10.6.0, ConnectBot SSH library before 2.2.22, Apache MINA sshd through 2.11.0, sshj through 0.37.0, TinySSH through 20230101, trilead-ssh2 6401, LANCOM LCOS and LANconfig, FileZilla before 3.66.4, Nova before 11.8, PKIX-SSH before 14.4, SecureCRT before 9.4.3, Transmit5 before 5.10.4, Win32-OpenSSH before 9.5.0.0p1-Beta, WinSCP before 6.2.2, Bitvise SSH Server before 9.32, Bitvise SSH Client before 9.33, KiTTY through 0.76.1.13, the net-ssh gem 7.2.0 for Ruby, the mscdex ssh2 module before 1.15.0 for Node.js, the thrussh library before 0.35.1 for Rust, and the Russh crate before 0.40.2 for Rust.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-2650_3.15:libssl1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2023-2650] 3.15:libssl1.1 1.1.1n-r0"
              },
              "help": {
                "text": "Issue summary: Processing some specially crafted ASN.1 object identifiers or\ndata containing them may be very slow.\n\nImpact summary: Applications that use OBJ_obj2txt() directly, or use any of\nthe OpenSSL subsystems OCSP, PKCS7/SMIME, CMS, CMP/CRMF or TS with no message\nsize limit may experience notable to very long delays when processing those\nmessages, which may lead to a Denial of Service.\n\nAn OBJECT IDENTIFIER is composed of a series of numbers - sub-identifiers -\nmost of which have no size limit.  OBJ_obj2txt() may be used to translate\nan ASN.1 OBJECT IDENTIFIER given in DER encoding form (using the OpenSSL\ntype ASN1_OBJECT) to its canonical numeric text form, which are the\nsub-identifiers of the OBJECT IDENTIFIER in decimal form, separated by\nperiods.\n\nWhen one of the sub-identifiers in the OBJECT IDENTIFIER is very large\n(these are sizes that are seen as absurdly large, taking up tens or hundreds\nof KiBs), the translation to a decimal number in text may take a very long\ntime.  The time complexity is O(n^2) with 'n' being the size of the\nsub-identifiers in bytes (*).\n\nWith OpenSSL 3.0, support to fetch cryptographic algorithms using names /\nidentifiers in string form was introduced.  This includes using OBJECT\nIDENTIFIERs in canonical numeric text form as identifiers for fetching\nalgorithms.\n\nSuch OBJECT IDENTIFIERs may be received through the ASN.1 structure\nAlgorithmIdentifier, which is commonly used in multiple protocols to specify\nwhat cryptographic algorithm should be used to sign or verify, encrypt or\ndecrypt, or digest passed data.\n\nApplications that call OBJ_obj2txt() directly with untrusted data are\naffected, with any version of OpenSSL.  If the use is for the mere purpose\nof display, the severity is considered low.\n\nIn OpenSSL 3.0 and newer, this affects the subsystems OCSP, PKCS7/SMIME,\nCMS, CMP/CRMF or TS.  It also impacts anything that processes X.509\ncertificates, including simple things like verifying its signature.\n\nThe impact on TLS is relatively low, because all versions of OpenSSL...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.1.1u-r0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-29406_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2023-29406] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "The HTTP/1 client does not fully validate the contents of the Host header. A maliciously crafted Host header can inject additional headers or entire requests. With fix, the HTTP/1 client now refuses to send requests containing an invalid Request.Host or Request.URL.Host value.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.19.11], [1.20.6]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-45288_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2023-45288] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.21.9], [1.22.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-2097_3.15:libcrypto1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2022-2097] 3.15:libcrypto1.1 1.1.1n-r0"
              },
              "help": {
                "text": "AES OCB mode for 32-bit x86 platforms using the AES-NI assembly optimised implementation will not encrypt the entirety of the data under some circumstances. This could reveal sixteen bytes of data that was preexisting in the memory that wasn't written. In the special case of \"in place\" encryption, sixteen bytes of the plaintext would be revealed. Since OpenSSL does not support OCB based cipher suites for TLS and DTLS, they are both unaffected. Fixed in OpenSSL 3.0.5 (Affected 3.0.0-3.0.4). Fixed in OpenSSL 1.1.1q (Affected 1.1.1-1.1.1p).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.1.1q-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-0466_3.15:libssl1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2023-0466] 3.15:libssl1.1 1.1.1n-r0"
              },
              "help": {
                "text": "The function X509_VERIFY_PARAM_add0_policy() is documented to\nimplicitly enable the certificate policy check when doing certificate\nverification. However the implementation of the function does not\nenable the check which allows certificates with invalid or incorrect\npolicies to pass the certificate verification.\n\nAs suddenly enabling the policy check could break existing deployments it was\ndecided to keep the existing behavior of the X509_VERIFY_PARAM_add0_policy()\nfunction.\n\nInstead the applications that require OpenSSL to perform certificate\npolicy check need to use X509_VERIFY_PARAM_set1_policies() or explicitly\nenable the policy check by calling X509_VERIFY_PARAM_set_flags() with\nthe X509_V_FLAG_POLICY_CHECK flag argument.\n\nCertificate policy checks are disabled by default in OpenSSL and are not\ncommonly used by applications.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [3.0.8-r3]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-48795_3.15:openssh-keygen_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2023-48795] 3.15:openssh-keygen 8.8_p1-r1"
              },
              "help": {
                "text": "The SSH transport protocol with certain OpenSSH extensions, found in OpenSSH before 9.6 and other products, allows remote attackers to bypass integrity checks such that some packets are omitted (from the extension negotiation message), and a client and server may consequently end up with a connection for which some security features have been downgraded or disabled, aka a Terrapin attack. This occurs because the SSH Binary Packet Protocol (BPP), implemented by these extensions, mishandles the handshake phase and mishandles use of sequence numbers. For example, there is an effective attack against SSH's use of ChaCha20-Poly1305 (and CBC with Encrypt-then-MAC). The bypass occurs in chacha20-poly1305@openssh.com and (if CBC is used) the -etm@openssh.com MAC algorithms. This also affects Maverick Synergy Java SSH API before 3.1.0-SNAPSHOT, Dropbear through 2022.83, Ssh before 5.1.1 in Erlang/OTP, PuTTY before 0.80, AsyncSSH before 2.14.2, golang.org/x/crypto before 0.17.0, libssh before 0.10.6, libssh2 through 1.11.0, Thorn Tech SFTP Gateway before 3.4.6, Tera Term before 5.1, Paramiko before 3.4.0, jsch before 0.2.15, SFTPGo before 2.5.6, Netgate pfSense Plus through 23.09.1, Netgate pfSense CE through 2.7.2, HPN-SSH through 18.2.0, ProFTPD before 1.3.8b (and before 1.3.9rc2), ORYX CycloneSSH before 2.3.4, NetSarang XShell 7 before Build 0144, CrushFTP before 10.6.0, ConnectBot SSH library before 2.2.22, Apache MINA sshd through 2.11.0, sshj through 0.37.0, TinySSH through 20230101, trilead-ssh2 6401, LANCOM LCOS and LANconfig, FileZilla before 3.66.4, Nova before 11.8, PKIX-SSH before 14.4, SecureCRT before 9.4.3, Transmit5 before 5.10.4, Win32-OpenSSH before 9.5.0.0p1-Beta, WinSCP before 6.2.2, Bitvise SSH Server before 9.32, Bitvise SSH Client before 9.33, KiTTY through 0.76.1.13, the net-ssh gem 7.2.0 for Ruby, the mscdex ssh2 module before 1.15.0 for Node.js, the thrussh library before 0.35.1 for Rust, and the Russh crate before 0.40.2 for Rust.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [9.6_p1-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-45288_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2023-45288] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.21.9], [1.22.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-31525_golang.org/x/net_0.0.0-20200625001655-4c5254603344",
              "shortDescription": {
                "text": "[CVE-2021-31525] golang.org/x/net 0.0.0-20200625001655-4c5254603344"
              },
              "help": {
                "text": "net/http in Go before 1.15.12 and 1.16.x before 1.16.4 allows remote attackers to cause a denial of service (panic) via a large header to ReadRequest or ReadResponse. Server, Transport, and Client can each be affected in some configurations.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [0.0.0-20210428140749-89ef3d95e781]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-48795_3.15:openssh-client-common_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2023-48795] 3.15:openssh-client-common 8.8_p1-r1"
              },
              "help": {
                "text": "The SSH transport protocol with certain OpenSSH extensions, found in OpenSSH before 9.6 and other products, allows remote attackers to bypass integrity checks such that some packets are omitted (from the extension negotiation message), and a client and server may consequently end up with a connection for which some security features have been downgraded or disabled, aka a Terrapin attack. This occurs because the SSH Binary Packet Protocol (BPP), implemented by these extensions, mishandles the handshake phase and mishandles use of sequence numbers. For example, there is an effective attack against SSH's use of ChaCha20-Poly1305 (and CBC with Encrypt-then-MAC). The bypass occurs in chacha20-poly1305@openssh.com and (if CBC is used) the -etm@openssh.com MAC algorithms. This also affects Maverick Synergy Java SSH API before 3.1.0-SNAPSHOT, Dropbear through 2022.83, Ssh before 5.1.1 in Erlang/OTP, PuTTY before 0.80, AsyncSSH before 2.14.2, golang.org/x/crypto before 0.17.0, libssh before 0.10.6, libssh2 through 1.11.0, Thorn Tech SFTP Gateway before 3.4.6, Tera Term before 5.1, Paramiko before 3.4.0, jsch before 0.2.15, SFTPGo before 2.5.6, Netgate pfSense Plus through 23.09.1, Netgate pfSense CE through 2.7.2, HPN-SSH through 18.2.0, ProFTPD before 1.3.8b (and before 1.3.9rc2), ORYX CycloneSSH before 2.3.4, NetSarang XShell 7 before Build 0144, CrushFTP before 10.6.0, ConnectBot SSH library before 2.2.22, Apache MINA sshd through 2.11.0, sshj through 0.37.0, TinySSH through 20230101, trilead-ssh2 6401, LANCOM LCOS and LANconfig, FileZilla before 3.66.4, Nova before 11.8, PKIX-SSH before 14.4, SecureCRT before 9.4.3, Transmit5 before 5.10.4, Win32-OpenSSH before 9.5.0.0p1-Beta, WinSCP before 6.2.2, Bitvise SSH Server before 9.32, Bitvise SSH Client before 9.33, KiTTY through 0.76.1.13, the net-ssh gem 7.2.0 for Ruby, the mscdex ssh2 module before 1.15.0 for Node.js, the thrussh library before 0.35.1 for Rust, and the Russh crate before 0.40.2 for Rust.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [9.6_p1-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-2650_3.15:libcrypto1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2023-2650] 3.15:libcrypto1.1 1.1.1n-r0"
              },
              "help": {
                "text": "Issue summary: Processing some specially crafted ASN.1 object identifiers or\ndata containing them may be very slow.\n\nImpact summary: Applications that use OBJ_obj2txt() directly, or use any of\nthe OpenSSL subsystems OCSP, PKCS7/SMIME, CMS, CMP/CRMF or TS with no message\nsize limit may experience notable to very long delays when processing those\nmessages, which may lead to a Denial of Service.\n\nAn OBJECT IDENTIFIER is composed of a series of numbers - sub-identifiers -\nmost of which have no size limit.  OBJ_obj2txt() may be used to translate\nan ASN.1 OBJECT IDENTIFIER given in DER encoding form (using the OpenSSL\ntype ASN1_OBJECT) to its canonical numeric text form, which are the\nsub-identifiers of the OBJECT IDENTIFIER in decimal form, separated by\nperiods.\n\nWhen one of the sub-identifiers in the OBJECT IDENTIFIER is very large\n(these are sizes that are seen as absurdly large, taking up tens or hundreds\nof KiBs), the translation to a decimal number in text may take a very long\ntime.  The time complexity is O(n^2) with 'n' being the size of the\nsub-identifiers in bytes (*).\n\nWith OpenSSL 3.0, support to fetch cryptographic algorithms using names /\nidentifiers in string form was introduced.  This includes using OBJECT\nIDENTIFIERs in canonical numeric text form as identifiers for fetching\nalgorithms.\n\nSuch OBJECT IDENTIFIERs may be received through the ASN.1 structure\nAlgorithmIdentifier, which is commonly used in multiple protocols to specify\nwhat cryptographic algorithm should be used to sign or verify, encrypt or\ndecrypt, or digest passed data.\n\nApplications that call OBJ_obj2txt() directly with untrusted data are\naffected, with any version of OpenSSL.  If the use is for the mere purpose\nof display, the severity is considered low.\n\nIn OpenSSL 3.0 and newer, this affects the subsystems OCSP, PKCS7/SMIME,\nCMS, CMP/CRMF or TS.  It also impacts anything that processes X.509\ncertificates, including simple things like verifying its signature.\n\nThe impact on TLS is relatively low, because all versions of OpenSSL...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.1.1u-r0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2021-20329_go.mongodb.org/mongo-driver_1.1.2",
              "shortDescription": {
                "text": "[CVE-2021-20329] go.mongodb.org/mongo-driver 1.1.2"
              },
              "help": {
                "text": "Specific cstrings input may not be properly validated in the MongoDB Go Driver when marshalling Go objects into BSON. A malicious user could use a Go object with specific string to potentially inject additional fields into marshalled documents. This issue affects all MongoDB GO Drivers prior to and including 1.5.0.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.5.1]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-29406_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2023-29406] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "The HTTP/1 client does not fully validate the contents of the Host header. A maliciously crafted Host header can inject additional headers or entire requests. With fix, the HTTP/1 client now refuses to send requests containing an invalid Request.Host or Request.URL.Host value.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.19.11], [1.20.6]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-45288_golang.org/x/net_0.0.0-20200625001655-4c5254603344",
              "shortDescription": {
                "text": "[CVE-2023-45288] golang.org/x/net 0.0.0-20200625001655-4c5254603344"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [0.23.0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-45288_golang.org/x/net_0.0.0-20220127200216-cd36cc0744dd",
              "shortDescription": {
                "text": "[CVE-2023-45288] golang.org/x/net 0.0.0-20220127200216-cd36cc0744dd"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [0.23.0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-32148_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2022-32148] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Improper exposure of client IP addresses in net/http before Go 1.17.12 and Go 1.18.4 can be triggered by calling httputil.ReverseProxy.ServeHTTP with a Request.Header map containing a nil value for the X-Forwarded-For header, which causes ReverseProxy to set the client IP as the value of the X-Forwarded-For header.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-0465_3.15:libssl1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2023-0465] 3.15:libssl1.1 1.1.1n-r0"
              },
              "help": {
                "text": "Applications that use a non-default option when verifying certificates may be\nvulnerable to an attack from a malicious CA to circumvent certain checks.\n\nInvalid certificate policies in leaf certificates are silently ignored by\nOpenSSL and other certificate policy checks are skipped for that certificate.\nA malicious CA could use this to deliberately assert invalid certificate policies\nin order to circumvent policy checking on the certificate altogether.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.1.1t-r2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-2097_3.15:libssl1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2022-2097] 3.15:libssl1.1 1.1.1n-r0"
              },
              "help": {
                "text": "AES OCB mode for 32-bit x86 platforms using the AES-NI assembly optimised implementation will not encrypt the entirety of the data under some circumstances. This could reveal sixteen bytes of data that was preexisting in the memory that wasn't written. In the special case of \"in place\" encryption, sixteen bytes of the plaintext would be revealed. Since OpenSSL does not support OCB based cipher suites for TLS and DTLS, they are both unaffected. Fixed in OpenSSL 3.0.5 (Affected 3.0.0-3.0.4). Fixed in OpenSSL 1.1.1q (Affected 1.1.1-1.1.1p).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.1.1q-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-41717_golang.org/x/net_0.0.0-20220127200216-cd36cc0744dd",
              "shortDescription": {
                "text": "[CVE-2022-41717] golang.org/x/net 0.0.0-20220127200216-cd36cc0744dd"
              },
              "help": {
                "text": "An attacker can cause excessive memory growth in a Go server accepting HTTP/2 requests. HTTP/2 server connections contain a cache of HTTP header keys sent by the client. While the total number of entries in this cache is capped, an attacker sending very large keys can cause the server to allocate approximately 64 MiB per open connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [0.4.0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-41717_golang.org/x/net_0.0.0-20201110031124-69a78807bb2b",
              "shortDescription": {
                "text": "[CVE-2022-41717] golang.org/x/net 0.0.0-20201110031124-69a78807bb2b"
              },
              "help": {
                "text": "An attacker can cause excessive memory growth in a Go server accepting HTTP/2 requests. HTTP/2 server connections contain a cache of HTTP header keys sent by the client. While the total number of entries in this cache is capped, an attacker sending very large keys can cause the server to allocate approximately 64 MiB per open connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [0.4.0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-32148_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2022-32148] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "Improper exposure of client IP addresses in net/http before Go 1.17.12 and Go 1.18.4 can be triggered by calling httputil.ReverseProxy.ServeHTTP with a Request.Header map containing a nil value for the X-Forwarded-For header, which causes ReverseProxy to set the client IP as the value of the X-Forwarded-For header.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2024-24786_google.golang.org/protobuf_1.25.0",
              "shortDescription": {
                "text": "[CVE-2024-24786] google.golang.org/protobuf 1.25.0"
              },
              "help": {
                "text": "The protojson.Unmarshal function can enter an infinite loop when unmarshaling certain forms of invalid JSON. This condition can occur when unmarshaling into a message which contains a google.protobuf.Any value, or when the UnmarshalOptions.DiscardUnknown option is set.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.33.0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-42364_3.15:ssl_client_1.34.1-r5",
              "shortDescription": {
                "text": "[CVE-2023-42364] 3.15:ssl_client 1.34.1-r5"
              },
              "help": {
                "text": "A use-after-free vulnerability in BusyBox v.1.36.1 allows attackers to cause a denial of service via a crafted awk pattern in the awk.c evaluate function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2022-34903_3.15:gpg-agent_2.2.31-r1",
              "shortDescription": {
                "text": "[CVE-2022-34903] 3.15:gpg-agent 2.2.31-r1"
              },
              "help": {
                "text": "GnuPG through 2.3.6, in unusual situations where an attacker possesses any secret-key information from a victim's keyring and other constraints (e.g., use of GPGME) are met, allows signature forgery via injection into the status line.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [2.2.31-r2]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-51384_3.15:openssh-client-common_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2023-51384] 3.15:openssh-client-common 8.8_p1-r1"
              },
              "help": {
                "text": "In ssh-agent in OpenSSH before 9.6, certain destination constraints can be incompletely applied. When destination constraints are specified during addition of PKCS#11-hosted private keys, these constraints are only applied to the first key, even if a PKCS#11 token returns multiple keys.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [9.1_p1-r5]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-28320_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-28320] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "A denial of service vulnerability exists in curl \u003cv8.1.0 in the way libcurl provides several different backends for resolving host names, selected at build time. If it is built to use the synchronous resolver, it allows name resolves to time-out slow operations using `alarm()` and `siglongjmp()`. When doing this, libcurl used a global buffer that was not mutex protected and a multi-threaded application might therefore crash or otherwise misbehave.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [8.1.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-2975_3.15:libcrypto1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2023-2975] 3.15:libcrypto1.1 1.1.1n-r0"
              },
              "help": {
                "text": "Issue summary: The AES-SIV cipher implementation contains a bug that causes\nit to ignore empty associated data entries which are unauthenticated as\na consequence.\n\nImpact summary: Applications that use the AES-SIV algorithm and want to\nauthenticate empty data entries as associated data can be mislead by removing\nadding or reordering such empty entries as these are ignored by the OpenSSL\nimplementation. We are currently unaware of any such applications.\n\nThe AES-SIV algorithm allows for authentication of multiple associated\ndata entries along with the encryption. To authenticate empty data the\napplication has to call EVP_EncryptUpdate() (or EVP_CipherUpdate()) with\nNULL pointer as the output buffer and 0 as the input buffer length.\nThe AES-SIV implementation in OpenSSL just returns success for such a call\ninstead of performing the associated data authentication operation.\nThe empty data thus will not be authenticated.\n\nAs this issue does not affect non-empty associated data authentication and\nwe expect it to be rare for an application to use empty associated data\nentries this is qualified as Low severity issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [3.1.1-r2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-34903_3.15:gnupg-wks-client_2.2.31-r1",
              "shortDescription": {
                "text": "[CVE-2022-34903] 3.15:gnupg-wks-client 2.2.31-r1"
              },
              "help": {
                "text": "GnuPG through 2.3.6, in unusual situations where an attacker possesses any secret-key information from a victim's keyring and other constraints (e.g., use of GPGME) are met, allows signature forgery via injection into the status line.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [2.2.31-r2]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-39326_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2023-39326] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "A malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body. A malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request. Chunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-32206_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-32206] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "curl \u003c 7.84.0 supports \"chained\" HTTP compression algorithms, meaning that a serverresponse can be compressed multiple times and potentially with different algorithms. The number of acceptable \"links\" in this \"decompression chain\" was unbounded, allowing a malicious server to insert a virtually unlimited number of compression steps.The use of such a decompression chain could result in a \"malloc bomb\", makingcurl end up spending enormous amounts of allocated heap memory, or trying toand returning out of memory errors.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [7.80.0-r2]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-42364_3.15:busybox_1.34.1-r5",
              "shortDescription": {
                "text": "[CVE-2023-42364] 3.15:busybox 1.34.1-r5"
              },
              "help": {
                "text": "A use-after-free vulnerability in BusyBox v.1.36.1 allows attackers to cause a denial of service via a crafted awk pattern in the awk.c evaluate function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-39326_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2023-39326] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "A malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body. A malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request. Chunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2020-29510_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2020-29510] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "The encoding/xml package in Go versions 1.15 and earlier does not correctly preserve the semantics of directives during tokenization round-trips, which allows an attacker to craft inputs that behave in conflicting ways during different stages of processing in affected downstream applications.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.6      | Not Covered       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.15.6]   |"
              },
              "properties": {
                "security-severity": "5.6"
              }
            },
            {
              "id": "CVE-2023-45284_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2023-45284] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "On Windows, The IsLocal function does not correctly detect reserved device names in some cases. Reserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local. With fix, IsLocal now correctly reports these names as non-local.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.20.11], [1.21.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-46219_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-46219] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "When saving HSTS data to an excessively long file name, curl could end up\nremoving all contents, making subsequent requests using that file unaware of\nthe HSTS status they should otherwise use.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [8.5.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-34903_3.15:gpg_2.2.31-r1",
              "shortDescription": {
                "text": "[CVE-2022-34903] 3.15:gpg 2.2.31-r1"
              },
              "help": {
                "text": "GnuPG through 2.3.6, in unusual situations where an attacker possesses any secret-key information from a victim's keyring and other constraints (e.g., use of GPGME) are met, allows signature forgery via injection into the status line.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [2.2.31-r2]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-1705_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2022-1705] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "Acceptance of some invalid Transfer-Encoding headers in the HTTP/1 client in net/http before Go 1.17.12 and Go 1.18.4 allows HTTP request smuggling if combined with an intermediate server that also improperly fails to reject the header as invalid.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-24532_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2023-24532] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "The ScalarMult and ScalarBaseMult methods of the P256 Curve may return an incorrect result if called with some specific unreduced scalars (a scalar larger than the order of the curve). This does not impact usages of crypto/ecdsa or crypto/ecdh.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.19.7], [1.20.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-45284_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2023-45284] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "On Windows, The IsLocal function does not correctly detect reserved device names in some cases. Reserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local. With fix, IsLocal now correctly reports these names as non-local.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.20.11], [1.21.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-51384_3.15:openssh-keygen_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2023-51384] 3.15:openssh-keygen 8.8_p1-r1"
              },
              "help": {
                "text": "In ssh-agent in OpenSSH before 9.6, certain destination constraints can be incompletely applied. When destination constraints are specified during addition of PKCS#11-hosted private keys, these constraints are only applied to the first key, even if a PKCS#11 token returns multiple keys.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [9.1_p1-r5]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2022-34903_3.15:gnupg-dirmngr_2.2.31-r1",
              "shortDescription": {
                "text": "[CVE-2022-34903] 3.15:gnupg-dirmngr 2.2.31-r1"
              },
              "help": {
                "text": "GnuPG through 2.3.6, in unusual situations where an attacker possesses any secret-key information from a victim's keyring and other constraints (e.g., use of GPGME) are met, allows signature forgery via injection into the status line.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [2.2.31-r2]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-34903_3.15:gpg-wks-server_2.2.31-r1",
              "shortDescription": {
                "text": "[CVE-2022-34903] 3.15:gpg-wks-server 2.2.31-r1"
              },
              "help": {
                "text": "GnuPG through 2.3.6, in unusual situations where an attacker possesses any secret-key information from a victim's keyring and other constraints (e.g., use of GPGME) are met, allows signature forgery via injection into the status line.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [2.2.31-r2]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-39318_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2023-39318] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "The html/template package does not properly handle HTML-like \"\" comment tokens, nor hashbang \"#!\" comment tokens, in \u003cscript\u003e contexts. This may cause the template parser to improperly interpret the contents of \u003cscript\u003e contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2023-5678_3.15:libcrypto1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2023-5678] 3.15:libcrypto1.1 1.1.1n-r0"
              },
              "help": {
                "text": "Issue summary: Generating excessively long X9.42 DH keys or checking\nexcessively long X9.42 DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_generate_key() to\ngenerate an X9.42 DH key may experience long delays.  Likewise, applications\nthat use DH_check_pub_key(), DH_check_pub_key_ex() or EVP_PKEY_public_check()\nto check an X9.42 DH key or X9.42 DH parameters may experience long delays.\nWhere the key or parameters that are being checked have been obtained from\nan untrusted source this may lead to a Denial of Service.\n\nWhile DH_check() performs all the necessary checks (as of CVE-2023-3817),\nDH_check_pub_key() doesn't make any of these checks, and is therefore\nvulnerable for excessively large P and Q parameters.\n\nLikewise, while DH_generate_key() performs a check for an excessively large\nP, it doesn't check for an excessively large Q.\n\nAn application that calls DH_generate_key() or DH_check_pub_key() and\nsupplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nDH_generate_key() and DH_check_pub_key() are also called by a number of\nother OpenSSL functions.  An application calling any of those other\nfunctions may similarly be affected.  The other functions affected by this\nare DH_check_pub_key_ex(), EVP_PKEY_public_check(), and EVP_PKEY_generate().\n\nAlso vulnerable are the OpenSSL pkey command line application when using the\n\"-pubcheck\" option, as well as the OpenSSL genpkey command line application.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.1.1w-r1]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2024-0853_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2024-0853] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "curl inadvertently kept the SSL session ID for connections in its cache even when the verify status (*OCSP stapling*) test failed. A subsequent transfer to\nthe same hostname could then succeed if the session ID cache was still fresh, which then skipped the verify status check.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [8.6.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-2975_3.15:libssl1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2023-2975] 3.15:libssl1.1 1.1.1n-r0"
              },
              "help": {
                "text": "Issue summary: The AES-SIV cipher implementation contains a bug that causes\nit to ignore empty associated data entries which are unauthenticated as\na consequence.\n\nImpact summary: Applications that use the AES-SIV algorithm and want to\nauthenticate empty data entries as associated data can be mislead by removing\nadding or reordering such empty entries as these are ignored by the OpenSSL\nimplementation. We are currently unaware of any such applications.\n\nThe AES-SIV algorithm allows for authentication of multiple associated\ndata entries along with the encryption. To authenticate empty data the\napplication has to call EVP_EncryptUpdate() (or EVP_CipherUpdate()) with\nNULL pointer as the output buffer and 0 as the input buffer length.\nThe AES-SIV implementation in OpenSSL just returns success for such a call\ninstead of performing the associated data authentication operation.\nThe empty data thus will not be authenticated.\n\nAs this issue does not affect non-empty associated data authentication and\nwe expect it to be rare for an application to use empty associated data\nentries this is qualified as Low severity issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [3.1.1-r2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2024-0727_3.15:libssl1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2024-0727] 3.15:libssl1.1 1.1.1n-r0"
              },
              "help": {
                "text": "Issue summary: Processing a maliciously formatted PKCS12 file may lead OpenSSL\nto crash leading to a potential Denial of Service attack\n\nImpact summary: Applications loading files in the PKCS12 format from untrusted\nsources might terminate abruptly.\n\nA file in PKCS12 format can contain certificates and keys and may come from an\nuntrusted source. The PKCS12 specification allows certain fields to be NULL, but\nOpenSSL does not correctly check for this case. This can lead to a NULL pointer\ndereference that results in OpenSSL crashing. If an application processes PKCS12\nfiles from an untrusted source using the OpenSSL APIs then that application will\nbe vulnerable to this issue.\n\nOpenSSL APIs that are vulnerable to this are: PKCS12_parse(),\nPKCS12_unpack_p7data(), PKCS12_unpack_p7encdata(), PKCS12_unpack_authsafes()\nand PKCS12_newpass().\n\nWe have also fixed a similar issue in SMIME_write_PKCS7(). However since this\nfunction is related to writing data we do not consider it security significant.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [3.1.4-r5]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-39319_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2023-39319] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "The html/template package does not apply the proper rules for handling occurrences of \"\u003cscript\", \"\u003c!--\", and \"\u003c/script\" within JS literals in \u003cscript\u003e contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2023-3817_3.15:libcrypto1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2023-3817] 3.15:libcrypto1.1 1.1.1n-r0"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. After fixing\nCVE-2023-3446 it was discovered that a large q parameter value can also trigger\nan overly long computation during some of these checks. A correct q value,\nif present, cannot be larger than the modulus p parameter, thus it is\nunnecessary to perform these checks if q is larger than p.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulnerable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the \"-check\" option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.1.1v-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-39319_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2023-39319] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "The html/template package does not apply the proper rules for handling occurrences of \"\u003cscript\", \"\u003c!--\", and \"\u003c/script\" within JS literals in \u003cscript\u003e contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2023-1255_3.15:libssl1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2023-1255] 3.15:libssl1.1 1.1.1n-r0"
              },
              "help": {
                "text": "Issue summary: The AES-XTS cipher decryption implementation for 64 bit ARM\nplatform contains a bug that could cause it to read past the input buffer,\nleading to a crash.\n\nImpact summary: Applications that use the AES-XTS algorithm on the 64 bit ARM\nplatform can crash in rare circumstances. The AES-XTS algorithm is usually\nused for disk encryption.\n\nThe AES-XTS cipher decryption implementation for 64 bit ARM platform will read\npast the end of the ciphertext buffer if the ciphertext size is 4 mod 5 in 16\nbyte blocks, e.g. 144 bytes or 1024 bytes. If the memory after the ciphertext\nbuffer is unmapped, this will trigger a crash which results in a denial of\nservice.\n\nIf an attacker can control the size and location of the ciphertext buffer\nbeing decrypted by an application using AES-XTS on 64 bit ARM, the\napplication is affected. This is fairly unlikely making this issue\na Low severity one.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [3.1.0-r4]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-24532_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2023-24532] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "The ScalarMult and ScalarBaseMult methods of the P256 Curve may return an incorrect result if called with some specific unreduced scalars (a scalar larger than the order of the curve). This does not impact usages of crypto/ecdsa or crypto/ecdh.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.19.7], [1.20.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-39326_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2023-39326] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "A malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body. A malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request. Chunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-5678_3.15:libssl1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2023-5678] 3.15:libssl1.1 1.1.1n-r0"
              },
              "help": {
                "text": "Issue summary: Generating excessively long X9.42 DH keys or checking\nexcessively long X9.42 DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_generate_key() to\ngenerate an X9.42 DH key may experience long delays.  Likewise, applications\nthat use DH_check_pub_key(), DH_check_pub_key_ex() or EVP_PKEY_public_check()\nto check an X9.42 DH key or X9.42 DH parameters may experience long delays.\nWhere the key or parameters that are being checked have been obtained from\nan untrusted source this may lead to a Denial of Service.\n\nWhile DH_check() performs all the necessary checks (as of CVE-2023-3817),\nDH_check_pub_key() doesn't make any of these checks, and is therefore\nvulnerable for excessively large P and Q parameters.\n\nLikewise, while DH_generate_key() performs a check for an excessively large\nP, it doesn't check for an excessively large Q.\n\nAn application that calls DH_generate_key() or DH_check_pub_key() and\nsupplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nDH_generate_key() and DH_check_pub_key() are also called by a number of\nother OpenSSL functions.  An application calling any of those other\nfunctions may similarly be affected.  The other functions affected by this\nare DH_check_pub_key_ex(), EVP_PKEY_public_check(), and EVP_PKEY_generate().\n\nAlso vulnerable are the OpenSSL pkey command line application when using the\n\"-pubcheck\" option, as well as the OpenSSL genpkey command line application.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.1.1w-r1]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-27537_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-27537] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "A double free vulnerability exists in libcurl \u003c8.0.0 when sharing HSTS data between separate \"handles\". This sharing was introduced without considerations for do this sharing across separate threads but there was no indication of this fact in the documentation. Due to missing mutexes or thread locks, two threads sharing the same HSTS data could end up doing a double-free or use-after-free.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [8.0.1-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2022-4304_3.15:libcrypto1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2022-4304] 3.15:libcrypto1.1 1.1.1n-r0"
              },
              "help": {
                "text": "A timing based side channel exists in the OpenSSL RSA Decryption implementation\nwhich could be sufficient to recover a plaintext across a network in a\nBleichenbacher style attack. To achieve a successful decryption an attacker\nwould have to be able to send a very large number of trial messages for\ndecryption. The vulnerability affects all RSA padding modes: PKCS#1 v1.5,\nRSA-OEAP and RSASVE.\n\nFor example, in a TLS connection, RSA is commonly used by a client to send an\nencrypted pre-master secret to the server. An attacker that had observed a\ngenuine connection between a client and a server could use this flaw to send\ntrial messages to the server and record the time taken to process them. After a\nsufficiently large number of messages the attacker could recover the pre-master\nsecret used for the original connection and thus be able to decrypt the\napplication data sent over that connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.1.1t-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-51384_3.15:openssh-client-default_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2023-51384] 3.15:openssh-client-default 8.8_p1-r1"
              },
              "help": {
                "text": "In ssh-agent in OpenSSH before 9.6, certain destination constraints can be incompletely applied. When destination constraints are specified during addition of PKCS#11-hosted private keys, these constraints are only applied to the first key, even if a PKCS#11 token returns multiple keys.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [9.1_p1-r5]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-39318_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2023-39318] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "The html/template package does not properly handle HTML-like \"\" comment tokens, nor hashbang \"#!\" comment tokens, in \u003cscript\u003e contexts. This may cause the template parser to improperly interpret the contents of \u003cscript\u003e contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2023-39319_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2023-39319] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "The html/template package does not apply the proper rules for handling occurrences of \"\u003cscript\", \"\u003c!--\", and \"\u003c/script\" within JS literals in \u003cscript\u003e contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2023-45284_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2023-45284] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "On Windows, The IsLocal function does not correctly detect reserved device names in some cases. Reserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local. With fix, IsLocal now correctly reports these names as non-local.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.20.11], [1.21.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-4203_3.15:libcrypto1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2022-4203] 3.15:libcrypto1.1 1.1.1n-r0"
              },
              "help": {
                "text": "A read buffer overrun can be triggered in X.509 certificate verification,\nspecifically in name constraint checking. Note that this occurs\nafter certificate chain signature verification and requires either a\nCA to have signed the malicious certificate or for the application to\ncontinue certificate verification despite failure to construct a path\nto a trusted issuer.\n\nThe read buffer overrun might result in a crash which could lead to\na denial of service attack. In theory it could also result in the disclosure\nof private memory contents (such as private keys, or sensitive plaintext)\nalthough we are not aware of any working exploit leading to memory\ncontents disclosure as of the time of release of this advisory.\n\nIn a TLS client, this can be triggered by connecting to a malicious\nserver. In a TLS server, this can be triggered if the server requests\nclient authentication and a malicious client connects.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.9      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "4.9"
              }
            },
            {
              "id": "CVE-2023-45284_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2023-45284] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "On Windows, The IsLocal function does not correctly detect reserved device names in some cases. Reserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local. With fix, IsLocal now correctly reports these names as non-local.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.20.11], [1.21.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-30115_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-30115] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "Using its HSTS support, curl can be instructed to use HTTPS directly insteadof using an insecure clear-text HTTP step even when HTTP is provided in theURL. This mechanism could be bypassed if the host name in the given URL used atrailing dot while not using one when it built the HSTS cache. Or the otherway around - by having the trailing dot in the HSTS cache and *not* using thetrailing dot in the URL.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.3      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [7.83.1-r0]   |"
              },
              "properties": {
                "security-severity": "4.3"
              }
            },
            {
              "id": "CVE-2022-34903_3.15:gpgv_2.2.31-r1",
              "shortDescription": {
                "text": "[CVE-2022-34903] 3.15:gpgv 2.2.31-r1"
              },
              "help": {
                "text": "GnuPG through 2.3.6, in unusual situations where an attacker possesses any secret-key information from a victim's keyring and other constraints (e.g., use of GPGME) are met, allows signature forgery via injection into the status line.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [2.2.31-r2]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-34903_3.15:gnupg-utils_2.2.31-r1",
              "shortDescription": {
                "text": "[CVE-2022-34903] 3.15:gnupg-utils 2.2.31-r1"
              },
              "help": {
                "text": "GnuPG through 2.3.6, in unusual situations where an attacker possesses any secret-key information from a victim's keyring and other constraints (e.g., use of GPGME) are met, allows signature forgery via injection into the status line.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [2.2.31-r2]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-42363_3.15:busybox_1.34.1-r5",
              "shortDescription": {
                "text": "[CVE-2023-42363] 3.15:busybox 1.34.1-r5"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in xasprintf function in xfuncs_printf.c:344 in BusyBox v.1.36.1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.36.1-r27]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-3446_3.15:libssl1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2023-3446] 3.15:libssl1.1 1.1.1n-r0"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. One of those\nchecks confirms that the modulus ('p' parameter) is not too large. Trying to use\na very large modulus is slow and OpenSSL will not normally use a modulus which\nis over 10,000 bits in length.\n\nHowever the DH_check() function checks numerous aspects of the key or parameters\nthat have been supplied. Some of those checks use the supplied modulus value\neven if it has already been found to be too large.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulernable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the '-check' option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.1.1u-r2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-46218_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-46218] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "This flaw allows a malicious HTTP server to set \"super cookies\" in curl that\nare then passed back to more origins than what is otherwise allowed or\npossible. This allows a site to set cookies that then would get sent to\ndifferent and unrelated sites and domains.\n\nIt could do this by exploiting a mixed case flaw in curl's function that\nverifies a given cookie domain against the Public Suffix List (PSL). For\nexample a cookie could be set with `domain=co.UK` when the URL used a lower\ncase hostname `curl.co.uk`, even though `co.uk` is listed as a PSL domain.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [8.5.0-r0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-34903_3.15:gpgsm_2.2.31-r1",
              "shortDescription": {
                "text": "[CVE-2022-34903] 3.15:gpgsm 2.2.31-r1"
              },
              "help": {
                "text": "GnuPG through 2.3.6, in unusual situations where an attacker possesses any secret-key information from a victim's keyring and other constraints (e.g., use of GPGME) are met, allows signature forgery via injection into the status line.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [2.2.31-r2]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-42366_3.15:ssl_client_1.34.1-r5",
              "shortDescription": {
                "text": "[CVE-2023-42366] 3.15:ssl_client 1.34.1-r5"
              },
              "help": {
                "text": "A heap-buffer-overflow was discovered in BusyBox v.1.36.1 in the next_token function at awk.c:1159.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.36.1-r25]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2022-1705_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2022-1705] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "Acceptance of some invalid Transfer-Encoding headers in the HTTP/1 client in net/http before Go 1.17.12 and Go 1.18.4 allows HTTP request smuggling if combined with an intermediate server that also improperly fails to reject the header as invalid.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-39253_3.15:git_2.34.2-r0",
              "shortDescription": {
                "text": "[CVE-2022-39253] 3.15:git 2.34.2-r0"
              },
              "help": {
                "text": "Git is an open source, scalable, distributed revision control system. Versions prior to 2.30.6, 2.31.5, 2.32.4, 2.33.5, 2.34.5, 2.35.5, 2.36.3, and 2.37.4 are subject to exposure of sensitive information to a malicious actor. When performing a local clone (where the source and target of the clone are on the same volume), Git copies the contents of the source's `$GIT_DIR/objects` directory into the destination by either creating hardlinks to the source contents, or copying them (if hardlinks are disabled via `--no-hardlinks`). A malicious actor could convince a victim to clone a repository with a symbolic link pointing at sensitive information on the victim's machine. This can be done either by having the victim clone a malicious repository on the same machine, or having them clone a malicious repository embedded as a bare repository via a submodule from any source, provided they clone with the `--recurse-submodules` option. Git does not create symbolic links in the `$GIT_DIR/objects` directory. The problem has been patched in the versions published on 2022-10-18, and backported to v2.30.x. Potential workarounds: Avoid cloning untrusted repositories using the `--local` optimization when on a shared machine, either by passing the `--no-local` option to `git clone` or cloning from a URL that uses the `file://` scheme. Alternatively, avoid cloning repositories from untrusted sources with `--recurse-submodules` or run `git config --global protocol.file.allow user`.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [2.34.5-r0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2021-34558_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2021-34558] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "The crypto/tls package of Go through 1.16.5 does not properly assert that the type of public key in an X.509 certificate matches the expected type when doing a RSA based key exchange, allowing a malicious TLS server to cause a TLS client to panic.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.15.14], [1.16.6]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-1705_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2022-1705] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Acceptance of some invalid Transfer-Encoding headers in the HTTP/1 client in net/http before Go 1.17.12 and Go 1.18.4 allows HTTP request smuggling if combined with an intermediate server that also improperly fails to reject the header as invalid.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-24532_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2023-24532] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "The ScalarMult and ScalarBaseMult methods of the P256 Curve may return an incorrect result if called with some specific unreduced scalars (a scalar larger than the order of the curve). This does not impact usages of crypto/ecdsa or crypto/ecdh.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.19.7], [1.20.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-27538_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-27538] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "An authentication bypass vulnerability exists in libcurl prior to v8.0.0 where it reuses a previously established SSH connection despite the fact that an SSH option was modified, which should have prevented reuse. libcurl maintains a pool of previously used connections to reuse them for subsequent transfers if the configurations match. However, two SSH settings were omitted from the configuration check, allowing them to match easily, potentially leading to the reuse of an inappropriate connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [8.0.1-r0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-39318_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2023-39318] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "The html/template package does not properly handle HTML-like \"\" comment tokens, nor hashbang \"#!\" comment tokens, in \u003cscript\u003e contexts. This may cause the template parser to improperly interpret the contents of \u003cscript\u003e contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2020-8565_k8s.io/client-go_0.18.10",
              "shortDescription": {
                "text": "[CVE-2020-8565] k8s.io/client-go 0.18.10"
              },
              "help": {
                "text": "In Kubernetes, if the logging level is set to at least 9, authorization and bearer tokens will be written to log files. This can occur both in API server logs and client tool output like kubectl. This affects \u003c= v1.19.3, \u003c= v1.18.10, \u003c= v1.17.13, \u003c v1.20.0-alpha2.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [0.17.16], [0.18.14], [0.19.6], [0.20.0-alpha.2]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2022-27779_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-27779] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "libcurl wrongly allows cookies to be set for Top Level Domains (TLDs) if thehost name is provided with a trailing dot.curl can be told to receive and send cookies. curl's \"cookie engine\" can bebuilt with or without [Public Suffix List](https://publicsuffix.org/)awareness. If PSL support not provided, a more rudimentary check exists to atleast prevent cookies from being set on TLDs. This check was broken if thehost name in the URL uses a trailing dot.This can allow arbitrary sites to set cookies that then would get sent to adifferent and unrelated site or domain.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [7.83.1-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-27535_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-27535] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "An authentication bypass vulnerability exists in libcurl \u003c8.0.0 in the FTP connection reuse feature that can result in wrong credentials being used during subsequent transfers. Previously created connections are kept in a connection pool for reuse if they match the current setup. However, certain FTP settings such as CURLOPT_FTP_ACCOUNT, CURLOPT_FTP_ALTERNATIVE_TO_USER, CURLOPT_FTP_SSL_CCC, and CURLOPT_USE_SSL were not included in the configuration match checks, causing them to match too easily. This could lead to libcurl using the wrong credentials when performing a transfer, potentially allowing unauthorized access to sensitive information.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [8.0.1-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2021-41190_github.com/opencontainers/image-spec_1.0.2-0.20211117181255-693428a734f5",
              "shortDescription": {
                "text": "[CVE-2021-41190] github.com/opencontainers/image-spec 1.0.2-0.20211117181255-693428a734f5"
              },
              "help": {
                "text": "The OCI Distribution Spec project defines an API protocol to facilitate and standardize the distribution of content. In the OCI Distribution Specification version 1.0.0 and prior, the Content-Type header alone was used to determine the type of document during push and pull operations. Documents that contain both “manifests” and “layers” fields could be interpreted as either a manifest or an index in the absence of an accompanying Content-Type header. If a Content-Type header changed between two pulls of the same digest, a client may interpret the resulting content differently. The OCI Distribution Specification has been updated to require that a mediaType value present in a manifest or index match the Content-Type header used during the push and pull operations. Clients pulling from a registry may distrust the Content-Type header and reject an ambiguous document that contains both “manifests” and “layers” fields or “manifests” and “config” fields if they are unable to update to version 1.0.1 of the spec.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.0      | Not Covered       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.0.2]   |"
              },
              "properties": {
                "security-severity": "5.0"
              }
            },
            {
              "id": "CVE-2023-39326_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2023-39326] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "A malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body. A malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request. Chunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-5981_3.15:gnutls_3.7.1-r0",
              "shortDescription": {
                "text": "[CVE-2023-5981] 3.15:gnutls 3.7.1-r0"
              },
              "help": {
                "text": "A vulnerability was found that the response times to malformed ciphertexts in RSA-PSK ClientKeyExchange differ from response times of ciphertexts with correct PKCS#1 v1.5 padding.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [3.8.3-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2020-29511_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2020-29511] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "The encoding/xml package in Go (all versions) does not correctly preserve the semantics of element namespace prefixes during tokenization round-trips, which allows an attacker to craft inputs that behave in conflicting ways during different stages of processing in affected downstream applications.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.6      | Not Covered       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.15.6]   |"
              },
              "properties": {
                "security-severity": "5.6"
              }
            },
            {
              "id": "CVE-2023-24532_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2023-24532] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "The ScalarMult and ScalarBaseMult methods of the P256 Curve may return an incorrect result if called with some specific unreduced scalars (a scalar larger than the order of the curve). This does not impact usages of crypto/ecdsa or crypto/ecdh.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.19.7], [1.20.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-35260_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-35260] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "curl can be told to parse a `.netrc` file for credentials. If that file endsin a line with 4095 consecutive non-white space letters and no newline, curlwould first read past the end of the stack-based buffer, and if the readworks, write a zero byte beyond its boundary.This will in most cases cause a segfault or similar, but circumstances might also cause different outcomes.If a malicious user can provide a custom netrc file to an application or otherwise affect its contents, this flaw could be used as denial-of-service.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [7.86.0-r0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2024-0727_3.15:libcrypto1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2024-0727] 3.15:libcrypto1.1 1.1.1n-r0"
              },
              "help": {
                "text": "Issue summary: Processing a maliciously formatted PKCS12 file may lead OpenSSL\nto crash leading to a potential Denial of Service attack\n\nImpact summary: Applications loading files in the PKCS12 format from untrusted\nsources might terminate abruptly.\n\nA file in PKCS12 format can contain certificates and keys and may come from an\nuntrusted source. The PKCS12 specification allows certain fields to be NULL, but\nOpenSSL does not correctly check for this case. This can lead to a NULL pointer\ndereference that results in OpenSSL crashing. If an application processes PKCS12\nfiles from an untrusted source using the OpenSSL APIs then that application will\nbe vulnerable to this issue.\n\nOpenSSL APIs that are vulnerable to this are: PKCS12_parse(),\nPKCS12_unpack_p7data(), PKCS12_unpack_p7encdata(), PKCS12_unpack_authsafes()\nand PKCS12_newpass().\n\nWe have also fixed a similar issue in SMIME_write_PKCS7(). However since this\nfunction is related to writing data we do not consider it security significant.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [3.1.4-r5]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2020-15586_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2020-15586] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Go before 1.13.13 and 1.14.x before 1.14.5 has a data race in some net/http servers, as demonstrated by the httputil.ReverseProxy Handler, because it reads a request body and writes a response at the same time.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.13.13], [1.14.5]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-6129_3.15:libcrypto1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2023-6129] 3.15:libcrypto1.1 1.1.1n-r0"
              },
              "help": {
                "text": "Issue summary: The POLY1305 MAC (message authentication code) implementation\ncontains a bug that might corrupt the internal state of applications running\non PowerPC CPU based platforms if the CPU provides vector instructions.\n\nImpact summary: If an attacker can influence whether the POLY1305 MAC\nalgorithm is used, the application state might be corrupted with various\napplication dependent consequences.\n\nThe POLY1305 MAC (message authentication code) implementation in OpenSSL for\nPowerPC CPUs restores the contents of vector registers in a different order\nthan they are saved. Thus the contents of some of these vector registers\nare corrupted when returning to the caller. The vulnerable code is used only\non newer PowerPC processors supporting the PowerISA 2.07 instructions.\n\nThe consequences of this kind of internal application state corruption can\nbe various - from no consequences, if the calling application does not\ndepend on the contents of non-volatile XMM registers at all, to the worst\nconsequences, where the attacker could get complete control of the application\nprocess. However unless the compiler uses the vector registers for storing\npointers, the most likely consequence, if any, would be an incorrect result\nof some application dependent calculations or a crash leading to a denial of\nservice.\n\nThe POLY1305 MAC algorithm is most frequently used as part of the\nCHACHA20-POLY1305 AEAD (authenticated encryption with associated data)\nalgorithm. The most common usage of this AEAD cipher is with TLS protocol\nversions 1.2 and 1.3. If this cipher is enabled on the server a malicious\nclient can influence whether this AEAD cipher is used. This implies that\nTLS server applications using OpenSSL can be potentially impacted. However\nwe are currently not aware of any concrete application that would be affected\nby this issue therefore we consider this a Low severity security issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [3.1.4-r3]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-32205_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-32205] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "A malicious server can serve excessive amounts of `Set-Cookie:` headers in a HTTP response to curl and curl \u003c 7.84.0 stores all of them. A sufficiently large amount of (big) cookies make subsequent HTTP requests to this, or other servers to which the cookies match, create requests that become larger than the threshold that curl uses internally to avoid sending crazy large requests (1048576 bytes) and instead returns an error.This denial state might remain for as long as the same cookies are kept, match and haven't expired. Due to cookie matching rules, a server on `foo.example.com` can set cookies that also would match for `bar.example.com`, making it it possible for a \"sister server\" to effectively cause a denial of service for a sibling site on the same second level domain using this method.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.3      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [7.80.0-r2]   |"
              },
              "properties": {
                "security-severity": "4.3"
              }
            },
            {
              "id": "CVE-2024-24786_google.golang.org/protobuf_1.27.1",
              "shortDescription": {
                "text": "[CVE-2024-24786] google.golang.org/protobuf 1.27.1"
              },
              "help": {
                "text": "The protojson.Unmarshal function can enter an infinite loop when unmarshaling certain forms of invalid JSON. This condition can occur when unmarshaling into a message which contains a google.protobuf.Any value, or when the UnmarshalOptions.DiscardUnknown option is set.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.33.0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-52426_3.15:expat_2.4.7-r0",
              "shortDescription": {
                "text": "[CVE-2023-52426] 3.15:expat 2.4.7-r0"
              },
              "help": {
                "text": "libexpat through 2.5.0 allows recursive XML Entity Expansion if XML_DTD is undefined at compile time.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [2.6.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-23916_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-23916] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "An allocation of resources without limits or throttling vulnerability exists in curl \u003cv7.88.0 based on the \"chained\" HTTP compression algorithms, meaning that a server response can be compressed multiple times and potentially with differentalgorithms. The number of acceptable \"links\" in this \"decompression chain\" wascapped, but the cap was implemented on a per-header basis allowing a maliciousserver to insert a virtually unlimited number of compression steps simply byusing many headers. The use of such a decompression chain could result in a \"malloc bomb\", making curl end up spending enormous amounts of allocated heap memory, or trying to and returning out of memory errors.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [7.80.0-r6]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-4304_3.15:libssl1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2022-4304] 3.15:libssl1.1 1.1.1n-r0"
              },
              "help": {
                "text": "A timing based side channel exists in the OpenSSL RSA Decryption implementation\nwhich could be sufficient to recover a plaintext across a network in a\nBleichenbacher style attack. To achieve a successful decryption an attacker\nwould have to be able to send a very large number of trial messages for\ndecryption. The vulnerability affects all RSA padding modes: PKCS#1 v1.5,\nRSA-OEAP and RSASVE.\n\nFor example, in a TLS connection, RSA is commonly used by a client to send an\nencrypted pre-master secret to the server. An attacker that had observed a\ngenuine connection between a client and a server could use this flaw to send\ntrial messages to the server and record the time taken to process them. After a\nsufficiently large number of messages the attacker could recover the pre-master\nsecret used for the original connection and thus be able to decrypt the\napplication data sent over that connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.1.1t-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-39319_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2023-39319] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "The html/template package does not apply the proper rules for handling occurrences of \"\u003cscript\", \"\u003c!--\", and \"\u003c/script\" within JS literals in \u003cscript\u003e contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2023-3446_3.15:libcrypto1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2023-3446] 3.15:libcrypto1.1 1.1.1n-r0"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. One of those\nchecks confirms that the modulus ('p' parameter) is not too large. Trying to use\na very large modulus is slow and OpenSSL will not normally use a modulus which\nis over 10,000 bits in length.\n\nHowever the DH_check() function checks numerous aspects of the key or parameters\nthat have been supplied. Some of those checks use the supplied modulus value\neven if it has already been found to be too large.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulernable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the '-check' option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.1.1u-r2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-3817_3.15:libssl1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2023-3817] 3.15:libssl1.1 1.1.1n-r0"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. After fixing\nCVE-2023-3446 it was discovered that a large q parameter value can also trigger\nan overly long computation during some of these checks. A correct q value,\nif present, cannot be larger than the modulus p parameter, thus it is\nunnecessary to perform these checks if q is larger than p.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulnerable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the \"-check\" option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.1.1v-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-22490_3.15:git_2.34.2-r0",
              "shortDescription": {
                "text": "[CVE-2023-22490] 3.15:git 2.34.2-r0"
              },
              "help": {
                "text": "Git is a revision control system. Using a specially-crafted repository, Git prior to versions 2.39.2, 2.38.4, 2.37.6, 2.36.5, 2.35.7, 2.34.7, 2.33.7, 2.32.6, 2.31.7, and 2.30.8 can be tricked into using its local clone optimization even when using a non-local transport. Though Git will abort local clones whose source `$GIT_DIR/objects` directory contains symbolic links, the `objects` directory itself may still be a symbolic link. These two may be combined to include arbitrary files based on known paths on the victim's filesystem within the malicious repository's working copy, allowing for data exfiltration in a similar manner as CVE-2022-39253.\n\nA fix has been prepared and will appear in v2.39.2 v2.38.4 v2.37.6 v2.36.5 v2.35.7 v2.34.7 v2.33.7 v2.32.6, v2.31.7 and v2.30.8. If upgrading is impractical, two short-term workarounds are available. Avoid cloning repositories from untrusted sources with `--recurse-submodules`. Instead, consider cloning repositories without recursively cloning their submodules, and instead run `git submodule update` at each layer. Before doing so, inspect each new `.gitmodules` file to ensure that it does not contain suspicious module URLs.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [2.34.7-r0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2021-3114_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2021-3114] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "In Go before 1.14.14 and 1.15.x before 1.15.7, crypto/elliptic/p224.go can generate incorrect outputs, related to an underflow of the lowest limb during the final complete reduction in the P-224 field.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.14.14], [1.15.7]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-34903_3.15:gnupg-gpgconf_2.2.31-r1",
              "shortDescription": {
                "text": "[CVE-2022-34903] 3.15:gnupg-gpgconf 2.2.31-r1"
              },
              "help": {
                "text": "GnuPG through 2.3.6, in unusual situations where an attacker possesses any secret-key information from a victim's keyring and other constraints (e.g., use of GPGME) are met, allows signature forgery via injection into the status line.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [2.2.31-r2]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-1255_3.15:libcrypto1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2023-1255] 3.15:libcrypto1.1 1.1.1n-r0"
              },
              "help": {
                "text": "Issue summary: The AES-XTS cipher decryption implementation for 64 bit ARM\nplatform contains a bug that could cause it to read past the input buffer,\nleading to a crash.\n\nImpact summary: Applications that use the AES-XTS algorithm on the 64 bit ARM\nplatform can crash in rare circumstances. The AES-XTS algorithm is usually\nused for disk encryption.\n\nThe AES-XTS cipher decryption implementation for 64 bit ARM platform will read\npast the end of the ciphertext buffer if the ciphertext size is 4 mod 5 in 16\nbyte blocks, e.g. 144 bytes or 1024 bytes. If the memory after the ciphertext\nbuffer is unmapped, this will trigger a crash which results in a denial of\nservice.\n\nIf an attacker can control the size and location of the ciphertext buffer\nbeing decrypted by an application using AES-XTS on 64 bit ARM, the\napplication is affected. This is fairly unlikely making this issue\na Low severity one.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [3.1.0-r4]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-42365_3.15:busybox_1.34.1-r5",
              "shortDescription": {
                "text": "[CVE-2023-42365] 3.15:busybox 1.34.1-r5"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in BusyBox v.1.36.1 via a crafted awk pattern in the awk.c copyvar function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2022-43552_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-43552] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "A use after free vulnerability exists in curl \u003c7.87.0. Curl can be asked to *tunnel* virtually all protocols it supports through an HTTP proxy. HTTP proxies can (and often do) deny such tunnel operations. When getting denied to tunnel the specific protocols SMB or TELNET, curl would use a heap-allocated struct after it had been freed, in its transfer shutdown code path.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [7.80.0-r5]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-6129_3.15:libssl1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2023-6129] 3.15:libssl1.1 1.1.1n-r0"
              },
              "help": {
                "text": "Issue summary: The POLY1305 MAC (message authentication code) implementation\ncontains a bug that might corrupt the internal state of applications running\non PowerPC CPU based platforms if the CPU provides vector instructions.\n\nImpact summary: If an attacker can influence whether the POLY1305 MAC\nalgorithm is used, the application state might be corrupted with various\napplication dependent consequences.\n\nThe POLY1305 MAC (message authentication code) implementation in OpenSSL for\nPowerPC CPUs restores the contents of vector registers in a different order\nthan they are saved. Thus the contents of some of these vector registers\nare corrupted when returning to the caller. The vulnerable code is used only\non newer PowerPC processors supporting the PowerISA 2.07 instructions.\n\nThe consequences of this kind of internal application state corruption can\nbe various - from no consequences, if the calling application does not\ndepend on the contents of non-volatile XMM registers at all, to the worst\nconsequences, where the attacker could get complete control of the application\nprocess. However unless the compiler uses the vector registers for storing\npointers, the most likely consequence, if any, would be an incorrect result\nof some application dependent calculations or a crash leading to a denial of\nservice.\n\nThe POLY1305 MAC algorithm is most frequently used as part of the\nCHACHA20-POLY1305 AEAD (authenticated encryption with associated data)\nalgorithm. The most common usage of this AEAD cipher is with TLS protocol\nversions 1.2 and 1.3. If this cipher is enabled on the server a malicious\nclient can influence whether this AEAD cipher is used. This implies that\nTLS server applications using OpenSSL can be potentially impacted. However\nwe are currently not aware of any concrete application that would be affected\nby this issue therefore we consider this a Low severity security issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [3.1.4-r3]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-42363_3.15:ssl_client_1.34.1-r5",
              "shortDescription": {
                "text": "[CVE-2023-42363] 3.15:ssl_client 1.34.1-r5"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in xasprintf function in xfuncs_printf.c:344 in BusyBox v.1.36.1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.36.1-r27]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2022-32208_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-32208] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "When curl \u003c 7.84.0 does FTP transfers secured by krb5, it handles message verification failures wrongly. This flaw makes it possible for a Man-In-The-Middle attack to go unnoticed and even allows it to inject data to the client.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [7.80.0-r2]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2022-34903_3.15:gnupg_2.2.31-r1",
              "shortDescription": {
                "text": "[CVE-2022-34903] 3.15:gnupg 2.2.31-r1"
              },
              "help": {
                "text": "GnuPG through 2.3.6, in unusual situations where an attacker possesses any secret-key information from a victim's keyring and other constraints (e.g., use of GPGME) are met, allows signature forgery via injection into the status line.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [2.2.31-r2]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2020-24553_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2020-24553] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Go before 1.14.8 and 1.15.x before 1.15.1 allows XSS because text/html is the default for CGI/FCGI handlers that lack a Content-Type header.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.14.8], [1.15.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2023-42366_3.15:busybox_1.34.1-r5",
              "shortDescription": {
                "text": "[CVE-2023-42366] 3.15:busybox 1.34.1-r5"
              },
              "help": {
                "text": "A heap-buffer-overflow was discovered in BusyBox v.1.36.1 in the next_token function at awk.c:1159.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.36.1-r25]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42365_3.15:ssl_client_1.34.1-r5",
              "shortDescription": {
                "text": "[CVE-2023-42365] 3.15:ssl_client 1.34.1-r5"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in BusyBox v.1.36.1 via a crafted awk pattern in the awk.c copyvar function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-23915_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-23915] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "A cleartext transmission of sensitive information vulnerability exists in curl \u003cv7.88.0 that could cause HSTS functionality to behave incorrectly when multiple URLs are requested in parallel. Using its HSTS support, curl can be instructed to use HTTPS instead of using an insecure clear-text HTTP step even when HTTP is provided in the URL. This HSTS mechanism would however surprisingly fail when multiple transfers are done in parallel as the HSTS cache file gets overwritten by the most recentlycompleted transfer. A later HTTP-only transfer to the earlier host name would then *not* get upgraded properly to HSTS.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [7.80.0-r6]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-39318_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2023-39318] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "The html/template package does not properly handle HTML-like \"\" comment tokens, nor hashbang \"#!\" comment tokens, in \u003cscript\u003e contexts. This may cause the template parser to improperly interpret the contents of \u003cscript\u003e contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2022-1705_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2022-1705] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "Acceptance of some invalid Transfer-Encoding headers in the HTTP/1 client in net/http before Go 1.17.12 and Go 1.18.4 allows HTTP request smuggling if combined with an intermediate server that also improperly fails to reject the header as invalid.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-4203_3.15:libssl1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2022-4203] 3.15:libssl1.1 1.1.1n-r0"
              },
              "help": {
                "text": "A read buffer overrun can be triggered in X.509 certificate verification,\nspecifically in name constraint checking. Note that this occurs\nafter certificate chain signature verification and requires either a\nCA to have signed the malicious certificate or for the application to\ncontinue certificate verification despite failure to construct a path\nto a trusted issuer.\n\nThe read buffer overrun might result in a crash which could lead to\na denial of service attack. In theory it could also result in the disclosure\nof private memory contents (such as private keys, or sensitive plaintext)\nalthough we are not aware of any working exploit leading to memory\ncontents disclosure as of the time of release of this advisory.\n\nIn a TLS client, this can be triggered by connecting to a malicious\nserver. In a TLS server, this can be triggered if the server requests\nclient authentication and a malicious client connects.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.9      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "4.9"
              }
            },
            {
              "id": "CVE-2023-32665_3.15:glib_2.70.1-r0",
              "shortDescription": {
                "text": "[CVE-2023-32665] 3.15:glib 2.70.1-r0"
              },
              "help": {
                "text": "A flaw was found in GLib. GVariant deserialization is vulnerable to an exponential blowup issue where a crafted GVariant can cause excessive processing, leading to denial of service.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2007-2768_3.15:openssh-client-common_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2007-2768] 3.15:openssh-client-common 8.8_p1-r1"
              },
              "help": {
                "text": "OpenSSH, when using OPIE (One-Time Passwords in Everything) for PAM, allows remote attackers to determine the existence of certain user accounts, which displays a different response if the user account exists and is configured to use one-time passwords (OTP), a similar issue to CVE-2007-2243.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2007-2768_3.15:openssh-client-default_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2007-2768] 3.15:openssh-client-default 8.8_p1-r1"
              },
              "help": {
                "text": "OpenSSH, when using OPIE (One-Time Passwords in Everything) for PAM, allows remote attackers to determine the existence of certain user accounts, which displays a different response if the user account exists and is configured to use one-time passwords (OTP), a similar issue to CVE-2007-2243.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2007-2768_3.15:openssh-keygen_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2007-2768] 3.15:openssh-keygen 8.8_p1-r1"
              },
              "help": {
                "text": "OpenSSH, when using OPIE (One-Time Passwords in Everything) for PAM, allows remote attackers to determine the existence of certain user accounts, which displays a different response if the user account exists and is configured to use one-time passwords (OTP), a similar issue to CVE-2007-2243.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2009-3767_3.15:libssl1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2009-3767] 3.15:libssl1.1 1.1.1n-r0"
              },
              "help": {
                "text": "libraries/libldap/tls_o.c in OpenLDAP 2.2 and 2.4, and possibly other versions, when OpenSSL is used, does not properly handle a '\\0' character in a domain name in the subject's Common Name (CN) field of an X.509 certificate, which allows man-in-the-middle attackers to spoof arbitrary SSL servers via a crafted certificate issued by a legitimate Certification Authority, a related issue to CVE-2009-2408.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-32611_3.15:glib_2.70.1-r0",
              "shortDescription": {
                "text": "[CVE-2023-32611] 3.15:glib 2.70.1-r0"
              },
              "help": {
                "text": "A flaw was found in GLib. GVariant deserialization is vulnerable to a slowdown issue where a crafted GVariant can cause excessive processing, leading to denial of service.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2009-3767_3.15:libcrypto1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2009-3767] 3.15:libcrypto1.1 1.1.1n-r0"
              },
              "help": {
                "text": "libraries/libldap/tls_o.c in OpenLDAP 2.2 and 2.4, and possibly other versions, when OpenSSL is used, does not properly handle a '\\0' character in a domain name in the subject's Common Name (CN) field of an X.509 certificate, which allows man-in-the-middle attackers to spoof arbitrary SSL servers via a crafted certificate issued by a legitimate Certification Authority, a related issue to CVE-2009-2408.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2021-4209_3.15:gnutls_3.7.1-r0",
              "shortDescription": {
                "text": "[CVE-2021-4209] 3.15:gnutls 3.7.1-r0"
              },
              "help": {
                "text": "A NULL pointer dereference flaw was found in GnuTLS. As Nettle's hash update functions internally call memcpy, providing zero-length input may cause undefined behavior. This flaw leads to a denial of service after authentication in rare circumstances.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-30629_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2022-30629] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "Non-random values for ticket_age_add in session tickets in crypto/tls before Go 1.17.11 and Go 1.18.3 allow an attacker that can observe TLS handshakes to correlate successive connections by comparing ticket ages during session resumption.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.1      | Not Covered       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "3.1"
              }
            },
            {
              "id": "CVE-2023-25815_3.15:git_2.34.2-r0",
              "shortDescription": {
                "text": "[CVE-2023-25815] 3.15:git 2.34.2-r0"
              },
              "help": {
                "text": "In Git for Windows, the Windows port of Git, no localized messages are shipped with the installer. As a consequence, Git is expected not to localize messages at all, and skips the gettext initialization. However, due to a change in MINGW-packages, the `gettext()` function's implicit initialization no longer uses the runtime prefix but uses the hard-coded path `C:\\mingw64\\share\\locale` to look for localized messages. And since any authenticated user has the permission to create folders in `C:\\` (and since `C:\\mingw64` does not typically exist), it is possible for low-privilege users to place fake messages in that location where `git.exe` will pick them up in version 2.40.1.\n\nThis vulnerability is relatively hard to exploit and requires social engineering. For example, a legitimate message at the end of a clone could be maliciously modified to ask the user to direct their web browser to a malicious website, and the user might think that the message comes from Git and is legitimate. It does require local write access by the attacker, though, which makes this attack vector less likely. Version 2.40.1 contains a patch for this issue. Some workarounds are available. Do not work on a Windows machine with shared accounts, or alternatively create a `C:\\mingw64` folder and leave it empty. Users who have administrative rights may remove the permission to create folders in `C:\\`.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 2.2      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [2.34.8-r0]   |"
              },
              "properties": {
                "security-severity": "2.2"
              }
            },
            {
              "id": "CVE-2022-35252_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-35252] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "When curl is used to retrieve and parse cookies from a HTTP(S) server, itaccepts cookies using control codes that when later are sent back to a HTTPserver might make the server return 400 responses. Effectively allowing a\"sister site\" to deny service to all siblings.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.7      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [7.80.0-r3]   |"
              },
              "properties": {
                "security-severity": "3.7"
              }
            },
            {
              "id": "CVE-2022-30629_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2022-30629] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "Non-random values for ticket_age_add in session tickets in crypto/tls before Go 1.17.11 and Go 1.18.3 allow an attacker that can observe TLS handshakes to correlate successive connections by comparing ticket ages during session resumption.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.1      | Not Covered       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "3.1"
              }
            },
            {
              "id": "CVE-2023-38546_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-38546] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "This flaw allows an attacker to insert cookies at will into a running program\nusing libcurl, if the specific series of conditions are met.\n\nlibcurl performs transfers. In its API, an application creates \"easy handles\"\nthat are the individual handles for single transfers.\n\nlibcurl provides a function call that duplicates en easy handle called\n[curl_easy_duphandle](https://curl.se/libcurl/c/curl_easy_duphandle.html).\n\nIf a transfer has cookies enabled when the handle is duplicated, the\ncookie-enable state is also cloned - but without cloning the actual\ncookies. If the source handle did not read any cookies from a specific file on\ndisk, the cloned version of the handle would instead store the file name as\n`none` (using the four ASCII letters, no quotes).\n\nSubsequent use of the cloned handle that does not explicitly set a source to\nload cookies from would then inadvertently load cookies from a file named\n`none` - if such a file exists and is readable in the current directory of the\nprogram using libcurl. And if using the correct file format of course.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.7      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [8.4.0-r0]   |"
              },
              "properties": {
                "security-severity": "3.7"
              }
            },
            {
              "id": "CVE-2022-30629_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2022-30629] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Non-random values for ticket_age_add in session tickets in crypto/tls before Go 1.17.11 and Go 1.18.3 allow an attacker that can observe TLS handshakes to correlate successive connections by comparing ticket ages during session resumption.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.1      | Not Covered       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "3.1"
              }
            },
            {
              "id": "CVE-2023-2602_3.15:libcap_2.61-r0",
              "shortDescription": {
                "text": "[CVE-2023-2602] 3.15:libcap 2.61-r0"
              },
              "help": {
                "text": "A vulnerability was found in the pthread_create() function in libcap. This issue may allow a malicious actor to use cause __real_pthread_create() to return an error, which can exhaust the process memory.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.3      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [2.61-r1]   |"
              },
              "properties": {
                "security-severity": "3.3"
              }
            },
            {
              "id": "CVE-2022-30629_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2022-30629] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "Non-random values for ticket_age_add in session tickets in crypto/tls before Go 1.17.11 and Go 1.18.3 allow an attacker that can observe TLS handshakes to correlate successive connections by comparing ticket ages during session resumption.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.1      | Not Covered       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "3.1"
              }
            },
            {
              "id": "CVE-2021-36368_3.15:openssh-client-common_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2021-36368] 3.15:openssh-client-common 8.8_p1-r1"
              },
              "help": {
                "text": "An issue was discovered in OpenSSH before 8.9. If a client is using public-key authentication with agent forwarding but without -oLogLevel=verbose, and an attacker has silently modified the server to support the None authentication option, then the user cannot determine whether FIDO authentication is going to confirm that the user wishes to connect to that server, or that the user wishes to allow that server to connect to a different server on the user's behalf. NOTE: the vendor's position is \"this is not an authentication bypass, since nothing is being bypassed.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.7      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "3.7"
              }
            },
            {
              "id": "CVE-2021-36368_3.15:openssh-keygen_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2021-36368] 3.15:openssh-keygen 8.8_p1-r1"
              },
              "help": {
                "text": "An issue was discovered in OpenSSH before 8.9. If a client is using public-key authentication with agent forwarding but without -oLogLevel=verbose, and an attacker has silently modified the server to support the None authentication option, then the user cannot determine whether FIDO authentication is going to confirm that the user wishes to connect to that server, or that the user wishes to allow that server to connect to a different server on the user's behalf. NOTE: the vendor's position is \"this is not an authentication bypass, since nothing is being bypassed.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.7      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "3.7"
              }
            },
            {
              "id": "CVE-2021-36368_3.15:openssh-client-default_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2021-36368] 3.15:openssh-client-default 8.8_p1-r1"
              },
              "help": {
                "text": "An issue was discovered in OpenSSH before 8.9. If a client is using public-key authentication with agent forwarding but without -oLogLevel=verbose, and an attacker has silently modified the server to support the None authentication option, then the user cannot determine whether FIDO authentication is going to confirm that the user wishes to connect to that server, or that the user wishes to allow that server to connect to a different server on the user's behalf. NOTE: the vendor's position is \"this is not an authentication bypass, since nothing is being bypassed.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.7      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "3.7"
              }
            },
            {
              "id": "CVE-2024-28757_3.15:expat_2.4.7-r0",
              "shortDescription": {
                "text": "[CVE-2024-28757] 3.15:expat 2.4.7-r0"
              },
              "help": {
                "text": "libexpat through 2.6.1 allows an XML Entity Expansion attack when there is isolated use of external parsers (created via XML_ExternalEntityParserCreate).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [2.6.2-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-4603_3.15:libcrypto1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2024-4603] 3.15:libcrypto1.1 1.1.1n-r0"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DSA keys or parameters may be very\nslow.\n\nImpact summary: Applications that use the functions EVP_PKEY_param_check()\nor EVP_PKEY_public_check() to check a DSA public key or DSA parameters may\nexperience long delays. Where the key or parameters that are being checked\nhave been obtained from an untrusted source this may lead to a Denial of\nService.\n\nThe functions EVP_PKEY_param_check() or EVP_PKEY_public_check() perform\nvarious checks on DSA parameters. Some of those computations take a long time\nif the modulus (`p` parameter) is too large.\n\nTrying to use a very large modulus is slow and OpenSSL will not allow using\npublic keys with a modulus which is over 10,000 bits in length for signature\nverification. However the key and parameter check functions do not limit\nthe modulus size when performing the checks.\n\nAn application that calls EVP_PKEY_param_check() or EVP_PKEY_public_check()\nand supplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nThese functions are not called by OpenSSL itself on untrusted DSA keys so\nonly applications that directly call these functions may be vulnerable.\n\nAlso vulnerable are the OpenSSL pkey and pkeyparam command line applications\nwhen using the `-check` option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [3.3.0-r2]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-28085_3.15:libblkid_2.37.4-r0",
              "shortDescription": {
                "text": "[CVE-2024-28085] 3.15:libblkid 2.37.4-r0"
              },
              "help": {
                "text": "wall in util-linux through 2.40, often installed with setgid tty permissions, allows escape sequences to be sent to other users' terminals through argv. (Specifically, escape sequences received from stdin are blocked, but escape sequences received from argv are not blocked.) There may be plausible scenarios where this leads to account takeover.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [2.40-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-32465_3.15:git_2.34.2-r0",
              "shortDescription": {
                "text": "[CVE-2024-32465] 3.15:git 2.34.2-r0"
              },
              "help": {
                "text": "Git is a revision control system. The Git project recommends to avoid working in untrusted repositories, and instead to clone it first with `git clone --no-local` to obtain a clean copy. Git has specific protections to make that a safe operation even with an untrusted source repository, but vulnerabilities allow those protections to be bypassed. In the context of cloning local repositories owned by other users, this vulnerability has been covered in CVE-2024-32004. But there are circumstances where the fixes for CVE-2024-32004 are not enough: For example, when obtaining a `.zip` file containing a full copy of a Git repository, it should not be trusted by default to be safe, as e.g. hooks could be configured to run within the context of that repository. The problem has been patched in versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4. As a workaround, avoid using Git in repositories that have been obtained via archives from untrusted sources.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [2.45.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-32020_3.15:git_2.34.2-r0",
              "shortDescription": {
                "text": "[CVE-2024-32020] 3.15:git 2.34.2-r0"
              },
              "help": {
                "text": "Git is a revision control system. Prior to versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4, local clones may end up hardlinking files into the target repository's object database when source and target repository reside on the same disk. If the source repository is owned by a different user, then those hardlinked files may be rewritten at any point in time by the untrusted user. Cloning local repositories will cause Git to either copy or hardlink files of the source repository into the target repository. This significantly speeds up such local clones compared to doing a \"proper\" clone and saves both disk space and compute time. When cloning a repository located on the same disk that is owned by a different user than the current user we also end up creating such hardlinks. These files will continue to be owned and controlled by the potentially-untrusted user and can be rewritten by them at will in the future. The problem has been patched in versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [2.45.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-6237_3.15:libcrypto1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2023-6237] 3.15:libcrypto1.1 1.1.1n-r0"
              },
              "help": {
                "text": "Issue summary: Checking excessively long invalid RSA public keys may take\na long time.\n\nImpact summary: Applications that use the function EVP_PKEY_public_check()\nto check RSA public keys may experience long delays. Where the key that\nis being checked has been obtained from an untrusted source this may lead\nto a Denial of Service.\n\nWhen function EVP_PKEY_public_check() is called on RSA public keys,\na computation is done to confirm that the RSA modulus, n, is composite.\nFor valid RSA keys, n is a product of two or more large primes and this\ncomputation completes quickly. However, if n is an overly large prime,\nthen this computation would take a long time.\n\nAn application that calls EVP_PKEY_public_check() and supplies an RSA key\nobtained from an untrusted source could be vulnerable to a Denial of Service\nattack.\n\nThe function EVP_PKEY_public_check() is not called from other OpenSSL\nfunctions however it is called from the OpenSSL pkey command line\napplication. For that reason that application is also vulnerable if used\nwith the '-pubin' and '-check' options on untrusted data.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [3.1.4-r4]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-4603_3.15:libssl1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2024-4603] 3.15:libssl1.1 1.1.1n-r0"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DSA keys or parameters may be very\nslow.\n\nImpact summary: Applications that use the functions EVP_PKEY_param_check()\nor EVP_PKEY_public_check() to check a DSA public key or DSA parameters may\nexperience long delays. Where the key or parameters that are being checked\nhave been obtained from an untrusted source this may lead to a Denial of\nService.\n\nThe functions EVP_PKEY_param_check() or EVP_PKEY_public_check() perform\nvarious checks on DSA parameters. Some of those computations take a long time\nif the modulus (`p` parameter) is too large.\n\nTrying to use a very large modulus is slow and OpenSSL will not allow using\npublic keys with a modulus which is over 10,000 bits in length for signature\nverification. However the key and parameter check functions do not limit\nthe modulus size when performing the checks.\n\nAn application that calls EVP_PKEY_param_check() or EVP_PKEY_public_check()\nand supplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nThese functions are not called by OpenSSL itself on untrusted DSA keys so\nonly applications that directly call these functions may be vulnerable.\n\nAlso vulnerable are the OpenSSL pkey and pkeyparam command line applications\nwhen using the `-check` option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [3.3.0-r2]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-28834_3.15:gnutls_3.7.1-r0",
              "shortDescription": {
                "text": "[CVE-2024-28834] 3.15:gnutls 3.7.1-r0"
              },
              "help": {
                "text": "A flaw was found in GnuTLS. The Minerva attack is a cryptographic vulnerability that exploits deterministic behavior in systems like GnuTLS, leading to side-channel leaks. In specific scenarios, such as when using the GNUTLS_PRIVKEY_FLAG_REPRODUCIBLE flag, it can result in a noticeable step in nonce size from 513 to 512 bits, exposing a potential timing side-channel.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [3.8.5-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2466_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2024-2466] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "libcurl did not check the server certificate of TLS connections done to a host specified as an IP address, when built to use mbedTLS.  libcurl would wrongly avoid using the set hostname function when the specified hostname was given as an IP address, therefore completely skipping the certificate check. This affects all uses of TLS protocols (HTTPS, FTPS, IMAPS, POPS3, SMTPS, etc).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [8.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-1394_3.15:libssl1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2024-1394] 3.15:libssl1.1 1.1.1n-r0"
              },
              "help": {
                "text": "A memory leak flaw was found in Golang in the RSA encrypting/decrypting code, which might lead to a resource exhaustion vulnerability using attacker-controlled inputs​. The memory leak happens in github.com/golang-fips/openssl/openssl/rsa.go#L113. The objects leaked are pkey​ and ctx​. That function uses named return parameters to free pkey​ and ctx​ if there is an error initializing the context or setting the different properties. All return statements related to error cases follow the \"return nil, nil, fail(...)\" pattern, meaning that pkey​ and ctx​ will be nil inside the deferred function that should free them.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [3.0.0-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-6237_3.15:libssl1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2023-6237] 3.15:libssl1.1 1.1.1n-r0"
              },
              "help": {
                "text": "Issue summary: Checking excessively long invalid RSA public keys may take\na long time.\n\nImpact summary: Applications that use the function EVP_PKEY_public_check()\nto check RSA public keys may experience long delays. Where the key that\nis being checked has been obtained from an untrusted source this may lead\nto a Denial of Service.\n\nWhen function EVP_PKEY_public_check() is called on RSA public keys,\na computation is done to confirm that the RSA modulus, n, is composite.\nFor valid RSA keys, n is a product of two or more large primes and this\ncomputation completes quickly. However, if n is an overly large prime,\nthen this computation would take a long time.\n\nAn application that calls EVP_PKEY_public_check() and supplies an RSA key\nobtained from an untrusted source could be vulnerable to a Denial of Service\nattack.\n\nThe function EVP_PKEY_public_check() is not called from other OpenSSL\nfunctions however it is called from the OpenSSL pkey command line\napplication. For that reason that application is also vulnerable if used\nwith the '-pubin' and '-check' options on untrusted data.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [3.1.4-r4]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-1394_3.15:libcrypto1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2024-1394] 3.15:libcrypto1.1 1.1.1n-r0"
              },
              "help": {
                "text": "A memory leak flaw was found in Golang in the RSA encrypting/decrypting code, which might lead to a resource exhaustion vulnerability using attacker-controlled inputs​. The memory leak happens in github.com/golang-fips/openssl/openssl/rsa.go#L113. The objects leaked are pkey​ and ctx​. That function uses named return parameters to free pkey​ and ctx​ if there is an error initializing the context or setting the different properties. All return statements related to error cases follow the \"return nil, nil, fail(...)\" pattern, meaning that pkey​ and ctx​ will be nil inside the deferred function that should free them.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [3.0.0-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2511_3.15:libssl1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2024-2511] 3.15:libssl1.1 1.1.1n-r0"
              },
              "help": {
                "text": "Issue summary: Some non-default TLS server configurations can cause unbounded\nmemory growth when processing TLSv1.3 sessions\n\nImpact summary: An attacker may exploit certain server configurations to trigger\nunbounded memory growth that would lead to a Denial of Service\n\nThis problem can occur in TLSv1.3 if the non-default SSL_OP_NO_TICKET option is\nbeing used (but not if early_data support is also configured and the default\nanti-replay protection is in use). In this case, under certain conditions, the\nsession cache can get into an incorrect state and it will fail to flush properly\nas it fills. The session cache will continue to grow in an unbounded manner. A\nmalicious client could deliberately create the scenario for this failure to\nforce a Denial of Service. It may also happen by accident in normal operation.\n\nThis issue only affects TLS servers supporting TLSv1.3. It does not affect TLS\nclients.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue. OpenSSL\n1.0.2 is also not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [3.2.1-r2]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2398_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2024-2398] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "When an application tells libcurl it wants to allow HTTP/2 server push, and the amount of received headers for the push surpasses the maximum allowed limit (1000), libcurl aborts the server push. When aborting, libcurl inadvertently does not free all the previously allocated headers and instead leaks the memory.  Further, this error condition fails silently and is therefore not easily detected by an application.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [8.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2511_3.15:libcrypto1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2024-2511] 3.15:libcrypto1.1 1.1.1n-r0"
              },
              "help": {
                "text": "Issue summary: Some non-default TLS server configurations can cause unbounded\nmemory growth when processing TLSv1.3 sessions\n\nImpact summary: An attacker may exploit certain server configurations to trigger\nunbounded memory growth that would lead to a Denial of Service\n\nThis problem can occur in TLSv1.3 if the non-default SSL_OP_NO_TICKET option is\nbeing used (but not if early_data support is also configured and the default\nanti-replay protection is in use). In this case, under certain conditions, the\nsession cache can get into an incorrect state and it will fail to flush properly\nas it fills. The session cache will continue to grow in an unbounded manner. A\nmalicious client could deliberately create the scenario for this failure to\nforce a Denial of Service. It may also happen by accident in normal operation.\n\nThis issue only affects TLS servers supporting TLSv1.3. It does not affect TLS\nclients.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue. OpenSSL\n1.0.2 is also not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [3.2.1-r2]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-34397_3.15:glib_2.70.1-r0",
              "shortDescription": {
                "text": "[CVE-2024-34397] 3.15:glib 2.70.1-r0"
              },
              "help": {
                "text": "An issue was discovered in GNOME GLib before 2.78.5, and 2.79.x and 2.80.x before 2.80.1. When a GDBus-based client subscribes to signals from a trusted system service such as NetworkManager on a shared computer, other users of the same computer can send spoofed D-Bus signals that the GDBus-based client will wrongly interpret as having been sent by the trusted system service. This could lead to the GDBus-based client behaving incorrectly, with an application-dependent impact.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [2.80.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-32021_3.15:git_2.34.2-r0",
              "shortDescription": {
                "text": "[CVE-2024-32021] 3.15:git 2.34.2-r0"
              },
              "help": {
                "text": "Git is a revision control system. Prior to versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4, when cloning a local source repository that contains symlinks via the filesystem, Git may create hardlinks to arbitrary user-readable files on the same filesystem as the target repository in the `objects/` directory. Cloning a local repository over the filesystem may creating hardlinks to arbitrary user-owned files on the same filesystem in the target Git repository's `objects/` directory. When cloning a repository over the filesystem (without explicitly specifying the `file://` protocol or `--no-local`), the optimizations for local cloning\nwill be used, which include attempting to hard link the object files instead of copying them. While the code includes checks against symbolic links in the source repository, which were added during the fix for CVE-2022-39253, these checks can still be raced because the hard link operation ultimately follows symlinks. If the object on the filesystem appears as a file during the check, and then a symlink during the operation, this will allow the adversary to bypass the check and create hardlinks in the destination objects directory to arbitrary, user-readable files. The problem has been patched in versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [2.45.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2004_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2024-2004] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "When a protocol selection parameter option disables all protocols without adding any then the default set of protocols would remain in the allowed set due to an error in the logic for removing protocols. The below command would perform a request to curl.se with a plaintext protocol which has been explicitly disabled.      curl --proto -all,-http http://curl.se  The flaw is only present if the set of selected protocols disables the entire set of available protocols, in itself a command with no practical use and therefore unlikely to be encountered in real situations. The curl security team has thus assessed this to be low severity bug.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [8.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-28085_3.15:libmount_2.37.4-r0",
              "shortDescription": {
                "text": "[CVE-2024-28085] 3.15:libmount 2.37.4-r0"
              },
              "help": {
                "text": "wall in util-linux through 2.40, often installed with setgid tty permissions, allows escape sequences to be sent to other users' terminals through argv. (Specifically, escape sequences received from stdin are blocked, but escape sequences received from argv are not blocked.) There may be plausible scenarios where this leads to account takeover.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [2.40-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2379_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2024-2379] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "libcurl skips the certificate verification for a QUIC connection under certain conditions, when built to use wolfSSL. If told to use an unknown/bad cipher or curve, the error path accidentally skips the verification and returns OK, thus ignoring any certificate problems.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [8.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-28835_3.15:gnutls_3.7.1-r0",
              "shortDescription": {
                "text": "[CVE-2024-28835] 3.15:gnutls 3.7.1-r0"
              },
              "help": {
                "text": "A flaw has been discovered in GnuTLS where an application crash can be induced when attempting to verify a specially crafted .pem bundle using the \"certtool --verify-chain\" command.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [3.8.5-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-29404_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2023-29404] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. The arguments for a number of flags which are non-optional are incorrectly considered optional, allowing disallowed flags to be smuggled through the LDFLAGS sanitization. This affects usage of both the gc and gccgo compilers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-3515_3.15:libksba_1.6.0-r0",
              "shortDescription": {
                "text": "[CVE-2022-3515] 3.15:libksba 1.6.0-r0"
              },
              "help": {
                "text": "A vulnerability was found in the Libksba library due to an integer overflow within the CRL parser. The vulnerability can be exploited remotely for code execution on the target system by passing specially crafted data to the application, for example, a malicious S/MIME attachment.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [1.6.3-r0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-23914_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-23914] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "A cleartext transmission of sensitive information vulnerability exists in curl \u003cv7.88.0 that could cause HSTS functionality fail when multiple URLs are requested serially. Using its HSTS support, curl can be instructed to use HTTPS instead of usingan insecure clear-text HTTP step even when HTTP is provided in the URL. ThisHSTS mechanism would however surprisingly be ignored by subsequent transferswhen done on the same command line because the state would not be properlycarried on.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.1      | Not Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [7.80.0-r6]   |"
              },
              "properties": {
                "security-severity": "9.1"
              }
            },
            {
              "id": "CVE-2022-47629_3.15:libksba_1.6.0-r0",
              "shortDescription": {
                "text": "[CVE-2022-47629] 3.15:libksba 1.6.0-r0"
              },
              "help": {
                "text": "Libksba before 1.6.3 is prone to an integer overflow vulnerability in the CRL signature parser.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [1.6.3-r0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-29155_3.15:libldap_2.6.0-r0",
              "shortDescription": {
                "text": "[CVE-2022-29155] 3.15:libldap 2.6.0-r0"
              },
              "help": {
                "text": "In OpenLDAP 2.x before 2.5.12 and 2.6.x before 2.6.2, a SQL injection vulnerability exists in the experimental back-sql backend to slapd, via a SQL statement within an LDAP query. This can occur during an LDAP search operation when the search filter is processed, due to a lack of proper escaping.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [2.6.2-r0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-28531_3.15:openssh-keygen_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2023-28531] 3.15:openssh-keygen 8.8_p1-r1"
              },
              "help": {
                "text": "ssh-add in OpenSSH before 9.3 adds smartcard keys to ssh-agent without the intended per-hop destination constraints. The earliest affected version is 8.9.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [9.1_p1-r3]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29405_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2023-29405] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. Flags containing embedded spaces are mishandled, allowing disallowed flags to be smuggled through the LDFLAGS sanitization by including them in the argument of another flag. This only affects usage of the gccgo compiler.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2024-32002_3.15:git_2.34.2-r0",
              "shortDescription": {
                "text": "[CVE-2024-32002] 3.15:git 2.34.2-r0"
              },
              "help": {
                "text": "Git is a revision control system. Prior to versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4, repositories with submodules can be crafted in a way that exploits a bug in Git whereby it can be fooled into writing files not into the submodule's worktree but into a `.git/` directory. This allows writing a hook that will be executed while the clone operation is still running, giving the user no opportunity to inspect the code that is being executed. The problem has been patched in versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4. If symbolic link support is disabled in Git (e.g. via `git config --global core.symlinks false`), the described attack won't work. As always, it is best to avoid cloning repositories from untrusted sources.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.0      | Not Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [2.45.1-r0]   |"
              },
              "properties": {
                "security-severity": "9.0"
              }
            },
            {
              "id": "CVE-2023-38545_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-38545] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "This flaw makes curl overflow a heap based buffer in the SOCKS5 proxy\nhandshake.\n\nWhen curl is asked to pass along the host name to the SOCKS5 proxy to allow\nthat to resolve the address instead of it getting done by curl itself, the\nmaximum length that host name can be is 255 bytes.\n\nIf the host name is detected to be longer, curl switches to local name\nresolving and instead passes on the resolved address only. Due to this bug,\nthe local variable that means \"let the host resolve the name\" could get the\nwrong value during a slow SOCKS5 handshake, and contrary to the intention,\ncopy the too long host name to the target buffer instead of copying just the\nresolved address there.\n\nThe target buffer being a heap based buffer, and the host name coming from the\nURL that curl has been told to operate with.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [8.4.0-r0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2021-38297_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2021-38297] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Go before 1.16.9 and 1.17.x before 1.17.2 has a Buffer Overflow via large arguments in a function invocation from a WASM module, when GOARCH=wasm GOOS=js is used.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.16.9], [1.17.2]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2021-46848_3.15:libtasn1_4.18.0-r0",
              "shortDescription": {
                "text": "[CVE-2021-46848] 3.15:libtasn1 4.18.0-r0"
              },
              "help": {
                "text": "GNU Libtasn1 before 4.19.0 has an ETYPE_OK off-by-one array size check that affects asn1_encode_simple_der.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.1      | Not Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [4.18.0-r1]   |"
              },
              "properties": {
                "security-severity": "9.1"
              }
            },
            {
              "id": "CVE-2023-29404_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2023-29404] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. The arguments for a number of flags which are non-optional are incorrectly considered optional, allowing disallowed flags to be smuggled through the LDFLAGS sanitization. This affects usage of both the gc and gccgo compilers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-1996_github.com/emicklei/go-restful_0.0.0-20170410110728-ff4f55a20633",
              "shortDescription": {
                "text": "[CVE-2022-1996] github.com/emicklei/go-restful 0.0.0-20170410110728-ff4f55a20633"
              },
              "help": {
                "text": "Authorization Bypass Through User-Controlled Key in GitHub repository emicklei/go-restful prior to v3.8.0.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.1      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [2.16.0]   |"
              },
              "properties": {
                "security-severity": "9.1"
              }
            },
            {
              "id": "CVE-2022-32221_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-32221] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "When doing HTTP(S) transfers, libcurl might erroneously use the read callback (`CURLOPT_READFUNCTION`) to ask for data to send, even when the `CURLOPT_POSTFIELDS` option has been set, if the same handle previously was used to issue a `PUT` request which used that callback. This flaw may surprise the application and cause it to misbehave and either send off the wrong data or use memory after free or similar in the subsequent `POST` request. The problem exists in the logic for a reused handle when it is changed from a PUT to a POST.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [7.80.0-r4]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29402_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2023-29402] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "The go command may generate unexpected code at build time when using cgo. This may result in unexpected behavior when running a go program which uses cgo. This may occur when running an untrusted module which contains directories with newline characters in their names. Modules which are retrieved using the go command, i.e. via \"go get\", are not affected (modules retrieved using GOPATH-mode, i.e. GO111MODULE=off, may be affected).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29404_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2023-29404] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. The arguments for a number of flags which are non-optional are incorrectly considered optional, allowing disallowed flags to be smuggled through the LDFLAGS sanitization. This affects usage of both the gc and gccgo compilers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29404_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2023-29404] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. The arguments for a number of flags which are non-optional are incorrectly considered optional, allowing disallowed flags to be smuggled through the LDFLAGS sanitization. This affects usage of both the gc and gccgo compilers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-28531_3.15:openssh-client-default_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2023-28531] 3.15:openssh-client-default 8.8_p1-r1"
              },
              "help": {
                "text": "ssh-add in OpenSSH before 9.3 adds smartcard keys to ssh-agent without the intended per-hop destination constraints. The earliest affected version is 8.9.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [9.1_p1-r3]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29402_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2023-29402] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "The go command may generate unexpected code at build time when using cgo. This may result in unexpected behavior when running a go program which uses cgo. This may occur when running an untrusted module which contains directories with newline characters in their names. Modules which are retrieved using the go command, i.e. via \"go get\", are not affected (modules retrieved using GOPATH-mode, i.e. GO111MODULE=off, may be affected).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29405_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2023-29405] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. Flags containing embedded spaces are mishandled, allowing disallowed flags to be smuggled through the LDFLAGS sanitization by including them in the argument of another flag. This only affects usage of the gccgo compiler.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2021-38297_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2021-38297] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "Go before 1.16.9 and 1.17.x before 1.17.2 has a Buffer Overflow via large arguments in a function invocation from a WASM module, when GOARCH=wasm GOOS=js is used.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.16.9], [1.17.2]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-28531_3.15:openssh-client-common_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2023-28531] 3.15:openssh-client-common 8.8_p1-r1"
              },
              "help": {
                "text": "ssh-add in OpenSSH before 9.3 adds smartcard keys to ssh-agent without the intended per-hop destination constraints. The earliest affected version is 8.9.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [9.1_p1-r3]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29402_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2023-29402] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "The go command may generate unexpected code at build time when using cgo. This may result in unexpected behavior when running a go program which uses cgo. This may occur when running an untrusted module which contains directories with newline characters in their names. Modules which are retrieved using the go command, i.e. via \"go get\", are not affected (modules retrieved using GOPATH-mode, i.e. GO111MODULE=off, may be affected).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29402_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2023-29402] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "The go command may generate unexpected code at build time when using cgo. This may result in unexpected behavior when running a go program which uses cgo. This may occur when running an untrusted module which contains directories with newline characters in their names. Modules which are retrieved using the go command, i.e. via \"go get\", are not affected (modules retrieved using GOPATH-mode, i.e. GO111MODULE=off, may be affected).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-1587_3.15:pcre2_10.39-r0",
              "shortDescription": {
                "text": "[CVE-2022-1587] 3.15:pcre2 10.39-r0"
              },
              "help": {
                "text": "An out-of-bounds read vulnerability was discovered in the PCRE2 library in the get_recurse_data_length() function of the pcre2_jit_compile.c file. This issue affects recursions in JIT-compiled regular expressions caused by duplicate data transfers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.1      | Not Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [10.40-r0]   |"
              },
              "properties": {
                "security-severity": "9.1"
              }
            },
            {
              "id": "CVE-2023-29405_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2023-29405] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. Flags containing embedded spaces are mishandled, allowing disallowed flags to be smuggled through the LDFLAGS sanitization by including them in the argument of another flag. This only affects usage of the gccgo compiler.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-1586_3.15:pcre2_10.39-r0",
              "shortDescription": {
                "text": "[CVE-2022-1586] 3.15:pcre2 10.39-r0"
              },
              "help": {
                "text": "An out-of-bounds read vulnerability was discovered in the PCRE2 library in the compile_xclass_matchingpath() function of the pcre2_jit_compile.c file. This involves a unicode property matching issue in JIT-compiled regular expressions. The issue occurs because the character was not fully read in case-less matching within JIT.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.1      | Not Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [10.40-r0]   |"
              },
              "properties": {
                "security-severity": "9.1"
              }
            },
            {
              "id": "CVE-2023-29405_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2023-29405] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. Flags containing embedded spaces are mishandled, allowing disallowed flags to be smuggled through the LDFLAGS sanitization by including them in the argument of another flag. This only affects usage of the gccgo compiler.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-49210_3.15:libssl1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2023-49210] 3.15:libssl1.1 1.1.1n-r0"
              },
              "help": {
                "text": "The openssl (aka node-openssl) NPM package through 2.0.0 was characterized as \"a nonsense wrapper with no real purpose\" by its author, and accepts an opts argument that contains a verb field (used for command execution). NOTE: This vulnerability only affects products that are no longer supported by the maintainer.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-49210_3.15:libcrypto1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2023-49210] 3.15:libcrypto1.1 1.1.1n-r0"
              },
              "help": {
                "text": "The openssl (aka node-openssl) NPM package through 2.0.0 was characterized as \"a nonsense wrapper with no real purpose\" by its author, and accepts an opts argument that contains a verb field (used for command execution). NOTE: This vulnerability only affects products that are no longer supported by the maintainer.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-24537_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2023-24537] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "Calling any of the Parse functions on Go source code which contains //line directives with very large line numbers can cause an infinite loop due to integer overflow.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41724_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2022-41724] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Large handshake records may cause panics in crypto/tls. Both clients and servers may send large TLS handshake records which cause servers and clients, respectively, to panic when attempting to construct responses. This affects all TLS 1.3 clients, TLS 1.2 clients which explicitly enable session resumption (by setting Config.ClientSessionCache to a non-nil value), and TLS 1.3 servers which request client certificates (by setting Config.ClientAuth \u003e= RequestClientCert).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-38561_golang.org/x/text_0.3.2",
              "shortDescription": {
                "text": "[CVE-2021-38561] golang.org/x/text 0.3.2"
              },
              "help": {
                "text": "golang.org/x/text/language in golang.org/x/text before 0.3.7 can panic with an out-of-bounds read during BCP 47 language tag parsing. Index calculation is mishandled. If parsing untrusted user input, this can be used as a vector for a denial-of-service attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [0.3.7]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-29403_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2023-29403] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "On Unix platforms, the Go runtime does not behave differently when a binary is run with the setuid/setgid bits. This can be dangerous in certain cases, such as when dumping memory state, or assuming the status of standard i/o file descriptors. If a setuid/setgid binary is executed with standard I/O file descriptors closed, opening any files can result in unexpected content being read or written with elevated privileges. Similarly, if a setuid/setgid program is terminated, either via panic or signal, it may leak the contents of its registers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2022-30634_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2022-30634] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "Infinite loop in Read in crypto/rand before Go 1.17.11 and Go 1.18.3 on Windows allows attacker to cause an indefinite hang by passing a buffer larger than 1 \u003c\u003c 32 - 1 bytes.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-41772_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2021-41772] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Go before 1.16.10 and 1.17.x before 1.17.3 allows an archive/zip Reader.Open panic via a crafted ZIP archive containing an invalid name or an empty filename field.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.16.10], [1.17.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-33194_golang.org/x/net_0.0.0-20201110031124-69a78807bb2b",
              "shortDescription": {
                "text": "[CVE-2021-33194] golang.org/x/net 0.0.0-20201110031124-69a78807bb2b"
              },
              "help": {
                "text": "golang.org/x/net before v0.0.0-20210520170846-37e1c6afe023 allows attackers to cause a denial of service (infinite loop) via crafted ParseFragment input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [0.0.0-20210520170846-37e1c6afe023]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41720_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2022-41720] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "On Windows, restricted files can be accessed via os.DirFS and http.Dir. The os.DirFS function and http.Dir type provide access to a tree of files rooted at a given directory. These functions permit access to Windows device files under that root. For example, os.DirFS(\"C:/tmp\").Open(\"COM1\") opens the COM1 device. Both os.DirFS and http.Dir only provide read-only filesystem access. In addition, on Windows, an os.DirFS for the directory (the root of the current drive) can permit a maliciously crafted path to escape from the drive and access any path on the system. With fix applied, the behavior of os.DirFS(\"\") has changed. Previously, an empty root was treated equivalently to \"/\", so os.DirFS(\"\").Open(\"tmp\") would open the path \"/tmp\". This now returns an error.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.18.9], [1.19.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45283_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2023-45283] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "The filepath package does not recognize paths with a \\??\\ prefix as special. On Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x. Before fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b. Similarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b. In addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name. UPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.20.11], [1.20.12], [1.21.4], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-2880_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2022-2880] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "Requests forwarded by ReverseProxy include the raw query parameters from the inbound request, including unparsable parameters rejected by net/http. This could permit query parameter smuggling when a Go proxy forwards a parameter with an unparsable value. After fix, ReverseProxy sanitizes the query parameters in the forwarded query when the outbound request's Form field is set after the ReverseProxy. Director function returns, indicating that the proxy has parsed the query parameters. Proxies which do not parse query parameters continue to forward the original query parameters unchanged.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.18.7], [1.19.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-33194_golang.org/x/net_0.0.0-20200625001655-4c5254603344",
              "shortDescription": {
                "text": "[CVE-2021-33194] golang.org/x/net 0.0.0-20200625001655-4c5254603344"
              },
              "help": {
                "text": "golang.org/x/net before v0.0.0-20210520170846-37e1c6afe023 allows attackers to cause a denial of service (infinite loop) via crafted ParseFragment input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [0.0.0-20210520170846-37e1c6afe023]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-2880_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2022-2880] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "Requests forwarded by ReverseProxy include the raw query parameters from the inbound request, including unparsable parameters rejected by net/http. This could permit query parameter smuggling when a Go proxy forwards a parameter with an unparsable value. After fix, ReverseProxy sanitizes the query parameters in the forwarded query when the outbound request's Form field is set after the ReverseProxy. Director function returns, indicating that the proxy has parsed the query parameters. Proxies which do not parse query parameters continue to forward the original query parameters unchanged.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.18.7], [1.19.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-27191_golang.org/x/crypto_0.0.0-20210220033148-5ea612d1eb83",
              "shortDescription": {
                "text": "[CVE-2022-27191] golang.org/x/crypto 0.0.0-20210220033148-5ea612d1eb83"
              },
              "help": {
                "text": "The golang.org/x/crypto/ssh package before 0.0.0-20220314234659-1baeb1ce4c0b for Go allows an attacker to crash a server in certain circumstances involving AddHostKey.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [0.0.0-20220314234659-1baeb1ce4c0b]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41716_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2022-41716] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "Due to unsanitized NUL values, attackers may be able to maliciously set environment variables on Windows. In syscall.StartProcess and os/exec.Cmd, invalid environment variable values containing NUL values are not properly checked for. A malicious environment variable value can exploit this behavior to set a value for a different environment variable. For example, the environment variable string \"A=B\\x00C=D\" sets the variables \"A=B\" and \"C=D\".",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.18.8], [1.19.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-35945_3.15:nghttp2-libs_1.46.0-r0",
              "shortDescription": {
                "text": "[CVE-2023-35945] 3.15:nghttp2-libs 1.46.0-r0"
              },
              "help": {
                "text": "Envoy is a cloud-native high-performance edge/middle/service proxy. Envoy’s HTTP/2 codec may leak a header map and bookkeeping structures upon receiving `RST_STREAM` immediately followed by the `GOAWAY` frames from an upstream server. In nghttp2, cleanup of pending requests due to receipt of the `GOAWAY` frame skips de-allocation of the bookkeeping structure and pending compressed header. The error return [code path] is taken if connection is already marked for not sending more requests due to `GOAWAY` frame. The clean-up code is right after the return statement, causing memory leak. Denial of service through memory exhaustion. This vulnerability was patched in versions(s) 1.26.3, 1.25.8, 1.24.9, 1.23.11.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [1.46.0-r1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-32149_golang.org/x/text_0.3.2",
              "shortDescription": {
                "text": "[CVE-2022-32149] golang.org/x/text 0.3.2"
              },
              "help": {
                "text": "An attacker may cause a denial of service by crafting an Accept-Language header which ParseAcceptLanguage will take significant time to parse.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [0.3.8]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-23773_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2022-23773] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "cmd/go in Go before 1.16.14 and 1.17.x before 1.17.7 can misinterpret branch names that falsely appear to be version tags. This can lead to incorrect access control if an actor is supposed to be able to create branches but not tags.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.16.14], [1.17.7]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-2880_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2022-2880] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "Requests forwarded by ReverseProxy include the raw query parameters from the inbound request, including unparsable parameters rejected by net/http. This could permit query parameter smuggling when a Go proxy forwards a parameter with an unparsable value. After fix, ReverseProxy sanitizes the query parameters in the forwarded query when the outbound request's Form field is set after the ReverseProxy. Director function returns, indicating that the proxy has parsed the query parameters. Proxies which do not parse query parameters continue to forward the original query parameters unchanged.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.18.7], [1.19.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24537_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2023-24537] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "Calling any of the Parse functions on Go source code which contains //line directives with very large line numbers can cause an infinite loop due to integer overflow.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41715_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2022-41715] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Programs which compile regular expressions from untrusted sources may be vulnerable to memory exhaustion or denial of service. The parsed regexp representation is linear in the size of the input, but in some cases the constant factor can be as high as 40,000, making relatively small regexps consume much larger amounts of memory. After fix, each regexp being parsed is limited to a 256 MB memory footprint. Regular expressions whose representation would use more space than that are rejected. Normal use of regular expressions is unaffected.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.18.7], [1.19.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45285_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2023-45285] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "Using go get to fetch a module with the \".git\" suffix may unexpectedly fallback to the insecure \"git://\" protocol if the module is unavailable via the secure \"https://\" and \"git+ssh://\" protocols, even if GOINSECURE is not set for said module. This only affects users who are not using the module proxy and are fetching modules directly (i.e. GOPROXY=off).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24537_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2023-24537] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Calling any of the Parse functions on Go source code which contains //line directives with very large line numbers can cause an infinite loop due to integer overflow.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-23773_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2022-23773] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "cmd/go in Go before 1.16.14 and 1.17.x before 1.17.7 can misinterpret branch names that falsely appear to be version tags. This can lead to incorrect access control if an actor is supposed to be able to create branches but not tags.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.16.14], [1.17.7]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-29403_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2023-29403] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "On Unix platforms, the Go runtime does not behave differently when a binary is run with the setuid/setgid bits. This can be dangerous in certain cases, such as when dumping memory state, or assuming the status of standard i/o file descriptors. If a setuid/setgid binary is executed with standard I/O file descriptors closed, opening any files can result in unexpected content being read or written with elevated privileges. Similarly, if a setuid/setgid program is terminated, either via panic or signal, it may leak the contents of its registers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2022-30580_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2022-30580] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "Code injection in Cmd.Start in os/exec before Go 1.17.11 and Go 1.18.3 allows execution of any binaries in the working directory named either \"..com\" or \"..exe\" by calling Cmd.Run, Cmd.Start, Cmd.Output, or Cmd.CombinedOutput when Cmd.Path is unset.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2023-29491_3.15:ncurses-terminfo-base_6.3_p20211120-r0",
              "shortDescription": {
                "text": "[CVE-2023-29491] 3.15:ncurses-terminfo-base 6.3_p20211120-r0"
              },
              "help": {
                "text": "ncurses before 6.4 20230408, when used by a setuid application, allows local users to trigger security-relevant memory corruption via malformed data in a terminfo database file that is found in $HOME/.terminfo or reached via the TERMINFO or TERM environment variable.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [6.3_p20211120-r2]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2023-0361_3.15:gnutls_3.7.1-r0",
              "shortDescription": {
                "text": "[CVE-2023-0361] 3.15:gnutls 3.7.1-r0"
              },
              "help": {
                "text": "A timing side-channel in the handling of RSA ClientKeyExchange messages was discovered in GnuTLS. This side-channel can be sufficient to recover the key encrypted in the RSA ciphertext across a network in a Bleichenbacher style attack. To achieve a successful decryption the attacker would need to send a large amount of specially crafted messages to the vulnerable server. By recovering the secret from the ClientKeyExchange message, the attacker would be able to decrypt the application data exchanged over that connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.4      | Not Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [3.7.1-r2]   |"
              },
              "properties": {
                "security-severity": "7.4"
              }
            },
            {
              "id": "CVE-2022-41409_3.15:pcre2_10.39-r0",
              "shortDescription": {
                "text": "[CVE-2022-41409] 3.15:pcre2 10.39-r0"
              },
              "help": {
                "text": "Integer overflow vulnerability in pcre2test before 10.41 allows attackers to cause a denial of service or other unspecified impacts via negative input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [10.42-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41716_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2022-41716] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Due to unsanitized NUL values, attackers may be able to maliciously set environment variables on Windows. In syscall.StartProcess and os/exec.Cmd, invalid environment variable values containing NUL values are not properly checked for. A malicious environment variable value can exploit this behavior to set a value for a different environment variable. For example, the environment variable string \"A=B\\x00C=D\" sets the variables \"A=B\" and \"C=D\".",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.18.8], [1.19.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-29804_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2022-29804] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Incorrect conversion of certain invalid paths to valid, absolute paths in Clean in path/filepath before Go 1.17.11 and Go 1.18.3 on Windows allows potential directory traversal attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-43565_golang.org/x/crypto_0.0.0-20200622213623-75b288015ac9",
              "shortDescription": {
                "text": "[CVE-2021-43565] golang.org/x/crypto 0.0.0-20200622213623-75b288015ac9"
              },
              "help": {
                "text": "The x/crypto/ssh package before 0.0.0-20211202192323-5770296d904e of golang.org/x/crypto allows an attacker to panic an SSH server.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [0.0.0-20211202192323-5770296d904e]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2024-0553_3.15:gnutls_3.7.1-r0",
              "shortDescription": {
                "text": "[CVE-2024-0553] 3.15:gnutls 3.7.1-r0"
              },
              "help": {
                "text": "A vulnerability was found in GnuTLS. The response times to malformed ciphertexts in RSA-PSK ClientKeyExchange differ from the response times of ciphertexts with correct PKCS#1 v1.5 padding. This issue may allow a remote attacker to perform a timing side-channel attack in the RSA-PSK key exchange, potentially leading to the leakage of sensitive data. CVE-2024-0553 is designated as an incomplete resolution for CVE-2023-5981.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [3.8.3-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-7104_3.15:sqlite-libs_3.36.0-r0",
              "shortDescription": {
                "text": "[CVE-2023-7104] 3.15:sqlite-libs 3.36.0-r0"
              },
              "help": {
                "text": "A vulnerability was found in SQLite SQLite3 up to 3.43.0 and classified as critical. This issue affects the function sessionReadRecord of the file ext/session/sqlite3session.c of the component make alltest Handler. The manipulation leads to heap-based buffer overflow. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-248999.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.3      | Not Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [3.41.2-r3]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2023-29403_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2023-29403] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "On Unix platforms, the Go runtime does not behave differently when a binary is run with the setuid/setgid bits. This can be dangerous in certain cases, such as when dumping memory state, or assuming the status of standard i/o file descriptors. If a setuid/setgid binary is executed with standard I/O file descriptors closed, opening any files can result in unexpected content being read or written with elevated privileges. Similarly, if a setuid/setgid program is terminated, either via panic or signal, it may leak the contents of its registers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2022-27191_golang.org/x/crypto_0.0.0-20200622213623-75b288015ac9",
              "shortDescription": {
                "text": "[CVE-2022-27191] golang.org/x/crypto 0.0.0-20200622213623-75b288015ac9"
              },
              "help": {
                "text": "The golang.org/x/crypto/ssh package before 0.0.0-20220314234659-1baeb1ce4c0b for Go allows an attacker to crash a server in certain circumstances involving AddHostKey.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [0.0.0-20220314234659-1baeb1ce4c0b]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-32149_golang.org/x/text_0.3.7",
              "shortDescription": {
                "text": "[CVE-2022-32149] golang.org/x/text 0.3.7"
              },
              "help": {
                "text": "An attacker may cause a denial of service by crafting an Accept-Language header which ParseAcceptLanguage will take significant time to parse.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [0.3.8]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-39323_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2023-39323] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "Line directives (\"//line\") can be used to bypass the restrictions on \"//go:cgo_\" directives, allowing blocked linker and compiler flags to be passed during compilation. This can result in unexpected execution of arbitrary code when running \"go build\". The line directive requires the absolute path of the file in which the directive lives, which makes exploiting this issue significantly more complex.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.20.9], [1.21.2]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2023-45283_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2023-45283] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "The filepath package does not recognize paths with a \\??\\ prefix as special. On Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x. Before fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b. Similarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b. In addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name. UPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.20.11], [1.20.12], [1.21.4], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-2603_3.15:libcap_2.61-r0",
              "shortDescription": {
                "text": "[CVE-2023-2603] 3.15:libcap 2.61-r0"
              },
              "help": {
                "text": "A vulnerability was found in libcap. This issue occurs in the _libcap_strdup() function and can lead to an integer overflow if the input string is close to 4GiB.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [2.61-r1]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2022-30634_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2022-30634] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "Infinite loop in Read in crypto/rand before Go 1.17.11 and Go 1.18.3 on Windows allows attacker to cause an indefinite hang by passing a buffer larger than 1 \u003c\u003c 32 - 1 bytes.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-3115_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2021-3115] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Go before 1.14.14 and 1.15.x before 1.15.7 on Windows is vulnerable to Command Injection and remote code execution when using the \"go get\" command to fetch modules that make use of cgo (for example, cgo can execute a gcc program from an untrusted download).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.14.14], [1.15.7]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30580_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2022-30580] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "Code injection in Cmd.Start in os/exec before Go 1.17.11 and Go 1.18.3 allows execution of any binaries in the working directory named either \"..com\" or \"..exe\" by calling Cmd.Run, Cmd.Start, Cmd.Output, or Cmd.CombinedOutput when Cmd.Path is unset.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2022-29804_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2022-29804] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "Incorrect conversion of certain invalid paths to valid, absolute paths in Clean in path/filepath before Go 1.17.11 and Go 1.18.3 on Windows allows potential directory traversal attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41720_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2022-41720] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "On Windows, restricted files can be accessed via os.DirFS and http.Dir. The os.DirFS function and http.Dir type provide access to a tree of files rooted at a given directory. These functions permit access to Windows device files under that root. For example, os.DirFS(\"C:/tmp\").Open(\"COM1\") opens the COM1 device. Both os.DirFS and http.Dir only provide read-only filesystem access. In addition, on Windows, an os.DirFS for the directory (the root of the current drive) can permit a maliciously crafted path to escape from the drive and access any path on the system. With fix applied, the behavior of os.DirFS(\"\") has changed. Previously, an empty root was treated equivalently to \"/\", so os.DirFS(\"\").Open(\"tmp\") would open the path \"/tmp\". This now returns an error.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.18.9], [1.19.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41716_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2022-41716] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "Due to unsanitized NUL values, attackers may be able to maliciously set environment variables on Windows. In syscall.StartProcess and os/exec.Cmd, invalid environment variable values containing NUL values are not properly checked for. A malicious environment variable value can exploit this behavior to set a value for a different environment variable. For example, the environment variable string \"A=B\\x00C=D\" sets the variables \"A=B\" and \"C=D\".",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.18.8], [1.19.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45285_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2023-45285] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Using go get to fetch a module with the \".git\" suffix may unexpectedly fallback to the insecure \"git://\" protocol if the module is unavailable via the secure \"https://\" and \"git+ssh://\" protocols, even if GOINSECURE is not set for said module. This only affects users who are not using the module proxy and are fetching modules directly (i.e. GOPROXY=off).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45283_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2023-45283] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "The filepath package does not recognize paths with a \\??\\ prefix as special. On Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x. Before fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b. Similarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b. In addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name. UPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.20.11], [1.20.12], [1.21.4], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-2880_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2022-2880] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Requests forwarded by ReverseProxy include the raw query parameters from the inbound request, including unparsable parameters rejected by net/http. This could permit query parameter smuggling when a Go proxy forwards a parameter with an unparsable value. After fix, ReverseProxy sanitizes the query parameters in the forwarded query when the outbound request's Form field is set after the ReverseProxy. Director function returns, indicating that the proxy has parsed the query parameters. Proxies which do not parse query parameters continue to forward the original query parameters unchanged.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.18.7], [1.19.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-41771_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2021-41771] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "ImportedSymbols in debug/macho (for Open or OpenFat) in Go before 1.16.10 and 1.17.x before 1.17.3 Accesses a Memory Location After the End of a Buffer, aka an out-of-bounds slice situation.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.16.10], [1.17.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41722_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2022-41722] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "A path traversal vulnerability exists in filepath.Clean on Windows. On Windows, the filepath.Clean function could transform an invalid path such as \"a/../c:/b\" into the valid path \"c:\\b\". This transformation of a relative (if invalid) path into an absolute path could enable a directory traversal attack. After fix, the filepath.Clean function transforms this path into the relative (but still invalid) path \".\\c:\\b\".",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30630_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2022-30630] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Uncontrolled recursion in Glob in io/fs before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a path which contains a large number of path separators.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-43565_golang.org/x/crypto_0.0.0-20210220033148-5ea612d1eb83",
              "shortDescription": {
                "text": "[CVE-2021-43565] golang.org/x/crypto 0.0.0-20210220033148-5ea612d1eb83"
              },
              "help": {
                "text": "The x/crypto/ssh package before 0.0.0-20211202192323-5770296d904e of golang.org/x/crypto allows an attacker to panic an SSH server.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [0.0.0-20211202192323-5770296d904e]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41724_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2022-41724] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "Large handshake records may cause panics in crypto/tls. Both clients and servers may send large TLS handshake records which cause servers and clients, respectively, to panic when attempting to construct responses. This affects all TLS 1.3 clients, TLS 1.2 clients which explicitly enable session resumption (by setting Config.ClientSessionCache to a non-nil value), and TLS 1.3 servers which request client certificates (by setting Config.ClientAuth \u003e= RequestClientCert).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45285_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2023-45285] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "Using go get to fetch a module with the \".git\" suffix may unexpectedly fallback to the insecure \"git://\" protocol if the module is unavailable via the secure \"https://\" and \"git+ssh://\" protocols, even if GOINSECURE is not set for said module. This only affects users who are not using the module proxy and are fetching modules directly (i.e. GOPROXY=off).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-29491_3.15:ncurses-libs_6.3_p20211120-r0",
              "shortDescription": {
                "text": "[CVE-2023-29491] 3.15:ncurses-libs 6.3_p20211120-r0"
              },
              "help": {
                "text": "ncurses before 6.4 20230408, when used by a setuid application, allows local users to trigger security-relevant memory corruption via malformed data in a terminfo database file that is found in $HOME/.terminfo or reached via the TERMINFO or TERM environment variable.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [6.3_p20211120-r2]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2022-30630_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2022-30630] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "Uncontrolled recursion in Glob in io/fs before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a path which contains a large number of path separators.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41716_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2022-41716] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "Due to unsanitized NUL values, attackers may be able to maliciously set environment variables on Windows. In syscall.StartProcess and os/exec.Cmd, invalid environment variable values containing NUL values are not properly checked for. A malicious environment variable value can exploit this behavior to set a value for a different environment variable. For example, the environment variable string \"A=B\\x00C=D\" sets the variables \"A=B\" and \"C=D\".",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.18.8], [1.19.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-39323_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2023-39323] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Line directives (\"//line\") can be used to bypass the restrictions on \"//go:cgo_\" directives, allowing blocked linker and compiler flags to be passed during compilation. This can result in unexpected execution of arbitrary code when running \"go build\". The line directive requires the absolute path of the file in which the directive lives, which makes exploiting this issue significantly more complex.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.20.9], [1.21.2]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2016-7798_3.15:libcrypto1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2016-7798] 3.15:libcrypto1.1 1.1.1n-r0"
              },
              "help": {
                "text": "The openssl gem for Ruby uses the same initialization vector (IV) in GCM Mode (aes-*-gcm) when the IV is set before the key, which makes it easier for context-dependent attackers to bypass the encryption protection mechanism.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [3.0.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-29804_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2022-29804] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "Incorrect conversion of certain invalid paths to valid, absolute paths in Clean in path/filepath before Go 1.17.11 and Go 1.18.3 on Windows allows potential directory traversal attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45283_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2023-45283] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "The filepath package does not recognize paths with a \\??\\ prefix as special. On Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x. Before fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b. Similarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b. In addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name. UPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.20.11], [1.20.12], [1.21.4], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41715_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2022-41715] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "Programs which compile regular expressions from untrusted sources may be vulnerable to memory exhaustion or denial of service. The parsed regexp representation is linear in the size of the input, but in some cases the constant factor can be as high as 40,000, making relatively small regexps consume much larger amounts of memory. After fix, each regexp being parsed is limited to a 256 MB memory footprint. Regular expressions whose representation would use more space than that are rejected. Normal use of regular expressions is unaffected.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.18.7], [1.19.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-38561_golang.org/x/text_0.3.3",
              "shortDescription": {
                "text": "[CVE-2021-38561] golang.org/x/text 0.3.3"
              },
              "help": {
                "text": "golang.org/x/text/language in golang.org/x/text before 0.3.7 can panic with an out-of-bounds read during BCP 47 language tag parsing. Index calculation is mishandled. If parsing untrusted user input, this can be used as a vector for a denial-of-service attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [0.3.7]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41715_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2022-41715] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "Programs which compile regular expressions from untrusted sources may be vulnerable to memory exhaustion or denial of service. The parsed regexp representation is linear in the size of the input, but in some cases the constant factor can be as high as 40,000, making relatively small regexps consume much larger amounts of memory. After fix, each regexp being parsed is limited to a 256 MB memory footprint. Regular expressions whose representation would use more space than that are rejected. Normal use of regular expressions is unaffected.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.18.7], [1.19.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2024-0567_3.15:gnutls_3.7.1-r0",
              "shortDescription": {
                "text": "[CVE-2024-0567] 3.15:gnutls 3.7.1-r0"
              },
              "help": {
                "text": "A vulnerability was found in GnuTLS, where a cockpit (which uses gnuTLS) rejects a certificate chain with distributed trust. This issue occurs when validating a certificate chain with cockpit-certificate-ensure. This flaw allows an unauthenticated, remote client or attacker to initiate a denial of service attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [3.8.3-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30634_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2022-30634] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Infinite loop in Read in crypto/rand before Go 1.17.11 and Go 1.18.3 on Windows allows attacker to cause an indefinite hang by passing a buffer larger than 1 \u003c\u003c 32 - 1 bytes.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-39323_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2023-39323] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "Line directives (\"//line\") can be used to bypass the restrictions on \"//go:cgo_\" directives, allowing blocked linker and compiler flags to be passed during compilation. This can result in unexpected execution of arbitrary code when running \"go build\". The line directive requires the absolute path of the file in which the directive lives, which makes exploiting this issue significantly more complex.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.20.9], [1.21.2]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2020-16845_github.com/ulikunitz/xz_0.5.5",
              "shortDescription": {
                "text": "[CVE-2020-16845] github.com/ulikunitz/xz 0.5.5"
              },
              "help": {
                "text": "Go before 1.13.15 and 14.x before 1.14.7 can have an infinite read loop in ReadUvarint and ReadVarint in encoding/binary via invalid inputs.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [0.5.8]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-5363_3.15:libssl1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2023-5363] 3.15:libssl1.1 1.1.1n-r0"
              },
              "help": {
                "text": "Issue summary: A bug has been identified in the processing of key and\ninitialisation vector (IV) lengths.  This can lead to potential truncation\nor overruns during the initialisation of some symmetric ciphers.\n\nImpact summary: A truncation in the IV can result in non-uniqueness,\nwhich could result in loss of confidentiality for some cipher modes.\n\nWhen calling EVP_EncryptInit_ex2(), EVP_DecryptInit_ex2() or\nEVP_CipherInit_ex2() the provided OSSL_PARAM array is processed after\nthe key and IV have been established.  Any alterations to the key length,\nvia the \"keylen\" parameter or the IV length, via the \"ivlen\" parameter,\nwithin the OSSL_PARAM array will not take effect as intended, potentially\ncausing truncation or overreading of these values.  The following ciphers\nand cipher modes are impacted: RC2, RC4, RC5, CCM, GCM and OCB.\n\nFor the CCM, GCM and OCB cipher modes, truncation of the IV can result in\nloss of confidentiality.  For example, when following NIST's SP 800-38D\nsection 8.2.1 guidance for constructing a deterministic IV for AES in\nGCM mode, truncation of the counter portion could lead to IV reuse.\n\nBoth truncations and overruns of the key and overruns of the IV will\nproduce incorrect results and could, in some cases, trigger a memory\nexception.  However, these issues are not currently assessed as security\ncritical.\n\nChanging the key and/or IV lengths is not considered to be a common operation\nand the vulnerable API was recently introduced. Furthermore it is likely that\napplication developers will have spotted this problem during testing since\ndecryption would fail unless both peers in the communication were similarly\nvulnerable. For these reasons we expect the probability of an application being\nvulnerable to this to be quite low. However if an application is vulnerable then\nthis issue is considered very serious. For these reasons we have assessed this\nissue as Moderate severity overall.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [3.1.4-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41722_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2022-41722] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "A path traversal vulnerability exists in filepath.Clean on Windows. On Windows, the filepath.Clean function could transform an invalid path such as \"a/../c:/b\" into the valid path \"c:\\b\". This transformation of a relative (if invalid) path into an absolute path could enable a directory traversal attack. After fix, the filepath.Clean function transforms this path into the relative (but still invalid) path \".\\c:\\b\".",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30634_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2022-30634] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "Infinite loop in Read in crypto/rand before Go 1.17.11 and Go 1.18.3 on Windows allows attacker to cause an indefinite hang by passing a buffer larger than 1 \u003c\u003c 32 - 1 bytes.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30630_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2022-30630] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "Uncontrolled recursion in Glob in io/fs before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a path which contains a large number of path separators.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-2509_3.15:gnutls_3.7.1-r0",
              "shortDescription": {
                "text": "[CVE-2022-2509] 3.15:gnutls 3.7.1-r0"
              },
              "help": {
                "text": "A vulnerability found in gnutls. This security flaw happens because of a double free error occurs during verification of pkcs7 signatures in gnutls_pkcs7_verify function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [3.7.1-r1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2016-7798_3.15:libssl1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2016-7798] 3.15:libssl1.1 1.1.1n-r0"
              },
              "help": {
                "text": "The openssl gem for Ruby uses the same initialization vector (IV) in GCM Mode (aes-*-gcm) when the IV is set before the key, which makes it easier for context-dependent attackers to bypass the encryption protection mechanism.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [3.0.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30630_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2022-30630] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "Uncontrolled recursion in Glob in io/fs before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a path which contains a large number of path separators.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30580_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2022-30580] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Code injection in Cmd.Start in os/exec before Go 1.17.11 and Go 1.18.3 allows execution of any binaries in the working directory named either \"..com\" or \"..exe\" by calling Cmd.Run, Cmd.Start, Cmd.Output, or Cmd.CombinedOutput when Cmd.Path is unset.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2022-43551_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-43551] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "A vulnerability exists in curl \u003c7.87.0 HSTS check that could be bypassed to trick it to keep using HTTP. Using its HSTS support, curl can be instructed to use HTTPS instead of using an insecure clear-text HTTP step even when HTTP is provided in the URL. However, the HSTS mechanism could be bypassed if the host name in the given URL first uses IDN characters that get replaced to ASCII counterparts as part of the IDN conversion. Like using the character UTF-8 U+3002 (IDEOGRAPHIC FULL STOP) instead of the common ASCII full stop (U+002E) `.`. Then in a subsequent request, it does not detect the HSTS state and makes a clear text transfer. Because it would store the info IDN encoded but look for it IDN decoded.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [7.80.0-r5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41724_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2022-41724] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "Large handshake records may cause panics in crypto/tls. Both clients and servers may send large TLS handshake records which cause servers and clients, respectively, to panic when attempting to construct responses. This affects all TLS 1.3 clients, TLS 1.2 clients which explicitly enable session resumption (by setting Config.ClientSessionCache to a non-nil value), and TLS 1.3 servers which request client certificates (by setting Config.ClientAuth \u003e= RequestClientCert).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41722_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2022-41722] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "A path traversal vulnerability exists in filepath.Clean on Windows. On Windows, the filepath.Clean function could transform an invalid path such as \"a/../c:/b\" into the valid path \"c:\\b\". This transformation of a relative (if invalid) path into an absolute path could enable a directory traversal attack. After fix, the filepath.Clean function transforms this path into the relative (but still invalid) path \".\\c:\\b\".",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41720_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2022-41720] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "On Windows, restricted files can be accessed via os.DirFS and http.Dir. The os.DirFS function and http.Dir type provide access to a tree of files rooted at a given directory. These functions permit access to Windows device files under that root. For example, os.DirFS(\"C:/tmp\").Open(\"COM1\") opens the COM1 device. Both os.DirFS and http.Dir only provide read-only filesystem access. In addition, on Windows, an os.DirFS for the directory (the root of the current drive) can permit a maliciously crafted path to escape from the drive and access any path on the system. With fix applied, the behavior of os.DirFS(\"\") has changed. Previously, an empty root was treated equivalently to \"/\", so os.DirFS(\"\").Open(\"tmp\") would open the path \"/tmp\". This now returns an error.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.18.9], [1.19.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-27533_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-27533] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "A vulnerability in input validation exists in curl \u003c8.0 during communication using the TELNET protocol may allow an attacker to pass on maliciously crafted user name and \"telnet options\" during server negotiation. The lack of proper input scrubbing allows an attacker to send content or perform option negotiation without the application's intent. This vulnerability could be exploited if an application allows user input, thereby enabling attackers to execute arbitrary code on the system.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.8      | Not Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [8.0.1-r0]   |"
              },
              "properties": {
                "security-severity": "8.8"
              }
            },
            {
              "id": "CVE-2022-41724_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2022-41724] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "Large handshake records may cause panics in crypto/tls. Both clients and servers may send large TLS handshake records which cause servers and clients, respectively, to panic when attempting to construct responses. This affects all TLS 1.3 clients, TLS 1.2 clients which explicitly enable session resumption (by setting Config.ClientSessionCache to a non-nil value), and TLS 1.3 servers which request client certificates (by setting Config.ClientAuth \u003e= RequestClientCert).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-5363_3.15:libcrypto1.1_1.1.1n-r0",
              "shortDescription": {
                "text": "[CVE-2023-5363] 3.15:libcrypto1.1 1.1.1n-r0"
              },
              "help": {
                "text": "Issue summary: A bug has been identified in the processing of key and\ninitialisation vector (IV) lengths.  This can lead to potential truncation\nor overruns during the initialisation of some symmetric ciphers.\n\nImpact summary: A truncation in the IV can result in non-uniqueness,\nwhich could result in loss of confidentiality for some cipher modes.\n\nWhen calling EVP_EncryptInit_ex2(), EVP_DecryptInit_ex2() or\nEVP_CipherInit_ex2() the provided OSSL_PARAM array is processed after\nthe key and IV have been established.  Any alterations to the key length,\nvia the \"keylen\" parameter or the IV length, via the \"ivlen\" parameter,\nwithin the OSSL_PARAM array will not take effect as intended, potentially\ncausing truncation or overreading of these values.  The following ciphers\nand cipher modes are impacted: RC2, RC4, RC5, CCM, GCM and OCB.\n\nFor the CCM, GCM and OCB cipher modes, truncation of the IV can result in\nloss of confidentiality.  For example, when following NIST's SP 800-38D\nsection 8.2.1 guidance for constructing a deterministic IV for AES in\nGCM mode, truncation of the counter portion could lead to IV reuse.\n\nBoth truncations and overruns of the key and overruns of the IV will\nproduce incorrect results and could, in some cases, trigger a memory\nexception.  However, these issues are not currently assessed as security\ncritical.\n\nChanging the key and/or IV lengths is not considered to be a common operation\nand the vulnerable API was recently introduced. Furthermore it is likely that\napplication developers will have spotted this problem during testing since\ndecryption would fail unless both peers in the communication were similarly\nvulnerable. For these reasons we expect the probability of an application being\nvulnerable to this to be quite low. However if an application is vulnerable then\nthis issue is considered very serious. For these reasons we have assessed this\nissue as Moderate severity overall.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar `       | [3.1.4-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24537_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2023-24537] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "Calling any of the Parse functions on Go source code which contains //line directives with very large line numbers can cause an infinite loop due to integer overflow.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-39323_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2023-39323] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "Line directives (\"//line\") can be used to bypass the restrictions on \"//go:cgo_\" directives, allowing blocked linker and compiler flags to be passed during compilation. This can result in unexpected execution of arbitrary code when running \"go build\". The line directive requires the absolute path of the file in which the directive lives, which makes exploiting this issue significantly more complex.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.20.9], [1.21.2]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2023-29403_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2023-29403] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "On Unix platforms, the Go runtime does not behave differently when a binary is run with the setuid/setgid bits. This can be dangerous in certain cases, such as when dumping memory state, or assuming the status of standard i/o file descriptors. If a setuid/setgid binary is executed with standard I/O file descriptors closed, opening any files can result in unexpected content being read or written with elevated privileges. Similarly, if a setuid/setgid program is terminated, either via panic or signal, it may leak the contents of its registers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2023-25652_3.15:git_2.34.2-r0",
              "shortDescription": {
                "text": "[CVE-2023-25652] 3.15:git 2.34.2-r0"
              },
              "help": {
                "text": "Git is a revision control system. Prior to versions 2.30.9, 2.31.8, 2.32.7, 2.33.8, 2.34.8, 2.35.8, 2.36.6, 2.37.7, 2.38.5, 2.39.3, and 2.40.1, by feeding specially crafted input to `git apply --reject`, a path outside the working tree can be overwritten with partially controlled contents (corresponding to the rejected hunk(s) from the given patch). A fix is available in versions 2.30.9, 2.31.8, 2.32.7, 2.33.8, 2.34.8, 2.35.8, 2.36.6, 2.37.7, 2.38.5, 2.39.3, and 2.40.1. As a workaround, avoid using `git apply` with `--reject` when applying patches from an untrusted source. Use `git apply --stat` to inspect a patch before applying; avoid applying one that create a conflict where a link corresponding to the `*.rej` file exists.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [2.34.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-41771_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2021-41771] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "ImportedSymbols in debug/macho (for Open or OpenFat) in Go before 1.16.10 and 1.17.x before 1.17.3 Accesses a Memory Location After the End of a Buffer, aka an out-of-bounds slice situation.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.16.10], [1.17.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-41772_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2021-41772] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "Go before 1.16.10 and 1.17.x before 1.17.3 allows an archive/zip Reader.Open panic via a crafted ZIP archive containing an invalid name or an empty filename field.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.16.10], [1.17.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41720_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2022-41720] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "On Windows, restricted files can be accessed via os.DirFS and http.Dir. The os.DirFS function and http.Dir type provide access to a tree of files rooted at a given directory. These functions permit access to Windows device files under that root. For example, os.DirFS(\"C:/tmp\").Open(\"COM1\") opens the COM1 device. Both os.DirFS and http.Dir only provide read-only filesystem access. In addition, on Windows, an os.DirFS for the directory (the root of the current drive) can permit a maliciously crafted path to escape from the drive and access any path on the system. With fix applied, the behavior of os.DirFS(\"\") has changed. Previously, an empty root was treated equivalently to \"/\", so os.DirFS(\"\").Open(\"tmp\") would open the path \"/tmp\". This now returns an error.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.18.9], [1.19.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2020-14040_golang.org/x/text_0.3.2",
              "shortDescription": {
                "text": "[CVE-2020-14040] golang.org/x/text 0.3.2"
              },
              "help": {
                "text": "The x/text package before 0.3.3 for Go has a vulnerability in encoding/unicode that could lead to the UTF-16 decoder entering an infinite loop, causing the program to crash or run out of memory. An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to golang.org/x/text/transform.String.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [0.3.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45285_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2023-45285] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "Using go get to fetch a module with the \".git\" suffix may unexpectedly fallback to the insecure \"git://\" protocol if the module is unavailable via the secure \"https://\" and \"git+ssh://\" protocols, even if GOINSECURE is not set for said module. This only affects users who are not using the module proxy and are fetching modules directly (i.e. GOPROXY=off).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41722_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2022-41722] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "A path traversal vulnerability exists in filepath.Clean on Windows. On Windows, the filepath.Clean function could transform an invalid path such as \"a/../c:/b\" into the valid path \"c:\\b\". This transformation of a relative (if invalid) path into an absolute path could enable a directory traversal attack. After fix, the filepath.Clean function transforms this path into the relative (but still invalid) path \".\\c:\\b\".",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2020-29652_golang.org/x/crypto_0.0.0-20200622213623-75b288015ac9",
              "shortDescription": {
                "text": "[CVE-2020-29652] golang.org/x/crypto 0.0.0-20200622213623-75b288015ac9"
              },
              "help": {
                "text": "A nil pointer dereference in the golang.org/x/crypto/ssh component through v0.0.0-20201203163018-be400aefbc4c for Go allows remote attackers to cause a denial of service against SSH servers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [0.0.0-20201216223049-8b5274cf687f]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-27781_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-27781] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "libcurl provides the `CURLOPT_CERTINFO` option to allow applications torequest details to be returned about a server's certificate chain.Due to an erroneous function, a malicious server could make libcurl built withNSS get stuck in a never-ending busy-loop when trying to retrieve thatinformation.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [7.80.0-r2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-32149_golang.org/x/text_0.3.3",
              "shortDescription": {
                "text": "[CVE-2022-32149] golang.org/x/text 0.3.3"
              },
              "help": {
                "text": "An attacker may cause a denial of service by crafting an Accept-Language header which ParseAcceptLanguage will take significant time to parse.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [0.3.8]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-23773_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2022-23773] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "cmd/go in Go before 1.16.14 and 1.17.x before 1.17.7 can misinterpret branch names that falsely appear to be version tags. This can lead to incorrect access control if an actor is supposed to be able to create branches but not tags.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.16.14], [1.17.7]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-29804_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2022-29804] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "Incorrect conversion of certain invalid paths to valid, absolute paths in Clean in path/filepath before Go 1.17.11 and Go 1.18.3 on Windows allows potential directory traversal attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30580_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2022-30580] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "Code injection in Cmd.Start in os/exec before Go 1.17.11 and Go 1.18.3 allows execution of any binaries in the working directory named either \"..com\" or \"..exe\" by calling Cmd.Run, Cmd.Start, Cmd.Output, or Cmd.CombinedOutput when Cmd.Path is unset.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2022-42916_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-42916] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "In curl before 7.86.0, the HSTS check could be bypassed to trick it into staying with HTTP. Using its HSTS support, curl can be instructed to use HTTPS directly (instead of using an insecure cleartext HTTP step) even when HTTP is provided in the URL. This mechanism could be bypassed if the host name in the given URL uses IDN characters that get replaced with ASCII counterparts as part of the IDN conversion, e.g., using the character UTF-8 U+3002 (IDEOGRAPHIC FULL STOP) instead of the common ASCII full stop of U+002E (.). The earliest affected version is 7.77.0 2021-05-26.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [7.80.0-r4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41715_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2022-41715] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "Programs which compile regular expressions from untrusted sources may be vulnerable to memory exhaustion or denial of service. The parsed regexp representation is linear in the size of the input, but in some cases the constant factor can be as high as 40,000, making relatively small regexps consume much larger amounts of memory. After fix, each regexp being parsed is limited to a 256 MB memory footprint. Regular expressions whose representation would use more space than that are rejected. Normal use of regular expressions is unaffected.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.18.7], [1.19.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-32636_3.15:glib_2.70.1-r0",
              "shortDescription": {
                "text": "[CVE-2023-32636] 3.15:glib 2.70.1-r0"
              },
              "help": {
                "text": "A flaw was found in glib, where the gvariant deserialization code is vulnerable to a denial of service introduced by additional input validation added to resolve CVE-2023-29499. The offset table validation may be very slow. This bug does not affect any released version of glib but does affect glib distributors who followed the guidance of glib developers to backport the initial fix for CVE-2023-29499.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-29499_3.15:glib_2.70.1-r0",
              "shortDescription": {
                "text": "[CVE-2023-29499] 3.15:glib 2.70.1-r0"
              },
              "help": {
                "text": "A flaw was found in GLib. GVariant deserialization fails to validate that the input conforms to the expected format, leading to denial of service.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-51385_3.15:openssh-keygen_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2023-51385] 3.15:openssh-keygen 8.8_p1-r1"
              },
              "help": {
                "text": "In ssh in OpenSSH before 9.6, OS command injection might occur if a user name or host name has shell metacharacters, and this name is referenced by an expansion token in certain situations. For example, an untrusted Git repository can have a submodule with shell metacharacters in a user name or host name.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [9.1_p1-r5]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-51385_3.15:openssh-client-common_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2023-51385] 3.15:openssh-client-common 8.8_p1-r1"
              },
              "help": {
                "text": "In ssh in OpenSSH before 9.6, OS command injection might occur if a user name or host name has shell metacharacters, and this name is referenced by an expansion token in certain situations. For example, an untrusted Git repository can have a submodule with shell metacharacters in a user name or host name.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [9.1_p1-r5]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-1962_github.com/golang/go_1.16.7",
              "shortDescription": {
                "text": "[CVE-2022-1962] github.com/golang/go 1.16.7"
              },
              "help": {
                "text": "Uncontrolled recursion in the Parse functions in go/parser before Go 1.17.12 and Go 1.18.4 allow an attacker to cause a panic due to stack exhaustion via deeply nested types or declarations.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2022-29526_golang.org/x/sys_0.0.0-20200323222414-85ca7c5b95cd",
              "shortDescription": {
                "text": "[CVE-2022-29526] golang.org/x/sys 0.0.0-20200323222414-85ca7c5b95cd"
              },
              "help": {
                "text": "Go before 1.17.10 and 1.18.x before 1.18.2 has Incorrect Privilege Assignment. When called with a non-zero flags parameter, the Faccessat function could incorrectly report that a file is accessible.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [0.0.0-20220412211240-33da011f77ad]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2020-14039_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2020-14039] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "In Go before 1.13.13 and 1.14.x before 1.14.5, Certificate.Verify may lack a check on the VerifyOptions.KeyUsages EKU requirements (if VerifyOptions.Roots equals nil and the installation is on Windows). Thus, X.509 certificate verification is incomplete.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.13.13], [1.14.5]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-1962_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2022-1962] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Uncontrolled recursion in the Parse functions in go/parser before Go 1.17.12 and Go 1.18.4 allow an attacker to cause a panic due to stack exhaustion via deeply nested types or declarations.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2022-29526_golang.org/x/sys_0.0.0-20220328115105-d36c6a25d886",
              "shortDescription": {
                "text": "[CVE-2022-29526] golang.org/x/sys 0.0.0-20220328115105-d36c6a25d886"
              },
              "help": {
                "text": "Go before 1.17.10 and 1.18.x before 1.18.2 has Incorrect Privilege Assignment. When called with a non-zero flags parameter, the Faccessat function could incorrectly report that a file is accessible.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [0.0.0-20220412211240-33da011f77ad]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-29526_golang.org/x/sys_0.0.0-20210220050731-9a76102bfb43",
              "shortDescription": {
                "text": "[CVE-2022-29526] golang.org/x/sys 0.0.0-20210220050731-9a76102bfb43"
              },
              "help": {
                "text": "Go before 1.17.10 and 1.18.x before 1.18.2 has Incorrect Privilege Assignment. When called with a non-zero flags parameter, the Faccessat function could incorrectly report that a file is accessible.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [0.0.0-20220412211240-33da011f77ad]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-1962_github.com/golang/go_1.17.6",
              "shortDescription": {
                "text": "[CVE-2022-1962] github.com/golang/go 1.17.6"
              },
              "help": {
                "text": "Uncontrolled recursion in the Parse functions in go/parser before Go 1.17.12 and Go 1.18.4 allow an attacker to cause a panic due to stack exhaustion via deeply nested types or declarations.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-51385_3.15:openssh-client-default_8.8_p1-r1",
              "shortDescription": {
                "text": "[CVE-2023-51385] 3.15:openssh-client-default 8.8_p1-r1"
              },
              "help": {
                "text": "In ssh in OpenSSH before 9.6, OS command injection might occur if a user name or host name has shell metacharacters, and this name is referenced by an expansion token in certain situations. For example, an untrusted Git repository can have a submodule with shell metacharacters in a user name or host name.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [9.1_p1-r5]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-1962_github.com/golang/go_1.16.15",
              "shortDescription": {
                "text": "[CVE-2022-1962] github.com/golang/go 1.16.15"
              },
              "help": {
                "text": "Uncontrolled recursion in the Parse functions in go/parser before Go 1.17.12 and Go 1.18.4 allow an attacker to cause a panic due to stack exhaustion via deeply nested types or declarations.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Applicable       | `sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-27536_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-27536] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "An authentication bypass vulnerability exists libcurl \u003c8.0.0 in the connection reuse feature which can reuse previously established connections with incorrect user permissions due to a failure to check for changes in the CURLOPT_GSSAPI_DELEGATION option. This vulnerability affects krb5/kerberos/negotiate/GSSAPI transfers and could potentially result in unauthorized access to sensitive information. The safest option is to not reuse connections if the CURLOPT_GSSAPI_DELEGATION option has been changed.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [8.0.1-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-3978_golang.org/x/net_0.0.0-20200625001655-4c5254603344",
              "shortDescription": {
                "text": "[CVE-2023-3978] golang.org/x/net 0.0.0-20200625001655-4c5254603344"
              },
              "help": {
                "text": "Text nodes not in the HTML namespace are incorrectly literally rendered, causing text which should be escaped to not be. This could lead to an XSS attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [0.13.0]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2021-36221_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2021-36221] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "Go before 1.15.15 and 1.16.x before 1.16.7 has a race condition that can lead to a net/http/httputil ReverseProxy panic upon an ErrAbortHandler abort.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.15.15], [1.16.7]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-3978_golang.org/x/net_0.0.0-20220127200216-cd36cc0744dd",
              "shortDescription": {
                "text": "[CVE-2023-3978] golang.org/x/net 0.0.0-20220127200216-cd36cc0744dd"
              },
              "help": {
                "text": "Text nodes not in the HTML namespace are incorrectly literally rendered, causing text which should be escaped to not be. This could lead to an XSS attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | [0.13.0]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2021-33197_github.com/golang/go_1.14.4",
              "shortDescription": {
                "text": "[CVE-2021-33197] github.com/golang/go 1.14.4"
              },
              "help": {
                "text": "In Go before 1.15.13 and 1.16.x before 1.16.5, some configurations of ReverseProxy (from net/http/httputil) result in a situation where an attacker is able to drop arbitrary headers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar `       | [1.15.13], [1.16.5]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-3978_golang.org/x/net_0.0.0-20201110031124-69a78807bb2b",
              "shortDescription": {
                "text": "[CVE-2023-3978] golang.org/x/net 0.0.0-20201110031124-69a78807bb2b"
              },
              "help": {
                "text": "Text nodes not in the HTML namespace are incorrectly literally rendered, causing text which should be escaped to not be. This could lead to an XSS attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | [0.13.0]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2024-28180_gopkg.in/square/go-jose.v2_2.3.1",
              "shortDescription": {
                "text": "[CVE-2024-28180] gopkg.in/square/go-jose.v2 2.3.1"
              },
              "help": {
                "text": "Package jose aims to provide an implementation of the Javascript Object Signing and Encryption set of standards. An attacker could send a JWE containing compressed data that used large amounts of memory and CPU when decompressed by Decrypt or DecryptMulti. Those functions now return an error if the decompressed data would exceed 250kB or 10x the compressed size (whichever is larger). This vulnerability has been patched in versions 4.0.1, 3.0.3 and 2.6.3.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.3      | Not Applicable       | `sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "4.3"
              }
            },
            {
              "id": "CVE-2024-28180_gopkg.in/square/go-jose.v2_2.5.1",
              "shortDescription": {
                "text": "[CVE-2024-28180] gopkg.in/square/go-jose.v2 2.5.1"
              },
              "help": {
                "text": "Package jose aims to provide an implementation of the Javascript Object Signing and Encryption set of standards. An attacker could send a JWE containing compressed data that used large amounts of memory and CPU when decompressed by Decrypt or DecryptMulti. Those functions now return an error if the decompressed data would exceed 250kB or 10x the compressed size (whichever is larger). This vulnerability has been patched in versions 4.0.1, 3.0.3 and 2.6.3.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.3      | Not Applicable       | `sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "4.3"
              }
            },
            {
              "id": "CVE-2023-28322_3.15:libcurl_7.80.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-28322] 3.15:libcurl 7.80.0-r1"
              },
              "help": {
                "text": "An information disclosure vulnerability exists in curl \u003cv8.1.0 when doing HTTP(S) transfers, libcurl might erroneously use the read callback (`CURLOPT_READFUNCTION`) to ask for data to send, even when the `CURLOPT_POSTFIELDS` option has been set, if the same handle previously wasused to issue a `PUT` request which used that callback. This flaw may surprise the application and cause it to misbehave and either send off the wrong data or use memory after free or similar in the second transfer. The problem exists in the logic for a reused handle when it is (expected to be) changed from a PUT to a POST.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.7      | Not Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [8.1.0-r0]   |"
              },
              "properties": {
                "security-severity": "3.7"
              }
            },
            {
              "id": "CVE-2024-32004_3.15:git_2.34.2-r0",
              "shortDescription": {
                "text": "[CVE-2024-32004] 3.15:git 2.34.2-r0"
              },
              "help": {
                "text": "Git is a revision control system. Prior to versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4, an attacker can prepare a local repository in such a way that, when cloned, will execute arbitrary code during the operation. The problem has been patched in versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4. As a workaround, avoid cloning repositories from untrusted sources.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Applicable       | `sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar `       | [2.45.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            }
          ],
          "version": "3.96.1"
        }
      },
      "results": [
        {
          "ruleId": "CVE-2022-23806_github.com/golang/go_1.14.4",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "[CVE-2022-23806] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24540_github.com/golang/go_1.14.4",
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24540] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24538_github.com/golang/go_1.14.4",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24538] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24540_github.com/golang/go_1.17.6",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24540] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1292_3.15:libcrypto1.1_1.1.1n-r0",
          "ruleIndex": 4,
          "level": "error",
          "message": {
            "text": "[CVE-2022-1292] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24540_github.com/golang/go_1.16.15",
          "ruleIndex": 5,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24540] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2068_3.15:libssl1.1_1.1.1n-r0",
          "ruleIndex": 6,
          "level": "error",
          "message": {
            "text": "[CVE-2022-2068] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24538_github.com/golang/go_1.16.15",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24538] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24538_github.com/golang/go_1.16.7",
          "ruleIndex": 8,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24538] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-37434_3.15:zlib_1.2.12-r0",
          "ruleIndex": 9,
          "level": "error",
          "message": {
            "text": "[CVE-2022-37434] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23806_github.com/golang/go_1.17.6",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "[CVE-2022-23806] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24540_github.com/golang/go_1.16.7",
          "ruleIndex": 11,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24540] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24538_github.com/golang/go_1.17.6",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24538] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23806_github.com/golang/go_1.16.7",
          "ruleIndex": 13,
          "level": "error",
          "message": {
            "text": "[CVE-2022-23806] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1292_3.15:libssl1.1_1.1.1n-r0",
          "ruleIndex": 14,
          "level": "error",
          "message": {
            "text": "[CVE-2022-1292] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2068_3.15:libcrypto1.1_1.1.1n-r0",
          "ruleIndex": 15,
          "level": "error",
          "message": {
            "text": "[CVE-2022-2068] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-38408_3.15:openssh-client-default_8.8_p1-r1",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "[CVE-2023-38408] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-38408_3.15:openssh-client-common_8.8_p1-r1",
          "ruleIndex": 17,
          "level": "error",
          "message": {
            "text": "[CVE-2023-38408] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-38408_3.15:openssh-keygen_8.8_p1-r1",
          "ruleIndex": 18,
          "level": "error",
          "message": {
            "text": "[CVE-2023-38408] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41903_3.15:git_2.34.2-r0",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41903] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23521_3.15:git_2.34.2-r0",
          "ruleIndex": 20,
          "level": "error",
          "message": {
            "text": "[CVE-2022-23521] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32207_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 21,
          "level": "error",
          "message": {
            "text": "[CVE-2022-32207] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-48174_3.15:ssl_client_1.34.1-r5",
          "ruleIndex": 22,
          "level": "error",
          "message": {
            "text": "[CVE-2022-48174] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-48174_3.15:busybox_1.34.1-r5",
          "ruleIndex": 23,
          "level": "error",
          "message": {
            "text": "[CVE-2022-48174] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-28327_github.com/golang/go_1.17.6",
          "ruleIndex": 24,
          "level": "error",
          "message": {
            "text": "[CVE-2022-28327] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0216_3.15:libssl1.1_1.1.1n-r0",
          "ruleIndex": 25,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0216] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-28131_github.com/golang/go_1.16.15",
          "ruleIndex": 26,
          "level": "error",
          "message": {
            "text": "[CVE-2022-28131] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-33196_github.com/golang/go_1.14.4",
          "ruleIndex": 27,
          "level": "error",
          "message": {
            "text": "[CVE-2021-33196] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4450_3.15:libssl1.1_1.1.1n-r0",
          "ruleIndex": 28,
          "level": "error",
          "message": {
            "text": "[CVE-2022-4450] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45287_github.com/golang/go_1.17.6",
          "ruleIndex": 29,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45287] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30635_github.com/golang/go_1.14.4",
          "ruleIndex": 30,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30635] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32189_github.com/golang/go_1.14.4",
          "ruleIndex": 31,
          "level": "error",
          "message": {
            "text": "[CVE-2022-32189] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39325_golang.org/x/net_0.0.0-20201110031124-69a78807bb2b",
          "ruleIndex": 32,
          "level": "error",
          "message": {
            "text": "[CVE-2023-39325] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24536_github.com/golang/go_1.16.15",
          "ruleIndex": 33,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24536] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30633_github.com/golang/go_1.16.7",
          "ruleIndex": 34,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30633] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0217_3.15:libssl1.1_1.1.1n-r0",
          "ruleIndex": 35,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0217] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0286_3.15:libssl1.1_1.1.1n-r0",
          "ruleIndex": 36,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0286] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30635_github.com/golang/go_1.16.7",
          "ruleIndex": 37,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30635] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-39293_github.com/golang/go_1.16.7",
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "[CVE-2021-39293] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-44487_google.golang.org/grpc_1.27.0",
          "ruleIndex": 39,
          "level": "error",
          "message": {
            "text": "[CVE-2023-44487] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23772_github.com/golang/go_1.16.7",
          "ruleIndex": 40,
          "level": "error",
          "message": {
            "text": "[CVE-2022-23772] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41725_github.com/golang/go_1.17.6",
          "ruleIndex": 41,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41725] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29400_github.com/golang/go_1.16.15",
          "ruleIndex": 42,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29400] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39325_golang.org/x/net_0.0.0-20220127200216-cd36cc0744dd",
          "ruleIndex": 43,
          "level": "error",
          "message": {
            "text": "[CVE-2023-39325] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0286_3.15:libcrypto1.1_1.1.1n-r0",
          "ruleIndex": 44,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0286] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0215_3.15:libcrypto1.1_1.1.1n-r0",
          "ruleIndex": 45,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0215] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24921_github.com/golang/go_1.14.4",
          "ruleIndex": 46,
          "level": "error",
          "message": {
            "text": "[CVE-2022-24921] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32189_github.com/golang/go_1.16.7",
          "ruleIndex": 47,
          "level": "error",
          "message": {
            "text": "[CVE-2022-32189] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-28948_gopkg.in/yaml.v3_3.0.0-20200313102051-9f266ea9e77c",
          "ruleIndex": 48,
          "level": "error",
          "message": {
            "text": "[CVE-2022-28948] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-40674_3.15:expat_2.4.7-r0",
          "ruleIndex": 49,
          "level": "error",
          "message": {
            "text": "[CVE-2022-40674] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-21698_github.com/prometheus/client_golang_1.11.0",
          "ruleIndex": 50,
          "level": "error",
          "message": {
            "text": "[CVE-2022-21698] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23772_github.com/golang/go_1.14.4",
          "ruleIndex": 51,
          "level": "error",
          "message": {
            "text": "[CVE-2022-23772] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30632_github.com/golang/go_1.16.15",
          "ruleIndex": 52,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30632] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-28131_github.com/golang/go_1.16.7",
          "ruleIndex": 53,
          "level": "error",
          "message": {
            "text": "[CVE-2022-28131] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-28327_github.com/golang/go_1.16.15",
          "ruleIndex": 54,
          "level": "error",
          "message": {
            "text": "[CVE-2022-28327] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-44487_golang.org/x/net_0.0.0-20201110031124-69a78807bb2b",
          "ruleIndex": 55,
          "level": "error",
          "message": {
            "text": "[CVE-2023-44487] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-44487_golang.org/x/net_0.0.0-20220127200216-cd36cc0744dd",
          "ruleIndex": 56,
          "level": "error",
          "message": {
            "text": "[CVE-2023-44487] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-28327_github.com/golang/go_1.16.7",
          "ruleIndex": 57,
          "level": "error",
          "message": {
            "text": "[CVE-2022-28327] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24675_github.com/golang/go_1.16.15",
          "ruleIndex": 58,
          "level": "error",
          "message": {
            "text": "[CVE-2022-24675] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24536_github.com/golang/go_1.16.7",
          "ruleIndex": 59,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24536] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24675_github.com/golang/go_1.16.7",
          "ruleIndex": 60,
          "level": "error",
          "message": {
            "text": "[CVE-2022-24675] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29400_github.com/golang/go_1.17.6",
          "ruleIndex": 61,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29400] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24539_github.com/golang/go_1.16.7",
          "ruleIndex": 62,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24539] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0217_3.15:libcrypto1.1_1.1.1n-r0",
          "ruleIndex": 63,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0217] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30633_github.com/golang/go_1.17.6",
          "ruleIndex": 64,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30633] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24539_github.com/golang/go_1.16.15",
          "ruleIndex": 65,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24539] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-28131_github.com/golang/go_1.17.6",
          "ruleIndex": 66,
          "level": "error",
          "message": {
            "text": "[CVE-2022-28131] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30632_github.com/golang/go_1.14.4",
          "ruleIndex": 67,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30632] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27664_golang.org/x/net_0.0.0-20200625001655-4c5254603344",
          "ruleIndex": 68,
          "level": "error",
          "message": {
            "text": "[CVE-2022-27664] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32189_github.com/golang/go_1.17.6",
          "ruleIndex": 69,
          "level": "error",
          "message": {
            "text": "[CVE-2022-32189] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-29482_github.com/ulikunitz/xz_0.5.5",
          "ruleIndex": 70,
          "level": "error",
          "message": {
            "text": "[CVE-2021-29482] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-3602_3.15:libcrypto1.1_1.1.1n-r0",
          "ruleIndex": 71,
          "level": "error",
          "message": {
            "text": "[CVE-2022-3602] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2879_github.com/golang/go_1.16.15",
          "ruleIndex": 72,
          "level": "error",
          "message": {
            "text": "[CVE-2022-2879] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24675_github.com/golang/go_1.17.6",
          "ruleIndex": 73,
          "level": "error",
          "message": {
            "text": "[CVE-2022-24675] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45287_github.com/golang/go_1.16.15",
          "ruleIndex": 74,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45287] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24921_github.com/golang/go_1.16.7",
          "ruleIndex": 75,
          "level": "error",
          "message": {
            "text": "[CVE-2022-24921] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24534_github.com/golang/go_1.16.7",
          "ruleIndex": 76,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24534] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30631_github.com/golang/go_1.14.4",
          "ruleIndex": 77,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30631] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-28948_gopkg.in/yaml.v3_3.0.0-20210107172259-749611fa9fcc",
          "ruleIndex": 78,
          "level": "error",
          "message": {
            "text": "[CVE-2022-28948] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27664_golang.org/x/net_0.0.0-20220127200216-cd36cc0744dd",
          "ruleIndex": 79,
          "level": "error",
          "message": {
            "text": "[CVE-2022-27664] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30631_github.com/golang/go_1.16.7",
          "ruleIndex": 80,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30631] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0215_3.15:libssl1.1_1.1.1n-r0",
          "ruleIndex": 81,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0215] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32189_github.com/golang/go_1.16.15",
          "ruleIndex": 82,
          "level": "error",
          "message": {
            "text": "[CVE-2022-32189] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45287_github.com/golang/go_1.14.4",
          "ruleIndex": 83,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45287] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-27918_github.com/golang/go_1.14.4",
          "ruleIndex": 84,
          "level": "error",
          "message": {
            "text": "[CVE-2021-27918] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-44487_google.golang.org/grpc_1.43.0",
          "ruleIndex": 85,
          "level": "error",
          "message": {
            "text": "[CVE-2023-44487] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2879_github.com/golang/go_1.17.6",
          "ruleIndex": 86,
          "level": "error",
          "message": {
            "text": "[CVE-2022-2879] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24675_github.com/golang/go_1.14.4",
          "ruleIndex": 87,
          "level": "error",
          "message": {
            "text": "[CVE-2022-24675] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0216_3.15:libcrypto1.1_1.1.1n-r0",
          "ruleIndex": 88,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0216] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24539_github.com/golang/go_1.17.6",
          "ruleIndex": 89,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24539] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4450_3.15:libcrypto1.1_1.1.1n-r0",
          "ruleIndex": 90,
          "level": "error",
          "message": {
            "text": "[CVE-2022-4450] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27782_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 91,
          "level": "error",
          "message": {
            "text": "[CVE-2022-27782] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41723_golang.org/x/net_0.0.0-20200625001655-4c5254603344",
          "ruleIndex": 92,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41723] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0401_3.15:libssl1.1_1.1.1n-r0",
          "ruleIndex": 93,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0401] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39325_golang.org/x/net_0.0.0-20200625001655-4c5254603344",
          "ruleIndex": 94,
          "level": "error",
          "message": {
            "text": "[CVE-2023-39325] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2879_github.com/golang/go_1.16.7",
          "ruleIndex": 95,
          "level": "error",
          "message": {
            "text": "[CVE-2022-2879] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27664_golang.org/x/net_0.0.0-20201110031124-69a78807bb2b",
          "ruleIndex": 96,
          "level": "error",
          "message": {
            "text": "[CVE-2022-27664] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-43680_3.15:expat_2.4.7-r0",
          "ruleIndex": 97,
          "level": "error",
          "message": {
            "text": "[CVE-2022-43680] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41723_golang.org/x/net_0.0.0-20201110031124-69a78807bb2b",
          "ruleIndex": 98,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41723] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41723_golang.org/x/net_0.0.0-20220127200216-cd36cc0744dd",
          "ruleIndex": 99,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41723] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24539_github.com/golang/go_1.14.4",
          "ruleIndex": 100,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24539] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-3602_3.15:libssl1.1_1.1.1n-r0",
          "ruleIndex": 101,
          "level": "error",
          "message": {
            "text": "[CVE-2022-3602] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30632_github.com/golang/go_1.17.6",
          "ruleIndex": 102,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30632] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0464_3.15:libssl1.1_1.1.1n-r0",
          "ruleIndex": 103,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0464] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-33195_github.com/golang/go_1.14.4",
          "ruleIndex": 104,
          "level": "error",
          "message": {
            "text": "[CVE-2021-33195] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30633_github.com/golang/go_1.14.4",
          "ruleIndex": 105,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30633] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24534_github.com/golang/go_1.16.15",
          "ruleIndex": 106,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24534] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29400_github.com/golang/go_1.14.4",
          "ruleIndex": 107,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29400] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-28948_gopkg.in/yaml.v3_3.0.0-20210107192922-496545a6307b",
          "ruleIndex": 108,
          "level": "error",
          "message": {
            "text": "[CVE-2022-28948] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24921_github.com/golang/go_1.17.6",
          "ruleIndex": 109,
          "level": "error",
          "message": {
            "text": "[CVE-2022-24921] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30633_github.com/golang/go_1.16.15",
          "ruleIndex": 110,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30633] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-28131_github.com/golang/go_1.14.4",
          "ruleIndex": 111,
          "level": "error",
          "message": {
            "text": "[CVE-2022-28131] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24536_github.com/golang/go_1.14.4",
          "ruleIndex": 112,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24536] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41725_github.com/golang/go_1.16.15",
          "ruleIndex": 113,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41725] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0464_3.15:libcrypto1.1_1.1.1n-r0",
          "ruleIndex": 114,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0464] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24536_github.com/golang/go_1.17.6",
          "ruleIndex": 115,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24536] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30632_github.com/golang/go_1.16.7",
          "ruleIndex": 116,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30632] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24534_github.com/golang/go_1.17.6",
          "ruleIndex": 117,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24534] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-3786_3.15:libcrypto1.1_1.1.1n-r0",
          "ruleIndex": 118,
          "level": "error",
          "message": {
            "text": "[CVE-2022-3786] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-3786_3.15:libssl1.1_1.1.1n-r0",
          "ruleIndex": 119,
          "level": "error",
          "message": {
            "text": "[CVE-2022-3786] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-52425_3.15:expat_2.4.7-r0",
          "ruleIndex": 120,
          "level": "error",
          "message": {
            "text": "[CVE-2023-52425] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41725_github.com/golang/go_1.14.4",
          "ruleIndex": 121,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41725] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30635_github.com/golang/go_1.17.6",
          "ruleIndex": 122,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30635] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23772_github.com/golang/go_1.17.6",
          "ruleIndex": 123,
          "level": "error",
          "message": {
            "text": "[CVE-2022-23772] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-28327_github.com/golang/go_1.14.4",
          "ruleIndex": 124,
          "level": "error",
          "message": {
            "text": "[CVE-2022-28327] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-27534_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 125,
          "level": "error",
          "message": {
            "text": "[CVE-2023-27534] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-44487_3.15:nghttp2-libs_1.46.0-r0",
          "ruleIndex": 126,
          "level": "error",
          "message": {
            "text": "[CVE-2023-44487] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30631_github.com/golang/go_1.17.6",
          "ruleIndex": 127,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30631] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45287_github.com/golang/go_1.16.7",
          "ruleIndex": 128,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45287] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-33198_github.com/golang/go_1.14.4",
          "ruleIndex": 129,
          "level": "error",
          "message": {
            "text": "[CVE-2021-33198] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41725_github.com/golang/go_1.16.7",
          "ruleIndex": 130,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41725] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30631_github.com/golang/go_1.16.15",
          "ruleIndex": 131,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30631] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-44487_golang.org/x/net_0.0.0-20200625001655-4c5254603344",
          "ruleIndex": 132,
          "level": "error",
          "message": {
            "text": "[CVE-2023-44487] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0401_3.15:libcrypto1.1_1.1.1n-r0",
          "ruleIndex": 133,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0401] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2879_github.com/golang/go_1.14.4",
          "ruleIndex": 134,
          "level": "error",
          "message": {
            "text": "[CVE-2022-2879] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30635_github.com/golang/go_1.16.15",
          "ruleIndex": 135,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30635] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-39293_github.com/golang/go_1.14.4",
          "ruleIndex": 136,
          "level": "error",
          "message": {
            "text": "[CVE-2021-39293] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24534_github.com/golang/go_1.14.4",
          "ruleIndex": 137,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24534] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29400_github.com/golang/go_1.16.7",
          "ruleIndex": 138,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29400] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-51767_3.15:openssh-client-common_8.8_p1-r1",
          "ruleIndex": 139,
          "level": "error",
          "message": {
            "text": "[CVE-2023-51767] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-51767_3.15:openssh-client-default_8.8_p1-r1",
          "ruleIndex": 140,
          "level": "error",
          "message": {
            "text": "[CVE-2023-51767] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-51767_3.15:openssh-keygen_8.8_p1-r1",
          "ruleIndex": 141,
          "level": "error",
          "message": {
            "text": "[CVE-2023-51767] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-26160_github.com/dgrijalva/jwt-go_3.2.0+incompatible",
          "ruleIndex": 142,
          "level": "error",
          "message": {
            "text": "[CVE-2020-26160] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-26160_github.com/dgrijalva/jwt-go_3.2.0+incompatible",
          "ruleIndex": 142,
          "level": "error",
          "message": {
            "text": "[CVE-2020-26160] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29007_3.15:git_2.34.2-r0",
          "ruleIndex": 143,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29007] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-23749_3.15:libldap_2.6.0-r0",
          "ruleIndex": 144,
          "level": "error",
          "message": {
            "text": "[CVE-2023-23749] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3121_github.com/gogo/protobuf_1.3.1",
          "ruleIndex": 145,
          "level": "error",
          "message": {
            "text": "[CVE-2021-3121] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-32643_3.15:glib_2.70.1-r0",
          "ruleIndex": 146,
          "level": "error",
          "message": {
            "text": "[CVE-2023-32643] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24975_3.15:git_2.34.2-r0",
          "ruleIndex": 147,
          "level": "error",
          "message": {
            "text": "[CVE-2022-24975] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-31012_3.15:git_2.34.2-r0",
          "ruleIndex": 148,
          "level": "error",
          "message": {
            "text": "[CVE-2022-31012] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2003-0693_3.15:openssh-client-common_8.8_p1-r1",
          "ruleIndex": 149,
          "level": "error",
          "message": {
            "text": "[CVE-2003-0693] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2006-5051_3.15:openssh-keygen_8.8_p1-r1",
          "ruleIndex": 150,
          "level": "error",
          "message": {
            "text": "[CVE-2006-5051] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2003-0682_3.15:openssh-client-default_8.8_p1-r1",
          "ruleIndex": 151,
          "level": "error",
          "message": {
            "text": "[CVE-2003-0682] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2006-5051_3.15:openssh-client-common_8.8_p1-r1",
          "ruleIndex": 152,
          "level": "error",
          "message": {
            "text": "[CVE-2006-5051] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2003-0693_3.15:openssh-client-default_8.8_p1-r1",
          "ruleIndex": 153,
          "level": "error",
          "message": {
            "text": "[CVE-2003-0693] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2003-0695_3.15:openssh-keygen_8.8_p1-r1",
          "ruleIndex": 154,
          "level": "error",
          "message": {
            "text": "[CVE-2003-0695] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2006-5794_3.15:openssh-client-common_8.8_p1-r1",
          "ruleIndex": 155,
          "level": "error",
          "message": {
            "text": "[CVE-2006-5794] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2003-0682_3.15:openssh-client-common_8.8_p1-r1",
          "ruleIndex": 156,
          "level": "error",
          "message": {
            "text": "[CVE-2003-0682] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2006-5794_3.15:openssh-client-default_8.8_p1-r1",
          "ruleIndex": 157,
          "level": "error",
          "message": {
            "text": "[CVE-2006-5794] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2006-5051_3.15:openssh-client-default_8.8_p1-r1",
          "ruleIndex": 158,
          "level": "error",
          "message": {
            "text": "[CVE-2006-5051] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-46402_github.com/whilp/git-urls_1.0.0",
          "ruleIndex": 159,
          "level": "error",
          "message": {
            "text": "[CVE-2023-46402] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2003-0695_3.15:openssh-client-common_8.8_p1-r1",
          "ruleIndex": 160,
          "level": "error",
          "message": {
            "text": "[CVE-2003-0695] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2003-0693_3.15:openssh-keygen_8.8_p1-r1",
          "ruleIndex": 161,
          "level": "error",
          "message": {
            "text": "[CVE-2003-0693] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2006-5794_3.15:openssh-keygen_8.8_p1-r1",
          "ruleIndex": 162,
          "level": "error",
          "message": {
            "text": "[CVE-2006-5794] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-36690_3.15:sqlite-libs_3.36.0-r0",
          "ruleIndex": 163,
          "level": "error",
          "message": {
            "text": "[CVE-2021-36690] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2003-0695_3.15:openssh-client-default_8.8_p1-r1",
          "ruleIndex": 164,
          "level": "error",
          "message": {
            "text": "[CVE-2003-0695] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2003-0682_3.15:openssh-keygen_8.8_p1-r1",
          "ruleIndex": 165,
          "level": "error",
          "message": {
            "text": "[CVE-2003-0682] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-29458_3.15:ncurses-libs_6.3_p20211120-r0",
          "ruleIndex": 166,
          "level": "error",
          "message": {
            "text": "[CVE-2022-29458] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-28852_golang.org/x/text_0.3.3",
          "ruleIndex": 167,
          "level": "error",
          "message": {
            "text": "[CVE-2020-28852] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-39260_3.15:git_2.34.2-r0",
          "ruleIndex": 168,
          "level": "error",
          "message": {
            "text": "[CVE-2022-39260] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27780_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 169,
          "level": "error",
          "message": {
            "text": "[CVE-2022-27780] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "XRAY-129384_go.mongodb.org/mongo-driver_1.1.2",
          "ruleIndex": 170,
          "level": "error",
          "message": {
            "text": "[XRAY-129384] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-28319_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 171,
          "level": "error",
          "message": {
            "text": "[CVE-2023-28319] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-28852_golang.org/x/text_0.3.2",
          "ruleIndex": 172,
          "level": "error",
          "message": {
            "text": "[CVE-2020-28852] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-42915_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 173,
          "level": "error",
          "message": {
            "text": "[CVE-2022-42915] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42915_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 174,
          "level": "error",
          "message": {
            "text": "[CVE-2023-42915] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-38039_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 175,
          "level": "error",
          "message": {
            "text": "[CVE-2023-38039] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-29458_3.15:ncurses-terminfo-base_6.3_p20211120-r0",
          "ruleIndex": 176,
          "level": "error",
          "message": {
            "text": "[CVE-2022-29458] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-28366_github.com/golang/go_1.14.4",
          "ruleIndex": 177,
          "level": "error",
          "message": {
            "text": "[CVE-2020-28366] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-23946_3.15:git_2.34.2-r0",
          "ruleIndex": 178,
          "level": "error",
          "message": {
            "text": "[CVE-2023-23946] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-28367_github.com/golang/go_1.14.4",
          "ruleIndex": 179,
          "level": "error",
          "message": {
            "text": "[CVE-2020-28367] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-29187_3.15:git_2.34.2-r0",
          "ruleIndex": 180,
          "level": "error",
          "message": {
            "text": "[CVE-2022-29187] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32148_github.com/golang/go_1.17.6",
          "ruleIndex": 181,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-32148] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-48795_golang.org/x/crypto_0.0.0-20220427172511-eb4f295cb31f",
          "ruleIndex": 182,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-48795] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-48795_3.15:openssh-client-default_8.8_p1-r1",
          "ruleIndex": 183,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-48795] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-44717_github.com/golang/go_1.14.4",
          "ruleIndex": 184,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-44717] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_github.com/golang/go_1.16.15",
          "ruleIndex": 185,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29409_github.com/golang/go_1.14.4",
          "ruleIndex": 186,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29409] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29406_github.com/golang/go_1.16.15",
          "ruleIndex": 187,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29406] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-48795_golang.org/x/crypto_0.0.0-20200622213623-75b288015ac9",
          "ruleIndex": 188,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-48795] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0465_3.15:libcrypto1.1_1.1.1n-r0",
          "ruleIndex": 189,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-0465] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-31525_golang.org/x/net_0.0.0-20201110031124-69a78807bb2b",
          "ruleIndex": 190,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-31525] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_github.com/golang/go_1.14.4",
          "ruleIndex": 191,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29409_github.com/golang/go_1.17.6",
          "ruleIndex": 192,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29409] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-44717_github.com/golang/go_1.16.7",
          "ruleIndex": 193,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-44717] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-28321_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 194,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-28321] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29406_github.com/golang/go_1.16.7",
          "ruleIndex": 195,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29406] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29409_github.com/golang/go_1.16.15",
          "ruleIndex": 196,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29409] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0466_3.15:libcrypto1.1_1.1.1n-r0",
          "ruleIndex": 197,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-0466] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29409_github.com/golang/go_1.16.7",
          "ruleIndex": 198,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29409] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_golang.org/x/net_0.0.0-20201110031124-69a78807bb2b",
          "ruleIndex": 199,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32148_github.com/golang/go_1.16.7",
          "ruleIndex": 200,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-32148] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41717_golang.org/x/net_0.0.0-20200625001655-4c5254603344",
          "ruleIndex": 201,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-41717] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-48795_golang.org/x/crypto_0.0.0-20210220033148-5ea612d1eb83",
          "ruleIndex": 202,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-48795] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-2650_3.15:libssl1.1_1.1.1n-r0",
          "ruleIndex": 203,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-2650] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29406_github.com/golang/go_1.17.6",
          "ruleIndex": 204,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29406] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_github.com/golang/go_1.16.7",
          "ruleIndex": 205,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2097_3.15:libcrypto1.1_1.1.1n-r0",
          "ruleIndex": 206,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-2097] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0466_3.15:libssl1.1_1.1.1n-r0",
          "ruleIndex": 207,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-0466] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-48795_3.15:openssh-keygen_8.8_p1-r1",
          "ruleIndex": 208,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-48795] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_github.com/golang/go_1.17.6",
          "ruleIndex": 209,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-31525_golang.org/x/net_0.0.0-20200625001655-4c5254603344",
          "ruleIndex": 210,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-31525] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-48795_3.15:openssh-client-common_8.8_p1-r1",
          "ruleIndex": 211,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-48795] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-2650_3.15:libcrypto1.1_1.1.1n-r0",
          "ruleIndex": 212,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-2650] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-20329_go.mongodb.org/mongo-driver_1.1.2",
          "ruleIndex": 213,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-20329] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29406_github.com/golang/go_1.14.4",
          "ruleIndex": 214,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29406] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_golang.org/x/net_0.0.0-20200625001655-4c5254603344",
          "ruleIndex": 215,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_golang.org/x/net_0.0.0-20220127200216-cd36cc0744dd",
          "ruleIndex": 216,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32148_github.com/golang/go_1.14.4",
          "ruleIndex": 217,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-32148] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0465_3.15:libssl1.1_1.1.1n-r0",
          "ruleIndex": 218,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-0465] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2097_3.15:libssl1.1_1.1.1n-r0",
          "ruleIndex": 219,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-2097] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41717_golang.org/x/net_0.0.0-20220127200216-cd36cc0744dd",
          "ruleIndex": 220,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-41717] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41717_golang.org/x/net_0.0.0-20201110031124-69a78807bb2b",
          "ruleIndex": 221,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-41717] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32148_github.com/golang/go_1.16.15",
          "ruleIndex": 222,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-32148] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24786_google.golang.org/protobuf_1.25.0",
          "ruleIndex": 223,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-24786] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42364_3.15:ssl_client_1.34.1-r5",
          "ruleIndex": 224,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42364] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-34903_3.15:gpg-agent_2.2.31-r1",
          "ruleIndex": 225,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-34903] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-51384_3.15:openssh-client-common_8.8_p1-r1",
          "ruleIndex": 226,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-51384] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-28320_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 227,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-28320] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-2975_3.15:libcrypto1.1_1.1.1n-r0",
          "ruleIndex": 228,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-2975] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-34903_3.15:gnupg-wks-client_2.2.31-r1",
          "ruleIndex": 229,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-34903] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39326_github.com/golang/go_1.16.7",
          "ruleIndex": 230,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39326] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32206_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 231,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-32206] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42364_3.15:busybox_1.34.1-r5",
          "ruleIndex": 232,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42364] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39326_github.com/golang/go_1.17.6",
          "ruleIndex": 233,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39326] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-29510_github.com/golang/go_1.14.4",
          "ruleIndex": 234,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-29510] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45284_github.com/golang/go_1.14.4",
          "ruleIndex": 235,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45284] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-46219_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 236,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-46219] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-34903_3.15:gpg_2.2.31-r1",
          "ruleIndex": 237,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-34903] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1705_github.com/golang/go_1.16.7",
          "ruleIndex": 238,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-1705] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24532_github.com/golang/go_1.17.6",
          "ruleIndex": 239,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-24532] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45284_github.com/golang/go_1.16.7",
          "ruleIndex": 240,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45284] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-51384_3.15:openssh-keygen_8.8_p1-r1",
          "ruleIndex": 241,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-51384] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-34903_3.15:gnupg-dirmngr_2.2.31-r1",
          "ruleIndex": 242,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-34903] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-34903_3.15:gpg-wks-server_2.2.31-r1",
          "ruleIndex": 243,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-34903] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39318_github.com/golang/go_1.17.6",
          "ruleIndex": 244,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39318] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5678_3.15:libcrypto1.1_1.1.1n-r0",
          "ruleIndex": 245,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-5678] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-0853_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 246,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-0853] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-2975_3.15:libssl1.1_1.1.1n-r0",
          "ruleIndex": 247,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-2975] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-0727_3.15:libssl1.1_1.1.1n-r0",
          "ruleIndex": 248,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-0727] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39319_github.com/golang/go_1.16.15",
          "ruleIndex": 249,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39319] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3817_3.15:libcrypto1.1_1.1.1n-r0",
          "ruleIndex": 250,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3817] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39319_github.com/golang/go_1.17.6",
          "ruleIndex": 251,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39319] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-1255_3.15:libssl1.1_1.1.1n-r0",
          "ruleIndex": 252,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-1255] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24532_github.com/golang/go_1.16.15",
          "ruleIndex": 253,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-24532] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39326_github.com/golang/go_1.14.4",
          "ruleIndex": 254,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39326] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5678_3.15:libssl1.1_1.1.1n-r0",
          "ruleIndex": 255,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-5678] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-27537_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 256,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-27537] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4304_3.15:libcrypto1.1_1.1.1n-r0",
          "ruleIndex": 257,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-4304] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-51384_3.15:openssh-client-default_8.8_p1-r1",
          "ruleIndex": 258,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-51384] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39318_github.com/golang/go_1.16.7",
          "ruleIndex": 259,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39318] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39319_github.com/golang/go_1.16.7",
          "ruleIndex": 260,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39319] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45284_github.com/golang/go_1.17.6",
          "ruleIndex": 261,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45284] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4203_3.15:libcrypto1.1_1.1.1n-r0",
          "ruleIndex": 262,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-4203] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45284_github.com/golang/go_1.16.15",
          "ruleIndex": 263,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45284] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30115_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 264,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-30115] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-34903_3.15:gpgv_2.2.31-r1",
          "ruleIndex": 265,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-34903] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-34903_3.15:gnupg-utils_2.2.31-r1",
          "ruleIndex": 266,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-34903] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42363_3.15:busybox_1.34.1-r5",
          "ruleIndex": 267,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42363] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3446_3.15:libssl1.1_1.1.1n-r0",
          "ruleIndex": 268,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3446] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-46218_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 269,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-46218] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-34903_3.15:gpgsm_2.2.31-r1",
          "ruleIndex": 270,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-34903] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42366_3.15:ssl_client_1.34.1-r5",
          "ruleIndex": 271,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42366] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1705_github.com/golang/go_1.17.6",
          "ruleIndex": 272,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-1705] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-39253_3.15:git_2.34.2-r0",
          "ruleIndex": 273,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-39253] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-34558_github.com/golang/go_1.14.4",
          "ruleIndex": 274,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-34558] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1705_github.com/golang/go_1.14.4",
          "ruleIndex": 275,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-1705] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24532_github.com/golang/go_1.14.4",
          "ruleIndex": 276,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-24532] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-27538_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 277,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-27538] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39318_github.com/golang/go_1.14.4",
          "ruleIndex": 278,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39318] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-8565_k8s.io/client-go_0.18.10",
          "ruleIndex": 279,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-8565] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27779_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 280,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-27779] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-27535_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 281,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-27535] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-41190_github.com/opencontainers/image-spec_1.0.2-0.20211117181255-693428a734f5",
          "ruleIndex": 282,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-41190] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39326_github.com/golang/go_1.16.15",
          "ruleIndex": 283,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39326] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5981_3.15:gnutls_3.7.1-r0",
          "ruleIndex": 284,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-5981] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-29511_github.com/golang/go_1.14.4",
          "ruleIndex": 285,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-29511] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24532_github.com/golang/go_1.16.7",
          "ruleIndex": 286,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-24532] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-35260_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 287,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-35260] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-0727_3.15:libcrypto1.1_1.1.1n-r0",
          "ruleIndex": 288,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-0727] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-15586_github.com/golang/go_1.14.4",
          "ruleIndex": 289,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-15586] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-6129_3.15:libcrypto1.1_1.1.1n-r0",
          "ruleIndex": 290,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-6129] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32205_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 291,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-32205] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24786_google.golang.org/protobuf_1.27.1",
          "ruleIndex": 292,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-24786] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-52426_3.15:expat_2.4.7-r0",
          "ruleIndex": 293,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-52426] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-23916_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 294,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-23916] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4304_3.15:libssl1.1_1.1.1n-r0",
          "ruleIndex": 295,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-4304] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39319_github.com/golang/go_1.14.4",
          "ruleIndex": 296,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39319] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3446_3.15:libcrypto1.1_1.1.1n-r0",
          "ruleIndex": 297,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3446] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3817_3.15:libssl1.1_1.1.1n-r0",
          "ruleIndex": 298,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3817] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-22490_3.15:git_2.34.2-r0",
          "ruleIndex": 299,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-22490] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3114_github.com/golang/go_1.14.4",
          "ruleIndex": 300,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-3114] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-34903_3.15:gnupg-gpgconf_2.2.31-r1",
          "ruleIndex": 301,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-34903] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-1255_3.15:libcrypto1.1_1.1.1n-r0",
          "ruleIndex": 302,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-1255] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42365_3.15:busybox_1.34.1-r5",
          "ruleIndex": 303,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42365] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-43552_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 304,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-43552] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-6129_3.15:libssl1.1_1.1.1n-r0",
          "ruleIndex": 305,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-6129] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42363_3.15:ssl_client_1.34.1-r5",
          "ruleIndex": 306,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42363] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32208_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 307,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-32208] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-34903_3.15:gnupg_2.2.31-r1",
          "ruleIndex": 308,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-34903] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-24553_github.com/golang/go_1.14.4",
          "ruleIndex": 309,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-24553] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42366_3.15:busybox_1.34.1-r5",
          "ruleIndex": 310,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42366] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42365_3.15:ssl_client_1.34.1-r5",
          "ruleIndex": 311,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42365] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-23915_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 312,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-23915] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39318_github.com/golang/go_1.16.15",
          "ruleIndex": 313,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39318] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1705_github.com/golang/go_1.16.15",
          "ruleIndex": 314,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-1705] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4203_3.15:libssl1.1_1.1.1n-r0",
          "ruleIndex": 315,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-4203] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-32665_3.15:glib_2.70.1-r0",
          "ruleIndex": 316,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-32665] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2007-2768_3.15:openssh-client-common_8.8_p1-r1",
          "ruleIndex": 317,
          "level": "warning",
          "message": {
            "text": "[CVE-2007-2768] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2007-2768_3.15:openssh-client-default_8.8_p1-r1",
          "ruleIndex": 318,
          "level": "warning",
          "message": {
            "text": "[CVE-2007-2768] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2007-2768_3.15:openssh-keygen_8.8_p1-r1",
          "ruleIndex": 319,
          "level": "warning",
          "message": {
            "text": "[CVE-2007-2768] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2009-3767_3.15:libssl1.1_1.1.1n-r0",
          "ruleIndex": 320,
          "level": "warning",
          "message": {
            "text": "[CVE-2009-3767] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-32611_3.15:glib_2.70.1-r0",
          "ruleIndex": 321,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-32611] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2009-3767_3.15:libcrypto1.1_1.1.1n-r0",
          "ruleIndex": 322,
          "level": "warning",
          "message": {
            "text": "[CVE-2009-3767] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-4209_3.15:gnutls_3.7.1-r0",
          "ruleIndex": 323,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-4209] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30629_github.com/golang/go_1.17.6",
          "ruleIndex": 324,
          "level": "note",
          "message": {
            "text": "[CVE-2022-30629] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-25815_3.15:git_2.34.2-r0",
          "ruleIndex": 325,
          "level": "note",
          "message": {
            "text": "[CVE-2023-25815] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-35252_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 326,
          "level": "note",
          "message": {
            "text": "[CVE-2022-35252] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30629_github.com/golang/go_1.16.7",
          "ruleIndex": 327,
          "level": "note",
          "message": {
            "text": "[CVE-2022-30629] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-38546_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 328,
          "level": "note",
          "message": {
            "text": "[CVE-2023-38546] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30629_github.com/golang/go_1.14.4",
          "ruleIndex": 329,
          "level": "note",
          "message": {
            "text": "[CVE-2022-30629] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-2602_3.15:libcap_2.61-r0",
          "ruleIndex": 330,
          "level": "note",
          "message": {
            "text": "[CVE-2023-2602] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30629_github.com/golang/go_1.16.15",
          "ruleIndex": 331,
          "level": "note",
          "message": {
            "text": "[CVE-2022-30629] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-36368_3.15:openssh-client-common_8.8_p1-r1",
          "ruleIndex": 332,
          "level": "note",
          "message": {
            "text": "[CVE-2021-36368] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-36368_3.15:openssh-keygen_8.8_p1-r1",
          "ruleIndex": 333,
          "level": "note",
          "message": {
            "text": "[CVE-2021-36368] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-36368_3.15:openssh-client-default_8.8_p1-r1",
          "ruleIndex": 334,
          "level": "note",
          "message": {
            "text": "[CVE-2021-36368] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-28757_3.15:expat_2.4.7-r0",
          "ruleIndex": 335,
          "level": "none",
          "message": {
            "text": "[CVE-2024-28757] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-4603_3.15:libcrypto1.1_1.1.1n-r0",
          "ruleIndex": 336,
          "level": "none",
          "message": {
            "text": "[CVE-2024-4603] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-28085_3.15:libblkid_2.37.4-r0",
          "ruleIndex": 337,
          "level": "none",
          "message": {
            "text": "[CVE-2024-28085] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-32465_3.15:git_2.34.2-r0",
          "ruleIndex": 338,
          "level": "none",
          "message": {
            "text": "[CVE-2024-32465] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-32020_3.15:git_2.34.2-r0",
          "ruleIndex": 339,
          "level": "none",
          "message": {
            "text": "[CVE-2024-32020] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-6237_3.15:libcrypto1.1_1.1.1n-r0",
          "ruleIndex": 340,
          "level": "none",
          "message": {
            "text": "[CVE-2023-6237] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-4603_3.15:libssl1.1_1.1.1n-r0",
          "ruleIndex": 341,
          "level": "none",
          "message": {
            "text": "[CVE-2024-4603] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-28834_3.15:gnutls_3.7.1-r0",
          "ruleIndex": 342,
          "level": "none",
          "message": {
            "text": "[CVE-2024-28834] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2466_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 343,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2466] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-1394_3.15:libssl1.1_1.1.1n-r0",
          "ruleIndex": 344,
          "level": "none",
          "message": {
            "text": "[CVE-2024-1394] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-6237_3.15:libssl1.1_1.1.1n-r0",
          "ruleIndex": 345,
          "level": "none",
          "message": {
            "text": "[CVE-2023-6237] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-1394_3.15:libcrypto1.1_1.1.1n-r0",
          "ruleIndex": 346,
          "level": "none",
          "message": {
            "text": "[CVE-2024-1394] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2511_3.15:libssl1.1_1.1.1n-r0",
          "ruleIndex": 347,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2511] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2398_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 348,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2398] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2511_3.15:libcrypto1.1_1.1.1n-r0",
          "ruleIndex": 349,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2511] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-34397_3.15:glib_2.70.1-r0",
          "ruleIndex": 350,
          "level": "none",
          "message": {
            "text": "[CVE-2024-34397] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-32021_3.15:git_2.34.2-r0",
          "ruleIndex": 351,
          "level": "none",
          "message": {
            "text": "[CVE-2024-32021] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2004_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 352,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2004] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-28085_3.15:libmount_2.37.4-r0",
          "ruleIndex": 353,
          "level": "none",
          "message": {
            "text": "[CVE-2024-28085] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2379_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 354,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2379] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-28835_3.15:gnutls_3.7.1-r0",
          "ruleIndex": 355,
          "level": "none",
          "message": {
            "text": "[CVE-2024-28835] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29404_github.com/golang/go_1.14.4",
          "ruleIndex": 356,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29404] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-3515_3.15:libksba_1.6.0-r0",
          "ruleIndex": 357,
          "level": "error",
          "message": {
            "text": "[CVE-2022-3515] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-23914_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 358,
          "level": "error",
          "message": {
            "text": "[CVE-2023-23914] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-47629_3.15:libksba_1.6.0-r0",
          "ruleIndex": 359,
          "level": "error",
          "message": {
            "text": "[CVE-2022-47629] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-29155_3.15:libldap_2.6.0-r0",
          "ruleIndex": 360,
          "level": "error",
          "message": {
            "text": "[CVE-2022-29155] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-28531_3.15:openssh-keygen_8.8_p1-r1",
          "ruleIndex": 361,
          "level": "error",
          "message": {
            "text": "[CVE-2023-28531] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29405_github.com/golang/go_1.16.7",
          "ruleIndex": 362,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29405] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-32002_3.15:git_2.34.2-r0",
          "ruleIndex": 363,
          "level": "error",
          "message": {
            "text": "[CVE-2024-32002] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-38545_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 364,
          "level": "error",
          "message": {
            "text": "[CVE-2023-38545] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-38297_github.com/golang/go_1.14.4",
          "ruleIndex": 365,
          "level": "error",
          "message": {
            "text": "[CVE-2021-38297] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-46848_3.15:libtasn1_4.18.0-r0",
          "ruleIndex": 366,
          "level": "error",
          "message": {
            "text": "[CVE-2021-46848] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29404_github.com/golang/go_1.16.7",
          "ruleIndex": 367,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29404] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1996_github.com/emicklei/go-restful_0.0.0-20170410110728-ff4f55a20633",
          "ruleIndex": 368,
          "level": "error",
          "message": {
            "text": "[CVE-2022-1996] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32221_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 369,
          "level": "error",
          "message": {
            "text": "[CVE-2022-32221] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29402_github.com/golang/go_1.14.4",
          "ruleIndex": 370,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29402] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29404_github.com/golang/go_1.16.15",
          "ruleIndex": 371,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29404] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29404_github.com/golang/go_1.17.6",
          "ruleIndex": 372,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29404] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-28531_3.15:openssh-client-default_8.8_p1-r1",
          "ruleIndex": 373,
          "level": "error",
          "message": {
            "text": "[CVE-2023-28531] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29402_github.com/golang/go_1.16.15",
          "ruleIndex": 374,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29402] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29405_github.com/golang/go_1.16.15",
          "ruleIndex": 375,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29405] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-38297_github.com/golang/go_1.16.7",
          "ruleIndex": 376,
          "level": "error",
          "message": {
            "text": "[CVE-2021-38297] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-28531_3.15:openssh-client-common_8.8_p1-r1",
          "ruleIndex": 377,
          "level": "error",
          "message": {
            "text": "[CVE-2023-28531] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29402_github.com/golang/go_1.16.7",
          "ruleIndex": 378,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29402] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29402_github.com/golang/go_1.17.6",
          "ruleIndex": 379,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29402] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1587_3.15:pcre2_10.39-r0",
          "ruleIndex": 380,
          "level": "error",
          "message": {
            "text": "[CVE-2022-1587] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29405_github.com/golang/go_1.17.6",
          "ruleIndex": 381,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29405] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1586_3.15:pcre2_10.39-r0",
          "ruleIndex": 382,
          "level": "error",
          "message": {
            "text": "[CVE-2022-1586] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29405_github.com/golang/go_1.14.4",
          "ruleIndex": 383,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29405] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-49210_3.15:libssl1.1_1.1.1n-r0",
          "ruleIndex": 384,
          "level": "error",
          "message": {
            "text": "[CVE-2023-49210] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-49210_3.15:libcrypto1.1_1.1.1n-r0",
          "ruleIndex": 385,
          "level": "error",
          "message": {
            "text": "[CVE-2023-49210] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24537_github.com/golang/go_1.16.7",
          "ruleIndex": 386,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24537] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41724_github.com/golang/go_1.14.4",
          "ruleIndex": 387,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41724] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-38561_golang.org/x/text_0.3.2",
          "ruleIndex": 388,
          "level": "error",
          "message": {
            "text": "[CVE-2021-38561] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29403_github.com/golang/go_1.16.15",
          "ruleIndex": 389,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29403] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30634_github.com/golang/go_1.16.7",
          "ruleIndex": 390,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30634] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-41772_github.com/golang/go_1.14.4",
          "ruleIndex": 391,
          "level": "error",
          "message": {
            "text": "[CVE-2021-41772] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-33194_golang.org/x/net_0.0.0-20201110031124-69a78807bb2b",
          "ruleIndex": 392,
          "level": "error",
          "message": {
            "text": "[CVE-2021-33194] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41720_github.com/golang/go_1.17.6",
          "ruleIndex": 393,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41720] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45283_github.com/golang/go_1.16.15",
          "ruleIndex": 394,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45283] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2880_github.com/golang/go_1.17.6",
          "ruleIndex": 395,
          "level": "error",
          "message": {
            "text": "[CVE-2022-2880] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-33194_golang.org/x/net_0.0.0-20200625001655-4c5254603344",
          "ruleIndex": 396,
          "level": "error",
          "message": {
            "text": "[CVE-2021-33194] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2880_github.com/golang/go_1.16.15",
          "ruleIndex": 397,
          "level": "error",
          "message": {
            "text": "[CVE-2022-2880] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27191_golang.org/x/crypto_0.0.0-20210220033148-5ea612d1eb83",
          "ruleIndex": 398,
          "level": "error",
          "message": {
            "text": "[CVE-2022-27191] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41716_github.com/golang/go_1.16.7",
          "ruleIndex": 399,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41716] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-35945_3.15:nghttp2-libs_1.46.0-r0",
          "ruleIndex": 400,
          "level": "error",
          "message": {
            "text": "[CVE-2023-35945] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32149_golang.org/x/text_0.3.2",
          "ruleIndex": 401,
          "level": "error",
          "message": {
            "text": "[CVE-2022-32149] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23773_github.com/golang/go_1.16.7",
          "ruleIndex": 402,
          "level": "error",
          "message": {
            "text": "[CVE-2022-23773] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2880_github.com/golang/go_1.16.7",
          "ruleIndex": 403,
          "level": "error",
          "message": {
            "text": "[CVE-2022-2880] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24537_github.com/golang/go_1.16.15",
          "ruleIndex": 404,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24537] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41715_github.com/golang/go_1.14.4",
          "ruleIndex": 405,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41715] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45285_github.com/golang/go_1.17.6",
          "ruleIndex": 406,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45285] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24537_github.com/golang/go_1.14.4",
          "ruleIndex": 407,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24537] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23773_github.com/golang/go_1.17.6",
          "ruleIndex": 408,
          "level": "error",
          "message": {
            "text": "[CVE-2022-23773] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29403_github.com/golang/go_1.17.6",
          "ruleIndex": 409,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29403] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30580_github.com/golang/go_1.16.7",
          "ruleIndex": 410,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30580] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29491_3.15:ncurses-terminfo-base_6.3_p20211120-r0",
          "ruleIndex": 411,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29491] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0361_3.15:gnutls_3.7.1-r0",
          "ruleIndex": 412,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0361] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41409_3.15:pcre2_10.39-r0",
          "ruleIndex": 413,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41409] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41716_github.com/golang/go_1.14.4",
          "ruleIndex": 414,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41716] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-29804_github.com/golang/go_1.14.4",
          "ruleIndex": 415,
          "level": "error",
          "message": {
            "text": "[CVE-2022-29804] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-43565_golang.org/x/crypto_0.0.0-20200622213623-75b288015ac9",
          "ruleIndex": 416,
          "level": "error",
          "message": {
            "text": "[CVE-2021-43565] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-0553_3.15:gnutls_3.7.1-r0",
          "ruleIndex": 417,
          "level": "error",
          "message": {
            "text": "[CVE-2024-0553] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-7104_3.15:sqlite-libs_3.36.0-r0",
          "ruleIndex": 418,
          "level": "error",
          "message": {
            "text": "[CVE-2023-7104] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29403_github.com/golang/go_1.14.4",
          "ruleIndex": 419,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29403] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27191_golang.org/x/crypto_0.0.0-20200622213623-75b288015ac9",
          "ruleIndex": 420,
          "level": "error",
          "message": {
            "text": "[CVE-2022-27191] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32149_golang.org/x/text_0.3.7",
          "ruleIndex": 421,
          "level": "error",
          "message": {
            "text": "[CVE-2022-32149] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39323_github.com/golang/go_1.16.7",
          "ruleIndex": 422,
          "level": "error",
          "message": {
            "text": "[CVE-2023-39323] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45283_github.com/golang/go_1.17.6",
          "ruleIndex": 423,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45283] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-2603_3.15:libcap_2.61-r0",
          "ruleIndex": 424,
          "level": "error",
          "message": {
            "text": "[CVE-2023-2603] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30634_github.com/golang/go_1.16.15",
          "ruleIndex": 425,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30634] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3115_github.com/golang/go_1.14.4",
          "ruleIndex": 426,
          "level": "error",
          "message": {
            "text": "[CVE-2021-3115] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30580_github.com/golang/go_1.16.15",
          "ruleIndex": 427,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30580] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-29804_github.com/golang/go_1.16.15",
          "ruleIndex": 428,
          "level": "error",
          "message": {
            "text": "[CVE-2022-29804] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41720_github.com/golang/go_1.16.15",
          "ruleIndex": 429,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41720] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41716_github.com/golang/go_1.16.15",
          "ruleIndex": 430,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41716] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45285_github.com/golang/go_1.14.4",
          "ruleIndex": 431,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45285] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45283_github.com/golang/go_1.16.7",
          "ruleIndex": 432,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45283] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2880_github.com/golang/go_1.14.4",
          "ruleIndex": 433,
          "level": "error",
          "message": {
            "text": "[CVE-2022-2880] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-41771_github.com/golang/go_1.16.7",
          "ruleIndex": 434,
          "level": "error",
          "message": {
            "text": "[CVE-2021-41771] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41722_github.com/golang/go_1.16.7",
          "ruleIndex": 435,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41722] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30630_github.com/golang/go_1.14.4",
          "ruleIndex": 436,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30630] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-43565_golang.org/x/crypto_0.0.0-20210220033148-5ea612d1eb83",
          "ruleIndex": 437,
          "level": "error",
          "message": {
            "text": "[CVE-2021-43565] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41724_github.com/golang/go_1.16.15",
          "ruleIndex": 438,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41724] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45285_github.com/golang/go_1.16.7",
          "ruleIndex": 439,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45285] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29491_3.15:ncurses-libs_6.3_p20211120-r0",
          "ruleIndex": 440,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29491] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30630_github.com/golang/go_1.16.15",
          "ruleIndex": 441,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30630] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41716_github.com/golang/go_1.17.6",
          "ruleIndex": 442,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41716] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39323_github.com/golang/go_1.14.4",
          "ruleIndex": 443,
          "level": "error",
          "message": {
            "text": "[CVE-2023-39323] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2016-7798_3.15:libcrypto1.1_1.1.1n-r0",
          "ruleIndex": 444,
          "level": "error",
          "message": {
            "text": "[CVE-2016-7798] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-29804_github.com/golang/go_1.16.7",
          "ruleIndex": 445,
          "level": "error",
          "message": {
            "text": "[CVE-2022-29804] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45283_github.com/golang/go_1.14.4",
          "ruleIndex": 446,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45283] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41715_github.com/golang/go_1.16.7",
          "ruleIndex": 447,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41715] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-38561_golang.org/x/text_0.3.3",
          "ruleIndex": 448,
          "level": "error",
          "message": {
            "text": "[CVE-2021-38561] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41715_github.com/golang/go_1.17.6",
          "ruleIndex": 449,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41715] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-0567_3.15:gnutls_3.7.1-r0",
          "ruleIndex": 450,
          "level": "error",
          "message": {
            "text": "[CVE-2024-0567] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30634_github.com/golang/go_1.14.4",
          "ruleIndex": 451,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30634] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39323_github.com/golang/go_1.16.15",
          "ruleIndex": 452,
          "level": "error",
          "message": {
            "text": "[CVE-2023-39323] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-16845_github.com/ulikunitz/xz_0.5.5",
          "ruleIndex": 453,
          "level": "error",
          "message": {
            "text": "[CVE-2020-16845] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5363_3.15:libssl1.1_1.1.1n-r0",
          "ruleIndex": 454,
          "level": "error",
          "message": {
            "text": "[CVE-2023-5363] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41722_github.com/golang/go_1.14.4",
          "ruleIndex": 455,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41722] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30634_github.com/golang/go_1.17.6",
          "ruleIndex": 456,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30634] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30630_github.com/golang/go_1.17.6",
          "ruleIndex": 457,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30630] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2509_3.15:gnutls_3.7.1-r0",
          "ruleIndex": 458,
          "level": "error",
          "message": {
            "text": "[CVE-2022-2509] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2016-7798_3.15:libssl1.1_1.1.1n-r0",
          "ruleIndex": 459,
          "level": "error",
          "message": {
            "text": "[CVE-2016-7798] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30630_github.com/golang/go_1.16.7",
          "ruleIndex": 460,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30630] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30580_github.com/golang/go_1.14.4",
          "ruleIndex": 461,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30580] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-43551_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 462,
          "level": "error",
          "message": {
            "text": "[CVE-2022-43551] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41724_github.com/golang/go_1.16.7",
          "ruleIndex": 463,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41724] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41722_github.com/golang/go_1.16.15",
          "ruleIndex": 464,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41722] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41720_github.com/golang/go_1.14.4",
          "ruleIndex": 465,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41720] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-27533_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 466,
          "level": "error",
          "message": {
            "text": "[CVE-2023-27533] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41724_github.com/golang/go_1.17.6",
          "ruleIndex": 467,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41724] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5363_3.15:libcrypto1.1_1.1.1n-r0",
          "ruleIndex": 468,
          "level": "error",
          "message": {
            "text": "[CVE-2023-5363] sha256__4fc242d58285699eca05db3cc7c7122a2b8e014d9481f323bd9277baacfa0628.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24537_github.com/golang/go_1.17.6",
          "ruleIndex": 469,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24537] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39323_github.com/golang/go_1.17.6",
          "ruleIndex": 470,
          "level": "error",
          "message": {
            "text": "[CVE-2023-39323] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29403_github.com/golang/go_1.16.7",
          "ruleIndex": 471,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29403] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-25652_3.15:git_2.34.2-r0",
          "ruleIndex": 472,
          "level": "error",
          "message": {
            "text": "[CVE-2023-25652] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-41771_github.com/golang/go_1.14.4",
          "ruleIndex": 473,
          "level": "error",
          "message": {
            "text": "[CVE-2021-41771] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-41772_github.com/golang/go_1.16.7",
          "ruleIndex": 474,
          "level": "error",
          "message": {
            "text": "[CVE-2021-41772] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41720_github.com/golang/go_1.16.7",
          "ruleIndex": 475,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41720] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-14040_golang.org/x/text_0.3.2",
          "ruleIndex": 476,
          "level": "error",
          "message": {
            "text": "[CVE-2020-14040] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45285_github.com/golang/go_1.16.15",
          "ruleIndex": 477,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45285] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41722_github.com/golang/go_1.17.6",
          "ruleIndex": 478,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41722] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-29652_golang.org/x/crypto_0.0.0-20200622213623-75b288015ac9",
          "ruleIndex": 479,
          "level": "error",
          "message": {
            "text": "[CVE-2020-29652] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27781_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 480,
          "level": "error",
          "message": {
            "text": "[CVE-2022-27781] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32149_golang.org/x/text_0.3.3",
          "ruleIndex": 481,
          "level": "error",
          "message": {
            "text": "[CVE-2022-32149] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23773_github.com/golang/go_1.14.4",
          "ruleIndex": 482,
          "level": "error",
          "message": {
            "text": "[CVE-2022-23773] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-29804_github.com/golang/go_1.17.6",
          "ruleIndex": 483,
          "level": "error",
          "message": {
            "text": "[CVE-2022-29804] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30580_github.com/golang/go_1.17.6",
          "ruleIndex": 484,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30580] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-42916_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 485,
          "level": "error",
          "message": {
            "text": "[CVE-2022-42916] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41715_github.com/golang/go_1.16.15",
          "ruleIndex": 486,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41715] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-32636_3.15:glib_2.70.1-r0",
          "ruleIndex": 487,
          "level": "error",
          "message": {
            "text": "[CVE-2023-32636] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29499_3.15:glib_2.70.1-r0",
          "ruleIndex": 488,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29499] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-51385_3.15:openssh-keygen_8.8_p1-r1",
          "ruleIndex": 489,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-51385] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-51385_3.15:openssh-client-common_8.8_p1-r1",
          "ruleIndex": 490,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-51385] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1962_github.com/golang/go_1.16.7",
          "ruleIndex": 491,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-1962] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-29526_golang.org/x/sys_0.0.0-20200323222414-85ca7c5b95cd",
          "ruleIndex": 492,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-29526] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-14039_github.com/golang/go_1.14.4",
          "ruleIndex": 493,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-14039] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1962_github.com/golang/go_1.14.4",
          "ruleIndex": 494,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-1962] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-29526_golang.org/x/sys_0.0.0-20220328115105-d36c6a25d886",
          "ruleIndex": 495,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-29526] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-29526_golang.org/x/sys_0.0.0-20210220050731-9a76102bfb43",
          "ruleIndex": 496,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-29526] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1962_github.com/golang/go_1.17.6",
          "ruleIndex": 497,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-1962] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-51385_3.15:openssh-client-default_8.8_p1-r1",
          "ruleIndex": 498,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-51385] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1962_github.com/golang/go_1.16.15",
          "ruleIndex": 499,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-1962] sha256__c034c99d25cbe9e2a310fb5b9eb9c4ad45efbfe63f83a95643a9bfab99137586.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-27536_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 500,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-27536] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3978_golang.org/x/net_0.0.0-20200625001655-4c5254603344",
          "ruleIndex": 501,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3978] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-36221_github.com/golang/go_1.14.4",
          "ruleIndex": 502,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-36221] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3978_golang.org/x/net_0.0.0-20220127200216-cd36cc0744dd",
          "ruleIndex": 503,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3978] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-33197_github.com/golang/go_1.14.4",
          "ruleIndex": 504,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-33197] sha256__7829f49b1dda4262796c650ef728bfa8bd6a3c2123abad3e4a9905d89bebcddf.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3978_golang.org/x/net_0.0.0-20201110031124-69a78807bb2b",
          "ruleIndex": 505,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3978] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-28180_gopkg.in/square/go-jose.v2_2.3.1",
          "ruleIndex": 506,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-28180] sha256__fce60d5113e58923e267eef46bdbecc31565b9f83bdf67b6eeb629e4a878469d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-28180_gopkg.in/square/go-jose.v2_2.5.1",
          "ruleIndex": 507,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-28180] sha256__0edd391ff2a5be29bb44aee327c623113209a4b64400c4bb7a3f1497abd21ff9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-28322_3.15:libcurl_7.80.0-r1",
          "ruleIndex": 508,
          "level": "note",
          "message": {
            "text": "[CVE-2023-28322] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-32004_3.15:git_2.34.2-r0",
          "ruleIndex": 509,
          "level": "none",
          "message": {
            "text": "[CVE-2024-32004] sha256__975d45b098e15d5b5f5b2be1abb2b4c71157d6f0dcc6ad96b61276c6e340e1d8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://jfrog.com/help/r/jfrog-security-documentation/jfrog-advanced-security",
          "name": "JFrog Applicability Scanner",
          "rules": [
            {
              "id": "applic_CVE-2022-29804",
              "name": "CVE-2022-29804",
              "shortDescription": {
                "text": "Scanner for CVE-2022-29804"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41716",
              "name": "CVE-2022-41716",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41716"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-3115",
              "name": "CVE-2021-3115",
              "shortDescription": {
                "text": "Scanner for CVE-2021-3115"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2020-14039",
              "name": "CVE-2020-14039",
              "shortDescription": {
                "text": "Scanner for CVE-2020-14039"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41720",
              "name": "CVE-2022-41720",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41720"
              },
              "fullDescription": {
                "text": "The scanner checks whether one of the vulnerable functions `os.dirFS.Open` or  `net/http.Dir.Open` is called.",
                "markdown": "The scanner checks whether one of the vulnerable functions `os.dirFS.Open` or  `net/http.Dir.Open` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-38297",
              "name": "CVE-2021-38297",
              "shortDescription": {
                "text": "Scanner for CVE-2021-38297"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41722",
              "name": "CVE-2022-41722",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41722"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-30634",
              "name": "CVE-2022-30634",
              "shortDescription": {
                "text": "Scanner for CVE-2022-30634"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-30580",
              "name": "CVE-2022-30580",
              "shortDescription": {
                "text": "Scanner for CVE-2022-30580"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-28321",
              "name": "CVE-2023-28321",
              "shortDescription": {
                "text": "Scanner for CVE-2023-28321"
              },
              "fullDescription": {
                "text": "The CVE is applicable in all possible configurations of cURL",
                "markdown": "The CVE is applicable in all possible configurations of cURL"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative"
              }
            },
            {
              "id": "applic_CVE-2023-45283",
              "name": "CVE-2023-45283",
              "shortDescription": {
                "text": "Scanner for CVE-2023-45283"
              },
              "fullDescription": {
                "text": "The vulnerability is only exploitable when running under the Windows OS.\nSince currently only Linux containers are supported, the scanner will always conclude that this vulnerability is not applicable.",
                "markdown": "The vulnerability is only exploitable when running under the Windows OS.\nSince currently only Linux containers are supported, the scanner will always conclude that this vulnerability is not applicable."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2020-14040",
              "name": "CVE-2020-14040",
              "shortDescription": {
                "text": "Scanner for CVE-2020-14040"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2020-16845",
              "name": "CVE-2020-16845",
              "shortDescription": {
                "text": "Scanner for CVE-2020-16845"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2020-26160",
              "name": "CVE-2020-26160",
              "shortDescription": {
                "text": "Scanner for CVE-2020-26160"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2020-29652",
              "name": "CVE-2020-29652",
              "shortDescription": {
                "text": "Scanner for CVE-2020-29652"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `ssh.NewServerConn` is called.\n\nThe below prerequisite is also crucial for applicability but is not checked in the scanner (if it is not met, the CVE is not applicable):\n\n1. The data in the `ServerConfig` argument passed to the above function has the `GSSAPIWithMICConfig` field equal `nil`.",
                "markdown": "The scanner checks whether the vulnerable function `ssh.NewServerConn` is called.\n\nThe below prerequisite is also crucial for applicability but is not checked in the scanner (if it is not met, the CVE is not applicable):\n\n1. The data in the `ServerConfig` argument passed to the above function has the `GSSAPIWithMICConfig` field equal `nil`."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-20329",
              "name": "CVE-2021-20329",
              "shortDescription": {
                "text": "Scanner for CVE-2021-20329"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-27918",
              "name": "CVE-2021-27918",
              "shortDescription": {
                "text": "Scanner for CVE-2021-27918"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-29482",
              "name": "CVE-2021-29482",
              "shortDescription": {
                "text": "Scanner for CVE-2021-29482"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-31525",
              "name": "CVE-2021-31525",
              "shortDescription": {
                "text": "Scanner for CVE-2021-31525"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-33194",
              "name": "CVE-2021-33194",
              "shortDescription": {
                "text": "Scanner for CVE-2021-33194"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-33195",
              "name": "CVE-2021-33195",
              "shortDescription": {
                "text": "Scanner for CVE-2021-33195"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-33196",
              "name": "CVE-2021-33196",
              "shortDescription": {
                "text": "Scanner for CVE-2021-33196"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `zip.OpenReader`\n\t\n* `zip.NewReader`",
                "markdown": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `zip.OpenReader`\n\t\n* `zip.NewReader`"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-2880",
              "name": "CVE-2022-2880",
              "shortDescription": {
                "text": "Scanner for CVE-2022-2880"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-33197",
              "name": "CVE-2021-33197",
              "shortDescription": {
                "text": "Scanner for CVE-2021-33197"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-36221",
              "name": "CVE-2021-36221",
              "shortDescription": {
                "text": "Scanner for CVE-2021-36221"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-33198",
              "name": "CVE-2021-33198",
              "shortDescription": {
                "text": "Scanner for CVE-2021-33198"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-38561",
              "name": "CVE-2021-38561",
              "shortDescription": {
                "text": "Scanner for CVE-2021-38561"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-39293",
              "name": "CVE-2021-39293",
              "shortDescription": {
                "text": "Scanner for CVE-2021-39293"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-41771",
              "name": "CVE-2021-41771",
              "shortDescription": {
                "text": "Scanner for CVE-2021-41771"
              },
              "fullDescription": {
                "text": "The scanner checks whether the functions `macho.NewFile()`, `macho.OpenFat()` or `macho.Open()` are called with external input.",
                "markdown": "The scanner checks whether the functions `macho.NewFile()`, `macho.OpenFat()` or `macho.Open()` are called with external input."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-41772",
              "name": "CVE-2021-41772",
              "shortDescription": {
                "text": "Scanner for CVE-2021-41772"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `archive/zip.(*Reader).Open` is used.",
                "markdown": "The scanner checks whether the vulnerable function `archive/zip.(*Reader).Open` is used."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-43565",
              "name": "CVE-2021-43565",
              "shortDescription": {
                "text": "Scanner for CVE-2021-43565"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `NewServerConn` is called.",
                "markdown": "The scanner checks whether the vulnerable function `NewServerConn` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-44717",
              "name": "CVE-2021-44717",
              "shortDescription": {
                "text": "Scanner for CVE-2021-44717"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-46848",
              "name": "CVE-2021-46848",
              "shortDescription": {
                "text": "Scanner for CVE-2021-46848"
              },
              "fullDescription": {
                "text": "The scanner checks whether the following vulnerable functions are called:\n\n- `asn1_encode_simple_der`\n\n- `asn1_decode_simple_der`\n\n- `asn1_decode_simple_ber`\n\n- `asn1_der_decoding2`\n\n- `asn1_der_decoding`\n\n- `asn1_der_decoding_element`\n\n- `asn1_der_decoding_startEnd`\n\n- `asn1_expand_any_defined_by`\n\n- `asn1_expand_octet_string`",
                "markdown": "The scanner checks whether the following vulnerable functions are called:\n\n- `asn1_encode_simple_der`\n\n- `asn1_decode_simple_der`\n\n- `asn1_decode_simple_ber`\n\n- `asn1_der_decoding2`\n\n- `asn1_der_decoding`\n\n- `asn1_der_decoding_element`\n\n- `asn1_der_decoding_startEnd`\n\n- `asn1_expand_any_defined_by`\n\n- `asn1_expand_octet_string`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-1586",
              "name": "CVE-2022-1586",
              "shortDescription": {
                "text": "Scanner for CVE-2022-1586"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `pcre2_jit_compile`\n* `pcre2_jit_compile_8`\n* `pcre2_jit_compile_16`\n* `pcre2_jit_compile_32`",
                "markdown": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `pcre2_jit_compile`\n* `pcre2_jit_compile_8`\n* `pcre2_jit_compile_16`\n* `pcre2_jit_compile_32`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-1587",
              "name": "CVE-2022-1587",
              "shortDescription": {
                "text": "Scanner for CVE-2022-1587"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `pcre2_jit_compile`\n* `pcre2_jit_compile_8`\n* `pcre2_jit_compile_16`\n* `pcre2_jit_compile_32`",
                "markdown": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `pcre2_jit_compile`\n* `pcre2_jit_compile_8`\n* `pcre2_jit_compile_16`\n* `pcre2_jit_compile_32`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-1962",
              "name": "CVE-2022-1962",
              "shortDescription": {
                "text": "Scanner for CVE-2022-1962"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-1996",
              "name": "CVE-2022-1996",
              "shortDescription": {
                "text": "Scanner for CVE-2022-1996"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-2097",
              "name": "CVE-2022-2097",
              "shortDescription": {
                "text": "Scanner for CVE-2022-2097"
              },
              "fullDescription": {
                "text": "The scanner checks if the vulnerable function `EVP_EncryptInit_ex` is called.\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: the system's architecture is 32bit / x86.",
                "markdown": "The scanner checks if the vulnerable function `EVP_EncryptInit_ex` is called.\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: the system's architecture is 32bit / x86."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-21698",
              "name": "CVE-2022-21698",
              "shortDescription": {
                "text": "Scanner for CVE-2022-21698"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-23772",
              "name": "CVE-2022-23772",
              "shortDescription": {
                "text": "Scanner for CVE-2022-23772"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `Rat.SetString` is called.",
                "markdown": "The scanner checks whether the vulnerable function `Rat.SetString` is called."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-23806",
              "name": "CVE-2022-23806",
              "shortDescription": {
                "text": "Scanner for CVE-2022-23806"
              },
              "fullDescription": {
                "text": "The scanner checks if at least one of the following vulnerable functions is called with external output - \n```\ncrypto/elliptic.(*CurveParams).IsOnCurve()\ncrypto/elliptic.p224Curve.IsOnCurve()\ncrypto/elliptic.p521Curve.IsOnCurve()\ncrypto/elliptic.Curve.IsOnCurve()\ncrypto/elliptic.p256Curve.IsOnCurve()\ncrypto/elliptic.(*p224Curve).IsOnCurve()\ncrypto/elliptic.(*p256Curve).IsOnCurve()\ncrypto/elliptic.(*p521Curve).IsOnCurve()\n```",
                "markdown": "The scanner checks if at least one of the following vulnerable functions is called with external output - \n```\ncrypto/elliptic.(*CurveParams).IsOnCurve()\ncrypto/elliptic.p224Curve.IsOnCurve()\ncrypto/elliptic.p521Curve.IsOnCurve()\ncrypto/elliptic.Curve.IsOnCurve()\ncrypto/elliptic.p256Curve.IsOnCurve()\ncrypto/elliptic.(*p224Curve).IsOnCurve()\ncrypto/elliptic.(*p256Curve).IsOnCurve()\ncrypto/elliptic.(*p521Curve).IsOnCurve()\n```"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-24675",
              "name": "CVE-2022-24675",
              "shortDescription": {
                "text": "Scanner for CVE-2022-24675"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `pem.Decode` is called.",
                "markdown": "The scanner checks whether the vulnerable function `pem.Decode` is called."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-24921",
              "name": "CVE-2022-24921",
              "shortDescription": {
                "text": "Scanner for CVE-2022-24921"
              },
              "fullDescription": {
                "text": "The scanner checks whether at least one of the vulnerable functions is called : \n```\nregexp.Match\nregexp.MatchReader \nregexp.MatchString\nregexp.Compile\nregexp.CompilePOSIX \nregexp.MustCompile\nregexp.MustCompilePOSIX\n```",
                "markdown": "The scanner checks whether at least one of the vulnerable functions is called : \n```\nregexp.Match\nregexp.MatchReader \nregexp.MatchString\nregexp.Compile\nregexp.CompilePOSIX \nregexp.MustCompile\nregexp.MustCompilePOSIX\n```"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-27191",
              "name": "CVE-2022-27191",
              "shortDescription": {
                "text": "Scanner for CVE-2022-27191"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-27664",
              "name": "CVE-2022-27664",
              "shortDescription": {
                "text": "Scanner for CVE-2022-27664"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `net/http.ListenAndServeTLS` is called.",
                "markdown": "The scanner checks whether the vulnerable function `net/http.ListenAndServeTLS` is called."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-28131",
              "name": "CVE-2022-28131",
              "shortDescription": {
                "text": "Scanner for CVE-2022-28131"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `Decoder.Skip` is called.",
                "markdown": "The scanner checks whether the vulnerable function `Decoder.Skip` is called."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-28327",
              "name": "CVE-2022-28327",
              "shortDescription": {
                "text": "Scanner for CVE-2022-28327"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-2879",
              "name": "CVE-2022-2879",
              "shortDescription": {
                "text": "Scanner for CVE-2022-2879"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `archive/tar.(*Reader).Next` is called.",
                "markdown": "The scanner checks whether the vulnerable function `archive/tar.(*Reader).Next` is called."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-28948",
              "name": "CVE-2022-28948",
              "shortDescription": {
                "text": "Scanner for CVE-2022-28948"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-29526",
              "name": "CVE-2022-29526",
              "shortDescription": {
                "text": "Scanner for CVE-2022-29526"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-30630",
              "name": "CVE-2022-30630",
              "shortDescription": {
                "text": "Scanner for CVE-2022-30630"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `fs.Glob` is called.",
                "markdown": "The scanner checks whether the vulnerable function `fs.Glob` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-30631",
              "name": "CVE-2022-30631",
              "shortDescription": {
                "text": "Scanner for CVE-2022-30631"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `Reader.Read` is called.",
                "markdown": "The scanner checks whether the vulnerable function `Reader.Read` is called."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-30632",
              "name": "CVE-2022-30632",
              "shortDescription": {
                "text": "Scanner for CVE-2022-30632"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `filepath.Glob` is called.",
                "markdown": "The scanner checks whether the vulnerable function `filepath.Glob` is called."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-30633",
              "name": "CVE-2022-30633",
              "shortDescription": {
                "text": "Scanner for CVE-2022-30633"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-32148",
              "name": "CVE-2022-32148",
              "shortDescription": {
                "text": "Scanner for CVE-2022-32148"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-32149",
              "name": "CVE-2022-32149",
              "shortDescription": {
                "text": "Scanner for CVE-2022-32149"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-32189",
              "name": "CVE-2022-32189",
              "shortDescription": {
                "text": "Scanner for CVE-2022-32189"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable functions `Float.GobDecode()` or `Rat.GobDecode()` are called.",
                "markdown": "The scanner checks whether the vulnerable functions `Float.GobDecode()` or `Rat.GobDecode()` are called."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-3515",
              "name": "CVE-2022-3515",
              "shortDescription": {
                "text": "Scanner for CVE-2022-3515"
              },
              "fullDescription": {
                "text": "The scanner checks whether at least one of the vulnerable API calls is called - \n```\n1. ksba_crl_parse\n2. ksba_cms_parse\n```",
                "markdown": "The scanner checks whether at least one of the vulnerable API calls is called - \n```\n1. ksba_crl_parse\n2. ksba_cms_parse\n```"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-47629",
              "name": "CVE-2022-47629",
              "shortDescription": {
                "text": "Scanner for CVE-2022-47629"
              },
              "fullDescription": {
                "text": "The scanner checks whether at least one of the vulnerable API calls is called - \n```\n1. ksba_crl_parse\n2. ksba_cms_parse\n```",
                "markdown": "The scanner checks whether at least one of the vulnerable API calls is called - \n```\n1. ksba_crl_parse\n2. ksba_cms_parse\n```"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-3786",
              "name": "CVE-2022-3786",
              "shortDescription": {
                "text": "Scanner for CVE-2022-3786"
              },
              "fullDescription": {
                "text": "The scanner checks if at least one of the vulnerable functions is called:\n```\nSSL_connect\nBIO_new_ssl_connect\nBIO_do_handshake\nBIO_do_connect\nBIO_new_connect\nSSL_accept\nSSL_set_verify\nSSL_CTX_set_verify\nX509_verify_cert\n```\nThen, if the application is a server, the client authentication option should be checked manually. \nIt is a client, it is applicable as described in the description.",
                "markdown": "The scanner checks if at least one of the vulnerable functions is called:\n```\nSSL_connect\nBIO_new_ssl_connect\nBIO_do_handshake\nBIO_do_connect\nBIO_new_connect\nSSL_accept\nSSL_set_verify\nSSL_CTX_set_verify\nX509_verify_cert\n```\nThen, if the application is a server, the client authentication option should be checked manually. \nIt is a client, it is applicable as described in the description."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-3602",
              "name": "CVE-2022-3602",
              "shortDescription": {
                "text": "Scanner for CVE-2022-3602"
              },
              "fullDescription": {
                "text": "The scanner checks if at least one of the vulnerable functions is called:\n```\nSSL_connect\nBIO_new_ssl_connect\nBIO_do_handshake\nBIO_do_connect\nBIO_new_connect\nSSL_accept\nSSL_set_verify\nSSL_CTX_set_verify\nX509_verify_cert\n```\nThen, if the application is a server, the client authentication option should be checked manually. \nIt is a client, it is applicable as described in the description.",
                "markdown": "The scanner checks if at least one of the vulnerable functions is called:\n```\nSSL_connect\nBIO_new_ssl_connect\nBIO_do_handshake\nBIO_do_connect\nBIO_new_connect\nSSL_accept\nSSL_set_verify\nSSL_CTX_set_verify\nX509_verify_cert\n```\nThen, if the application is a server, the client authentication option should be checked manually. \nIt is a client, it is applicable as described in the description."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-37434",
              "name": "CVE-2022-37434",
              "shortDescription": {
                "text": "Scanner for CVE-2022-37434"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `inflateGetHeader()` is called.",
                "markdown": "The scanner checks whether the vulnerable function `inflateGetHeader()` is called."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-43680",
              "name": "CVE-2022-43680",
              "shortDescription": {
                "text": "Scanner for CVE-2022-43680"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `XML_Parse`\n* `XML_ParseBuffer`",
                "markdown": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `XML_Parse`\n* `XML_ParseBuffer`"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-52425",
              "name": "CVE-2023-52425",
              "shortDescription": {
                "text": "Scanner for CVE-2023-52425"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the next functions are called:\n\n* `XML_Parse()`\n* `XML_ParseBuffer()`\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The vulnerable functions are used to parse an attacker-controlled file by chunks.",
                "markdown": "The scanner checks whether any of the next functions are called:\n\n* `XML_Parse()`\n* `XML_ParseBuffer()`\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The vulnerable functions are used to parse an attacker-controlled file by chunks."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-40674",
              "name": "CVE-2022-40674",
              "shortDescription": {
                "text": "Scanner for CVE-2022-40674"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `XML_Parse`\n* `XML_ParseBuffer`",
                "markdown": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `XML_Parse`\n* `XML_ParseBuffer`"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41715",
              "name": "CVE-2022-41715",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41715"
              },
              "fullDescription": {
                "text": "The scanner checks whether any function eventually calls the vulnerable function `regexp/syntax.parse`.",
                "markdown": "The scanner checks whether any function eventually calls the vulnerable function `regexp/syntax.parse`."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41717",
              "name": "CVE-2022-41717",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41717"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41723",
              "name": "CVE-2022-41723",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41723"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `Decoder.DecodeFull` is called",
                "markdown": "The scanner checks whether the vulnerable function `Decoder.DecodeFull` is called"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41724",
              "name": "CVE-2022-41724",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41724"
              },
              "fullDescription": {
                "text": "The CVE is never applicable. A closer inspection of the issue shows there are no potential user-controllable paths that allow creating a panic (see also original commit message - https://go.dev/cl/468125)",
                "markdown": "The CVE is never applicable. A closer inspection of the issue shows there are no potential user-controllable paths that allow creating a panic (see also original commit message - https://go.dev/cl/468125)"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-24536",
              "name": "CVE-2023-24536",
              "shortDescription": {
                "text": "Scanner for CVE-2023-24536"
              },
              "fullDescription": {
                "text": "The scanner checks whether one of the following vulnerable functions is called:\n- `mime/multipart Reader.ReadForm`\n- `net/http Request.FormFile`\n- `net/http Request.FormValue`\n- `net/http Request.ParseMultipartForm`\n- `net/http Request.PostFormValue`",
                "markdown": "The scanner checks whether one of the following vulnerable functions is called:\n- `mime/multipart Reader.ReadForm`\n- `net/http Request.FormFile`\n- `net/http Request.FormValue`\n- `net/http Request.ParseMultipartForm`\n- `net/http Request.PostFormValue`"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41725",
              "name": "CVE-2022-41725",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41725"
              },
              "fullDescription": {
                "text": "The scanner checks whether one of the following vulnerable functions is called:\n- `mime/multipart Reader.ReadForm`\n- `net/http Request.FormFile`\n- `net/http Request.FormValue`\n- `net/http Request.ParseMultipartForm`\n- `net/http Request.PostFormValue`",
                "markdown": "The scanner checks whether one of the following vulnerable functions is called:\n- `mime/multipart Reader.ReadForm`\n- `net/http Request.FormFile`\n- `net/http Request.FormValue`\n- `net/http Request.ParseMultipartForm`\n- `net/http Request.PostFormValue`"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-43551",
              "name": "CVE-2022-43551",
              "shortDescription": {
                "text": "Scanner for CVE-2022-43551"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `curl` command-line tool is invoked with the `--hsts` option.",
                "markdown": "The scanner checks whether the `curl` command-line tool is invoked with the `--hsts` option."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-42916",
              "name": "CVE-2022-42916",
              "shortDescription": {
                "text": "Scanner for CVE-2022-42916"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `curl` command-line tool is invoked with the `--hsts` option.",
                "markdown": "The scanner checks whether the `curl` command-line tool is invoked with the `--hsts` option."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-23914",
              "name": "CVE-2023-23914",
              "shortDescription": {
                "text": "Scanner for CVE-2023-23914"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `curl` command-line tool is invoked with the `--hsts` option.",
                "markdown": "The scanner checks whether the `curl` command-line tool is invoked with the `--hsts` option."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-4450",
              "name": "CVE-2022-4450",
              "shortDescription": {
                "text": "Scanner for CVE-2022-4450"
              },
              "fullDescription": {
                "text": "The scanner checks if at least one of the vulnerable functions is called:\n```\nPEM_read_bio_ex()\nPEM_read_bio()\nPEM_read()\nPEM_read_DHparams()\nPEM_read_PrivateKey()\nPEM_read_bio_PrivateKey()\nPEM_read_RSA_PUBKEY()\nPEM_read_bio_RSA_PUBKEY()\nPEM_read_RSAPrivateKey()\nPEM_read_bio_RSAPrivateKey()\nPEM_read_PKCS7()\nPEM_read_bio_PKCS7()\nPEM_read_X509()\nPEM_read_bio_X509()\nPEM_read_X509_AUX()\nPEM_read_bio_X509_AUX()\nPEM_read_X509_CRL()\nPEM_read_bio_X509_CRL()\nPEM_read_bio_X509_REQ()\nPEM_read_bio_ECPrivateKey()\nPEM_read_bio_PKCS8()\n\nPEM_X509_INFO_read_bio_ex()\nSSL_CTX_use_serverinfo_file()\nSSL_use_cert_and_key() \nSSL_CTX_use_certificate_chain_file()\nSSL_CTX_load_verify_locations()\nSSL_CTX_set1_verify_file()\nSSL_CTX_set1_verify_path()\nX509_LOOKUP_load_file()\n\nSSL_load_client_CA_file_ex()\nSSL_load_client_CA_file()\nSSL_add_file_cert_subjects_to_stack()\nSSL_add_dir_cert_subjects_to_stack()\nSSL_add_store_cert_subjects_to_stack()\n\nuse_certificate_chain_file\nSSL_use_certificate_file\nSSL_CTX_use_certificate_file\nSSL_use_PrivateKey_file\nSSL_CTX_use_PrivateKey_file\nSSL_CTX_use_serverinfo_file\n\nSSL_use_RSAPrivateKey_file\nSSL_CTX_use_RSAPrivateKey_file\n```\n\nNote that while the vulnerability is also exploitable through the use of the command line tool `openssl asn1parse`, the vulnerability's DoS impact in this case does not pose a threat, since the DoS will crash the forked `openssl` tool process only",
                "markdown": "The scanner checks if at least one of the vulnerable functions is called:\n```\nPEM_read_bio_ex()\nPEM_read_bio()\nPEM_read()\nPEM_read_DHparams()\nPEM_read_PrivateKey()\nPEM_read_bio_PrivateKey()\nPEM_read_RSA_PUBKEY()\nPEM_read_bio_RSA_PUBKEY()\nPEM_read_RSAPrivateKey()\nPEM_read_bio_RSAPrivateKey()\nPEM_read_PKCS7()\nPEM_read_bio_PKCS7()\nPEM_read_X509()\nPEM_read_bio_X509()\nPEM_read_X509_AUX()\nPEM_read_bio_X509_AUX()\nPEM_read_X509_CRL()\nPEM_read_bio_X509_CRL()\nPEM_read_bio_X509_REQ()\nPEM_read_bio_ECPrivateKey()\nPEM_read_bio_PKCS8()\n\nPEM_X509_INFO_read_bio_ex()\nSSL_CTX_use_serverinfo_file()\nSSL_use_cert_and_key() \nSSL_CTX_use_certificate_chain_file()\nSSL_CTX_load_verify_locations()\nSSL_CTX_set1_verify_file()\nSSL_CTX_set1_verify_path()\nX509_LOOKUP_load_file()\n\nSSL_load_client_CA_file_ex()\nSSL_load_client_CA_file()\nSSL_add_file_cert_subjects_to_stack()\nSSL_add_dir_cert_subjects_to_stack()\nSSL_add_store_cert_subjects_to_stack()\n\nuse_certificate_chain_file\nSSL_use_certificate_file\nSSL_CTX_use_certificate_file\nSSL_use_PrivateKey_file\nSSL_CTX_use_PrivateKey_file\nSSL_CTX_use_serverinfo_file\n\nSSL_use_RSAPrivateKey_file\nSSL_CTX_use_RSAPrivateKey_file\n```\n\nNote that while the vulnerability is also exploitable through the use of the command line tool `openssl asn1parse`, the vulnerability's DoS impact in this case does not pose a threat, since the DoS will crash the forked `openssl` tool process only"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0215",
              "name": "CVE-2023-0215",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0215"
              },
              "fullDescription": {
                "text": "The scanner checks if at least one of the vulnerable functions is called:\n```\nPEM_write_bio_ASN1_stream()\nPEM_write_bio_CMS_stream()\nPEM_write_bio_PKCS7_stream()\nSMIME_write_ASN1()\nSMIME_write_CMS()\nSMIME_write_PKCS7()\nBIO_new_CMS()\nBIO_new_PKCS7()\ni2d_CMS_bio_stream()\ni2d_PKCS7_bio_stream()\ni2d_ASN1_bio_stream()\nBIO_new_NDEF()\n```",
                "markdown": "The scanner checks if at least one of the vulnerable functions is called:\n```\nPEM_write_bio_ASN1_stream()\nPEM_write_bio_CMS_stream()\nPEM_write_bio_PKCS7_stream()\nSMIME_write_ASN1()\nSMIME_write_CMS()\nSMIME_write_PKCS7()\nBIO_new_CMS()\nBIO_new_PKCS7()\ni2d_CMS_bio_stream()\ni2d_PKCS7_bio_stream()\ni2d_ASN1_bio_stream()\nBIO_new_NDEF()\n```"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0217",
              "name": "CVE-2023-0217",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0217"
              },
              "fullDescription": {
                "text": "When checking ELF files, the scanner checks whether the vulnerable `EVP_PKEY_public_check()` function is called.\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked",
                "markdown": "When checking ELF files, the scanner checks whether the vulnerable `EVP_PKEY_public_check()` function is called.\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0286",
              "name": "CVE-2023-0286",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0286"
              },
              "fullDescription": {
                "text": "The scanner checks if at least one of the vulnerable API calls is called:\n\n* `X509_STORE_CTX_get_check_revocation`\n* `X509_STORE_get_check_revocation`\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The CRL checking option must also be enabled.",
                "markdown": "The scanner checks if at least one of the vulnerable API calls is called:\n\n* `X509_STORE_CTX_get_check_revocation`\n* `X509_STORE_get_check_revocation`\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The CRL checking option must also be enabled."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0361",
              "name": "CVE-2023-0361",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0361"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable gnuTLS library is used, by checking for calls to the `gnutls_init` function.",
                "markdown": "The scanner checks whether the vulnerable gnuTLS library is used, by checking for calls to the `gnutls_init` function."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0401",
              "name": "CVE-2023-0401",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0401"
              },
              "fullDescription": {
                "text": "When checking ELF files, the scanner checks whether at least one of the vulnerable API calls is called:\n\n* `PKCS7_decrypt`\n* `PKCS7_dataInit`\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked",
                "markdown": "When checking ELF files, the scanner checks whether at least one of the vulnerable API calls is called:\n\n* `PKCS7_decrypt`\n* `PKCS7_dataInit`\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0464",
              "name": "CVE-2023-0464",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0464"
              },
              "fullDescription": {
                "text": "The scanner checks whether OpenSSL supports the vulnerable policy constraints parsing functionality, by checking whether the `X509_VERIFY_PARAM_set1_policies` function is called (the functionality is disabled by default)\n\nNote that the scanner does not check for an additional vulnerable case in which the vulnerable policy constraints parsing functionality is enabled via the command line flag `-policy`. For example, by running `openssl ca -policy match`. However - in this case, the vulnerability will lead to a DoS of a forked command-line utility, which has a minimal impact on security.",
                "markdown": "The scanner checks whether OpenSSL supports the vulnerable policy constraints parsing functionality, by checking whether the `X509_VERIFY_PARAM_set1_policies` function is called (the functionality is disabled by default)\n\nNote that the scanner does not check for an additional vulnerable case in which the vulnerable policy constraints parsing functionality is enabled via the command line flag `-policy`. For example, by running `openssl ca -policy match`. However - in this case, the vulnerability will lead to a DoS of a forked command-line utility, which has a minimal impact on security."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0465",
              "name": "CVE-2023-0465",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0465"
              },
              "fullDescription": {
                "text": "The scanner checks whether OpenSSL supports the vulnerable policy constraints parsing functionality, by checking whether the `X509_VERIFY_PARAM_set1_policies` function is called (the functionality is disabled by default)\n\nNote that the scanner does not check for an additional vulnerable case in which the vulnerable policy constraints parsing functionality is enabled via the command line flag `-policy`. For example, by running `openssl ca -policy match`. However - in this case, the vulnerability will lead to a DoS of a forked command-line utility, which has a minimal impact on security.",
                "markdown": "The scanner checks whether OpenSSL supports the vulnerable policy constraints parsing functionality, by checking whether the `X509_VERIFY_PARAM_set1_policies` function is called (the functionality is disabled by default)\n\nNote that the scanner does not check for an additional vulnerable case in which the vulnerable policy constraints parsing functionality is enabled via the command line flag `-policy`. For example, by running `openssl ca -policy match`. However - in this case, the vulnerability will lead to a DoS of a forked command-line utility, which has a minimal impact on security."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-24534",
              "name": "CVE-2023-24534",
              "shortDescription": {
                "text": "Scanner for CVE-2023-24534"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-24537",
              "name": "CVE-2023-24537",
              "shortDescription": {
                "text": "Scanner for CVE-2023-24537"
              },
              "fullDescription": {
                "text": "The scanner checks whether one of the following vulnerable functions is called:\n\n- `scanner.Scanner.Scan`\n- `parser.ParseDir`\n- `parser.ParseExpr`\n- `parser.ExprFrom`\n- `parser.ParseFile`\n\nNote that the scanner does not check for the invocation of command-line utilities (such as `go build`) that can indirectly trigger this vulnerability",
                "markdown": "The scanner checks whether one of the following vulnerable functions is called:\n\n- `scanner.Scanner.Scan`\n- `parser.ParseDir`\n- `parser.ParseExpr`\n- `parser.ExprFrom`\n- `parser.ParseFile`\n\nNote that the scanner does not check for the invocation of command-line utilities (such as `go build`) that can indirectly trigger this vulnerability"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-24538",
              "name": "CVE-2023-24538",
              "shortDescription": {
                "text": "Scanner for CVE-2023-24538"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `Template.Execute`\n\t\n* `Template.ExecuteTemplate`",
                "markdown": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `Template.Execute`\n\t\n* `Template.ExecuteTemplate`"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-24539",
              "name": "CVE-2023-24539",
              "shortDescription": {
                "text": "Scanner for CVE-2023-24539"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-24540",
              "name": "CVE-2023-24540",
              "shortDescription": {
                "text": "Scanner for CVE-2023-24540"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-27533",
              "name": "CVE-2023-27533",
              "shortDescription": {
                "text": "Scanner for CVE-2023-27533"
              },
              "fullDescription": {
                "text": "The scanner checks whether curl is executed with the vulnerable `--telnet-option` flag, and the flag references one of the following vulnerable options -\n\n- `TTYPE`\n- `XDISPLOC`\n- `NEW_ENV`",
                "markdown": "The scanner checks whether curl is executed with the vulnerable `--telnet-option` flag, and the flag references one of the following vulnerable options -\n\n- `TTYPE`\n- `XDISPLOC`\n- `NEW_ENV`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-27536",
              "name": "CVE-2023-27536",
              "shortDescription": {
                "text": "Scanner for CVE-2023-27536"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `curl` command-line tool is invoked with the `--delegation` option.",
                "markdown": "The scanner checks whether the `curl` command-line tool is invoked with the `--delegation` option."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-28322",
              "name": "CVE-2023-28322",
              "shortDescription": {
                "text": "Scanner for CVE-2023-28322"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `curl_easy_setopt` is called (this flaw cannot be triggered with the command line tool).\n\nNote that the scanner currently does not check for the specific arguments that must be passed to `curl_easy_setopt` (over multiple calls) for the vulnerability to be applicable -\n\n* `CURLOPT_READFUNCTION` - to set up a read callback that supplies data to the following PUT request\n\n* `CURLOPT_PUT / CURLOPT_UPLOAD` - to perform a PUT request\n\n* `CURLOPT_POSTFIELDS` - to (attempt to) supply data for the following POST request\n\n* `CURLOPT_POST` - to perform a POST request (which will erroneously use the read callback previously set)",
                "markdown": "The scanner checks whether the vulnerable function `curl_easy_setopt` is called (this flaw cannot be triggered with the command line tool).\n\nNote that the scanner currently does not check for the specific arguments that must be passed to `curl_easy_setopt` (over multiple calls) for the vulnerability to be applicable -\n\n* `CURLOPT_READFUNCTION` - to set up a read callback that supplies data to the following PUT request\n\n* `CURLOPT_PUT / CURLOPT_UPLOAD` - to perform a PUT request\n\n* `CURLOPT_POSTFIELDS` - to (attempt to) supply data for the following POST request\n\n* `CURLOPT_POST` - to perform a POST request (which will erroneously use the read callback previously set)"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-32221",
              "name": "CVE-2022-32221",
              "shortDescription": {
                "text": "Scanner for CVE-2022-32221"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `curl_easy_setopt()` is called.\n\nTo determine the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified. The condition is that both CURLOPT_READFUNCTION and CURLOPT_POSTFIELDS options are set through `curl_easy_setopt()` on the same handler.",
                "markdown": "The scanner checks whether the `curl_easy_setopt()` is called.\n\nTo determine the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified. The condition is that both CURLOPT_READFUNCTION and CURLOPT_POSTFIELDS options are set through `curl_easy_setopt()` on the same handler."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29400",
              "name": "CVE-2023-29400",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29400"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29402",
              "name": "CVE-2023-29402",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29402"
              },
              "fullDescription": {
                "text": "The scanner looks for Go program binaries that were built with \"cgo\" support (C language bindings)",
                "markdown": "The scanner looks for Go program binaries that were built with \"cgo\" support (C language bindings)"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29403",
              "name": "CVE-2023-29403",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29403"
              },
              "fullDescription": {
                "text": "The scanner checks whether any Go binaries exist in the image, that have the SETUID or SETGID flags enabled",
                "markdown": "The scanner checks whether any Go binaries exist in the image, that have the SETUID or SETGID flags enabled"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29406",
              "name": "CVE-2023-29406",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29406"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29491",
              "name": "CVE-2023-29491",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29491"
              },
              "fullDescription": {
                "text": "The scanner checks whether a **setuid** binary calls any of the following vulnerable functions -\n- `initscr` \n- `setupterm`\n- `restartterm`\n- `_nc_read_file_entry`",
                "markdown": "The scanner checks whether a **setuid** binary calls any of the following vulnerable functions -\n- `initscr` \n- `setupterm`\n- `restartterm`\n- `_nc_read_file_entry`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29409",
              "name": "CVE-2023-29409",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29409"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-3978",
              "name": "CVE-2023-3978",
              "shortDescription": {
                "text": "Scanner for CVE-2023-3978"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-2603",
              "name": "CVE-2023-2603",
              "shortDescription": {
                "text": "Scanner for CVE-2023-2603"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n - `cap_proc_root`\n - `cap_launcher_set_chroot`\n\nTo determine this CVE's applicability, an additional condition (that the scanner currently does not check) should be verified: The application runs in 32-bit mode on a 64-bit Linux host.",
                "markdown": "The scanner checks whether any of the following vulnerable functions are called:\n\n - `cap_proc_root`\n - `cap_launcher_set_chroot`\n\nTo determine this CVE's applicability, an additional condition (that the scanner currently does not check) should be verified: The application runs in 32-bit mode on a 64-bit Linux host."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29499",
              "name": "CVE-2023-29499",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29499"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `g_variant_is_normal_form()` is called.",
                "markdown": "The scanner checks whether the vulnerable function `g_variant_is_normal_form()` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29405",
              "name": "CVE-2023-29405",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29405"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information).",
                "markdown": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information)."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-23773",
              "name": "CVE-2022-23773",
              "shortDescription": {
                "text": "Scanner for CVE-2022-23773"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable, since exploitation depends on the structure of the organization's Git repositories (see extended information).",
                "markdown": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable, since exploitation depends on the structure of the organization's Git repositories (see extended information)."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-45285",
              "name": "CVE-2023-45285",
              "shortDescription": {
                "text": "Scanner for CVE-2023-45285"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue is only exploitable via user interaction.",
                "markdown": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue is only exploitable via user interaction."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29404",
              "name": "CVE-2023-29404",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29404"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information).",
                "markdown": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information)."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-39323",
              "name": "CVE-2023-39323",
              "shortDescription": {
                "text": "Scanner for CVE-2023-39323"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information).",
                "markdown": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information)."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-32636",
              "name": "CVE-2023-32636",
              "shortDescription": {
                "text": "Scanner for CVE-2023-32636"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following functions are called:\n\n- `g_variant_new`\n- `g_variant_new_array`\n- `g_variant_new_bytestring`\n- `g_variant_new_bytestring_array`\n- `g_variant_new_dict_entry`\n- `g_variant_new_fixed_array`\n- `g_variant_new_from_bytes`\n- `g_variant_new_from_data`\n- `g_variant_new_maybe`\n- `g_variant_new_objv`\n- `g_variant_new_printf`\n- `g_variant_new_strv`\n- `g_variant_new_tuple`\n- `g_variant_new_va`",
                "markdown": "The scanner checks whether any of the following functions are called:\n\n- `g_variant_new`\n- `g_variant_new_array`\n- `g_variant_new_bytestring`\n- `g_variant_new_bytestring_array`\n- `g_variant_new_dict_entry`\n- `g_variant_new_fixed_array`\n- `g_variant_new_from_bytes`\n- `g_variant_new_from_data`\n- `g_variant_new_maybe`\n- `g_variant_new_objv`\n- `g_variant_new_printf`\n- `g_variant_new_strv`\n- `g_variant_new_tuple`\n- `g_variant_new_va`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41409",
              "name": "CVE-2022-41409",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41409"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable `pcre2test` binary exists on the scanned artifact.",
                "markdown": "The scanner checks whether the vulnerable `pcre2test` binary exists on the scanned artifact."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0216",
              "name": "CVE-2023-0216",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0216"
              },
              "fullDescription": {
                "text": "When checking ELF files, the scanner checks if at least one of the vulnerable functions is called:\n\n* `d2i_PKCS7()`\n* `d2i_PKCS7_bio()`\n* `d2i_PKCS7_fp()`\n\nWhen checking Python files, the scanner checks if at least one of the vulnerable functions is called with external input to its 1st (`bytes`) argument:\n\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_der_pkcs7_certificates`\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_pem_pkcs7_certificates`",
                "markdown": "When checking ELF files, the scanner checks if at least one of the vulnerable functions is called:\n\n* `d2i_PKCS7()`\n* `d2i_PKCS7_bio()`\n* `d2i_PKCS7_fp()`\n\nWhen checking Python files, the scanner checks if at least one of the vulnerable functions is called with external input to its 1st (`bytes`) argument:\n\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_der_pkcs7_certificates`\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_pem_pkcs7_certificates`"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-2650",
              "name": "CVE-2023-2650",
              "shortDescription": {
                "text": "Scanner for CVE-2023-2650"
              },
              "fullDescription": {
                "text": "When checking ELF files, the scanner checks whether one of the following function is called with an external input:\n\n* Direct call to `OBJ_obj2txt()` function (for OpenSSL 1.x and OpenSSL 3.x)\n\n**Only for OpenSSL 3.x:**\n\n* OCSP: `OCSP_basic_verify()`\n\n* PKCS7/SMIME:\n`PKCS7_decrypt()`\n`PKCS7_sign()`\n`PKCS7_verify()`\n\n* CMS:\n`CMS_EncryptedData_decrypt()`\n`CMS_EncryptedData_encrypt()`\n`CMS_EnvelopedData_decrypt()`\n`CMS_final()`\n`CMS_decrypt_set1_password()`\n`CMS_RecipientInfo_decrypt()`\n`CMS_decrypt()`\n`CMS_decrypt_set1_pkey()`\n`CMS_decrypt_set1_pkey_and_peer()`\n`CMS_SignedData_verify()`\n`CMS_verify()`\n`CMS_SignerInfo_verify()`\n`CMS_compress()`\n`CMS_data_create()`\n`CMS_data_create_ex()`\n`CMS_digest_create()`\n`CMS_digest_create_ex()`\n`CMS_digest_verify()`\n`CMS_encrypt()`\n`CMS_encrypt_ex()`\n`CMS_final_digest()`\n`CMS_sign()`\n`CMS_sign_ex()`\n`CMS_add1_signer()`\n`CMS_sign_receipt()`\n`CMS_uncompress()`\n`CMS_verify_receipt()`\n\n* CMP/CRMF:\n`OSSL_CMP_get_caCerts()`\n`OSSL_CRMF_ENCRYPTEDVALUE_get1_encCert()`\n`OSSL_CRMF_pbm_new()`\n\n* TS:\n`TS_REQ_print_bio()`\n`TS_OBJ_print_bio()`\n`TS_RESP_create_response()`\n`TS_RESP_print_bio()`\n`TS_RESP_verify_response()`\n`TS_RESP_verify_token()`\n\n* ASN1:\n`ASN1_parse()`\n`X509_NAME_print_ex()`\n`X509_NAME_print_ex_fp()`\n`d2i_AutoPrivateKey()`\n`d2i_PrivateKey()`\n`X509_STORE_CTX_print_verify_cb()`\n`x509_pubkey_ex_d2i_ex()`\n\n* EVP:\n`EVP_PKCS82PKEY()`\n`EVP_PKCS82PKEY_ex()`\n`PKCS5_v2_PBE_keyivgen()`\n`PKCS5_v2_PBE_keyivgen_ex()`\n\n* ESS:\n`OSSL_ESS_check_signing_certs()`\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked",
                "markdown": "When checking ELF files, the scanner checks whether one of the following function is called with an external input:\n\n* Direct call to `OBJ_obj2txt()` function (for OpenSSL 1.x and OpenSSL 3.x)\n\n**Only for OpenSSL 3.x:**\n\n* OCSP: `OCSP_basic_verify()`\n\n* PKCS7/SMIME:\n`PKCS7_decrypt()`\n`PKCS7_sign()`\n`PKCS7_verify()`\n\n* CMS:\n`CMS_EncryptedData_decrypt()`\n`CMS_EncryptedData_encrypt()`\n`CMS_EnvelopedData_decrypt()`\n`CMS_final()`\n`CMS_decrypt_set1_password()`\n`CMS_RecipientInfo_decrypt()`\n`CMS_decrypt()`\n`CMS_decrypt_set1_pkey()`\n`CMS_decrypt_set1_pkey_and_peer()`\n`CMS_SignedData_verify()`\n`CMS_verify()`\n`CMS_SignerInfo_verify()`\n`CMS_compress()`\n`CMS_data_create()`\n`CMS_data_create_ex()`\n`CMS_digest_create()`\n`CMS_digest_create_ex()`\n`CMS_digest_verify()`\n`CMS_encrypt()`\n`CMS_encrypt_ex()`\n`CMS_final_digest()`\n`CMS_sign()`\n`CMS_sign_ex()`\n`CMS_add1_signer()`\n`CMS_sign_receipt()`\n`CMS_uncompress()`\n`CMS_verify_receipt()`\n\n* CMP/CRMF:\n`OSSL_CMP_get_caCerts()`\n`OSSL_CRMF_ENCRYPTEDVALUE_get1_encCert()`\n`OSSL_CRMF_pbm_new()`\n\n* TS:\n`TS_REQ_print_bio()`\n`TS_OBJ_print_bio()`\n`TS_RESP_create_response()`\n`TS_RESP_print_bio()`\n`TS_RESP_verify_response()`\n`TS_RESP_verify_token()`\n\n* ASN1:\n`ASN1_parse()`\n`X509_NAME_print_ex()`\n`X509_NAME_print_ex_fp()`\n`d2i_AutoPrivateKey()`\n`d2i_PrivateKey()`\n`X509_STORE_CTX_print_verify_cb()`\n`x509_pubkey_ex_d2i_ex()`\n\n* EVP:\n`EVP_PKCS82PKEY()`\n`EVP_PKCS82PKEY_ex()`\n`PKCS5_v2_PBE_keyivgen()`\n`PKCS5_v2_PBE_keyivgen_ex()`\n\n* ESS:\n`OSSL_ESS_check_signing_certs()`\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-38545",
              "name": "CVE-2023-38545",
              "shortDescription": {
                "text": "Scanner for CVE-2023-38545"
              },
              "fullDescription": {
                "text": "The scanner checks for any of the vulnerable conditions:\n1. Whether the `curl` CLI tool is called with the vulnerable argument `--socks5-hostname`.\n2. Whether the vulnerable scheme `socks5h://` is referenced anywhere. This includes (but not limited to) command line arguments, environment variables and shell scripts.\n3. Whether the function `curl_easy_setopt` is called when using `libcurl`.\n\nIn the case of the last condition, for fully determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: `curl_easy_setopt` must be called with any of the following arguments:\n\n* `curl_easy_setopt(handle, CURLOPT_PROXYTYPE, CURLPROXY_SOCKS5_HOSTNAME)`\n* `curl_easy_setopt(handle, CURLOPT_PROXY, \"socks5h://...\")`\n* `curl_easy_setopt(handle, CURLOPT_PRE_PROXY, \"socks5h://...\")`",
                "markdown": "The scanner checks for any of the vulnerable conditions:\n1. Whether the `curl` CLI tool is called with the vulnerable argument `--socks5-hostname`.\n2. Whether the vulnerable scheme `socks5h://` is referenced anywhere. This includes (but not limited to) command line arguments, environment variables and shell scripts.\n3. Whether the function `curl_easy_setopt` is called when using `libcurl`.\n\nIn the case of the last condition, for fully determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: `curl_easy_setopt` must be called with any of the following arguments:\n\n* `curl_easy_setopt(handle, CURLOPT_PROXYTYPE, CURLPROXY_SOCKS5_HOSTNAME)`\n* `curl_easy_setopt(handle, CURLOPT_PROXY, \"socks5h://...\")`\n* `curl_easy_setopt(handle, CURLOPT_PRE_PROXY, \"socks5h://...\")`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-29155",
              "name": "CVE-2022-29155",
              "shortDescription": {
                "text": "Scanner for CVE-2022-29155"
              },
              "fullDescription": {
                "text": "The scanner checks whether OpenLDAP's vulnerable \"back-sql\" functionality is enabled, by checking `slapd.conf` for the section named `database sql`",
                "markdown": "The scanner checks whether OpenLDAP's vulnerable \"back-sql\" functionality is enabled, by checking `slapd.conf` for the section named `database sql`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-1292",
              "name": "CVE-2022-1292",
              "shortDescription": {
                "text": "Scanner for CVE-2022-1292"
              },
              "fullDescription": {
                "text": "The scanner checks for the execution of the vulnerable `c_rehash` by searching the artifact for the vulnerable command.",
                "markdown": "The scanner checks for the execution of the vulnerable `c_rehash` by searching the artifact for the vulnerable command."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-2068",
              "name": "CVE-2022-2068",
              "shortDescription": {
                "text": "Scanner for CVE-2022-2068"
              },
              "fullDescription": {
                "text": "The scanner checks for the execution of the vulnerable `c_rehash` by searching the artifact for the vulnerable command.",
                "markdown": "The scanner checks for the execution of the vulnerable `c_rehash` by searching the artifact for the vulnerable command."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-5363",
              "name": "CVE-2023-5363",
              "shortDescription": {
                "text": "Scanner for CVE-2023-5363"
              },
              "fullDescription": {
                "text": "The scanner checks if any of the following vulnerable functions are called:\n\n- `EVP_EncryptInit_ex2`\n- `EVP_DecryptInit_ex2`\n- `EVP_CipherInit_ex2`",
                "markdown": "The scanner checks if any of the following vulnerable functions are called:\n\n- `EVP_EncryptInit_ex2`\n- `EVP_DecryptInit_ex2`\n- `EVP_CipherInit_ex2`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-39325",
              "name": "CVE-2023-39325",
              "shortDescription": {
                "text": "Scanner for CVE-2023-39325"
              },
              "fullDescription": {
                "text": "The scanner should check whether one of the functions is used:\n\n* net/http\n\n    - ListenAndServe\n    - ListenAndServeTLS\n    - Serve\n    - ServeTLS\n    - Server.ListenAndServe\n    - Server.ListenAndServeTLS\n    - Server.Serve\n    - Server.ServeTLS\n    - http2serverConn.serve\n    - http2serverConn.processHeaders\n    - http2serverConn.upgradeRequest\n    - http2serverConn.runHandler\n        \n* golang.org/x/net/http2\n\n    - Server.ServeConn\n    - serverConn.serve\n    - serverConn.processHeaders\n    - serverConn.upgradeRequest\n    - serverConn.runHandler",
                "markdown": "The scanner should check whether one of the functions is used:\n\n* net/http\n\n    - ListenAndServe\n    - ListenAndServeTLS\n    - Serve\n    - ServeTLS\n    - Server.ListenAndServe\n    - Server.ListenAndServeTLS\n    - Server.Serve\n    - Server.ServeTLS\n    - http2serverConn.serve\n    - http2serverConn.processHeaders\n    - http2serverConn.upgradeRequest\n    - http2serverConn.runHandler\n        \n* golang.org/x/net/http2\n\n    - Server.ServeConn\n    - serverConn.serve\n    - serverConn.processHeaders\n    - serverConn.upgradeRequest\n    - serverConn.runHandler"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-35945",
              "name": "CVE-2023-35945",
              "shortDescription": {
                "text": "Scanner for CVE-2023-35945"
              },
              "fullDescription": {
                "text": "The scanner checks whether the Envoy YAML or JSON configuration contains a definition for an upstream cluster.\nFor example -\n```yaml\nstatic_resources:\n\tclusters:\n\t- name: ...\t\n```",
                "markdown": "The scanner checks whether the Envoy YAML or JSON configuration contains a definition for an upstream cluster.\nFor example -\n```yaml\nstatic_resources:\n\tclusters:\n\t- name: ...\t\n```"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-45287",
              "name": "CVE-2023-45287",
              "shortDescription": {
                "text": "Scanner for CVE-2023-45287"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following functions are called:\n\n* `Conn.Handshake()`\n\n* `Conn.HandshakeContext()`\n\n* `Conn.Read()`\n\n* `Conn.Write()`\n\n* `Dial()`\n\n* `DialWithDialer()`\n\n* `Dialer.Dial()`\n\n* `Dialer.DialContext()`",
                "markdown": "The scanner checks whether any of the following functions are called:\n\n* `Conn.Handshake()`\n\n* `Conn.HandshakeContext()`\n\n* `Conn.Read()`\n\n* `Conn.Write()`\n\n* `Dial()`\n\n* `DialWithDialer()`\n\n* `Dialer.Dial()`\n\n* `Dialer.DialContext()`"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-48795",
              "name": "CVE-2023-48795",
              "shortDescription": {
                "text": "Scanner for CVE-2023-48795"
              },
              "fullDescription": {
                "text": "The scanner looks for the OpenSSH/libssh server and client configurations in the following locations:\n\n* `/etc/ssh/sshd_config`\n* `/etc/ssh/ssh_config`\n* `~/.ssh/config`\n* `/root/.ssh/config`\n\nAnd checks if all of the following steps were taken to mitigate the vulnerability:\n\n1. Disabling/overriding the vulnerable `chacha20-poly1305` cipher, which is enabled by default.\n\n2. Turning off `AES-CBC`, unless you combine it with case 3.\n\n3. Disabling/overriding the vulnerable Message Authentication Code (MAC) algorithms, some of which are enabled by default. This is only relevant when `AES-CBC` is enabled.\n\nThe scanner currently only checks for libssh and OpenSSH attack prerequisites, even though other SSH programs may be vulnerable with different prerequisites. Therefore - the scanner either returns an Applicable result (libssh or OpenSSH are applicable) or an Undetermined result (libssh or OpenSSH are not applicable, other SSH programs may be applicable).",
                "markdown": "The scanner looks for the OpenSSH/libssh server and client configurations in the following locations:\n\n* `/etc/ssh/sshd_config`\n* `/etc/ssh/ssh_config`\n* `~/.ssh/config`\n* `/root/.ssh/config`\n\nAnd checks if all of the following steps were taken to mitigate the vulnerability:\n\n1. Disabling/overriding the vulnerable `chacha20-poly1305` cipher, which is enabled by default.\n\n2. Turning off `AES-CBC`, unless you combine it with case 3.\n\n3. Disabling/overriding the vulnerable Message Authentication Code (MAC) algorithms, some of which are enabled by default. This is only relevant when `AES-CBC` is enabled.\n\nThe scanner currently only checks for libssh and OpenSSH attack prerequisites, even though other SSH programs may be vulnerable with different prerequisites. Therefore - the scanner either returns an Applicable result (libssh or OpenSSH are applicable) or an Undetermined result (libssh or OpenSSH are not applicable, other SSH programs may be applicable)."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative"
              }
            },
            {
              "id": "applic_CVE-2023-28531",
              "name": "CVE-2023-28531",
              "shortDescription": {
                "text": "Scanner for CVE-2023-28531"
              },
              "fullDescription": {
                "text": "The scanner checks whether OpenSSH is configured to use the vulnerable PKCS #11 public-key standard, by checking for the `PKCS11Provider` directive in the OpenSSH configuration file.\nThe scanner does not check whether a PKCS #11 public-key has already been added to the SSH agent.\n\nAffected configuration example:\n`PKCS11Provider /usr/lib/x86_64-linux-gnu/opensc-pkcs11.so`",
                "markdown": "The scanner checks whether OpenSSH is configured to use the vulnerable PKCS #11 public-key standard, by checking for the `PKCS11Provider` directive in the OpenSSH configuration file.\nThe scanner does not check whether a PKCS #11 public-key has already been added to the SSH agent.\n\nAffected configuration example:\n`PKCS11Provider /usr/lib/x86_64-linux-gnu/opensc-pkcs11.so`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-7104",
              "name": "CVE-2023-7104",
              "shortDescription": {
                "text": "Scanner for CVE-2023-7104"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the vulnerable functions are called -\n\n- `sqlite3_open()`\n- `sqlite3_open16()` \n- `sqlite3_open_v2()`\n\nNote that vulnerability can also be exploited for DoS when opening a database with the `sqlite3` command line utility, but in that case it would have no security impact (crashing a forked client process)",
                "markdown": "The scanner checks whether any of the vulnerable functions are called -\n\n- `sqlite3_open()`\n- `sqlite3_open16()` \n- `sqlite3_open_v2()`\n\nNote that vulnerability can also be exploited for DoS when opening a database with the `sqlite3` command line utility, but in that case it would have no security impact (crashing a forked client process)"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0466",
              "name": "CVE-2023-0466",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0466"
              },
              "fullDescription": {
                "text": "The scanner checks whether `X509_VERIFY_PARAM_add0_policy()` is called.\n\nNote that calling `X509_VERIFY_PARAM_set_flags()` with the parameter `X509_V_FLAG_POLICY_CHECK` mitigates this vulnerability. The scanner currently does not check for that mitigation.",
                "markdown": "The scanner checks whether `X509_VERIFY_PARAM_add0_policy()` is called.\n\nNote that calling `X509_VERIFY_PARAM_set_flags()` with the parameter `X509_V_FLAG_POLICY_CHECK` mitigates this vulnerability. The scanner currently does not check for that mitigation."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-51385",
              "name": "CVE-2023-51385",
              "shortDescription": {
                "text": "Scanner for CVE-2023-51385"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `ProxyCommand` configuration is uncommented and set with the tokens `%h` or `%r` in the OpenSSH configuration files: `/etc/ssh/ssh_config` or `~/.ssh/config`.",
                "markdown": "The scanner checks whether the `ProxyCommand` configuration is uncommented and set with the tokens `%h` or `%r` in the OpenSSH configuration files: `/etc/ssh/ssh_config` or `~/.ssh/config`."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-27534",
              "name": "CVE-2023-27534",
              "shortDescription": {
                "text": "Scanner for CVE-2023-27534"
              },
              "fullDescription": {
                "text": "The scanner checks if any of the following conditions are met:\n\n- The vulnerable `libcurl` function `curl_easy_setopt()` is called.\n- A connection to an SFTP server is made using Curl.\n\nIf any of the conditions are not met, the scanner will return an inconclusive result because Curl may be executed dynamically with user-provided SFTP address.",
                "markdown": "The scanner checks if any of the following conditions are met:\n\n- The vulnerable `libcurl` function `curl_easy_setopt()` is called.\n- A connection to an SFTP server is made using Curl.\n\nIf any of the conditions are not met, the scanner will return an inconclusive result because Curl may be executed dynamically with user-provided SFTP address."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-51767",
              "name": "CVE-2023-51767",
              "shortDescription": {
                "text": "Scanner for CVE-2023-51767"
              },
              "fullDescription": {
                "text": "The CVE is always applicable.\n\nNote - The vulnerability is hardware-dependent.",
                "markdown": "The CVE is always applicable.\n\nNote - The vulnerability is hardware-dependent."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative"
              }
            },
            {
              "id": "applic_CVE-2024-0553",
              "name": "CVE-2024-0553",
              "shortDescription": {
                "text": "Scanner for CVE-2024-0553"
              },
              "fullDescription": {
                "text": "The scanner checks if RSA decryption occurs by finding calls to any of the following functions:\n\n- `gnutls_privkey_decrypt_data`\n\n- `gnutls_privkey_decrypt_data2`\n\nAn additional condition (that the scanner does not currently check) is required for the CVE to be applicable: the RSA padding algorithm needs to be `PKCS#1`. `key-\u003epk_algorithm` needs to be equal to `GNUTLS_PK_RSA`.",
                "markdown": "The scanner checks if RSA decryption occurs by finding calls to any of the following functions:\n\n- `gnutls_privkey_decrypt_data`\n\n- `gnutls_privkey_decrypt_data2`\n\nAn additional condition (that the scanner does not currently check) is required for the CVE to be applicable: the RSA padding algorithm needs to be `PKCS#1`. `key-\u003epk_algorithm` needs to be equal to `GNUTLS_PK_RSA`."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-25652",
              "name": "CVE-2023-25652",
              "shortDescription": {
                "text": "Scanner for CVE-2023-25652"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable `git apply` command is used with the vulnerable option:\n\n* `--reject` \n\nThis vulnerability can also be triggered by an interactive user.",
                "markdown": "The scanner checks whether the vulnerable `git apply` command is used with the vulnerable option:\n\n* `--reject` \n\nThis vulnerability can also be triggered by an interactive user."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2024-28180",
              "name": "CVE-2024-28180",
              "shortDescription": {
                "text": "Scanner for CVE-2024-28180"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2024-0567",
              "name": "CVE-2024-0567",
              "shortDescription": {
                "text": "Scanner for CVE-2024-0567"
              },
              "fullDescription": {
                "text": "The scanner checks if any of the following vulnerable functions are called:\n\n- `gnutls_pcert_import_x509_list`\n\n- `gnutls_certificate_set_x509_key`\n\n- `gnutls_certificate_set_x509_simple_pkcs12_mem`\n\n- `gnutls_certificate_set_x509_simple_pkcs12_file`\n\n- `gnutls_privkey_import_url`\n\n- `gnutls_privkey_import_pkcs11_url`\n\n- `gnutls_read_key_file`\n\n- `gnutls_certificate_set_rawpk_key_file`\n\n- `gnutls_certificate_set_x509_key_file2`\n\n- `gnutls_certificate_set_x509_key_file`\n\n- `gnutls_pcert_list_import_x509_file`\n\n- `gnutls_certificate_set_x509_key_mem2`\n\n- `gnutls_certificate_set_x509_key_mem`\n\n- `gnutls_x509_crt_list_import`\n\n- `gnutls_pcert_list_import_x509_raw`\n\n- `gnutls_session_channel_binding`\n\n- `gnutls_x509_crt_list_import2`\n\n- `gnutls_x509_trust_list_add_trust_mem`\n\n- `gnutls_x509_trust_list_add_system_trust`\n\n- `gnutls_certificate_set_x509_system_trust`\n\n- `gnutls_certificate_set_x509_crl_mem`\n\n- `gnutls_certificate_set_x509_trust_mem`\n\n- `gnutls_x509_trust_list_add_trust_file`\n\n- `gnutls_certificate_set_x509_crl_file`\n\n- `gnutls_certificate_set_x509_trust_file`\n\n- `gnutls_x509_trust_list_add_trust_dir`\n\n- `gnutls_certificate_set_x509_trust_dir`\n\n- `gnutls_x509_trust_list_remove_trust_mem`\n\n- `gnutls_x509_trust_list_remove_trust_file`\n\n- `gnutls_x509_trust_list_verify_crt2`\n\n- `gnutls_x509_cert_verify_peers`\n\n- `gnutls_certificate_verify_peers`\n\n- `gnutls_certificate_verify_peers2`\n\n- `gnutls_certificate_verify_peers3`\n\n- `gnutls_pkcs7_verify`\n\n- `gnutls_ocsp_resp_verify`\n\n- `gnutls_x509_trust_list_verify_crt`",
                "markdown": "The scanner checks if any of the following vulnerable functions are called:\n\n- `gnutls_pcert_import_x509_list`\n\n- `gnutls_certificate_set_x509_key`\n\n- `gnutls_certificate_set_x509_simple_pkcs12_mem`\n\n- `gnutls_certificate_set_x509_simple_pkcs12_file`\n\n- `gnutls_privkey_import_url`\n\n- `gnutls_privkey_import_pkcs11_url`\n\n- `gnutls_read_key_file`\n\n- `gnutls_certificate_set_rawpk_key_file`\n\n- `gnutls_certificate_set_x509_key_file2`\n\n- `gnutls_certificate_set_x509_key_file`\n\n- `gnutls_pcert_list_import_x509_file`\n\n- `gnutls_certificate_set_x509_key_mem2`\n\n- `gnutls_certificate_set_x509_key_mem`\n\n- `gnutls_x509_crt_list_import`\n\n- `gnutls_pcert_list_import_x509_raw`\n\n- `gnutls_session_channel_binding`\n\n- `gnutls_x509_crt_list_import2`\n\n- `gnutls_x509_trust_list_add_trust_mem`\n\n- `gnutls_x509_trust_list_add_system_trust`\n\n- `gnutls_certificate_set_x509_system_trust`\n\n- `gnutls_certificate_set_x509_crl_mem`\n\n- `gnutls_certificate_set_x509_trust_mem`\n\n- `gnutls_x509_trust_list_add_trust_file`\n\n- `gnutls_certificate_set_x509_crl_file`\n\n- `gnutls_certificate_set_x509_trust_file`\n\n- `gnutls_x509_trust_list_add_trust_dir`\n\n- `gnutls_certificate_set_x509_trust_dir`\n\n- `gnutls_x509_trust_list_remove_trust_mem`\n\n- `gnutls_x509_trust_list_remove_trust_file`\n\n- `gnutls_x509_trust_list_verify_crt2`\n\n- `gnutls_x509_cert_verify_peers`\n\n- `gnutls_certificate_verify_peers`\n\n- `gnutls_certificate_verify_peers2`\n\n- `gnutls_certificate_verify_peers3`\n\n- `gnutls_pkcs7_verify`\n\n- `gnutls_ocsp_resp_verify`\n\n- `gnutls_x509_trust_list_verify_crt`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-49210",
              "name": "CVE-2023-49210",
              "shortDescription": {
                "text": "Scanner for CVE-2023-49210"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable `openssl` function is used with external input.",
                "markdown": "The scanner checks whether the vulnerable `openssl` function is used with external input."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-45288",
              "name": "CVE-2023-45288",
              "shortDescription": {
                "text": "Scanner for CVE-2023-45288"
              },
              "fullDescription": {
                "text": "The scanner checks if any of the following functions are called:\n\n* `net/http/ServeTLS`\n* `x/net/http2/Server/ServeConn`\n* `x/net/http2/ConfigureServer`\n\nAn additional condition (that the scanner currently does not check) should be verified to determine if the CVE is applicable: `crypto/tls/Config/NextProtos` or `net/http/TLSNextProto` are not used to disable `HTTP/2`.",
                "markdown": "The scanner checks if any of the following functions are called:\n\n* `net/http/ServeTLS`\n* `x/net/http2/Server/ServeConn`\n* `x/net/http2/ConfigureServer`\n\nAn additional condition (that the scanner currently does not check) should be verified to determine if the CVE is applicable: `crypto/tls/Config/NextProtos` or `net/http/TLSNextProto` are not used to disable `HTTP/2`."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2016-7798",
              "name": "CVE-2016-7798",
              "shortDescription": {
                "text": "Scanner for CVE-2016-7798"
              },
              "fullDescription": {
                "text": "The scanner checks if the function `OpenSSL::Cipher.new()` is called with AES gcm is as the encryption type. \nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The AES IV initialization happens before the key initialization.",
                "markdown": "The scanner checks if the function `OpenSSL::Cipher.new()` is called with AES gcm is as the encryption type. \nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The AES IV initialization happens before the key initialization."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-27782",
              "name": "CVE-2022-27782",
              "shortDescription": {
                "text": "Scanner for CVE-2022-27782"
              },
              "fullDescription": {
                "text": "The scanner checks for any of the vulnerable conditions:\n1. Whether the `curl` CLI tool is used with the vulnerable argument `--crlfile` or `--proxy-crlfile`.\n2. Whether the function `curl_easy_setopt` is called when using `libcurl`.\n\nIn the case of the last condition, to fully determine the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: `curl_easy_setopt` must be called with any of the following arguments:\n\n**TLS options**\n\n* `CURLOPT_SSL_OPTIONS`\n* `CURLOPT_CRLFILE`\n* `CURLOPT_TLSAUTH_USERNAME`\n* `CURLOPT_TLSAUTH_PASSWORD`\n* `CURLOPT_PROXY_SSL_OPTIONS`\n* `CURLOPT_PROXY_CRLFILE`\n* `CURLOPT_PROXY_TLSAUTH_USERNAME`\n* `CURLOPT_PROXY_TLSAUTH_PASSWORD`\n\n**SSH options**\n\n* `CURLOPT_SSH_PUBLIC_KEYFILE`\n* `CURLOPT_SSH_PRIVATE_KEYFILE`",
                "markdown": "The scanner checks for any of the vulnerable conditions:\n1. Whether the `curl` CLI tool is used with the vulnerable argument `--crlfile` or `--proxy-crlfile`.\n2. Whether the function `curl_easy_setopt` is called when using `libcurl`.\n\nIn the case of the last condition, to fully determine the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: `curl_easy_setopt` must be called with any of the following arguments:\n\n**TLS options**\n\n* `CURLOPT_SSL_OPTIONS`\n* `CURLOPT_CRLFILE`\n* `CURLOPT_TLSAUTH_USERNAME`\n* `CURLOPT_TLSAUTH_PASSWORD`\n* `CURLOPT_PROXY_SSL_OPTIONS`\n* `CURLOPT_PROXY_CRLFILE`\n* `CURLOPT_PROXY_TLSAUTH_USERNAME`\n* `CURLOPT_PROXY_TLSAUTH_PASSWORD`\n\n**SSH options**\n\n* `CURLOPT_SSH_PUBLIC_KEYFILE`\n* `CURLOPT_SSH_PRIVATE_KEYFILE`"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29007",
              "name": "CVE-2023-29007",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29007"
              },
              "fullDescription": {
                "text": "The scanner checks whether git is used with one or more of the vulnerable options\n\n* `--rename-section`\n* `--remove-section`\n\nAlso, it checks whether the vulnerable `git` command is used with the vulnerable option `git submodule deinit`.\n\nThis vulnerability can also be triggered by an interactive user.",
                "markdown": "The scanner checks whether git is used with one or more of the vulnerable options\n\n* `--rename-section`\n* `--remove-section`\n\nAlso, it checks whether the vulnerable `git` command is used with the vulnerable option `git submodule deinit`.\n\nThis vulnerability can also be triggered by an interactive user."
              },
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private"
              }
            },
            {
              "id": "applic_CVE-2022-27781",
              "name": "CVE-2022-27781",
              "shortDescription": {
                "text": "Scanner for CVE-2022-27781"
              },
              "fullDescription": {
                "text": "The scanner checks if both of the following conditions are met:\n\n* The vulnerable `libcurl` function `curl_easy_setopt()` is called.\n* The library `libnss3` is linked with the `curl`.\n\nFor fully determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: `curl_easy_setopt` must be called with the argument `CURLOPT_CERTINFO`.",
                "markdown": "The scanner checks if both of the following conditions are met:\n\n* The vulnerable `libcurl` function `curl_easy_setopt()` is called.\n* The library `libnss3` is linked with the `curl`.\n\nFor fully determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: `curl_easy_setopt` must be called with the argument `CURLOPT_CERTINFO`."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2024-32002",
              "name": "CVE-2024-32002",
              "shortDescription": {
                "text": "Scanner for CVE-2024-32002"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2024-32004",
              "name": "CVE-2024-32004",
              "shortDescription": {
                "text": "Scanner for CVE-2024-32004"
              },
              "fullDescription": {
                "text": "The scanner checks whether a local git repository contains a `upload-pack` command in its git config file (`repo-name/.git/config`).",
                "markdown": "The scanner checks whether a local git repository contains a `upload-pack` command in its git config file (`repo-name/.git/config`)."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-2509",
              "name": "CVE-2022-2509",
              "shortDescription": {
                "text": "Scanner for CVE-2022-2509"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `gnutls_pkcs7_verify` is called.",
                "markdown": "The scanner checks whether the vulnerable function `gnutls_pkcs7_verify` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-44487",
              "name": "CVE-2023-44487",
              "shortDescription": {
                "text": "Scanner for CVE-2023-44487"
              },
              "fullDescription": {
                "text": "The scanner checks for each vendor listed here:\n\n* Tomcat: configuration enables HTTP/2 either through the XML file or Java's `addUpgradeProtocol()` method.\n* Jetty: HTTP/2 enabled through `HTTP2CServerConnectionFactory`/`HTTP2ServerConnectionFactory` class initialization. Note: it also checks whether `jenkins` enables http/2 through its configuration.\n* Nginx: check whether one of the HTTP configurations is enabling http/2.\nNote: the following parameters should be configured properly to make the vulnerability not applicable:\n`keepalive_requests` should be kept at the default setting of 1000 requests\n`http2_max_concurrent_streams` should be kept at the default setting of 128 streams\n`limit_conn and limit_req` should be set `with a reasonable setting balancing application performance and security`. \n* Netty: check whether the `http2` codec classes are used in a java class\n* NodeJS: check whether the `http2.createSecureServer()` is used\n* NGHttp2: check whether a web server is instantiated through one of the symbols `nghttp2_session_server_new` or `listen_and_serve`.\n* Go: check whether a server is instantiated through the `net/http` or `net/http2` packages",
                "markdown": "The scanner checks for each vendor listed here:\n\n* Tomcat: configuration enables HTTP/2 either through the XML file or Java's `addUpgradeProtocol()` method.\n* Jetty: HTTP/2 enabled through `HTTP2CServerConnectionFactory`/`HTTP2ServerConnectionFactory` class initialization. Note: it also checks whether `jenkins` enables http/2 through its configuration.\n* Nginx: check whether one of the HTTP configurations is enabling http/2.\nNote: the following parameters should be configured properly to make the vulnerability not applicable:\n`keepalive_requests` should be kept at the default setting of 1000 requests\n`http2_max_concurrent_streams` should be kept at the default setting of 128 streams\n`limit_conn and limit_req` should be set `with a reasonable setting balancing application performance and security`. \n* Netty: check whether the `http2` codec classes are used in a java class\n* NodeJS: check whether the `http2.createSecureServer()` is used\n* NGHttp2: check whether a web server is instantiated through one of the symbols `nghttp2_session_server_new` or `listen_and_serve`.\n* Go: check whether a server is instantiated through the `net/http` or `net/http2` packages"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-38408",
              "name": "CVE-2023-38408",
              "shortDescription": {
                "text": "Scanner for CVE-2023-38408"
              },
              "fullDescription": {
                "text": "The scanner checks whether the libraries used by the current public exploits are present in the file system.",
                "markdown": "The scanner checks whether the libraries used by the current public exploits are present in the file system."
              },
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private"
              }
            },
            {
              "id": "applic_CVE-2022-30635",
              "name": "CVE-2022-30635",
              "shortDescription": {
                "text": "Scanner for CVE-2022-30635"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function Decoder.Decode of encoding/gob is called.",
                "markdown": "The scanner checks whether the vulnerable function Decoder.Decode of encoding/gob is called."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-29187",
              "name": "CVE-2022-29187",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-29187"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-32208",
              "name": "CVE-2022-32208",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-32208"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-41903",
              "name": "CVE-2022-41903",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-41903"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-51384",
              "name": "CVE-2023-51384",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-51384"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-2602",
              "name": "CVE-2023-2602",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-2602"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-27779",
              "name": "CVE-2022-27779",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-27779"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-34903",
              "name": "CVE-2022-34903",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-34903"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2007-2768",
              "name": "CVE-2007-2768",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2007-2768"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-46219",
              "name": "CVE-2023-46219",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-46219"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-35260",
              "name": "CVE-2022-35260",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-35260"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-31012",
              "name": "CVE-2022-31012",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-31012"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-39260",
              "name": "CVE-2022-39260",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-39260"
              },
              "fullDescription": {
                "text": "The scanner checks whether `git shell` has interactive mode enabled and is also configured as a login shell for a user.",
                "markdown": "The scanner checks whether `git shell` has interactive mode enabled and is also configured as a login shell for a user."
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2009-3767",
              "name": "CVE-2009-3767",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2009-3767"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-38546",
              "name": "CVE-2023-38546",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-38546"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-1705",
              "name": "CVE-2022-1705",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-1705"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-6129",
              "name": "CVE-2023-6129",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-6129"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-29510",
              "name": "CVE-2020-29510",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-29510"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-0727",
              "name": "CVE-2024-0727",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-0727"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-24553",
              "name": "CVE-2020-24553",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-24553"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-5981",
              "name": "CVE-2023-5981",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-5981"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-27537",
              "name": "CVE-2023-27537",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-27537"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-46402",
              "name": "CVE-2023-46402",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-46402"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-5678",
              "name": "CVE-2023-5678",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-5678"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-36368",
              "name": "CVE-2021-36368",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-36368"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-3114",
              "name": "CVE-2021-3114",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-3114"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42364",
              "name": "CVE-2023-42364",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42364"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-1255",
              "name": "CVE-2023-1255",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-1255"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-28852",
              "name": "CVE-2020-28852",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-28852"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-28319",
              "name": "CVE-2023-28319",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-28319"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-4603",
              "name": "CVE-2024-4603",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-4603"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-8565",
              "name": "CVE-2020-8565",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-8565"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-42915",
              "name": "CVE-2022-42915",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-42915"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2006-5051",
              "name": "CVE-2006-5051",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2006-5051"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-36690",
              "name": "CVE-2021-36690",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-36690"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-28757",
              "name": "CVE-2024-28757",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-28757"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-23946",
              "name": "CVE-2023-23946",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-23946"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `git apply` command is used in the init flow.",
                "markdown": "The scanner checks whether the `git apply` command is used in the init flow."
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-0853",
              "name": "CVE-2024-0853",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-0853"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-15586",
              "name": "CVE-2020-15586",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-15586"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-45284",
              "name": "CVE-2023-45284",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-45284"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2003-0693",
              "name": "CVE-2003-0693",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2003-0693"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-35252",
              "name": "CVE-2022-35252",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-35252"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-23521",
              "name": "CVE-2022-23521",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-23521"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-24975",
              "name": "CVE-2022-24975",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-24975"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-28366",
              "name": "CVE-2020-28366",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-28366"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-32611",
              "name": "CVE-2023-32611",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-32611"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-25815",
              "name": "CVE-2023-25815",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-25815"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-22490",
              "name": "CVE-2023-22490",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-22490"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2003-0682",
              "name": "CVE-2003-0682",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2003-0682"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-39253",
              "name": "CVE-2022-39253",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-39253"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-27538",
              "name": "CVE-2023-27538",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-27538"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2003-0695",
              "name": "CVE-2003-0695",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2003-0695"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-32020",
              "name": "CVE-2024-32020",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-32020"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-32205",
              "name": "CVE-2022-32205",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-32205"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-28367",
              "name": "CVE-2020-28367",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-28367"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-52426",
              "name": "CVE-2023-52426",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-52426"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-28835",
              "name": "CVE-2024-28835",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-28835"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42366",
              "name": "CVE-2023-42366",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42366"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-2379",
              "name": "CVE-2024-2379",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-2379"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-23749",
              "name": "CVE-2023-23749",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-23749"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-24532",
              "name": "CVE-2023-24532",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-24532"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-41190",
              "name": "CVE-2021-41190",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-41190"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-3121",
              "name": "CVE-2021-3121",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-3121"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-2004",
              "name": "CVE-2024-2004",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-2004"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-24786",
              "name": "CVE-2024-24786",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-24786"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-28085",
              "name": "CVE-2024-28085",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-28085"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-2975",
              "name": "CVE-2023-2975",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-2975"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-6237",
              "name": "CVE-2023-6237",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-6237"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-32665",
              "name": "CVE-2023-32665",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-32665"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-2398",
              "name": "CVE-2024-2398",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-2398"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-3446",
              "name": "CVE-2023-3446",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-3446"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-32021",
              "name": "CVE-2024-32021",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-32021"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-4209",
              "name": "CVE-2021-4209",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-4209"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-2511",
              "name": "CVE-2024-2511",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-2511"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-1394",
              "name": "CVE-2024-1394",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-1394"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42363",
              "name": "CVE-2023-42363",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42363"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-32465",
              "name": "CVE-2024-32465",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-32465"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-2466",
              "name": "CVE-2024-2466",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-2466"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-32206",
              "name": "CVE-2022-32206",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-32206"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-34397",
              "name": "CVE-2024-34397",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-34397"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-32643",
              "name": "CVE-2023-32643",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-32643"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-29511",
              "name": "CVE-2020-29511",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-29511"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-28320",
              "name": "CVE-2023-28320",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-28320"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-30629",
              "name": "CVE-2022-30629",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-30629"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-39326",
              "name": "CVE-2023-39326",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-39326"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42365",
              "name": "CVE-2023-42365",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42365"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-3817",
              "name": "CVE-2023-3817",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-3817"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-27535",
              "name": "CVE-2023-27535",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-27535"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-32207",
              "name": "CVE-2022-32207",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-32207"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-30115",
              "name": "CVE-2022-30115",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-30115"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-38039",
              "name": "CVE-2023-38039",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-38039"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-43552",
              "name": "CVE-2022-43552",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-43552"
              },
              "fullDescription": {
                "text": "The scanner checks whether the function `curl_easy_setopt()` is called to define `curl` options. The scanner does not check which options are passed to the function. \nA manual check is required to check if the `CURLOPT_PROXY` is defined along with a `CURLOPT_URL`  starting by `smb:` or `telnet:`.",
                "markdown": "The scanner checks whether the function `curl_easy_setopt()` is called to define `curl` options. The scanner does not check which options are passed to the function. \nA manual check is required to check if the `CURLOPT_PROXY` is defined along with a `CURLOPT_URL`  starting by `smb:` or `telnet:`."
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-39319",
              "name": "CVE-2023-39319",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-39319"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-23915",
              "name": "CVE-2023-23915",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-23915"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42915",
              "name": "CVE-2023-42915",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42915"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-23916",
              "name": "CVE-2023-23916",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-23916"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-48174",
              "name": "CVE-2022-48174",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-48174"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-4304",
              "name": "CVE-2022-4304",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-4304"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-29458",
              "name": "CVE-2022-29458",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-29458"
              },
              "fullDescription": {
                "text": "The scanner searches for execution evidence of the vulnerable tool  `tic`.",
                "markdown": "The scanner searches for execution evidence of the vulnerable tool  `tic`."
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-34558",
              "name": "CVE-2021-34558",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-34558"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2006-5794",
              "name": "CVE-2006-5794",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2006-5794"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-28834",
              "name": "CVE-2024-28834",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-28834"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-4203",
              "name": "CVE-2022-4203",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-4203"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `SSL_CTX_set_verify()` or `SSL_set_verify()` functions are called.\nA call with the `SSL_VERIFY_PEER` mode is enabling client authentication and makes this vulnerability possible.",
                "markdown": "The scanner checks whether the `SSL_CTX_set_verify()` or `SSL_set_verify()` functions are called.\nA call with the `SSL_VERIFY_PEER` mode is enabling client authentication and makes this vulnerability possible."
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-27780",
              "name": "CVE-2022-27780",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-27780"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-39318",
              "name": "CVE-2023-39318",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-39318"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-46218",
              "name": "CVE-2023-46218",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-46218"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            }
          ],
          "version": "1.0"
        }
      },
      "invocations": [
        {
          "arguments": [
            "/root/.jfrog/dependencies/analyzerManager/jas_scanner/jas_scanner",
            "scan",
            "/tmp/jfrog.cli.temp.-1718649360-1876491095/config.yaml"
          ],
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "/tmp/jfrog.cli.temp.-1718649307-219547283/image.tar"
          }
        }
      ],
      "results": [
        {
          "ruleId": "applic_CVE-2022-29804",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-41716",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2021-3115",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2020-14039",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-41720",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether one of the vulnerable functions `os.dirFS.Open` or  `net/http.Dir.Open` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2021-38297",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-41722",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-30634",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-30580",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2023-45283",
          "kind": "pass",
          "message": {
            "text": "The vulnerability is only exploitable when running under the Windows OS.\nSince currently only Linux containers are supported, the scanner will always conclude that this vulnerability is not applicable."
          }
        },
        {
          "ruleId": "applic_CVE-2020-14040",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2020-16845",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2020-26160",
          "message": {
            "text": "The vulnerable function MapClaims.VerifyAudience is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2020-26160",
          "message": {
            "text": "The vulnerable function MapClaims.VerifyAudience is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2020-29652",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `ssh.NewServerConn` is called.\n\nThe below prerequisite is also crucial for applicability but is not checked in the scanner (if it is not met, the CVE is not applicable):\n\n1. The data in the `ServerConfig` argument passed to the above function has the `GSSAPIWithMICConfig` field equal `nil`."
          }
        },
        {
          "ruleId": "applic_CVE-2021-20329",
          "message": {
            "text": "The vulnerable function Copier.CopyDocument is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-20329",
          "message": {
            "text": "The vulnerable function Copier.CopyDocumentFromBytes is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-20329",
          "message": {
            "text": "The vulnerable function Copier.CopyBytesToDocumentWriter is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-20329",
          "message": {
            "text": "The vulnerable function Copier.AppendDocumentBytes is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-20329",
          "message": {
            "text": "The vulnerable function Copier.CopyValueFromBytes is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-20329",
          "message": {
            "text": "The vulnerable function Copier.AppendValueBytes is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-20329",
          "message": {
            "text": "The vulnerable function Copier.CopyValue is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-20329",
          "message": {
            "text": "The vulnerable function valueWriter.writeElementHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-20329",
          "message": {
            "text": "The vulnerable function valueWriter.WriteValueBytes is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-20329",
          "message": {
            "text": "The vulnerable function valueWriter.WriteArray is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-20329",
          "message": {
            "text": "The vulnerable function valueWriter.WriteBinary is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-20329",
          "message": {
            "text": "The vulnerable function valueWriter.WriteBinaryWithSubtype is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-20329",
          "message": {
            "text": "The vulnerable function valueWriter.WriteBoolean is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-20329",
          "message": {
            "text": "The vulnerable function valueWriter.WriteCodeWithScope is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-20329",
          "message": {
            "text": "The vulnerable function valueWriter.WriteDBPointer is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-20329",
          "message": {
            "text": "The vulnerable function valueWriter.WriteDateTime is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-20329",
          "message": {
            "text": "The vulnerable function valueWriter.WriteDecimal128 is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-20329",
          "message": {
            "text": "The vulnerable function valueWriter.WriteDouble is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-20329",
          "message": {
            "text": "The vulnerable function valueWriter.WriteInt32 is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-20329",
          "message": {
            "text": "The vulnerable function valueWriter.WriteInt64 is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-20329",
          "message": {
            "text": "The vulnerable function valueWriter.WriteJavascript is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-20329",
          "message": {
            "text": "The vulnerable function valueWriter.WriteMaxKey is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-20329",
          "message": {
            "text": "The vulnerable function valueWriter.WriteMinKey is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-20329",
          "message": {
            "text": "The vulnerable function valueWriter.WriteNull is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-20329",
          "message": {
            "text": "The vulnerable function valueWriter.WriteObjectID is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-20329",
          "message": {
            "text": "The vulnerable function valueWriter.WriteRegex is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-20329",
          "message": {
            "text": "The vulnerable function valueWriter.WriteString is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-20329",
          "message": {
            "text": "The vulnerable function valueWriter.WriteDocument is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-20329",
          "message": {
            "text": "The vulnerable function valueWriter.WriteSymbol is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-20329",
          "message": {
            "text": "The vulnerable function valueWriter.WriteTimestamp is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-20329",
          "message": {
            "text": "The vulnerable function valueWriter.WriteUndefined is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-27918",
          "message": {
            "text": "The vulnerable function Decoder.Token is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-27918",
          "message": {
            "text": "The vulnerable function Decoder.Token is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-27918",
          "message": {
            "text": "The vulnerable function Decoder.Token is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-29482",
          "message": {
            "text": "The vulnerable function readUvarint is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-29482",
          "message": {
            "text": "The vulnerable function blockHeader.UnmarshalBinary is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-29482",
          "message": {
            "text": "The vulnerable function Reader.Read is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-29482",
          "message": {
            "text": "The vulnerable function streamReader.Read is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-31525",
          "message": {
            "text": "The vulnerable function isProtocolSwitchHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-31525",
          "message": {
            "text": "The vulnerable function shouldClose is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-31525",
          "message": {
            "text": "The vulnerable function HeaderValuesContainsToken is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-31525",
          "message": {
            "text": "The vulnerable function headerValueContainsToken is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-31525",
          "message": {
            "text": "The vulnerable function http2isConnectionCloseRequest is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-31525",
          "message": {
            "text": "The vulnerable function shouldClose is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-31525",
          "message": {
            "text": "The vulnerable function HeaderValuesContainsToken is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-31525",
          "message": {
            "text": "The vulnerable function headerValueContainsToken is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-31525",
          "message": {
            "text": "The vulnerable function http2clientStream.writeRequest is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-31525",
          "message": {
            "text": "The vulnerable function isProtocolSwitchHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-31525",
          "message": {
            "text": "The vulnerable function shouldClose is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-31525",
          "message": {
            "text": "The vulnerable function HeaderValuesContainsToken is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-31525",
          "message": {
            "text": "The vulnerable function headerValueContainsToken is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-31525",
          "message": {
            "text": "The vulnerable function http2isConnectionCloseRequest is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33194",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupCNAME is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupSRV is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupMX is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupNS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupAddr is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupCNAME is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupSRV is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupMX is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupNS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupAddr is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupCNAME is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupSRV is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupMX is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupNS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupAddr is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33196",
          "message": {
            "text": "The vulnerable function zip.OpenReader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-2880",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2021-33197",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2021-36221",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2021-33198",
          "message": {
            "text": "The vulnerable function Rat.SetString is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33198",
          "message": {
            "text": "The vulnerable function Rat.SetString is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-38561",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2021-39293",
          "message": {
            "text": "The vulnerable function OpenReader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-41771",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the functions `macho.NewFile()`, `macho.OpenFat()` or `macho.Open()` are called with external input."
          }
        },
        {
          "ruleId": "applic_CVE-2021-41772",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `archive/zip.(*Reader).Open` is used."
          }
        },
        {
          "ruleId": "applic_CVE-2021-43565",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `NewServerConn` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2021-44717",
          "message": {
            "text": "The vulnerable function forkExec is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-44717",
          "message": {
            "text": "The vulnerable function forkExec is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-44717",
          "message": {
            "text": "The vulnerable function forkExec is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-46848",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the following vulnerable functions are called:\n\n- `asn1_encode_simple_der`\n\n- `asn1_decode_simple_der`\n\n- `asn1_decode_simple_ber`\n\n- `asn1_der_decoding2`\n\n- `asn1_der_decoding`\n\n- `asn1_der_decoding_element`\n\n- `asn1_der_decoding_startEnd`\n\n- `asn1_expand_any_defined_by`\n\n- `asn1_expand_octet_string`"
          }
        },
        {
          "ruleId": "applic_CVE-2022-1586",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `pcre2_jit_compile`\n* `pcre2_jit_compile_8`\n* `pcre2_jit_compile_16`\n* `pcre2_jit_compile_32`"
          }
        },
        {
          "ruleId": "applic_CVE-2022-1587",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `pcre2_jit_compile`\n* `pcre2_jit_compile_8`\n* `pcre2_jit_compile_16`\n* `pcre2_jit_compile_32`"
          }
        },
        {
          "ruleId": "applic_CVE-2022-1962",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-1996",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-2097",
          "message": {
            "text": "The vulnerable function EVP_EncryptInit_ex is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-2097",
          "message": {
            "text": "The vulnerable function EVP_EncryptInit_ex is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libssl.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-21698",
          "message": {
            "text": "The vulnerable function responseWriterDelegator.WriteHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-21698",
          "message": {
            "text": "The vulnerable function responseWriterDelegator.Write is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-21698",
          "message": {
            "text": "The vulnerable function flusherDelegator.Flush is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-21698",
          "message": {
            "text": "The vulnerable function readerFromDelegator.ReadFrom is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-21698",
          "message": {
            "text": "The vulnerable function Handler is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-21698",
          "message": {
            "text": "The vulnerable function HandlerFor is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-21698",
          "message": {
            "text": "The vulnerable function InstrumentMetricHandler is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-21698",
          "message": {
            "text": "The vulnerable function InstrumentHandlerCounter is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-21698",
          "message": {
            "text": "The vulnerable function sanitizeMethod is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-21698",
          "message": {
            "text": "The vulnerable function flusherDelegator.Flush is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-21698",
          "message": {
            "text": "The vulnerable function readerFromDelegator.ReadFrom is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23772",
          "message": {
            "text": "The vulnerable function Rat.SetString is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23772",
          "message": {
            "text": "The vulnerable function Rat.SetString is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24675",
          "message": {
            "text": "The vulnerable function pem.Decode is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24675",
          "message": {
            "text": "The vulnerable function pem.Decode is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24675",
          "message": {
            "text": "The vulnerable function pem.Decode is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.Compile is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.MustCompile is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.MatchString is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.Match is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.Compile is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.Compile is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.MustCompile is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.MatchString is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.Compile is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.MustCompile is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.MatchString is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.Match is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.Compile is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-27191",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-27664",
          "message": {
            "text": "The vulnerable function net/http.ListenAndServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28131",
          "message": {
            "text": "The vulnerable function xml.Decoder.Skip is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28131",
          "message": {
            "text": "The vulnerable function xml.Decoder.Skip is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28131",
          "message": {
            "text": "The vulnerable function xml.Decoder.Skip is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function CurveParams.ScalarMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function CurveParams.ScalarBaseMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256GetScalar is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.CombinedMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.ScalarBaseMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.ScalarMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.CombinedMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.ScalarBaseMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.ScalarMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function CurveParams.ScalarMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function CurveParams.ScalarBaseMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256GetScalar is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.CombinedMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.ScalarBaseMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.ScalarMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.CombinedMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.ScalarBaseMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.ScalarMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function CurveParams.ScalarMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function CurveParams.ScalarBaseMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256GetScalar is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.CombinedMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.ScalarBaseMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.ScalarMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.CombinedMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.ScalarBaseMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.ScalarMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-2879",
          "message": {
            "text": "The vulnerable function archive/tar.Reader.Next is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28948",
          "message": {
            "text": "The vulnerable function Unmarshal is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28948",
          "message": {
            "text": "The vulnerable function Unmarshal is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28948",
          "message": {
            "text": "The vulnerable function Unmarshal is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-29526",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-30630",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `fs.Glob` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2022-30631",
          "message": {
            "text": "The vulnerable function gzip.Reader.Read is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-30631",
          "message": {
            "text": "The vulnerable function gzip.Reader.Read is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-30631",
          "message": {
            "text": "The vulnerable function gzip.Reader.Read is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-30632",
          "message": {
            "text": "The vulnerable function filepath.Glob is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-30633",
          "message": {
            "text": "The vulnerable function Decoder.DecodeElement is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-30633",
          "message": {
            "text": "The vulnerable function Decoder.unmarshal is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-30633",
          "message": {
            "text": "The vulnerable function Decoder.unmarshalPath is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-30633",
          "message": {
            "text": "The vulnerable function Decoder.DecodeElement is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-30633",
          "message": {
            "text": "The vulnerable function Decoder.unmarshal is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-30633",
          "message": {
            "text": "The vulnerable function Decoder.unmarshalPath is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-30633",
          "message": {
            "text": "The vulnerable function Decoder.DecodeElement is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-30633",
          "message": {
            "text": "The vulnerable function Decoder.unmarshal is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-30633",
          "message": {
            "text": "The vulnerable function Decoder.unmarshalPath is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-32148",
          "message": {
            "text": "The vulnerable function Header.Clone is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-32148",
          "message": {
            "text": "The vulnerable function Header.Clone is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-32148",
          "message": {
            "text": "The vulnerable function Header.Clone is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-32148",
          "message": {
            "text": "The vulnerable function Header.Clone is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-32148",
          "message": {
            "text": "The vulnerable function Header.Clone is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-32148",
          "message": {
            "text": "The vulnerable function Header.Clone is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-32149",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-32189",
          "message": {
            "text": "The vulnerable function math/big.Rat.GobDecode\\math/big.Float.GobDecode is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-32189",
          "message": {
            "text": "The vulnerable function math/big.Rat.GobDecode\\math/big.Float.GobDecode is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-32189",
          "message": {
            "text": "The vulnerable function math/big.Rat.GobDecode\\math/big.Float.GobDecode is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-32189",
          "message": {
            "text": "The vulnerable function math/big.Rat.GobDecode\\math/big.Float.GobDecode is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3515",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether at least one of the vulnerable API calls is called - \n```\n1. ksba_crl_parse\n2. ksba_cms_parse\n```"
          }
        },
        {
          "ruleId": "applic_CVE-2022-47629",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether at least one of the vulnerable API calls is called - \n```\n1. ksba_crl_parse\n2. ksba_cms_parse\n```"
          }
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///lib/libapk.so.3.12.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///lib/libapk.so.3.12.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/socat"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_accept is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/socat"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/socat"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/_ssl.cpython-36m-x86_64-linux-gnu.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libcurl.so.4.7.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libcurl.so.4.7.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libcurl.so.4.7.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libldap.so.2.0.200"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libldap.so.2.0.200"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_accept is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libldap.so.2.0.200"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libldap.so.2.0.200"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libtls.so.2.0.3"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libtls.so.2.0.3"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libtls.so.2.0.3"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libtls.so.2.0.3"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_accept is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libtls.so.2.0.3"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libtls.so.2.0.3"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///lib/libapk.so.3.12.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///lib/libapk.so.3.12.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/socat"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_accept is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/socat"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/socat"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/_ssl.cpython-36m-x86_64-linux-gnu.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libcurl.so.4.7.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libcurl.so.4.7.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libcurl.so.4.7.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libldap.so.2.0.200"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libldap.so.2.0.200"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_accept is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libldap.so.2.0.200"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libldap.so.2.0.200"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libtls.so.2.0.3"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libtls.so.2.0.3"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libtls.so.2.0.3"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libtls.so.2.0.3"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_accept is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libtls.so.2.0.3"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libtls.so.2.0.3"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-37434",
          "message": {
            "text": "The vulnerable function inflateGetHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libz.so.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-37434",
          "message": {
            "text": "The vulnerable library zlib is included"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libz.so.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-37434",
          "message": {
            "text": "The vulnerable library zlib is included"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libz.so.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-43680",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libexpat.so.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-43680",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libexpat.so.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-43680",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libexpat.so.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-43680",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/pyexpat.cpython-36m-x86_64-linux-gnu.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-43680",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/pyexpat.cpython-36m-x86_64-linux-gnu.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-52425",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libexpat.so.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-52425",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libexpat.so.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-52425",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libexpat.so.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-52425",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/pyexpat.cpython-36m-x86_64-linux-gnu.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-52425",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/pyexpat.cpython-36m-x86_64-linux-gnu.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-40674",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libexpat.so.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-40674",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libexpat.so.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-40674",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libexpat.so.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-40674",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/pyexpat.cpython-36m-x86_64-linux-gnu.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-40674",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/pyexpat.cpython-36m-x86_64-linux-gnu.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41715",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any function eventually calls the vulnerable function `regexp/syntax.parse`."
          }
        },
        {
          "ruleId": "applic_CVE-2022-41717",
          "message": {
            "text": "The vulnerable function http2Server.ServeConn is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41717",
          "message": {
            "text": "The vulnerable function http2serverConn.canonicalHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41717",
          "message": {
            "text": "The vulnerable function Server.ListenAndServe is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41717",
          "message": {
            "text": "The vulnerable function Server.Serve is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41717",
          "message": {
            "text": "The vulnerable function Server.ServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41717",
          "message": {
            "text": "The vulnerable function Server.ListenAndServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41717",
          "message": {
            "text": "The vulnerable function ListenAndServe is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41723",
          "message": {
            "text": "The vulnerable function Decoder.DecodeFull is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41723",
          "message": {
            "text": "The vulnerable function Decoder.Write is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41723",
          "message": {
            "text": "The vulnerable function Decoder.parseFieldLiteral is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41723",
          "message": {
            "text": "The vulnerable function Decoder.readString is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41723",
          "message": {
            "text": "The vulnerable function Decoder.DecodeFull is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41723",
          "message": {
            "text": "The vulnerable function Decoder.Write is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41723",
          "message": {
            "text": "The vulnerable function Decoder.parseFieldLiteral is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41723",
          "message": {
            "text": "The vulnerable function Decoder.readString is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41723",
          "message": {
            "text": "The vulnerable function Decoder.DecodeFull is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41723",
          "message": {
            "text": "The vulnerable function Decoder.Write is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41723",
          "message": {
            "text": "The vulnerable function Decoder.parseFieldLiteral is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41723",
          "message": {
            "text": "The vulnerable function Decoder.readString is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41724",
          "kind": "pass",
          "message": {
            "text": "The CVE is never applicable. A closer inspection of the issue shows there are no potential user-controllable paths that allow creating a panic (see also original commit message - https://go.dev/cl/468125)"
          }
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.ReadMIMEHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.ReadForm is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.readForm is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function newPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Part.populateHeaders is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.NextPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.NextRawPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.nextPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.ReadMIMEHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.ReadForm is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.readForm is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.NextPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function newPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Part.populateHeaders is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.NextRawPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.nextPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.ReadMIMEHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.ReadForm is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.readForm is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function newPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Part.populateHeaders is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.NextPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.NextRawPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.nextPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.ReadMIMEHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.ReadForm is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.readForm is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function newPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Part.populateHeaders is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.NextPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.NextRawPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.nextPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.ReadMIMEHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.ReadForm is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.readForm is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.NextPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function newPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Part.populateHeaders is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.NextRawPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.nextPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.ReadMIMEHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.ReadForm is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.readForm is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function newPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Part.populateHeaders is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.NextPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.NextRawPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.nextPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-43551",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `curl` command-line tool is invoked with the `--hsts` option."
          }
        },
        {
          "ruleId": "applic_CVE-2022-42916",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `curl` command-line tool is invoked with the `--hsts` option."
          }
        },
        {
          "ruleId": "applic_CVE-2023-23914",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `curl` command-line tool is invoked with the `--hsts` option."
          }
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/_ssl.cpython-36m-x86_64-linux-gnu.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/_ssl.cpython-36m-x86_64-linux-gnu.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/_ssl.cpython-36m-x86_64-linux-gnu.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/_ssl.cpython-36m-x86_64-linux-gnu.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/_ssl.cpython-36m-x86_64-linux-gnu.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/_ssl.cpython-36m-x86_64-linux-gnu.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libssl.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libssl.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libssl.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libssl.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libssl.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libssl.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libssl.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libssl.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libssl.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libssl.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libssl.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libssl.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libssl.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libssl.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libssl.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libssl.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libssl.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libssl.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libssl.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0215",
          "message": {
            "text": "The vulnerable function `i2d_ASN1_bio_stream` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0215",
          "message": {
            "text": "The vulnerable function `PEM_write_bio_ASN1_stream` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0215",
          "message": {
            "text": "The vulnerable function `SMIME_write_ASN1` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0215",
          "message": {
            "text": "The vulnerable function `BIO_new_NDEF` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0215",
          "message": {
            "text": "The vulnerable function `BIO_new_CMS` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0215",
          "message": {
            "text": "The vulnerable function `i2d_CMS_bio_stream` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0215",
          "message": {
            "text": "The vulnerable function `PEM_write_bio_CMS_stream` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0215",
          "message": {
            "text": "The vulnerable function `SMIME_write_CMS` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0215",
          "message": {
            "text": "The vulnerable function `BIO_new_PKCS7` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0215",
          "message": {
            "text": "The vulnerable function `i2d_PKCS7_bio_stream` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0215",
          "message": {
            "text": "The vulnerable function `PEM_write_bio_PKCS7_stream` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0215",
          "message": {
            "text": "The vulnerable function `SMIME_write_PKCS7` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0217",
          "message": {
            "text": "The vulnerable function `EVP_PKEY_public_check` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0286",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0286",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0361",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable gnuTLS library is used, by checking for calls to the `gnutls_init` function."
          }
        },
        {
          "ruleId": "applic_CVE-2023-0401",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0401",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0464",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0465",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24534",
          "message": {
            "text": "The vulnerable function Reader.ReadMIMEHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24534",
          "message": {
            "text": "The vulnerable function Reader.upcomingHeaderNewlines is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24534",
          "message": {
            "text": "The vulnerable function Reader.ReadMIMEHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24534",
          "message": {
            "text": "The vulnerable function Reader.upcomingHeaderNewlines is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24534",
          "message": {
            "text": "The vulnerable function Reader.ReadMIMEHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24534",
          "message": {
            "text": "The vulnerable function Reader.upcomingHeaderNewlines is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24537",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether one of the following vulnerable functions is called:\n\n- `scanner.Scanner.Scan`\n- `parser.ParseDir`\n- `parser.ParseExpr`\n- `parser.ExprFrom`\n- `parser.ParseFile`\n\nNote that the scanner does not check for the invocation of command-line utilities (such as `go build`) that can indirectly trigger this vulnerability"
          }
        },
        {
          "ruleId": "applic_CVE-2023-24538",
          "message": {
            "text": "The vulnerable function Template.Execute is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24538",
          "message": {
            "text": "The vulnerable function Template.ExecuteTemplate is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24538",
          "message": {
            "text": "The vulnerable function Template.Execute is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24538",
          "message": {
            "text": "The vulnerable function Template.ExecuteTemplate is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24539",
          "message": {
            "text": "The vulnerable function cssValueFilter is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24539",
          "message": {
            "text": "The vulnerable function escaper.commit is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24539",
          "message": {
            "text": "The vulnerable function Template.Execute is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24539",
          "message": {
            "text": "The vulnerable function Template.ExecuteTemplate is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24539",
          "message": {
            "text": "The vulnerable function cssValueFilter is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24539",
          "message": {
            "text": "The vulnerable function escaper.commit is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24539",
          "message": {
            "text": "The vulnerable function Template.Execute is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24539",
          "message": {
            "text": "The vulnerable function Template.ExecuteTemplate is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24540",
          "message": {
            "text": "The vulnerable function nextJSCtx is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24540",
          "message": {
            "text": "The vulnerable function Template.Execute is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24540",
          "message": {
            "text": "The vulnerable function Template.ExecuteTemplate is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24540",
          "message": {
            "text": "The vulnerable function nextJSCtx is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24540",
          "message": {
            "text": "The vulnerable function Template.Execute is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24540",
          "message": {
            "text": "The vulnerable function Template.ExecuteTemplate is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-27533",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether curl is executed with the vulnerable `--telnet-option` flag, and the flag references one of the following vulnerable options -\n\n- `TTYPE`\n- `XDISPLOC`\n- `NEW_ENV`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-27536",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `curl` command-line tool is invoked with the `--delegation` option."
          }
        },
        {
          "ruleId": "applic_CVE-2023-28322",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `curl_easy_setopt` is called (this flaw cannot be triggered with the command line tool).\n\nNote that the scanner currently does not check for the specific arguments that must be passed to `curl_easy_setopt` (over multiple calls) for the vulnerability to be applicable -\n\n* `CURLOPT_READFUNCTION` - to set up a read callback that supplies data to the following PUT request\n\n* `CURLOPT_PUT / CURLOPT_UPLOAD` - to perform a PUT request\n\n* `CURLOPT_POSTFIELDS` - to (attempt to) supply data for the following POST request\n\n* `CURLOPT_POST` - to perform a POST request (which will erroneously use the read callback previously set)"
          }
        },
        {
          "ruleId": "applic_CVE-2022-32221",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `curl_easy_setopt()` is called.\n\nTo determine the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified. The condition is that both CURLOPT_READFUNCTION and CURLOPT_POSTFIELDS options are set through `curl_easy_setopt()` on the same handler."
          }
        },
        {
          "ruleId": "applic_CVE-2023-29400",
          "message": {
            "text": "The vulnerable function htmlNospaceEscaper is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29400",
          "message": {
            "text": "The vulnerable function Template.Execute is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29400",
          "message": {
            "text": "The vulnerable function Template.ExecuteTemplate is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29400",
          "message": {
            "text": "The vulnerable function appendCmd is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29400",
          "message": {
            "text": "The vulnerable function htmlNospaceEscaper is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29400",
          "message": {
            "text": "The vulnerable function Template.Execute is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29400",
          "message": {
            "text": "The vulnerable function Template.ExecuteTemplate is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29400",
          "message": {
            "text": "The vulnerable function appendCmd is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29402",
          "kind": "pass",
          "message": {
            "text": "The scanner looks for Go program binaries that were built with \"cgo\" support (C language bindings)"
          }
        },
        {
          "ruleId": "applic_CVE-2023-29403",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any Go binaries exist in the image, that have the SETUID or SETGID flags enabled"
          }
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Client.Get is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Client.Do is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Client.Post is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Client.PostForm is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Client.Head is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Client.CloseIdleConnections is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Request.Write is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Request.WriteProxy is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Request.write is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Transport.RoundTrip is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Transport.CloseIdleConnections is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Transport.CancelRequest is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Get is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Client.Get is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Client.Do is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Client.Post is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Client.PostForm is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Client.Head is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Client.CloseIdleConnections is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Request.Write is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Request.WriteProxy is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Request.write is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Transport.RoundTrip is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Transport.CloseIdleConnections is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Transport.CancelRequest is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Client.Get is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Client.Do is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Client.Post is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Client.PostForm is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Client.Head is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Client.CloseIdleConnections is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Request.Write is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Request.WriteProxy is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Request.write is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Transport.RoundTrip is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Transport.CloseIdleConnections is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Transport.CancelRequest is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Get is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29491",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether a **setuid** binary calls any of the following vulnerable functions -\n- `initscr` \n- `setupterm`\n- `restartterm`\n- `_nc_read_file_entry`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.Write is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.Read is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.Handshake is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.verifyServerCertificate is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.processCertsFromClient is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Dial is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Dialer.DialContext is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function DialWithDialer is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.Write is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.Read is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.Handshake is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.verifyServerCertificate is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.processCertsFromClient is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function DialWithDialer is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.Write is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.Read is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.Handshake is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.HandshakeContext is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.verifyServerCertificate is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Dial is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Dialer.DialContext is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function DialWithDialer is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-3978",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2023-2603",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n - `cap_proc_root`\n - `cap_launcher_set_chroot`\n\nTo determine this CVE's applicability, an additional condition (that the scanner currently does not check) should be verified: The application runs in 32-bit mode on a 64-bit Linux host."
          }
        },
        {
          "ruleId": "applic_CVE-2023-29499",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `g_variant_is_normal_form()` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2023-29405",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information)."
          }
        },
        {
          "ruleId": "applic_CVE-2022-23773",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable, since exploitation depends on the structure of the organization's Git repositories (see extended information)."
          }
        },
        {
          "ruleId": "applic_CVE-2023-45285",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue is only exploitable via user interaction."
          }
        },
        {
          "ruleId": "applic_CVE-2023-29404",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information)."
          }
        },
        {
          "ruleId": "applic_CVE-2023-39323",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information)."
          }
        },
        {
          "ruleId": "applic_CVE-2023-32636",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following functions are called:\n\n- `g_variant_new`\n- `g_variant_new_array`\n- `g_variant_new_bytestring`\n- `g_variant_new_bytestring_array`\n- `g_variant_new_dict_entry`\n- `g_variant_new_fixed_array`\n- `g_variant_new_from_bytes`\n- `g_variant_new_from_data`\n- `g_variant_new_maybe`\n- `g_variant_new_objv`\n- `g_variant_new_printf`\n- `g_variant_new_strv`\n- `g_variant_new_tuple`\n- `g_variant_new_va`"
          }
        },
        {
          "ruleId": "applic_CVE-2022-41409",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable `pcre2test` binary exists on the scanned artifact."
          }
        },
        {
          "ruleId": "applic_CVE-2023-0216",
          "message": {
            "text": "The vulnerable function `d2i_PKCS7` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0216",
          "message": {
            "text": "The vulnerable function `d2i_PKCS7_fp` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0216",
          "message": {
            "text": "The vulnerable function `d2i_PKCS7_bio` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for both OpenSSL 1.x and 3.x were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/_ssl.cpython-36m-x86_64-linux-gnu.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for both OpenSSL 1.x and 3.x were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libssl.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-38545",
          "kind": "pass",
          "message": {
            "text": "The scanner checks for any of the vulnerable conditions:\n1. Whether the `curl` CLI tool is called with the vulnerable argument `--socks5-hostname`.\n2. Whether the vulnerable scheme `socks5h://` is referenced anywhere. This includes (but not limited to) command line arguments, environment variables and shell scripts.\n3. Whether the function `curl_easy_setopt` is called when using `libcurl`.\n\nIn the case of the last condition, for fully determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: `curl_easy_setopt` must be called with any of the following arguments:\n\n* `curl_easy_setopt(handle, CURLOPT_PROXYTYPE, CURLPROXY_SOCKS5_HOSTNAME)`\n* `curl_easy_setopt(handle, CURLOPT_PROXY, \"socks5h://...\")`\n* `curl_easy_setopt(handle, CURLOPT_PRE_PROXY, \"socks5h://...\")`"
          }
        },
        {
          "ruleId": "applic_CVE-2022-29155",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether OpenLDAP's vulnerable \"back-sql\" functionality is enabled, by checking `slapd.conf` for the section named `database sql`"
          }
        },
        {
          "ruleId": "applic_CVE-2022-1292",
          "message": {
            "text": "The vulnerable string 'c_rehash' was found in the image"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///etc/ca-certificates/update.d/certhash"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-2068",
          "message": {
            "text": "The vulnerable string 'c_rehash' was found in the image"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///etc/ca-certificates/update.d/certhash"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-5363",
          "kind": "pass",
          "message": {
            "text": "The scanner checks if any of the following vulnerable functions are called:\n\n- `EVP_EncryptInit_ex2`\n- `EVP_DecryptInit_ex2`\n- `EVP_CipherInit_ex2`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function http2Server.ServeConn is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function http2serverConn.serve is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function http2serverConn.processHeaders is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function http2serverConn.runHandler is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function Server.ListenAndServe is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function Server.Serve is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function Server.ServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function Server.ListenAndServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function ListenAndServe is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-35945",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the Envoy YAML or JSON configuration contains a definition for an upstream cluster.\nFor example -\n```yaml\nstatic_resources:\n\tclusters:\n\t- name: ...\t\n```"
          }
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/sops"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-28531",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether OpenSSH is configured to use the vulnerable PKCS #11 public-key standard, by checking for the `PKCS11Provider` directive in the OpenSSH configuration file.\nThe scanner does not check whether a PKCS #11 public-key has already been added to the SSH agent.\n\nAffected configuration example:\n`PKCS11Provider /usr/lib/x86_64-linux-gnu/opensc-pkcs11.so`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-7104",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the vulnerable functions are called -\n\n- `sqlite3_open()`\n- `sqlite3_open16()` \n- `sqlite3_open_v2()`\n\nNote that vulnerability can also be exploited for DoS when opening a database with the `sqlite3` command line utility, but in that case it would have no security impact (crashing a forked client process)"
          }
        },
        {
          "ruleId": "applic_CVE-2023-0466",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/kubeyaml/libcrypto.so.1.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-51385",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `ProxyCommand` configuration is uncommented and set with the tokens `%h` or `%r` in the OpenSSH configuration files: `/etc/ssh/ssh_config` or `~/.ssh/config`."
          }
        },
        {
          "ruleId": "applic_CVE-2023-27534",
          "message": {
            "text": "The vulnerable function curl_easy_setopt is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/libexec/git-core/git-http-fetch"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-27534",
          "message": {
            "text": "The vulnerable function curl_easy_setopt is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/libexec/git-core/git-http-push"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-27534",
          "message": {
            "text": "The vulnerable function curl_easy_setopt is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/libexec/git-core/git-remote-ftp"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-27534",
          "message": {
            "text": "The vulnerable function curl_easy_setopt is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/libexec/git-core/git-remote-ftps"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-27534",
          "message": {
            "text": "The vulnerable function curl_easy_setopt is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/libexec/git-core/git-remote-http"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-27534",
          "message": {
            "text": "The vulnerable function curl_easy_setopt is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/libexec/git-core/git-remote-https"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2024-0553",
          "kind": "pass",
          "message": {
            "text": "The scanner checks if RSA decryption occurs by finding calls to any of the following functions:\n\n- `gnutls_privkey_decrypt_data`\n\n- `gnutls_privkey_decrypt_data2`\n\nAn additional condition (that the scanner does not currently check) is required for the CVE to be applicable: the RSA padding algorithm needs to be `PKCS#1`. `key-\u003epk_algorithm` needs to be equal to `GNUTLS_PK_RSA`."
          }
        },
        {
          "ruleId": "applic_CVE-2023-25652",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable `git apply` command is used with the vulnerable option:\n\n* `--reject` \n\nThis vulnerability can also be triggered by an interactive user."
          }
        },
        {
          "ruleId": "applic_CVE-2024-28180",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2024-0567",
          "kind": "pass",
          "message": {
            "text": "The scanner checks if any of the following vulnerable functions are called:\n\n- `gnutls_pcert_import_x509_list`\n\n- `gnutls_certificate_set_x509_key`\n\n- `gnutls_certificate_set_x509_simple_pkcs12_mem`\n\n- `gnutls_certificate_set_x509_simple_pkcs12_file`\n\n- `gnutls_privkey_import_url`\n\n- `gnutls_privkey_import_pkcs11_url`\n\n- `gnutls_read_key_file`\n\n- `gnutls_certificate_set_rawpk_key_file`\n\n- `gnutls_certificate_set_x509_key_file2`\n\n- `gnutls_certificate_set_x509_key_file`\n\n- `gnutls_pcert_list_import_x509_file`\n\n- `gnutls_certificate_set_x509_key_mem2`\n\n- `gnutls_certificate_set_x509_key_mem`\n\n- `gnutls_x509_crt_list_import`\n\n- `gnutls_pcert_list_import_x509_raw`\n\n- `gnutls_session_channel_binding`\n\n- `gnutls_x509_crt_list_import2`\n\n- `gnutls_x509_trust_list_add_trust_mem`\n\n- `gnutls_x509_trust_list_add_system_trust`\n\n- `gnutls_certificate_set_x509_system_trust`\n\n- `gnutls_certificate_set_x509_crl_mem`\n\n- `gnutls_certificate_set_x509_trust_mem`\n\n- `gnutls_x509_trust_list_add_trust_file`\n\n- `gnutls_certificate_set_x509_crl_file`\n\n- `gnutls_certificate_set_x509_trust_file`\n\n- `gnutls_x509_trust_list_add_trust_dir`\n\n- `gnutls_certificate_set_x509_trust_dir`\n\n- `gnutls_x509_trust_list_remove_trust_mem`\n\n- `gnutls_x509_trust_list_remove_trust_file`\n\n- `gnutls_x509_trust_list_verify_crt2`\n\n- `gnutls_x509_cert_verify_peers`\n\n- `gnutls_certificate_verify_peers`\n\n- `gnutls_certificate_verify_peers2`\n\n- `gnutls_certificate_verify_peers3`\n\n- `gnutls_pkcs7_verify`\n\n- `gnutls_ocsp_resp_verify`\n\n- `gnutls_x509_trust_list_verify_crt`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-49210",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable `openssl` function is used with external input."
          }
        },
        {
          "ruleId": "applic_CVE-2023-45288",
          "message": {
            "text": "The vulnerable function ServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2016-7798",
          "kind": "pass",
          "message": {
            "text": "The scanner checks if the function `OpenSSL::Cipher.new()` is called with AES gcm is as the encryption type. \nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The AES IV initialization happens before the key initialization."
          }
        },
        {
          "ruleId": "applic_CVE-2022-27782",
          "message": {
            "text": "The vulnerable function `curl_easy_setopt` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/libexec/git-core/git-http-fetch"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-27782",
          "message": {
            "text": "The vulnerable function `curl_easy_setopt` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/libexec/git-core/git-http-push"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-27782",
          "message": {
            "text": "The vulnerable function `curl_easy_setopt` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/libexec/git-core/git-remote-ftp"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-27782",
          "message": {
            "text": "The vulnerable function `curl_easy_setopt` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/libexec/git-core/git-remote-ftps"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-27782",
          "message": {
            "text": "The vulnerable function `curl_easy_setopt` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/libexec/git-core/git-remote-http"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-27782",
          "message": {
            "text": "The vulnerable function `curl_easy_setopt` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/libexec/git-core/git-remote-https"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-27781",
          "kind": "pass",
          "message": {
            "text": "The scanner checks if both of the following conditions are met:\n\n* The vulnerable `libcurl` function `curl_easy_setopt()` is called.\n* The library `libnss3` is linked with the `curl`.\n\nFor fully determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: `curl_easy_setopt` must be called with the argument `CURLOPT_CERTINFO`."
          }
        },
        {
          "ruleId": "applic_CVE-2024-32002",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2024-32004",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether a local git repository contains a `upload-pack` command in its git config file (`repo-name/.git/config`)."
          }
        },
        {
          "ruleId": "applic_CVE-2022-2509",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `gnutls_pkcs7_verify` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function http2Server.ServeConn is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function http2serverConn.serve is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function http2serverConn.processHeaders is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function http2serverConn.runHandler is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function Server.ListenAndServe is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function Server.Serve is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function Server.ServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function Server.ListenAndServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function ListenAndServe is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/fluxd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-30635",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/kustomize"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://jfrog.com/help/r/jfrog-security-documentation/jfrog-advanced-security",
          "name": "JFrog Secrets scanner",
          "rules": [
            {
              "id": "REQ.SECRET.GENERIC.TEXT",
              "name": "REQ.SECRET.GENERIC.TEXT",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.TEXT"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive"
              }
            },
            {
              "id": "REQ.SECRET.GENERIC.CODE",
              "name": "REQ.SECRET.GENERIC.CODE",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.CODE"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private"
              }
            },
            {
              "id": "REQ.SECRET.GENERIC.URL",
              "name": "REQ.SECRET.GENERIC.URL",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.URL"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive"
              }
            },
            {
              "id": "REQ.SECRET.KEYS",
              "name": "REQ.SECRET.KEYS",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.KEYS"
              },
              "fullDescription": {
                "text": "\nStoring an API key in the image could lead to several risks.\n\nIf the key is associated with a wide scope of privileges, attackers could extract it from a single image or firmware and use it maliciously to attack many targets. For example, if the embedded key allows querying/modifying data for all cloud user accounts, without per-user authentication, the attackers who extract it would gain access to system-wide data.\n\nIf the cloud/SaaS provider bills by key usage - for example, every million queries cost the key's owner a fixed sum of money - attackers could use the keys for their own purposes (or just as a form of vandalism), incurring a large cost to the legitimate user or operator.\n\n## Best practices\n\nUse narrow scopes for stored API keys. As much as possible, API keys should be unique per host and require additional authentication with the user's individual credentials for any sensitive actions.\n\nAvoid placing keys whose use incurs costs directly in the image. Store the key with any software or hardware protection available on the host for key storage (such as operating system key-stores, hardware cryptographic storage mechanisms or cloud-managed secure storage services such as [AWS KMS](https://aws.amazon.com/kms/)).\n\nTokens that were detected as exposed should be revoked and replaced -\n\n* [AWS Key Revocation](https://aws.amazon.com/premiumsupport/knowledge-center/delete-access-key/#:~:text=If%20you%20see%20a%20warning,the%20confirmation%20box%2C%20choose%20Deactivate.)\n* [GCP Key Revocation](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/CloudIAM/delete-api-keys.html)\n* [Azure Key Revocation](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops\u0026tabs=Windows#revoke-a-pat)\n* [GitHub Key Revocation](https://docs.github.com/en/rest/apps/oauth-applications#delete-an-app-authorization)\n",
                "markdown": "\nStoring an API key in the image could lead to several risks.\n\nIf the key is associated with a wide scope of privileges, attackers could extract it from a single image or firmware and use it maliciously to attack many targets. For example, if the embedded key allows querying/modifying data for all cloud user accounts, without per-user authentication, the attackers who extract it would gain access to system-wide data.\n\nIf the cloud/SaaS provider bills by key usage - for example, every million queries cost the key's owner a fixed sum of money - attackers could use the keys for their own purposes (or just as a form of vandalism), incurring a large cost to the legitimate user or operator.\n\n## Best practices\n\nUse narrow scopes for stored API keys. As much as possible, API keys should be unique per host and require additional authentication with the user's individual credentials for any sensitive actions.\n\nAvoid placing keys whose use incurs costs directly in the image. Store the key with any software or hardware protection available on the host for key storage (such as operating system key-stores, hardware cryptographic storage mechanisms or cloud-managed secure storage services such as [AWS KMS](https://aws.amazon.com/kms/)).\n\nTokens that were detected as exposed should be revoked and replaced -\n\n* [AWS Key Revocation](https://aws.amazon.com/premiumsupport/knowledge-center/delete-access-key/#:~:text=If%20you%20see%20a%20warning,the%20confirmation%20box%2C%20choose%20Deactivate.)\n* [GCP Key Revocation](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/CloudIAM/delete-api-keys.html)\n* [Azure Key Revocation](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops\u0026tabs=Windows#revoke-a-pat)\n* [GitHub Key Revocation](https://docs.github.com/en/rest/apps/oauth-applications#delete-an-app-authorization)\n"
              },
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private"
              }
            }
          ],
          "version": "1.0"
        }
      },
      "invocations": [
        {
          "arguments": [
            "/root/.jfrog/dependencies/analyzerManager/jas_scanner/jas_scanner",
            "scan",
            "/tmp/jfrog.cli.temp.-1718649360-1876491095/config.yaml"
          ],
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "/tmp/jfrog.cli.temp.-1718649307-219547283/image.tar"
          }
        }
      ],
      "results": []
    }
  ]
}
