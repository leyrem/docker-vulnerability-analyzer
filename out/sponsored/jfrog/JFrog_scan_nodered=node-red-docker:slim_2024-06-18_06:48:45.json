{
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "informationUri": "https://docs.jfrog-applications.jfrog.io/jfrog-security-features/sca",
          "name": "JFrog Xray SCA",
          "rules": [
            {
              "id": "CVE-2022-37434_3.9:zlib_1.2.11-r1",
              "shortDescription": {
                "text": "[CVE-2022-37434] 3.9:zlib 1.2.11-r1"
              },
              "help": {
                "text": "zlib through 1.2.12 has a heap-based buffer over-read or buffer overflow in inflate in inflate.c via a large gzip header extra field. NOTE: only applications that call inflateGetHeader are affected. Some common applications bundle the affected zlib source code but may be unable to call inflateGetHeader (e.g., see the nodejs/node reference).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.2.12-r2]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2021-3711_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2021-3711] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "In order to decrypt SM2 encrypted data an application is expected to call the API function EVP_PKEY_decrypt(). Typically an application will call this function twice. The first time, on entry, the \"out\" parameter can be NULL and, on exit, the \"outlen\" parameter is populated with the buffer size required to hold the decrypted plaintext. The application can then allocate a sufficiently sized buffer and call EVP_PKEY_decrypt() again, but this time passing a non-NULL value for the \"out\" parameter. A bug in the implementation of the SM2 decryption code means that the calculation of the buffer size required to hold the plaintext returned by the first call to EVP_PKEY_decrypt() can be smaller than the actual size required by the second call. This can lead to a buffer overflow when EVP_PKEY_decrypt() is called by the application a second time with a buffer that is too small. A malicious attacker who is able present SM2 content for decryption to an application could cause attacker chosen data to overflow the buffer by up to a maximum of 62 bytes altering the contents of other data held after the buffer, possibly changing application behaviour or causing the application to crash. The location of the buffer is application dependent but is typically heap allocated. Fixed in OpenSSL 1.1.1l (Affected 1.1.1-1.1.1k).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.1.1l-r0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2021-3711_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2021-3711] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "In order to decrypt SM2 encrypted data an application is expected to call the API function EVP_PKEY_decrypt(). Typically an application will call this function twice. The first time, on entry, the \"out\" parameter can be NULL and, on exit, the \"outlen\" parameter is populated with the buffer size required to hold the decrypted plaintext. The application can then allocate a sufficiently sized buffer and call EVP_PKEY_decrypt() again, but this time passing a non-NULL value for the \"out\" parameter. A bug in the implementation of the SM2 decryption code means that the calculation of the buffer size required to hold the plaintext returned by the first call to EVP_PKEY_decrypt() can be smaller than the actual size required by the second call. This can lead to a buffer overflow when EVP_PKEY_decrypt() is called by the application a second time with a buffer that is too small. A malicious attacker who is able present SM2 content for decryption to an application could cause attacker chosen data to overflow the buffer by up to a maximum of 62 bytes altering the contents of other data held after the buffer, possibly changing application behaviour or causing the application to crash. The location of the buffer is application dependent but is typically heap allocated. Fixed in OpenSSL 1.1.1l (Affected 1.1.1-1.1.1k).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.1.1l-r0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-48174_3.9:busybox_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2022-48174] 3.9:busybox 1.29.3-r10"
              },
              "help": {
                "text": "There is a stack overflow vulnerability in ash.c:6030 in busybox before 1.35. In the environment of Internet of Vehicles, this vulnerability can be executed from command to arbitrary code execution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.36.1-r2]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2021-36159_3.9:apk-tools_2.10.3-r1",
              "shortDescription": {
                "text": "[CVE-2021-36159] 3.9:apk-tools 2.10.3-r1"
              },
              "help": {
                "text": "libfetch before 2021-07-26, as used in apk-tools, xbps, and other products, mishandles numeric strings for the FTP and HTTP protocols. The FTP passive mode implementation allows an out-of-bounds read because strtol is used to parse the relevant numbers into address bytes. It does not check if the line ends prematurely. If it does, the for-loop condition checks for the '\\0' terminator one byte too late.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.1      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [2.12.6-r0]   |"
              },
              "properties": {
                "security-severity": "9.1"
              }
            },
            {
              "id": "CVE-2020-7769_nodemailer_6.1.1",
              "shortDescription": {
                "text": "[CVE-2020-7769] nodemailer 6.1.1"
              },
              "help": {
                "text": "This affects the package nodemailer before 6.4.16. Use of crafted recipient email addresses may result in arbitrary command flag injection in sendmail transport for sending mails.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `       | [6.4.16]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2020-7769_nodemailer_6.3.0",
              "shortDescription": {
                "text": "[CVE-2020-7769] nodemailer 6.3.0"
              },
              "help": {
                "text": "This affects the package nodemailer before 6.4.16. Use of crafted recipient email addresses may result in arbitrary command flag injection in sendmail transport for sending mails.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `       | [6.4.16]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2024-27307_jsonata_1.6.5",
              "shortDescription": {
                "text": "[CVE-2024-27307] jsonata 1.6.5"
              },
              "help": {
                "text": "JSONata is a JSON query and transformation language. Starting in version 1.4.0 and prior to version 1.8.7 and 2.0.4, a malicious expression can use the transform operator to override properties on the `Object` constructor and prototype. This may lead to denial of service, remote code execution or other unexpected behavior in applications that evaluate user-provided JSONata expressions. This issue has been fixed in JSONata versions 1.8.7 and 2.0.4. Applications that evaluate user-provided expressions should update ASAP to prevent exploitation. As a workaround, one may apply the patch manually.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `       | [1.8.7], [2.0.4]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-48174_3.9:ssl_client_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2022-48174] 3.9:ssl_client 1.29.3-r10"
              },
              "help": {
                "text": "There is a stack overflow vulnerability in ash.c:6030 in busybox before 1.35. In the environment of Internet of Vehicles, this vulnerability can be executed from command to arbitrary code execution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.36.1-r2]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-0464_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2023-0464] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "A security vulnerability has been identified in all supported versions\n\nof OpenSSL related to the verification of X.509 certificate chains\nthat include policy constraints.  Attackers may be able to exploit this\nvulnerability by creating a malicious certificate chain that triggers\nexponential use of computational resources, leading to a denial-of-service\n(DoS) attack on affected systems.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.1.0-r1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-4450_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2022-4450] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "The function PEM_read_bio_ex() reads a PEM file from a BIO and parses and\ndecodes the \"name\" (e.g. \"CERTIFICATE\"), any header data and the payload data.\nIf the function succeeds then the \"name_out\", \"header\" and \"data\" arguments are\npopulated with pointers to buffers containing the relevant decoded data. The\ncaller is responsible for freeing those buffers. It is possible to construct a\nPEM file that results in 0 bytes of payload data. In this case PEM_read_bio_ex()\nwill return a failure code but will populate the header argument with a pointer\nto a buffer that has already been freed. If the caller also frees this buffer\nthen a double free will occur. This will most likely lead to a crash. This\ncould be exploited by an attacker who has the ability to supply malicious PEM\nfiles for parsing to achieve a denial of service attack.\n\nThe functions PEM_read_bio() and PEM_read() are simple wrappers around\nPEM_read_bio_ex() and therefore these functions are also directly affected.\n\nThese functions are also called indirectly by a number of other OpenSSL\nfunctions including PEM_X509_INFO_read_bio_ex() and\nSSL_CTX_use_serverinfo_file() which are also vulnerable. Some OpenSSL internal\nuses of these functions are not vulnerable because the caller does not free the\nheader argument if PEM_read_bio_ex() returns a failure code. These locations\ninclude the PEM_read_bio_TYPE() functions as well as the decoders introduced in\nOpenSSL 3.0.\n\nThe OpenSSL asn1parse command line application is also impacted by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0401_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2023-0401] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "A NULL pointer can be dereferenced when signatures are being\nverified on PKCS7 signed or signedAndEnveloped data. In case the hash\nalgorithm used for the signature is known to the OpenSSL library but\nthe implementation of the hash algorithm is not available the digest\ninitialization will fail. There is a missing check for the return\nvalue from the initialization function which later leads to invalid\nusage of the digest API most likely leading to a crash.\n\nThe unavailability of an algorithm can be caused by using FIPS\nenabled configuration of providers or more commonly by not loading\nthe legacy provider.\n\nPKCS7 data is processed by the SMIME library calls and also by the\ntime stamp (TS) library calls. The TLS implementation in OpenSSL does\nnot call these functions however third party applications would be\naffected if they call these functions to verify signatures on untrusted\ndata.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-3712_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2021-3712] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "ASN.1 strings are represented internally within OpenSSL as an ASN1_STRING structure which contains a buffer holding the string data and a field holding the buffer length. This contrasts with normal C strings which are repesented as a buffer for the string data which is terminated with a NUL (0) byte. Although not a strict requirement, ASN.1 strings that are parsed using OpenSSL's own \"d2i\" functions (and other similar parsing functions) as well as any string whose value has been set with the ASN1_STRING_set() function will additionally NUL terminate the byte array in the ASN1_STRING structure. However, it is possible for applications to directly construct valid ASN1_STRING structures which do not NUL terminate the byte array by directly setting the \"data\" and \"length\" fields in the ASN1_STRING array. This can also happen by using the ASN1_STRING_set0() function. Numerous OpenSSL functions that print ASN.1 data have been found to assume that the ASN1_STRING byte array will be NUL terminated, even though this is not guaranteed for strings that have been directly constructed. Where an application requests an ASN.1 structure to be printed, and where that ASN.1 structure contains ASN1_STRINGs that have been directly constructed by the application without NUL terminating the \"data\" field, then a read buffer overrun can occur. The same thing can also occur during name constraints processing of certificates (for example if a certificate has been directly constructed by the application instead of loading it via the OpenSSL parsing functions, and the certificate contains non NUL terminated ASN1_STRING structures). It can also occur in the X509_get1_email(), X509_REQ_get1_email() and X509_get1_ocsp() functions. If a malicious actor can cause an application to directly construct an ASN1_STRING and then process it through one of the affected OpenSSL functions then this issue could be hit. This might result in a crash (causing a Denial of Service attack). It could also result in the disclosure of private memory content...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.4      | Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.1.1l-r0]   |"
              },
              "properties": {
                "security-severity": "7.4"
              }
            },
            {
              "id": "CVE-2018-25032_3.9:zlib_1.2.11-r1",
              "shortDescription": {
                "text": "[CVE-2018-25032] 3.9:zlib 1.2.11-r1"
              },
              "help": {
                "text": "zlib before 1.2.12 allows memory corruption when deflating (i.e., when compressing) if the input has many distant matches.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.2.11-r4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-4450_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2022-4450] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "The function PEM_read_bio_ex() reads a PEM file from a BIO and parses and\ndecodes the \"name\" (e.g. \"CERTIFICATE\"), any header data and the payload data.\nIf the function succeeds then the \"name_out\", \"header\" and \"data\" arguments are\npopulated with pointers to buffers containing the relevant decoded data. The\ncaller is responsible for freeing those buffers. It is possible to construct a\nPEM file that results in 0 bytes of payload data. In this case PEM_read_bio_ex()\nwill return a failure code but will populate the header argument with a pointer\nto a buffer that has already been freed. If the caller also frees this buffer\nthen a double free will occur. This will most likely lead to a crash. This\ncould be exploited by an attacker who has the ability to supply malicious PEM\nfiles for parsing to achieve a denial of service attack.\n\nThe functions PEM_read_bio() and PEM_read() are simple wrappers around\nPEM_read_bio_ex() and therefore these functions are also directly affected.\n\nThese functions are also called indirectly by a number of other OpenSSL\nfunctions including PEM_X509_INFO_read_bio_ex() and\nSSL_CTX_use_serverinfo_file() which are also vulnerable. Some OpenSSL internal\nuses of these functions are not vulnerable because the caller does not free the\nheader argument if PEM_read_bio_ex() returns a failure code. These locations\ninclude the PEM_read_bio_TYPE() functions as well as the decoders introduced in\nOpenSSL 3.0.\n\nThe OpenSSL asn1parse command line application is also impacted by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-3712_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2021-3712] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "ASN.1 strings are represented internally within OpenSSL as an ASN1_STRING structure which contains a buffer holding the string data and a field holding the buffer length. This contrasts with normal C strings which are repesented as a buffer for the string data which is terminated with a NUL (0) byte. Although not a strict requirement, ASN.1 strings that are parsed using OpenSSL's own \"d2i\" functions (and other similar parsing functions) as well as any string whose value has been set with the ASN1_STRING_set() function will additionally NUL terminate the byte array in the ASN1_STRING structure. However, it is possible for applications to directly construct valid ASN1_STRING structures which do not NUL terminate the byte array by directly setting the \"data\" and \"length\" fields in the ASN1_STRING array. This can also happen by using the ASN1_STRING_set0() function. Numerous OpenSSL functions that print ASN.1 data have been found to assume that the ASN1_STRING byte array will be NUL terminated, even though this is not guaranteed for strings that have been directly constructed. Where an application requests an ASN.1 structure to be printed, and where that ASN.1 structure contains ASN1_STRINGs that have been directly constructed by the application without NUL terminating the \"data\" field, then a read buffer overrun can occur. The same thing can also occur during name constraints processing of certificates (for example if a certificate has been directly constructed by the application instead of loading it via the OpenSSL parsing functions, and the certificate contains non NUL terminated ASN1_STRING structures). It can also occur in the X509_get1_email(), X509_REQ_get1_email() and X509_get1_ocsp() functions. If a malicious actor can cause an application to directly construct an ASN1_STRING and then process it through one of the affected OpenSSL functions then this issue could be hit. This might result in a crash (causing a Denial of Service attack). It could also result in the disclosure of private memory content...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.4      | Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.1.1l-r0]   |"
              },
              "properties": {
                "security-severity": "7.4"
              }
            },
            {
              "id": "CVE-2022-3602_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2022-3602] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "A buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed the malicious certificate or for the application to continue certificate verification despite failure to construct a path to a trusted issuer. An attacker can craft a malicious email address to overflow four attacker-controlled bytes on the stack. This buffer overflow could result in a crash (causing a denial of service) or potentially remote code execution. Many platforms implement stack overflow protections which would mitigate against the risk of remote code execution. The risk may be further mitigated based on stack layout for any given platform/compiler. Pre-announcements of CVE-2022-3602 described this issue as CRITICAL. Further analysis based on some of the mitigating factors described above have led this to be downgraded to HIGH. Users are still encouraged to upgrade to a new version as soon as possible. In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects. Fixed in OpenSSL 3.0.7 (Affected 3.0.0,3.0.1,3.0.2,3.0.3,3.0.4,3.0.5,3.0.6).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.0.7-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0401_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2023-0401] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "A NULL pointer can be dereferenced when signatures are being\nverified on PKCS7 signed or signedAndEnveloped data. In case the hash\nalgorithm used for the signature is known to the OpenSSL library but\nthe implementation of the hash algorithm is not available the digest\ninitialization will fail. There is a missing check for the return\nvalue from the initialization function which later leads to invalid\nusage of the digest API most likely leading to a crash.\n\nThe unavailability of an algorithm can be caused by using FIPS\nenabled configuration of providers or more commonly by not loading\nthe legacy provider.\n\nPKCS7 data is processed by the SMIME library calls and also by the\ntime stamp (TS) library calls. The TLS implementation in OpenSSL does\nnot call these functions however third party applications would be\naffected if they call these functions to verify signatures on untrusted\ndata.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0464_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2023-0464] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "A security vulnerability has been identified in all supported versions\n\nof OpenSSL related to the verification of X.509 certificate chains\nthat include policy constraints.  Attackers may be able to exploit this\nvulnerability by creating a malicious certificate chain that triggers\nexponential use of computational resources, leading to a denial-of-service\n(DoS) attack on affected systems.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.1.0-r1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-3786_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2022-3786] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "A buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed a malicious certificate or for an application to continue certificate verification despite failure to construct a path to a trusted issuer. An attacker can craft a malicious email address in a certificate to overflow an arbitrary number of bytes containing the `.' character (decimal 46) on the stack. This buffer overflow could result in a crash (causing a denial of service). In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.0.7-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-3786_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2022-3786] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "A buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed a malicious certificate or for an application to continue certificate verification despite failure to construct a path to a trusted issuer. An attacker can craft a malicious email address in a certificate to overflow an arbitrary number of bytes containing the `.' character (decimal 46) on the stack. This buffer overflow could result in a crash (causing a denial of service). In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.0.7-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0215_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2023-0215] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "The public API function BIO_new_NDEF is a helper function used for streaming\nASN.1 data via a BIO. It is primarily used internally to OpenSSL to support the\nSMIME, CMS and PKCS7 streaming capabilities, but may also be called directly by\nend user applications.\n\nThe function receives a BIO from the caller, prepends a new BIO_f_asn1 filter\nBIO onto the front of it to form a BIO chain, and then returns the new head of\nthe BIO chain to the caller. Under certain conditions, for example if a CMS\nrecipient public key is invalid, the new filter BIO is freed and the function\nreturns a NULL result indicating a failure. However, in this case, the BIO chain\nis not properly cleaned up and the BIO passed by the caller still retains\ninternal pointers to the previously freed filter BIO. If the caller then goes on\nto call BIO_pop() on the BIO then a use-after-free will occur. This will most\nlikely result in a crash.\n\n\n\nThis scenario occurs directly in the internal function B64_write_ASN1() which\nmay cause BIO_new_NDEF() to be called and will subsequently call BIO_pop() on\nthe BIO. This internal function is in turn called by the public API functions\nPEM_write_bio_ASN1_stream, PEM_write_bio_CMS_stream, PEM_write_bio_PKCS7_stream,\nSMIME_write_ASN1, SMIME_write_CMS and SMIME_write_PKCS7.\n\nOther public API functions that may be impacted by this include\ni2d_ASN1_bio_stream, BIO_new_CMS, BIO_new_PKCS7, i2d_CMS_bio_stream and\ni2d_PKCS7_bio_stream.\n\nThe OpenSSL cms and smime command line applications are similarly affected.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0216_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2023-0216] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "An invalid pointer dereference on read can be triggered when an\napplication tries to load malformed PKCS7 data with the\nd2i_PKCS7(), d2i_PKCS7_bio() or d2i_PKCS7_fp() functions.\n\nThe result of the dereference is an application crash which could\nlead to a denial of service attack. The TLS implementation in OpenSSL\ndoes not call this function however third party applications might\ncall these functions on untrusted data.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-3602_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2022-3602] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "A buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed the malicious certificate or for the application to continue certificate verification despite failure to construct a path to a trusted issuer. An attacker can craft a malicious email address to overflow four attacker-controlled bytes on the stack. This buffer overflow could result in a crash (causing a denial of service) or potentially remote code execution. Many platforms implement stack overflow protections which would mitigate against the risk of remote code execution. The risk may be further mitigated based on stack layout for any given platform/compiler. Pre-announcements of CVE-2022-3602 described this issue as CRITICAL. Further analysis based on some of the mitigating factors described above have led this to be downgraded to HIGH. Users are still encouraged to upgrade to a new version as soon as possible. In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects. Fixed in OpenSSL 3.0.7 (Affected 3.0.0,3.0.1,3.0.2,3.0.3,3.0.4,3.0.5,3.0.6).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.0.7-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0215_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2023-0215] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "The public API function BIO_new_NDEF is a helper function used for streaming\nASN.1 data via a BIO. It is primarily used internally to OpenSSL to support the\nSMIME, CMS and PKCS7 streaming capabilities, but may also be called directly by\nend user applications.\n\nThe function receives a BIO from the caller, prepends a new BIO_f_asn1 filter\nBIO onto the front of it to form a BIO chain, and then returns the new head of\nthe BIO chain to the caller. Under certain conditions, for example if a CMS\nrecipient public key is invalid, the new filter BIO is freed and the function\nreturns a NULL result indicating a failure. However, in this case, the BIO chain\nis not properly cleaned up and the BIO passed by the caller still retains\ninternal pointers to the previously freed filter BIO. If the caller then goes on\nto call BIO_pop() on the BIO then a use-after-free will occur. This will most\nlikely result in a crash.\n\n\n\nThis scenario occurs directly in the internal function B64_write_ASN1() which\nmay cause BIO_new_NDEF() to be called and will subsequently call BIO_pop() on\nthe BIO. This internal function is in turn called by the public API functions\nPEM_write_bio_ASN1_stream, PEM_write_bio_CMS_stream, PEM_write_bio_PKCS7_stream,\nSMIME_write_ASN1, SMIME_write_CMS and SMIME_write_PKCS7.\n\nOther public API functions that may be impacted by this include\ni2d_ASN1_bio_stream, BIO_new_CMS, BIO_new_PKCS7, i2d_CMS_bio_stream and\ni2d_PKCS7_bio_stream.\n\nThe OpenSSL cms and smime command line applications are similarly affected.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0216_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2023-0216] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "An invalid pointer dereference on read can be triggered when an\napplication tries to load malformed PKCS7 data with the\nd2i_PKCS7(), d2i_PKCS7_bio() or d2i_PKCS7_fp() functions.\n\nThe result of the dereference is an application crash which could\nlead to a denial of service attack. The TLS implementation in OpenSSL\ndoes not call this function however third party applications might\ncall these functions on untrusted data.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-21222_css-what_2.1.3",
              "shortDescription": {
                "text": "[CVE-2022-21222] css-what 2.1.3"
              },
              "help": {
                "text": "The package css-what before 2.1.3 are vulnerable to Regular Expression Denial of Service (ReDoS) due to the usage of insecure regular expression in the re_attr variable of index.js. The exploitation of this vulnerability could be triggered via the parse function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Undetermined       | `sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `       | [5.0.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-28391_3.9:busybox_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2022-28391] 3.9:busybox 1.29.3-r10"
              },
              "help": {
                "text": "BusyBox through 1.35.0 allows remote attackers to execute arbitrary code if netstat is used to print a DNS PTR record's value to a VT compatible terminal. Alternatively, the attacker could choose to change the terminal's colors.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.8      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.35.0-r7]   |"
              },
              "properties": {
                "security-severity": "8.8"
              }
            },
            {
              "id": "CVE-2020-8116_dot-prop_4.2.0",
              "shortDescription": {
                "text": "[CVE-2020-8116] dot-prop 4.2.0"
              },
              "help": {
                "text": "Prototype pollution vulnerability in dot-prop npm package versions before 4.2.1 and versions 5.x before 5.1.1 allows an attacker to add arbitrary properties to JavaScript language constructs such as objects.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.3      | Not Covered       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [4.2.1], [5.1.1]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2021-28831_3.9:busybox_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2021-28831] 3.9:busybox 1.29.3-r10"
              },
              "help": {
                "text": "decompress_gunzip.c in BusyBox through 1.32.1 mishandles the error bit on the huft_build result pointer, with a resultant invalid free or segmentation fault, via malformed gzip data.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.33.0-r5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2019-16776_npm_6.4.1",
              "shortDescription": {
                "text": "[CVE-2019-16776] npm 6.4.1"
              },
              "help": {
                "text": "Versions of the npm CLI prior to 6.13.3 are vulnerable to an Arbitrary File Write. It fails to prevent access to folders outside of the intended node_modules folder through the bin field. A properly constructed entry in the package.json bin field would allow a package publisher to modify and/or gain access to arbitrary files on a user's system when the package is installed. This behavior is still possible through install scripts. This vulnerability bypasses a user using the --ignore-scripts install option.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Covered       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [6.13.3]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2020-7754_npm-user-validate_1.0.0",
              "shortDescription": {
                "text": "[CVE-2020-7754] npm-user-validate 1.0.0"
              },
              "help": {
                "text": "This affects the package npm-user-validate before 1.0.1. The regex that validates user emails took exponentially longer to process long input strings beginning with @ characters.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [1.0.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-42382_3.9:busybox_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2021-42382] 3.9:busybox 1.29.3-r10"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the getvar_s function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-23400_nodemailer_6.3.0",
              "shortDescription": {
                "text": "[CVE-2021-23400] nodemailer 6.3.0"
              },
              "help": {
                "text": "The package nodemailer before 6.6.1 are vulnerable to HTTP Header Injection if unsanitized user input that may contain newlines and carriage returns is passed into an address object.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.8      | Not Covered       | `sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `       | [6.6.1]   |"
              },
              "properties": {
                "security-severity": "8.8"
              }
            },
            {
              "id": "CVE-2021-42381_3.9:busybox_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2021-42381] 3.9:busybox 1.29.3-r10"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the hash_init function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2022-0778_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2022-0778] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "The BN_mod_sqrt() function, which computes a modular square root, contains a bug that can cause it to loop forever for non-prime moduli. Internally this function is used when parsing certificates that contain elliptic curve public keys in compressed form or explicit elliptic curve parameters with a base point encoded in compressed form. It is possible to trigger the infinite loop by crafting a certificate that has invalid explicit curve parameters. Since certificate parsing happens prior to verification of the certificate signature, any process that parses an externally supplied certificate may thus be subject to a denial of service attack. The infinite loop can also be reached when parsing crafted private keys as they can contain explicit elliptic curve parameters. Thus vulnerable situations include: - TLS clients consuming server certificates - TLS servers consuming client certificates - Hosting providers taking certificates or private keys from customers - Certificate authorities parsing certification requests from subscribers - Anything else which parses ASN.1 elliptic curve parameters Also any other applications that use the BN_mod_sqrt() where the attacker can control the parameter values are vulnerable to this DoS issue. In the OpenSSL 1.0.2 version the public key is not parsed during initial parsing of the certificate which makes it slightly harder to trigger the infinite loop. However any operation which requires the public key from the certificate will trigger the infinite loop. In particular the attacker can use a self-signed certificate to trigger the loop during verification of the certificate signature. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0. It was addressed in the releases of 1.1.1n and 3.0.2 on the 15th March 2022. Fixed in OpenSSL 3.0.2 (Affected 3.0.0,3.0.1). Fixed in OpenSSL 1.1.1n (Affected 1.1.1-1.1.1m). Fixed in OpenSSL 1.0.2zd (Affected 1.0.2-1.0.2zc).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.0.2-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-42385_3.9:ssl_client_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2021-42385] 3.9:ssl_client 1.29.3-r10"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the evaluate function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-32803_tar_4.4.6",
              "shortDescription": {
                "text": "[CVE-2021-32803] tar 4.4.6"
              },
              "help": {
                "text": "The npm package \"tar\" (aka node-tar) before versions 6.1.2, 5.0.7, 4.4.15, and 3.2.3 has an arbitrary File Creation/Overwrite vulnerability via insufficient symlink protection. `node-tar` aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary `stat` calls to determine whether a given path is a directory, paths are cached when directories are created. This logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory. This order of operations resulted in the directory being created and added to the `node-tar` directory cache. When a directory is present in the directory cache, subsequent calls to mkdir for that directory are skipped. However, this is also where `node-tar` checks for symlinks occur. By first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass `node-tar` symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite. This issue was addressed in releases 3.2.3, 4.4.15, 5.0.7 and 6.1.2.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Covered       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [3.2.3], [4.4.15], [5.0.7], [6.1.2]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2020-1967_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2020-1967] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "Server or client applications that call the SSL_check_chain() function during or after a TLS 1.3 handshake may crash due to a NULL pointer dereference as a result of incorrect handling of the \"signature_algorithms_cert\" TLS extension. The crash occurs if an invalid or unrecognised signature algorithm is received from the peer. This could be exploited by a malicious peer in a Denial of Service attack. OpenSSL version 1.1.1d, 1.1.1e, and 1.1.1f are affected by this issue. This issue did not affect OpenSSL versions prior to 1.1.1d. Fixed in OpenSSL 1.1.1g (Affected 1.1.1d-1.1.1f).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.1.1g-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2019-5448_yarn_1.15.2",
              "shortDescription": {
                "text": "[CVE-2019-5448] yarn 1.15.2"
              },
              "help": {
                "text": "Yarn before 1.17.3 is vulnerable to Missing Encryption of Sensitive Data due to HTTP URLs in lockfile causing unencrypted authentication data to be sent over the network.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Covered       | `sha256__e29ab506780450f339cd5573955081fe622c4c6e1774f896bfb4c231669e41d2.tar `       | [1.17.3]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2021-3803_nth-check_1.0.2",
              "shortDescription": {
                "text": "[CVE-2021-3803] nth-check 1.0.2"
              },
              "help": {
                "text": "nth-check is vulnerable to Inefficient Regular Expression Complexity",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `       | [2.0.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-42380_3.9:busybox_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2021-42380] 3.9:busybox 1.29.3-r10"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the clrvar function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-37713_tar_4.4.6",
              "shortDescription": {
                "text": "[CVE-2021-37713] tar 4.4.6"
              },
              "help": {
                "text": "The npm package \"tar\" (aka node-tar) before versions 4.4.18, 5.0.10, and 6.1.9 has an arbitrary file creation/overwrite and arbitrary code execution vulnerability. node-tar aims to guarantee that any file whose location would be outside of the extraction target directory is not extracted. This is, in part, accomplished by sanitizing absolute paths of entries within the archive, skipping archive entries that contain `..` path portions, and resolving the sanitized paths against the extraction target directory. This logic was insufficient on Windows systems when extracting tar files that contained a path that was not an absolute path, but specified a drive letter different from the extraction target, such as `C:some\\path`. If the drive letter does not match the extraction target, for example `D:\\extraction\\dir`, then the result of `path.resolve(extractionDirectory, entryPath)` would resolve against the current working directory on the `C:` drive, rather than the extraction target directory. Additionally, a `..` portion of the path could occur immediately after the drive letter, such as `C:../foo`, and was not properly sanitized by the logic that checked for `..` within the normalized and split portions of the path. This only affects users of `node-tar` on Windows systems. These issues were addressed in releases 4.4.18, 5.0.10 and 6.1.9. The v3 branch of node-tar has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of node-tar. There is no reasonable way to work around this issue without performing the same path normalization procedures that node-tar now does. Users are encouraged to upgrade to the latest patched versions of node-tar, rather than attempt to sanitize paths themselves.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.6      | Not Covered       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [4.4.18], [5.0.10], [6.1.9]   |"
              },
              "properties": {
                "security-severity": "8.6"
              }
            },
            {
              "id": "CVE-2019-13173_fstream_1.0.11",
              "shortDescription": {
                "text": "[CVE-2019-13173] fstream 1.0.11"
              },
              "help": {
                "text": "fstream before 1.0.12 is vulnerable to Arbitrary File Overwrite. Extracting tarballs containing a hardlink to a file that already exists in the system, and a file that matches the hardlink, will overwrite the system's file with the contents of the extracted file. The fstream.DirWriter() function is vulnerable.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [1.0.12]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-23400_nodemailer_6.1.1",
              "shortDescription": {
                "text": "[CVE-2021-23400] nodemailer 6.1.1"
              },
              "help": {
                "text": "The package nodemailer before 6.6.1 are vulnerable to HTTP Header Injection if unsanitized user input that may contain newlines and carriage returns is passed into an address object.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.8      | Not Covered       | `sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `       | [6.6.1]   |"
              },
              "properties": {
                "security-severity": "8.8"
              }
            },
            {
              "id": "CVE-2021-42382_3.9:ssl_client_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2021-42382] 3.9:ssl_client 1.29.3-r10"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the getvar_s function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2022-30065_3.9:ssl_client_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2022-30065] 3.9:ssl_client 1.29.3-r10"
              },
              "help": {
                "text": "A use-after-free in Busybox 1.35-x's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the copyvar function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.35.0-r17]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2021-27290_ssri_5.3.0",
              "shortDescription": {
                "text": "[CVE-2021-27290] ssri 5.3.0"
              },
              "help": {
                "text": "ssri 5.2.2-8.0.0, fixed in 8.0.1, processes SRIs using a regular expression which is vulnerable to a denial of service. Malicious SRIs could take an extremely long time to process, leading to denial of service. This issue only affects consumers using the strict option.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [6.0.2], [7.1.1], [8.0.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2024-37890_ws_3.3.3",
              "shortDescription": {
                "text": "[CVE-2024-37890] ws 3.3.3"
              },
              "help": {
                "text": "ws is an open source WebSocket client and server for Node.js. A request with a number of headers exceeding theserver.maxHeadersCount threshold could be used to crash a ws server. The vulnerability was fixed in ws@8.17.1 (e55e510) and backported to ws@7.5.10 (22c2876), ws@6.2.3 (eeb76d3), and ws@5.2.4 (4abd8f6). In vulnerable versions of ws, the issue can be mitigated in the following ways: 1. Reduce the maximum allowed length of the request headers using the --max-http-header-size=size and/or the maxHeaderSize options so that no more headers than the server.maxHeadersCount limit can be sent. 2. Set server.maxHeadersCount to 0 so that no limit is applied.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `       | [5.2.4], [6.2.3], [7.5.10], [8.17.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-30139_3.9:apk-tools_2.10.3-r1",
              "shortDescription": {
                "text": "[CVE-2021-30139] 3.9:apk-tools 2.10.3-r1"
              },
              "help": {
                "text": "In Alpine Linux apk-tools before 2.12.5, the tarball parser allows a buffer overflow and crash.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [2.12.5-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2020-1967_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2020-1967] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "Server or client applications that call the SSL_check_chain() function during or after a TLS 1.3 handshake may crash due to a NULL pointer dereference as a result of incorrect handling of the \"signature_algorithms_cert\" TLS extension. The crash occurs if an invalid or unrecognised signature algorithm is received from the peer. This could be exploited by a malicious peer in a Denial of Service attack. OpenSSL version 1.1.1d, 1.1.1e, and 1.1.1f are affected by this issue. This issue did not affect OpenSSL versions prior to 1.1.1d. Fixed in OpenSSL 1.1.1g (Affected 1.1.1d-1.1.1f).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.1.1g-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2018-20834_tar_2.2.1",
              "shortDescription": {
                "text": "[CVE-2018-20834] tar 2.2.1"
              },
              "help": {
                "text": "A vulnerability was found in node-tar before version 4.4.2 (excluding version 2.2.2). An Arbitrary File Overwrite issue exists when extracting a tarball containing a hardlink to a file that already exists on the system, in conjunction with a later plain file with the same name as the hardlink. This plain file content replaces the existing file content. A patch has been applied to node-tar v2.2.2).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [2.2.2], [4.4.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-28391_3.9:ssl_client_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2022-28391] 3.9:ssl_client 1.29.3-r10"
              },
              "help": {
                "text": "BusyBox through 1.35.0 allows remote attackers to execute arbitrary code if netstat is used to print a DNS PTR record's value to a VT compatible terminal. Alternatively, the attacker could choose to change the terminal's colors.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.8      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.35.0-r7]   |"
              },
              "properties": {
                "security-severity": "8.8"
              }
            },
            {
              "id": "CVE-2022-30065_3.9:busybox_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2022-30065] 3.9:busybox 1.29.3-r10"
              },
              "help": {
                "text": "A use-after-free in Busybox 1.35-x's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the copyvar function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.35.0-r17]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2020-8131_yarn_1.15.2",
              "shortDescription": {
                "text": "[CVE-2020-8131] yarn 1.15.2"
              },
              "help": {
                "text": "Arbitrary filesystem write vulnerability in Yarn before 1.22.0 allows attackers to write to any path on the filesystem and potentially lead to arbitrary code execution by forcing the user to install a malicious package.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__e29ab506780450f339cd5573955081fe622c4c6e1774f896bfb4c231669e41d2.tar `       | [1.22.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-0778_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2022-0778] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "The BN_mod_sqrt() function, which computes a modular square root, contains a bug that can cause it to loop forever for non-prime moduli. Internally this function is used when parsing certificates that contain elliptic curve public keys in compressed form or explicit elliptic curve parameters with a base point encoded in compressed form. It is possible to trigger the infinite loop by crafting a certificate that has invalid explicit curve parameters. Since certificate parsing happens prior to verification of the certificate signature, any process that parses an externally supplied certificate may thus be subject to a denial of service attack. The infinite loop can also be reached when parsing crafted private keys as they can contain explicit elliptic curve parameters. Thus vulnerable situations include: - TLS clients consuming server certificates - TLS servers consuming client certificates - Hosting providers taking certificates or private keys from customers - Certificate authorities parsing certification requests from subscribers - Anything else which parses ASN.1 elliptic curve parameters Also any other applications that use the BN_mod_sqrt() where the attacker can control the parameter values are vulnerable to this DoS issue. In the OpenSSL 1.0.2 version the public key is not parsed during initial parsing of the certificate which makes it slightly harder to trigger the infinite loop. However any operation which requires the public key from the certificate will trigger the infinite loop. In particular the attacker can use a self-signed certificate to trigger the loop during verification of the certificate signature. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0. It was addressed in the releases of 1.1.1n and 3.0.2 on the 15th March 2022. Fixed in OpenSSL 3.0.2 (Affected 3.0.0,3.0.1). Fixed in OpenSSL 1.1.1n (Affected 1.1.1-1.1.1m). Fixed in OpenSSL 1.0.2zd (Affected 1.0.2-1.0.2zc).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.0.2-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-42384_3.9:busybox_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2021-42384] 3.9:busybox 1.29.3-r10"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the handle_special function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-42386_3.9:busybox_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2021-42386] 3.9:busybox 1.29.3-r10"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the nvalloc function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-28831_3.9:ssl_client_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2021-28831] 3.9:ssl_client 1.29.3-r10"
              },
              "help": {
                "text": "decompress_gunzip.c in BusyBox through 1.32.1 mishandles the error bit on the huft_build result pointer, with a resultant invalid free or segmentation fault, via malformed gzip data.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.33.0-r5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2020-28469_glob-parent_3.1.0",
              "shortDescription": {
                "text": "[CVE-2020-28469] glob-parent 3.1.0"
              },
              "help": {
                "text": "This affects the package glob-parent before 5.1.2. The enclosure regex used to check for strings ending in enclosure containing path separator.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `       | [5.1.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-42380_3.9:ssl_client_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2021-42380] 3.9:ssl_client 1.29.3-r10"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the clrvar function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-42381_3.9:ssl_client_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2021-42381] 3.9:ssl_client 1.29.3-r10"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the hash_init function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-23840_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2021-23840] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "Calls to EVP_CipherUpdate, EVP_EncryptUpdate and EVP_DecryptUpdate may overflow the output length argument in some cases where the input length is close to the maximum permissable length for an integer on the platform. In such cases the return value from the function call will be 1 (indicating success), but the output length value will be negative. This could cause applications to behave incorrectly or crash. OpenSSL versions 1.1.1i and below are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1j. OpenSSL versions 1.0.2x and below are affected by this issue. However OpenSSL 1.0.2 is out of support and no longer receiving public updates. Premium support customers of OpenSSL 1.0.2 should upgrade to 1.0.2y. Other users should upgrade to 1.1.1j. Fixed in OpenSSL 1.1.1j (Affected 1.1.1-1.1.1i). Fixed in OpenSSL 1.0.2y (Affected 1.0.2-1.0.2x).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.1.1j-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-37701_tar_4.4.6",
              "shortDescription": {
                "text": "[CVE-2021-37701] tar 4.4.6"
              },
              "help": {
                "text": "The npm package \"tar\" (aka node-tar) before versions 4.4.16, 5.0.8, and 6.1.7 has an arbitrary file creation/overwrite and arbitrary code execution vulnerability. node-tar aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created. This logic was insufficient when extracting tar files that contained both a directory and a symlink with the same name as the directory, where the symlink and directory names in the archive entry used backslashes as a path separator on posix systems. The cache checking logic used both `\\` and `/` characters as path separators, however `\\` is a valid filename character on posix systems. By first creating a directory, and then replacing that directory with a symlink, it was thus possible to bypass node-tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite. Additionally, a similar confusion could arise on case-insensitive filesystems. If a tar archive contained a directory at `FOO`, followed by a symbolic link named `foo`, then on case-insensitive file systems, the creation of the symbolic link would remove the directory from the filesystem, but _not_ from the internal directory cache, as it would not be treated as a cache hit. A subsequent file entry within the `FOO` directory would then be placed in the target of the symbolic link, thinking that the directory had already been created. These issues were addressed in releases 4.4.16, 5.0.8 and 6.1.7. The v3 branch of node-tar has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of node...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.6      | Not Covered       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [4.4.16], [5.0.8], [6.1.7]   |"
              },
              "properties": {
                "security-severity": "8.6"
              }
            },
            {
              "id": "CVE-2021-42383_3.9:busybox_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2021-42383] 3.9:busybox 1.29.3-r10"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the evaluate function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-42383_3.9:ssl_client_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2021-42383] 3.9:ssl_client 1.29.3-r10"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the evaluate function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-42384_3.9:ssl_client_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2021-42384] 3.9:ssl_client 1.29.3-r10"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the handle_special function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-42385_3.9:busybox_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2021-42385] 3.9:busybox 1.29.3-r10"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the evaluate function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-37713_tar_2.2.1",
              "shortDescription": {
                "text": "[CVE-2021-37713] tar 2.2.1"
              },
              "help": {
                "text": "The npm package \"tar\" (aka node-tar) before versions 4.4.18, 5.0.10, and 6.1.9 has an arbitrary file creation/overwrite and arbitrary code execution vulnerability. node-tar aims to guarantee that any file whose location would be outside of the extraction target directory is not extracted. This is, in part, accomplished by sanitizing absolute paths of entries within the archive, skipping archive entries that contain `..` path portions, and resolving the sanitized paths against the extraction target directory. This logic was insufficient on Windows systems when extracting tar files that contained a path that was not an absolute path, but specified a drive letter different from the extraction target, such as `C:some\\path`. If the drive letter does not match the extraction target, for example `D:\\extraction\\dir`, then the result of `path.resolve(extractionDirectory, entryPath)` would resolve against the current working directory on the `C:` drive, rather than the extraction target directory. Additionally, a `..` portion of the path could occur immediately after the drive letter, such as `C:../foo`, and was not properly sanitized by the logic that checked for `..` within the normalized and split portions of the path. This only affects users of `node-tar` on Windows systems. These issues were addressed in releases 4.4.18, 5.0.10 and 6.1.9. The v3 branch of node-tar has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of node-tar. There is no reasonable way to work around this issue without performing the same path normalization procedures that node-tar now does. Users are encouraged to upgrade to the latest patched versions of node-tar, rather than attempt to sanitize paths themselves.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.6      | Not Covered       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [4.4.18], [5.0.10], [6.1.9]   |"
              },
              "properties": {
                "security-severity": "8.6"
              }
            },
            {
              "id": "CVE-2021-42386_3.9:ssl_client_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2021-42386] 3.9:ssl_client 1.29.3-r10"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the nvalloc function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-42379_3.9:ssl_client_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2021-42379] 3.9:ssl_client 1.29.3-r10"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the next_input_file function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-27290_ssri_6.0.0",
              "shortDescription": {
                "text": "[CVE-2021-27290] ssri 6.0.0"
              },
              "help": {
                "text": "ssri 5.2.2-8.0.0, fixed in 8.0.1, processes SRIs using a regular expression which is vulnerable to a denial of service. Malicious SRIs could take an extremely long time to process, leading to denial of service. This issue only affects consumers using the strict option.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [6.0.2], [7.1.1], [8.0.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-23840_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2021-23840] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "Calls to EVP_CipherUpdate, EVP_EncryptUpdate and EVP_DecryptUpdate may overflow the output length argument in some cases where the input length is close to the maximum permissable length for an integer on the platform. In such cases the return value from the function call will be 1 (indicating success), but the output length value will be negative. This could cause applications to behave incorrectly or crash. OpenSSL versions 1.1.1i and below are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1j. OpenSSL versions 1.0.2x and below are affected by this issue. However OpenSSL 1.0.2 is out of support and no longer receiving public updates. Premium support customers of OpenSSL 1.0.2 should upgrade to 1.0.2y. Other users should upgrade to 1.1.1j. Fixed in OpenSSL 1.1.1j (Affected 1.1.1-1.1.1i). Fixed in OpenSSL 1.0.2y (Affected 1.0.2-1.0.2x).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.1.1j-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2024-37890_ws_6.2.1",
              "shortDescription": {
                "text": "[CVE-2024-37890] ws 6.2.1"
              },
              "help": {
                "text": "ws is an open source WebSocket client and server for Node.js. A request with a number of headers exceeding theserver.maxHeadersCount threshold could be used to crash a ws server. The vulnerability was fixed in ws@8.17.1 (e55e510) and backported to ws@7.5.10 (22c2876), ws@6.2.3 (eeb76d3), and ws@5.2.4 (4abd8f6). In vulnerable versions of ws, the issue can be mitigated in the following ways: 1. Reduce the maximum allowed length of the request headers using the --max-http-header-size=size and/or the maxHeaderSize options so that no more headers than the server.maxHeadersCount limit can be sent. 2. Set server.maxHeadersCount to 0 so that no limit is applied.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `       | [5.2.4], [6.2.3], [7.5.10], [8.17.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-3450_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2021-3450] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "The X509_V_FLAG_X509_STRICT flag enables additional security checks of the certificates present in a certificate chain. It is not set by default. Starting from OpenSSL version 1.1.1h a check to disallow certificates in the chain that have explicitly encoded elliptic curve parameters was added as an additional strict check. An error in the implementation of this check meant that the result of a previous check to confirm that certificates in the chain are valid CA certificates was overwritten. This effectively bypasses the check that non-CA certificates must not be able to issue other certificates. If a \"purpose\" has been configured then there is a subsequent opportunity for checks that the certificate is a valid CA. All of the named \"purpose\" values implemented in libcrypto perform this check. Therefore, where a purpose is set the certificate chain will still be rejected even when the strict flag has been used. A purpose is set by default in libssl client and server certificate verification routines, but it can be overridden or removed by an application. In order to be affected, an application must explicitly set the X509_V_FLAG_X509_STRICT verification flag and either not set a purpose for the certificate verification or, in the case of TLS client or server applications, override the default purpose. OpenSSL versions 1.1.1h and newer are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1k. OpenSSL 1.0.2 is not impacted by this issue. Fixed in OpenSSL 1.1.1k (Affected 1.1.1h-1.1.1j).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.4      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.1.1k-r0]   |"
              },
              "properties": {
                "security-severity": "7.4"
              }
            },
            {
              "id": "CVE-2021-42378_3.9:ssl_client_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2021-42378] 3.9:ssl_client 1.29.3-r10"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the getvar_i function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-42378_3.9:busybox_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2021-42378] 3.9:busybox 1.29.3-r10"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the getvar_i function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-3450_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2021-3450] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "The X509_V_FLAG_X509_STRICT flag enables additional security checks of the certificates present in a certificate chain. It is not set by default. Starting from OpenSSL version 1.1.1h a check to disallow certificates in the chain that have explicitly encoded elliptic curve parameters was added as an additional strict check. An error in the implementation of this check meant that the result of a previous check to confirm that certificates in the chain are valid CA certificates was overwritten. This effectively bypasses the check that non-CA certificates must not be able to issue other certificates. If a \"purpose\" has been configured then there is a subsequent opportunity for checks that the certificate is a valid CA. All of the named \"purpose\" values implemented in libcrypto perform this check. Therefore, where a purpose is set the certificate chain will still be rejected even when the strict flag has been used. A purpose is set by default in libssl client and server certificate verification routines, but it can be overridden or removed by an application. In order to be affected, an application must explicitly set the X509_V_FLAG_X509_STRICT verification flag and either not set a purpose for the certificate verification or, in the case of TLS client or server applications, override the default purpose. OpenSSL versions 1.1.1h and newer are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1k. OpenSSL 1.0.2 is not impacted by this issue. Fixed in OpenSSL 1.1.1k (Affected 1.1.1h-1.1.1j).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.4      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.1.1k-r0]   |"
              },
              "properties": {
                "security-severity": "7.4"
              }
            },
            {
              "id": "CVE-2021-42379_3.9:busybox_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2021-42379] 3.9:busybox 1.29.3-r10"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the next_input_file function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2019-10773_yarn_1.15.2",
              "shortDescription": {
                "text": "[CVE-2019-10773] yarn 1.15.2"
              },
              "help": {
                "text": "In Yarn before 1.21.1, the package install functionality can be abused to generate arbitrary symlinks on the host filesystem by using specially crafted \"bin\" keys. Existing files could be overwritten depending on the current user permission set.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__e29ab506780450f339cd5573955081fe622c4c6e1774f896bfb4c231669e41d2.tar `       | [1.22.0]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2021-37322_3.9:libstdc++_8.3.0-r0",
              "shortDescription": {
                "text": "[CVE-2021-37322] 3.9:libstdc++ 8.3.0-r0"
              },
              "help": {
                "text": "GCC c++filt v2.26 was discovered to contain a use-after-free vulnerability via the component cplus-dem.c.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2000-1254_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2000-1254] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "crypto/rsa/rsa_gen.c in OpenSSL before 0.9.6 mishandles C bitwise-shift operations that exceed the size of an expression, which makes it easier for remote attackers to defeat cryptographic protection mechanisms by leveraging improper RSA key generation on 64-bit HP-UX platforms.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2000-1254_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2000-1254] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "crypto/rsa/rsa_gen.c in OpenSSL before 0.9.6 mishandles C bitwise-shift operations that exceed the size of an expression, which makes it easier for remote attackers to defeat cryptographic protection mechanisms by leveraging improper RSA key generation on 64-bit HP-UX platforms.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2024-29415_ip_1.1.5",
              "shortDescription": {
                "text": "[CVE-2024-29415] ip 1.1.5"
              },
              "help": {
                "text": "The ip package through 2.0.1 for Node.js might allow SSRF because some IP addresses (such as 127.1, 01200034567, 012.1.2.3, 000:0:0000::01, and ::fFFf:127.0.0.1) are improperly categorized as globally routable via isPublic. NOTE: this issue exists because of an incomplete fix for CVE-2023-42282.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2021-37322_3.9:libgcc_8.3.0-r0",
              "shortDescription": {
                "text": "[CVE-2021-37322] 3.9:libgcc 8.3.0-r0"
              },
              "help": {
                "text": "GCC c++filt v2.26 was discovered to contain a use-after-free vulnerability via the component cplus-dem.c.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2022-24434_dicer_0.2.5",
              "shortDescription": {
                "text": "[CVE-2022-24434] dicer 0.2.5"
              },
              "help": {
                "text": "This affects all versions of package dicer. A malicious attacker can send a modified form to server, and crash the nodejs service. An attacker could sent the payload again and again so that the service continuously crashes.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-2650_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2023-2650] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "Issue summary: Processing some specially crafted ASN.1 object identifiers or\ndata containing them may be very slow.\n\nImpact summary: Applications that use OBJ_obj2txt() directly, or use any of\nthe OpenSSL subsystems OCSP, PKCS7/SMIME, CMS, CMP/CRMF or TS with no message\nsize limit may experience notable to very long delays when processing those\nmessages, which may lead to a Denial of Service.\n\nAn OBJECT IDENTIFIER is composed of a series of numbers - sub-identifiers -\nmost of which have no size limit.  OBJ_obj2txt() may be used to translate\nan ASN.1 OBJECT IDENTIFIER given in DER encoding form (using the OpenSSL\ntype ASN1_OBJECT) to its canonical numeric text form, which are the\nsub-identifiers of the OBJECT IDENTIFIER in decimal form, separated by\nperiods.\n\nWhen one of the sub-identifiers in the OBJECT IDENTIFIER is very large\n(these are sizes that are seen as absurdly large, taking up tens or hundreds\nof KiBs), the translation to a decimal number in text may take a very long\ntime.  The time complexity is O(n^2) with 'n' being the size of the\nsub-identifiers in bytes (*).\n\nWith OpenSSL 3.0, support to fetch cryptographic algorithms using names /\nidentifiers in string form was introduced.  This includes using OBJECT\nIDENTIFIERs in canonical numeric text form as identifiers for fetching\nalgorithms.\n\nSuch OBJECT IDENTIFIERs may be received through the ASN.1 structure\nAlgorithmIdentifier, which is commonly used in multiple protocols to specify\nwhat cryptographic algorithm should be used to sign or verify, encrypt or\ndecrypt, or digest passed data.\n\nApplications that call OBJ_obj2txt() directly with untrusted data are\naffected, with any version of OpenSSL.  If the use is for the mere purpose\nof display, the severity is considered low.\n\nIn OpenSSL 3.0 and newer, this affects the subsystems OCSP, PKCS7/SMIME,\nCMS, CMP/CRMF or TS.  It also impacts anything that processes X.509\ncertificates, including simple things like verifying its signature.\n\nThe impact on TLS is relatively low, because all versions of OpenSSL...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.1.1-r0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-0466_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2023-0466] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "The function X509_VERIFY_PARAM_add0_policy() is documented to\nimplicitly enable the certificate policy check when doing certificate\nverification. However the implementation of the function does not\nenable the check which allows certificates with invalid or incorrect\npolicies to pass the certificate verification.\n\nAs suddenly enabling the policy check could break existing deployments it was\ndecided to keep the existing behavior of the X509_VERIFY_PARAM_add0_policy()\nfunction.\n\nInstead the applications that require OpenSSL to perform certificate\npolicy check need to use X509_VERIFY_PARAM_set1_policies() or explicitly\nenable the policy check by calling X509_VERIFY_PARAM_set_flags() with\nthe X509_V_FLAG_POLICY_CHECK flag argument.\n\nCertificate policy checks are disabled by default in OpenSSL and are not\ncommonly used by applications.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.0.8-r3]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-0465_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2023-0465] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "Applications that use a non-default option when verifying certificates may be\nvulnerable to an attack from a malicious CA to circumvent certain checks.\n\nInvalid certificate policies in leaf certificates are silently ignored by\nOpenSSL and other certificate policy checks are skipped for that certificate.\nA malicious CA could use this to deliberately assert invalid certificate policies\nin order to circumvent policy checking on the certificate altogether.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.1.0-r2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-0465_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2023-0465] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "Applications that use a non-default option when verifying certificates may be\nvulnerable to an attack from a malicious CA to circumvent certain checks.\n\nInvalid certificate policies in leaf certificates are silently ignored by\nOpenSSL and other certificate policy checks are skipped for that certificate.\nA malicious CA could use this to deliberately assert invalid certificate policies\nin order to circumvent policy checking on the certificate altogether.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.1.0-r2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-2097_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2022-2097] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "AES OCB mode for 32-bit x86 platforms using the AES-NI assembly optimised implementation will not encrypt the entirety of the data under some circumstances. This could reveal sixteen bytes of data that was preexisting in the memory that wasn't written. In the special case of \"in place\" encryption, sixteen bytes of the plaintext would be revealed. Since OpenSSL does not support OCB based cipher suites for TLS and DTLS, they are both unaffected. Fixed in OpenSSL 3.0.5 (Affected 3.0.0-3.0.4). Fixed in OpenSSL 1.1.1q (Affected 1.1.1-1.1.1p).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.0.5-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-2097_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2022-2097] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "AES OCB mode for 32-bit x86 platforms using the AES-NI assembly optimised implementation will not encrypt the entirety of the data under some circumstances. This could reveal sixteen bytes of data that was preexisting in the memory that wasn't written. In the special case of \"in place\" encryption, sixteen bytes of the plaintext would be revealed. Since OpenSSL does not support OCB based cipher suites for TLS and DTLS, they are both unaffected. Fixed in OpenSSL 3.0.5 (Affected 3.0.0-3.0.4). Fixed in OpenSSL 1.1.1q (Affected 1.1.1-1.1.1p).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.0.5-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-2650_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2023-2650] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "Issue summary: Processing some specially crafted ASN.1 object identifiers or\ndata containing them may be very slow.\n\nImpact summary: Applications that use OBJ_obj2txt() directly, or use any of\nthe OpenSSL subsystems OCSP, PKCS7/SMIME, CMS, CMP/CRMF or TS with no message\nsize limit may experience notable to very long delays when processing those\nmessages, which may lead to a Denial of Service.\n\nAn OBJECT IDENTIFIER is composed of a series of numbers - sub-identifiers -\nmost of which have no size limit.  OBJ_obj2txt() may be used to translate\nan ASN.1 OBJECT IDENTIFIER given in DER encoding form (using the OpenSSL\ntype ASN1_OBJECT) to its canonical numeric text form, which are the\nsub-identifiers of the OBJECT IDENTIFIER in decimal form, separated by\nperiods.\n\nWhen one of the sub-identifiers in the OBJECT IDENTIFIER is very large\n(these are sizes that are seen as absurdly large, taking up tens or hundreds\nof KiBs), the translation to a decimal number in text may take a very long\ntime.  The time complexity is O(n^2) with 'n' being the size of the\nsub-identifiers in bytes (*).\n\nWith OpenSSL 3.0, support to fetch cryptographic algorithms using names /\nidentifiers in string form was introduced.  This includes using OBJECT\nIDENTIFIERs in canonical numeric text form as identifiers for fetching\nalgorithms.\n\nSuch OBJECT IDENTIFIERs may be received through the ASN.1 structure\nAlgorithmIdentifier, which is commonly used in multiple protocols to specify\nwhat cryptographic algorithm should be used to sign or verify, encrypt or\ndecrypt, or digest passed data.\n\nApplications that call OBJ_obj2txt() directly with untrusted data are\naffected, with any version of OpenSSL.  If the use is for the mere purpose\nof display, the severity is considered low.\n\nIn OpenSSL 3.0 and newer, this affects the subsystems OCSP, PKCS7/SMIME,\nCMS, CMP/CRMF or TS.  It also impacts anything that processes X.509\ncertificates, including simple things like verifying its signature.\n\nThe impact on TLS is relatively low, because all versions of OpenSSL...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.1.1-r0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-0466_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2023-0466] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "The function X509_VERIFY_PARAM_add0_policy() is documented to\nimplicitly enable the certificate policy check when doing certificate\nverification. However the implementation of the function does not\nenable the check which allows certificates with invalid or incorrect\npolicies to pass the certificate verification.\n\nAs suddenly enabling the policy check could break existing deployments it was\ndecided to keep the existing behavior of the X509_VERIFY_PARAM_add0_policy()\nfunction.\n\nInstead the applications that require OpenSSL to perform certificate\npolicy check need to use X509_VERIFY_PARAM_set1_policies() or explicitly\nenable the policy check by calling X509_VERIFY_PARAM_set_flags() with\nthe X509_V_FLAG_POLICY_CHECK flag argument.\n\nCertificate policy checks are disabled by default in OpenSSL and are not\ncommonly used by applications.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.0.8-r3]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-3817_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2023-3817] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. After fixing\nCVE-2023-3446 it was discovered that a large q parameter value can also trigger\nan overly long computation during some of these checks. A correct q value,\nif present, cannot be larger than the modulus p parameter, thus it is\nunnecessary to perform these checks if q is larger than p.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulnerable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the \"-check\" option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.1.2-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-2975_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2023-2975] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "Issue summary: The AES-SIV cipher implementation contains a bug that causes\nit to ignore empty associated data entries which are unauthenticated as\na consequence.\n\nImpact summary: Applications that use the AES-SIV algorithm and want to\nauthenticate empty data entries as associated data can be mislead by removing\nadding or reordering such empty entries as these are ignored by the OpenSSL\nimplementation. We are currently unaware of any such applications.\n\nThe AES-SIV algorithm allows for authentication of multiple associated\ndata entries along with the encryption. To authenticate empty data the\napplication has to call EVP_EncryptUpdate() (or EVP_CipherUpdate()) with\nNULL pointer as the output buffer and 0 as the input buffer length.\nThe AES-SIV implementation in OpenSSL just returns success for such a call\ninstead of performing the associated data authentication operation.\nThe empty data thus will not be authenticated.\n\nAs this issue does not affect non-empty associated data authentication and\nwe expect it to be rare for an application to use empty associated data\nentries this is qualified as Low severity issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.1.1-r2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-1255_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2023-1255] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "Issue summary: The AES-XTS cipher decryption implementation for 64 bit ARM\nplatform contains a bug that could cause it to read past the input buffer,\nleading to a crash.\n\nImpact summary: Applications that use the AES-XTS algorithm on the 64 bit ARM\nplatform can crash in rare circumstances. The AES-XTS algorithm is usually\nused for disk encryption.\n\nThe AES-XTS cipher decryption implementation for 64 bit ARM platform will read\npast the end of the ciphertext buffer if the ciphertext size is 4 mod 5 in 16\nbyte blocks, e.g. 144 bytes or 1024 bytes. If the memory after the ciphertext\nbuffer is unmapped, this will trigger a crash which results in a denial of\nservice.\n\nIf an attacker can control the size and location of the ciphertext buffer\nbeing decrypted by an application using AES-XTS on 64 bit ARM, the\napplication is affected. This is fairly unlikely making this issue\na Low severity one.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.1.0-r4]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-0842_xml2js_0.4.19",
              "shortDescription": {
                "text": "[CVE-2023-0842] xml2js 0.4.19"
              },
              "help": {
                "text": "xml2js version 0.4.23 allows an external attacker to edit or add new properties to an object. This is possible because the application does not properly validate incoming JSON keys, thus allowing the __proto__ property to be edited.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `       | [0.5.0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2020-28928_3.9:musl_1.1.20-r5",
              "shortDescription": {
                "text": "[CVE-2020-28928] 3.9:musl 1.1.20-r5"
              },
              "help": {
                "text": "In musl libc through 1.2.1, wcsnrtombs mishandles particular combinations of destination buffer size and source character limit, as demonstrated by an invalid write access (buffer overflow).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [1.1.20-r6]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2020-15366_ajv_5.5.2",
              "shortDescription": {
                "text": "[CVE-2020-15366] ajv 5.5.2"
              },
              "help": {
                "text": "An issue was discovered in ajv.validate() in Ajv (aka Another JSON Schema Validator) 6.12.2. A carefully crafted JSON schema could be provided that allows execution of other code by prototype pollution. (While untrusted schemas are recommended against, the worst case of an untrusted schema should be a denial of service, not execution of code.)",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.6      | Not Covered       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [6.12.3]   |"
              },
              "properties": {
                "security-severity": "5.6"
              }
            },
            {
              "id": "CVE-2021-42375_3.9:busybox_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2021-42375] 3.9:busybox 1.29.3-r10"
              },
              "help": {
                "text": "An incorrect handling of a special element in Busybox's ash applet leads to denial of service when processing a crafted shell command, due to the shell mistaking specific characters for reserved characters. This may be used for DoS under rare conditions of filtered command input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2020-8244_bl_1.2.2",
              "shortDescription": {
                "text": "[CVE-2020-8244] bl 1.2.2"
              },
              "help": {
                "text": "A buffer over-read vulnerability exists in bl \u003c4.0.3, \u003c3.0.1, \u003c2.2.1, and \u003c1.2.3 which could allow an attacker to supply user input (even typed) that if it ends up in consume() argument and can become negative, the BufferList state can be corrupted, tricking it into exposing uninitialized memory via regular .slice() calls.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `       | [1.2.3], [2.2.1], [3.0.1], [4.0.3]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2019-1549_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2019-1549] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "OpenSSL 1.1.1 introduced a rewritten random number generator (RNG). This was intended to include protection in the event of a fork() system call in order to ensure that the parent and child processes did not share the same RNG state. However this protection was not being used in the default case. A partial mitigation for this issue is that the output from a high precision timer is mixed into the RNG state so the likelihood of a parent and child process sharing state is significantly reduced. If an application already calls OPENSSL_init_crypto() explicitly using OPENSSL_INIT_ATFORK then this problem does not occur at all. Fixed in OpenSSL 1.1.1d (Affected 1.1.1-1.1.1c).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.1.1d-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-4039_3.9:libstdc++_8.3.0-r0",
              "shortDescription": {
                "text": "[CVE-2023-4039] 3.9:libstdc++ 8.3.0-r0"
              },
              "help": {
                "text": "**DISPUTED**A failure in the -fstack-protector feature in GCC-based toolchains \nthat target AArch64 allows an attacker to exploit an existing buffer \noverflow in dynamically-sized local variables in your application \nwithout this being detected. This stack-protector failure only applies \nto C99-style dynamically-sized local variables or those created using \nalloca(). The stack-protector operates as intended for statically-sized \nlocal variables.\n\nThe default behavior when the stack-protector \ndetects an overflow is to terminate your application, resulting in \ncontrolled loss of availability. An attacker who can exploit a buffer \noverflow without triggering the stack-protector might be able to change \nprogram flow control to cause an uncontrolled loss of availability or to\n go further and affect confidentiality or integrity. NOTE: The GCC project argues that this is a missed hardening bug and not a vulnerability by itself.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.8      | Not Covered       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [13.2.1_git20231014-r0]   |"
              },
              "properties": {
                "security-severity": "4.8"
              }
            },
            {
              "id": "CVE-2020-28928_3.9:musl-utils_1.1.20-r5",
              "shortDescription": {
                "text": "[CVE-2020-28928] 3.9:musl-utils 1.1.20-r5"
              },
              "help": {
                "text": "In musl libc through 1.2.1, wcsnrtombs mishandles particular combinations of destination buffer size and source character limit, as demonstrated by an invalid write access (buffer overflow).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [1.1.20-r6]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2019-1547_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2019-1547] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "Normally in OpenSSL EC groups always have a co-factor present and this is used in side channel resistant code paths. However, in some cases, it is possible to construct a group using explicit parameters (instead of using a named curve). In those cases it is possible that such a group does not have the cofactor present. This can occur even where all the parameters match a known named curve. If such a curve is used then OpenSSL falls back to non-side channel resistant code paths which may result in full key recovery during an ECDSA signature operation. In order to be vulnerable an attacker would have to have the ability to time the creation of a large number of signatures where explicit parameters with no co-factor present are in use by an application using libcrypto. For the avoidance of doubt libssl is not vulnerable because explicit parameters are never used. Fixed in OpenSSL 1.1.1d (Affected 1.1.1-1.1.1c). Fixed in OpenSSL 1.1.0l (Affected 1.1.0-1.1.0k). Fixed in OpenSSL 1.0.2t (Affected 1.0.2-1.0.2s).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.7      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.1.1d-r0]   |"
              },
              "properties": {
                "security-severity": "4.7"
              }
            },
            {
              "id": "CVE-2017-16137_debug_3.2.6",
              "shortDescription": {
                "text": "[CVE-2017-16137] debug 3.2.6"
              },
              "help": {
                "text": "The debug module is vulnerable to regular expression denial of service when untrusted user input is passed into the o formatter. It takes around 50k characters to block for 2 seconds making this a low severity issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `       | [2.6.9], [3.1.0], [3.2.7], [4.3.1]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-21297_@node-red/runtime_0.20.8",
              "shortDescription": {
                "text": "[CVE-2021-21297] @node-red/runtime 0.20.8"
              },
              "help": {
                "text": "Node-Red is a low-code programming for event-driven applications built using nodejs. Node-RED 1.2.7 and earlier contains a Prototype Pollution vulnerability in the admin API. A badly formed request can modify the prototype of the default JavaScript Object with the potential to affect the default behaviour of the Node-RED runtime. The vulnerability is patched in the 1.2.8 release. A workaround is to ensure only authorized users are able to access the editor url.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `       | [1.2.8]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-25896_passport_0.4.0",
              "shortDescription": {
                "text": "[CVE-2022-25896] passport 0.4.0"
              },
              "help": {
                "text": "This affects the package passport before 0.6.0. When a user logs in or logs out, the session is regenerated instead of being closed.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.8      | Not Covered       | `sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `       | [0.6.0]   |"
              },
              "properties": {
                "security-severity": "4.8"
              }
            },
            {
              "id": "CVE-2023-42363_3.9:ssl_client_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2023-42363] 3.9:ssl_client 1.29.3-r10"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in xasprintf function in xfuncs_printf.c:344 in BusyBox v.1.36.1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.36.1-r27]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2022-4203_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2022-4203] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "A read buffer overrun can be triggered in X.509 certificate verification,\nspecifically in name constraint checking. Note that this occurs\nafter certificate chain signature verification and requires either a\nCA to have signed the malicious certificate or for the application to\ncontinue certificate verification despite failure to construct a path\nto a trusted issuer.\n\nThe read buffer overrun might result in a crash which could lead to\na denial of service attack. In theory it could also result in the disclosure\nof private memory contents (such as private keys, or sensitive plaintext)\nalthough we are not aware of any working exploit leading to memory\ncontents disclosure as of the time of release of this advisory.\n\nIn a TLS client, this can be triggered by connecting to a malicious\nserver. In a TLS server, this can be triggered if the server requests\nclient authentication and a malicious client connects.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.9      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "4.9"
              }
            },
            {
              "id": "CVE-2023-42366_3.9:busybox_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2023-42366] 3.9:busybox 1.29.3-r10"
              },
              "help": {
                "text": "A heap-buffer-overflow was discovered in BusyBox v.1.36.1 in the next_token function at awk.c:1159.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.36.1-r25]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-3446_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2023-3446] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. One of those\nchecks confirms that the modulus ('p' parameter) is not too large. Trying to use\na very large modulus is slow and OpenSSL will not normally use a modulus which\nis over 10,000 bits in length.\n\nHowever the DH_check() function checks numerous aspects of the key or parameters\nthat have been supplied. Some of those checks use the supplied modulus value\neven if it has already been found to be too large.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulernable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the '-check' option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.1.1-r3]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2019-1551_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2019-1551] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "There is an overflow bug in the x64_64 Montgomery squaring procedure used in exponentiation with 512-bit moduli. No EC algorithms are affected. Analysis suggests that attacks against 2-prime RSA1024, 3-prime RSA1536, and DSA1024 as a result of this defect would be very difficult to perform and are not believed likely. Attacks against DH512 are considered just feasible. However, for an attack the target would have to re-use the DH512 private key, which is not recommended anyway. Also applications directly using the low level API BN_mod_exp may be affected if they use BN_FLG_CONSTTIME. Fixed in OpenSSL 1.1.1e (Affected 1.1.1-1.1.1d). Fixed in OpenSSL 1.0.2u (Affected 1.0.2-1.0.2t).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.1.1d-r2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2019-1549_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2019-1549] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "OpenSSL 1.1.1 introduced a rewritten random number generator (RNG). This was intended to include protection in the event of a fork() system call in order to ensure that the parent and child processes did not share the same RNG state. However this protection was not being used in the default case. A partial mitigation for this issue is that the output from a high precision timer is mixed into the RNG state so the likelihood of a parent and child process sharing state is significantly reduced. If an application already calls OPENSSL_init_crypto() explicitly using OPENSSL_INIT_ATFORK then this problem does not occur at all. Fixed in OpenSSL 1.1.1d (Affected 1.1.1-1.1.1c).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.1.1d-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-6129_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2023-6129] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "Issue summary: The POLY1305 MAC (message authentication code) implementation\ncontains a bug that might corrupt the internal state of applications running\non PowerPC CPU based platforms if the CPU provides vector instructions.\n\nImpact summary: If an attacker can influence whether the POLY1305 MAC\nalgorithm is used, the application state might be corrupted with various\napplication dependent consequences.\n\nThe POLY1305 MAC (message authentication code) implementation in OpenSSL for\nPowerPC CPUs restores the contents of vector registers in a different order\nthan they are saved. Thus the contents of some of these vector registers\nare corrupted when returning to the caller. The vulnerable code is used only\non newer PowerPC processors supporting the PowerISA 2.07 instructions.\n\nThe consequences of this kind of internal application state corruption can\nbe various - from no consequences, if the calling application does not\ndepend on the contents of non-volatile XMM registers at all, to the worst\nconsequences, where the attacker could get complete control of the application\nprocess. However unless the compiler uses the vector registers for storing\npointers, the most likely consequence, if any, would be an incorrect result\nof some application dependent calculations or a crash leading to a denial of\nservice.\n\nThe POLY1305 MAC algorithm is most frequently used as part of the\nCHACHA20-POLY1305 AEAD (authenticated encryption with associated data)\nalgorithm. The most common usage of this AEAD cipher is with TLS protocol\nversions 1.2 and 1.3. If this cipher is enabled on the server a malicious\nclient can influence whether this AEAD cipher is used. This implies that\nTLS server applications using OpenSSL can be potentially impacted. However\nwe are currently not aware of any concrete application that would be affected\nby this issue therefore we consider this a Low severity security issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.1.4-r3]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-4203_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2022-4203] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "A read buffer overrun can be triggered in X.509 certificate verification,\nspecifically in name constraint checking. Note that this occurs\nafter certificate chain signature verification and requires either a\nCA to have signed the malicious certificate or for the application to\ncontinue certificate verification despite failure to construct a path\nto a trusted issuer.\n\nThe read buffer overrun might result in a crash which could lead to\na denial of service attack. In theory it could also result in the disclosure\nof private memory contents (such as private keys, or sensitive plaintext)\nalthough we are not aware of any working exploit leading to memory\ncontents disclosure as of the time of release of this advisory.\n\nIn a TLS client, this can be triggered by connecting to a malicious\nserver. In a TLS server, this can be triggered if the server requests\nclient authentication and a malicious client connects.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.9      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "4.9"
              }
            },
            {
              "id": "CVE-2023-3446_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2023-3446] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. One of those\nchecks confirms that the modulus ('p' parameter) is not too large. Trying to use\na very large modulus is slow and OpenSSL will not normally use a modulus which\nis over 10,000 bits in length.\n\nHowever the DH_check() function checks numerous aspects of the key or parameters\nthat have been supplied. Some of those checks use the supplied modulus value\neven if it has already been found to be too large.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulernable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the '-check' option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.1.1-r3]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2019-1551_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2019-1551] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "There is an overflow bug in the x64_64 Montgomery squaring procedure used in exponentiation with 512-bit moduli. No EC algorithms are affected. Analysis suggests that attacks against 2-prime RSA1024, 3-prime RSA1536, and DSA1024 as a result of this defect would be very difficult to perform and are not believed likely. Attacks against DH512 are considered just feasible. However, for an attack the target would have to re-use the DH512 private key, which is not recommended anyway. Also applications directly using the low level API BN_mod_exp may be affected if they use BN_FLG_CONSTTIME. Fixed in OpenSSL 1.1.1e (Affected 1.1.1-1.1.1d). Fixed in OpenSSL 1.0.2u (Affected 1.0.2-1.0.2t).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.1.1d-r2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-23362_hosted-git-info_2.7.1",
              "shortDescription": {
                "text": "[CVE-2021-23362] hosted-git-info 2.7.1"
              },
              "help": {
                "text": "The package hosted-git-info before 3.0.8 are vulnerable to Regular Expression Denial of Service (ReDoS) via regular expression shortcutMatch in the fromUrl function in index.js. The affected regular expression exhibits polynomial worst-case time complexity.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [2.8.9], [3.0.8]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-1255_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2023-1255] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "Issue summary: The AES-XTS cipher decryption implementation for 64 bit ARM\nplatform contains a bug that could cause it to read past the input buffer,\nleading to a crash.\n\nImpact summary: Applications that use the AES-XTS algorithm on the 64 bit ARM\nplatform can crash in rare circumstances. The AES-XTS algorithm is usually\nused for disk encryption.\n\nThe AES-XTS cipher decryption implementation for 64 bit ARM platform will read\npast the end of the ciphertext buffer if the ciphertext size is 4 mod 5 in 16\nbyte blocks, e.g. 144 bytes or 1024 bytes. If the memory after the ciphertext\nbuffer is unmapped, this will trigger a crash which results in a denial of\nservice.\n\nIf an attacker can control the size and location of the ciphertext buffer\nbeing decrypted by an application using AES-XTS on 64 bit ARM, the\napplication is affected. This is fairly unlikely making this issue\na Low severity one.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.1.0-r4]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-42364_3.9:ssl_client_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2023-42364] 3.9:ssl_client 1.29.3-r10"
              },
              "help": {
                "text": "A use-after-free vulnerability in BusyBox v.1.36.1 allows attackers to cause a denial of service via a crafted awk pattern in the awk.c evaluate function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-3817_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2023-3817] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. After fixing\nCVE-2023-3446 it was discovered that a large q parameter value can also trigger\nan overly long computation during some of these checks. A correct q value,\nif present, cannot be larger than the modulus p parameter, thus it is\nunnecessary to perform these checks if q is larger than p.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulnerable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the \"-check\" option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.1.2-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-4039_3.9:libgcc_8.3.0-r0",
              "shortDescription": {
                "text": "[CVE-2023-4039] 3.9:libgcc 8.3.0-r0"
              },
              "help": {
                "text": "**DISPUTED**A failure in the -fstack-protector feature in GCC-based toolchains \nthat target AArch64 allows an attacker to exploit an existing buffer \noverflow in dynamically-sized local variables in your application \nwithout this being detected. This stack-protector failure only applies \nto C99-style dynamically-sized local variables or those created using \nalloca(). The stack-protector operates as intended for statically-sized \nlocal variables.\n\nThe default behavior when the stack-protector \ndetects an overflow is to terminate your application, resulting in \ncontrolled loss of availability. An attacker who can exploit a buffer \noverflow without triggering the stack-protector might be able to change \nprogram flow control to cause an uncontrolled loss of availability or to\n go further and affect confidentiality or integrity. NOTE: The GCC project argues that this is a missed hardening bug and not a vulnerability by itself.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.8      | Not Covered       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [13.2.1_git20231014-r0]   |"
              },
              "properties": {
                "security-severity": "4.8"
              }
            },
            {
              "id": "CVE-2024-0727_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2024-0727] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "Issue summary: Processing a maliciously formatted PKCS12 file may lead OpenSSL\nto crash leading to a potential Denial of Service attack\n\nImpact summary: Applications loading files in the PKCS12 format from untrusted\nsources might terminate abruptly.\n\nA file in PKCS12 format can contain certificates and keys and may come from an\nuntrusted source. The PKCS12 specification allows certain fields to be NULL, but\nOpenSSL does not correctly check for this case. This can lead to a NULL pointer\ndereference that results in OpenSSL crashing. If an application processes PKCS12\nfiles from an untrusted source using the OpenSSL APIs then that application will\nbe vulnerable to this issue.\n\nOpenSSL APIs that are vulnerable to this are: PKCS12_parse(),\nPKCS12_unpack_p7data(), PKCS12_unpack_p7encdata(), PKCS12_unpack_authsafes()\nand PKCS12_newpass().\n\nWe have also fixed a similar issue in SMIME_write_PKCS7(). However since this\nfunction is related to writing data we do not consider it security significant.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.1.4-r5]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2021-42374_3.9:busybox_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2021-42374] 3.9:busybox 1.29.3-r10"
              },
              "help": {
                "text": "An out-of-bounds heap read in Busybox's unlzma applet leads to information leak and denial of service when crafted LZMA-compressed input is decompressed. This can be triggered by any applet/format that",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2024-29041_express_4.17.1",
              "shortDescription": {
                "text": "[CVE-2024-29041] express 4.17.1"
              },
              "help": {
                "text": "Express.js minimalist web framework for node. Versions of Express.js prior to 4.19.0 and all pre-release alpha and beta versions of 5.0 are affected by an open redirect vulnerability using malformed URLs. When a user of Express performs a redirect using a user-provided URL Express performs an encode [using `encodeurl`](https://github.com/pillarjs/encodeurl) on the contents before passing it to the `location` header. This can cause malformed URLs to be evaluated in unexpected ways by common redirect allow list implementations in Express applications, leading to an Open Redirect via bypass of a properly implemented allow list. The main method impacted is `res.location()` but this is also called from within `res.redirect()`. The vulnerability is fixed in 4.19.2 and 5.0.0-beta.3.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `       | [4.19.2], [5.0.0-beta.3]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2023-42364_3.9:busybox_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2023-42364] 3.9:busybox 1.29.3-r10"
              },
              "help": {
                "text": "A use-after-free vulnerability in BusyBox v.1.36.1 allows attackers to cause a denial of service via a crafted awk pattern in the awk.c evaluate function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2020-1971_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2020-1971] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "The X.509 GeneralName type is a generic type for representing different types of names. One of those name types is known as EDIPartyName. OpenSSL provides a function GENERAL_NAME_cmp which compares different instances of a GENERAL_NAME to see if they are equal or not. This function behaves incorrectly when both GENERAL_NAMEs contain an EDIPARTYNAME. A NULL pointer dereference and a crash may occur leading to a possible denial of service attack. OpenSSL itself uses the GENERAL_NAME_cmp function for two purposes: 1) Comparing CRL distribution point names between an available CRL and a CRL distribution point embedded in an X509 certificate 2) When verifying that a timestamp response token signer matches the timestamp authority name (exposed via the API functions TS_RESP_verify_response and TS_RESP_verify_token) If an attacker can control both items being compared then that attacker could trigger a crash. For example if the attacker can trick a client or server into checking a malicious certificate against a malicious CRL then this may occur. Note that some applications automatically download CRLs based on a URL embedded in a certificate. This checking happens prior to the signatures on the certificate and CRL being verified. OpenSSL's s_server, s_client and verify tools have support for the \"-crl_download\" option which implements automatic CRL downloading and this attack has been demonstrated to work against those tools. Note that an unrelated bug means that affected versions of OpenSSL cannot parse or construct correct encodings of EDIPARTYNAME. However it is possible to construct a malformed EDIPARTYNAME that OpenSSL's parser will accept and hence trigger this attack. All OpenSSL 1.1.1 and 1.0.2 versions are affected by this issue. Other OpenSSL releases are out of support and have not been checked. Fixed in OpenSSL 1.1.1i (Affected 1.1.1-1.1.1h). Fixed in OpenSSL 1.0.2x (Affected 1.0.2-1.0.2w).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.1.1i-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2024-0727_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2024-0727] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "Issue summary: Processing a maliciously formatted PKCS12 file may lead OpenSSL\nto crash leading to a potential Denial of Service attack\n\nImpact summary: Applications loading files in the PKCS12 format from untrusted\nsources might terminate abruptly.\n\nA file in PKCS12 format can contain certificates and keys and may come from an\nuntrusted source. The PKCS12 specification allows certain fields to be NULL, but\nOpenSSL does not correctly check for this case. This can lead to a NULL pointer\ndereference that results in OpenSSL crashing. If an application processes PKCS12\nfiles from an untrusted source using the OpenSSL APIs then that application will\nbe vulnerable to this issue.\n\nOpenSSL APIs that are vulnerable to this are: PKCS12_parse(),\nPKCS12_unpack_p7data(), PKCS12_unpack_p7encdata(), PKCS12_unpack_authsafes()\nand PKCS12_newpass().\n\nWe have also fixed a similar issue in SMIME_write_PKCS7(). However since this\nfunction is related to writing data we do not consider it security significant.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.1.4-r5]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-5678_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2023-5678] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "Issue summary: Generating excessively long X9.42 DH keys or checking\nexcessively long X9.42 DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_generate_key() to\ngenerate an X9.42 DH key may experience long delays.  Likewise, applications\nthat use DH_check_pub_key(), DH_check_pub_key_ex() or EVP_PKEY_public_check()\nto check an X9.42 DH key or X9.42 DH parameters may experience long delays.\nWhere the key or parameters that are being checked have been obtained from\nan untrusted source this may lead to a Denial of Service.\n\nWhile DH_check() performs all the necessary checks (as of CVE-2023-3817),\nDH_check_pub_key() doesn't make any of these checks, and is therefore\nvulnerable for excessively large P and Q parameters.\n\nLikewise, while DH_generate_key() performs a check for an excessively large\nP, it doesn't check for an excessively large Q.\n\nAn application that calls DH_generate_key() or DH_check_pub_key() and\nsupplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nDH_generate_key() and DH_check_pub_key() are also called by a number of\nother OpenSSL functions.  An application calling any of those other\nfunctions may similarly be affected.  The other functions affected by this\nare DH_check_pub_key_ex(), EVP_PKEY_public_check(), and EVP_PKEY_generate().\n\nAlso vulnerable are the OpenSSL pkey command line application when using the\n\"-pubcheck\" option, as well as the OpenSSL genpkey command line application.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.1.4-r1]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2020-15095_npm_6.4.1",
              "shortDescription": {
                "text": "[CVE-2020-15095] npm 6.4.1"
              },
              "help": {
                "text": "Versions of the npm CLI prior to 6.14.6 are vulnerable to an information exposure vulnerability through log files. The CLI supports URLs like \"\u003cprotocol\u003e://[\u003cuser\u003e[:\u003cpassword\u003e]@]\u003chostname\u003e[:\u003cport\u003e][:][/]\u003cpath\u003e\". The password value is not redacted and is printed to stdout and also to any generated log files.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.4      | Not Covered       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [6.14.6]   |"
              },
              "properties": {
                "security-severity": "4.4"
              }
            },
            {
              "id": "CVE-2021-23841_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2021-23841] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "The OpenSSL public API function X509_issuer_and_serial_hash() attempts to create a unique hash value based on the issuer and serial number data contained within an X509 certificate. However it fails to correctly handle any errors that may occur while parsing the issuer field (which might occur if the issuer field is maliciously constructed). This may subsequently result in a NULL pointer deref and a crash leading to a potential denial of service attack. The function X509_issuer_and_serial_hash() is never directly called by OpenSSL itself so applications are only vulnerable if they use this function directly and they use it on certificates that may have been obtained from untrusted sources. OpenSSL versions 1.1.1i and below are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1j. OpenSSL versions 1.0.2x and below are affected by this issue. However OpenSSL 1.0.2 is out of support and no longer receiving public updates. Premium support customers of OpenSSL 1.0.2 should upgrade to 1.0.2y. Other users should upgrade to 1.1.1j. Fixed in OpenSSL 1.1.1j (Affected 1.1.1-1.1.1i). Fixed in OpenSSL 1.0.2y (Affected 1.0.2-1.0.2x).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.1.1j-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2021-23841_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2021-23841] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "The OpenSSL public API function X509_issuer_and_serial_hash() attempts to create a unique hash value based on the issuer and serial number data contained within an X509 certificate. However it fails to correctly handle any errors that may occur while parsing the issuer field (which might occur if the issuer field is maliciously constructed). This may subsequently result in a NULL pointer deref and a crash leading to a potential denial of service attack. The function X509_issuer_and_serial_hash() is never directly called by OpenSSL itself so applications are only vulnerable if they use this function directly and they use it on certificates that may have been obtained from untrusted sources. OpenSSL versions 1.1.1i and below are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1j. OpenSSL versions 1.0.2x and below are affected by this issue. However OpenSSL 1.0.2 is out of support and no longer receiving public updates. Premium support customers of OpenSSL 1.0.2 should upgrade to 1.0.2y. Other users should upgrade to 1.1.1j. Fixed in OpenSSL 1.1.1j (Affected 1.1.1-1.1.1i). Fixed in OpenSSL 1.0.2y (Affected 1.0.2-1.0.2x).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.1.1j-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-42365_3.9:ssl_client_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2023-42365] 3.9:ssl_client 1.29.3-r10"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in BusyBox v.1.36.1 via a crafted awk pattern in the awk.c copyvar function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42366_3.9:ssl_client_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2023-42366] 3.9:ssl_client 1.29.3-r10"
              },
              "help": {
                "text": "A heap-buffer-overflow was discovered in BusyBox v.1.36.1 in the next_token function at awk.c:1159.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.36.1-r25]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42365_3.9:busybox_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2023-42365] 3.9:busybox 1.29.3-r10"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in BusyBox v.1.36.1 via a crafted awk pattern in the awk.c copyvar function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-5678_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2023-5678] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "Issue summary: Generating excessively long X9.42 DH keys or checking\nexcessively long X9.42 DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_generate_key() to\ngenerate an X9.42 DH key may experience long delays.  Likewise, applications\nthat use DH_check_pub_key(), DH_check_pub_key_ex() or EVP_PKEY_public_check()\nto check an X9.42 DH key or X9.42 DH parameters may experience long delays.\nWhere the key or parameters that are being checked have been obtained from\nan untrusted source this may lead to a Denial of Service.\n\nWhile DH_check() performs all the necessary checks (as of CVE-2023-3817),\nDH_check_pub_key() doesn't make any of these checks, and is therefore\nvulnerable for excessively large P and Q parameters.\n\nLikewise, while DH_generate_key() performs a check for an excessively large\nP, it doesn't check for an excessively large Q.\n\nAn application that calls DH_generate_key() or DH_check_pub_key() and\nsupplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nDH_generate_key() and DH_check_pub_key() are also called by a number of\nother OpenSSL functions.  An application calling any of those other\nfunctions may similarly be affected.  The other functions affected by this\nare DH_check_pub_key_ex(), EVP_PKEY_public_check(), and EVP_PKEY_generate().\n\nAlso vulnerable are the OpenSSL pkey command line application when using the\n\"-pubcheck\" option, as well as the OpenSSL genpkey command line application.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.1.4-r1]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-4304_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2022-4304] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "A timing based side channel exists in the OpenSSL RSA Decryption implementation\nwhich could be sufficient to recover a plaintext across a network in a\nBleichenbacher style attack. To achieve a successful decryption an attacker\nwould have to be able to send a very large number of trial messages for\ndecryption. The vulnerability affects all RSA padding modes: PKCS#1 v1.5,\nRSA-OEAP and RSASVE.\n\nFor example, in a TLS connection, RSA is commonly used by a client to send an\nencrypted pre-master secret to the server. An attacker that had observed a\ngenuine connection between a client and a server could use this flaw to send\ntrial messages to the server and record the time taken to process them. After a\nsufficiently large number of messages the attacker could recover the pre-master\nsecret used for the original connection and thus be able to decrypt the\napplication data sent over that connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2020-15366_ajv_6.10.0",
              "shortDescription": {
                "text": "[CVE-2020-15366] ajv 6.10.0"
              },
              "help": {
                "text": "An issue was discovered in ajv.validate() in Ajv (aka Another JSON Schema Validator) 6.12.2. A carefully crafted JSON schema could be provided that allows execution of other code by prototype pollution. (While untrusted schemas are recommended against, the worst case of an untrusted schema should be a denial of service, not execution of code.)",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.6      | Not Covered       | `sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `       | [6.12.3]   |"
              },
              "properties": {
                "security-severity": "5.6"
              }
            },
            {
              "id": "CVE-2023-6129_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2023-6129] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "Issue summary: The POLY1305 MAC (message authentication code) implementation\ncontains a bug that might corrupt the internal state of applications running\non PowerPC CPU based platforms if the CPU provides vector instructions.\n\nImpact summary: If an attacker can influence whether the POLY1305 MAC\nalgorithm is used, the application state might be corrupted with various\napplication dependent consequences.\n\nThe POLY1305 MAC (message authentication code) implementation in OpenSSL for\nPowerPC CPUs restores the contents of vector registers in a different order\nthan they are saved. Thus the contents of some of these vector registers\nare corrupted when returning to the caller. The vulnerable code is used only\non newer PowerPC processors supporting the PowerISA 2.07 instructions.\n\nThe consequences of this kind of internal application state corruption can\nbe various - from no consequences, if the calling application does not\ndepend on the contents of non-volatile XMM registers at all, to the worst\nconsequences, where the attacker could get complete control of the application\nprocess. However unless the compiler uses the vector registers for storing\npointers, the most likely consequence, if any, would be an incorrect result\nof some application dependent calculations or a crash leading to a denial of\nservice.\n\nThe POLY1305 MAC algorithm is most frequently used as part of the\nCHACHA20-POLY1305 AEAD (authenticated encryption with associated data)\nalgorithm. The most common usage of this AEAD cipher is with TLS protocol\nversions 1.2 and 1.3. If this cipher is enabled on the server a malicious\nclient can influence whether this AEAD cipher is used. This implies that\nTLS server applications using OpenSSL can be potentially impacted. However\nwe are currently not aware of any concrete application that would be affected\nby this issue therefore we consider this a Low severity security issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.1.4-r3]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2019-16777_npm_6.4.1",
              "shortDescription": {
                "text": "[CVE-2019-16777] npm 6.4.1"
              },
              "help": {
                "text": "Versions of the npm CLI prior to 6.13.4 are vulnerable to an Arbitrary File Overwrite. It fails to prevent existing globally-installed binaries to be overwritten by other package installations. For example, if a package was installed globally and created a serve binary, any subsequent installs of packages that also create a serve binary would overwrite the previous serve binary. This behavior is still allowed in local installations and also through install scripts. This vulnerability bypasses a user using the --ignore-scripts install option.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [6.13.4]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2021-21298_@node-red/runtime_0.20.8",
              "shortDescription": {
                "text": "[CVE-2021-21298] @node-red/runtime 0.20.8"
              },
              "help": {
                "text": "Node-Red is a low-code programming for event-driven applications built using nodejs. Node-RED 1.2.7 and earlier has a vulnerability which allows arbitrary path traversal via the Projects API. If the Projects feature is enabled, a user with `projects.read` permission is able to access any file via the Projects API. The issue has been patched in Node-RED 1.2.8. The vulnerability applies only to the Projects feature which is not enabled by default in Node-RED. The primary workaround is not give untrusted users read access to the Node-RED editor.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `       | [1.2.8]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2019-1547_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2019-1547] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "Normally in OpenSSL EC groups always have a co-factor present and this is used in side channel resistant code paths. However, in some cases, it is possible to construct a group using explicit parameters (instead of using a named curve). In those cases it is possible that such a group does not have the cofactor present. This can occur even where all the parameters match a known named curve. If such a curve is used then OpenSSL falls back to non-side channel resistant code paths which may result in full key recovery during an ECDSA signature operation. In order to be vulnerable an attacker would have to have the ability to time the creation of a large number of signatures where explicit parameters with no co-factor present are in use by an application using libcrypto. For the avoidance of doubt libssl is not vulnerable because explicit parameters are never used. Fixed in OpenSSL 1.1.1d (Affected 1.1.1-1.1.1c). Fixed in OpenSSL 1.1.0l (Affected 1.1.0-1.1.0k). Fixed in OpenSSL 1.0.2t (Affected 1.0.2-1.0.2s).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.7      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.1.1d-r0]   |"
              },
              "properties": {
                "security-severity": "4.7"
              }
            },
            {
              "id": "CVE-2023-42363_3.9:busybox_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2023-42363] 3.9:busybox 1.29.3-r10"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in xasprintf function in xfuncs_printf.c:344 in BusyBox v.1.36.1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.36.1-r27]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2019-16775_npm_6.4.1",
              "shortDescription": {
                "text": "[CVE-2019-16775] npm 6.4.1"
              },
              "help": {
                "text": "Versions of the npm CLI prior to 6.13.3 are vulnerable to an Arbitrary File Write. It is possible for packages to create symlinks to files outside of thenode_modules folder through the bin field upon installation. A properly constructed entry in the package.json bin field would allow a package publisher to create a symlink pointing to arbitrary files on a user's system when the package is installed. This behavior is still possible through install scripts. This vulnerability bypasses a user using the --ignore-scripts install option.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [6.13.3]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2021-42374_3.9:ssl_client_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2021-42374] 3.9:ssl_client 1.29.3-r10"
              },
              "help": {
                "text": "An out-of-bounds heap read in Busybox's unlzma applet leads to information leak and denial of service when crafted LZMA-compressed input is decompressed. This can be triggered by any applet/format that",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-2975_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2023-2975] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "Issue summary: The AES-SIV cipher implementation contains a bug that causes\nit to ignore empty associated data entries which are unauthenticated as\na consequence.\n\nImpact summary: Applications that use the AES-SIV algorithm and want to\nauthenticate empty data entries as associated data can be mislead by removing\nadding or reordering such empty entries as these are ignored by the OpenSSL\nimplementation. We are currently unaware of any such applications.\n\nThe AES-SIV algorithm allows for authentication of multiple associated\ndata entries along with the encryption. To authenticate empty data the\napplication has to call EVP_EncryptUpdate() (or EVP_CipherUpdate()) with\nNULL pointer as the output buffer and 0 as the input buffer length.\nThe AES-SIV implementation in OpenSSL just returns success for such a call\ninstead of performing the associated data authentication operation.\nThe empty data thus will not be authenticated.\n\nAs this issue does not affect non-empty associated data authentication and\nwe expect it to be rare for an application to use empty associated data\nentries this is qualified as Low severity issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.1.1-r2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-42375_3.9:ssl_client_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2021-42375] 3.9:ssl_client 1.29.3-r10"
              },
              "help": {
                "text": "An incorrect handling of a special element in Busybox's ash applet leads to denial of service when processing a crafted shell command, due to the shell mistaking specific characters for reserved characters. This may be used for DoS under rare conditions of filtered command input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2020-1971_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2020-1971] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "The X.509 GeneralName type is a generic type for representing different types of names. One of those name types is known as EDIPartyName. OpenSSL provides a function GENERAL_NAME_cmp which compares different instances of a GENERAL_NAME to see if they are equal or not. This function behaves incorrectly when both GENERAL_NAMEs contain an EDIPARTYNAME. A NULL pointer dereference and a crash may occur leading to a possible denial of service attack. OpenSSL itself uses the GENERAL_NAME_cmp function for two purposes: 1) Comparing CRL distribution point names between an available CRL and a CRL distribution point embedded in an X509 certificate 2) When verifying that a timestamp response token signer matches the timestamp authority name (exposed via the API functions TS_RESP_verify_response and TS_RESP_verify_token) If an attacker can control both items being compared then that attacker could trigger a crash. For example if the attacker can trick a client or server into checking a malicious certificate against a malicious CRL then this may occur. Note that some applications automatically download CRLs based on a URL embedded in a certificate. This checking happens prior to the signatures on the certificate and CRL being verified. OpenSSL's s_server, s_client and verify tools have support for the \"-crl_download\" option which implements automatic CRL downloading and this attack has been demonstrated to work against those tools. Note that an unrelated bug means that affected versions of OpenSSL cannot parse or construct correct encodings of EDIPARTYNAME. However it is possible to construct a malformed EDIPARTYNAME that OpenSSL's parser will accept and hence trigger this attack. All OpenSSL 1.1.1 and 1.0.2 versions are affected by this issue. Other OpenSSL releases are out of support and have not been checked. Fixed in OpenSSL 1.1.1i (Affected 1.1.1-1.1.1h). Fixed in OpenSSL 1.0.2x (Affected 1.0.2-1.0.2w).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.1.1i-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2019-15608_yarn_1.15.2",
              "shortDescription": {
                "text": "[CVE-2019-15608] yarn 1.15.2"
              },
              "help": {
                "text": "The package integrity validation in yarn \u003c 1.19.0 contains a TOCTOU vulnerability where the hash is computed before writing a package to cache. It's not computed again when reading from the cache. This may lead to a cache pollution attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__e29ab506780450f339cd5573955081fe622c4c6e1774f896bfb4c231669e41d2.tar `       | [1.19.0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2020-7608_yargs-parser_9.0.2",
              "shortDescription": {
                "text": "[CVE-2020-7608] yargs-parser 9.0.2"
              },
              "help": {
                "text": "yargs-parser could be tricked into adding or modifying properties of Object.prototype using a \"__proto__\" payload.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [13.1.2], [15.0.1], [18.1.1], [5.0.1]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-32640_ws_6.2.1",
              "shortDescription": {
                "text": "[CVE-2021-32640] ws 6.2.1"
              },
              "help": {
                "text": "ws is an open source WebSocket client and server library for Node.js. A specially crafted value of the `Sec-Websocket-Protocol` header can be used to significantly slow down a ws server. The vulnerability has been fixed in ws@7.4.6 (https://github.com/websockets/ws/commit/00c425ec77993773d823f018f64a5c44e17023ff). In vulnerable versions of ws, the issue can be mitigated by reducing the maximum allowed length of the request headers using the [`--max-http-header-size=size`](https://nodejs.org/api/cli.html#cli_max_http_header_size_size) and/or the [`maxHeaderSize`](https://nodejs.org/api/http.html#http_http_createserver_options_requestlistener) options.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `       | [5.2.3], [6.2.2], [7.4.6]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-33987_got_6.7.1",
              "shortDescription": {
                "text": "[CVE-2022-33987] got 6.7.1"
              },
              "help": {
                "text": "The got package before 12.1.0 (also fixed in 11.8.5) for Node.js allows a redirect to a UNIX socket.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [11.8.5], [12.1.0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-4304_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2022-4304] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "A timing based side channel exists in the OpenSSL RSA Decryption implementation\nwhich could be sufficient to recover a plaintext across a network in a\nBleichenbacher style attack. To achieve a successful decryption an attacker\nwould have to be able to send a very large number of trial messages for\ndecryption. The vulnerability affects all RSA padding modes: PKCS#1 v1.5,\nRSA-OEAP and RSASVE.\n\nFor example, in a TLS connection, RSA is commonly used by a client to send an\nencrypted pre-master secret to the server. An attacker that had observed a\ngenuine connection between a client and a server could use this flaw to send\ntrial messages to the server and record the time taken to process them. After a\nsufficiently large number of messages the attacker could recover the pre-master\nsecret used for the original connection and thus be able to decrypt the\napplication data sent over that connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2021-4160_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2021-4160] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "There is a carry propagation bug in the MIPS32 and MIPS64 squaring procedure. Many EC algorithms are affected, including some of the TLS 1.3 default curves. Impact was not analyzed in detail, because the pre-requisites for attack are considered unlikely and include reusing private keys. Analysis suggests that attacks against RSA and DSA as a result of this defect would be very difficult to perform and are not believed likely. Attacks against DH are considered just feasible (although very difficult) because most of the work necessary to deduce information about a private key may be performed offline. The amount of resources required for such an attack would be significant. However, for an attack on TLS to be meaningful, the server would have to share the DH private key among multiple clients, which is no longer an option since CVE-2016-0701. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0.0. It was addressed in the releases of 1.1.1m and 3.0.1 on the 15th of December 2021. For the 1.0.2 release it is addressed in git commit 6fc1aaaf3 that is available to premium support customers only. It will be made available in 1.0.2zc when it is released. The issue only affects OpenSSL on MIPS platforms. Fixed in OpenSSL 3.0.1 (Affected 3.0.0). Fixed in OpenSSL 1.1.1m (Affected 1.1.1-1.1.1l). Fixed in OpenSSL 1.0.2zc-dev (Affected 1.0.2-1.0.2zb).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2021-4160_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2021-4160] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "There is a carry propagation bug in the MIPS32 and MIPS64 squaring procedure. Many EC algorithms are affected, including some of the TLS 1.3 default curves. Impact was not analyzed in detail, because the pre-requisites for attack are considered unlikely and include reusing private keys. Analysis suggests that attacks against RSA and DSA as a result of this defect would be very difficult to perform and are not believed likely. Attacks against DH are considered just feasible (although very difficult) because most of the work necessary to deduce information about a private key may be performed offline. The amount of resources required for such an attack would be significant. However, for an attack on TLS to be meaningful, the server would have to share the DH private key among multiple clients, which is no longer an option since CVE-2016-0701. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0.0. It was addressed in the releases of 1.1.1m and 3.0.1 on the 15th of December 2021. For the 1.0.2 release it is addressed in git commit 6fc1aaaf3 that is available to premium support customers only. It will be made available in 1.0.2zc when it is released. The issue only affects OpenSSL on MIPS platforms. Fixed in OpenSSL 3.0.1 (Affected 3.0.0). Fixed in OpenSSL 1.1.1m (Affected 1.1.1-1.1.1l). Fixed in OpenSSL 1.0.2zc-dev (Affected 1.0.2-1.0.2zb).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2021-42376_3.9:ssl_client_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2021-42376] 3.9:ssl_client 1.29.3-r10"
              },
              "help": {
                "text": "A NULL pointer dereference in Busybox's hush applet leads to denial of service when processing a crafted shell command, due to missing validation after a \\x03 delimiter character. This may be used for DoS under very rare conditions of filtered command input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2009-3767_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2009-3767] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "libraries/libldap/tls_o.c in OpenLDAP 2.2 and 2.4, and possibly other versions, when OpenSSL is used, does not properly handle a '\\0' character in a domain name in the subject's Common Name (CN) field of an X.509 certificate, which allows man-in-the-middle attackers to spoof arbitrary SSL servers via a crafted certificate issued by a legitimate Certification Authority, a related issue to CVE-2009-2408.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2021-3826_3.9:libstdc++_8.3.0-r0",
              "shortDescription": {
                "text": "[CVE-2021-3826] 3.9:libstdc++ 8.3.0-r0"
              },
              "help": {
                "text": "Heap/stack buffer overflow in the dlang_lname function in d-demangle.c in libiberty allows attackers to potentially cause a denial of service (segmentation fault and crash) via a crafted mangled symbol.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2009-3767_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2009-3767] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "libraries/libldap/tls_o.c in OpenLDAP 2.2 and 2.4, and possibly other versions, when OpenSSL is used, does not properly handle a '\\0' character in a domain name in the subject's Common Name (CN) field of an X.509 certificate, which allows man-in-the-middle attackers to spoof arbitrary SSL servers via a crafted certificate issued by a legitimate Certification Authority, a related issue to CVE-2009-2408.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2021-3826_3.9:libgcc_8.3.0-r0",
              "shortDescription": {
                "text": "[CVE-2021-3826] 3.9:libgcc 8.3.0-r0"
              },
              "help": {
                "text": "Heap/stack buffer overflow in the dlang_lname function in d-demangle.c in libiberty allows attackers to potentially cause a denial of service (segmentation fault and crash) via a crafted mangled symbol.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2021-42376_3.9:busybox_1.29.3-r10",
              "shortDescription": {
                "text": "[CVE-2021-42376] 3.9:busybox 1.29.3-r10"
              },
              "help": {
                "text": "A NULL pointer dereference in Busybox's hush applet leads to denial of service when processing a crafted shell command, due to missing validation after a \\x03 delimiter character. This may be used for DoS under very rare conditions of filtered command input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-28155_request_2.88.0",
              "shortDescription": {
                "text": "[CVE-2023-28155] request 2.88.0"
              },
              "help": {
                "text": "The Request package through 2.88.1 for Node.js allows a bypass of SSRF mitigations via an attacker-controller server that does a cross-protocol redirect (HTTP to HTTPS, or HTTPS to HTTP). NOTE: This vulnerability only affects products that are no longer supported by the maintainer.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `\u003cbr/\u003e`sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2021-23839_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2021-23839] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "OpenSSL 1.0.2 supports SSLv2. If a client attempts to negotiate SSLv2 with a server that is configured to support both SSLv2 and more recent SSL and TLS versions then a check is made for a version rollback attack when unpadding an RSA signature. Clients that support SSL or TLS versions greater than SSLv2 are supposed to use a special form of padding. A server that supports greater than SSLv2 is supposed to reject connection attempts from a client where this special form of padding is present, because this indicates that a version rollback has occurred (i.e. both client and server support greater than SSLv2, and yet this is the version that is being requested). The implementation of this padding check inverted the logic so that the connection attempt is accepted if the padding is present, and rejected if it is absent. This means that such as server will accept a connection if a version rollback attack has occurred. Further the server will erroneously reject a connection if a normal SSLv2 connection attempt is made. Only OpenSSL 1.0.2 servers from version 1.0.2s to 1.0.2x are affected by this issue. In order to be vulnerable a 1.0.2 server must: 1) have configured SSLv2 support at compile time (this is off by default), 2) have configured SSLv2 support at runtime (this is off by default), 3) have configured SSLv2 ciphersuites (these are not in the default ciphersuite list) OpenSSL 1.1.1 does not have SSLv2 support and therefore is not vulnerable to this issue. The underlying error is in the implementation of the RSA_padding_check_SSLv23() function. This also affects the RSA_SSLV23_PADDING padding mode used by various other functions. Although 1.1.1 does not support SSLv2 the RSA_padding_check_SSLv23() function still exists, as does the RSA_SSLV23_PADDING padding mode. Applications that directly call that function or use that padding mode will encounter this issue. However since there is no support for the SSLv2 protocol in 1.1.1 this is considered a bug and not a security issue in that version. OpenSSL 1.0.2...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.7      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.1.1j-r0]   |"
              },
              "properties": {
                "security-severity": "3.7"
              }
            },
            {
              "id": "CVE-2024-27088_es5-ext_0.10.51",
              "shortDescription": {
                "text": "[CVE-2024-27088] es5-ext 0.10.51"
              },
              "help": {
                "text": "es5-ext contains ECMAScript 5 extensions. Passing functions with very long names or complex default argument names into `function#copy` or `function#toStringTokens` may cause the script to stall. The vulnerability is patched in v0.10.63.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `       | [0.10.63]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "XRAY-105536_npm-registry-fetch_1.1.0",
              "shortDescription": {
                "text": "[XRAY-105536] npm-registry-fetch 1.1.0"
              },
              "help": {
                "text": "Sensitive information exposure through logs",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [4.0.5], [8.1.1]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2019-1563_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2019-1563] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "In situations where an attacker receives automated notification of the success or failure of a decryption attempt an attacker, after sending a very large number of messages to be decrypted, can recover a CMS/PKCS7 transported encryption key or decrypt any RSA encrypted message that was encrypted with the public RSA key, using a Bleichenbacher padding oracle attack. Applications are not affected if they use a certificate together with the private RSA key to the CMS_decrypt or PKCS7_decrypt functions to select the correct recipient info to decrypt. Fixed in OpenSSL 1.1.1d (Affected 1.1.1-1.1.1c). Fixed in OpenSSL 1.1.0l (Affected 1.1.0-1.1.0k). Fixed in OpenSSL 1.0.2t (Affected 1.0.2-1.0.2s).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.7      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.1.1d-r0]   |"
              },
              "properties": {
                "security-severity": "3.7"
              }
            },
            {
              "id": "CVE-2021-23839_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2021-23839] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "OpenSSL 1.0.2 supports SSLv2. If a client attempts to negotiate SSLv2 with a server that is configured to support both SSLv2 and more recent SSL and TLS versions then a check is made for a version rollback attack when unpadding an RSA signature. Clients that support SSL or TLS versions greater than SSLv2 are supposed to use a special form of padding. A server that supports greater than SSLv2 is supposed to reject connection attempts from a client where this special form of padding is present, because this indicates that a version rollback has occurred (i.e. both client and server support greater than SSLv2, and yet this is the version that is being requested). The implementation of this padding check inverted the logic so that the connection attempt is accepted if the padding is present, and rejected if it is absent. This means that such as server will accept a connection if a version rollback attack has occurred. Further the server will erroneously reject a connection if a normal SSLv2 connection attempt is made. Only OpenSSL 1.0.2 servers from version 1.0.2s to 1.0.2x are affected by this issue. In order to be vulnerable a 1.0.2 server must: 1) have configured SSLv2 support at compile time (this is off by default), 2) have configured SSLv2 support at runtime (this is off by default), 3) have configured SSLv2 ciphersuites (these are not in the default ciphersuite list) OpenSSL 1.1.1 does not have SSLv2 support and therefore is not vulnerable to this issue. The underlying error is in the implementation of the RSA_padding_check_SSLv23() function. This also affects the RSA_SSLV23_PADDING padding mode used by various other functions. Although 1.1.1 does not support SSLv2 the RSA_padding_check_SSLv23() function still exists, as does the RSA_SSLV23_PADDING padding mode. Applications that directly call that function or use that padding mode will encounter this issue. However since there is no support for the SSLv2 protocol in 1.1.1 this is considered a bug and not a security issue in that version. OpenSSL 1.0.2...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.7      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.1.1j-r0]   |"
              },
              "properties": {
                "security-severity": "3.7"
              }
            },
            {
              "id": "CVE-2019-1563_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2019-1563] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "In situations where an attacker receives automated notification of the success or failure of a decryption attempt an attacker, after sending a very large number of messages to be decrypted, can recover a CMS/PKCS7 transported encryption key or decrypt any RSA encrypted message that was encrypted with the public RSA key, using a Bleichenbacher padding oracle attack. Applications are not affected if they use a certificate together with the private RSA key to the CMS_decrypt or PKCS7_decrypt functions to select the correct recipient info to decrypt. Fixed in OpenSSL 1.1.1d (Affected 1.1.1-1.1.1c). Fixed in OpenSSL 1.1.0l (Affected 1.1.0-1.1.0k). Fixed in OpenSSL 1.0.2t (Affected 1.0.2-1.0.2s).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.7      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.1.1d-r0]   |"
              },
              "properties": {
                "security-severity": "3.7"
              }
            },
            {
              "id": "XRAY-105536_npm-registry-fetch_3.1.1",
              "shortDescription": {
                "text": "[XRAY-105536] npm-registry-fetch 3.1.1"
              },
              "help": {
                "text": "Sensitive information exposure through logs",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [4.0.5], [8.1.1]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2017-18869_chownr_1.0.1",
              "shortDescription": {
                "text": "[CVE-2017-18869] chownr 1.0.1"
              },
              "help": {
                "text": "A TOCTOU issue in the chownr package before 1.1.0 for Node.js 10.10 could allow a local attacker to trick it into descending into unintended directories via symlink attacks.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 2.5      | Not Covered       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [1.1.0]   |"
              },
              "properties": {
                "security-severity": "2.5"
              }
            },
            {
              "id": "CVE-2019-1552_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2019-1552] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "OpenSSL has internal defaults for a directory tree where it can find a configuration file as well as certificates used for verification in TLS. This directory is most commonly referred to as OPENSSLDIR, and is configurable with the --prefix / --openssldir configuration options. For OpenSSL versions 1.1.0 and 1.1.1, the mingw configuration targets assume that resulting programs and libraries are installed in a Unix-like environment and the default prefix for program installation as well as for OPENSSLDIR should be '/usr/local'. However, mingw programs are Windows programs, and as such, find themselves looking at sub-directories of 'C:/usr/local', which may be world writable, which enables untrusted users to modify OpenSSL's default configuration, insert CA certificates, modify (or even replace) existing engine modules, etc. For OpenSSL 1.0.2, '/usr/local/ssl' is used as default for OPENSSLDIR on all Unix and Windows targets, including Visual C builds. However, some build instructions for the diverse Windows targets on 1.0.2 encourage you to specify your own --prefix. OpenSSL versions 1.1.1, 1.1.0 and 1.0.2 are affected by this issue. Due to the limited scope of affected deployments this has been assessed as low severity and therefore we are not creating new releases at this time. Fixed in OpenSSL 1.1.1d (Affected 1.1.1-1.1.1c). Fixed in OpenSSL 1.1.0l (Affected 1.1.0-1.1.0k). Fixed in OpenSSL 1.0.2t (Affected 1.0.2-1.0.2s).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.3      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "3.3"
              }
            },
            {
              "id": "CVE-2019-1552_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2019-1552] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "OpenSSL has internal defaults for a directory tree where it can find a configuration file as well as certificates used for verification in TLS. This directory is most commonly referred to as OPENSSLDIR, and is configurable with the --prefix / --openssldir configuration options. For OpenSSL versions 1.1.0 and 1.1.1, the mingw configuration targets assume that resulting programs and libraries are installed in a Unix-like environment and the default prefix for program installation as well as for OPENSSLDIR should be '/usr/local'. However, mingw programs are Windows programs, and as such, find themselves looking at sub-directories of 'C:/usr/local', which may be world writable, which enables untrusted users to modify OpenSSL's default configuration, insert CA certificates, modify (or even replace) existing engine modules, etc. For OpenSSL 1.0.2, '/usr/local/ssl' is used as default for OPENSSLDIR on all Unix and Windows targets, including Visual C builds. However, some build instructions for the diverse Windows targets on 1.0.2 encourage you to specify your own --prefix. OpenSSL versions 1.1.1, 1.1.0 and 1.0.2 are affected by this issue. Due to the limited scope of affected deployments this has been assessed as low severity and therefore we are not creating new releases at this time. Fixed in OpenSSL 1.1.1d (Affected 1.1.1-1.1.1c). Fixed in OpenSSL 1.1.0l (Affected 1.1.0-1.1.0k). Fixed in OpenSSL 1.0.2t (Affected 1.0.2-1.0.2s).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.3      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "3.3"
              }
            },
            {
              "id": "CVE-2024-1394_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2024-1394] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "A memory leak flaw was found in Golang in the RSA encrypting/decrypting code, which might lead to a resource exhaustion vulnerability using attacker-controlled inputs​. The memory leak happens in github.com/golang-fips/openssl/openssl/rsa.go#L113. The objects leaked are pkey​ and ctx​. That function uses named return parameters to free pkey​ and ctx​ if there is an error initializing the context or setting the different properties. All return statements related to error cases follow the \"return nil, nil, fail(...)\" pattern, meaning that pkey​ and ctx​ will be nil inside the deferred function that should free them.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2511_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2024-2511] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "Issue summary: Some non-default TLS server configurations can cause unbounded\nmemory growth when processing TLSv1.3 sessions\n\nImpact summary: An attacker may exploit certain server configurations to trigger\nunbounded memory growth that would lead to a Denial of Service\n\nThis problem can occur in TLSv1.3 if the non-default SSL_OP_NO_TICKET option is\nbeing used (but not if early_data support is also configured and the default\nanti-replay protection is in use). In this case, under certain conditions, the\nsession cache can get into an incorrect state and it will fail to flush properly\nas it fills. The session cache will continue to grow in an unbounded manner. A\nmalicious client could deliberately create the scenario for this failure to\nforce a Denial of Service. It may also happen by accident in normal operation.\n\nThis issue only affects TLS servers supporting TLSv1.3. It does not affect TLS\nclients.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue. OpenSSL\n1.0.2 is also not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.2.1-r2]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-4603_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2024-4603] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DSA keys or parameters may be very\nslow.\n\nImpact summary: Applications that use the functions EVP_PKEY_param_check()\nor EVP_PKEY_public_check() to check a DSA public key or DSA parameters may\nexperience long delays. Where the key or parameters that are being checked\nhave been obtained from an untrusted source this may lead to a Denial of\nService.\n\nThe functions EVP_PKEY_param_check() or EVP_PKEY_public_check() perform\nvarious checks on DSA parameters. Some of those computations take a long time\nif the modulus (`p` parameter) is too large.\n\nTrying to use a very large modulus is slow and OpenSSL will not allow using\npublic keys with a modulus which is over 10,000 bits in length for signature\nverification. However the key and parameter check functions do not limit\nthe modulus size when performing the checks.\n\nAn application that calls EVP_PKEY_param_check() or EVP_PKEY_public_check()\nand supplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nThese functions are not called by OpenSSL itself on untrusted DSA keys so\nonly applications that directly call these functions may be vulnerable.\n\nAlso vulnerable are the OpenSSL pkey and pkeyparam command line applications\nwhen using the `-check` option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.3.0-r2]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-6237_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2023-6237] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "Issue summary: Checking excessively long invalid RSA public keys may take\na long time.\n\nImpact summary: Applications that use the function EVP_PKEY_public_check()\nto check RSA public keys may experience long delays. Where the key that\nis being checked has been obtained from an untrusted source this may lead\nto a Denial of Service.\n\nWhen function EVP_PKEY_public_check() is called on RSA public keys,\na computation is done to confirm that the RSA modulus, n, is composite.\nFor valid RSA keys, n is a product of two or more large primes and this\ncomputation completes quickly. However, if n is an overly large prime,\nthen this computation would take a long time.\n\nAn application that calls EVP_PKEY_public_check() and supplies an RSA key\nobtained from an untrusted source could be vulnerable to a Denial of Service\nattack.\n\nThe function EVP_PKEY_public_check() is not called from other OpenSSL\nfunctions however it is called from the OpenSSL pkey command line\napplication. For that reason that application is also vulnerable if used\nwith the '-pubin' and '-check' options on untrusted data.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.1.4-r4]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-6237_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2023-6237] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "Issue summary: Checking excessively long invalid RSA public keys may take\na long time.\n\nImpact summary: Applications that use the function EVP_PKEY_public_check()\nto check RSA public keys may experience long delays. Where the key that\nis being checked has been obtained from an untrusted source this may lead\nto a Denial of Service.\n\nWhen function EVP_PKEY_public_check() is called on RSA public keys,\na computation is done to confirm that the RSA modulus, n, is composite.\nFor valid RSA keys, n is a product of two or more large primes and this\ncomputation completes quickly. However, if n is an overly large prime,\nthen this computation would take a long time.\n\nAn application that calls EVP_PKEY_public_check() and supplies an RSA key\nobtained from an untrusted source could be vulnerable to a Denial of Service\nattack.\n\nThe function EVP_PKEY_public_check() is not called from other OpenSSL\nfunctions however it is called from the OpenSSL pkey command line\napplication. For that reason that application is also vulnerable if used\nwith the '-pubin' and '-check' options on untrusted data.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.1.4-r4]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-4603_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2024-4603] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DSA keys or parameters may be very\nslow.\n\nImpact summary: Applications that use the functions EVP_PKEY_param_check()\nor EVP_PKEY_public_check() to check a DSA public key or DSA parameters may\nexperience long delays. Where the key or parameters that are being checked\nhave been obtained from an untrusted source this may lead to a Denial of\nService.\n\nThe functions EVP_PKEY_param_check() or EVP_PKEY_public_check() perform\nvarious checks on DSA parameters. Some of those computations take a long time\nif the modulus (`p` parameter) is too large.\n\nTrying to use a very large modulus is slow and OpenSSL will not allow using\npublic keys with a modulus which is over 10,000 bits in length for signature\nverification. However the key and parameter check functions do not limit\nthe modulus size when performing the checks.\n\nAn application that calls EVP_PKEY_param_check() or EVP_PKEY_public_check()\nand supplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nThese functions are not called by OpenSSL itself on untrusted DSA keys so\nonly applications that directly call these functions may be vulnerable.\n\nAlso vulnerable are the OpenSSL pkey and pkeyparam command line applications\nwhen using the `-check` option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.3.0-r2]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-1394_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2024-1394] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "A memory leak flaw was found in Golang in the RSA encrypting/decrypting code, which might lead to a resource exhaustion vulnerability using attacker-controlled inputs​. The memory leak happens in github.com/golang-fips/openssl/openssl/rsa.go#L113. The objects leaked are pkey​ and ctx​. That function uses named return parameters to free pkey​ and ctx​ if there is an error initializing the context or setting the different properties. All return statements related to error cases follow the \"return nil, nil, fail(...)\" pattern, meaning that pkey​ and ctx​ will be nil inside the deferred function that should free them.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2511_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2024-2511] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "Issue summary: Some non-default TLS server configurations can cause unbounded\nmemory growth when processing TLSv1.3 sessions\n\nImpact summary: An attacker may exploit certain server configurations to trigger\nunbounded memory growth that would lead to a Denial of Service\n\nThis problem can occur in TLSv1.3 if the non-default SSL_OP_NO_TICKET option is\nbeing used (but not if early_data support is also configured and the default\nanti-replay protection is in use). In this case, under certain conditions, the\nsession cache can get into an incorrect state and it will fail to flush properly\nas it fills. The session cache will continue to grow in an unbounded manner. A\nmalicious client could deliberately create the scenario for this failure to\nforce a Denial of Service. It may also happen by accident in normal operation.\n\nThis issue only affects TLS servers supporting TLSv1.3. It does not affect TLS\nclients.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue. OpenSSL\n1.0.2 is also not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.2.1-r2]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2021-3918_json-schema_0.2.3",
              "shortDescription": {
                "text": "[CVE-2021-3918] json-schema 0.2.3"
              },
              "help": {
                "text": "json-schema is vulnerable to Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `\u003cbr/\u003e`sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `       | [0.4.0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2021-44906_minimist_1.2.0",
              "shortDescription": {
                "text": "[CVE-2021-44906] minimist 1.2.0"
              },
              "help": {
                "text": "Minimist \u003c=1.2.5 is vulnerable to Prototype Pollution via file index.js, function setKey() (lines 69-95).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `\u003cbr/\u003e`sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [0.2.4], [1.2.6]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2020-7788_ini_1.3.5",
              "shortDescription": {
                "text": "[CVE-2020-7788] ini 1.3.5"
              },
              "help": {
                "text": "This affects the package ini before 1.3.6. If an attacker submits a malicious INI file to an application that parses it with ini.parse, they will pollute the prototype on the application. This can be exploited further depending on the context.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [1.3.6]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2021-44906_minimist_0.0.8",
              "shortDescription": {
                "text": "[CVE-2021-44906] minimist 0.0.8"
              },
              "help": {
                "text": "Minimist \u003c=1.2.5 is vulnerable to Prototype Pollution via file index.js, function setKey() (lines 69-95).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `\u003cbr/\u003e`sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `       | [0.2.4], [1.2.6]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-26136_tough-cookie_2.4.3",
              "shortDescription": {
                "text": "[CVE-2023-26136] tough-cookie 2.4.3"
              },
              "help": {
                "text": "Versions of the package tough-cookie before 4.1.3 are vulnerable to Prototype Pollution due to improper handling of Cookies when using CookieJar in rejectPublicSuffixes=false mode. This issue arises from the manner in which the objects are initialized.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `\u003cbr/\u003e`sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `       | [4.1.3]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2020-7774_y18n_3.2.1",
              "shortDescription": {
                "text": "[CVE-2020-7774] y18n 3.2.1"
              },
              "help": {
                "text": "The package y18n before 3.2.2, 4.0.1 and 5.0.5, is vulnerable to Prototype Pollution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [3.2.2], [4.0.1], [5.0.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2020-7774_y18n_4.0.0",
              "shortDescription": {
                "text": "[CVE-2020-7774] y18n 4.0.0"
              },
              "help": {
                "text": "The package y18n before 3.2.2, 4.0.1 and 5.0.5, is vulnerable to Prototype Pollution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [3.2.2], [4.0.1], [5.0.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-42282_ip_1.1.5",
              "shortDescription": {
                "text": "[CVE-2023-42282] ip 1.1.5"
              },
              "help": {
                "text": "The ip package before 1.1.9 for Node.js might allow SSRF because some IP addresses (such as 0x7f.1) are improperly categorized as globally routable via isPublic.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [1.1.9], [2.0.1]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-2068_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2022-2068] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "In addition to the c_rehash shell command injection identified in CVE-2022-1292, further circumstances where the c_rehash script does not properly sanitise shell metacharacters to prevent command injection were found by code review. When the CVE-2022-1292 was fixed it was not discovered that there are other places in the script where the file names of certificates being hashed were possibly passed to a command executed through the shell. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.4 (Affected 3.0.0,3.0.1,3.0.2,3.0.3). Fixed in OpenSSL 1.1.1p (Affected 1.1.1-1.1.1o). Fixed in OpenSSL 1.0.2zf (Affected 1.0.2-1.0.2ze).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-1292_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2022-1292] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "The c_rehash script does not properly sanitise shell metacharacters to prevent command injection. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.3 (Affected 3.0.0,3.0.1,3.0.2). Fixed in OpenSSL 1.1.1o (Affected 1.1.1-1.1.1n). Fixed in OpenSSL 1.0.2ze (Affected 1.0.2-1.0.2zd).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-49210_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2023-49210] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "The openssl (aka node-openssl) NPM package through 2.0.0 was characterized as \"a nonsense wrapper with no real purpose\" by its author, and accepts an opts argument that contains a verb field (used for command execution). NOTE: This vulnerability only affects products that are no longer supported by the maintainer.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-1292_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2022-1292] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "The c_rehash script does not properly sanitise shell metacharacters to prevent command injection. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.3 (Affected 3.0.0,3.0.1,3.0.2). Fixed in OpenSSL 1.1.1o (Affected 1.1.1-1.1.1n). Fixed in OpenSSL 1.0.2ze (Affected 1.0.2-1.0.2zd).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-2068_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2022-2068] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "In addition to the c_rehash shell command injection identified in CVE-2022-1292, further circumstances where the c_rehash script does not properly sanitise shell metacharacters to prevent command injection were found by code review. When the CVE-2022-1292 was fixed it was not discovered that there are other places in the script where the file names of certificates being hashed were possibly passed to a command executed through the shell. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.4 (Affected 3.0.0,3.0.1,3.0.2,3.0.3). Fixed in OpenSSL 1.1.1p (Affected 1.1.1-1.1.1o). Fixed in OpenSSL 1.0.2zf (Affected 1.0.2-1.0.2ze).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-49210_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2023-49210] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "The openssl (aka node-openssl) NPM package through 2.0.0 was characterized as \"a nonsense wrapper with no real purpose\" by its author, and accepts an opts argument that contains a verb field (used for command execution). NOTE: This vulnerability only affects products that are no longer supported by the maintainer.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2019-15847_3.9:libstdc++_8.3.0-r0",
              "shortDescription": {
                "text": "[CVE-2019-15847] 3.9:libstdc++ 8.3.0-r0"
              },
              "help": {
                "text": "The POWER9 backend in GNU Compiler Collection (GCC) before version 10 could optimize multiple calls of the __builtin_darn intrinsic into a single call, thus reducing the entropy of the random number generator. This occurred because a volatile operation was not specified. For example, within a single execution of a program, the output of every __builtin_darn() call may be the same.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [9.3.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-24785_moment_2.24.0",
              "shortDescription": {
                "text": "[CVE-2022-24785] moment 2.24.0"
              },
              "help": {
                "text": "Moment.js is a JavaScript date library for parsing, validating, manipulating, and formatting dates. A path traversal vulnerability impacts npm (server) users of Moment.js between versions 1.0.1 and 2.29.1, especially if a user-provided locale string is directly used to switch moment locale. This problem is patched in 2.29.2, and the patch can be applied to all affected versions. As a workaround, sanitize the user-provided locale name before passing it to Moment.js.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `       | [2.29.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-5363_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2023-5363] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "Issue summary: A bug has been identified in the processing of key and\ninitialisation vector (IV) lengths.  This can lead to potential truncation\nor overruns during the initialisation of some symmetric ciphers.\n\nImpact summary: A truncation in the IV can result in non-uniqueness,\nwhich could result in loss of confidentiality for some cipher modes.\n\nWhen calling EVP_EncryptInit_ex2(), EVP_DecryptInit_ex2() or\nEVP_CipherInit_ex2() the provided OSSL_PARAM array is processed after\nthe key and IV have been established.  Any alterations to the key length,\nvia the \"keylen\" parameter or the IV length, via the \"ivlen\" parameter,\nwithin the OSSL_PARAM array will not take effect as intended, potentially\ncausing truncation or overreading of these values.  The following ciphers\nand cipher modes are impacted: RC2, RC4, RC5, CCM, GCM and OCB.\n\nFor the CCM, GCM and OCB cipher modes, truncation of the IV can result in\nloss of confidentiality.  For example, when following NIST's SP 800-38D\nsection 8.2.1 guidance for constructing a deterministic IV for AES in\nGCM mode, truncation of the counter portion could lead to IV reuse.\n\nBoth truncations and overruns of the key and overruns of the IV will\nproduce incorrect results and could, in some cases, trigger a memory\nexception.  However, these issues are not currently assessed as security\ncritical.\n\nChanging the key and/or IV lengths is not considered to be a common operation\nand the vulnerable API was recently introduced. Furthermore it is likely that\napplication developers will have spotted this problem during testing since\ndecryption would fail unless both peers in the communication were similarly\nvulnerable. For these reasons we expect the probability of an application being\nvulnerable to this to be quite low. However if an application is vulnerable then\nthis issue is considered very serious. For these reasons we have assessed this\nissue as Moderate severity overall.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.1.4-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-24999_qs_6.7.0",
              "shortDescription": {
                "text": "[CVE-2022-24999] qs 6.7.0"
              },
              "help": {
                "text": "qs before 6.10.3, as used in Express before 4.17.3 and other products, allows attackers to cause a Node process hang for an Express application because an __ proto__ key can be used. In many typical Express use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as a[__proto__]=b\u0026a[__proto__]\u0026a[length]=100000000. The fix was backported to qs 6.9.7, 6.8.3, 6.7.3, 6.6.1, 6.5.3, 6.4.1, 6.3.3, and 6.2.4 (and therefore Express 4.17.3, which has \"deps: qs@6.9.7\" in its release description, is not vulnerable).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `       | [6.10.3], [6.2.4], [6.3.3], [6.4.1], [6.5.3], [6.6.1], [6.7.3], [6.8.3], [6.9.7]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-23337_lodash_4.17.15",
              "shortDescription": {
                "text": "[CVE-2021-23337] lodash 4.17.15"
              },
              "help": {
                "text": "Lodash versions prior to 4.17.21 are vulnerable to Command Injection via the template function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Applicable       | `sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `       | [4.17.21]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2023-5363_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2023-5363] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "Issue summary: A bug has been identified in the processing of key and\ninitialisation vector (IV) lengths.  This can lead to potential truncation\nor overruns during the initialisation of some symmetric ciphers.\n\nImpact summary: A truncation in the IV can result in non-uniqueness,\nwhich could result in loss of confidentiality for some cipher modes.\n\nWhen calling EVP_EncryptInit_ex2(), EVP_DecryptInit_ex2() or\nEVP_CipherInit_ex2() the provided OSSL_PARAM array is processed after\nthe key and IV have been established.  Any alterations to the key length,\nvia the \"keylen\" parameter or the IV length, via the \"ivlen\" parameter,\nwithin the OSSL_PARAM array will not take effect as intended, potentially\ncausing truncation or overreading of these values.  The following ciphers\nand cipher modes are impacted: RC2, RC4, RC5, CCM, GCM and OCB.\n\nFor the CCM, GCM and OCB cipher modes, truncation of the IV can result in\nloss of confidentiality.  For example, when following NIST's SP 800-38D\nsection 8.2.1 guidance for constructing a deterministic IV for AES in\nGCM mode, truncation of the counter portion could lead to IV reuse.\n\nBoth truncations and overruns of the key and overruns of the IV will\nproduce incorrect results and could, in some cases, trigger a memory\nexception.  However, these issues are not currently assessed as security\ncritical.\n\nChanging the key and/or IV lengths is not considered to be a common operation\nand the vulnerable API was recently introduced. Furthermore it is likely that\napplication developers will have spotted this problem during testing since\ndecryption would fail unless both peers in the communication were similarly\nvulnerable. For these reasons we expect the probability of an application being\nvulnerable to this to be quite low. However if an application is vulnerable then\nthis issue is considered very serious. For these reasons we have assessed this\nissue as Moderate severity overall.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.1.4-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-4435_yarn_1.15.2",
              "shortDescription": {
                "text": "[CVE-2021-4435] yarn 1.15.2"
              },
              "help": {
                "text": "An untrusted search path vulnerability was found in Yarn. When a victim runs certain Yarn commands in a directory with attacker-controlled content, malicious commands could be executed in unexpected ways.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Applicable       | `sha256__e29ab506780450f339cd5573955081fe622c4c6e1774f896bfb4c231669e41d2.tar `       | [1.22.13]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2021-32804_tar_4.4.6",
              "shortDescription": {
                "text": "[CVE-2021-32804] tar 4.4.6"
              },
              "help": {
                "text": "The npm package \"tar\" (aka node-tar) before versions 6.1.1, 5.0.6, 4.4.14, and 3.3.2 has a arbitrary File Creation/Overwrite vulnerability due to insufficient absolute path sanitization. node-tar aims to prevent extraction of absolute file paths by turning absolute paths into relative paths when the `preservePaths` flag is not set to `true`. This is achieved by stripping the absolute path root from any absolute file paths contained in a tar file. For example `/home/user/.bashrc` would turn into `home/user/.bashrc`. This logic was insufficient when file paths contained repeated path roots such as `////home/user/.bashrc`. `node-tar` would only strip a single path root from such paths. When given an absolute file path with repeating path roots, the resulting path (e.g. `///home/user/.bashrc`) would still resolve to an absolute path, thus allowing arbitrary file creation and overwrite. This issue was addressed in releases 3.2.2, 4.4.14, 5.0.6 and 6.1.1. Users may work around this vulnerability without upgrading by creating a custom `onentry` method which sanitizes the `entry.path` or a `filter` method which removes entries with absolute paths. See referenced GitHub Advisory for details. Be aware of CVE-2021-32803 which fixes a similar bug in later versions of tar.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Applicable       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [3.2.2], [4.4.14], [5.0.6], [6.1.1]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2022-3517_minimatch_3.0.4",
              "shortDescription": {
                "text": "[CVE-2022-3517] minimatch 3.0.4"
              },
              "help": {
                "text": "A vulnerability was found in the minimatch package. This flaw allows a Regular Expression Denial of Service (ReDoS) when calling the braceExpand function with specific arguments, resulting in a Denial of Service.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `\u003cbr/\u003e`sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [3.0.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2019-15847_3.9:libgcc_8.3.0-r0",
              "shortDescription": {
                "text": "[CVE-2019-15847] 3.9:libgcc 8.3.0-r0"
              },
              "help": {
                "text": "The POWER9 backend in GNU Compiler Collection (GCC) before version 10 could optimize multiple calls of the __builtin_darn intrinsic into a single call, thus reducing the entropy of the random number generator. This occurred because a volatile operation was not specified. For example, within a single execution of a program, the output of every __builtin_darn() call may be the same.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [9.3.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-31129_moment_2.24.0",
              "shortDescription": {
                "text": "[CVE-2022-31129] moment 2.24.0"
              },
              "help": {
                "text": "moment is a JavaScript date library for parsing, validating, manipulating, and formatting dates. Affected versions of moment were found to use an inefficient parsing algorithm. Specifically using string-to-date parsing in moment (more specifically rfc2822 parsing, which is tried by default) has quadratic (N^2) complexity on specific inputs. Users may notice a noticeable slowdown is observed with inputs above 10k characters. Users who pass user-provided strings without sanity length checks to moment constructor are vulnerable to (Re)DoS attacks. The problem is patched in 2.29.4, the patch can be applied to all affected versions with minimal tweaking. Users are advised to upgrade. Users unable to upgrade should consider limiting date lengths accepted from user input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `       | [2.29.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-3807_ansi-regex_3.0.0",
              "shortDescription": {
                "text": "[CVE-2021-3807] ansi-regex 3.0.0"
              },
              "help": {
                "text": "ansi-regex is vulnerable to Inefficient Regular Expression Complexity",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [3.0.1], [4.1.1], [5.0.1], [6.0.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-38900_decode-uri-component_0.2.0",
              "shortDescription": {
                "text": "[CVE-2022-38900] decode-uri-component 0.2.0"
              },
              "help": {
                "text": "decode-uri-component 0.2.0 is vulnerable to Improper Input Validation resulting in DoS.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [0.2.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-25883_semver_5.5.0",
              "shortDescription": {
                "text": "[CVE-2022-25883] semver 5.5.0"
              },
              "help": {
                "text": "Versions of the package semver before 7.5.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the function new Range, when untrusted user data is provided as a range.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [5.7.2], [6.3.1], [7.5.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-25883_semver_6.2.0",
              "shortDescription": {
                "text": "[CVE-2022-25883] semver 6.2.0"
              },
              "help": {
                "text": "Versions of the package semver before 7.5.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the function new Range, when untrusted user data is provided as a range.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `       | [5.7.2], [6.3.1], [7.5.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0217_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2023-0217] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "An invalid pointer dereference on read can be triggered when an\napplication tries to check a malformed DSA public key by the\nEVP_PKEY_public_check() function. This will most likely lead\nto an application crash. This function can be called on public\nkeys supplied from untrusted sources which could allow an attacker\nto cause a denial of service attack.\n\nThe TLS implementation in OpenSSL does not call this function\nbut applications might call the function if there are additional\nsecurity requirements imposed by standards such as FIPS 140-3.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-24999_qs_6.5.2",
              "shortDescription": {
                "text": "[CVE-2022-24999] qs 6.5.2"
              },
              "help": {
                "text": "qs before 6.10.3, as used in Express before 4.17.3 and other products, allows attackers to cause a Node process hang for an Express application because an __ proto__ key can be used. In many typical Express use cases, an unauthenticated remote attacker can place the attack payload in the query string of the URL that is used to visit the application, such as a[__proto__]=b\u0026a[__proto__]\u0026a[length]=100000000. The fix was backported to qs 6.9.7, 6.8.3, 6.7.3, 6.6.1, 6.5.3, 6.4.1, 6.3.3, and 6.2.4 (and therefore Express 4.17.3, which has \"deps: qs@6.9.7\" in its release description, is not vulnerable).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `\u003cbr/\u003e`sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `       | [6.10.3], [6.2.4], [6.3.3], [6.4.1], [6.5.3], [6.6.1], [6.7.3], [6.8.3], [6.9.7]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2020-8203_lodash_4.17.15",
              "shortDescription": {
                "text": "[CVE-2020-8203] lodash 4.17.15"
              },
              "help": {
                "text": "Prototype pollution attack when using _.zipObjectDeep in lodash before 4.17.20.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.4      | Not Applicable       | `sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `       | [4.17.19]   |"
              },
              "properties": {
                "security-severity": "7.4"
              }
            },
            {
              "id": "CVE-2022-25881_http-cache-semantics_3.8.1",
              "shortDescription": {
                "text": "[CVE-2022-25881] http-cache-semantics 3.8.1"
              },
              "help": {
                "text": "This affects versions of the package http-cache-semantics before 4.1.1. The issue can be exploited via malicious request header values sent to a server, when that server reads the cache policy from the request using this library.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [4.1.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0217_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2023-0217] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "An invalid pointer dereference on read can be triggered when an\napplication tries to check a malformed DSA public key by the\nEVP_PKEY_public_check() function. This will most likely lead\nto an application crash. This function can be called on public\nkeys supplied from untrusted sources which could allow an attacker\nto cause a denial of service attack.\n\nThe TLS implementation in OpenSSL does not call this function\nbut applications might call the function if there are additional\nsecurity requirements imposed by standards such as FIPS 140-3.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-32804_tar_2.2.1",
              "shortDescription": {
                "text": "[CVE-2021-32804] tar 2.2.1"
              },
              "help": {
                "text": "The npm package \"tar\" (aka node-tar) before versions 6.1.1, 5.0.6, 4.4.14, and 3.3.2 has a arbitrary File Creation/Overwrite vulnerability due to insufficient absolute path sanitization. node-tar aims to prevent extraction of absolute file paths by turning absolute paths into relative paths when the `preservePaths` flag is not set to `true`. This is achieved by stripping the absolute path root from any absolute file paths contained in a tar file. For example `/home/user/.bashrc` would turn into `home/user/.bashrc`. This logic was insufficient when file paths contained repeated path roots such as `////home/user/.bashrc`. `node-tar` would only strip a single path root from such paths. When given an absolute file path with repeating path roots, the resulting path (e.g. `///home/user/.bashrc`) would still resolve to an absolute path, thus allowing arbitrary file creation and overwrite. This issue was addressed in releases 3.2.2, 4.4.14, 5.0.6 and 6.1.1. Users may work around this vulnerability without upgrading by creating a custom `onentry` method which sanitizes the `entry.path` or a `filter` method which removes entries with absolute paths. See referenced GitHub Advisory for details. Be aware of CVE-2021-32803 which fixes a similar bug in later versions of tar.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Applicable       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [3.2.2], [4.4.14], [5.0.6], [6.1.1]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2023-0286_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2023-0286] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "There is a type confusion vulnerability relating to X.400 address processing\ninside an X.509 GeneralName. X.400 addresses were parsed as an ASN1_STRING but\nthe public structure definition for GENERAL_NAME incorrectly specified the type\nof the x400Address field as ASN1_TYPE. This field is subsequently interpreted by\nthe OpenSSL function GENERAL_NAME_cmp as an ASN1_TYPE rather than an\nASN1_STRING.\n\nWhen CRL checking is enabled (i.e. the application sets the\nX509_V_FLAG_CRL_CHECK flag), this vulnerability may allow an attacker to pass\narbitrary pointers to a memcmp call, enabling them to read memory contents or\nenact a denial of service. In most cases, the attack requires the attacker to\nprovide both the certificate chain and CRL, neither of which need to have a\nvalid signature. If the attacker only controls one of these inputs, the other\ninput must already contain an X.400 address as a CRL distribution point, which\nis uncommon. As such, this vulnerability is most likely to only affect\napplications which have implemented their own functionality for retrieving CRLs\nover a network.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.4      | Not Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.4"
              }
            },
            {
              "id": "CVE-2022-25883_semver_5.3.0",
              "shortDescription": {
                "text": "[CVE-2022-25883] semver 5.3.0"
              },
              "help": {
                "text": "Versions of the package semver before 7.5.2 are vulnerable to Regular Expression Denial of Service (ReDoS) via the function new Range, when untrusted user data is provided as a range.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `\u003cbr/\u003e`sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `       | [5.7.2], [6.3.1], [7.5.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-37712_tar_4.4.6",
              "shortDescription": {
                "text": "[CVE-2021-37712] tar 4.4.6"
              },
              "help": {
                "text": "The npm package \"tar\" (aka node-tar) before versions 4.4.18, 5.0.10, and 6.1.9 has an arbitrary file creation/overwrite and arbitrary code execution vulnerability. node-tar aims to guarantee that any file whose location would be modified by a symbolic link is not extracted. This is, in part, achieved by ensuring that extracted directories are not symlinks. Additionally, in order to prevent unnecessary stat calls to determine whether a given path is a directory, paths are cached when directories are created. This logic was insufficient when extracting tar files that contained both a directory and a symlink with names containing unicode values that normalized to the same value. Additionally, on Windows systems, long path portions would resolve to the same file system entities as their 8.3 \"short path\" counterparts. A specially crafted tar archive could thus include a directory with one form of the path, followed by a symbolic link with a different string that resolves to the same file system entity, followed by a file using the first form. By first creating a directory, and then replacing that directory with a symlink that had a different apparent name that resolved to the same entry in the filesystem, it was thus possible to bypass node-tar symlink checks on directories, essentially allowing an untrusted tar file to symlink into an arbitrary location and subsequently extracting arbitrary files into that location, thus allowing arbitrary file creation and overwrite. These issues were addressed in releases 4.4.18, 5.0.10 and 6.1.9. The v3 branch of node-tar has been deprecated and did not receive patches for these issues. If you are still using a v3 release we recommend you update to a more recent version of node-tar. If this is not possible, a workaround is available in the referenced GHSA-qq89-hq3f-393p.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.6      | Not Applicable       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [4.4.18], [5.0.10], [6.1.9]   |"
              },
              "properties": {
                "security-severity": "8.6"
              }
            },
            {
              "id": "CVE-2023-0286_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2023-0286] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "There is a type confusion vulnerability relating to X.400 address processing\ninside an X.509 GeneralName. X.400 addresses were parsed as an ASN1_STRING but\nthe public structure definition for GENERAL_NAME incorrectly specified the type\nof the x400Address field as ASN1_TYPE. This field is subsequently interpreted by\nthe OpenSSL function GENERAL_NAME_cmp as an ASN1_TYPE rather than an\nASN1_STRING.\n\nWhen CRL checking is enabled (i.e. the application sets the\nX509_V_FLAG_CRL_CHECK flag), this vulnerability may allow an attacker to pass\narbitrary pointers to a memcmp call, enabling them to read memory contents or\nenact a denial of service. In most cases, the attack requires the attacker to\nprovide both the certificate chain and CRL, neither of which need to have a\nvalid signature. If the attacker only controls one of these inputs, the other\ninput must already contain an X.400 address as a CRL distribution point, which\nis uncommon. As such, this vulnerability is most likely to only affect\napplications which have implemented their own functionality for retrieving CRLs\nover a network.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.4      | Not Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.4"
              }
            },
            {
              "id": "CVE-2020-8203_lodash.pick_4.4.0",
              "shortDescription": {
                "text": "[CVE-2020-8203] lodash.pick 4.4.0"
              },
              "help": {
                "text": "Prototype pollution attack when using _.zipObjectDeep in lodash before 4.17.20.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.4      | Not Applicable       | `sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.4"
              }
            },
            {
              "id": "CVE-2016-7798_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2016-7798] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "The openssl gem for Ruby uses the same initialization vector (IV) in GCM Mode (aes-*-gcm) when the IV is set before the key, which makes it easier for context-dependent attackers to bypass the encryption protection mechanism.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2016-7798_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2016-7798] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "The openssl gem for Ruby uses the same initialization vector (IV) in GCM Mode (aes-*-gcm) when the IV is set before the key, which makes it easier for context-dependent attackers to bypass the encryption protection mechanism.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-3449_3.9:libssl1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2021-3449] 3.9:libssl1.1 1.1.1b-r1"
              },
              "help": {
                "text": "An OpenSSL TLS server may crash if sent a maliciously crafted renegotiation ClientHello message from a client. If a TLSv1.2 renegotiation ClientHello omits the signature_algorithms extension (where it was present in the initial ClientHello), but includes a signature_algorithms_cert extension then a NULL pointer dereference will result, leading to a crash and a denial of service attack. A server is only vulnerable if it has TLSv1.2 and renegotiation enabled (which is the default configuration). OpenSSL TLS clients are not impacted by this issue. All OpenSSL 1.1.1 versions are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1k. OpenSSL 1.0.2 is not impacted by this issue. Fixed in OpenSSL 1.1.1k (Affected 1.1.1-1.1.1j).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.1.1k-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2020-28500_lodash_4.17.15",
              "shortDescription": {
                "text": "[CVE-2020-28500] lodash 4.17.15"
              },
              "help": {
                "text": "Lodash versions prior to 4.17.21 are vulnerable to Regular Expression Denial of Service (ReDoS) via the toNumber, trim and trimEnd functions.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `       | [4.17.21]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-3449_3.9:libcrypto1.1_1.1.1b-r1",
              "shortDescription": {
                "text": "[CVE-2021-3449] 3.9:libcrypto1.1 1.1.1b-r1"
              },
              "help": {
                "text": "An OpenSSL TLS server may crash if sent a maliciously crafted renegotiation ClientHello message from a client. If a TLSv1.2 renegotiation ClientHello omits the signature_algorithms extension (where it was present in the initial ClientHello), but includes a signature_algorithms_cert extension then a NULL pointer dereference will result, leading to a crash and a denial of service attack. A server is only vulnerable if it has TLSv1.2 and renegotiation enabled (which is the default configuration). OpenSSL TLS clients are not impacted by this issue. All OpenSSL 1.1.1 versions are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1k. OpenSSL 1.0.2 is not impacted by this issue. Fixed in OpenSSL 1.1.1k (Affected 1.1.1-1.1.1j).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Applicable       | `sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar `       | [1.1.1k-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2024-28863_tar_2.2.1",
              "shortDescription": {
                "text": "[CVE-2024-28863] tar 2.2.1"
              },
              "help": {
                "text": "node-tar is a Tar for Node.js. node-tar prior to version 6.2.1 has no limit on the number of sub-folders created in the folder creation process. An attacker who generates a large number of sub-folders can consume memory on the system running node-tar and even crash the Node.js client within few seconds of running it using a path with too many sub-folders inside. Version 6.2.1 fixes this issue by preventing extraction in excessively deep sub-folders.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Applicable       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [6.2.1]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2024-28863_tar_4.4.6",
              "shortDescription": {
                "text": "[CVE-2024-28863] tar 4.4.6"
              },
              "help": {
                "text": "node-tar is a Tar for Node.js. node-tar prior to version 6.2.1 has no limit on the number of sub-folders created in the folder creation process. An attacker who generates a large number of sub-folders can consume memory on the system running node-tar and even crash the Node.js client within few seconds of running it using a path with too many sub-folders inside. Version 6.2.1 fixes this issue by preventing extraction in excessively deep sub-folders.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Applicable       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `       | [6.2.1]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2020-7598_minimist_1.2.0",
              "shortDescription": {
                "text": "[CVE-2020-7598] minimist 1.2.0"
              },
              "help": {
                "text": "minimist before 1.2.2 could be tricked into adding or modifying properties of Object.prototype using a \"constructor\" or \"__proto__\" payload.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.6      | Not Applicable       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `\u003cbr/\u003e`sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `       | [0.2.1], [1.2.3]   |"
              },
              "properties": {
                "security-severity": "5.6"
              }
            },
            {
              "id": "CVE-2020-7598_minimist_0.0.8",
              "shortDescription": {
                "text": "[CVE-2020-7598] minimist 0.0.8"
              },
              "help": {
                "text": "minimist before 1.2.2 could be tricked into adding or modifying properties of Object.prototype using a \"constructor\" or \"__proto__\" payload.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.6      | Not Applicable       | `sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar `\u003cbr/\u003e`sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar `       | [0.2.1], [1.2.3]   |"
              },
              "properties": {
                "security-severity": "5.6"
              }
            }
          ],
          "version": "3.96.1"
        }
      },
      "results": [
        {
          "ruleId": "CVE-2022-37434_3.9:zlib_1.2.11-r1",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "[CVE-2022-37434] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3711_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "[CVE-2021-3711] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3711_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "[CVE-2021-3711] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-48174_3.9:busybox_1.29.3-r10",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "text": "[CVE-2022-48174] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-36159_3.9:apk-tools_2.10.3-r1",
          "ruleIndex": 4,
          "level": "error",
          "message": {
            "text": "[CVE-2021-36159] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-7769_nodemailer_6.1.1",
          "ruleIndex": 5,
          "level": "error",
          "message": {
            "text": "[CVE-2020-7769] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-7769_nodemailer_6.3.0",
          "ruleIndex": 6,
          "level": "error",
          "message": {
            "text": "[CVE-2020-7769] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-27307_jsonata_1.6.5",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "[CVE-2024-27307] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-48174_3.9:ssl_client_1.29.3-r10",
          "ruleIndex": 8,
          "level": "error",
          "message": {
            "text": "[CVE-2022-48174] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0464_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 9,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0464] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4450_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "[CVE-2022-4450] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0401_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 11,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0401] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3712_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "[CVE-2021-3712] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-25032_3.9:zlib_1.2.11-r1",
          "ruleIndex": 13,
          "level": "error",
          "message": {
            "text": "[CVE-2018-25032] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4450_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 14,
          "level": "error",
          "message": {
            "text": "[CVE-2022-4450] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3712_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 15,
          "level": "error",
          "message": {
            "text": "[CVE-2021-3712] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-3602_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "[CVE-2022-3602] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0401_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 17,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0401] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0464_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 18,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0464] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-3786_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "[CVE-2022-3786] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-3786_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 20,
          "level": "error",
          "message": {
            "text": "[CVE-2022-3786] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0215_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 21,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0215] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0216_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 22,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0216] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-3602_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 23,
          "level": "error",
          "message": {
            "text": "[CVE-2022-3602] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0215_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 24,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0215] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0216_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 25,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0216] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-21222_css-what_2.1.3",
          "ruleIndex": 26,
          "level": "error",
          "message": {
            "text": "[CVE-2022-21222] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-28391_3.9:busybox_1.29.3-r10",
          "ruleIndex": 27,
          "level": "error",
          "message": {
            "text": "[CVE-2022-28391] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-8116_dot-prop_4.2.0",
          "ruleIndex": 28,
          "level": "error",
          "message": {
            "text": "[CVE-2020-8116] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-28831_3.9:busybox_1.29.3-r10",
          "ruleIndex": 29,
          "level": "error",
          "message": {
            "text": "[CVE-2021-28831] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-16776_npm_6.4.1",
          "ruleIndex": 30,
          "level": "error",
          "message": {
            "text": "[CVE-2019-16776] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-7754_npm-user-validate_1.0.0",
          "ruleIndex": 31,
          "level": "error",
          "message": {
            "text": "[CVE-2020-7754] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42382_3.9:busybox_1.29.3-r10",
          "ruleIndex": 32,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42382] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-23400_nodemailer_6.3.0",
          "ruleIndex": 33,
          "level": "error",
          "message": {
            "text": "[CVE-2021-23400] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42381_3.9:busybox_1.29.3-r10",
          "ruleIndex": 34,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42381] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-0778_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 35,
          "level": "error",
          "message": {
            "text": "[CVE-2022-0778] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42385_3.9:ssl_client_1.29.3-r10",
          "ruleIndex": 36,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42385] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-32803_tar_4.4.6",
          "ruleIndex": 37,
          "level": "error",
          "message": {
            "text": "[CVE-2021-32803] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-1967_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "[CVE-2020-1967] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-5448_yarn_1.15.2",
          "ruleIndex": 39,
          "level": "error",
          "message": {
            "text": "[CVE-2019-5448] sha256__e29ab506780450f339cd5573955081fe622c4c6e1774f896bfb4c231669e41d2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3803_nth-check_1.0.2",
          "ruleIndex": 40,
          "level": "error",
          "message": {
            "text": "[CVE-2021-3803] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42380_3.9:busybox_1.29.3-r10",
          "ruleIndex": 41,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42380] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-37713_tar_4.4.6",
          "ruleIndex": 42,
          "level": "error",
          "message": {
            "text": "[CVE-2021-37713] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-13173_fstream_1.0.11",
          "ruleIndex": 43,
          "level": "error",
          "message": {
            "text": "[CVE-2019-13173] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-23400_nodemailer_6.1.1",
          "ruleIndex": 44,
          "level": "error",
          "message": {
            "text": "[CVE-2021-23400] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42382_3.9:ssl_client_1.29.3-r10",
          "ruleIndex": 45,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42382] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30065_3.9:ssl_client_1.29.3-r10",
          "ruleIndex": 46,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30065] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-27290_ssri_5.3.0",
          "ruleIndex": 47,
          "level": "error",
          "message": {
            "text": "[CVE-2021-27290] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-37890_ws_3.3.3",
          "ruleIndex": 48,
          "level": "error",
          "message": {
            "text": "[CVE-2024-37890] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-30139_3.9:apk-tools_2.10.3-r1",
          "ruleIndex": 49,
          "level": "error",
          "message": {
            "text": "[CVE-2021-30139] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-1967_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 50,
          "level": "error",
          "message": {
            "text": "[CVE-2020-1967] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-20834_tar_2.2.1",
          "ruleIndex": 51,
          "level": "error",
          "message": {
            "text": "[CVE-2018-20834] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-28391_3.9:ssl_client_1.29.3-r10",
          "ruleIndex": 52,
          "level": "error",
          "message": {
            "text": "[CVE-2022-28391] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30065_3.9:busybox_1.29.3-r10",
          "ruleIndex": 53,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30065] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-8131_yarn_1.15.2",
          "ruleIndex": 54,
          "level": "error",
          "message": {
            "text": "[CVE-2020-8131] sha256__e29ab506780450f339cd5573955081fe622c4c6e1774f896bfb4c231669e41d2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-0778_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 55,
          "level": "error",
          "message": {
            "text": "[CVE-2022-0778] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42384_3.9:busybox_1.29.3-r10",
          "ruleIndex": 56,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42384] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42386_3.9:busybox_1.29.3-r10",
          "ruleIndex": 57,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42386] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-28831_3.9:ssl_client_1.29.3-r10",
          "ruleIndex": 58,
          "level": "error",
          "message": {
            "text": "[CVE-2021-28831] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-28469_glob-parent_3.1.0",
          "ruleIndex": 59,
          "level": "error",
          "message": {
            "text": "[CVE-2020-28469] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42380_3.9:ssl_client_1.29.3-r10",
          "ruleIndex": 60,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42380] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42381_3.9:ssl_client_1.29.3-r10",
          "ruleIndex": 61,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42381] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-23840_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 62,
          "level": "error",
          "message": {
            "text": "[CVE-2021-23840] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-37701_tar_4.4.6",
          "ruleIndex": 63,
          "level": "error",
          "message": {
            "text": "[CVE-2021-37701] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42383_3.9:busybox_1.29.3-r10",
          "ruleIndex": 64,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42383] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42383_3.9:ssl_client_1.29.3-r10",
          "ruleIndex": 65,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42383] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42384_3.9:ssl_client_1.29.3-r10",
          "ruleIndex": 66,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42384] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42385_3.9:busybox_1.29.3-r10",
          "ruleIndex": 67,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42385] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-37713_tar_2.2.1",
          "ruleIndex": 68,
          "level": "error",
          "message": {
            "text": "[CVE-2021-37713] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42386_3.9:ssl_client_1.29.3-r10",
          "ruleIndex": 69,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42386] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42379_3.9:ssl_client_1.29.3-r10",
          "ruleIndex": 70,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42379] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-27290_ssri_6.0.0",
          "ruleIndex": 71,
          "level": "error",
          "message": {
            "text": "[CVE-2021-27290] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-23840_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 72,
          "level": "error",
          "message": {
            "text": "[CVE-2021-23840] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-37890_ws_6.2.1",
          "ruleIndex": 73,
          "level": "error",
          "message": {
            "text": "[CVE-2024-37890] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3450_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 74,
          "level": "error",
          "message": {
            "text": "[CVE-2021-3450] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42378_3.9:ssl_client_1.29.3-r10",
          "ruleIndex": 75,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42378] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42378_3.9:busybox_1.29.3-r10",
          "ruleIndex": 76,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42378] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3450_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 77,
          "level": "error",
          "message": {
            "text": "[CVE-2021-3450] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42379_3.9:busybox_1.29.3-r10",
          "ruleIndex": 78,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42379] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-10773_yarn_1.15.2",
          "ruleIndex": 79,
          "level": "error",
          "message": {
            "text": "[CVE-2019-10773] sha256__e29ab506780450f339cd5573955081fe622c4c6e1774f896bfb4c231669e41d2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-37322_3.9:libstdc++_8.3.0-r0",
          "ruleIndex": 80,
          "level": "error",
          "message": {
            "text": "[CVE-2021-37322] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2000-1254_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 81,
          "level": "error",
          "message": {
            "text": "[CVE-2000-1254] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2000-1254_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 82,
          "level": "error",
          "message": {
            "text": "[CVE-2000-1254] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-29415_ip_1.1.5",
          "ruleIndex": 83,
          "level": "error",
          "message": {
            "text": "[CVE-2024-29415] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-37322_3.9:libgcc_8.3.0-r0",
          "ruleIndex": 84,
          "level": "error",
          "message": {
            "text": "[CVE-2021-37322] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24434_dicer_0.2.5",
          "ruleIndex": 85,
          "level": "error",
          "message": {
            "text": "[CVE-2022-24434] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-2650_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 86,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-2650] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0466_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 87,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-0466] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0465_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 88,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-0465] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0465_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 89,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-0465] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2097_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 90,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-2097] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2097_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 91,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-2097] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-2650_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 92,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-2650] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0466_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 93,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-0466] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3817_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 94,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3817] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-2975_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 95,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-2975] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-1255_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 96,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-1255] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0842_xml2js_0.4.19",
          "ruleIndex": 97,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-0842] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-28928_3.9:musl_1.1.20-r5",
          "ruleIndex": 98,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-28928] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-15366_ajv_5.5.2",
          "ruleIndex": 99,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-15366] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42375_3.9:busybox_1.29.3-r10",
          "ruleIndex": 100,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-42375] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-8244_bl_1.2.2",
          "ruleIndex": 101,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-8244] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-1549_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 102,
          "level": "warning",
          "message": {
            "text": "[CVE-2019-1549] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-4039_3.9:libstdc++_8.3.0-r0",
          "ruleIndex": 103,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-4039] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-28928_3.9:musl-utils_1.1.20-r5",
          "ruleIndex": 104,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-28928] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-1547_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 105,
          "level": "warning",
          "message": {
            "text": "[CVE-2019-1547] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2017-16137_debug_3.2.6",
          "ruleIndex": 106,
          "level": "warning",
          "message": {
            "text": "[CVE-2017-16137] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-21297_@node-red/runtime_0.20.8",
          "ruleIndex": 107,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-21297] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-25896_passport_0.4.0",
          "ruleIndex": 108,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-25896] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42363_3.9:ssl_client_1.29.3-r10",
          "ruleIndex": 109,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42363] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4203_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 110,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-4203] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42366_3.9:busybox_1.29.3-r10",
          "ruleIndex": 111,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42366] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3446_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 112,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3446] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-1551_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 113,
          "level": "warning",
          "message": {
            "text": "[CVE-2019-1551] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-1549_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 114,
          "level": "warning",
          "message": {
            "text": "[CVE-2019-1549] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-6129_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 115,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-6129] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4203_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 116,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-4203] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3446_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 117,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3446] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-1551_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 118,
          "level": "warning",
          "message": {
            "text": "[CVE-2019-1551] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-23362_hosted-git-info_2.7.1",
          "ruleIndex": 119,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-23362] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-1255_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 120,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-1255] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42364_3.9:ssl_client_1.29.3-r10",
          "ruleIndex": 121,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42364] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3817_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 122,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3817] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-4039_3.9:libgcc_8.3.0-r0",
          "ruleIndex": 123,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-4039] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-0727_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 124,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-0727] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42374_3.9:busybox_1.29.3-r10",
          "ruleIndex": 125,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-42374] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-29041_express_4.17.1",
          "ruleIndex": 126,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-29041] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42364_3.9:busybox_1.29.3-r10",
          "ruleIndex": 127,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42364] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-1971_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 128,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-1971] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-0727_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 129,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-0727] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5678_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 130,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-5678] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-15095_npm_6.4.1",
          "ruleIndex": 131,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-15095] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-23841_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 132,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-23841] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-23841_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 133,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-23841] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42365_3.9:ssl_client_1.29.3-r10",
          "ruleIndex": 134,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42365] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42366_3.9:ssl_client_1.29.3-r10",
          "ruleIndex": 135,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42366] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42365_3.9:busybox_1.29.3-r10",
          "ruleIndex": 136,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42365] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5678_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 137,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-5678] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4304_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 138,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-4304] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-15366_ajv_6.10.0",
          "ruleIndex": 139,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-15366] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-6129_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 140,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-6129] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-16777_npm_6.4.1",
          "ruleIndex": 141,
          "level": "warning",
          "message": {
            "text": "[CVE-2019-16777] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-21298_@node-red/runtime_0.20.8",
          "ruleIndex": 142,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-21298] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-1547_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 143,
          "level": "warning",
          "message": {
            "text": "[CVE-2019-1547] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42363_3.9:busybox_1.29.3-r10",
          "ruleIndex": 144,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42363] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-16775_npm_6.4.1",
          "ruleIndex": 145,
          "level": "warning",
          "message": {
            "text": "[CVE-2019-16775] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42374_3.9:ssl_client_1.29.3-r10",
          "ruleIndex": 146,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-42374] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-2975_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 147,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-2975] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42375_3.9:ssl_client_1.29.3-r10",
          "ruleIndex": 148,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-42375] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-1971_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 149,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-1971] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-15608_yarn_1.15.2",
          "ruleIndex": 150,
          "level": "warning",
          "message": {
            "text": "[CVE-2019-15608] sha256__e29ab506780450f339cd5573955081fe622c4c6e1774f896bfb4c231669e41d2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-7608_yargs-parser_9.0.2",
          "ruleIndex": 151,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-7608] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-32640_ws_6.2.1",
          "ruleIndex": 152,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-32640] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-33987_got_6.7.1",
          "ruleIndex": 153,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-33987] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4304_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 154,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-4304] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-4160_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 155,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-4160] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-4160_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 156,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-4160] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42376_3.9:ssl_client_1.29.3-r10",
          "ruleIndex": 157,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-42376] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2009-3767_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 158,
          "level": "warning",
          "message": {
            "text": "[CVE-2009-3767] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3826_3.9:libstdc++_8.3.0-r0",
          "ruleIndex": 159,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-3826] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2009-3767_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 160,
          "level": "warning",
          "message": {
            "text": "[CVE-2009-3767] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3826_3.9:libgcc_8.3.0-r0",
          "ruleIndex": 161,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-3826] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42376_3.9:busybox_1.29.3-r10",
          "ruleIndex": 162,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-42376] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-28155_request_2.88.0",
          "ruleIndex": 163,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-28155] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-28155_request_2.88.0",
          "ruleIndex": 163,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-28155] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-23839_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 164,
          "level": "note",
          "message": {
            "text": "[CVE-2021-23839] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-27088_es5-ext_0.10.51",
          "ruleIndex": 165,
          "level": "note",
          "message": {
            "text": "[CVE-2024-27088] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "XRAY-105536_npm-registry-fetch_1.1.0",
          "ruleIndex": 166,
          "level": "note",
          "message": {
            "text": "[XRAY-105536] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-1563_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 167,
          "level": "note",
          "message": {
            "text": "[CVE-2019-1563] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-23839_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 168,
          "level": "note",
          "message": {
            "text": "[CVE-2021-23839] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-1563_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 169,
          "level": "note",
          "message": {
            "text": "[CVE-2019-1563] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "XRAY-105536_npm-registry-fetch_3.1.1",
          "ruleIndex": 170,
          "level": "note",
          "message": {
            "text": "[XRAY-105536] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2017-18869_chownr_1.0.1",
          "ruleIndex": 171,
          "level": "note",
          "message": {
            "text": "[CVE-2017-18869] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-1552_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 172,
          "level": "note",
          "message": {
            "text": "[CVE-2019-1552] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-1552_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 173,
          "level": "note",
          "message": {
            "text": "[CVE-2019-1552] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-1394_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 174,
          "level": "none",
          "message": {
            "text": "[CVE-2024-1394] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2511_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 175,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2511] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-4603_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 176,
          "level": "none",
          "message": {
            "text": "[CVE-2024-4603] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-6237_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 177,
          "level": "none",
          "message": {
            "text": "[CVE-2023-6237] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-6237_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 178,
          "level": "none",
          "message": {
            "text": "[CVE-2023-6237] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-4603_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 179,
          "level": "none",
          "message": {
            "text": "[CVE-2024-4603] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-1394_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 180,
          "level": "none",
          "message": {
            "text": "[CVE-2024-1394] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2511_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 181,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2511] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3918_json-schema_0.2.3",
          "ruleIndex": 182,
          "level": "error",
          "message": {
            "text": "[CVE-2021-3918] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3918_json-schema_0.2.3",
          "ruleIndex": 182,
          "level": "error",
          "message": {
            "text": "[CVE-2021-3918] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-44906_minimist_1.2.0",
          "ruleIndex": 183,
          "level": "error",
          "message": {
            "text": "[CVE-2021-44906] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-44906_minimist_1.2.0",
          "ruleIndex": 183,
          "level": "error",
          "message": {
            "text": "[CVE-2021-44906] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-7788_ini_1.3.5",
          "ruleIndex": 184,
          "level": "error",
          "message": {
            "text": "[CVE-2020-7788] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-44906_minimist_0.0.8",
          "ruleIndex": 185,
          "level": "error",
          "message": {
            "text": "[CVE-2021-44906] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-44906_minimist_0.0.8",
          "ruleIndex": 185,
          "level": "error",
          "message": {
            "text": "[CVE-2021-44906] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-26136_tough-cookie_2.4.3",
          "ruleIndex": 186,
          "level": "error",
          "message": {
            "text": "[CVE-2023-26136] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-26136_tough-cookie_2.4.3",
          "ruleIndex": 186,
          "level": "error",
          "message": {
            "text": "[CVE-2023-26136] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-7774_y18n_3.2.1",
          "ruleIndex": 187,
          "level": "error",
          "message": {
            "text": "[CVE-2020-7774] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-7774_y18n_4.0.0",
          "ruleIndex": 188,
          "level": "error",
          "message": {
            "text": "[CVE-2020-7774] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42282_ip_1.1.5",
          "ruleIndex": 189,
          "level": "error",
          "message": {
            "text": "[CVE-2023-42282] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2068_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 190,
          "level": "error",
          "message": {
            "text": "[CVE-2022-2068] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1292_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 191,
          "level": "error",
          "message": {
            "text": "[CVE-2022-1292] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-49210_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 192,
          "level": "error",
          "message": {
            "text": "[CVE-2023-49210] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1292_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 193,
          "level": "error",
          "message": {
            "text": "[CVE-2022-1292] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2068_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 194,
          "level": "error",
          "message": {
            "text": "[CVE-2022-2068] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-49210_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 195,
          "level": "error",
          "message": {
            "text": "[CVE-2023-49210] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-15847_3.9:libstdc++_8.3.0-r0",
          "ruleIndex": 196,
          "level": "error",
          "message": {
            "text": "[CVE-2019-15847] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24785_moment_2.24.0",
          "ruleIndex": 197,
          "level": "error",
          "message": {
            "text": "[CVE-2022-24785] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5363_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 198,
          "level": "error",
          "message": {
            "text": "[CVE-2023-5363] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24999_qs_6.7.0",
          "ruleIndex": 199,
          "level": "error",
          "message": {
            "text": "[CVE-2022-24999] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-23337_lodash_4.17.15",
          "ruleIndex": 200,
          "level": "error",
          "message": {
            "text": "[CVE-2021-23337] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5363_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 201,
          "level": "error",
          "message": {
            "text": "[CVE-2023-5363] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-4435_yarn_1.15.2",
          "ruleIndex": 202,
          "level": "error",
          "message": {
            "text": "[CVE-2021-4435] sha256__e29ab506780450f339cd5573955081fe622c4c6e1774f896bfb4c231669e41d2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-32804_tar_4.4.6",
          "ruleIndex": 203,
          "level": "error",
          "message": {
            "text": "[CVE-2021-32804] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-3517_minimatch_3.0.4",
          "ruleIndex": 204,
          "level": "error",
          "message": {
            "text": "[CVE-2022-3517] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-3517_minimatch_3.0.4",
          "ruleIndex": 204,
          "level": "error",
          "message": {
            "text": "[CVE-2022-3517] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-15847_3.9:libgcc_8.3.0-r0",
          "ruleIndex": 205,
          "level": "error",
          "message": {
            "text": "[CVE-2019-15847] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-31129_moment_2.24.0",
          "ruleIndex": 206,
          "level": "error",
          "message": {
            "text": "[CVE-2022-31129] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3807_ansi-regex_3.0.0",
          "ruleIndex": 207,
          "level": "error",
          "message": {
            "text": "[CVE-2021-3807] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-38900_decode-uri-component_0.2.0",
          "ruleIndex": 208,
          "level": "error",
          "message": {
            "text": "[CVE-2022-38900] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-25883_semver_5.5.0",
          "ruleIndex": 209,
          "level": "error",
          "message": {
            "text": "[CVE-2022-25883] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-25883_semver_6.2.0",
          "ruleIndex": 210,
          "level": "error",
          "message": {
            "text": "[CVE-2022-25883] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0217_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 211,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0217] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24999_qs_6.5.2",
          "ruleIndex": 212,
          "level": "error",
          "message": {
            "text": "[CVE-2022-24999] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24999_qs_6.5.2",
          "ruleIndex": 212,
          "level": "error",
          "message": {
            "text": "[CVE-2022-24999] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-8203_lodash_4.17.15",
          "ruleIndex": 213,
          "level": "error",
          "message": {
            "text": "[CVE-2020-8203] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-25881_http-cache-semantics_3.8.1",
          "ruleIndex": 214,
          "level": "error",
          "message": {
            "text": "[CVE-2022-25881] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0217_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 215,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0217] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-32804_tar_2.2.1",
          "ruleIndex": 216,
          "level": "error",
          "message": {
            "text": "[CVE-2021-32804] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0286_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 217,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0286] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-25883_semver_5.3.0",
          "ruleIndex": 218,
          "level": "error",
          "message": {
            "text": "[CVE-2022-25883] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-25883_semver_5.3.0",
          "ruleIndex": 218,
          "level": "error",
          "message": {
            "text": "[CVE-2022-25883] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-37712_tar_4.4.6",
          "ruleIndex": 219,
          "level": "error",
          "message": {
            "text": "[CVE-2021-37712] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0286_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 220,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0286] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-8203_lodash.pick_4.4.0",
          "ruleIndex": 221,
          "level": "error",
          "message": {
            "text": "[CVE-2020-8203] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2016-7798_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 222,
          "level": "error",
          "message": {
            "text": "[CVE-2016-7798] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2016-7798_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 223,
          "level": "error",
          "message": {
            "text": "[CVE-2016-7798] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3449_3.9:libssl1.1_1.1.1b-r1",
          "ruleIndex": 224,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-3449] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-28500_lodash_4.17.15",
          "ruleIndex": 225,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-28500] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3449_3.9:libcrypto1.1_1.1.1b-r1",
          "ruleIndex": 226,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-3449] sha256__f1b5933fe4b5f49bbe8258745cf396afe07e625bdab3168e364daf7c956b6b81.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-28863_tar_2.2.1",
          "ruleIndex": 227,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-28863] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-28863_tar_4.4.6",
          "ruleIndex": 228,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-28863] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-7598_minimist_1.2.0",
          "ruleIndex": 229,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-7598] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-7598_minimist_1.2.0",
          "ruleIndex": 229,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-7598] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-7598_minimist_0.0.8",
          "ruleIndex": 230,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-7598] sha256__ae4ceb8dc5576b0314753490f29e73c24f3f6dbce773ecf06e9f72daf8820181.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-7598_minimist_0.0.8",
          "ruleIndex": 230,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-7598] sha256__d398c804dd8dbbfebda5e1ba83f440fdc308a804cab1d6f470ec62b9692c065f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://jfrog.com/help/r/jfrog-security-documentation/jfrog-advanced-security",
          "name": "JFrog Applicability Scanner",
          "rules": [
            {
              "id": "applic_CVE-2018-25032",
              "name": "CVE-2018-25032",
              "shortDescription": {
                "text": "Scanner for CVE-2018-25032"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `deflateInit2` is called.",
                "markdown": "The scanner checks whether the vulnerable function `deflateInit2` is called."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-4435",
              "name": "CVE-2021-4435",
              "shortDescription": {
                "text": "Scanner for CVE-2021-4435"
              },
              "fullDescription": {
                "text": "The vulnerability is only exploitable when running under the Windows OS.\nSince currently only Linux containers are supported, the scanner will always conclude that this vulnerability is not applicable.",
                "markdown": "The vulnerability is only exploitable when running under the Windows OS.\nSince currently only Linux containers are supported, the scanner will always conclude that this vulnerability is not applicable."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2019-15847",
              "name": "CVE-2019-15847",
              "shortDescription": {
                "text": "Scanner for CVE-2019-15847"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2020-28500",
              "name": "CVE-2020-28500",
              "shortDescription": {
                "text": "Scanner for CVE-2020-28500"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `lodash.trim` with external input to its 1st (`string`) argument.\n* `lodash.toNumber` with external input to its 1st (`value`) argument.\n* `lodash.trimEnd` with external input to its 1st (`string`) argument.",
                "markdown": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `lodash.trim` with external input to its 1st (`string`) argument.\n* `lodash.toNumber` with external input to its 1st (`value`) argument.\n* `lodash.trimEnd` with external input to its 1st (`string`) argument."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2020-7598",
              "name": "CVE-2020-7598",
              "shortDescription": {
                "text": "Scanner for CVE-2020-7598"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `minimist` is called with external input to its 1st (`args`) argument, and the `Object.freeze()` remediation is not present.",
                "markdown": "The scanner checks whether the vulnerable function `minimist` is called with external input to its 1st (`args`) argument, and the `Object.freeze()` remediation is not present."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-44906",
              "name": "CVE-2021-44906",
              "shortDescription": {
                "text": "Scanner for CVE-2021-44906"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `minimist` is called with external input to its 1st (`args`) argument, and the `Object.freeze()` remediation is not present.",
                "markdown": "The scanner checks whether the vulnerable function `minimist` is called with external input to its 1st (`args`) argument, and the `Object.freeze()` remediation is not present."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2020-7788",
              "name": "CVE-2020-7788",
              "shortDescription": {
                "text": "Scanner for CVE-2020-7788"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `ini.parse` is called.",
                "markdown": "The scanner checks whether the vulnerable function `ini.parse` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2020-8203",
              "name": "CVE-2020-8203",
              "shortDescription": {
                "text": "Scanner for CVE-2020-8203"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `zipObjectDeep` is called with external input to its 1st (`props`) and 2nd (`values`) arguments, and the `Object.freeze()` remediation is not present.",
                "markdown": "The scanner checks whether the vulnerable function `zipObjectDeep` is called with external input to its 1st (`props`) and 2nd (`values`) arguments, and the `Object.freeze()` remediation is not present."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-23337",
              "name": "CVE-2021-23337",
              "shortDescription": {
                "text": "Scanner for CVE-2021-23337"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `lodash.template` is called with external input to its 2nd (`options`) argument.",
                "markdown": "The scanner checks whether the vulnerable function `lodash.template` is called with external input to its 2nd (`options`) argument."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-37712",
              "name": "CVE-2021-37712",
              "shortDescription": {
                "text": "Scanner for CVE-2021-37712"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `tar.x\n* `tar.extract`",
                "markdown": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `tar.x\n* `tar.extract`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2024-28863",
              "name": "CVE-2024-28863",
              "shortDescription": {
                "text": "Scanner for CVE-2024-28863"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `tar.x`\n* `tar.extract`",
                "markdown": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `tar.x`\n* `tar.extract`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-32804",
              "name": "CVE-2021-32804",
              "shortDescription": {
                "text": "Scanner for CVE-2021-32804"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `tar.x`\n* `tar.extract`",
                "markdown": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `tar.x`\n* `tar.extract`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-3807",
              "name": "CVE-2021-3807",
              "shortDescription": {
                "text": "Scanner for CVE-2021-3807"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `ansi-regex` is called.",
                "markdown": "The scanner checks whether the vulnerable function `ansi-regex` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-3918",
              "name": "CVE-2021-3918",
              "shortDescription": {
                "text": "Scanner for CVE-2021-3918"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `json-schema.validate` with external input to its 1st (`instance`) argument.\n* `json-schema.checkPropertyChange` with external input to its 2nd (`schema`) argument.\n\nThe scanner also checks whether the `Object.freeze()` remediation is not present.",
                "markdown": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `json-schema.validate` with external input to its 1st (`instance`) argument.\n* `json-schema.checkPropertyChange` with external input to its 2nd (`schema`) argument.\n\nThe scanner also checks whether the `Object.freeze()` remediation is not present."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-2097",
              "name": "CVE-2022-2097",
              "shortDescription": {
                "text": "Scanner for CVE-2022-2097"
              },
              "fullDescription": {
                "text": "The scanner checks if the vulnerable function `EVP_EncryptInit_ex` is called.\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: the system's architecture is 32bit / x86.",
                "markdown": "The scanner checks if the vulnerable function `EVP_EncryptInit_ex` is called.\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: the system's architecture is 32bit / x86."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-21222",
              "name": "CVE-2022-21222",
              "shortDescription": {
                "text": "Scanner for CVE-2022-21222"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `parse` is called.\n\nThe vulnerability can also be exploited when the package `css-what` is imported using the ES module `import` statement, and the vulnerable function is called. The scanner currently does not detect this case, so it is essential to make sure that if the package `css-what` is imported using the ES module `import` statement, the vulnerable function `parse` is not called with external input.",
                "markdown": "The scanner checks whether the vulnerable function `parse` is called.\n\nThe vulnerability can also be exploited when the package `css-what` is imported using the ES module `import` statement, and the vulnerable function is called. The scanner currently does not detect this case, so it is essential to make sure that if the package `css-what` is imported using the ES module `import` statement, the vulnerable function `parse` is not called with external input."
              },
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private"
              }
            },
            {
              "id": "applic_CVE-2022-24785",
              "name": "CVE-2022-24785",
              "shortDescription": {
                "text": "Scanner for CVE-2022-24785"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `locale` is called with external input to its 1st (`config`) argument.",
                "markdown": "The scanner checks whether the vulnerable function `locale` is called with external input to its 1st (`config`) argument."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-24999",
              "name": "CVE-2022-24999",
              "shortDescription": {
                "text": "Scanner for CVE-2022-24999"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `qs.parse` is called with the non-default option 'allowPrototypes' enabled, and the `Object.freeze()` remediation is not present.\nIt also checks whether `express.js` has a GET path that processes its query strings.",
                "markdown": "The scanner checks whether the vulnerable function `qs.parse` is called with the non-default option 'allowPrototypes' enabled, and the `Object.freeze()` remediation is not present.\nIt also checks whether `express.js` has a GET path that processes its query strings."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-25881",
              "name": "CVE-2022-25881",
              "shortDescription": {
                "text": "Scanner for CVE-2022-25881"
              },
              "fullDescription": {
                "text": "The scanner checks whether the object `CachePolicy` has been initiated using user-controlled input, or whether the vulnerable function `satisfiesWithoutRevalidation` has been called with user-controlled input.",
                "markdown": "The scanner checks whether the object `CachePolicy` has been initiated using user-controlled input, or whether the vulnerable function `satisfiesWithoutRevalidation` has been called with user-controlled input."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-31129",
              "name": "CVE-2022-31129",
              "shortDescription": {
                "text": "Scanner for CVE-2022-31129"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `moment` is called with external input to its 1st (`config`) argument.",
                "markdown": "The scanner checks whether the vulnerable function `moment` is called with external input to its 1st (`config`) argument."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-3517",
              "name": "CVE-2022-3517",
              "shortDescription": {
                "text": "Scanner for CVE-2022-3517"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are called with external input to the `pattern` argument and brace expansion is not disabled (by the option `{nobrace: true}`):\n\n- `minimatch()`\n- `minimatch.braceExpand()`\n- `minimatch.filter()`\n- `minimatch.match()`\n- `minimatch.makeRe()`\n- `minimatch.Minimatch.prototype.braceExpand()`\n- `minimatch.Minimatch() `\n\nNote that if a call to the `minimatch.filter()` function was found by the scanner, the vulnerability is applicable only if the function returned by `minimatch.filter()` is invoked. Currently, the scanner does not check that.",
                "markdown": "The scanner checks whether any of the following vulnerable functions are called with external input to the `pattern` argument and brace expansion is not disabled (by the option `{nobrace: true}`):\n\n- `minimatch()`\n- `minimatch.braceExpand()`\n- `minimatch.filter()`\n- `minimatch.match()`\n- `minimatch.makeRe()`\n- `minimatch.Minimatch.prototype.braceExpand()`\n- `minimatch.Minimatch() `\n\nNote that if a call to the `minimatch.filter()` function was found by the scanner, the vulnerability is applicable only if the function returned by `minimatch.filter()` is invoked. Currently, the scanner does not check that."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-3602",
              "name": "CVE-2022-3602",
              "shortDescription": {
                "text": "Scanner for CVE-2022-3602"
              },
              "fullDescription": {
                "text": "The scanner checks if at least one of the vulnerable functions is called:\n```\nSSL_connect\nBIO_new_ssl_connect\nBIO_do_handshake\nBIO_do_connect\nBIO_new_connect\nSSL_accept\nSSL_set_verify\nSSL_CTX_set_verify\nX509_verify_cert\n```\nThen, if the application is a server, the client authentication option should be checked manually. \nIt is a client, it is applicable as described in the description.",
                "markdown": "The scanner checks if at least one of the vulnerable functions is called:\n```\nSSL_connect\nBIO_new_ssl_connect\nBIO_do_handshake\nBIO_do_connect\nBIO_new_connect\nSSL_accept\nSSL_set_verify\nSSL_CTX_set_verify\nX509_verify_cert\n```\nThen, if the application is a server, the client authentication option should be checked manually. \nIt is a client, it is applicable as described in the description."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-3786",
              "name": "CVE-2022-3786",
              "shortDescription": {
                "text": "Scanner for CVE-2022-3786"
              },
              "fullDescription": {
                "text": "The scanner checks if at least one of the vulnerable functions is called:\n```\nSSL_connect\nBIO_new_ssl_connect\nBIO_do_handshake\nBIO_do_connect\nBIO_new_connect\nSSL_accept\nSSL_set_verify\nSSL_CTX_set_verify\nX509_verify_cert\n```\nThen, if the application is a server, the client authentication option should be checked manually. \nIt is a client, it is applicable as described in the description.",
                "markdown": "The scanner checks if at least one of the vulnerable functions is called:\n```\nSSL_connect\nBIO_new_ssl_connect\nBIO_do_handshake\nBIO_do_connect\nBIO_new_connect\nSSL_accept\nSSL_set_verify\nSSL_CTX_set_verify\nX509_verify_cert\n```\nThen, if the application is a server, the client authentication option should be checked manually. \nIt is a client, it is applicable as described in the description."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-37434",
              "name": "CVE-2022-37434",
              "shortDescription": {
                "text": "Scanner for CVE-2022-37434"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `inflateGetHeader()` is called.",
                "markdown": "The scanner checks whether the vulnerable function `inflateGetHeader()` is called."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-38900",
              "name": "CVE-2022-38900",
              "shortDescription": {
                "text": "Scanner for CVE-2022-38900"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `decode-uri-component` is called with external input.",
                "markdown": "The scanner checks whether the vulnerable function `decode-uri-component` is called with external input."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-4450",
              "name": "CVE-2022-4450",
              "shortDescription": {
                "text": "Scanner for CVE-2022-4450"
              },
              "fullDescription": {
                "text": "The scanner checks if at least one of the vulnerable functions is called:\n```\nPEM_read_bio_ex()\nPEM_read_bio()\nPEM_read()\nPEM_read_DHparams()\nPEM_read_PrivateKey()\nPEM_read_bio_PrivateKey()\nPEM_read_RSA_PUBKEY()\nPEM_read_bio_RSA_PUBKEY()\nPEM_read_RSAPrivateKey()\nPEM_read_bio_RSAPrivateKey()\nPEM_read_PKCS7()\nPEM_read_bio_PKCS7()\nPEM_read_X509()\nPEM_read_bio_X509()\nPEM_read_X509_AUX()\nPEM_read_bio_X509_AUX()\nPEM_read_X509_CRL()\nPEM_read_bio_X509_CRL()\nPEM_read_bio_X509_REQ()\nPEM_read_bio_ECPrivateKey()\nPEM_read_bio_PKCS8()\n\nPEM_X509_INFO_read_bio_ex()\nSSL_CTX_use_serverinfo_file()\nSSL_use_cert_and_key() \nSSL_CTX_use_certificate_chain_file()\nSSL_CTX_load_verify_locations()\nSSL_CTX_set1_verify_file()\nSSL_CTX_set1_verify_path()\nX509_LOOKUP_load_file()\n\nSSL_load_client_CA_file_ex()\nSSL_load_client_CA_file()\nSSL_add_file_cert_subjects_to_stack()\nSSL_add_dir_cert_subjects_to_stack()\nSSL_add_store_cert_subjects_to_stack()\n\nuse_certificate_chain_file\nSSL_use_certificate_file\nSSL_CTX_use_certificate_file\nSSL_use_PrivateKey_file\nSSL_CTX_use_PrivateKey_file\nSSL_CTX_use_serverinfo_file\n\nSSL_use_RSAPrivateKey_file\nSSL_CTX_use_RSAPrivateKey_file\n```\n\nNote that while the vulnerability is also exploitable through the use of the command line tool `openssl asn1parse`, the vulnerability's DoS impact in this case does not pose a threat, since the DoS will crash the forked `openssl` tool process only",
                "markdown": "The scanner checks if at least one of the vulnerable functions is called:\n```\nPEM_read_bio_ex()\nPEM_read_bio()\nPEM_read()\nPEM_read_DHparams()\nPEM_read_PrivateKey()\nPEM_read_bio_PrivateKey()\nPEM_read_RSA_PUBKEY()\nPEM_read_bio_RSA_PUBKEY()\nPEM_read_RSAPrivateKey()\nPEM_read_bio_RSAPrivateKey()\nPEM_read_PKCS7()\nPEM_read_bio_PKCS7()\nPEM_read_X509()\nPEM_read_bio_X509()\nPEM_read_X509_AUX()\nPEM_read_bio_X509_AUX()\nPEM_read_X509_CRL()\nPEM_read_bio_X509_CRL()\nPEM_read_bio_X509_REQ()\nPEM_read_bio_ECPrivateKey()\nPEM_read_bio_PKCS8()\n\nPEM_X509_INFO_read_bio_ex()\nSSL_CTX_use_serverinfo_file()\nSSL_use_cert_and_key() \nSSL_CTX_use_certificate_chain_file()\nSSL_CTX_load_verify_locations()\nSSL_CTX_set1_verify_file()\nSSL_CTX_set1_verify_path()\nX509_LOOKUP_load_file()\n\nSSL_load_client_CA_file_ex()\nSSL_load_client_CA_file()\nSSL_add_file_cert_subjects_to_stack()\nSSL_add_dir_cert_subjects_to_stack()\nSSL_add_store_cert_subjects_to_stack()\n\nuse_certificate_chain_file\nSSL_use_certificate_file\nSSL_CTX_use_certificate_file\nSSL_use_PrivateKey_file\nSSL_CTX_use_PrivateKey_file\nSSL_CTX_use_serverinfo_file\n\nSSL_use_RSAPrivateKey_file\nSSL_CTX_use_RSAPrivateKey_file\n```\n\nNote that while the vulnerability is also exploitable through the use of the command line tool `openssl asn1parse`, the vulnerability's DoS impact in this case does not pose a threat, since the DoS will crash the forked `openssl` tool process only"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0215",
              "name": "CVE-2023-0215",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0215"
              },
              "fullDescription": {
                "text": "The scanner checks if at least one of the vulnerable functions is called:\n```\nPEM_write_bio_ASN1_stream()\nPEM_write_bio_CMS_stream()\nPEM_write_bio_PKCS7_stream()\nSMIME_write_ASN1()\nSMIME_write_CMS()\nSMIME_write_PKCS7()\nBIO_new_CMS()\nBIO_new_PKCS7()\ni2d_CMS_bio_stream()\ni2d_PKCS7_bio_stream()\ni2d_ASN1_bio_stream()\nBIO_new_NDEF()\n```",
                "markdown": "The scanner checks if at least one of the vulnerable functions is called:\n```\nPEM_write_bio_ASN1_stream()\nPEM_write_bio_CMS_stream()\nPEM_write_bio_PKCS7_stream()\nSMIME_write_ASN1()\nSMIME_write_CMS()\nSMIME_write_PKCS7()\nBIO_new_CMS()\nBIO_new_PKCS7()\ni2d_CMS_bio_stream()\ni2d_PKCS7_bio_stream()\ni2d_ASN1_bio_stream()\nBIO_new_NDEF()\n```"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0217",
              "name": "CVE-2023-0217",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0217"
              },
              "fullDescription": {
                "text": "When checking ELF files, the scanner checks whether the vulnerable `EVP_PKEY_public_check()` function is called.\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked",
                "markdown": "When checking ELF files, the scanner checks whether the vulnerable `EVP_PKEY_public_check()` function is called.\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0286",
              "name": "CVE-2023-0286",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0286"
              },
              "fullDescription": {
                "text": "The scanner checks if at least one of the vulnerable API calls is called:\n\n* `X509_STORE_CTX_get_check_revocation`\n* `X509_STORE_get_check_revocation`\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The CRL checking option must also be enabled.",
                "markdown": "The scanner checks if at least one of the vulnerable API calls is called:\n\n* `X509_STORE_CTX_get_check_revocation`\n* `X509_STORE_get_check_revocation`\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The CRL checking option must also be enabled."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0401",
              "name": "CVE-2023-0401",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0401"
              },
              "fullDescription": {
                "text": "When checking ELF files, the scanner checks whether at least one of the vulnerable API calls is called:\n\n* `PKCS7_decrypt`\n* `PKCS7_dataInit`\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked",
                "markdown": "When checking ELF files, the scanner checks whether at least one of the vulnerable API calls is called:\n\n* `PKCS7_decrypt`\n* `PKCS7_dataInit`\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0465",
              "name": "CVE-2023-0465",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0465"
              },
              "fullDescription": {
                "text": "The scanner checks whether OpenSSL supports the vulnerable policy constraints parsing functionality, by checking whether the `X509_VERIFY_PARAM_set1_policies` function is called (the functionality is disabled by default)\n\nNote that the scanner does not check for an additional vulnerable case in which the vulnerable policy constraints parsing functionality is enabled via the command line flag `-policy`. For example, by running `openssl ca -policy match`. However - in this case, the vulnerability will lead to a DoS of a forked command-line utility, which has a minimal impact on security.",
                "markdown": "The scanner checks whether OpenSSL supports the vulnerable policy constraints parsing functionality, by checking whether the `X509_VERIFY_PARAM_set1_policies` function is called (the functionality is disabled by default)\n\nNote that the scanner does not check for an additional vulnerable case in which the vulnerable policy constraints parsing functionality is enabled via the command line flag `-policy`. For example, by running `openssl ca -policy match`. However - in this case, the vulnerability will lead to a DoS of a forked command-line utility, which has a minimal impact on security."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0464",
              "name": "CVE-2023-0464",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0464"
              },
              "fullDescription": {
                "text": "The scanner checks whether OpenSSL supports the vulnerable policy constraints parsing functionality, by checking whether the `X509_VERIFY_PARAM_set1_policies` function is called (the functionality is disabled by default)\n\nNote that the scanner does not check for an additional vulnerable case in which the vulnerable policy constraints parsing functionality is enabled via the command line flag `-policy`. For example, by running `openssl ca -policy match`. However - in this case, the vulnerability will lead to a DoS of a forked command-line utility, which has a minimal impact on security.",
                "markdown": "The scanner checks whether OpenSSL supports the vulnerable policy constraints parsing functionality, by checking whether the `X509_VERIFY_PARAM_set1_policies` function is called (the functionality is disabled by default)\n\nNote that the scanner does not check for an additional vulnerable case in which the vulnerable policy constraints parsing functionality is enabled via the command line flag `-policy`. For example, by running `openssl ca -policy match`. However - in this case, the vulnerability will lead to a DoS of a forked command-line utility, which has a minimal impact on security."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-26136",
              "name": "CVE-2023-26136",
              "shortDescription": {
                "text": "Scanner for CVE-2023-26136"
              },
              "fullDescription": {
                "text": "The scanner checks for the initialization of `CookieJar()` with the vulnerable option ` rejectPublicSuffixes` set to false.",
                "markdown": "The scanner checks for the initialization of `CookieJar()` with the vulnerable option ` rejectPublicSuffixes` set to false."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-25883",
              "name": "CVE-2022-25883",
              "shortDescription": {
                "text": "Scanner for CVE-2022-25883"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following function are called:\n\n* `Range`\n* `satisfies`\n* `intersects`\n* `maxSatisfying`\n* `minSatisfying`\n* `minVersion`\n* `outside`\n* `subset`\n* `toComparators`\n* `validRange`\n* `gtr`\n* `ltr`",
                "markdown": "The scanner checks whether any of the following function are called:\n\n* `Range`\n* `satisfies`\n* `intersects`\n* `maxSatisfying`\n* `minSatisfying`\n* `minVersion`\n* `outside`\n* `subset`\n* `toComparators`\n* `validRange`\n* `gtr`\n* `ltr`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2020-7774",
              "name": "CVE-2020-7774",
              "shortDescription": {
                "text": "Scanner for CVE-2020-7774"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `setLocale` is called with external input to its 1st argument",
                "markdown": "The scanner checks whether the vulnerable function `setLocale` is called with external input to its 1st argument"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-3711",
              "name": "CVE-2021-3711",
              "shortDescription": {
                "text": "Scanner for CVE-2021-3711"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `EVP_PKEY_decrypt` is called.",
                "markdown": "The scanner checks whether the vulnerable function `EVP_PKEY_decrypt` is called."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0216",
              "name": "CVE-2023-0216",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0216"
              },
              "fullDescription": {
                "text": "When checking ELF files, the scanner checks if at least one of the vulnerable functions is called:\n\n* `d2i_PKCS7()`\n* `d2i_PKCS7_bio()`\n* `d2i_PKCS7_fp()`\n\nWhen checking Python files, the scanner checks if at least one of the vulnerable functions is called with external input to its 1st (`bytes`) argument:\n\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_der_pkcs7_certificates`\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_pem_pkcs7_certificates`",
                "markdown": "When checking ELF files, the scanner checks if at least one of the vulnerable functions is called:\n\n* `d2i_PKCS7()`\n* `d2i_PKCS7_bio()`\n* `d2i_PKCS7_fp()`\n\nWhen checking Python files, the scanner checks if at least one of the vulnerable functions is called with external input to its 1st (`bytes`) argument:\n\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_der_pkcs7_certificates`\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_pem_pkcs7_certificates`"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-2650",
              "name": "CVE-2023-2650",
              "shortDescription": {
                "text": "Scanner for CVE-2023-2650"
              },
              "fullDescription": {
                "text": "When checking ELF files, the scanner checks whether one of the following function is called with an external input:\n\n* Direct call to `OBJ_obj2txt()` function (for OpenSSL 1.x and OpenSSL 3.x)\n\n**Only for OpenSSL 3.x:**\n\n* OCSP: `OCSP_basic_verify()`\n\n* PKCS7/SMIME:\n`PKCS7_decrypt()`\n`PKCS7_sign()`\n`PKCS7_verify()`\n\n* CMS:\n`CMS_EncryptedData_decrypt()`\n`CMS_EncryptedData_encrypt()`\n`CMS_EnvelopedData_decrypt()`\n`CMS_final()`\n`CMS_decrypt_set1_password()`\n`CMS_RecipientInfo_decrypt()`\n`CMS_decrypt()`\n`CMS_decrypt_set1_pkey()`\n`CMS_decrypt_set1_pkey_and_peer()`\n`CMS_SignedData_verify()`\n`CMS_verify()`\n`CMS_SignerInfo_verify()`\n`CMS_compress()`\n`CMS_data_create()`\n`CMS_data_create_ex()`\n`CMS_digest_create()`\n`CMS_digest_create_ex()`\n`CMS_digest_verify()`\n`CMS_encrypt()`\n`CMS_encrypt_ex()`\n`CMS_final_digest()`\n`CMS_sign()`\n`CMS_sign_ex()`\n`CMS_add1_signer()`\n`CMS_sign_receipt()`\n`CMS_uncompress()`\n`CMS_verify_receipt()`\n\n* CMP/CRMF:\n`OSSL_CMP_get_caCerts()`\n`OSSL_CRMF_ENCRYPTEDVALUE_get1_encCert()`\n`OSSL_CRMF_pbm_new()`\n\n* TS:\n`TS_REQ_print_bio()`\n`TS_OBJ_print_bio()`\n`TS_RESP_create_response()`\n`TS_RESP_print_bio()`\n`TS_RESP_verify_response()`\n`TS_RESP_verify_token()`\n\n* ASN1:\n`ASN1_parse()`\n`X509_NAME_print_ex()`\n`X509_NAME_print_ex_fp()`\n`d2i_AutoPrivateKey()`\n`d2i_PrivateKey()`\n`X509_STORE_CTX_print_verify_cb()`\n`x509_pubkey_ex_d2i_ex()`\n\n* EVP:\n`EVP_PKCS82PKEY()`\n`EVP_PKCS82PKEY_ex()`\n`PKCS5_v2_PBE_keyivgen()`\n`PKCS5_v2_PBE_keyivgen_ex()`\n\n* ESS:\n`OSSL_ESS_check_signing_certs()`\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked",
                "markdown": "When checking ELF files, the scanner checks whether one of the following function is called with an external input:\n\n* Direct call to `OBJ_obj2txt()` function (for OpenSSL 1.x and OpenSSL 3.x)\n\n**Only for OpenSSL 3.x:**\n\n* OCSP: `OCSP_basic_verify()`\n\n* PKCS7/SMIME:\n`PKCS7_decrypt()`\n`PKCS7_sign()`\n`PKCS7_verify()`\n\n* CMS:\n`CMS_EncryptedData_decrypt()`\n`CMS_EncryptedData_encrypt()`\n`CMS_EnvelopedData_decrypt()`\n`CMS_final()`\n`CMS_decrypt_set1_password()`\n`CMS_RecipientInfo_decrypt()`\n`CMS_decrypt()`\n`CMS_decrypt_set1_pkey()`\n`CMS_decrypt_set1_pkey_and_peer()`\n`CMS_SignedData_verify()`\n`CMS_verify()`\n`CMS_SignerInfo_verify()`\n`CMS_compress()`\n`CMS_data_create()`\n`CMS_data_create_ex()`\n`CMS_digest_create()`\n`CMS_digest_create_ex()`\n`CMS_digest_verify()`\n`CMS_encrypt()`\n`CMS_encrypt_ex()`\n`CMS_final_digest()`\n`CMS_sign()`\n`CMS_sign_ex()`\n`CMS_add1_signer()`\n`CMS_sign_receipt()`\n`CMS_uncompress()`\n`CMS_verify_receipt()`\n\n* CMP/CRMF:\n`OSSL_CMP_get_caCerts()`\n`OSSL_CRMF_ENCRYPTEDVALUE_get1_encCert()`\n`OSSL_CRMF_pbm_new()`\n\n* TS:\n`TS_REQ_print_bio()`\n`TS_OBJ_print_bio()`\n`TS_RESP_create_response()`\n`TS_RESP_print_bio()`\n`TS_RESP_verify_response()`\n`TS_RESP_verify_token()`\n\n* ASN1:\n`ASN1_parse()`\n`X509_NAME_print_ex()`\n`X509_NAME_print_ex_fp()`\n`d2i_AutoPrivateKey()`\n`d2i_PrivateKey()`\n`X509_STORE_CTX_print_verify_cb()`\n`x509_pubkey_ex_d2i_ex()`\n\n* EVP:\n`EVP_PKCS82PKEY()`\n`EVP_PKCS82PKEY_ex()`\n`PKCS5_v2_PBE_keyivgen()`\n`PKCS5_v2_PBE_keyivgen_ex()`\n\n* ESS:\n`OSSL_ESS_check_signing_certs()`\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-1292",
              "name": "CVE-2022-1292",
              "shortDescription": {
                "text": "Scanner for CVE-2022-1292"
              },
              "fullDescription": {
                "text": "The scanner checks for the execution of the vulnerable `c_rehash` by searching the artifact for the vulnerable command.",
                "markdown": "The scanner checks for the execution of the vulnerable `c_rehash` by searching the artifact for the vulnerable command."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-2068",
              "name": "CVE-2022-2068",
              "shortDescription": {
                "text": "Scanner for CVE-2022-2068"
              },
              "fullDescription": {
                "text": "The scanner checks for the execution of the vulnerable `c_rehash` by searching the artifact for the vulnerable command.",
                "markdown": "The scanner checks for the execution of the vulnerable `c_rehash` by searching the artifact for the vulnerable command."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-5363",
              "name": "CVE-2023-5363",
              "shortDescription": {
                "text": "Scanner for CVE-2023-5363"
              },
              "fullDescription": {
                "text": "The scanner checks if any of the following vulnerable functions are called:\n\n- `EVP_EncryptInit_ex2`\n- `EVP_DecryptInit_ex2`\n- `EVP_CipherInit_ex2`",
                "markdown": "The scanner checks if any of the following vulnerable functions are called:\n\n- `EVP_EncryptInit_ex2`\n- `EVP_DecryptInit_ex2`\n- `EVP_CipherInit_ex2`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0466",
              "name": "CVE-2023-0466",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0466"
              },
              "fullDescription": {
                "text": "The scanner checks whether `X509_VERIFY_PARAM_add0_policy()` is called.\n\nNote that calling `X509_VERIFY_PARAM_set_flags()` with the parameter `X509_V_FLAG_POLICY_CHECK` mitigates this vulnerability. The scanner currently does not check for that mitigation.",
                "markdown": "The scanner checks whether `X509_VERIFY_PARAM_add0_policy()` is called.\n\nNote that calling `X509_VERIFY_PARAM_set_flags()` with the parameter `X509_V_FLAG_POLICY_CHECK` mitigates this vulnerability. The scanner currently does not check for that mitigation."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-42282",
              "name": "CVE-2023-42282",
              "shortDescription": {
                "text": "Scanner for CVE-2023-42282"
              },
              "fullDescription": {
                "text": "The scanner checks whether `isPublic()` is called with external input.",
                "markdown": "The scanner checks whether `isPublic()` is called with external input."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-49210",
              "name": "CVE-2023-49210",
              "shortDescription": {
                "text": "Scanner for CVE-2023-49210"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable `openssl` function is used with external input.",
                "markdown": "The scanner checks whether the vulnerable `openssl` function is used with external input."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2016-7798",
              "name": "CVE-2016-7798",
              "shortDescription": {
                "text": "Scanner for CVE-2016-7798"
              },
              "fullDescription": {
                "text": "The scanner checks if the function `OpenSSL::Cipher.new()` is called with AES gcm is as the encryption type. \nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The AES IV initialization happens before the key initialization.",
                "markdown": "The scanner checks if the function `OpenSSL::Cipher.new()` is called with AES gcm is as the encryption type. \nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The AES IV initialization happens before the key initialization."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-3712",
              "name": "CVE-2021-3712",
              "shortDescription": {
                "text": "Scanner for CVE-2021-3712"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `ASN1_STRING` structure is created by searching for the existence of all the functions that create the `ASN1_STRING` structure or other structures that are based on the `ASN1_STRING` structure:\n\n* ASN1_STRING_new()\nASN1_STRING_type_new()\nASN1_OCTET_STRING_new()\nASN1_BIT_STRING_new()\nASN1_INTEGER_new()\nASN1_ENUMERATED_new()\nASN1_UTF8STRING_new()\nASN1_IA5STRING_new()\nASN1_UNIVERSALSTRING_new()\nASN1_BMPSTRING_new()\nASN1_GENERALSTRING_new()\nASN1_T61STRING_new()\nASN1_VISIBLESTRING_new()\nASN1_PRINTABLESTRING_new()\nASN1_PRINTABLE_new()\nDIRECTORYSTRING_new()\nDISPLAYTEXT_new()  \nASN1_GENERALIZEDTIME_new()\nASN1_UTCTIME_new()\nASN1_TIME_new()",
                "markdown": "The scanner checks whether the `ASN1_STRING` structure is created by searching for the existence of all the functions that create the `ASN1_STRING` structure or other structures that are based on the `ASN1_STRING` structure:\n\n* ASN1_STRING_new()\nASN1_STRING_type_new()\nASN1_OCTET_STRING_new()\nASN1_BIT_STRING_new()\nASN1_INTEGER_new()\nASN1_ENUMERATED_new()\nASN1_UTF8STRING_new()\nASN1_IA5STRING_new()\nASN1_UNIVERSALSTRING_new()\nASN1_BMPSTRING_new()\nASN1_GENERALSTRING_new()\nASN1_T61STRING_new()\nASN1_VISIBLESTRING_new()\nASN1_PRINTABLESTRING_new()\nASN1_PRINTABLE_new()\nDIRECTORYSTRING_new()\nDISPLAYTEXT_new()  \nASN1_GENERALIZEDTIME_new()\nASN1_UTCTIME_new()\nASN1_TIME_new()"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-3449",
              "name": "CVE-2021-3449",
              "shortDescription": {
                "text": "Scanner for CVE-2021-3449"
              },
              "fullDescription": {
                "text": "The scanner checks whether the server is configured with both:\n\n* TLSv1.2\n* Renegotiation is enabled\n\n\nThis CVE is applicable in ELF files under additional conditions (that the scanner currently does not check), which should be verified. The conditions are:\n\n1. The server code explicity sets the minimum and maximum versions of TLS to support TLSv1.2 (TLSv1.3 support 1.2 as well)\n\nFor example:\n```\nSSL_CTX_set_min_proto_version(ctx, TLS1_2_VERSION);\nSSL_CTX_set_max_proto_version(ctx, TLS1_3_VERSION);\n```\n\n2. The server code *does not* explicity disables renegotiation by `SSL_CTX_set_options(ctx, SSL_OP_NO_RENEGOTIATION)`.",
                "markdown": "The scanner checks whether the server is configured with both:\n\n* TLSv1.2\n* Renegotiation is enabled\n\n\nThis CVE is applicable in ELF files under additional conditions (that the scanner currently does not check), which should be verified. The conditions are:\n\n1. The server code explicity sets the minimum and maximum versions of TLS to support TLSv1.2 (TLSv1.3 support 1.2 as well)\n\nFor example:\n```\nSSL_CTX_set_min_proto_version(ctx, TLS1_2_VERSION);\nSSL_CTX_set_max_proto_version(ctx, TLS1_3_VERSION);\n```\n\n2. The server code *does not* explicity disables renegotiation by `SSL_CTX_set_options(ctx, SSL_OP_NO_RENEGOTIATION)`."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-36159",
              "name": "CVE-2021-36159",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-36159"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-15095",
              "name": "CVE-2020-15095",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-15095"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-0727",
              "name": "CVE-2024-0727",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-0727"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2019-10773",
              "name": "CVE-2019-10773",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2019-10773"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-28928",
              "name": "CVE-2020-28928",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-28928"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-1967",
              "name": "CVE-2020-1967",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-1967"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-7608",
              "name": "CVE-2020-7608",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-7608"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-37713",
              "name": "CVE-2021-37713",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-37713"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-5678",
              "name": "CVE-2023-5678",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-5678"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-3803",
              "name": "CVE-2021-3803",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-3803"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-30065",
              "name": "CVE-2022-30065",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-30065"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2019-1551",
              "name": "CVE-2019-1551",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2019-1551"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-4603",
              "name": "CVE-2024-4603",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-4603"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-3446",
              "name": "CVE-2023-3446",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-3446"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2019-16776",
              "name": "CVE-2019-16776",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2019-16776"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2000-1254",
              "name": "CVE-2000-1254",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2000-1254"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-37701",
              "name": "CVE-2021-37701",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-37701"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-32640",
              "name": "CVE-2021-32640",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-32640"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-7754",
              "name": "CVE-2020-7754",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-7754"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-32803",
              "name": "CVE-2021-32803",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-32803"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-29415",
              "name": "CVE-2024-29415",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-29415"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2019-1547",
              "name": "CVE-2019-1547",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2019-1547"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-21298",
              "name": "CVE-2021-21298",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-21298"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2019-13173",
              "name": "CVE-2019-13173",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2019-13173"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-0842",
              "name": "CVE-2023-0842",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-0842"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42385",
              "name": "CVE-2021-42385",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42385"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-37890",
              "name": "CVE-2024-37890",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-37890"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-28831",
              "name": "CVE-2021-28831",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-28831"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-23840",
              "name": "CVE-2021-23840",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-23840"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2017-18869",
              "name": "CVE-2017-18869",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2017-18869"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2019-16775",
              "name": "CVE-2019-16775",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2019-16775"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42381",
              "name": "CVE-2021-42381",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42381"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2017-16137",
              "name": "CVE-2017-16137",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2017-16137"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2019-1549",
              "name": "CVE-2019-1549",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2019-1549"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-23362",
              "name": "CVE-2021-23362",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-23362"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-23839",
              "name": "CVE-2021-23839",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-23839"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-23400",
              "name": "CVE-2021-23400",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-23400"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-0778",
              "name": "CVE-2022-0778",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-0778"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42384",
              "name": "CVE-2021-42384",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42384"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-4203",
              "name": "CVE-2022-4203",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-4203"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `SSL_CTX_set_verify()` or `SSL_set_verify()` functions are called.\nA call with the `SSL_VERIFY_PEER` mode is enabling client authentication and makes this vulnerability possible.",
                "markdown": "The scanner checks whether the `SSL_CTX_set_verify()` or `SSL_set_verify()` functions are called.\nA call with the `SSL_VERIFY_PEER` mode is enabling client authentication and makes this vulnerability possible."
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-1394",
              "name": "CVE-2024-1394",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-1394"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-29041",
              "name": "CVE-2024-29041",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-29041"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42374",
              "name": "CVE-2021-42374",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42374"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-2511",
              "name": "CVE-2024-2511",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-2511"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-4039",
              "name": "CVE-2023-4039",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-4039"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-27088",
              "name": "CVE-2024-27088",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-27088"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2019-16777",
              "name": "CVE-2019-16777",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2019-16777"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42386",
              "name": "CVE-2021-42386",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42386"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42364",
              "name": "CVE-2023-42364",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42364"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-1971",
              "name": "CVE-2020-1971",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-1971"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-3817",
              "name": "CVE-2023-3817",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-3817"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-1255",
              "name": "CVE-2023-1255",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-1255"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-4160",
              "name": "CVE-2021-4160",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-4160"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-8244",
              "name": "CVE-2020-8244",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-8244"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-24434",
              "name": "CVE-2022-24434",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-24434"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2019-5448",
              "name": "CVE-2019-5448",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2019-5448"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-25896",
              "name": "CVE-2022-25896",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-25896"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-7769",
              "name": "CVE-2020-7769",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-7769"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-28391",
              "name": "CVE-2022-28391",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-28391"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42375",
              "name": "CVE-2021-42375",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42375"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42380",
              "name": "CVE-2021-42380",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42380"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-3450",
              "name": "CVE-2021-3450",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-3450"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2019-1552",
              "name": "CVE-2019-1552",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2019-1552"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2018-20834",
              "name": "CVE-2018-20834",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2018-20834"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42365",
              "name": "CVE-2023-42365",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42365"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-8116",
              "name": "CVE-2020-8116",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-8116"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-6237",
              "name": "CVE-2023-6237",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-6237"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-15366",
              "name": "CVE-2020-15366",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-15366"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-2975",
              "name": "CVE-2023-2975",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-2975"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42378",
              "name": "CVE-2021-42378",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42378"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42379",
              "name": "CVE-2021-42379",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42379"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2009-3767",
              "name": "CVE-2009-3767",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2009-3767"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-27290",
              "name": "CVE-2021-27290",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-27290"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-30139",
              "name": "CVE-2021-30139",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-30139"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42382",
              "name": "CVE-2021-42382",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42382"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42383",
              "name": "CVE-2021-42383",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42383"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-8131",
              "name": "CVE-2020-8131",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-8131"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-28469",
              "name": "CVE-2020-28469",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-28469"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42363",
              "name": "CVE-2023-42363",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42363"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-27307",
              "name": "CVE-2024-27307",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-27307"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-48174",
              "name": "CVE-2022-48174",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-48174"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-33987",
              "name": "CVE-2022-33987",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-33987"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-3826",
              "name": "CVE-2021-3826",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-3826"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-21297",
              "name": "CVE-2021-21297",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-21297"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2019-15608",
              "name": "CVE-2019-15608",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2019-15608"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2019-1563",
              "name": "CVE-2019-1563",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2019-1563"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-28155",
              "name": "CVE-2023-28155",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-28155"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-4304",
              "name": "CVE-2022-4304",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-4304"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-23841",
              "name": "CVE-2021-23841",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-23841"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-37322",
              "name": "CVE-2021-37322",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-37322"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-6129",
              "name": "CVE-2023-6129",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-6129"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42376",
              "name": "CVE-2021-42376",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42376"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42366",
              "name": "CVE-2023-42366",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42366"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            }
          ],
          "version": "1.0"
        }
      },
      "invocations": [
        {
          "arguments": [
            "/root/.jfrog/dependencies/analyzerManager/jas_scanner/jas_scanner",
            "scan",
            "/tmp/jfrog.cli.temp.-1718693398-690554390/config.yaml"
          ],
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "/tmp/jfrog.cli.temp.-1718693325-2984568703/image.tar"
          }
        }
      ],
      "results": [
        {
          "ruleId": "applic_CVE-2018-25032",
          "message": {
            "text": "The vulnerable function deflateInit2 is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-4435",
          "kind": "pass",
          "message": {
            "text": "The vulnerability is only exploitable when running under the Windows OS.\nSince currently only Linux containers are supported, the scanner will always conclude that this vulnerability is not applicable."
          }
        },
        {
          "ruleId": "applic_CVE-2019-15847",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2020-28500",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `lodash.trim` with external input to its 1st (`string`) argument.\n* `lodash.toNumber` with external input to its 1st (`value`) argument.\n* `lodash.trimEnd` with external input to its 1st (`string`) argument."
          }
        },
        {
          "ruleId": "applic_CVE-2020-7598",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `minimist` is called with external input to its 1st (`args`) argument, and the `Object.freeze()` remediation is not present."
          }
        },
        {
          "ruleId": "applic_CVE-2021-44906",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `minimist` is called with external input to its 1st (`args`) argument, and the `Object.freeze()` remediation is not present."
          }
        },
        {
          "ruleId": "applic_CVE-2020-7788",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `ini.parse` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2020-8203",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `zipObjectDeep` is called with external input to its 1st (`props`) and 2nd (`values`) arguments, and the `Object.freeze()` remediation is not present."
          }
        },
        {
          "ruleId": "applic_CVE-2021-23337",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `lodash.template` is called with external input to its 2nd (`options`) argument."
          }
        },
        {
          "ruleId": "applic_CVE-2021-37712",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `tar.x\n* `tar.extract`"
          }
        },
        {
          "ruleId": "applic_CVE-2024-28863",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `tar.x`\n* `tar.extract`"
          }
        },
        {
          "ruleId": "applic_CVE-2021-32804",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `tar.x`\n* `tar.extract`"
          }
        },
        {
          "ruleId": "applic_CVE-2021-3807",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `ansi-regex` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2021-3918",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `json-schema.validate` with external input to its 1st (`instance`) argument.\n* `json-schema.checkPropertyChange` with external input to its 2nd (`schema`) argument.\n\nThe scanner also checks whether the `Object.freeze()` remediation is not present."
          }
        },
        {
          "ruleId": "applic_CVE-2022-2097",
          "message": {
            "text": "The vulnerable function EVP_EncryptInit_ex is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24785",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `locale` is called with external input to its 1st (`config`) argument."
          }
        },
        {
          "ruleId": "applic_CVE-2022-24999",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `qs.parse` is called with the non-default option 'allowPrototypes' enabled, and the `Object.freeze()` remediation is not present.\nIt also checks whether `express.js` has a GET path that processes its query strings."
          }
        },
        {
          "ruleId": "applic_CVE-2022-25881",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the object `CachePolicy` has been initiated using user-controlled input, or whether the vulnerable function `satisfiesWithoutRevalidation` has been called with user-controlled input."
          }
        },
        {
          "ruleId": "applic_CVE-2022-31129",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `moment` is called with external input to its 1st (`config`) argument."
          }
        },
        {
          "ruleId": "applic_CVE-2022-3517",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following vulnerable functions are called with external input to the `pattern` argument and brace expansion is not disabled (by the option `{nobrace: true}`):\n\n- `minimatch()`\n- `minimatch.braceExpand()`\n- `minimatch.filter()`\n- `minimatch.match()`\n- `minimatch.makeRe()`\n- `minimatch.Minimatch.prototype.braceExpand()`\n- `minimatch.Minimatch() `\n\nNote that if a call to the `minimatch.filter()` function was found by the scanner, the vulnerability is applicable only if the function returned by `minimatch.filter()` is invoked. Currently, the scanner does not check that."
          }
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///sbin/apk"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///sbin/apk"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libtls-standalone.so.1.0.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libtls-standalone.so.1.0.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libtls-standalone.so.1.0.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libtls-standalone.so.1.0.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_accept is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libtls-standalone.so.1.0.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libtls-standalone.so.1.0.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function BIO_new_ssl_connect is called, indicating a TLS client that may accept crafted server certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_accept is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function BIO_new_connect is called, indicating a TLS client that may accept crafted server certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///sbin/apk"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///sbin/apk"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libtls-standalone.so.1.0.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libtls-standalone.so.1.0.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libtls-standalone.so.1.0.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libtls-standalone.so.1.0.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_accept is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libtls-standalone.so.1.0.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libtls-standalone.so.1.0.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function BIO_new_ssl_connect is called, indicating a TLS client that may accept crafted server certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_accept is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function BIO_new_connect is called, indicating a TLS client that may accept crafted server certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-37434",
          "message": {
            "text": "The vulnerable library zlib is included"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-37434",
          "message": {
            "text": "The vulnerable function inflateGetHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-37434",
          "message": {
            "text": "The vulnerable library zlib is included"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-37434",
          "message": {
            "text": "The vulnerable library zlib is included"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-37434",
          "message": {
            "text": "The vulnerable library zlib is included"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-37434",
          "message": {
            "text": "The vulnerable library zlib is included"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-37434",
          "message": {
            "text": "The vulnerable library zlib is included"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-37434",
          "message": {
            "text": "The vulnerable library zlib is included"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-38900",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `decode-uri-component` is called with external input."
          }
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0215",
          "message": {
            "text": "The vulnerable function `i2d_ASN1_bio_stream` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0215",
          "message": {
            "text": "The vulnerable function `PEM_write_bio_ASN1_stream` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0215",
          "message": {
            "text": "The vulnerable function `SMIME_write_ASN1` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0215",
          "message": {
            "text": "The vulnerable function `BIO_new_NDEF` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0215",
          "message": {
            "text": "The vulnerable function `BIO_new_CMS` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0215",
          "message": {
            "text": "The vulnerable function `i2d_CMS_bio_stream` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0215",
          "message": {
            "text": "The vulnerable function `PEM_write_bio_CMS_stream` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0215",
          "message": {
            "text": "The vulnerable function `SMIME_write_CMS` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0215",
          "message": {
            "text": "The vulnerable function `BIO_new_PKCS7` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0215",
          "message": {
            "text": "The vulnerable function `i2d_PKCS7_bio_stream` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0215",
          "message": {
            "text": "The vulnerable function `PEM_write_bio_PKCS7_stream` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0215",
          "message": {
            "text": "The vulnerable function `SMIME_write_PKCS7` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0217",
          "kind": "pass",
          "message": {
            "text": "When checking ELF files, the scanner checks whether the vulnerable `EVP_PKEY_public_check()` function is called.\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked"
          }
        },
        {
          "ruleId": "applic_CVE-2023-0286",
          "kind": "pass",
          "message": {
            "text": "The scanner checks if at least one of the vulnerable API calls is called:\n\n* `X509_STORE_CTX_get_check_revocation`\n* `X509_STORE_get_check_revocation`\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The CRL checking option must also be enabled."
          }
        },
        {
          "ruleId": "applic_CVE-2023-0401",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0401",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0465",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0464",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-26136",
          "kind": "pass",
          "message": {
            "text": "The scanner checks for the initialization of `CookieJar()` with the vulnerable option ` rejectPublicSuffixes` set to false."
          }
        },
        {
          "ruleId": "applic_CVE-2022-25883",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following function are called:\n\n* `Range`\n* `satisfies`\n* `intersects`\n* `maxSatisfying`\n* `minSatisfying`\n* `minVersion`\n* `outside`\n* `subset`\n* `toComparators`\n* `validRange`\n* `gtr`\n* `ltr`"
          }
        },
        {
          "ruleId": "applic_CVE-2020-7774",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `setLocale` is called with external input to its 1st argument"
          }
        },
        {
          "ruleId": "applic_CVE-2021-3711",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0216",
          "message": {
            "text": "The vulnerable function `d2i_PKCS7` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0216",
          "message": {
            "text": "The vulnerable function `d2i_PKCS7_fp` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0216",
          "message": {
            "text": "The vulnerable function `d2i_PKCS7_bio` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for both OpenSSL 1.x and 3.x were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-1292",
          "kind": "pass",
          "message": {
            "text": "The scanner checks for the execution of the vulnerable `c_rehash` by searching the artifact for the vulnerable command."
          }
        },
        {
          "ruleId": "applic_CVE-2022-2068",
          "kind": "pass",
          "message": {
            "text": "The scanner checks for the execution of the vulnerable `c_rehash` by searching the artifact for the vulnerable command."
          }
        },
        {
          "ruleId": "applic_CVE-2023-5363",
          "kind": "pass",
          "message": {
            "text": "The scanner checks if any of the following vulnerable functions are called:\n\n- `EVP_EncryptInit_ex2`\n- `EVP_DecryptInit_ex2`\n- `EVP_CipherInit_ex2`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-0466",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-42282",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether `isPublic()` is called with external input."
          }
        },
        {
          "ruleId": "applic_CVE-2023-49210",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable `openssl` function is used with external input."
          }
        },
        {
          "ruleId": "applic_CVE-2016-7798",
          "kind": "pass",
          "message": {
            "text": "The scanner checks if the function `OpenSSL::Cipher.new()` is called with AES gcm is as the encryption type. \nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The AES IV initialization happens before the key initialization."
          }
        },
        {
          "ruleId": "applic_CVE-2021-3712",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-3712",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-3712",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-3712",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-3712",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-3712",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-3712",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-3712",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-3712",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-3712",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-3712",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-3712",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-3712",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-3712",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-3712",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-3712",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-3712",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-3712",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-3712",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-3712",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/node"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-3449",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the server is configured with both:\n\n* TLSv1.2\n* Renegotiation is enabled\n\n\nThis CVE is applicable in ELF files under additional conditions (that the scanner currently does not check), which should be verified. The conditions are:\n\n1. The server code explicity sets the minimum and maximum versions of TLS to support TLSv1.2 (TLSv1.3 support 1.2 as well)\n\nFor example:\n```\nSSL_CTX_set_min_proto_version(ctx, TLS1_2_VERSION);\nSSL_CTX_set_max_proto_version(ctx, TLS1_3_VERSION);\n```\n\n2. The server code *does not* explicity disables renegotiation by `SSL_CTX_set_options(ctx, SSL_OP_NO_RENEGOTIATION)`."
          }
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://jfrog.com/help/r/jfrog-security-documentation/jfrog-advanced-security",
          "name": "JFrog Secrets scanner",
          "rules": [
            {
              "id": "REQ.SECRET.GENERIC.TEXT",
              "name": "REQ.SECRET.GENERIC.TEXT",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.TEXT"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive"
              }
            },
            {
              "id": "REQ.SECRET.GENERIC.CODE",
              "name": "REQ.SECRET.GENERIC.CODE",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.CODE"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive"
              }
            },
            {
              "id": "REQ.SECRET.GENERIC.URL",
              "name": "REQ.SECRET.GENERIC.URL",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.URL"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive"
              }
            },
            {
              "id": "REQ.SECRET.KEYS",
              "name": "REQ.SECRET.KEYS",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.KEYS"
              },
              "fullDescription": {
                "text": "\nStoring an API key in the image could lead to several risks.\n\nIf the key is associated with a wide scope of privileges, attackers could extract it from a single image or firmware and use it maliciously to attack many targets. For example, if the embedded key allows querying/modifying data for all cloud user accounts, without per-user authentication, the attackers who extract it would gain access to system-wide data.\n\nIf the cloud/SaaS provider bills by key usage - for example, every million queries cost the key's owner a fixed sum of money - attackers could use the keys for their own purposes (or just as a form of vandalism), incurring a large cost to the legitimate user or operator.\n\n## Best practices\n\nUse narrow scopes for stored API keys. As much as possible, API keys should be unique per host and require additional authentication with the user's individual credentials for any sensitive actions.\n\nAvoid placing keys whose use incurs costs directly in the image. Store the key with any software or hardware protection available on the host for key storage (such as operating system key-stores, hardware cryptographic storage mechanisms or cloud-managed secure storage services such as [AWS KMS](https://aws.amazon.com/kms/)).\n\nTokens that were detected as exposed should be revoked and replaced -\n\n* [AWS Key Revocation](https://aws.amazon.com/premiumsupport/knowledge-center/delete-access-key/#:~:text=If%20you%20see%20a%20warning,the%20confirmation%20box%2C%20choose%20Deactivate.)\n* [GCP Key Revocation](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/CloudIAM/delete-api-keys.html)\n* [Azure Key Revocation](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops\u0026tabs=Windows#revoke-a-pat)\n* [GitHub Key Revocation](https://docs.github.com/en/rest/apps/oauth-applications#delete-an-app-authorization)\n",
                "markdown": "\nStoring an API key in the image could lead to several risks.\n\nIf the key is associated with a wide scope of privileges, attackers could extract it from a single image or firmware and use it maliciously to attack many targets. For example, if the embedded key allows querying/modifying data for all cloud user accounts, without per-user authentication, the attackers who extract it would gain access to system-wide data.\n\nIf the cloud/SaaS provider bills by key usage - for example, every million queries cost the key's owner a fixed sum of money - attackers could use the keys for their own purposes (or just as a form of vandalism), incurring a large cost to the legitimate user or operator.\n\n## Best practices\n\nUse narrow scopes for stored API keys. As much as possible, API keys should be unique per host and require additional authentication with the user's individual credentials for any sensitive actions.\n\nAvoid placing keys whose use incurs costs directly in the image. Store the key with any software or hardware protection available on the host for key storage (such as operating system key-stores, hardware cryptographic storage mechanisms or cloud-managed secure storage services such as [AWS KMS](https://aws.amazon.com/kms/)).\n\nTokens that were detected as exposed should be revoked and replaced -\n\n* [AWS Key Revocation](https://aws.amazon.com/premiumsupport/knowledge-center/delete-access-key/#:~:text=If%20you%20see%20a%20warning,the%20confirmation%20box%2C%20choose%20Deactivate.)\n* [GCP Key Revocation](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/CloudIAM/delete-api-keys.html)\n* [Azure Key Revocation](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops\u0026tabs=Windows#revoke-a-pat)\n* [GitHub Key Revocation](https://docs.github.com/en/rest/apps/oauth-applications#delete-an-app-authorization)\n"
              },
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private"
              }
            }
          ],
          "version": "1.0"
        }
      },
      "invocations": [
        {
          "arguments": [
            "/root/.jfrog/dependencies/analyzerManager/jas_scanner/jas_scanner",
            "scan",
            "/tmp/jfrog.cli.temp.-1718693398-690554390/config.yaml"
          ],
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "/tmp/jfrog.cli.temp.-1718693325-2984568703/image.tar"
          }
        }
      ],
      "results": []
    }
  ]
}
