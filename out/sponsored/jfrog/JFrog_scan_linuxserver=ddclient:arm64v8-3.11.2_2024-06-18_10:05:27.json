{
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "informationUri": "https://docs.jfrog-applications.jfrog.io/jfrog-security-features/sca",
          "name": "JFrog Xray SCA",
          "rules": [
            {
              "id": "CVE-2022-48620_3.19:libuv_1.47.0-r0",
              "shortDescription": {
                "text": "[CVE-2022-48620] 3.19:libuv 1.47.0-r0"
              },
              "help": {
                "text": "uev (aka libuev) before 2.4.1 has a buffer overflow in epoll_wait if maxevents is a large number.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__26b16f4f79bbc282c9e502c649331e64654f9fd0b6079adcb4280927b74ac680.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2024-0853_3.19:curl_8.5.0-r0",
              "shortDescription": {
                "text": "[CVE-2024-0853] 3.19:curl 8.5.0-r0"
              },
              "help": {
                "text": "curl inadvertently kept the SSL session ID for connections in its cache even when the verify status (*OCSP stapling*) test failed. A subsequent transfer to\nthe same hostname could then succeed if the session ID cache was still fresh, which then skipped the verify status check.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__871c71dd2df66914823a452fc5a716294851056d082a64ff83f05a6a99e8a53f.tar `       | [8.6.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2024-0853_3.19:libcurl_8.5.0-r0",
              "shortDescription": {
                "text": "[CVE-2024-0853] 3.19:libcurl 8.5.0-r0"
              },
              "help": {
                "text": "curl inadvertently kept the SSL session ID for connections in its cache even when the verify status (*OCSP stapling*) test failed. A subsequent transfer to\nthe same hostname could then succeed if the session ID cache was still fresh, which then skipped the verify status check.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__871c71dd2df66914823a452fc5a716294851056d082a64ff83f05a6a99e8a53f.tar `       | [8.6.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2024-22365_3.19:linux-pam_1.5.3-r7",
              "shortDescription": {
                "text": "[CVE-2024-22365] 3.19:linux-pam 1.5.3-r7"
              },
              "help": {
                "text": "linux-pam (aka Linux PAM) before 1.6.0 allows attackers to cause a denial of service (blocked login process) via mkfifo because the openat call (for protect_dir) lacks O_DIRECTORY.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__871c71dd2df66914823a452fc5a716294851056d082a64ff83f05a6a99e8a53f.tar `       | [1.6.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2024-2004_3.19:curl_8.5.0-r0",
              "shortDescription": {
                "text": "[CVE-2024-2004] 3.19:curl 8.5.0-r0"
              },
              "help": {
                "text": "When a protocol selection parameter option disables all protocols without adding any then the default set of protocols would remain in the allowed set due to an error in the logic for removing protocols. The below command would perform a request to curl.se with a plaintext protocol which has been explicitly disabled.      curl --proto -all,-http http://curl.se  The flaw is only present if the set of selected protocols disables the entire set of available protocols, in itself a command with no practical use and therefore unlikely to be encountered in real situations. The curl security team has thus assessed this to be low severity bug.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__871c71dd2df66914823a452fc5a716294851056d082a64ff83f05a6a99e8a53f.tar `       | [8.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2379_3.19:curl_8.5.0-r0",
              "shortDescription": {
                "text": "[CVE-2024-2379] 3.19:curl 8.5.0-r0"
              },
              "help": {
                "text": "libcurl skips the certificate verification for a QUIC connection under certain conditions, when built to use wolfSSL. If told to use an unknown/bad cipher or curve, the error path accidentally skips the verification and returns OK, thus ignoring any certificate problems.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__871c71dd2df66914823a452fc5a716294851056d082a64ff83f05a6a99e8a53f.tar `       | [8.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2466_3.19:curl_8.5.0-r0",
              "shortDescription": {
                "text": "[CVE-2024-2466] 3.19:curl 8.5.0-r0"
              },
              "help": {
                "text": "libcurl did not check the server certificate of TLS connections done to a host specified as an IP address, when built to use mbedTLS.  libcurl would wrongly avoid using the set hostname function when the specified hostname was given as an IP address, therefore completely skipping the certificate check. This affects all uses of TLS protocols (HTTPS, FTPS, IMAPS, POPS3, SMTPS, etc).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__871c71dd2df66914823a452fc5a716294851056d082a64ff83f05a6a99e8a53f.tar `       | [8.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2398_3.19:libcurl_8.5.0-r0",
              "shortDescription": {
                "text": "[CVE-2024-2398] 3.19:libcurl 8.5.0-r0"
              },
              "help": {
                "text": "When an application tells libcurl it wants to allow HTTP/2 server push, and the amount of received headers for the push surpasses the maximum allowed limit (1000), libcurl aborts the server push. When aborting, libcurl inadvertently does not free all the previously allocated headers and instead leaks the memory.  Further, this error condition fails silently and is therefore not easily detected by an application.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__871c71dd2df66914823a452fc5a716294851056d082a64ff83f05a6a99e8a53f.tar `       | [8.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2466_3.19:libcurl_8.5.0-r0",
              "shortDescription": {
                "text": "[CVE-2024-2466] 3.19:libcurl 8.5.0-r0"
              },
              "help": {
                "text": "libcurl did not check the server certificate of TLS connections done to a host specified as an IP address, when built to use mbedTLS.  libcurl would wrongly avoid using the set hostname function when the specified hostname was given as an IP address, therefore completely skipping the certificate check. This affects all uses of TLS protocols (HTTPS, FTPS, IMAPS, POPS3, SMTPS, etc).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__871c71dd2df66914823a452fc5a716294851056d082a64ff83f05a6a99e8a53f.tar `       | [8.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2379_3.19:libcurl_8.5.0-r0",
              "shortDescription": {
                "text": "[CVE-2024-2379] 3.19:libcurl 8.5.0-r0"
              },
              "help": {
                "text": "libcurl skips the certificate verification for a QUIC connection under certain conditions, when built to use wolfSSL. If told to use an unknown/bad cipher or curve, the error path accidentally skips the verification and returns OK, thus ignoring any certificate problems.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__871c71dd2df66914823a452fc5a716294851056d082a64ff83f05a6a99e8a53f.tar `       | [8.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2398_3.19:curl_8.5.0-r0",
              "shortDescription": {
                "text": "[CVE-2024-2398] 3.19:curl 8.5.0-r0"
              },
              "help": {
                "text": "When an application tells libcurl it wants to allow HTTP/2 server push, and the amount of received headers for the push surpasses the maximum allowed limit (1000), libcurl aborts the server push. When aborting, libcurl inadvertently does not free all the previously allocated headers and instead leaks the memory.  Further, this error condition fails silently and is therefore not easily detected by an application.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__871c71dd2df66914823a452fc5a716294851056d082a64ff83f05a6a99e8a53f.tar `       | [8.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2004_3.19:libcurl_8.5.0-r0",
              "shortDescription": {
                "text": "[CVE-2024-2004] 3.19:libcurl 8.5.0-r0"
              },
              "help": {
                "text": "When a protocol selection parameter option disables all protocols without adding any then the default set of protocols would remain in the allowed set due to an error in the logic for removing protocols. The below command would perform a request to curl.se with a plaintext protocol which has been explicitly disabled.      curl --proto -all,-http http://curl.se  The flaw is only present if the set of selected protocols disables the entire set of available protocols, in itself a command with no practical use and therefore unlikely to be encountered in real situations. The curl security team has thus assessed this to be low severity bug.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__871c71dd2df66914823a452fc5a716294851056d082a64ff83f05a6a99e8a53f.tar `       | [8.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-52071_3.19:libcurl_8.5.0-r0",
              "shortDescription": {
                "text": "[CVE-2023-52071] 3.19:libcurl 8.5.0-r0"
              },
              "help": {
                "text": "CVE-2023-52071",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__871c71dd2df66914823a452fc5a716294851056d082a64ff83f05a6a99e8a53f.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-52071_3.19:curl_8.5.0-r0",
              "shortDescription": {
                "text": "[CVE-2023-52071] 3.19:curl 8.5.0-r0"
              },
              "help": {
                "text": "CVE-2023-52071",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__871c71dd2df66914823a452fc5a716294851056d082a64ff83f05a6a99e8a53f.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-24806_3.19:libuv_1.47.0-r0",
              "shortDescription": {
                "text": "[CVE-2024-24806] 3.19:libuv 1.47.0-r0"
              },
              "help": {
                "text": "libuv is a multi-platform support library with a focus on asynchronous I/O. The `uv_getaddrinfo` function in `src/unix/getaddrinfo.c` (and its windows counterpart `src/win/getaddrinfo.c`), truncates hostnames to 256 characters before calling `getaddrinfo`. This behavior can be exploited to create addresses like `0x00007f000001`, which are considered valid by `getaddrinfo` and could allow an attacker to craft payloads that resolve to unintended IP addresses, bypassing developer checks. The vulnerability arises due to how the `hostname_ascii` variable (with a length of 256 bytes) is handled in `uv_getaddrinfo` and subsequently in `uv__idna_toascii`. When the hostname exceeds 256 characters, it gets truncated without a terminating null byte. As a result attackers may be able to access internal APIs or for websites (similar to MySpace) that allows users to have `username.example.com` pages. Internal services that crawl or cache these user pages can be exposed to SSRF attacks if a malicious user chooses a long vulnerable username. This issue has been addressed in release version 1.48.0. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.3      | Not Applicable       | `sha256__26b16f4f79bbc282c9e502c649331e64654f9fd0b6079adcb4280927b74ac680.tar `       | [1.48.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            }
          ],
          "version": "3.96.1"
        }
      },
      "results": [
        {
          "ruleId": "CVE-2022-48620_3.19:libuv_1.47.0-r0",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "[CVE-2022-48620] sha256__26b16f4f79bbc282c9e502c649331e64654f9fd0b6079adcb4280927b74ac680.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-0853_3.19:curl_8.5.0-r0",
          "ruleIndex": 1,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-0853] sha256__871c71dd2df66914823a452fc5a716294851056d082a64ff83f05a6a99e8a53f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-0853_3.19:libcurl_8.5.0-r0",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-0853] sha256__871c71dd2df66914823a452fc5a716294851056d082a64ff83f05a6a99e8a53f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-22365_3.19:linux-pam_1.5.3-r7",
          "ruleIndex": 3,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-22365] sha256__871c71dd2df66914823a452fc5a716294851056d082a64ff83f05a6a99e8a53f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2004_3.19:curl_8.5.0-r0",
          "ruleIndex": 4,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2004] sha256__871c71dd2df66914823a452fc5a716294851056d082a64ff83f05a6a99e8a53f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2379_3.19:curl_8.5.0-r0",
          "ruleIndex": 5,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2379] sha256__871c71dd2df66914823a452fc5a716294851056d082a64ff83f05a6a99e8a53f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2466_3.19:curl_8.5.0-r0",
          "ruleIndex": 6,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2466] sha256__871c71dd2df66914823a452fc5a716294851056d082a64ff83f05a6a99e8a53f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2398_3.19:libcurl_8.5.0-r0",
          "ruleIndex": 7,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2398] sha256__871c71dd2df66914823a452fc5a716294851056d082a64ff83f05a6a99e8a53f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2466_3.19:libcurl_8.5.0-r0",
          "ruleIndex": 8,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2466] sha256__871c71dd2df66914823a452fc5a716294851056d082a64ff83f05a6a99e8a53f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2379_3.19:libcurl_8.5.0-r0",
          "ruleIndex": 9,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2379] sha256__871c71dd2df66914823a452fc5a716294851056d082a64ff83f05a6a99e8a53f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2398_3.19:curl_8.5.0-r0",
          "ruleIndex": 10,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2398] sha256__871c71dd2df66914823a452fc5a716294851056d082a64ff83f05a6a99e8a53f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2004_3.19:libcurl_8.5.0-r0",
          "ruleIndex": 11,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2004] sha256__871c71dd2df66914823a452fc5a716294851056d082a64ff83f05a6a99e8a53f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-52071_3.19:libcurl_8.5.0-r0",
          "ruleIndex": 12,
          "level": "none",
          "message": {
            "text": "[CVE-2023-52071] sha256__871c71dd2df66914823a452fc5a716294851056d082a64ff83f05a6a99e8a53f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-52071_3.19:curl_8.5.0-r0",
          "ruleIndex": 13,
          "level": "none",
          "message": {
            "text": "[CVE-2023-52071] sha256__871c71dd2df66914823a452fc5a716294851056d082a64ff83f05a6a99e8a53f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24806_3.19:libuv_1.47.0-r0",
          "ruleIndex": 14,
          "level": "error",
          "message": {
            "text": "[CVE-2024-24806] sha256__26b16f4f79bbc282c9e502c649331e64654f9fd0b6079adcb4280927b74ac680.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://jfrog.com/help/r/jfrog-security-documentation/jfrog-advanced-security",
          "name": "JFrog Applicability Scanner",
          "rules": [
            {
              "id": "applic_CVE-2024-24806",
              "name": "CVE-2024-24806",
              "shortDescription": {
                "text": "Scanner for CVE-2024-24806"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `uv_getaddrinfo` is called.",
                "markdown": "The scanner checks whether the vulnerable function `uv_getaddrinfo` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2024-2398",
              "name": "CVE-2024-2398",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-2398"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-2466",
              "name": "CVE-2024-2466",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-2466"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-0853",
              "name": "CVE-2024-0853",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-0853"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-2004",
              "name": "CVE-2024-2004",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-2004"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-22365",
              "name": "CVE-2024-22365",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-22365"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-48620",
              "name": "CVE-2022-48620",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-48620"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-52071",
              "name": "CVE-2023-52071",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-52071"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-2379",
              "name": "CVE-2024-2379",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-2379"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            }
          ],
          "version": "1.0"
        }
      },
      "invocations": [
        {
          "arguments": [
            "/root/.jfrog/dependencies/analyzerManager/jas_scanner/jas_scanner",
            "scan",
            "/tmp/jfrog.cli.temp.-1718705156-721347603/config.yaml"
          ],
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "/tmp/jfrog.cli.temp.-1718705127-2597234564/image.tar"
          }
        }
      ],
      "results": [
        {
          "ruleId": "applic_CVE-2024-24806",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `uv_getaddrinfo` is called."
          }
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://jfrog.com/help/r/jfrog-security-documentation/jfrog-advanced-security",
          "name": "JFrog Secrets scanner",
          "rules": [
            {
              "id": "REQ.SECRET.GENERIC.TEXT",
              "name": "REQ.SECRET.GENERIC.TEXT",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.TEXT"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "REQ.SECRET.GENERIC.CODE",
              "name": "REQ.SECRET.GENERIC.CODE",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.CODE"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private"
              }
            },
            {
              "id": "REQ.SECRET.GENERIC.URL",
              "name": "REQ.SECRET.GENERIC.URL",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.URL"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "REQ.SECRET.KEYS",
              "name": "REQ.SECRET.KEYS",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.KEYS"
              },
              "fullDescription": {
                "text": "\nStoring an API key in the image could lead to several risks.\n\nIf the key is associated with a wide scope of privileges, attackers could extract it from a single image or firmware and use it maliciously to attack many targets. For example, if the embedded key allows querying/modifying data for all cloud user accounts, without per-user authentication, the attackers who extract it would gain access to system-wide data.\n\nIf the cloud/SaaS provider bills by key usage - for example, every million queries cost the key's owner a fixed sum of money - attackers could use the keys for their own purposes (or just as a form of vandalism), incurring a large cost to the legitimate user or operator.\n\n## Best practices\n\nUse narrow scopes for stored API keys. As much as possible, API keys should be unique per host and require additional authentication with the user's individual credentials for any sensitive actions.\n\nAvoid placing keys whose use incurs costs directly in the image. Store the key with any software or hardware protection available on the host for key storage (such as operating system key-stores, hardware cryptographic storage mechanisms or cloud-managed secure storage services such as [AWS KMS](https://aws.amazon.com/kms/)).\n\nTokens that were detected as exposed should be revoked and replaced -\n\n* [AWS Key Revocation](https://aws.amazon.com/premiumsupport/knowledge-center/delete-access-key/#:~:text=If%20you%20see%20a%20warning,the%20confirmation%20box%2C%20choose%20Deactivate.)\n* [GCP Key Revocation](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/CloudIAM/delete-api-keys.html)\n* [Azure Key Revocation](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops\u0026tabs=Windows#revoke-a-pat)\n* [GitHub Key Revocation](https://docs.github.com/en/rest/apps/oauth-applications#delete-an-app-authorization)\n",
                "markdown": "\nStoring an API key in the image could lead to several risks.\n\nIf the key is associated with a wide scope of privileges, attackers could extract it from a single image or firmware and use it maliciously to attack many targets. For example, if the embedded key allows querying/modifying data for all cloud user accounts, without per-user authentication, the attackers who extract it would gain access to system-wide data.\n\nIf the cloud/SaaS provider bills by key usage - for example, every million queries cost the key's owner a fixed sum of money - attackers could use the keys for their own purposes (or just as a form of vandalism), incurring a large cost to the legitimate user or operator.\n\n## Best practices\n\nUse narrow scopes for stored API keys. As much as possible, API keys should be unique per host and require additional authentication with the user's individual credentials for any sensitive actions.\n\nAvoid placing keys whose use incurs costs directly in the image. Store the key with any software or hardware protection available on the host for key storage (such as operating system key-stores, hardware cryptographic storage mechanisms or cloud-managed secure storage services such as [AWS KMS](https://aws.amazon.com/kms/)).\n\nTokens that were detected as exposed should be revoked and replaced -\n\n* [AWS Key Revocation](https://aws.amazon.com/premiumsupport/knowledge-center/delete-access-key/#:~:text=If%20you%20see%20a%20warning,the%20confirmation%20box%2C%20choose%20Deactivate.)\n* [GCP Key Revocation](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/CloudIAM/delete-api-keys.html)\n* [Azure Key Revocation](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops\u0026tabs=Windows#revoke-a-pat)\n* [GitHub Key Revocation](https://docs.github.com/en/rest/apps/oauth-applications#delete-an-app-authorization)\n"
              },
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private"
              }
            }
          ],
          "version": "1.0"
        }
      },
      "invocations": [
        {
          "arguments": [
            "/root/.jfrog/dependencies/analyzerManager/jas_scanner/jas_scanner",
            "scan",
            "/tmp/jfrog.cli.temp.-1718705156-721347603/config.yaml"
          ],
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "/tmp/jfrog.cli.temp.-1718705127-2597234564/image.tar"
          }
        }
      ],
      "results": [
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpk9mhh503/unpacked/filesystem/blobs/sha256/0b54f911a87bc88f7d2db1823d5a66c20750273f89f4dc40205621a56f1ee1f8/usr/bin/ddclient.in"
                },
                "region": {
                  "startLine": 5465,
                  "startColumn": 2,
                  "endLine": 5465,
                  "endColumn": 2,
                  "snippet": {
                    "text": "pas************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpk9mhh503/unpacked/filesystem/blobs/sha256/0b54f911a87bc88f7d2db1823d5a66c20750273f89f4dc40205621a56f1ee1f8/usr/bin/ddclient.in"
                },
                "region": {
                  "startLine": 6558,
                  "startColumn": 2,
                  "endLine": 6558,
                  "endColumn": 2,
                  "snippet": {
                    "text": "pas************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpk9mhh503/unpacked/filesystem/blobs/sha256/0b54f911a87bc88f7d2db1823d5a66c20750273f89f4dc40205621a56f1ee1f8/usr/bin/ddclient.in"
                },
                "region": {
                  "startLine": 6567,
                  "startColumn": 31,
                  "endLine": 6567,
                  "endColumn": 31,
                  "snippet": {
                    "text": "tok************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpk9mhh503/unpacked/filesystem/blobs/sha256/0b54f911a87bc88f7d2db1823d5a66c20750273f89f4dc40205621a56f1ee1f8/usr/bin/ddclient.in"
                },
                "region": {
                  "startLine": 6880,
                  "startColumn": 2,
                  "endLine": 6880,
                  "endColumn": 2,
                  "snippet": {
                    "text": "pas************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpk9mhh503/unpacked/filesystem/blobs/sha256/0b54f911a87bc88f7d2db1823d5a66c20750273f89f4dc40205621a56f1ee1f8/usr/bin/ddclient.in"
                },
                "region": {
                  "startLine": 7596,
                  "startColumn": 24,
                  "endLine": 7596,
                  "endColumn": 24,
                  "snippet": {
                    "text": "Dom************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.URL",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpk9mhh503/unpacked/filesystem/blobs/sha256/0b54f911a87bc88f7d2db1823d5a66c20750273f89f4dc40205621a56f1ee1f8/usr/bin/ddclient.in"
                },
                "region": {
                  "startLine": 6567,
                  "startColumn": 3,
                  "endLine": 6567,
                  "endColumn": 3,
                  "snippet": {
                    "text": "htt************"
                  }
                }
              }
            }
          ]
        }
      ]
    }
  ]
}
