{
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "informationUri": "https://docs.jfrog-applications.jfrog.io/jfrog-security-features/sca",
          "name": "JFrog Xray SCA",
          "rules": [
            {
              "id": "CVE-2022-23806_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2022-23806] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "Curve.IsOnCurve in crypto/elliptic in Go before 1.16.14 and 1.17.x before 1.17.7 can incorrectly return true in situations with a big.Int value that is not a valid field element.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.1      | Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.16.14], [1.17.7]   |"
              },
              "properties": {
                "security-severity": "9.1"
              }
            },
            {
              "id": "CVE-2023-24540_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-24540] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "Not all valid JavaScript whitespace characters are considered to be whitespace. Templates containing whitespace characters outside of the character set \"\\t\\n\\f\\r\\u0020\\u2028\\u2029\" in JavaScript contexts that also contain actions may not be properly sanitized during execution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-24538_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2023-24538] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "Templates do not properly consider backticks (`) as Javascript string delimiters, and do not escape them as expected. Backticks are used, since ES6, for JS template literals. If a template contains a Go template action within a Javascript template literal, the contents of the action can be used to terminate the literal, injecting arbitrary Javascript code into the Go template. As ES6 template literals are rather complex, and themselves can do string interpolation, the decision was made to simply disallow Go template actions from being used inside of them (e.g. \"var a = {{.}}\"), since there is no obviously safe way to allow this behavior. This takes the same approach as github.com/google/safehtml. With fix, Template.Parse returns an Error when it encounters templates like this, with an ErrorCode of value 12. This ErrorCode is currently unexported, but will be exported in the release of Go 1.21. Users who rely on the previous behavior can re-enable it using the GODEBUG flag jstmpllitinterp=1, with the caveat that backticks will now be escaped. This should be used with caution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-24538_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-24538] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "Templates do not properly consider backticks (`) as Javascript string delimiters, and do not escape them as expected. Backticks are used, since ES6, for JS template literals. If a template contains a Go template action within a Javascript template literal, the contents of the action can be used to terminate the literal, injecting arbitrary Javascript code into the Go template. As ES6 template literals are rather complex, and themselves can do string interpolation, the decision was made to simply disallow Go template actions from being used inside of them (e.g. \"var a = {{.}}\"), since there is no obviously safe way to allow this behavior. This takes the same approach as github.com/google/safehtml. With fix, Template.Parse returns an Error when it encounters templates like this, with an ErrorCode of value 12. This ErrorCode is currently unexported, but will be exported in the release of Go 1.21. Users who rely on the previous behavior can re-enable it using the GODEBUG flag jstmpllitinterp=1, with the caveat that backticks will now be escaped. This should be used with caution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-24540_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2023-24540] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "Not all valid JavaScript whitespace characters are considered to be whitespace. Templates containing whitespace characters outside of the character set \"\\t\\n\\f\\r\\u0020\\u2028\\u2029\" in JavaScript contexts that also contain actions may not be properly sanitized during execution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-40267_GitPython_3.1.31",
              "shortDescription": {
                "text": "[CVE-2023-40267] GitPython 3.1.31"
              },
              "help": {
                "text": "GitPython before 3.1.32 does not block insecure non-multi options in clone and clone_from. NOTE: this issue exists because of an incomplete fix for CVE-2022-24439.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar `       | [3.1.32]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2021-43816_github.com/containerd/containerd_1.5.7",
              "shortDescription": {
                "text": "[CVE-2021-43816] github.com/containerd/containerd 1.5.7"
              },
              "help": {
                "text": "containerd is an open source container runtime. On installations using SELinux, such as EL8 (CentOS, RHEL), Fedora, or SUSE MicroOS, with containerd since v1.5.0-beta.0 as the backing container runtime interface (CRI), an unprivileged pod scheduled to the node may bind mount, via hostPath volume, any privileged, regular file on disk for complete read/write access (sans delete). Such is achieved by placing the in-container location of the hostPath volume mount at either `/etc/hosts`, `/etc/hostname`, or `/etc/resolv.conf`. These locations are being relabeled indiscriminately to match the container process-label which effectively elevates permissions for savvy containers that would not normally be able to access privileged host files. This issue has been resolved in version 1.5.9. Users are advised to upgrade as soon as possible.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.1      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.5.9]   |"
              },
              "properties": {
                "security-severity": "9.1"
              }
            },
            {
              "id": "CVE-2022-48174_3.16:ssl_client_1.35.0-r17",
              "shortDescription": {
                "text": "[CVE-2022-48174] 3.16:ssl_client 1.35.0-r17"
              },
              "help": {
                "text": "There is a stack overflow vulnerability in ash.c:6030 in busybox before 1.35. In the environment of Internet of Vehicles, this vulnerability can be executed from command to arbitrary code execution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [1.36.1-r2]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-48174_3.16:busybox_1.35.0-r17",
              "shortDescription": {
                "text": "[CVE-2022-48174] 3.16:busybox 1.35.0-r17"
              },
              "help": {
                "text": "There is a stack overflow vulnerability in ash.c:6030 in busybox before 1.35. In the environment of Internet of Vehicles, this vulnerability can be executed from command to arbitrary code execution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [1.36.1-r2]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-48620_3.16:libuv_1.44.1-r0",
              "shortDescription": {
                "text": "[CVE-2022-48620] 3.16:libuv 1.44.1-r0"
              },
              "help": {
                "text": "uev (aka libuev) before 2.4.1 has a buffer overflow in epoll_wait if maxevents is a large number.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-49569_gopkg.in/src-d/go-git.v4_4.13.1",
              "shortDescription": {
                "text": "[CVE-2023-49569] gopkg.in/src-d/go-git.v4 4.13.1"
              },
              "help": {
                "text": "A path traversal vulnerability was discovered in go-git versions prior to v5.11. This vulnerability allows an attacker to create and amend files across the filesystem. In the worse case scenario, remote code execution could be achieved.\n\nApplications are only affected if they are using the  ChrootOS https://pkg.go.dev/github.com/go-git/go-billy/v5/osfs#ChrootOS , which is the default when using \"Plain\" versions of Open and Clone funcs (e.g. PlainClone). Applications using  BoundOS https://pkg.go.dev/github.com/go-git/go-billy/v5/osfs#BoundOS  or in-memory filesystems are not affected by this issue.\nThis is a go-git implementation issue and does not affect the upstream git cli.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2021-43565_golang.org/x/crypto_0.0.0-20210817164053-32db794688a5",
              "shortDescription": {
                "text": "[CVE-2021-43565] golang.org/x/crypto 0.0.0-20210817164053-32db794688a5"
              },
              "help": {
                "text": "The x/crypto/ssh package before 0.0.0-20211202192323-5770296d904e of golang.org/x/crypto allows an attacker to panic an SSH server.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [0.0.0-20211202192323-5770296d904e]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30631_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2022-30631] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "Uncontrolled recursion in Reader.Read in compress/gzip before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via an archive containing a large number of concatenated 0-length compressed files.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24537_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2023-24537] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "Calling any of the Parse functions on Go source code which contains //line directives with very large line numbers can cause an infinite loop due to integer overflow.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-3786_3.16:libcrypto1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2022-3786] 3.16:libcrypto1.1 1.1.1u-r1"
              },
              "help": {
                "text": "A buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed a malicious certificate or for an application to continue certificate verification despite failure to construct a path to a trusted issuer. An attacker can craft a malicious email address in a certificate to overflow an arbitrary number of bytes containing the `.' character (decimal 46) on the stack. This buffer overflow could result in a crash (causing a denial of service). In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [3.0.7-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-3602_3.16:openssl_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2022-3602] 3.16:openssl 1.1.1u-r1"
              },
              "help": {
                "text": "A buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed the malicious certificate or for the application to continue certificate verification despite failure to construct a path to a trusted issuer. An attacker can craft a malicious email address to overflow four attacker-controlled bytes on the stack. This buffer overflow could result in a crash (causing a denial of service) or potentially remote code execution. Many platforms implement stack overflow protections which would mitigate against the risk of remote code execution. The risk may be further mitigated based on stack layout for any given platform/compiler. Pre-announcements of CVE-2022-3602 described this issue as CRITICAL. Further analysis based on some of the mitigating factors described above have led this to be downgraded to HIGH. Users are still encouraged to upgrade to a new version as soon as possible. In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects. Fixed in OpenSSL 3.0.7 (Affected 3.0.0,3.0.1,3.0.2,3.0.3,3.0.4,3.0.5,3.0.6).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [3.0.7-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24534_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-24534] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "HTTP and MIME header parsing can allocate large amounts of memory, even when parsing small inputs, potentially leading to a denial of service. Certain unusual patterns of input data can cause the common function used to parse HTTP and MIME headers to allocate substantially more memory than required to hold the parsed headers. An attacker can exploit this behavior to cause an HTTP server to allocate large amounts of memory from a small request, potentially leading to memory exhaustion and a denial of service. With fix, header parsing now correctly allocates only the memory required to hold parsed headers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-24921_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2022-24921] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "regexp.Compile in Go before 1.16.15 and 1.17.x before 1.17.8 allows stack exhaustion via a deeply nested expression.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.16.15], [1.17.8]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-28131_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2022-28131] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "Uncontrolled recursion in Decoder.Skip in encoding/xml before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a deeply nested XML document.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41725_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2022-41725] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "A denial of service is possible from excessive resource consumption in net/http and mime/multipart. Multipart form parsing with mime/multipart.Reader.ReadForm can consume largely unlimited amounts of memory and disk files. This also affects form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. ReadForm takes a maxMemory parameter, and is documented as storing \"up to maxMemory bytes +10MB (reserved for non-file parts) in memory\". File parts which cannot be stored in memory are stored on disk in temporary files. The unconfigurable 10MB reserved for non-file parts is excessively large and can potentially open a denial of service vector on its own. However, ReadForm did not properly account for all memory consumed by a parsed form, such as map entry overhead, part names, and MIME headers, permitting a maliciously crafted form to consume well over 10MB. In addition, ReadForm contained no limit on the number of disk files created, permitting a relatively small request body to create a large number of disk temporary files. With fix, ReadForm now properly accounts for various forms of memory overhead, and should now stay within its documented limit of 10MB + maxMemory bytes of memory consumption. Users should still be aware that this limit is high and may still be hazardous. In addition, ReadForm now creates at most one on-disk temporary file, combining multiple form parts into a single temporary file. The mime/multipart.File interface type's documentation states, \"If stored on disk, the File's underlying concrete type will be an *os.File.\". This is no longer the case when a form contains more than one file part, due to this coalescing of parts into a single file. The previous behavior of using distinct files for each form part may be reenabled with the environment variable GODEBUG=multipartfiles=distinct. Users should be aware that multipart.ReadForm and the http.Request methods that call it do not limit the amount of disk consumed by temporary ...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30633_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2022-30633] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "Uncontrolled recursion in Unmarshal in encoding/xml before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via unmarshalling an XML document into a Go struct which has a nested field that uses the 'any' field tag.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-3786_3.16:openssl_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2022-3786] 3.16:openssl 1.1.1u-r1"
              },
              "help": {
                "text": "A buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed a malicious certificate or for an application to continue certificate verification despite failure to construct a path to a trusted issuer. An attacker can craft a malicious email address in a certificate to overflow an arbitrary number of bytes containing the `.' character (decimal 46) on the stack. This buffer overflow could result in a crash (causing a denial of service). In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [3.0.7-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24536_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-24536] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "Multipart form parsing can consume large amounts of CPU and memory when processing form inputs containing very large numbers of parts. This stems from several causes: 1. mime/multipart.Reader.ReadForm limits the total memory a parsed multipart form can consume. ReadForm can undercount the amount of memory consumed, leading it to accept larger inputs than intended. 2. Limiting total memory does not account for increased pressure on the garbage collector from large numbers of small allocations in forms with many parts. 3. ReadForm can allocate a large number of short-lived buffers, further increasing pressure on the garbage collector. The combination of these factors can permit an attacker to cause an program that parses multipart forms to consume large amounts of CPU and memory, potentially resulting in a denial of service. This affects programs that use mime/multipart.Reader.ReadForm, as well as form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. With fix, ReadForm now does a better job of estimating the memory consumption of parsed forms, and performs many fewer short-lived allocations. In addition, the fixed mime/multipart.Reader imposes the following limits on the size of parsed forms: 1. Forms parsed with ReadForm may contain no more than 1000 parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxparts=. 2. Form parts parsed with NextPart and NextRawPart may contain no more than 10,000 header fields. In addition, forms parsed with ReadForm may contain no more than 10,000 header fields across all parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxheaders=.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-24675_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2022-24675] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "encoding/pem in Go before 1.17.9 and 1.18.x before 1.18.1 has a Decode stack overflow via a large amount of PEM data.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.17.9], [1.18.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30632_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2022-30632] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "Uncontrolled recursion in Glob in path/filepath before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a path containing a large number of path separators.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24539_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-24539] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "Angle brackets (\u003c\u003e) are not considered dangerous characters when inserted into CSS contexts. Templates containing multiple actions separated by a '/' character can result in unexpectedly closing the CSS context and allowing for injection of unexpected HTML, if executed with untrusted input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.3      | Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2022-21698_github.com/prometheus/client_golang_1.11.0",
              "shortDescription": {
                "text": "[CVE-2022-21698] github.com/prometheus/client_golang 1.11.0"
              },
              "help": {
                "text": "client_golang is the instrumentation library for Go applications in Prometheus, and the promhttp package in client_golang provides tooling around HTTP servers and clients. In client_golang prior to version 1.11.1, HTTP server is susceptible to a Denial of Service through unbounded cardinality, and potential memory exhaustion, when handling requests with non-standard HTTP methods. In order to be affected, an instrumented software must use any of `promhttp.InstrumentHandler*` middleware except `RequestsInFlight`; not filter any specific methods (e.g GET) before middleware; pass metric with `method` label name to our middleware; and not have any firewall/LB/proxy that filters away requests with unknown `method`. client_golang version 1.11.1 contains a patch for this issue. Several workarounds are available, including removing the `method` label name from counter/gauge used in the InstrumentHandler; turning off affected promhttp handlers; adding custom middleware before promhttp handler that will sanitize the request method given by Go http.Request; and using a reverse proxy or web application firewall, configured to only allow a limited set of methods.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.11.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2024-30251_aiohttp_3.8.4",
              "shortDescription": {
                "text": "[CVE-2024-30251] aiohttp 3.8.4"
              },
              "help": {
                "text": "aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. In affected versions an attacker can send a specially crafted POST (multipart/form-data) request. When the aiohttp server processes it, the server will enter an infinite loop and be unable to process any further requests. An attacker can stop the application from serving requests after sending a single request. This issue has been addressed in version 3.9.4. Users are advised to upgrade. Users unable to upgrade may manually apply a patch to their systems. Please see the linked GHSA for instructions.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar `       | [3.9.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-29400_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-29400] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "Templates containing actions in unquoted HTML attributes (e.g. \"attr={{.}}\") executed with empty input can result in output with unexpected results when parsed due to HTML normalization rules. This may allow injection of arbitrary attributes into tags.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.3      | Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2022-3602_3.16:libssl1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2022-3602] 3.16:libssl1.1 1.1.1u-r1"
              },
              "help": {
                "text": "A buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed the malicious certificate or for the application to continue certificate verification despite failure to construct a path to a trusted issuer. An attacker can craft a malicious email address to overflow four attacker-controlled bytes on the stack. This buffer overflow could result in a crash (causing a denial of service) or potentially remote code execution. Many platforms implement stack overflow protections which would mitigate against the risk of remote code execution. The risk may be further mitigated based on stack layout for any given platform/compiler. Pre-announcements of CVE-2022-3602 described this issue as CRITICAL. Further analysis based on some of the mitigating factors described above have led this to be downgraded to HIGH. Users are still encouraged to upgrade to a new version as soon as possible. In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects. Fixed in OpenSSL 3.0.7 (Affected 3.0.0,3.0.1,3.0.2,3.0.3,3.0.4,3.0.5,3.0.6).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [3.0.7-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-3786_3.16:libssl1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2022-3786] 3.16:libssl1.1 1.1.1u-r1"
              },
              "help": {
                "text": "A buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed a malicious certificate or for an application to continue certificate verification despite failure to construct a path to a trusted issuer. An attacker can craft a malicious email address in a certificate to overflow an arbitrary number of bytes containing the `.' character (decimal 46) on the stack. This buffer overflow could result in a crash (causing a denial of service). In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [3.0.7-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45287_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2023-45287] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "Before Go 1.20, the RSA based TLS key exchanges used the math/big library, which is not constant time. RSA blinding was applied to prevent timing attacks, but analysis shows this may not have been fully effective. In particular it appears as if the removal of PKCS#1 padding may leak timing information, which in turn could be used to recover session key bits. In Go 1.20, the crypto/tls library switched to a fully constant time RSA implementation, which we do not believe exhibits any timing side channels.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.20.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45287_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-45287] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "Before Go 1.20, the RSA based TLS key exchanges used the math/big library, which is not constant time. RSA blinding was applied to prevent timing attacks, but analysis shows this may not have been fully effective. In particular it appears as if the removal of PKCS#1 padding may leak timing information, which in turn could be used to recover session key bits. In Go 1.20, the crypto/tls library switched to a fully constant time RSA implementation, which we do not believe exhibits any timing side channels.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.20.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24534_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2023-24534] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "HTTP and MIME header parsing can allocate large amounts of memory, even when parsing small inputs, potentially leading to a denial of service. Certain unusual patterns of input data can cause the common function used to parse HTTP and MIME headers to allocate substantially more memory than required to hold the parsed headers. An attacker can exploit this behavior to cause an HTTP server to allocate large amounts of memory from a small request, potentially leading to memory exhaustion and a denial of service. With fix, header parsing now correctly allocates only the memory required to hold parsed headers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-3602_3.16:libcrypto1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2022-3602] 3.16:libcrypto1.1 1.1.1u-r1"
              },
              "help": {
                "text": "A buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed the malicious certificate or for the application to continue certificate verification despite failure to construct a path to a trusted issuer. An attacker can craft a malicious email address to overflow four attacker-controlled bytes on the stack. This buffer overflow could result in a crash (causing a denial of service) or potentially remote code execution. Many platforms implement stack overflow protections which would mitigate against the risk of remote code execution. The risk may be further mitigated based on stack layout for any given platform/compiler. Pre-announcements of CVE-2022-3602 described this issue as CRITICAL. Further analysis based on some of the mitigating factors described above have led this to be downgraded to HIGH. Users are still encouraged to upgrade to a new version as soon as possible. In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects. Fixed in OpenSSL 3.0.7 (Affected 3.0.0,3.0.1,3.0.2,3.0.3,3.0.4,3.0.5,3.0.6).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [3.0.7-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24536_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2023-24536] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "Multipart form parsing can consume large amounts of CPU and memory when processing form inputs containing very large numbers of parts. This stems from several causes: 1. mime/multipart.Reader.ReadForm limits the total memory a parsed multipart form can consume. ReadForm can undercount the amount of memory consumed, leading it to accept larger inputs than intended. 2. Limiting total memory does not account for increased pressure on the garbage collector from large numbers of small allocations in forms with many parts. 3. ReadForm can allocate a large number of short-lived buffers, further increasing pressure on the garbage collector. The combination of these factors can permit an attacker to cause an program that parses multipart forms to consume large amounts of CPU and memory, potentially resulting in a denial of service. This affects programs that use mime/multipart.Reader.ReadForm, as well as form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. With fix, ReadForm now does a better job of estimating the memory consumption of parsed forms, and performs many fewer short-lived allocations. In addition, the fixed mime/multipart.Reader imposes the following limits on the size of parsed forms: 1. Forms parsed with ReadForm may contain no more than 1000 parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxparts=. 2. Form parts parsed with NextPart and NextRawPart may contain no more than 10,000 header fields. In addition, forms parsed with ReadForm may contain no more than 10,000 header fields across all parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxheaders=.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-43565_golang.org/x/crypto_0.0.0-20201221181555-eec23a3978ad",
              "shortDescription": {
                "text": "[CVE-2021-43565] golang.org/x/crypto 0.0.0-20201221181555-eec23a3978ad"
              },
              "help": {
                "text": "The x/crypto/ssh package before 0.0.0-20211202192323-5770296d904e of golang.org/x/crypto allows an attacker to panic an SSH server.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [0.0.0-20211202192323-5770296d904e]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-2879_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2022-2879] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "Reader.Read does not set a limit on the maximum size of file headers. A maliciously crafted archive could cause Read to allocate unbounded amounts of memory, potentially causing resource exhaustion or panics. After fix, Reader.Read limits the maximum size of header blocks to 1 MiB.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.18.7], [1.19.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-41771_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2021-41771] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "ImportedSymbols in debug/macho (for Open or OpenFat) in Go before 1.16.10 and 1.17.x before 1.17.3 Accesses a Memory Location After the End of a Buffer, aka an out-of-bounds slice situation.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.16.10], [1.17.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-28327_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2022-28327] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "The generic P-256 feature in crypto/elliptic in Go before 1.17.9 and 1.18.x before 1.18.1 allows a panic via long scalar input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.17.9], [1.18.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24539_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2023-24539] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "Angle brackets (\u003c\u003e) are not considered dangerous characters when inserted into CSS contexts. Templates containing multiple actions separated by a '/' character can result in unexpectedly closing the CSS context and allowing for injection of unexpected HTML, if executed with untrusted input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.3      | Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2023-29400_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2023-29400] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "Templates containing actions in unquoted HTML attributes (e.g. \"attr={{.}}\") executed with empty input can result in output with unexpected results when parsed due to HTML normalization rules. This may allow injection of arbitrary attributes into tags.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.3      | Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2022-41723_golang.org/x/net_0.0.0-20211011170408-caeb26a5c8c0",
              "shortDescription": {
                "text": "[CVE-2022-41723] golang.org/x/net 0.0.0-20211011170408-caeb26a5c8c0"
              },
              "help": {
                "text": "A maliciously crafted HTTP/2 stream could cause excessive CPU consumption in the HPACK decoder, sufficient to cause a denial of service from a small number of small requests.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [0.7.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41715_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2022-41715] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "Programs which compile regular expressions from untrusted sources may be vulnerable to memory exhaustion or denial of service. The parsed regexp representation is linear in the size of the input, but in some cases the constant factor can be as high as 40,000, making relatively small regexps consume much larger amounts of memory. After fix, each regexp being parsed is limited to a 256 MB memory footprint. Regular expressions whose representation would use more space than that are rejected. Normal use of regular expressions is unaffected.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.18.7], [1.19.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41725_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2022-41725] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "A denial of service is possible from excessive resource consumption in net/http and mime/multipart. Multipart form parsing with mime/multipart.Reader.ReadForm can consume largely unlimited amounts of memory and disk files. This also affects form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. ReadForm takes a maxMemory parameter, and is documented as storing \"up to maxMemory bytes +10MB (reserved for non-file parts) in memory\". File parts which cannot be stored in memory are stored on disk in temporary files. The unconfigurable 10MB reserved for non-file parts is excessively large and can potentially open a denial of service vector on its own. However, ReadForm did not properly account for all memory consumed by a parsed form, such as map entry overhead, part names, and MIME headers, permitting a maliciously crafted form to consume well over 10MB. In addition, ReadForm contained no limit on the number of disk files created, permitting a relatively small request body to create a large number of disk temporary files. With fix, ReadForm now properly accounts for various forms of memory overhead, and should now stay within its documented limit of 10MB + maxMemory bytes of memory consumption. Users should still be aware that this limit is high and may still be hazardous. In addition, ReadForm now creates at most one on-disk temporary file, combining multiple form parts into a single temporary file. The mime/multipart.File interface type's documentation states, \"If stored on disk, the File's underlying concrete type will be an *os.File.\". This is no longer the case when a form contains more than one file part, due to this coalescing of parts into a single file. The previous behavior of using distinct files for each form part may be reenabled with the environment variable GODEBUG=multipartfiles=distinct. Users should be aware that multipart.ReadForm and the http.Request methods that call it do not limit the amount of disk consumed by temporary ...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24537_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-24537] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "Calling any of the Parse functions on Go source code which contains //line directives with very large line numbers can cause an infinite loop due to integer overflow.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-50387_3.16:bind-tools_9.16.42-r0",
              "shortDescription": {
                "text": "[CVE-2023-50387] 3.16:bind-tools 9.16.42-r0"
              },
              "help": {
                "text": "Certain DNSSEC aspects of the DNS protocol (in RFC 4033, 4034, 4035, 6840, and related RFCs) allow remote attackers to cause a denial of service (CPU consumption) via one or more DNSSEC responses, aka the \"KeyTrap\" issue. One of the concerns is that, when there is a zone with many DNSKEY and RRSIG records, the protocol specification implies that an algorithm must evaluate all combinations of DNSKEY and RRSIG records.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Undetermined       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [9.16.48-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-50387_3.16:bind-libs_9.16.42-r0",
              "shortDescription": {
                "text": "[CVE-2023-50387] 3.16:bind-libs 9.16.42-r0"
              },
              "help": {
                "text": "Certain DNSSEC aspects of the DNS protocol (in RFC 4033, 4034, 4035, 6840, and related RFCs) allow remote attackers to cause a denial of service (CPU consumption) via one or more DNSSEC responses, aka the \"KeyTrap\" issue. One of the concerns is that, when there is a zone with many DNSKEY and RRSIG records, the protocol specification implies that an algorithm must evaluate all combinations of DNSKEY and RRSIG records.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Undetermined       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [9.16.48-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-4408_3.16:bind-libs_9.16.42-r0",
              "shortDescription": {
                "text": "[CVE-2023-4408] 3.16:bind-libs 9.16.42-r0"
              },
              "help": {
                "text": "The DNS message parsing code in `named` includes a section whose computational complexity is overly high. It does not cause problems for typical DNS traffic, but crafted queries and responses may cause excessive CPU load on the affected `named` instance by exploiting this flaw. This issue affects both authoritative servers and recursive resolvers.\nThis issue affects BIND 9 versions 9.0.0 through 9.16.45, 9.18.0 through 9.18.21, 9.19.0 through 9.19.19, 9.9.3-S1 through 9.11.37-S1, 9.16.8-S1 through 9.16.45-S1, and 9.18.11-S1 through 9.18.21-S1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [9.16.48-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-5679_3.16:bind-libs_9.16.42-r0",
              "shortDescription": {
                "text": "[CVE-2023-5679] 3.16:bind-libs 9.16.42-r0"
              },
              "help": {
                "text": "A bad interaction between DNS64 and serve-stale may cause `named` to crash with an assertion failure during recursive resolution, when both of these features are enabled.\nThis issue affects BIND 9 versions 9.16.12 through 9.16.45, 9.18.0 through 9.18.21, 9.19.0 through 9.19.19, 9.16.12-S1 through 9.16.45-S1, and 9.18.11-S1 through 9.18.21-S1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [9.16.48-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2024-22190_GitPython_3.1.31",
              "shortDescription": {
                "text": "[CVE-2024-22190] GitPython 3.1.31"
              },
              "help": {
                "text": "GitPython is a python library used to interact with Git repositories. There is an incomplete fix for CVE-2023-40590. On Windows, GitPython uses an untrusted search path if it uses a shell to run `git`, as well as when it runs `bash.exe` to interpret hooks. If either of those features are used on Windows, a malicious `git.exe` or `bash.exe` may be run from an untrusted repository. This issue has been patched in version 3.1.41.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar `       | [3.1.41]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2023-3341_3.16:bind-tools_9.16.42-r0",
              "shortDescription": {
                "text": "[CVE-2023-3341] 3.16:bind-tools 9.16.42-r0"
              },
              "help": {
                "text": "The code that processes control channel messages sent to `named` calls certain functions recursively during packet parsing. Recursion depth is only limited by the maximum accepted packet size; depending on the environment, this may cause the packet-parsing code to run out of available stack memory, causing `named` to terminate unexpectedly. Since each incoming control channel message is fully parsed before its contents are authenticated, exploiting this flaw does not require the attacker to hold a valid RNDC key; only network access to the control channel's configured TCP port is necessary.\nThis issue affects BIND 9 versions 9.2.0 through 9.16.43, 9.18.0 through 9.18.18, 9.19.0 through 9.19.16, 9.9.3-S1 through 9.16.43-S1, and 9.18.0-S1 through 9.18.18-S1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [9.16.44-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-42915_3.16:curl_8.1.2-r0",
              "shortDescription": {
                "text": "[CVE-2023-42915] 3.16:curl 8.1.2-r0"
              },
              "help": {
                "text": "Multiple issues were addressed by updating to curl version 8.4.0. This issue is fixed in macOS Ventura 13.6.4, macOS Sonoma 14.2, macOS Monterey 12.7.3, iOS 16.7.5 and iPadOS 16.7.5. Multiple issues in curl.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [8.4.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2023-38039_3.16:curl_8.1.2-r0",
              "shortDescription": {
                "text": "[CVE-2023-38039] 3.16:curl 8.1.2-r0"
              },
              "help": {
                "text": "When curl retrieves an HTTP response, it stores the incoming headers so that\nthey can be accessed later via the libcurl headers API.\n\nHowever, curl did not have a limit in how many or how large headers it would\naccept in a response, allowing a malicious server to stream an endless series\nof headers and eventually cause curl to run out of heap memory.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [8.3.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-23648_github.com/containerd/containerd_1.5.7",
              "shortDescription": {
                "text": "[CVE-2022-23648] github.com/containerd/containerd 1.5.7"
              },
              "help": {
                "text": "containerd is a container runtime available as a daemon for Linux and Windows. A bug was found in containerd prior to versions 1.6.1, 1.5.10, and 1.14.12 where containers launched through containerd’s CRI implementation on Linux with a specially-crafted image configuration could gain access to read-only copies of arbitrary files and directories on the host. This may bypass any policy-based enforcement on container setup (including a Kubernetes Pod Security Policy) and expose potentially sensitive information. Kubernetes and crictl can both be configured to use containerd’s CRI implementation. This bug has been fixed in containerd 1.6.1, 1.5.10, and 1.4.12. Users should update to these versions to resolve the issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.4.13], [1.5.10], [1.6.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-47627_aiohttp_3.8.4",
              "shortDescription": {
                "text": "[CVE-2023-47627] aiohttp 3.8.4"
              },
              "help": {
                "text": "aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. The HTTP parser in AIOHTTP has numerous problems with header parsing, which could lead to request smuggling. This parser is only used when AIOHTTP_NO_EXTENSIONS is enabled (or not using a prebuilt wheel). These bugs have been addressed in commit `d5c12ba89` which has been included in release version 3.8.6. Users are advised to upgrade. There are no known workarounds for these issues.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar `       | [3.8.6]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-42915_3.16:libcurl_8.1.2-r0",
              "shortDescription": {
                "text": "[CVE-2023-42915] 3.16:libcurl 8.1.2-r0"
              },
              "help": {
                "text": "Multiple issues were addressed by updating to curl version 8.4.0. This issue is fixed in macOS Ventura 13.6.4, macOS Sonoma 14.2, macOS Monterey 12.7.3, iOS 16.7.5 and iPadOS 16.7.5. Multiple issues in curl.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [8.4.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2023-37276_aiohttp_3.8.4",
              "shortDescription": {
                "text": "[CVE-2023-37276] aiohttp 3.8.4"
              },
              "help": {
                "text": "aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. aiohttp v3.8.4 and earlier are bundled with llhttp v6.0.6. Vulnerable code is used by aiohttp for its HTTP request parser when available which is the default case when installing from a wheel. This vulnerability only affects users of aiohttp as an HTTP server (ie `aiohttp.Application`), you are not affected by this vulnerability if you are using aiohttp as an HTTP client library (ie `aiohttp.ClientSession`). Sending a crafted HTTP request will cause the server to misinterpret one of the HTTP header values leading to HTTP request smuggling. This issue has been addressed in version 3.8.5. Users are advised to upgrade. Users unable to upgrade can reinstall aiohttp using `AIOHTTP_NO_EXTENSIONS=1` as an environment variable to disable the llhttp HTTP request parser implementation. The pure Python implementation isn't vulnerable.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar `       | [3.8.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2024-24557_github.com/docker/docker_20.10.8+incompatible",
              "shortDescription": {
                "text": "[CVE-2024-24557] github.com/docker/docker 20.10.8+incompatible"
              },
              "help": {
                "text": "Moby is an open-source project created by Docker to enable software containerization. The classic builder cache system is prone to cache poisoning if the image is built FROM scratch. Also, changes to some instructions (most important being HEALTHCHECK and ONBUILD) would not cause a cache miss. An attacker with the knowledge of the Dockerfile someone is using could poison their cache by making them pull a specially crafted image that would be considered as a valid cache candidate for some build steps. 23.0+ users are only affected if they explicitly opted out of Buildkit (DOCKER_BUILDKIT=0 environment variable) or are using the /build API endpoint. All users on versions older than 23.0 could be impacted. Image build API endpoint (/build) and ImageBuild function from github.com/docker/docker/client is also affected as it the uses classic builder by default. Patches are included in 24.0.9 and 25.0.2 releases.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [24.0.9], [25.0.2]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2023-5517_3.16:bind-tools_9.16.42-r0",
              "shortDescription": {
                "text": "[CVE-2023-5517] 3.16:bind-tools 9.16.42-r0"
              },
              "help": {
                "text": "A flaw in query-handling code can cause `named` to exit prematurely with an assertion failure when:\n\n  - `nxdomain-redirect \u003cdomain\u003e;` is configured, and\n  - the resolver receives a PTR query for an RFC 1918 address that would normally result in an authoritative NXDOMAIN response.\nThis issue affects BIND 9 versions 9.12.0 through 9.16.45, 9.18.0 through 9.18.21, 9.19.0 through 9.19.19, 9.16.8-S1 through 9.16.45-S1, and 9.18.11-S1 through 9.18.21-S1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [9.16.48-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-5679_3.16:bind-tools_9.16.42-r0",
              "shortDescription": {
                "text": "[CVE-2023-5679] 3.16:bind-tools 9.16.42-r0"
              },
              "help": {
                "text": "A bad interaction between DNS64 and serve-stale may cause `named` to crash with an assertion failure during recursive resolution, when both of these features are enabled.\nThis issue affects BIND 9 versions 9.16.12 through 9.16.45, 9.18.0 through 9.18.21, 9.19.0 through 9.19.19, 9.16.12-S1 through 9.16.45-S1, and 9.18.11-S1 through 9.18.21-S1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [9.16.48-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-4236_3.16:bind-libs_9.16.42-r0",
              "shortDescription": {
                "text": "[CVE-2023-4236] 3.16:bind-libs 9.16.42-r0"
              },
              "help": {
                "text": "A flaw in the networking code handling DNS-over-TLS queries may cause `named` to terminate unexpectedly due to an assertion failure. This happens when internal data structures are incorrectly reused under significant DNS-over-TLS query load.\nThis issue affects BIND 9 versions 9.18.0 through 9.18.18 and 9.18.11-S1 through 9.18.18-S1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [9.18.19-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-6516_3.16:bind-libs_9.16.42-r0",
              "shortDescription": {
                "text": "[CVE-2023-6516] 3.16:bind-libs 9.16.42-r0"
              },
              "help": {
                "text": "To keep its cache database efficient, `named` running as a recursive resolver occasionally attempts to clean up the database. It uses several methods, including some that are asynchronous: a small chunk of memory pointing to the cache element that can be cleaned up is first allocated and then queued for later processing. It was discovered that if the resolver is continuously processing query patterns triggering this type of cache-database maintenance, `named` may not be able to handle the cleanup events in a timely manner. This in turn enables the list of queued cleanup events to grow infinitely large over time, allowing the configured `max-cache-size` limit to be significantly exceeded.\nThis issue affects BIND 9 versions 9.16.0 through 9.16.45 and 9.16.8-S1 through 9.16.45-S1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [9.16.48-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-6516_3.16:bind-tools_9.16.42-r0",
              "shortDescription": {
                "text": "[CVE-2023-6516] 3.16:bind-tools 9.16.42-r0"
              },
              "help": {
                "text": "To keep its cache database efficient, `named` running as a recursive resolver occasionally attempts to clean up the database. It uses several methods, including some that are asynchronous: a small chunk of memory pointing to the cache element that can be cleaned up is first allocated and then queued for later processing. It was discovered that if the resolver is continuously processing query patterns triggering this type of cache-database maintenance, `named` may not be able to handle the cleanup events in a timely manner. This in turn enables the list of queued cleanup events to grow infinitely large over time, allowing the configured `max-cache-size` limit to be significantly exceeded.\nThis issue affects BIND 9 versions 9.16.0 through 9.16.45 and 9.16.8-S1 through 9.16.45-S1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [9.16.48-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-5517_3.16:bind-libs_9.16.42-r0",
              "shortDescription": {
                "text": "[CVE-2023-5517] 3.16:bind-libs 9.16.42-r0"
              },
              "help": {
                "text": "A flaw in query-handling code can cause `named` to exit prematurely with an assertion failure when:\n\n  - `nxdomain-redirect \u003cdomain\u003e;` is configured, and\n  - the resolver receives a PTR query for an RFC 1918 address that would normally result in an authoritative NXDOMAIN response.\nThis issue affects BIND 9 versions 9.12.0 through 9.16.45, 9.18.0 through 9.18.21, 9.19.0 through 9.19.19, 9.16.8-S1 through 9.16.45-S1, and 9.18.11-S1 through 9.18.21-S1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [9.16.48-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-40590_GitPython_3.1.31",
              "shortDescription": {
                "text": "[CVE-2023-40590] GitPython 3.1.31"
              },
              "help": {
                "text": "GitPython is a python library used to interact with Git repositories. When resolving a program, Python/Windows look for the current working directory, and after that the PATH environment. GitPython defaults to use the `git` command, if a user runs GitPython from a repo has a `git.exe` or `git` executable, that program will be run instead of the one in the user's `PATH`. This is more of a problem on how Python interacts with Windows systems, Linux and any other OS aren't affected by this. But probably people using GitPython usually run it from the CWD of a repo. An attacker can trick a user to download a repository with a malicious `git` executable, if the user runs/imports GitPython from that directory, it allows the attacker to run any arbitrary commands. There is no fix currently available for windows users, however there are a few mitigations. 1: Default to an absolute path for the git program on Windows, like `C:\\\\Program Files\\\\Git\\\\cmd\\\\git.EXE` (default git path installation). 2: Require users to set the `GIT_PYTHON_GIT_EXECUTABLE` environment variable on Windows systems. 3: Make this problem prominent in the documentation and advise users to never run GitPython from an untrusted repo, or set the `GIT_PYTHON_GIT_EXECUTABLE` env var to an absolute path. 4: Resolve the executable manually by only looking into the `PATH` environment variable.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar `       | [3.1.33]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2023-4236_3.16:bind-tools_9.16.42-r0",
              "shortDescription": {
                "text": "[CVE-2023-4236] 3.16:bind-tools 9.16.42-r0"
              },
              "help": {
                "text": "A flaw in the networking code handling DNS-over-TLS queries may cause `named` to terminate unexpectedly due to an assertion failure. This happens when internal data structures are incorrectly reused under significant DNS-over-TLS query load.\nThis issue affects BIND 9 versions 9.18.0 through 9.18.18 and 9.18.11-S1 through 9.18.18-S1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [9.18.19-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-4408_3.16:bind-tools_9.16.42-r0",
              "shortDescription": {
                "text": "[CVE-2023-4408] 3.16:bind-tools 9.16.42-r0"
              },
              "help": {
                "text": "The DNS message parsing code in `named` includes a section whose computational complexity is overly high. It does not cause problems for typical DNS traffic, but crafted queries and responses may cause excessive CPU load on the affected `named` instance by exploiting this flaw. This issue affects both authoritative servers and recursive resolvers.\nThis issue affects BIND 9 versions 9.0.0 through 9.16.45, 9.18.0 through 9.18.21, 9.19.0 through 9.19.19, 9.9.3-S1 through 9.11.37-S1, 9.16.8-S1 through 9.16.45-S1, and 9.18.11-S1 through 9.18.21-S1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [9.16.48-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-3341_3.16:bind-libs_9.16.42-r0",
              "shortDescription": {
                "text": "[CVE-2023-3341] 3.16:bind-libs 9.16.42-r0"
              },
              "help": {
                "text": "The code that processes control channel messages sent to `named` calls certain functions recursively during packet parsing. Recursion depth is only limited by the maximum accepted packet size; depending on the environment, this may cause the packet-parsing code to run out of available stack memory, causing `named` to terminate unexpectedly. Since each incoming control channel message is fully parsed before its contents are authenticated, exploiting this flaw does not require the attacker to hold a valid RNDC key; only network access to the control channel's configured TCP port is necessary.\nThis issue affects BIND 9 versions 9.2.0 through 9.16.43, 9.18.0 through 9.18.18, 9.19.0 through 9.19.16, 9.9.3-S1 through 9.16.43-S1, and 9.18.0-S1 through 9.18.18-S1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [9.16.44-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-28840_github.com/docker/docker_20.10.8+incompatible",
              "shortDescription": {
                "text": "[CVE-2023-28840] github.com/docker/docker 20.10.8+incompatible"
              },
              "help": {
                "text": "Moby is an open source container framework developed by Docker Inc. that is distributed as Docker, Mirantis Container Runtime, and various other downstream projects/products. The Moby daemon component (`dockerd`), which is developed as moby/moby, is commonly referred to as *Docker*.\n\nSwarm Mode, which is compiled in and delivered by default in dockerd and is thus present in most major Moby downstreams, is a simple, built-in container orchestrator that is implemented through a combination of SwarmKit and supporting network code.\n\nThe overlay network driver is a core feature of Swarm Mode, providing isolated virtual LANs that allow communication between containers and services across the cluster. This driver is an implementation/user of VXLAN, which encapsulates link-layer (Ethernet) frames in UDP datagrams that tag the frame with a VXLAN Network ID (VNI) that identifies the originating overlay network. In addition, the overlay network driver supports an optional, off-by-default encrypted mode, which is especially useful when VXLAN packets traverses an untrusted network between nodes.\n\nEncrypted overlay networks function by encapsulating the VXLAN datagrams through the use of the IPsec Encapsulating Security Payload protocol in Transport mode. By deploying IPSec encapsulation, encrypted overlay networks gain the additional properties of source authentication through cryptographic proof, data integrity through check-summing, and confidentiality through encryption.\n\nWhen setting an endpoint up on an encrypted overlay network, Moby installs three iptables (Linux kernel firewall) rules that enforce both incoming and outgoing IPSec. These rules rely on the u32 iptables extension provided by the xt_u32 kernel module to directly filter on a VXLAN packet's VNI field, so that IPSec guarantees can be enforced on encrypted overlay networks without interfering with other overlay networks or other users of VXLAN.\n\nTwo iptables rules serve to filter incoming VXLAN datagrams with a VNI that corresponds to an encrypted net...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.7      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [20.10.24], [23.0.3]   |"
              },
              "properties": {
                "security-severity": "8.7"
              }
            },
            {
              "id": "CVE-2023-38039_3.16:libcurl_8.1.2-r0",
              "shortDescription": {
                "text": "[CVE-2023-38039] 3.16:libcurl 8.1.2-r0"
              },
              "help": {
                "text": "When curl retrieves an HTTP response, it stores the incoming headers so that\nthey can be accessed later via the libcurl headers API.\n\nHowever, curl did not have a limit in how many or how large headers it would\naccept in a response, allowing a malicious server to stream an endless series\nof headers and eventually cause curl to run out of heap memory.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [8.3.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-33064_3.16:libsndfile_1.1.0-r0",
              "shortDescription": {
                "text": "[CVE-2022-33064] 3.16:libsndfile 1.1.0-r0"
              },
              "help": {
                "text": "An off-by-one error in function wav_read_header in src/wav.c in Libsndfile 1.1.0, results in a write out of bound, which allows an attacker to execute arbitrary code, Denial of Service or other unspecified impacts.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2018-20225_pip_23.1.2",
              "shortDescription": {
                "text": "[CVE-2018-20225] pip 23.1.2"
              },
              "help": {
                "text": "An issue was discovered in pip (all versions) because it installs the version with the highest version number, even if the user had intended to obtain a private package from a private index. This only affects use of the --extra-index-url option, and exploitation requires that the package does not already exist in the public index (and thus the attacker can put the package there with an arbitrary version number). NOTE: it has been reported that this is intended functionality and the user is responsible for using --extra-index-url securely",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__f7dd0a2c0f0fc91d94bad3b99dd86ebda4f3e2332f7d0c22bfd8d7e23972b331.tar `\u003cbr/\u003e`sha256__e296f2063d3a369f84037e6741c3d8f30e7304c2f80c9e2f22e98a1928305953.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2020-22219_3.16:flac_1.3.4-r0",
              "shortDescription": {
                "text": "[CVE-2020-22219] 3.16:flac 1.3.4-r0"
              },
              "help": {
                "text": "Buffer Overflow vulnerability in function bitwriter_grow_ in flac before 1.4.0 allows remote attackers to run arbitrary code via crafted input to the encoder.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2022-31012_3.16:git_2.36.6-r0",
              "shortDescription": {
                "text": "[CVE-2022-31012] 3.16:git 2.36.6-r0"
              },
              "help": {
                "text": "Git for Windows is a fork of Git that contains Windows-specific patches. This vulnerability in versions prior to 2.37.1 lets Git for Windows' installer execute a binary into `C:\\mingw64\\bin\\git.exe` by mistake. This only happens upon a fresh install, not when upgrading Git for Windows. A patch is included in version 2.37.1. Two workarounds are available. Create the `C:\\mingw64` folder and remove read/write access from this folder, or disallow arbitrary authenticated users to create folders in `C:\\`.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.3      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2023-49568_gopkg.in/src-d/go-git.v4_4.13.1",
              "shortDescription": {
                "text": "[CVE-2023-49568] gopkg.in/src-d/go-git.v4 4.13.1"
              },
              "help": {
                "text": "A denial of service (DoS) vulnerability was discovered in go-git versions prior to v5.11. This vulnerability allows an attacker to perform denial of service attacks by providing specially crafted responses from a Git server which triggers resource exhaustion in go-git clients.\n\nApplications using only the in-memory filesystem supported by go-git are not affected by this vulnerability.\nThis is a go-git implementation issue and does not affect the upstream git cli.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-32148_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2022-32148] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "Improper exposure of client IP addresses in net/http before Go 1.17.12 and Go 1.18.4 can be triggered by calling httputil.ReverseProxy.ServeHTTP with a Request.Header map containing a nil value for the X-Forwarded-For header, which causes ReverseProxy to set the client IP as the value of the X-Forwarded-For header.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-29406_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2023-29406] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "The HTTP/1 client does not fully validate the contents of the Host header. A maliciously crafted Host header can inject additional headers or entire requests. With fix, the HTTP/1 client now refuses to send requests containing an invalid Request.Host or Request.URL.Host value.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.19.11], [1.20.6]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-39199_github.com/codenotary/immudb_1.2.1",
              "shortDescription": {
                "text": "[CVE-2022-39199] github.com/codenotary/immudb 1.2.1"
              },
              "help": {
                "text": "immudb is a database with built-in cryptographic proof and verification. immudb client SDKs use server's UUID to distinguish between different server instance so that the client can connect to different immudb instances and keep the state for multiple servers. SDK does not validate this uuid and can accept any value reported by the server. A malicious server can change the reported UUID tricking the client to treat it as a different server thus accepting a state completely irrelevant to the one previously retrieved from the server. This issue has been patched in version 1.4.1. As a workaround, when initializing an immudb client object a custom state handler can be used to store the state. Providing custom implementation that ignores the server UUID can be used to ensure that even if the server changes the UUID, client will still consider it to be the same server.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.4.1]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-29409_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2023-29409] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "Extremely large RSA keys in certificate chains can cause a client/server to expend significant CPU time verifying signatures. With fix, the size of RSA keys transmitted during handshakes is restricted to \u003c= 8192 bits. Based on a survey of publicly trusted RSA keys, there are currently only three certificates in circulation with keys larger than this, and all three appear to be test certificates that are not actively deployed. It is possible there are larger keys in use in private PKIs, but we target the web PKI, so causing breakage here in the interests of increasing the default safety of users of crypto/tls seems reasonable.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.19.12], [1.20.7], [1.21.0-rc.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-44717_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2021-44717] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "Go before 1.16.12 and 1.17.x before 1.17.5 on UNIX allows write operations to an unintended file or unintended network connection as a consequence of erroneous closing of file descriptor 0 after file-descriptor exhaustion.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.8      | Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.16.12], [1.17.5]   |"
              },
              "properties": {
                "security-severity": "4.8"
              }
            },
            {
              "id": "CVE-2022-1962_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2022-1962] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "Uncontrolled recursion in the Parse functions in go/parser before Go 1.17.12 and Go 1.18.4 allow an attacker to cause a panic due to stack exhaustion via deeply nested types or declarations.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-29406_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-29406] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "The HTTP/1 client does not fully validate the contents of the Host header. A maliciously crafted Host header can inject additional headers or entire requests. With fix, the HTTP/1 client now refuses to send requests containing an invalid Request.Host or Request.URL.Host value.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.19.11], [1.20.6]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-29409_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-29409] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "Extremely large RSA keys in certificate chains can cause a client/server to expend significant CPU time verifying signatures. With fix, the size of RSA keys transmitted during handshakes is restricted to \u003c= 8192 bits. Based on a survey of publicly trusted RSA keys, there are currently only three certificates in circulation with keys larger than this, and all three appear to be test certificates that are not actively deployed. It is possible there are larger keys in use in private PKIs, but we target the web PKI, so causing breakage here in the interests of increasing the default safety of users of crypto/tls seems reasonable.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.19.12], [1.20.7], [1.21.0-rc.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-48795_golang.org/x/crypto_0.0.0-20210817164053-32db794688a5",
              "shortDescription": {
                "text": "[CVE-2023-48795] golang.org/x/crypto 0.0.0-20210817164053-32db794688a5"
              },
              "help": {
                "text": "The SSH transport protocol with certain OpenSSH extensions, found in OpenSSH before 9.6 and other products, allows remote attackers to bypass integrity checks such that some packets are omitted (from the extension negotiation message), and a client and server may consequently end up with a connection for which some security features have been downgraded or disabled, aka a Terrapin attack. This occurs because the SSH Binary Packet Protocol (BPP), implemented by these extensions, mishandles the handshake phase and mishandles use of sequence numbers. For example, there is an effective attack against SSH's use of ChaCha20-Poly1305 (and CBC with Encrypt-then-MAC). The bypass occurs in chacha20-poly1305@openssh.com and (if CBC is used) the -etm@openssh.com MAC algorithms. This also affects Maverick Synergy Java SSH API before 3.1.0-SNAPSHOT, Dropbear through 2022.83, Ssh before 5.1.1 in Erlang/OTP, PuTTY before 0.80, AsyncSSH before 2.14.2, golang.org/x/crypto before 0.17.0, libssh before 0.10.6, libssh2 through 1.11.0, Thorn Tech SFTP Gateway before 3.4.6, Tera Term before 5.1, Paramiko before 3.4.0, jsch before 0.2.15, SFTPGo before 2.5.6, Netgate pfSense Plus through 23.09.1, Netgate pfSense CE through 2.7.2, HPN-SSH through 18.2.0, ProFTPD before 1.3.8b (and before 1.3.9rc2), ORYX CycloneSSH before 2.3.4, NetSarang XShell 7 before Build 0144, CrushFTP before 10.6.0, ConnectBot SSH library before 2.2.22, Apache MINA sshd through 2.11.0, sshj through 0.37.0, TinySSH through 20230101, trilead-ssh2 6401, LANCOM LCOS and LANconfig, FileZilla before 3.66.4, Nova before 11.8, PKIX-SSH before 14.4, SecureCRT before 9.4.3, Transmit5 before 5.10.4, Win32-OpenSSH before 9.5.0.0p1-Beta, WinSCP before 6.2.2, Bitvise SSH Server before 9.32, Bitvise SSH Client before 9.33, KiTTY through 0.76.1.13, the net-ssh gem 7.2.0 for Ruby, the mscdex ssh2 module before 1.15.0 for Node.js, the thrussh library before 0.35.1 for Rust, and the Russh crate before 0.40.2 for Rust.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Undetermined       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-48795_golang.org/x/crypto_0.0.0-20201221181555-eec23a3978ad",
              "shortDescription": {
                "text": "[CVE-2023-48795] golang.org/x/crypto 0.0.0-20201221181555-eec23a3978ad"
              },
              "help": {
                "text": "The SSH transport protocol with certain OpenSSH extensions, found in OpenSSH before 9.6 and other products, allows remote attackers to bypass integrity checks such that some packets are omitted (from the extension negotiation message), and a client and server may consequently end up with a connection for which some security features have been downgraded or disabled, aka a Terrapin attack. This occurs because the SSH Binary Packet Protocol (BPP), implemented by these extensions, mishandles the handshake phase and mishandles use of sequence numbers. For example, there is an effective attack against SSH's use of ChaCha20-Poly1305 (and CBC with Encrypt-then-MAC). The bypass occurs in chacha20-poly1305@openssh.com and (if CBC is used) the -etm@openssh.com MAC algorithms. This also affects Maverick Synergy Java SSH API before 3.1.0-SNAPSHOT, Dropbear through 2022.83, Ssh before 5.1.1 in Erlang/OTP, PuTTY before 0.80, AsyncSSH before 2.14.2, golang.org/x/crypto before 0.17.0, libssh before 0.10.6, libssh2 through 1.11.0, Thorn Tech SFTP Gateway before 3.4.6, Tera Term before 5.1, Paramiko before 3.4.0, jsch before 0.2.15, SFTPGo before 2.5.6, Netgate pfSense Plus through 23.09.1, Netgate pfSense CE through 2.7.2, HPN-SSH through 18.2.0, ProFTPD before 1.3.8b (and before 1.3.9rc2), ORYX CycloneSSH before 2.3.4, NetSarang XShell 7 before Build 0144, CrushFTP before 10.6.0, ConnectBot SSH library before 2.2.22, Apache MINA sshd through 2.11.0, sshj through 0.37.0, TinySSH through 20230101, trilead-ssh2 6401, LANCOM LCOS and LANconfig, FileZilla before 3.66.4, Nova before 11.8, PKIX-SSH before 14.4, SecureCRT before 9.4.3, Transmit5 before 5.10.4, Win32-OpenSSH before 9.5.0.0p1-Beta, WinSCP before 6.2.2, Bitvise SSH Server before 9.32, Bitvise SSH Client before 9.33, KiTTY through 0.76.1.13, the net-ssh gem 7.2.0 for Ruby, the mscdex ssh2 module before 1.15.0 for Node.js, the thrussh library before 0.35.1 for Rust, and the Russh crate before 0.40.2 for Rust.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Undetermined       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2024-0853_3.16:curl_8.1.2-r0",
              "shortDescription": {
                "text": "[CVE-2024-0853] 3.16:curl 8.1.2-r0"
              },
              "help": {
                "text": "curl inadvertently kept the SSL session ID for connections in its cache even when the verify status (*OCSP stapling*) test failed. A subsequent transfer to\nthe same hostname could then succeed if the session ID cache was still fresh, which then skipped the verify status check.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [8.6.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-5678_3.16:libssl1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-5678] 3.16:libssl1.1 1.1.1u-r1"
              },
              "help": {
                "text": "Issue summary: Generating excessively long X9.42 DH keys or checking\nexcessively long X9.42 DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_generate_key() to\ngenerate an X9.42 DH key may experience long delays.  Likewise, applications\nthat use DH_check_pub_key(), DH_check_pub_key_ex() or EVP_PKEY_public_check()\nto check an X9.42 DH key or X9.42 DH parameters may experience long delays.\nWhere the key or parameters that are being checked have been obtained from\nan untrusted source this may lead to a Denial of Service.\n\nWhile DH_check() performs all the necessary checks (as of CVE-2023-3817),\nDH_check_pub_key() doesn't make any of these checks, and is therefore\nvulnerable for excessively large P and Q parameters.\n\nLikewise, while DH_generate_key() performs a check for an excessively large\nP, it doesn't check for an excessively large Q.\n\nAn application that calls DH_generate_key() or DH_check_pub_key() and\nsupplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nDH_generate_key() and DH_check_pub_key() are also called by a number of\nother OpenSSL functions.  An application calling any of those other\nfunctions may similarly be affected.  The other functions affected by this\nare DH_check_pub_key_ex(), EVP_PKEY_public_check(), and EVP_PKEY_generate().\n\nAlso vulnerable are the OpenSSL pkey command line application when using the\n\"-pubcheck\" option, as well as the OpenSSL genpkey command line application.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [1.1.1w-r1]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-5680_3.16:bind-tools_9.16.42-r0",
              "shortDescription": {
                "text": "[CVE-2023-5680] 3.16:bind-tools 9.16.42-r0"
              },
              "help": {
                "text": "If a resolver cache has a very large number of ECS records stored for the same name, the process of cleaning the cache database node for this name can significantly impair query performance. \nThis issue affects BIND 9 versions 9.11.3-S1 through 9.11.37-S1, 9.16.8-S1 through 9.16.45-S1, and 9.18.11-S1 through 9.18.21-S1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [9.16.48-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-42366_3.16:busybox_1.35.0-r17",
              "shortDescription": {
                "text": "[CVE-2023-42366] 3.16:busybox 1.35.0-r17"
              },
              "help": {
                "text": "A heap-buffer-overflow was discovered in BusyBox v.1.36.1 in the next_token function at awk.c:1159.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [1.35.0-r18]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-28841_github.com/docker/docker_20.10.8+incompatible",
              "shortDescription": {
                "text": "[CVE-2023-28841] github.com/docker/docker 20.10.8+incompatible"
              },
              "help": {
                "text": "Moby is an open source container framework developed by Docker Inc. that is distributed as Docker, Mirantis Container Runtime, and various other downstream projects/products. The Moby daemon component (`dockerd`), which is developed as moby/moby is commonly referred to as *Docker*.\n\nSwarm Mode, which is compiled in and delivered by default in `dockerd` and is thus present in most major Moby downstreams, is a simple, built-in container orchestrator that is implemented through a combination of SwarmKit and supporting network code.\n\nThe `overlay` network driver is a core feature of Swarm Mode, providing isolated virtual LANs that allow communication between containers and services across the cluster. This driver is an implementation/user of VXLAN, which encapsulates link-layer (Ethernet) frames in UDP datagrams that tag the frame with the VXLAN metadata, including a VXLAN Network ID (VNI) that identifies the originating overlay network. In addition, the overlay network driver supports an optional, off-by-default encrypted mode, which is especially useful when VXLAN packets traverses an untrusted network between nodes.\n\nEncrypted overlay networks function by encapsulating the VXLAN datagrams through the use of the IPsec Encapsulating Security Payload protocol in Transport mode. By deploying IPSec encapsulation, encrypted overlay networks gain the additional properties of source authentication through cryptographic proof, data integrity through check-summing, and confidentiality through encryption.\n\nWhen setting an endpoint up on an encrypted overlay network, Moby installs three iptables (Linux kernel firewall) rules that enforce both incoming and outgoing IPSec. These rules rely on the `u32` iptables extension provided by the `xt_u32` kernel module to directly filter on a VXLAN packet's VNI field, so that IPSec guarantees can be enforced on encrypted overlay networks without interfering with other overlay networks or other users of VXLAN.\n\nAn iptables rule designates outgoing VXLAN datagrams with a VNI that c...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.8      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [20.10.24], [23.0.3]   |"
              },
              "properties": {
                "security-severity": "6.8"
              }
            },
            {
              "id": "CVE-2023-28484_3.16:libxml2_2.9.14-r2",
              "shortDescription": {
                "text": "[CVE-2023-28484] 3.16:libxml2 2.9.14-r2"
              },
              "help": {
                "text": "In libxml2 before 2.10.4, parsing of certain invalid XSD schemas can lead to a NULL pointer dereference and subsequently a segfault. This occurs in xmlSchemaFixupComplexType in xmlschemas.c.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [2.10.4-r0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-2975_3.16:libssl1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-2975] 3.16:libssl1.1 1.1.1u-r1"
              },
              "help": {
                "text": "Issue summary: The AES-SIV cipher implementation contains a bug that causes\nit to ignore empty associated data entries which are unauthenticated as\na consequence.\n\nImpact summary: Applications that use the AES-SIV algorithm and want to\nauthenticate empty data entries as associated data can be mislead by removing\nadding or reordering such empty entries as these are ignored by the OpenSSL\nimplementation. We are currently unaware of any such applications.\n\nThe AES-SIV algorithm allows for authentication of multiple associated\ndata entries along with the encryption. To authenticate empty data the\napplication has to call EVP_EncryptUpdate() (or EVP_CipherUpdate()) with\nNULL pointer as the output buffer and 0 as the input buffer length.\nThe AES-SIV implementation in OpenSSL just returns success for such a call\ninstead of performing the associated data authentication operation.\nThe empty data thus will not be authenticated.\n\nAs this issue does not affect non-empty associated data authentication and\nwe expect it to be rare for an application to use empty associated data\nentries this is qualified as Low severity issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [3.1.1-r2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-3446_3.16:libcrypto1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-3446] 3.16:libcrypto1.1 1.1.1u-r1"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. One of those\nchecks confirms that the modulus ('p' parameter) is not too large. Trying to use\na very large modulus is slow and OpenSSL will not normally use a modulus which\nis over 10,000 bits in length.\n\nHowever the DH_check() function checks numerous aspects of the key or parameters\nthat have been supplied. Some of those checks use the supplied modulus value\neven if it has already been found to be too large.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulernable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the '-check' option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [1.1.1u-r2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-4203_3.16:libssl1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2022-4203] 3.16:libssl1.1 1.1.1u-r1"
              },
              "help": {
                "text": "A read buffer overrun can be triggered in X.509 certificate verification,\nspecifically in name constraint checking. Note that this occurs\nafter certificate chain signature verification and requires either a\nCA to have signed the malicious certificate or for the application to\ncontinue certificate verification despite failure to construct a path\nto a trusted issuer.\n\nThe read buffer overrun might result in a crash which could lead to\na denial of service attack. In theory it could also result in the disclosure\nof private memory contents (such as private keys, or sensitive plaintext)\nalthough we are not aware of any working exploit leading to memory\ncontents disclosure as of the time of release of this advisory.\n\nIn a TLS client, this can be triggered by connecting to a malicious\nserver. In a TLS server, this can be triggered if the server requests\nclient authentication and a malicious client connects.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.9      | Not Covered       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "4.9"
              }
            },
            {
              "id": "CVE-2024-24786_google.golang.org/protobuf_1.27.1",
              "shortDescription": {
                "text": "[CVE-2024-24786] google.golang.org/protobuf 1.27.1"
              },
              "help": {
                "text": "The protojson.Unmarshal function can enter an infinite loop when unmarshaling certain forms of invalid JSON. This condition can occur when unmarshaling into a message which contains a google.protobuf.Any value, or when the UnmarshalOptions.DiscardUnknown option is set.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.33.0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-45284_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-45284] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "On Windows, The IsLocal function does not correctly detect reserved device names in some cases. Reserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local. With fix, IsLocal now correctly reports these names as non-local.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.20.11], [1.21.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-3446_cryptography_41.0.1",
              "shortDescription": {
                "text": "[CVE-2023-3446] cryptography 41.0.1"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. One of those\nchecks confirms that the modulus ('p' parameter) is not too large. Trying to use\na very large modulus is slow and OpenSSL will not normally use a modulus which\nis over 10,000 bits in length.\n\nHowever the DH_check() function checks numerous aspects of the key or parameters\nthat have been supplied. Some of those checks use the supplied modulus value\neven if it has already been found to be too large.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulernable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the '-check' option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar `       | [41.0.3]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-46219_3.16:libcurl_8.1.2-r0",
              "shortDescription": {
                "text": "[CVE-2023-46219] 3.16:libcurl 8.1.2-r0"
              },
              "help": {
                "text": "When saving HSTS data to an excessively long file name, curl could end up\nremoving all contents, making subsequent requests using that file unaware of\nthe HSTS status they should otherwise use.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [8.5.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2024-22195_Jinja2_3.1.2",
              "shortDescription": {
                "text": "[CVE-2024-22195] Jinja2 3.1.2"
              },
              "help": {
                "text": "Jinja is an extensible templating engine. Special placeholders in the template allow writing code similar to Python syntax. It is possible to inject arbitrary HTML attributes into the rendered HTML template, potentially leading to Cross-Site Scripting (XSS). The Jinja `xmlattr` filter can be abused to inject arbitrary HTML attribute keys and values, bypassing the auto escaping mechanism and potentially leading to XSS. It may also be possible to bypass attribute validation checks if they are blacklist-based.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar `       | [3.1.3]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2023-3817_3.16:libcrypto1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-3817] 3.16:libcrypto1.1 1.1.1u-r1"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. After fixing\nCVE-2023-3446 it was discovered that a large q parameter value can also trigger\nan overly long computation during some of these checks. A correct q value,\nif present, cannot be larger than the modulus p parameter, thus it is\nunnecessary to perform these checks if q is larger than p.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulnerable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the \"-check\" option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [1.1.1v-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-45803_urllib3_2.0.3",
              "shortDescription": {
                "text": "[CVE-2023-45803] urllib3 2.0.3"
              },
              "help": {
                "text": "urllib3 is a user-friendly HTTP client library for Python. urllib3 previously wouldn't remove the HTTP request body when an HTTP redirect response using status 301, 302, or 303 after the request had its method changed from one that could accept a request body (like `POST`) to `GET` as is required by HTTP RFCs. Although this behavior is not specified in the section for redirects, it can be inferred by piecing together information from different sections and we have observed the behavior in other major HTTP client implementations like curl and web browsers. Because the vulnerability requires a previously trusted service to become compromised in order to have an impact on confidentiality we believe the exploitability of this vulnerability is low. Additionally, many users aren't putting sensitive data in HTTP request bodies, if this is the case then this vulnerability isn't exploitable. Both of the following conditions must be true to be affected by this vulnerability: 1. Using urllib3 and submitting sensitive information in the HTTP request body (such as form data or JSON) and 2. The origin service is compromised and starts redirecting using 301, 302, or 303 to a malicious peer or the redirected-to service becomes compromised. This issue has been addressed in versions 1.26.18 and 2.0.7 and users are advised to update to resolve this issue. Users unable to update should disable redirects for services that aren't expecting to respond with redirects with `redirects=False` and disable automatic redirects with `redirects=False` and handle 301, 302, and 303 redirects manually by stripping the HTTP request body.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.2      | Not Covered       | `sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar `       | [1.26.18], [2.0.7]   |"
              },
              "properties": {
                "security-severity": "4.2"
              }
            },
            {
              "id": "CVE-2023-6129_3.16:openssl_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-6129] 3.16:openssl 1.1.1u-r1"
              },
              "help": {
                "text": "Issue summary: The POLY1305 MAC (message authentication code) implementation\ncontains a bug that might corrupt the internal state of applications running\non PowerPC CPU based platforms if the CPU provides vector instructions.\n\nImpact summary: If an attacker can influence whether the POLY1305 MAC\nalgorithm is used, the application state might be corrupted with various\napplication dependent consequences.\n\nThe POLY1305 MAC (message authentication code) implementation in OpenSSL for\nPowerPC CPUs restores the contents of vector registers in a different order\nthan they are saved. Thus the contents of some of these vector registers\nare corrupted when returning to the caller. The vulnerable code is used only\non newer PowerPC processors supporting the PowerISA 2.07 instructions.\n\nThe consequences of this kind of internal application state corruption can\nbe various - from no consequences, if the calling application does not\ndepend on the contents of non-volatile XMM registers at all, to the worst\nconsequences, where the attacker could get complete control of the application\nprocess. However unless the compiler uses the vector registers for storing\npointers, the most likely consequence, if any, would be an incorrect result\nof some application dependent calculations or a crash leading to a denial of\nservice.\n\nThe POLY1305 MAC algorithm is most frequently used as part of the\nCHACHA20-POLY1305 AEAD (authenticated encryption with associated data)\nalgorithm. The most common usage of this AEAD cipher is with TLS protocol\nversions 1.2 and 1.3. If this cipher is enabled on the server a malicious\nclient can influence whether this AEAD cipher is used. This implies that\nTLS server applications using OpenSSL can be potentially impacted. However\nwe are currently not aware of any concrete application that would be affected\nby this issue therefore we consider this a Low severity security issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [3.1.4-r3]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-23471_github.com/containerd/containerd_1.5.7",
              "shortDescription": {
                "text": "[CVE-2022-23471] github.com/containerd/containerd 1.5.7"
              },
              "help": {
                "text": "containerd is an open source container runtime. A bug was found in containerd's CRI implementation where a user can exhaust memory on the host. In the CRI stream server, a goroutine is launched to handle terminal resize events if a TTY is requested. If the user's process fails to launch due to, for example, a faulty command, the goroutine will be stuck waiting to send without a receiver, resulting in a memory leak. Kubernetes and crictl can both be configured to use containerd's CRI implementation and the stream server is used for handling container IO. This bug has been fixed in containerd 1.6.12 and 1.5.16.  Users should update to these versions to resolve the issue. Users unable to upgrade should ensure that only trusted images and commands are used and that only trusted users have permissions to execute commands in running containers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.5.16], [1.6.12]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-3446_3.16:libssl1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-3446] 3.16:libssl1.1 1.1.1u-r1"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. One of those\nchecks confirms that the modulus ('p' parameter) is not too large. Trying to use\na very large modulus is slow and OpenSSL will not normally use a modulus which\nis over 10,000 bits in length.\n\nHowever the DH_check() function checks numerous aspects of the key or parameters\nthat have been supplied. Some of those checks use the supplied modulus value\neven if it has already been found to be too large.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulernable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the '-check' option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [1.1.1u-r2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-50268_3.16:jq_1.6-r1",
              "shortDescription": {
                "text": "[CVE-2023-50268] 3.16:jq 1.6-r1"
              },
              "help": {
                "text": "jq is a command-line JSON processor. Version 1.7 is vulnerable to stack-based buffer overflow in builds using decNumber. Version 1.7.1 contains a patch for this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-6129_3.16:libssl1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-6129] 3.16:libssl1.1 1.1.1u-r1"
              },
              "help": {
                "text": "Issue summary: The POLY1305 MAC (message authentication code) implementation\ncontains a bug that might corrupt the internal state of applications running\non PowerPC CPU based platforms if the CPU provides vector instructions.\n\nImpact summary: If an attacker can influence whether the POLY1305 MAC\nalgorithm is used, the application state might be corrupted with various\napplication dependent consequences.\n\nThe POLY1305 MAC (message authentication code) implementation in OpenSSL for\nPowerPC CPUs restores the contents of vector registers in a different order\nthan they are saved. Thus the contents of some of these vector registers\nare corrupted when returning to the caller. The vulnerable code is used only\non newer PowerPC processors supporting the PowerISA 2.07 instructions.\n\nThe consequences of this kind of internal application state corruption can\nbe various - from no consequences, if the calling application does not\ndepend on the contents of non-volatile XMM registers at all, to the worst\nconsequences, where the attacker could get complete control of the application\nprocess. However unless the compiler uses the vector registers for storing\npointers, the most likely consequence, if any, would be an incorrect result\nof some application dependent calculations or a crash leading to a denial of\nservice.\n\nThe POLY1305 MAC algorithm is most frequently used as part of the\nCHACHA20-POLY1305 AEAD (authenticated encryption with associated data)\nalgorithm. The most common usage of this AEAD cipher is with TLS protocol\nversions 1.2 and 1.3. If this cipher is enabled on the server a malicious\nclient can influence whether this AEAD cipher is used. This implies that\nTLS server applications using OpenSSL can be potentially impacted. However\nwe are currently not aware of any concrete application that would be affected\nby this issue therefore we consider this a Low severity security issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [3.1.4-r3]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-2975_3.16:openssl_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-2975] 3.16:openssl 1.1.1u-r1"
              },
              "help": {
                "text": "Issue summary: The AES-SIV cipher implementation contains a bug that causes\nit to ignore empty associated data entries which are unauthenticated as\na consequence.\n\nImpact summary: Applications that use the AES-SIV algorithm and want to\nauthenticate empty data entries as associated data can be mislead by removing\nadding or reordering such empty entries as these are ignored by the OpenSSL\nimplementation. We are currently unaware of any such applications.\n\nThe AES-SIV algorithm allows for authentication of multiple associated\ndata entries along with the encryption. To authenticate empty data the\napplication has to call EVP_EncryptUpdate() (or EVP_CipherUpdate()) with\nNULL pointer as the output buffer and 0 as the input buffer length.\nThe AES-SIV implementation in OpenSSL just returns success for such a call\ninstead of performing the associated data authentication operation.\nThe empty data thus will not be authenticated.\n\nAs this issue does not affect non-empty associated data authentication and\nwe expect it to be rare for an application to use empty associated data\nentries this is qualified as Low severity issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [3.1.1-r2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-42365_3.16:busybox_1.35.0-r17",
              "shortDescription": {
                "text": "[CVE-2023-42365] 3.16:busybox 1.35.0-r17"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in BusyBox v.1.36.1 via a crafted awk pattern in the awk.c copyvar function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-28842_github.com/docker/docker_20.10.8+incompatible",
              "shortDescription": {
                "text": "[CVE-2023-28842] github.com/docker/docker 20.10.8+incompatible"
              },
              "help": {
                "text": "Moby) is an open source container framework developed by Docker Inc. that is distributed as Docker, Mirantis Container Runtime, and various other downstream projects/products. The Moby daemon component (`dockerd`), which is developed as moby/moby is commonly referred to as *Docker*.\n\nSwarm Mode, which is compiled in and delivered by default in `dockerd` and is thus present in most major Moby downstreams, is a simple, built-in container orchestrator that is implemented through a combination of SwarmKit and supporting network code.\n\nThe `overlay` network driver is a core feature of Swarm Mode, providing isolated virtual LANs that allow communication between containers and services across the cluster. This driver is an implementation/user of VXLAN, which encapsulates link-layer (Ethernet) frames in UDP datagrams that tag the frame with the VXLAN metadata, including a VXLAN Network ID (VNI) that identifies the originating overlay network. In addition, the overlay network driver supports an optional, off-by-default encrypted mode, which is especially useful when VXLAN packets traverses an untrusted network between nodes.\n\nEncrypted overlay networks function by encapsulating the VXLAN datagrams through the use of the IPsec Encapsulating Security Payload protocol in Transport mode. By deploying IPSec encapsulation, encrypted overlay networks gain the additional properties of source authentication through cryptographic proof, data integrity through check-summing, and confidentiality through encryption.\n\nWhen setting an endpoint up on an encrypted overlay network, Moby installs three iptables (Linux kernel firewall) rules that enforce both incoming and outgoing IPSec. These rules rely on the `u32` iptables extension provided by the `xt_u32` kernel module to directly filter on a VXLAN packet's VNI field, so that IPSec guarantees can be enforced on encrypted overlay networks without interfering with other overlay networks or other users of VXLAN.\n\nThe `overlay` driver dynamically and lazily defines the kernel config...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.8      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [20.10.24], [23.0.3]   |"
              },
              "properties": {
                "security-severity": "6.8"
              }
            },
            {
              "id": "CVE-2023-5678_3.16:libcrypto1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-5678] 3.16:libcrypto1.1 1.1.1u-r1"
              },
              "help": {
                "text": "Issue summary: Generating excessively long X9.42 DH keys or checking\nexcessively long X9.42 DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_generate_key() to\ngenerate an X9.42 DH key may experience long delays.  Likewise, applications\nthat use DH_check_pub_key(), DH_check_pub_key_ex() or EVP_PKEY_public_check()\nto check an X9.42 DH key or X9.42 DH parameters may experience long delays.\nWhere the key or parameters that are being checked have been obtained from\nan untrusted source this may lead to a Denial of Service.\n\nWhile DH_check() performs all the necessary checks (as of CVE-2023-3817),\nDH_check_pub_key() doesn't make any of these checks, and is therefore\nvulnerable for excessively large P and Q parameters.\n\nLikewise, while DH_generate_key() performs a check for an excessively large\nP, it doesn't check for an excessively large Q.\n\nAn application that calls DH_generate_key() or DH_check_pub_key() and\nsupplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nDH_generate_key() and DH_check_pub_key() are also called by a number of\nother OpenSSL functions.  An application calling any of those other\nfunctions may similarly be affected.  The other functions affected by this\nare DH_check_pub_key_ex(), EVP_PKEY_public_check(), and EVP_PKEY_generate().\n\nAlso vulnerable are the OpenSSL pkey command line application when using the\n\"-pubcheck\" option, as well as the OpenSSL genpkey command line application.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [1.1.1w-r1]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2024-0853_3.16:libcurl_8.1.2-r0",
              "shortDescription": {
                "text": "[CVE-2024-0853] 3.16:libcurl 8.1.2-r0"
              },
              "help": {
                "text": "curl inadvertently kept the SSL session ID for connections in its cache even when the verify status (*OCSP stapling*) test failed. A subsequent transfer to\nthe same hostname could then succeed if the session ID cache was still fresh, which then skipped the verify status check.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [8.6.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2024-0727_cryptography_41.0.1",
              "shortDescription": {
                "text": "[CVE-2024-0727] cryptography 41.0.1"
              },
              "help": {
                "text": "Issue summary: Processing a maliciously formatted PKCS12 file may lead OpenSSL\nto crash leading to a potential Denial of Service attack\n\nImpact summary: Applications loading files in the PKCS12 format from untrusted\nsources might terminate abruptly.\n\nA file in PKCS12 format can contain certificates and keys and may come from an\nuntrusted source. The PKCS12 specification allows certain fields to be NULL, but\nOpenSSL does not correctly check for this case. This can lead to a NULL pointer\ndereference that results in OpenSSL crashing. If an application processes PKCS12\nfiles from an untrusted source using the OpenSSL APIs then that application will\nbe vulnerable to this issue.\n\nOpenSSL APIs that are vulnerable to this are: PKCS12_parse(),\nPKCS12_unpack_p7data(), PKCS12_unpack_p7encdata(), PKCS12_unpack_authsafes()\nand PKCS12_newpass().\n\nWe have also fixed a similar issue in SMIME_write_PKCS7(). However since this\nfunction is related to writing data we do not consider it security significant.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar `       | [42.0.2]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42363_3.16:busybox_1.35.0-r17",
              "shortDescription": {
                "text": "[CVE-2023-42363] 3.16:busybox 1.35.0-r17"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in xasprintf function in xfuncs_printf.c:344 in BusyBox v.1.36.1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [1.36.1-r27]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-2253_github.com/docker/distribution_2.7.1+incompatible",
              "shortDescription": {
                "text": "[CVE-2023-2253] github.com/docker/distribution 2.7.1+incompatible"
              },
              "help": {
                "text": "A flaw was found in the `/v2/_catalog` endpoint in distribution/distribution, which accepts a parameter to control the maximum number of records returned (query string: `n`). This vulnerability allows a malicious user to submit an unreasonably large value for `n,` causing the allocation of a massive string array, possibly causing a denial of service through excessive use of memory.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [2.8.2-beta.1]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-3817_3.16:openssl_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-3817] 3.16:openssl 1.1.1u-r1"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. After fixing\nCVE-2023-3446 it was discovered that a large q parameter value can also trigger\nan overly long computation during some of these checks. A correct q value,\nif present, cannot be larger than the modulus p parameter, thus it is\nunnecessary to perform these checks if q is larger than p.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulnerable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the \"-check\" option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.1.1v-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-45284_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2023-45284] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "On Windows, The IsLocal function does not correctly detect reserved device names in some cases. Reserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local. With fix, IsLocal now correctly reports these names as non-local.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.20.11], [1.21.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-4203_3.16:libcrypto1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2022-4203] 3.16:libcrypto1.1 1.1.1u-r1"
              },
              "help": {
                "text": "A read buffer overrun can be triggered in X.509 certificate verification,\nspecifically in name constraint checking. Note that this occurs\nafter certificate chain signature verification and requires either a\nCA to have signed the malicious certificate or for the application to\ncontinue certificate verification despite failure to construct a path\nto a trusted issuer.\n\nThe read buffer overrun might result in a crash which could lead to\na denial of service attack. In theory it could also result in the disclosure\nof private memory contents (such as private keys, or sensitive plaintext)\nalthough we are not aware of any working exploit leading to memory\ncontents disclosure as of the time of release of this advisory.\n\nIn a TLS client, this can be triggered by connecting to a malicious\nserver. In a TLS server, this can be triggered if the server requests\nclient authentication and a malicious client connects.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.9      | Not Covered       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "4.9"
              }
            },
            {
              "id": "CVE-2023-3817_3.16:libssl1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-3817] 3.16:libssl1.1 1.1.1u-r1"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. After fixing\nCVE-2023-3446 it was discovered that a large q parameter value can also trigger\nan overly long computation during some of these checks. A correct q value,\nif present, cannot be larger than the modulus p parameter, thus it is\nunnecessary to perform these checks if q is larger than p.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulnerable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the \"-check\" option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [1.1.1v-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-46219_3.16:curl_8.1.2-r0",
              "shortDescription": {
                "text": "[CVE-2023-46219] 3.16:curl 8.1.2-r0"
              },
              "help": {
                "text": "When saving HSTS data to an excessively long file name, curl could end up\nremoving all contents, making subsequent requests using that file unaware of\nthe HSTS status they should otherwise use.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [8.5.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-6129_3.16:libcrypto1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-6129] 3.16:libcrypto1.1 1.1.1u-r1"
              },
              "help": {
                "text": "Issue summary: The POLY1305 MAC (message authentication code) implementation\ncontains a bug that might corrupt the internal state of applications running\non PowerPC CPU based platforms if the CPU provides vector instructions.\n\nImpact summary: If an attacker can influence whether the POLY1305 MAC\nalgorithm is used, the application state might be corrupted with various\napplication dependent consequences.\n\nThe POLY1305 MAC (message authentication code) implementation in OpenSSL for\nPowerPC CPUs restores the contents of vector registers in a different order\nthan they are saved. Thus the contents of some of these vector registers\nare corrupted when returning to the caller. The vulnerable code is used only\non newer PowerPC processors supporting the PowerISA 2.07 instructions.\n\nThe consequences of this kind of internal application state corruption can\nbe various - from no consequences, if the calling application does not\ndepend on the contents of non-volatile XMM registers at all, to the worst\nconsequences, where the attacker could get complete control of the application\nprocess. However unless the compiler uses the vector registers for storing\npointers, the most likely consequence, if any, would be an incorrect result\nof some application dependent calculations or a crash leading to a denial of\nservice.\n\nThe POLY1305 MAC algorithm is most frequently used as part of the\nCHACHA20-POLY1305 AEAD (authenticated encryption with associated data)\nalgorithm. The most common usage of this AEAD cipher is with TLS protocol\nversions 1.2 and 1.3. If this cipher is enabled on the server a malicious\nclient can influence whether this AEAD cipher is used. This implies that\nTLS server applications using OpenSSL can be potentially impacted. However\nwe are currently not aware of any concrete application that would be affected\nby this issue therefore we consider this a Low severity security issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [3.1.4-r3]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-42363_3.16:ssl_client_1.35.0-r17",
              "shortDescription": {
                "text": "[CVE-2023-42363] 3.16:ssl_client 1.35.0-r17"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in xasprintf function in xfuncs_printf.c:344 in BusyBox v.1.36.1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [1.36.1-r27]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42364_3.16:busybox_1.35.0-r17",
              "shortDescription": {
                "text": "[CVE-2023-42364] 3.16:busybox 1.35.0-r17"
              },
              "help": {
                "text": "A use-after-free vulnerability in BusyBox v.1.36.1 allows attackers to cause a denial of service via a crafted awk pattern in the awk.c evaluate function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2024-35195_requests_2.31.0",
              "shortDescription": {
                "text": "[CVE-2024-35195] requests 2.31.0"
              },
              "help": {
                "text": "Requests is a HTTP library. Prior to 2.32.0, when making requests through a Requests `Session`, if the first request is made with `verify=False` to disable cert verification, all subsequent requests to the same host will continue to ignore cert verification regardless of changes to the value of `verify`. This behavior will continue for the lifecycle of the connection in the connection pool. This vulnerability is fixed in 2.32.0.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.6      | Not Covered       | `sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar `       | [2.32.0]   |"
              },
              "properties": {
                "security-severity": "5.6"
              }
            },
            {
              "id": "CVE-2024-29018_github.com/docker/docker_20.10.8+incompatible",
              "shortDescription": {
                "text": "[CVE-2024-29018] github.com/docker/docker 20.10.8+incompatible"
              },
              "help": {
                "text": "Moby is an open source container framework that is a key component of Docker Engine, Docker Desktop, and other distributions of container tooling or runtimes. Moby's networking implementation allows for many networks, each with their own IP address range and gateway, to be defined. This feature is frequently referred to as custom networks, as each network can have a different driver, set of parameters and thus behaviors. When creating a network, the `--internal` flag is used to designate a network as _internal_. The `internal` attribute in a docker-compose.yml file may also be used to mark a network _internal_, and other API clients may specify the `internal` parameter as well.\n\nWhen containers with networking are created, they are assigned unique network interfaces and IP addresses. The host serves as a router for non-internal networks, with a gateway IP that provides SNAT/DNAT to/from container IPs.\n\nContainers on an internal network may communicate between each other, but are precluded from communicating with any networks the host has access to (LAN or WAN) as no default route is configured, and firewall rules are set up to drop all outgoing traffic. Communication with the gateway IP address (and thus appropriately configured host services) is possible, and the host may communicate with any container IP directly.\n\nIn addition to configuring the Linux kernel's various networking features to enable container networking, `dockerd` directly provides some services to container networks. Principal among these is serving as a resolver, enabling service discovery, and resolution of names from an upstream resolver.\n\nWhen a DNS request for a name that does not correspond to a container is received, the request is forwarded to the configured upstream resolver. This request is made from the container's network namespace: the level of access and routing of traffic is the same as if the request was made by the container itself.\n\nAs a consequence of this design, containers solely attached to an internal network will ...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [23.0.11], [25.0.5], [26.0.0-rc3]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-29469_3.16:libxml2_2.9.14-r2",
              "shortDescription": {
                "text": "[CVE-2023-29469] 3.16:libxml2 2.9.14-r2"
              },
              "help": {
                "text": "An issue was discovered in libxml2 before 2.10.4. When hashing empty dict strings in a crafted XML document, xmlDictComputeFastKey in dict.c can produce non-deterministic values, leading to various logic and memory errors, such as a double free. This behavior occurs because there is an attempt to use the first byte of an empty string, and any value is possible (not solely the '\\0' value).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [2.10.4-r0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-46218_3.16:libcurl_8.1.2-r0",
              "shortDescription": {
                "text": "[CVE-2023-46218] 3.16:libcurl 8.1.2-r0"
              },
              "help": {
                "text": "This flaw allows a malicious HTTP server to set \"super cookies\" in curl that\nare then passed back to more origins than what is otherwise allowed or\npossible. This allows a site to set cookies that then would get sent to\ndifferent and unrelated sites and domains.\n\nIt could do this by exploiting a mixed case flaw in curl's function that\nverifies a given cookie domain against the Public Suffix List (PSL). For\nexample a cookie could be set with `domain=co.UK` when the URL used a lower\ncase hostname `curl.co.uk`, even though `co.uk` is listed as a PSL domain.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [8.5.0-r0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-5680_3.16:bind-libs_9.16.42-r0",
              "shortDescription": {
                "text": "[CVE-2023-5680] 3.16:bind-libs 9.16.42-r0"
              },
              "help": {
                "text": "If a resolver cache has a very large number of ECS records stored for the same name, the process of cleaning the cache database node for this name can significantly impair query performance. \nThis issue affects BIND 9 versions 9.11.3-S1 through 9.11.37-S1, 9.16.8-S1 through 9.16.45-S1, and 9.18.11-S1 through 9.18.21-S1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [9.16.48-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-5678_3.16:openssl_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-5678] 3.16:openssl 1.1.1u-r1"
              },
              "help": {
                "text": "Issue summary: Generating excessively long X9.42 DH keys or checking\nexcessively long X9.42 DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_generate_key() to\ngenerate an X9.42 DH key may experience long delays.  Likewise, applications\nthat use DH_check_pub_key(), DH_check_pub_key_ex() or EVP_PKEY_public_check()\nto check an X9.42 DH key or X9.42 DH parameters may experience long delays.\nWhere the key or parameters that are being checked have been obtained from\nan untrusted source this may lead to a Denial of Service.\n\nWhile DH_check() performs all the necessary checks (as of CVE-2023-3817),\nDH_check_pub_key() doesn't make any of these checks, and is therefore\nvulnerable for excessively large P and Q parameters.\n\nLikewise, while DH_generate_key() performs a check for an excessively large\nP, it doesn't check for an excessively large Q.\n\nAn application that calls DH_generate_key() or DH_check_pub_key() and\nsupplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nDH_generate_key() and DH_check_pub_key() are also called by a number of\nother OpenSSL functions.  An application calling any of those other\nfunctions may similarly be affected.  The other functions affected by this\nare DH_check_pub_key_ex(), EVP_PKEY_public_check(), and EVP_PKEY_generate().\n\nAlso vulnerable are the OpenSSL pkey command line application when using the\n\"-pubcheck\" option, as well as the OpenSSL genpkey command line application.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.1.1w-r1]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2024-37891_urllib3_2.0.3",
              "shortDescription": {
                "text": "[CVE-2024-37891] urllib3 2.0.3"
              },
              "help": {
                "text": "urllib3 is a user-friendly HTTP client library for Python. When using urllib3's proxy support with `ProxyManager`, the `Proxy-Authorization` header is only sent to the configured proxy, as expected. However, when sending HTTP requests *without* using urllib3's proxy support, it's possible to accidentally configure the `Proxy-Authorization` header even though it won't have any effect as the request is not using a forwarding proxy or a tunneling proxy. In those cases, urllib3 doesn't treat the `Proxy-Authorization` HTTP header as one carrying authentication material and thus doesn't strip the header on cross-origin redirects. Because this is a highly unlikely scenario, we believe the severity of this vulnerability is low for almost all users. Out of an abundance of caution urllib3 will automatically strip the `Proxy-Authorization` header during cross-origin redirects to avoid the small chance that users are doing this on accident. Users should use urllib3's proxy support or disable automatic redirects to achieve safe processing of the `Proxy-Authorization` header, but we still decided to strip the header by default in order to further protect users who aren't using the correct approach. We believe the number of usages affected by this advisory is low. It requires all of the following to be true to be exploited: 1. Setting the `Proxy-Authorization` header without using urllib3's built-in proxy support. 2. Not disabling HTTP redirects. 3. Either not using an HTTPS origin server or for the proxy or target origin to redirect to a malicious origin. Users are advised to update to either version 1.26.19 or version 2.2.2. Users unable to upgrade may use the `Proxy-Authorization` header with urllib3's `ProxyManager`, disable HTTP redirects using `redirects=False` when sending requests, or not user the `Proxy-Authorization` header as mitigations.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.4      | Not Covered       | `sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar `       | [1.26.19], [2.2.2]   |"
              },
              "properties": {
                "security-severity": "4.4"
              }
            },
            {
              "id": "CVE-2023-41040_GitPython_3.1.31",
              "shortDescription": {
                "text": "[CVE-2023-41040] GitPython 3.1.31"
              },
              "help": {
                "text": "GitPython is a python library used to interact with Git repositories. In order to resolve some git references, GitPython reads files from the `.git` directory, in some places the name of the file being read is provided by the user, GitPython doesn't check if this file is located outside the `.git` directory. This allows an attacker to make GitPython read any file from the system. This vulnerability is present in https://github.com/gitpython-developers/GitPython/blob/1c8310d7cae144f74a671cbe17e51f63a830adbf/git/refs/symbolic.py#L174-L175. That code joins the base directory with a user given string without checking if the final path is located outside the base directory. This vulnerability cannot be used to read the contents of files but could in theory be used to trigger a denial of service for the program. This issue has not yet been addressed.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar `       | [3.1.37]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-1255_3.16:libssl1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-1255] 3.16:libssl1.1 1.1.1u-r1"
              },
              "help": {
                "text": "Issue summary: The AES-XTS cipher decryption implementation for 64 bit ARM\nplatform contains a bug that could cause it to read past the input buffer,\nleading to a crash.\n\nImpact summary: Applications that use the AES-XTS algorithm on the 64 bit ARM\nplatform can crash in rare circumstances. The AES-XTS algorithm is usually\nused for disk encryption.\n\nThe AES-XTS cipher decryption implementation for 64 bit ARM platform will read\npast the end of the ciphertext buffer if the ciphertext size is 4 mod 5 in 16\nbyte blocks, e.g. 144 bytes or 1024 bytes. If the memory after the ciphertext\nbuffer is unmapped, this will trigger a crash which results in a denial of\nservice.\n\nIf an attacker can control the size and location of the ciphertext buffer\nbeing decrypted by an application using AES-XTS on 64 bit ARM, the\napplication is affected. This is fairly unlikely making this issue\na Low severity one.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [3.1.0-r4]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-2975_3.16:libcrypto1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-2975] 3.16:libcrypto1.1 1.1.1u-r1"
              },
              "help": {
                "text": "Issue summary: The AES-SIV cipher implementation contains a bug that causes\nit to ignore empty associated data entries which are unauthenticated as\na consequence.\n\nImpact summary: Applications that use the AES-SIV algorithm and want to\nauthenticate empty data entries as associated data can be mislead by removing\nadding or reordering such empty entries as these are ignored by the OpenSSL\nimplementation. We are currently unaware of any such applications.\n\nThe AES-SIV algorithm allows for authentication of multiple associated\ndata entries along with the encryption. To authenticate empty data the\napplication has to call EVP_EncryptUpdate() (or EVP_CipherUpdate()) with\nNULL pointer as the output buffer and 0 as the input buffer length.\nThe AES-SIV implementation in OpenSSL just returns success for such a call\ninstead of performing the associated data authentication operation.\nThe empty data thus will not be authenticated.\n\nAs this issue does not affect non-empty associated data authentication and\nwe expect it to be rare for an application to use empty associated data\nentries this is qualified as Low severity issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [3.1.1-r2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2024-23829_aiohttp_3.8.4",
              "shortDescription": {
                "text": "[CVE-2024-23829] aiohttp 3.8.4"
              },
              "help": {
                "text": "aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. Security-sensitive parts of the Python HTTP parser retained minor differences in allowable character sets, that must trigger error handling to robustly match frame boundaries of proxies in order to protect against injection of additional requests. Additionally, validation could trigger exceptions that were not handled consistently with processing of other malformed input.  Being more lenient than internet standards require could, depending on deployment environment, assist in request smuggling. The unhandled exception could cause excessive resource consumption on the application server and/or its logging facilities. This vulnerability exists due to an incomplete fix for CVE-2023-47627. Version 3.9.2 fixes this vulnerability.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar `       | [3.9.2]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2024-34064_Jinja2_3.1.2",
              "shortDescription": {
                "text": "[CVE-2024-34064] Jinja2 3.1.2"
              },
              "help": {
                "text": "Jinja is an extensible templating engine. The `xmlattr` filter in affected versions of Jinja accepts keys containing non-attribute characters. XML/HTML attributes cannot contain spaces, `/`, `\u003e`, or `=`, as each would then be interpreted as starting a separate attribute. If an application accepts keys (as opposed to only values) as user input, and renders these in pages that other users see as well, an attacker could use this to inject other attributes and perform XSS. The fix for CVE-2024-22195 only addressed spaces but not other characters. Accepting keys as user input is now explicitly considered an unintended use case of the `xmlattr` filter, and code that does so without otherwise validating the input should be flagged as insecure, regardless of Jinja version. Accepting _values_ as user input continues to be safe. This vulnerability is fixed in 3.1.4.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.4      | Not Covered       | `sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar `       | [3.1.4]   |"
              },
              "properties": {
                "security-severity": "5.4"
              }
            },
            {
              "id": "CVE-2023-1255_3.16:libcrypto1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-1255] 3.16:libcrypto1.1 1.1.1u-r1"
              },
              "help": {
                "text": "Issue summary: The AES-XTS cipher decryption implementation for 64 bit ARM\nplatform contains a bug that could cause it to read past the input buffer,\nleading to a crash.\n\nImpact summary: Applications that use the AES-XTS algorithm on the 64 bit ARM\nplatform can crash in rare circumstances. The AES-XTS algorithm is usually\nused for disk encryption.\n\nThe AES-XTS cipher decryption implementation for 64 bit ARM platform will read\npast the end of the ciphertext buffer if the ciphertext size is 4 mod 5 in 16\nbyte blocks, e.g. 144 bytes or 1024 bytes. If the memory after the ciphertext\nbuffer is unmapped, this will trigger a crash which results in a denial of\nservice.\n\nIf an attacker can control the size and location of the ciphertext buffer\nbeing decrypted by an application using AES-XTS on 64 bit ARM, the\napplication is affected. This is fairly unlikely making this issue\na Low severity one.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [3.1.0-r4]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-1255_3.16:openssl_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-1255] 3.16:openssl 1.1.1u-r1"
              },
              "help": {
                "text": "Issue summary: The AES-XTS cipher decryption implementation for 64 bit ARM\nplatform contains a bug that could cause it to read past the input buffer,\nleading to a crash.\n\nImpact summary: Applications that use the AES-XTS algorithm on the 64 bit ARM\nplatform can crash in rare circumstances. The AES-XTS algorithm is usually\nused for disk encryption.\n\nThe AES-XTS cipher decryption implementation for 64 bit ARM platform will read\npast the end of the ciphertext buffer if the ciphertext size is 4 mod 5 in 16\nbyte blocks, e.g. 144 bytes or 1024 bytes. If the memory after the ciphertext\nbuffer is unmapped, this will trigger a crash which results in a denial of\nservice.\n\nIf an attacker can control the size and location of the ciphertext buffer\nbeing decrypted by an application using AES-XTS on 64 bit ARM, the\napplication is affected. This is fairly unlikely making this issue\na Low severity one.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [3.1.0-r4]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-4039_3.16:libstdc++_11.2.1_git20220219-r2",
              "shortDescription": {
                "text": "[CVE-2023-4039] 3.16:libstdc++ 11.2.1_git20220219-r2"
              },
              "help": {
                "text": "**DISPUTED**A failure in the -fstack-protector feature in GCC-based toolchains \nthat target AArch64 allows an attacker to exploit an existing buffer \noverflow in dynamically-sized local variables in your application \nwithout this being detected. This stack-protector failure only applies \nto C99-style dynamically-sized local variables or those created using \nalloca(). The stack-protector operates as intended for statically-sized \nlocal variables.\n\nThe default behavior when the stack-protector \ndetects an overflow is to terminate your application, resulting in \ncontrolled loss of availability. An attacker who can exploit a buffer \noverflow without triggering the stack-protector might be able to change \nprogram flow control to cause an uncontrolled loss of availability or to\n go further and affect confidentiality or integrity. NOTE: The GCC project argues that this is a missed hardening bug and not a vulnerability by itself.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.8      | Not Covered       | `sha256__f7dd0a2c0f0fc91d94bad3b99dd86ebda4f3e2332f7d0c22bfd8d7e23972b331.tar `       | [13.2.1_git20231014-r0]   |"
              },
              "properties": {
                "security-severity": "4.8"
              }
            },
            {
              "id": "CVE-2023-43786_3.16:libx11_1.8-r1",
              "shortDescription": {
                "text": "[CVE-2023-43786] 3.16:libx11 1.8-r1"
              },
              "help": {
                "text": "A vulnerability was found in libX11 due to an infinite loop within the PutSubImage() function. This flaw allows a local user to consume all available system resources and cause a denial of service condition.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.8.7-r0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2024-27306_aiohttp_3.8.4",
              "shortDescription": {
                "text": "[CVE-2024-27306] aiohttp 3.8.4"
              },
              "help": {
                "text": "aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. A XSS vulnerability exists on index pages for static file handling. This vulnerability is fixed in 3.9.4. We have always recommended using a reverse proxy server (e.g. nginx) for serving static files. Users following the recommendation are unaffected. Other users can disable `show_index` if unable to upgrade.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar `       | [3.9.4]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2024-0727_3.16:libcrypto1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2024-0727] 3.16:libcrypto1.1 1.1.1u-r1"
              },
              "help": {
                "text": "Issue summary: Processing a maliciously formatted PKCS12 file may lead OpenSSL\nto crash leading to a potential Denial of Service attack\n\nImpact summary: Applications loading files in the PKCS12 format from untrusted\nsources might terminate abruptly.\n\nA file in PKCS12 format can contain certificates and keys and may come from an\nuntrusted source. The PKCS12 specification allows certain fields to be NULL, but\nOpenSSL does not correctly check for this case. This can lead to a NULL pointer\ndereference that results in OpenSSL crashing. If an application processes PKCS12\nfiles from an untrusted source using the OpenSSL APIs then that application will\nbe vulnerable to this issue.\n\nOpenSSL APIs that are vulnerable to this are: PKCS12_parse(),\nPKCS12_unpack_p7data(), PKCS12_unpack_p7encdata(), PKCS12_unpack_authsafes()\nand PKCS12_newpass().\n\nWe have also fixed a similar issue in SMIME_write_PKCS7(). However since this\nfunction is related to writing data we do not consider it security significant.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [3.1.4-r5]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42364_3.16:ssl_client_1.35.0-r17",
              "shortDescription": {
                "text": "[CVE-2023-42364] 3.16:ssl_client 1.35.0-r17"
              },
              "help": {
                "text": "A use-after-free vulnerability in BusyBox v.1.36.1 allows attackers to cause a denial of service via a crafted awk pattern in the awk.c evaluate function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-52426_3.16:expat_2.5.0-r0",
              "shortDescription": {
                "text": "[CVE-2023-52426] 3.16:expat 2.5.0-r0"
              },
              "help": {
                "text": "libexpat through 2.5.0 allows recursive XML Entity Expansion if XML_DTD is undefined at compile time.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__f7dd0a2c0f0fc91d94bad3b99dd86ebda4f3e2332f7d0c22bfd8d7e23972b331.tar `       | [2.6.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-24532_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-24532] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "The ScalarMult and ScalarBaseMult methods of the P256 Curve may return an incorrect result if called with some specific unreduced scalars (a scalar larger than the order of the curve). This does not impact usages of crypto/ecdsa or crypto/ecdh.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.19.7], [1.20.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-39318_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-39318] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "The html/template package does not properly handle HTML-like \"\" comment tokens, nor hashbang \"#!\" comment tokens, in \u003cscript\u003e contexts. This may cause the template parser to improperly interpret the contents of \u003cscript\u003e contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2023-39326_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-39326] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "A malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body. A malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request. Chunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-4039_3.16:libgomp_11.2.1_git20220219-r2",
              "shortDescription": {
                "text": "[CVE-2023-4039] 3.16:libgomp 11.2.1_git20220219-r2"
              },
              "help": {
                "text": "**DISPUTED**A failure in the -fstack-protector feature in GCC-based toolchains \nthat target AArch64 allows an attacker to exploit an existing buffer \noverflow in dynamically-sized local variables in your application \nwithout this being detected. This stack-protector failure only applies \nto C99-style dynamically-sized local variables or those created using \nalloca(). The stack-protector operates as intended for statically-sized \nlocal variables.\n\nThe default behavior when the stack-protector \ndetects an overflow is to terminate your application, resulting in \ncontrolled loss of availability. An attacker who can exploit a buffer \noverflow without triggering the stack-protector might be able to change \nprogram flow control to cause an uncontrolled loss of availability or to\n go further and affect confidentiality or integrity. NOTE: The GCC project argues that this is a missed hardening bug and not a vulnerability by itself.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.8      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [13.2.1_git20231014-r0]   |"
              },
              "properties": {
                "security-severity": "4.8"
              }
            },
            {
              "id": "CVE-2022-1705_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2022-1705] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "Acceptance of some invalid Transfer-Encoding headers in the HTTP/1 client in net/http before Go 1.17.12 and Go 1.18.4 allows HTTP request smuggling if combined with an intermediate server that also improperly fails to reject the header as invalid.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2021-41089_github.com/docker/docker_20.10.8+incompatible",
              "shortDescription": {
                "text": "[CVE-2021-41089] github.com/docker/docker 20.10.8+incompatible"
              },
              "help": {
                "text": "Moby is an open-source project created by Docker to enable software containerization. A bug was found in Moby (Docker Engine) where attempting to copy files using `docker cp` into a specially-crafted container can result in Unix file permission changes for existing files in the host’s filesystem, widening access to others. This bug does not directly allow files to be read, modified, or executed without an additional cooperating process. This bug has been fixed in Moby (Docker Engine) 20.10.9. Users should update to this version as soon as possible. Running containers do not need to be restarted.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.3      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [20.10.9]   |"
              },
              "properties": {
                "security-severity": "6.3"
              }
            },
            {
              "id": "CVE-2023-39319_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2023-39319] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "The html/template package does not apply the proper rules for handling occurrences of \"\u003cscript\", \"\u003c!--\", and \"\u003c/script\" within JS literals in \u003cscript\u003e contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2023-39319_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-39319] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "The html/template package does not apply the proper rules for handling occurrences of \"\u003cscript\", \"\u003c!--\", and \"\u003c/script\" within JS literals in \u003cscript\u003e contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2022-31030_github.com/containerd/containerd_1.5.7",
              "shortDescription": {
                "text": "[CVE-2022-31030] github.com/containerd/containerd 1.5.7"
              },
              "help": {
                "text": "containerd is an open source container runtime. A bug was found in the containerd's CRI implementation where programs inside a container can cause the containerd daemon to consume memory without bound during invocation of the `ExecSync` API. This can cause containerd to consume all available memory on the computer, denying service to other legitimate workloads. Kubernetes and crictl can both be configured to use containerd's CRI implementation; `ExecSync` may be used when running probes or when executing processes via an \"exec\" facility. This bug has been fixed in containerd 1.6.6 and 1.5.13. Users should update to these versions to resolve the issue. Users unable to upgrade should ensure that only trusted images and commands are used.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.5.13], [1.6.6]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2022-24769_github.com/docker/docker_20.10.8+incompatible",
              "shortDescription": {
                "text": "[CVE-2022-24769] github.com/docker/docker 20.10.8+incompatible"
              },
              "help": {
                "text": "Moby is an open-source project created by Docker to enable and accelerate software containerization. A bug was found in Moby (Docker Engine) prior to version 20.10.14 where containers were incorrectly started with non-empty inheritable Linux process capabilities, creating an atypical Linux environment and enabling programs with inheritable file capabilities to elevate those capabilities to the permitted set during `execve(2)`. Normally, when executable programs have specified permitted file capabilities, otherwise unprivileged users and processes can execute those programs and gain the specified file capabilities up to the bounding set. Due to this bug, containers which included executable programs with inheritable file capabilities allowed otherwise unprivileged users and processes to additionally gain these inheritable file capabilities up to the container's bounding set. Containers which use Linux users and groups to perform privilege separation inside the container are most directly impacted. This bug did not affect the container security sandbox as the inheritable set never contained more capabilities than were included in the container's bounding set. This bug has been fixed in Moby (Docker Engine) 20.10.14. Running containers should be stopped, deleted, and recreated for the inheritable capabilities to be reset. This fix changes Moby (Docker Engine) behavior such that containers are started with a more typical Linux environment. As a workaround, the entry point of a container can be modified to use a utility like `capsh(1)` to drop inheritable capabilities prior to the primary process starting.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [20.10.14]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-42365_3.16:ssl_client_1.35.0-r17",
              "shortDescription": {
                "text": "[CVE-2023-42365] 3.16:ssl_client 1.35.0-r17"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in BusyBox v.1.36.1 via a crafted awk pattern in the awk.c copyvar function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2021-41190_github.com/opencontainers/image-spec_1.0.1",
              "shortDescription": {
                "text": "[CVE-2021-41190] github.com/opencontainers/image-spec 1.0.1"
              },
              "help": {
                "text": "The OCI Distribution Spec project defines an API protocol to facilitate and standardize the distribution of content. In the OCI Distribution Specification version 1.0.0 and prior, the Content-Type header alone was used to determine the type of document during push and pull operations. Documents that contain both “manifests” and “layers” fields could be interpreted as either a manifest or an index in the absence of an accompanying Content-Type header. If a Content-Type header changed between two pulls of the same digest, a client may interpret the resulting content differently. The OCI Distribution Specification has been updated to require that a mediaType value present in a manifest or index match the Content-Type header used during the push and pull operations. Clients pulling from a registry may distrust the Content-Type header and reject an ambiguous document that contains both “manifests” and “layers” fields or “manifests” and “config” fields if they are unable to update to version 1.0.1 of the spec.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.0      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.0.2]   |"
              },
              "properties": {
                "security-severity": "5.0"
              }
            },
            {
              "id": "CVE-2023-39326_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2023-39326] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "A malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body. A malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request. Chunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-24532_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2023-24532] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "The ScalarMult and ScalarBaseMult methods of the P256 Curve may return an incorrect result if called with some specific unreduced scalars (a scalar larger than the order of the curve). This does not impact usages of crypto/ecdsa or crypto/ecdh.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.19.7], [1.20.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-4039_3.16:libgcc_11.2.1_git20220219-r2",
              "shortDescription": {
                "text": "[CVE-2023-4039] 3.16:libgcc 11.2.1_git20220219-r2"
              },
              "help": {
                "text": "**DISPUTED**A failure in the -fstack-protector feature in GCC-based toolchains \nthat target AArch64 allows an attacker to exploit an existing buffer \noverflow in dynamically-sized local variables in your application \nwithout this being detected. This stack-protector failure only applies \nto C99-style dynamically-sized local variables or those created using \nalloca(). The stack-protector operates as intended for statically-sized \nlocal variables.\n\nThe default behavior when the stack-protector \ndetects an overflow is to terminate your application, resulting in \ncontrolled loss of availability. An attacker who can exploit a buffer \noverflow without triggering the stack-protector might be able to change \nprogram flow control to cause an uncontrolled loss of availability or to\n go further and affect confidentiality or integrity. NOTE: The GCC project argues that this is a missed hardening bug and not a vulnerability by itself.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.8      | Not Covered       | `sha256__f7dd0a2c0f0fc91d94bad3b99dd86ebda4f3e2332f7d0c22bfd8d7e23972b331.tar `       | [13.2.1_git20231014-r0]   |"
              },
              "properties": {
                "security-severity": "4.8"
              }
            },
            {
              "id": "CVE-2023-3446_3.16:openssl_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-3446] 3.16:openssl 1.1.1u-r1"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. One of those\nchecks confirms that the modulus ('p' parameter) is not too large. Trying to use\na very large modulus is slow and OpenSSL will not normally use a modulus which\nis over 10,000 bits in length.\n\nHowever the DH_check() function checks numerous aspects of the key or parameters\nthat have been supplied. Some of those checks use the supplied modulus value\neven if it has already been found to be too large.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulernable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the '-check' option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.1.1u-r2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2024-0727_3.16:openssl_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2024-0727] 3.16:openssl 1.1.1u-r1"
              },
              "help": {
                "text": "Issue summary: Processing a maliciously formatted PKCS12 file may lead OpenSSL\nto crash leading to a potential Denial of Service attack\n\nImpact summary: Applications loading files in the PKCS12 format from untrusted\nsources might terminate abruptly.\n\nA file in PKCS12 format can contain certificates and keys and may come from an\nuntrusted source. The PKCS12 specification allows certain fields to be NULL, but\nOpenSSL does not correctly check for this case. This can lead to a NULL pointer\ndereference that results in OpenSSL crashing. If an application processes PKCS12\nfiles from an untrusted source using the OpenSSL APIs then that application will\nbe vulnerable to this issue.\n\nOpenSSL APIs that are vulnerable to this are: PKCS12_parse(),\nPKCS12_unpack_p7data(), PKCS12_unpack_p7encdata(), PKCS12_unpack_authsafes()\nand PKCS12_newpass().\n\nWe have also fixed a similar issue in SMIME_write_PKCS7(). However since this\nfunction is related to writing data we do not consider it security significant.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [3.1.4-r5]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-46218_3.16:curl_8.1.2-r0",
              "shortDescription": {
                "text": "[CVE-2023-46218] 3.16:curl 8.1.2-r0"
              },
              "help": {
                "text": "This flaw allows a malicious HTTP server to set \"super cookies\" in curl that\nare then passed back to more origins than what is otherwise allowed or\npossible. This allows a site to set cookies that then would get sent to\ndifferent and unrelated sites and domains.\n\nIt could do this by exploiting a mixed case flaw in curl's function that\nverifies a given cookie domain against the Public Suffix List (PSL). For\nexample a cookie could be set with `domain=co.UK` when the URL used a lower\ncase hostname `curl.co.uk`, even though `co.uk` is listed as a PSL domain.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [8.5.0-r0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-39318_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2023-39318] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "The html/template package does not properly handle HTML-like \"\" comment tokens, nor hashbang \"#!\" comment tokens, in \u003cscript\u003e contexts. This may cause the template parser to improperly interpret the contents of \u003cscript\u003e contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2022-4203_3.16:openssl_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2022-4203] 3.16:openssl 1.1.1u-r1"
              },
              "help": {
                "text": "A read buffer overrun can be triggered in X.509 certificate verification,\nspecifically in name constraint checking. Note that this occurs\nafter certificate chain signature verification and requires either a\nCA to have signed the malicious certificate or for the application to\ncontinue certificate verification despite failure to construct a path\nto a trusted issuer.\n\nThe read buffer overrun might result in a crash which could lead to\na denial of service attack. In theory it could also result in the disclosure\nof private memory contents (such as private keys, or sensitive plaintext)\nalthough we are not aware of any working exploit leading to memory\ncontents disclosure as of the time of release of this advisory.\n\nIn a TLS client, this can be triggered by connecting to a malicious\nserver. In a TLS server, this can be triggered if the server requests\nclient authentication and a malicious client connects.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.9      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "4.9"
              }
            },
            {
              "id": "CVE-2023-50246_3.16:jq_1.6-r1",
              "shortDescription": {
                "text": "[CVE-2023-50246] 3.16:jq 1.6-r1"
              },
              "help": {
                "text": "jq is a command-line JSON processor. Version 1.7 is vulnerable to heap-based buffer overflow. Version 1.7.1 contains a patch for this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42366_3.16:ssl_client_1.35.0-r17",
              "shortDescription": {
                "text": "[CVE-2023-42366] 3.16:ssl_client 1.35.0-r17"
              },
              "help": {
                "text": "A heap-buffer-overflow was discovered in BusyBox v.1.36.1 in the next_token function at awk.c:1159.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [1.35.0-r18]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2021-41091_github.com/docker/docker_20.10.8+incompatible",
              "shortDescription": {
                "text": "[CVE-2021-41091] github.com/docker/docker 20.10.8+incompatible"
              },
              "help": {
                "text": "Moby is an open-source project created by Docker to enable software containerization. A bug was found in Moby (Docker Engine) where the data directory (typically `/var/lib/docker`) contained subdirectories with insufficiently restricted permissions, allowing otherwise unprivileged Linux users to traverse directory contents and execute programs. When containers included executable programs with extended permission bits (such as `setuid`), unprivileged Linux users could discover and execute those programs. When the UID of an unprivileged Linux user on the host collided with the file owner or group inside a container, the unprivileged Linux user on the host could discover, read, and modify those files. This bug has been fixed in Moby (Docker Engine) 20.10.9. Users should update to this version as soon as possible. Running containers should be stopped and restarted for the permissions to be fixed. For users unable to upgrade limit access to the host to trusted users. Limit access to host volumes to trusted containers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.3      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [20.10.9]   |"
              },
              "properties": {
                "security-severity": "6.3"
              }
            },
            {
              "id": "CVE-2022-36111_github.com/codenotary/immudb_1.2.1",
              "shortDescription": {
                "text": "[CVE-2022-36111] github.com/codenotary/immudb 1.2.1"
              },
              "help": {
                "text": "immudb is a database with built-in cryptographic proof and verification. In versions prior to 1.4.1, a malicious immudb server can provide a falsified proof that will be accepted by the client SDK signing a falsified transaction replacing the genuine one. This situation can not be triggered by a genuine immudb server and requires the client to perform a specific list of verified operations resulting in acceptance of an invalid state value. This vulnerability only affects immudb client SDKs, the immudb server itself is not affected by this vulnerability. This issue has been patched in version 1.4.1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.4.1]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2024-0727_3.16:libssl1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2024-0727] 3.16:libssl1.1 1.1.1u-r1"
              },
              "help": {
                "text": "Issue summary: Processing a maliciously formatted PKCS12 file may lead OpenSSL\nto crash leading to a potential Denial of Service attack\n\nImpact summary: Applications loading files in the PKCS12 format from untrusted\nsources might terminate abruptly.\n\nA file in PKCS12 format can contain certificates and keys and may come from an\nuntrusted source. The PKCS12 specification allows certain fields to be NULL, but\nOpenSSL does not correctly check for this case. This can lead to a NULL pointer\ndereference that results in OpenSSL crashing. If an application processes PKCS12\nfiles from an untrusted source using the OpenSSL APIs then that application will\nbe vulnerable to this issue.\n\nOpenSSL APIs that are vulnerable to this are: PKCS12_parse(),\nPKCS12_unpack_p7data(), PKCS12_unpack_p7encdata(), PKCS12_unpack_authsafes()\nand PKCS12_newpass().\n\nWe have also fixed a similar issue in SMIME_write_PKCS7(). However since this\nfunction is related to writing data we do not consider it security significant.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [3.1.4-r5]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-43785_3.16:libx11_1.8-r1",
              "shortDescription": {
                "text": "[CVE-2023-43785] 3.16:libx11 1.8-r1"
              },
              "help": {
                "text": "A vulnerability was found in libX11 due to a boundary condition within the _XkbReadKeySyms() function. This flaw allows a local user to trigger an out-of-bounds read error and read the contents of memory on the system.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.8.7-r0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-45322_3.16:libxml2_2.9.14-r2",
              "shortDescription": {
                "text": "[CVE-2023-45322] 3.16:libxml2 2.9.14-r2"
              },
              "help": {
                "text": "libxml2 through 2.11.5 has a use-after-free that can only occur after a certain memory allocation fails. This occurs in xmlUnlinkNode in tree.c. NOTE: the vendor's position is \"I don't think these issues are critical enough to warrant a CVE ID ... because an attacker typically can't control when memory allocations fail.\"",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2021-3826_3.16:libstdc++_11.2.1_git20220219-r2",
              "shortDescription": {
                "text": "[CVE-2021-3826] 3.16:libstdc++ 11.2.1_git20220219-r2"
              },
              "help": {
                "text": "Heap/stack buffer overflow in the dlang_lname function in d-demangle.c in libiberty allows attackers to potentially cause a denial of service (segmentation fault and crash) via a crafted mangled symbol.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__f7dd0a2c0f0fc91d94bad3b99dd86ebda4f3e2332f7d0c22bfd8d7e23972b331.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2021-3826_3.16:libgcc_11.2.1_git20220219-r2",
              "shortDescription": {
                "text": "[CVE-2021-3826] 3.16:libgcc 11.2.1_git20220219-r2"
              },
              "help": {
                "text": "Heap/stack buffer overflow in the dlang_lname function in d-demangle.c in libiberty allows attackers to potentially cause a denial of service (segmentation fault and crash) via a crafted mangled symbol.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__f7dd0a2c0f0fc91d94bad3b99dd86ebda4f3e2332f7d0c22bfd8d7e23972b331.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2020-23903_3.16:speexdsp_1.2.0-r0",
              "shortDescription": {
                "text": "[CVE-2020-23903] 3.16:speexdsp 1.2.0-r0"
              },
              "help": {
                "text": "A Divide by Zero vulnerability in the function static int read_samples of Speex v1.2 allows attackers to cause a denial of service (DoS) via a crafted WAV file.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2020-23904_3.16:speexdsp_1.2.0-r0",
              "shortDescription": {
                "text": "[CVE-2020-23904] 3.16:speexdsp 1.2.0-r0"
              },
              "help": {
                "text": "A stack buffer overflow in speexenc.c of Speex v1.2 allows attackers to cause a denial of service (DoS) via a crafted WAV file. NOTE: the vendor states \"I cannot reproduce it\" and it \"is a demo program.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2009-3767_3.16:libssl1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2009-3767] 3.16:libssl1.1 1.1.1u-r1"
              },
              "help": {
                "text": "libraries/libldap/tls_o.c in OpenLDAP 2.2 and 2.4, and possibly other versions, when OpenSSL is used, does not properly handle a '\\0' character in a domain name in the subject's Common Name (CN) field of an X.509 certificate, which allows man-in-the-middle attackers to spoof arbitrary SSL servers via a crafted certificate issued by a legitimate Certification Authority, a related issue to CVE-2009-2408.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2009-3767_3.16:libcrypto1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2009-3767] 3.16:libcrypto1.1 1.1.1u-r1"
              },
              "help": {
                "text": "libraries/libldap/tls_o.c in OpenLDAP 2.2 and 2.4, and possibly other versions, when OpenSSL is used, does not properly handle a '\\0' character in a domain name in the subject's Common Name (CN) field of an X.509 certificate, which allows man-in-the-middle attackers to spoof arbitrary SSL servers via a crafted certificate issued by a legitimate Certification Authority, a related issue to CVE-2009-2408.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2009-3767_3.16:openssl_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2009-3767] 3.16:openssl 1.1.1u-r1"
              },
              "help": {
                "text": "libraries/libldap/tls_o.c in OpenLDAP 2.2 and 2.4, and possibly other versions, when OpenSSL is used, does not properly handle a '\\0' character in a domain name in the subject's Common Name (CN) field of an X.509 certificate, which allows man-in-the-middle attackers to spoof arbitrary SSL servers via a crafted certificate issued by a legitimate Certification Authority, a related issue to CVE-2009-2408.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2021-3826_3.16:libgomp_11.2.1_git20220219-r2",
              "shortDescription": {
                "text": "[CVE-2021-3826] 3.16:libgomp 11.2.1_git20220219-r2"
              },
              "help": {
                "text": "Heap/stack buffer overflow in the dlang_lname function in d-demangle.c in libiberty allows attackers to potentially cause a denial of service (segmentation fault and crash) via a crafted mangled symbol.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-38546_3.16:libcurl_8.1.2-r0",
              "shortDescription": {
                "text": "[CVE-2023-38546] 3.16:libcurl 8.1.2-r0"
              },
              "help": {
                "text": "This flaw allows an attacker to insert cookies at will into a running program\nusing libcurl, if the specific series of conditions are met.\n\nlibcurl performs transfers. In its API, an application creates \"easy handles\"\nthat are the individual handles for single transfers.\n\nlibcurl provides a function call that duplicates en easy handle called\n[curl_easy_duphandle](https://curl.se/libcurl/c/curl_easy_duphandle.html).\n\nIf a transfer has cookies enabled when the handle is duplicated, the\ncookie-enable state is also cloned - but without cloning the actual\ncookies. If the source handle did not read any cookies from a specific file on\ndisk, the cloned version of the handle would instead store the file name as\n`none` (using the four ASCII letters, no quotes).\n\nSubsequent use of the cloned handle that does not explicitly set a source to\nload cookies from would then inadvertently load cookies from a file named\n`none` - if such a file exists and is readable in the current directory of the\nprogram using libcurl. And if using the correct file format of course.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.7      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [8.4.0-r0]   |"
              },
              "properties": {
                "security-severity": "3.7"
              }
            },
            {
              "id": "CVE-2023-38546_3.16:curl_8.1.2-r0",
              "shortDescription": {
                "text": "[CVE-2023-38546] 3.16:curl 8.1.2-r0"
              },
              "help": {
                "text": "This flaw allows an attacker to insert cookies at will into a running program\nusing libcurl, if the specific series of conditions are met.\n\nlibcurl performs transfers. In its API, an application creates \"easy handles\"\nthat are the individual handles for single transfers.\n\nlibcurl provides a function call that duplicates en easy handle called\n[curl_easy_duphandle](https://curl.se/libcurl/c/curl_easy_duphandle.html).\n\nIf a transfer has cookies enabled when the handle is duplicated, the\ncookie-enable state is also cloned - but without cloning the actual\ncookies. If the source handle did not read any cookies from a specific file on\ndisk, the cloned version of the handle would instead store the file name as\n`none` (using the four ASCII letters, no quotes).\n\nSubsequent use of the cloned handle that does not explicitly set a source to\nload cookies from would then inadvertently load cookies from a file named\n`none` - if such a file exists and is readable in the current directory of the\nprogram using libcurl. And if using the correct file format of course.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.7      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [8.4.0-r0]   |"
              },
              "properties": {
                "security-severity": "3.7"
              }
            },
            {
              "id": "CVE-2022-30629_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2022-30629] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "Non-random values for ticket_age_add in session tickets in crypto/tls before Go 1.17.11 and Go 1.18.3 allow an attacker that can observe TLS handshakes to correlate successive connections by comparing ticket ages during session resumption.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.1      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "3.1"
              }
            },
            {
              "id": "CVE-2023-5752_pip_23.1.2",
              "shortDescription": {
                "text": "[CVE-2023-5752] pip 23.1.2"
              },
              "help": {
                "text": "When installing a package from a Mercurial VCS URL  (ie \"pip install \nhg+...\") with pip prior to v23.3, the specified Mercurial revision could\n be used to inject arbitrary configuration options to the \"hg clone\" \ncall (ie \"--config\"). Controlling the Mercurial configuration can modify\n how and which repository is installed. This vulnerability does not \naffect users who aren't installing from Mercurial.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.3      | Not Covered       | `sha256__e296f2063d3a369f84037e6741c3d8f30e7304c2f80c9e2f22e98a1928305953.tar `\u003cbr/\u003e`sha256__f7dd0a2c0f0fc91d94bad3b99dd86ebda4f3e2332f7d0c22bfd8d7e23972b331.tar `       | [23.3]   |"
              },
              "properties": {
                "security-severity": "3.3"
              }
            },
            {
              "id": "CVE-2023-50868_3.16:bind-tools_9.16.42-r0",
              "shortDescription": {
                "text": "[CVE-2023-50868] 3.16:bind-tools 9.16.42-r0"
              },
              "help": {
                "text": "The Closest Encloser Proof aspect of the DNS protocol (in RFC 5155 when RFC 9276 guidance is skipped) allows remote attackers to cause a denial of service (CPU consumption for SHA-1 computations) via DNSSEC responses in a random subdomain attack, aka the \"NSEC3\" issue. The RFC 5155 specification implies that an algorithm must perform thousands of iterations of a hash function in certain situations.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Undetermined       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [9.16.48-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-50868_3.16:bind-libs_9.16.42-r0",
              "shortDescription": {
                "text": "[CVE-2023-50868] 3.16:bind-libs 9.16.42-r0"
              },
              "help": {
                "text": "The Closest Encloser Proof aspect of the DNS protocol (in RFC 5155 when RFC 9276 guidance is skipped) allows remote attackers to cause a denial of service (CPU consumption for SHA-1 computations) via DNSSEC responses in a random subdomain attack, aka the \"NSEC3\" issue. The RFC 5155 specification implies that an algorithm must perform thousands of iterations of a hash function in certain situations.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Undetermined       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [9.16.48-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2004_3.16:libcurl_8.1.2-r0",
              "shortDescription": {
                "text": "[CVE-2024-2004] 3.16:libcurl 8.1.2-r0"
              },
              "help": {
                "text": "When a protocol selection parameter option disables all protocols without adding any then the default set of protocols would remain in the allowed set due to an error in the logic for removing protocols. The below command would perform a request to curl.se with a plaintext protocol which has been explicitly disabled.      curl --proto -all,-http http://curl.se  The flaw is only present if the set of selected protocols disables the entire set of available protocols, in itself a command with no practical use and therefore unlikely to be encountered in real situations. The curl security team has thus assessed this to be low severity bug.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [8.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2398_3.16:curl_8.1.2-r0",
              "shortDescription": {
                "text": "[CVE-2024-2398] 3.16:curl 8.1.2-r0"
              },
              "help": {
                "text": "When an application tells libcurl it wants to allow HTTP/2 server push, and the amount of received headers for the push surpasses the maximum allowed limit (1000), libcurl aborts the server push. When aborting, libcurl inadvertently does not free all the previously allocated headers and instead leaks the memory.  Further, this error condition fails silently and is therefore not easily detected by an application.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [8.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-34459_3.16:libxml2_2.9.14-r2",
              "shortDescription": {
                "text": "[CVE-2024-34459] 3.16:libxml2 2.9.14-r2"
              },
              "help": {
                "text": "An issue was discovered in xmllint (from libxml2) before 2.11.8 and 2.12.x before 2.12.7. Formatting error messages with xmllint --htmlout can result in a buffer over-read in xmlHTMLPrintFileContext in xmllint.c.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [2.12.7-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-28757_3.16:expat_2.5.0-r0",
              "shortDescription": {
                "text": "[CVE-2024-28757] 3.16:expat 2.5.0-r0"
              },
              "help": {
                "text": "libexpat through 2.6.1 allows an XML Entity Expansion attack when there is isolated use of external parsers (created via XML_ExternalEntityParserCreate).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__f7dd0a2c0f0fc91d94bad3b99dd86ebda4f3e2332f7d0c22bfd8d7e23972b331.tar `       | [2.6.2-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-1394_3.16:openssl_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2024-1394] 3.16:openssl 1.1.1u-r1"
              },
              "help": {
                "text": "A memory leak flaw was found in Golang in the RSA encrypting/decrypting code, which might lead to a resource exhaustion vulnerability using attacker-controlled inputs​. The memory leak happens in github.com/golang-fips/openssl/openssl/rsa.go#L113. The objects leaked are pkey​ and ctx​. That function uses named return parameters to free pkey​ and ctx​ if there is an error initializing the context or setting the different properties. All return statements related to error cases follow the \"return nil, nil, fail(...)\" pattern, meaning that pkey​ and ctx​ will be nil inside the deferred function that should free them.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [3.0.0-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2004_3.16:curl_8.1.2-r0",
              "shortDescription": {
                "text": "[CVE-2024-2004] 3.16:curl 8.1.2-r0"
              },
              "help": {
                "text": "When a protocol selection parameter option disables all protocols without adding any then the default set of protocols would remain in the allowed set due to an error in the logic for removing protocols. The below command would perform a request to curl.se with a plaintext protocol which has been explicitly disabled.      curl --proto -all,-http http://curl.se  The flaw is only present if the set of selected protocols disables the entire set of available protocols, in itself a command with no practical use and therefore unlikely to be encountered in real situations. The curl security team has thus assessed this to be low severity bug.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [8.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2398_3.16:libcurl_8.1.2-r0",
              "shortDescription": {
                "text": "[CVE-2024-2398] 3.16:libcurl 8.1.2-r0"
              },
              "help": {
                "text": "When an application tells libcurl it wants to allow HTTP/2 server push, and the amount of received headers for the push surpasses the maximum allowed limit (1000), libcurl aborts the server push. When aborting, libcurl inadvertently does not free all the previously allocated headers and instead leaks the memory.  Further, this error condition fails silently and is therefore not easily detected by an application.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [8.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2466_3.16:curl_8.1.2-r0",
              "shortDescription": {
                "text": "[CVE-2024-2466] 3.16:curl 8.1.2-r0"
              },
              "help": {
                "text": "libcurl did not check the server certificate of TLS connections done to a host specified as an IP address, when built to use mbedTLS.  libcurl would wrongly avoid using the set hostname function when the specified hostname was given as an IP address, therefore completely skipping the certificate check. This affects all uses of TLS protocols (HTTPS, FTPS, IMAPS, POPS3, SMTPS, etc).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [8.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-28085_3.16:libuuid_2.38-r1",
              "shortDescription": {
                "text": "[CVE-2024-28085] 3.16:libuuid 2.38-r1"
              },
              "help": {
                "text": "wall in util-linux through 2.40, often installed with setgid tty permissions, allows escape sequences to be sent to other users' terminals through argv. (Specifically, escape sequences received from stdin are blocked, but escape sequences received from argv are not blocked.) There may be plausible scenarios where this leads to account takeover.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__f7dd0a2c0f0fc91d94bad3b99dd86ebda4f3e2332f7d0c22bfd8d7e23972b331.tar `       | [2.40-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2379_3.16:curl_8.1.2-r0",
              "shortDescription": {
                "text": "[CVE-2024-2379] 3.16:curl 8.1.2-r0"
              },
              "help": {
                "text": "libcurl skips the certificate verification for a QUIC connection under certain conditions, when built to use wolfSSL. If told to use an unknown/bad cipher or curve, the error path accidentally skips the verification and returns OK, thus ignoring any certificate problems.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [8.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-4603_3.16:libssl1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2024-4603] 3.16:libssl1.1 1.1.1u-r1"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DSA keys or parameters may be very\nslow.\n\nImpact summary: Applications that use the functions EVP_PKEY_param_check()\nor EVP_PKEY_public_check() to check a DSA public key or DSA parameters may\nexperience long delays. Where the key or parameters that are being checked\nhave been obtained from an untrusted source this may lead to a Denial of\nService.\n\nThe functions EVP_PKEY_param_check() or EVP_PKEY_public_check() perform\nvarious checks on DSA parameters. Some of those computations take a long time\nif the modulus (`p` parameter) is too large.\n\nTrying to use a very large modulus is slow and OpenSSL will not allow using\npublic keys with a modulus which is over 10,000 bits in length for signature\nverification. However the key and parameter check functions do not limit\nthe modulus size when performing the checks.\n\nAn application that calls EVP_PKEY_param_check() or EVP_PKEY_public_check()\nand supplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nThese functions are not called by OpenSSL itself on untrusted DSA keys so\nonly applications that directly call these functions may be vulnerable.\n\nAlso vulnerable are the OpenSSL pkey and pkeyparam command line applications\nwhen using the `-check` option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [3.3.0-r2]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2511_3.16:openssl_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2024-2511] 3.16:openssl 1.1.1u-r1"
              },
              "help": {
                "text": "Issue summary: Some non-default TLS server configurations can cause unbounded\nmemory growth when processing TLSv1.3 sessions\n\nImpact summary: An attacker may exploit certain server configurations to trigger\nunbounded memory growth that would lead to a Denial of Service\n\nThis problem can occur in TLSv1.3 if the non-default SSL_OP_NO_TICKET option is\nbeing used (but not if early_data support is also configured and the default\nanti-replay protection is in use). In this case, under certain conditions, the\nsession cache can get into an incorrect state and it will fail to flush properly\nas it fills. The session cache will continue to grow in an unbounded manner. A\nmalicious client could deliberately create the scenario for this failure to\nforce a Denial of Service. It may also happen by accident in normal operation.\n\nThis issue only affects TLS servers supporting TLSv1.3. It does not affect TLS\nclients.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue. OpenSSL\n1.0.2 is also not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [3.2.1-r2]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-32020_3.16:git_2.36.6-r0",
              "shortDescription": {
                "text": "[CVE-2024-32020] 3.16:git 2.36.6-r0"
              },
              "help": {
                "text": "Git is a revision control system. Prior to versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4, local clones may end up hardlinking files into the target repository's object database when source and target repository reside on the same disk. If the source repository is owned by a different user, then those hardlinked files may be rewritten at any point in time by the untrusted user. Cloning local repositories will cause Git to either copy or hardlink files of the source repository into the target repository. This significantly speeds up such local clones compared to doing a \"proper\" clone and saves both disk space and compute time. When cloning a repository located on the same disk that is owned by a different user than the current user we also end up creating such hardlinks. These files will continue to be owned and controlled by the potentially-untrusted user and can be rewritten by them at will in the future. The problem has been patched in versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [2.45.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-4603_3.16:openssl_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2024-4603] 3.16:openssl 1.1.1u-r1"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DSA keys or parameters may be very\nslow.\n\nImpact summary: Applications that use the functions EVP_PKEY_param_check()\nor EVP_PKEY_public_check() to check a DSA public key or DSA parameters may\nexperience long delays. Where the key or parameters that are being checked\nhave been obtained from an untrusted source this may lead to a Denial of\nService.\n\nThe functions EVP_PKEY_param_check() or EVP_PKEY_public_check() perform\nvarious checks on DSA parameters. Some of those computations take a long time\nif the modulus (`p` parameter) is too large.\n\nTrying to use a very large modulus is slow and OpenSSL will not allow using\npublic keys with a modulus which is over 10,000 bits in length for signature\nverification. However the key and parameter check functions do not limit\nthe modulus size when performing the checks.\n\nAn application that calls EVP_PKEY_param_check() or EVP_PKEY_public_check()\nand supplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nThese functions are not called by OpenSSL itself on untrusted DSA keys so\nonly applications that directly call these functions may be vulnerable.\n\nAlso vulnerable are the OpenSSL pkey and pkeyparam command line applications\nwhen using the `-check` option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [3.3.0-r2]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-1394_3.16:libssl1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2024-1394] 3.16:libssl1.1 1.1.1u-r1"
              },
              "help": {
                "text": "A memory leak flaw was found in Golang in the RSA encrypting/decrypting code, which might lead to a resource exhaustion vulnerability using attacker-controlled inputs​. The memory leak happens in github.com/golang-fips/openssl/openssl/rsa.go#L113. The objects leaked are pkey​ and ctx​. That function uses named return parameters to free pkey​ and ctx​ if there is an error initializing the context or setting the different properties. All return statements related to error cases follow the \"return nil, nil, fail(...)\" pattern, meaning that pkey​ and ctx​ will be nil inside the deferred function that should free them.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [3.0.0-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-6237_3.16:openssl_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-6237] 3.16:openssl 1.1.1u-r1"
              },
              "help": {
                "text": "Issue summary: Checking excessively long invalid RSA public keys may take\na long time.\n\nImpact summary: Applications that use the function EVP_PKEY_public_check()\nto check RSA public keys may experience long delays. Where the key that\nis being checked has been obtained from an untrusted source this may lead\nto a Denial of Service.\n\nWhen function EVP_PKEY_public_check() is called on RSA public keys,\na computation is done to confirm that the RSA modulus, n, is composite.\nFor valid RSA keys, n is a product of two or more large primes and this\ncomputation completes quickly. However, if n is an overly large prime,\nthen this computation would take a long time.\n\nAn application that calls EVP_PKEY_public_check() and supplies an RSA key\nobtained from an untrusted source could be vulnerable to a Denial of Service\nattack.\n\nThe function EVP_PKEY_public_check() is not called from other OpenSSL\nfunctions however it is called from the OpenSSL pkey command line\napplication. For that reason that application is also vulnerable if used\nwith the '-pubin' and '-check' options on untrusted data.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [3.1.4-r4]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-4603_3.16:libcrypto1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2024-4603] 3.16:libcrypto1.1 1.1.1u-r1"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DSA keys or parameters may be very\nslow.\n\nImpact summary: Applications that use the functions EVP_PKEY_param_check()\nor EVP_PKEY_public_check() to check a DSA public key or DSA parameters may\nexperience long delays. Where the key or parameters that are being checked\nhave been obtained from an untrusted source this may lead to a Denial of\nService.\n\nThe functions EVP_PKEY_param_check() or EVP_PKEY_public_check() perform\nvarious checks on DSA parameters. Some of those computations take a long time\nif the modulus (`p` parameter) is too large.\n\nTrying to use a very large modulus is slow and OpenSSL will not allow using\npublic keys with a modulus which is over 10,000 bits in length for signature\nverification. However the key and parameter check functions do not limit\nthe modulus size when performing the checks.\n\nAn application that calls EVP_PKEY_param_check() or EVP_PKEY_public_check()\nand supplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nThese functions are not called by OpenSSL itself on untrusted DSA keys so\nonly applications that directly call these functions may be vulnerable.\n\nAlso vulnerable are the OpenSSL pkey and pkeyparam command line applications\nwhen using the `-check` option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [3.3.0-r2]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2022-3554_3.16:libx11_1.8-r1",
              "shortDescription": {
                "text": "[CVE-2022-3554] 3.16:libx11 1.8-r1"
              },
              "help": {
                "text": "A vulnerability has been found in X.org libX11 and classified as problematic. This vulnerability affects the function _XimRegisterIMInstantiateCallback of the file modules/im/ximcp/imsClbk.c. The manipulation leads to memory leak. It is recommended to apply a patch to fix this issue. VDB-211054 is the identifier assigned to this vulnerability.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.8.7-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2379_3.16:libcurl_8.1.2-r0",
              "shortDescription": {
                "text": "[CVE-2024-2379] 3.16:libcurl 8.1.2-r0"
              },
              "help": {
                "text": "libcurl skips the certificate verification for a QUIC connection under certain conditions, when built to use wolfSSL. If told to use an unknown/bad cipher or curve, the error path accidentally skips the verification and returns OK, thus ignoring any certificate problems.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [8.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-32465_3.16:git_2.36.6-r0",
              "shortDescription": {
                "text": "[CVE-2024-32465] 3.16:git 2.36.6-r0"
              },
              "help": {
                "text": "Git is a revision control system. The Git project recommends to avoid working in untrusted repositories, and instead to clone it first with `git clone --no-local` to obtain a clean copy. Git has specific protections to make that a safe operation even with an untrusted source repository, but vulnerabilities allow those protections to be bypassed. In the context of cloning local repositories owned by other users, this vulnerability has been covered in CVE-2024-32004. But there are circumstances where the fixes for CVE-2024-32004 are not enough: For example, when obtaining a `.zip` file containing a full copy of a Git repository, it should not be trusted by default to be safe, as e.g. hooks could be configured to run within the context of that repository. The problem has been patched in versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4. As a workaround, avoid using Git in repositories that have been obtained via archives from untrusted sources.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [2.45.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2511_3.16:libssl1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2024-2511] 3.16:libssl1.1 1.1.1u-r1"
              },
              "help": {
                "text": "Issue summary: Some non-default TLS server configurations can cause unbounded\nmemory growth when processing TLSv1.3 sessions\n\nImpact summary: An attacker may exploit certain server configurations to trigger\nunbounded memory growth that would lead to a Denial of Service\n\nThis problem can occur in TLSv1.3 if the non-default SSL_OP_NO_TICKET option is\nbeing used (but not if early_data support is also configured and the default\nanti-replay protection is in use). In this case, under certain conditions, the\nsession cache can get into an incorrect state and it will fail to flush properly\nas it fills. The session cache will continue to grow in an unbounded manner. A\nmalicious client could deliberately create the scenario for this failure to\nforce a Denial of Service. It may also happen by accident in normal operation.\n\nThis issue only affects TLS servers supporting TLSv1.3. It does not affect TLS\nclients.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue. OpenSSL\n1.0.2 is also not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [3.2.1-r2]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2466_3.16:libcurl_8.1.2-r0",
              "shortDescription": {
                "text": "[CVE-2024-2466] 3.16:libcurl 8.1.2-r0"
              },
              "help": {
                "text": "libcurl did not check the server certificate of TLS connections done to a host specified as an IP address, when built to use mbedTLS.  libcurl would wrongly avoid using the set hostname function when the specified hostname was given as an IP address, therefore completely skipping the certificate check. This affects all uses of TLS protocols (HTTPS, FTPS, IMAPS, POPS3, SMTPS, etc).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [8.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2511_3.16:libcrypto1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2024-2511] 3.16:libcrypto1.1 1.1.1u-r1"
              },
              "help": {
                "text": "Issue summary: Some non-default TLS server configurations can cause unbounded\nmemory growth when processing TLSv1.3 sessions\n\nImpact summary: An attacker may exploit certain server configurations to trigger\nunbounded memory growth that would lead to a Denial of Service\n\nThis problem can occur in TLSv1.3 if the non-default SSL_OP_NO_TICKET option is\nbeing used (but not if early_data support is also configured and the default\nanti-replay protection is in use). In this case, under certain conditions, the\nsession cache can get into an incorrect state and it will fail to flush properly\nas it fills. The session cache will continue to grow in an unbounded manner. A\nmalicious client could deliberately create the scenario for this failure to\nforce a Denial of Service. It may also happen by accident in normal operation.\n\nThis issue only affects TLS servers supporting TLSv1.3. It does not affect TLS\nclients.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue. OpenSSL\n1.0.2 is also not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [3.2.1-r2]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-6237_3.16:libcrypto1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-6237] 3.16:libcrypto1.1 1.1.1u-r1"
              },
              "help": {
                "text": "Issue summary: Checking excessively long invalid RSA public keys may take\na long time.\n\nImpact summary: Applications that use the function EVP_PKEY_public_check()\nto check RSA public keys may experience long delays. Where the key that\nis being checked has been obtained from an untrusted source this may lead\nto a Denial of Service.\n\nWhen function EVP_PKEY_public_check() is called on RSA public keys,\na computation is done to confirm that the RSA modulus, n, is composite.\nFor valid RSA keys, n is a product of two or more large primes and this\ncomputation completes quickly. However, if n is an overly large prime,\nthen this computation would take a long time.\n\nAn application that calls EVP_PKEY_public_check() and supplies an RSA key\nobtained from an untrusted source could be vulnerable to a Denial of Service\nattack.\n\nThe function EVP_PKEY_public_check() is not called from other OpenSSL\nfunctions however it is called from the OpenSSL pkey command line\napplication. For that reason that application is also vulnerable if used\nwith the '-pubin' and '-check' options on untrusted data.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [3.1.4-r4]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-6237_3.16:libssl1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-6237] 3.16:libssl1.1 1.1.1u-r1"
              },
              "help": {
                "text": "Issue summary: Checking excessively long invalid RSA public keys may take\na long time.\n\nImpact summary: Applications that use the function EVP_PKEY_public_check()\nto check RSA public keys may experience long delays. Where the key that\nis being checked has been obtained from an untrusted source this may lead\nto a Denial of Service.\n\nWhen function EVP_PKEY_public_check() is called on RSA public keys,\na computation is done to confirm that the RSA modulus, n, is composite.\nFor valid RSA keys, n is a product of two or more large primes and this\ncomputation completes quickly. However, if n is an overly large prime,\nthen this computation would take a long time.\n\nAn application that calls EVP_PKEY_public_check() and supplies an RSA key\nobtained from an untrusted source could be vulnerable to a Denial of Service\nattack.\n\nThe function EVP_PKEY_public_check() is not called from other OpenSSL\nfunctions however it is called from the OpenSSL pkey command line\napplication. For that reason that application is also vulnerable if used\nwith the '-pubin' and '-check' options on untrusted data.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [3.1.4-r4]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-28085_3.16:libblkid_2.38-r1",
              "shortDescription": {
                "text": "[CVE-2024-28085] 3.16:libblkid 2.38-r1"
              },
              "help": {
                "text": "wall in util-linux through 2.40, often installed with setgid tty permissions, allows escape sequences to be sent to other users' terminals through argv. (Specifically, escape sequences received from stdin are blocked, but escape sequences received from argv are not blocked.) There may be plausible scenarios where this leads to account takeover.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [2.40-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-1394_3.16:libcrypto1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2024-1394] 3.16:libcrypto1.1 1.1.1u-r1"
              },
              "help": {
                "text": "A memory leak flaw was found in Golang in the RSA encrypting/decrypting code, which might lead to a resource exhaustion vulnerability using attacker-controlled inputs​. The memory leak happens in github.com/golang-fips/openssl/openssl/rsa.go#L113. The objects leaked are pkey​ and ctx​. That function uses named return parameters to free pkey​ and ctx​ if there is an error initializing the context or setting the different properties. All return statements related to error cases follow the \"return nil, nil, fail(...)\" pattern, meaning that pkey​ and ctx​ will be nil inside the deferred function that should free them.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [3.0.0-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-32021_3.16:git_2.36.6-r0",
              "shortDescription": {
                "text": "[CVE-2024-32021] 3.16:git 2.36.6-r0"
              },
              "help": {
                "text": "Git is a revision control system. Prior to versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4, when cloning a local source repository that contains symlinks via the filesystem, Git may create hardlinks to arbitrary user-readable files on the same filesystem as the target repository in the `objects/` directory. Cloning a local repository over the filesystem may creating hardlinks to arbitrary user-owned files on the same filesystem in the target Git repository's `objects/` directory. When cloning a repository over the filesystem (without explicitly specifying the `file://` protocol or `--no-local`), the optimizations for local cloning\nwill be used, which include attempting to hard link the object files instead of copying them. While the code includes checks against symbolic links in the source repository, which were added during the fix for CVE-2022-39253, these checks can still be raced because the hard link operation ultimately follows symlinks. If the object on the filesystem appears as a file during the check, and then a symlink during the operation, this will allow the adversary to bypass the check and create hardlinks in the destination objects directory to arbitrary, user-readable files. The problem has been patched in versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [2.45.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-37920_certifi_2023.5.7",
              "shortDescription": {
                "text": "[CVE-2023-37920] certifi 2023.5.7"
              },
              "help": {
                "text": "Certifi is a curated collection of Root Certificates for validating the trustworthiness of SSL certificates while verifying the identity of TLS hosts. Certifi prior to version 2023.07.22 recognizes \"e-Tugra\" root certificates. e-Tugra's root certificates were subject to an investigation prompted by reporting of security issues in their systems. Certifi 2023.07.22 removes root certificates from \"e-Tugra\" from the root store.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar `       | [2023.7.22]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29402_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-29402] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "The go command may generate unexpected code at build time when using cgo. This may result in unexpected behavior when running a go program which uses cgo. This may occur when running an untrusted module which contains directories with newline characters in their names. Modules which are retrieved using the go command, i.e. via \"go get\", are not affected (modules retrieved using GOPATH-mode, i.e. GO111MODULE=off, may be affected).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29405_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2023-29405] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. Flags containing embedded spaces are mishandled, allowing disallowed flags to be smuggled through the LDFLAGS sanitization by including them in the argument of another flag. This only affects usage of the gccgo compiler.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29404_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2023-29404] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. The arguments for a number of flags which are non-optional are incorrectly considered optional, allowing disallowed flags to be smuggled through the LDFLAGS sanitization. This affects usage of both the gc and gccgo compilers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2024-32002_3.16:git_2.36.6-r0",
              "shortDescription": {
                "text": "[CVE-2024-32002] 3.16:git 2.36.6-r0"
              },
              "help": {
                "text": "Git is a revision control system. Prior to versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4, repositories with submodules can be crafted in a way that exploits a bug in Git whereby it can be fooled into writing files not into the submodule's worktree but into a `.git/` directory. This allows writing a hook that will be executed while the clone operation is still running, giving the user no opportunity to inspect the code that is being executed. The problem has been patched in versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4. If symbolic link support is disabled in Git (e.g. via `git config --global core.symlinks false`), the described attack won't work. As always, it is best to avoid cloning repositories from untrusted sources.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.0      | Not Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [2.45.1-r0]   |"
              },
              "properties": {
                "security-severity": "9.0"
              }
            },
            {
              "id": "CVE-2023-29402_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2023-29402] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "The go command may generate unexpected code at build time when using cgo. This may result in unexpected behavior when running a go program which uses cgo. This may occur when running an untrusted module which contains directories with newline characters in their names. Modules which are retrieved using the go command, i.e. via \"go get\", are not affected (modules retrieved using GOPATH-mode, i.e. GO111MODULE=off, may be affected).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2021-38297_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2021-38297] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "Go before 1.16.9 and 1.17.x before 1.17.2 has a Buffer Overflow via large arguments in a function invocation from a WASM module, when GOARCH=wasm GOOS=js is used.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.16.9], [1.17.2]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-38545_3.16:libcurl_8.1.2-r0",
              "shortDescription": {
                "text": "[CVE-2023-38545] 3.16:libcurl 8.1.2-r0"
              },
              "help": {
                "text": "This flaw makes curl overflow a heap based buffer in the SOCKS5 proxy\nhandshake.\n\nWhen curl is asked to pass along the host name to the SOCKS5 proxy to allow\nthat to resolve the address instead of it getting done by curl itself, the\nmaximum length that host name can be is 255 bytes.\n\nIf the host name is detected to be longer, curl switches to local name\nresolving and instead passes on the resolved address only. Due to this bug,\nthe local variable that means \"let the host resolve the name\" could get the\nwrong value during a slow SOCKS5 handshake, and contrary to the intention,\ncopy the too long host name to the target buffer instead of copying just the\nresolved address there.\n\nThe target buffer being a heap based buffer, and the host name coming from the\nURL that curl has been told to operate with.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [8.4.0-r0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29404_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-29404] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. The arguments for a number of flags which are non-optional are incorrectly considered optional, allowing disallowed flags to be smuggled through the LDFLAGS sanitization. This affects usage of both the gc and gccgo compilers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29405_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-29405] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. Flags containing embedded spaces are mishandled, allowing disallowed flags to be smuggled through the LDFLAGS sanitization by including them in the argument of another flag. This only affects usage of the gccgo compiler.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-38545_3.16:curl_8.1.2-r0",
              "shortDescription": {
                "text": "[CVE-2023-38545] 3.16:curl 8.1.2-r0"
              },
              "help": {
                "text": "This flaw makes curl overflow a heap based buffer in the SOCKS5 proxy\nhandshake.\n\nWhen curl is asked to pass along the host name to the SOCKS5 proxy to allow\nthat to resolve the address instead of it getting done by curl itself, the\nmaximum length that host name can be is 255 bytes.\n\nIf the host name is detected to be longer, curl switches to local name\nresolving and instead passes on the resolved address only. Due to this bug,\nthe local variable that means \"let the host resolve the name\" could get the\nwrong value during a slow SOCKS5 handshake, and contrary to the intention,\ncopy the too long host name to the target buffer instead of copying just the\nresolved address there.\n\nThe target buffer being a heap based buffer, and the host name coming from the\nURL that curl has been told to operate with.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [8.4.0-r0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-49210_3.16:libssl1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-49210] 3.16:libssl1.1 1.1.1u-r1"
              },
              "help": {
                "text": "The openssl (aka node-openssl) NPM package through 2.0.0 was characterized as \"a nonsense wrapper with no real purpose\" by its author, and accepts an opts argument that contains a verb field (used for command execution). NOTE: This vulnerability only affects products that are no longer supported by the maintainer.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-49210_3.16:libcrypto1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-49210] 3.16:libcrypto1.1 1.1.1u-r1"
              },
              "help": {
                "text": "The openssl (aka node-openssl) NPM package through 2.0.0 was characterized as \"a nonsense wrapper with no real purpose\" by its author, and accepts an opts argument that contains a verb field (used for command execution). NOTE: This vulnerability only affects products that are no longer supported by the maintainer.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-5363_3.16:libssl1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-5363] 3.16:libssl1.1 1.1.1u-r1"
              },
              "help": {
                "text": "Issue summary: A bug has been identified in the processing of key and\ninitialisation vector (IV) lengths.  This can lead to potential truncation\nor overruns during the initialisation of some symmetric ciphers.\n\nImpact summary: A truncation in the IV can result in non-uniqueness,\nwhich could result in loss of confidentiality for some cipher modes.\n\nWhen calling EVP_EncryptInit_ex2(), EVP_DecryptInit_ex2() or\nEVP_CipherInit_ex2() the provided OSSL_PARAM array is processed after\nthe key and IV have been established.  Any alterations to the key length,\nvia the \"keylen\" parameter or the IV length, via the \"ivlen\" parameter,\nwithin the OSSL_PARAM array will not take effect as intended, potentially\ncausing truncation or overreading of these values.  The following ciphers\nand cipher modes are impacted: RC2, RC4, RC5, CCM, GCM and OCB.\n\nFor the CCM, GCM and OCB cipher modes, truncation of the IV can result in\nloss of confidentiality.  For example, when following NIST's SP 800-38D\nsection 8.2.1 guidance for constructing a deterministic IV for AES in\nGCM mode, truncation of the counter portion could lead to IV reuse.\n\nBoth truncations and overruns of the key and overruns of the IV will\nproduce incorrect results and could, in some cases, trigger a memory\nexception.  However, these issues are not currently assessed as security\ncritical.\n\nChanging the key and/or IV lengths is not considered to be a common operation\nand the vulnerable API was recently introduced. Furthermore it is likely that\napplication developers will have spotted this problem during testing since\ndecryption would fail unless both peers in the communication were similarly\nvulnerable. For these reasons we expect the probability of an application being\nvulnerable to this to be quite low. However if an application is vulnerable then\nthis issue is considered very serious. For these reasons we have assessed this\nissue as Moderate severity overall.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [3.1.4-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-27664_golang.org/x/net_0.0.0-20211011170408-caeb26a5c8c0",
              "shortDescription": {
                "text": "[CVE-2022-27664] golang.org/x/net 0.0.0-20211011170408-caeb26a5c8c0"
              },
              "help": {
                "text": "In net/http in Go before 1.18.6 and 1.19.x before 1.19.1, attackers can cause a denial of service because an HTTP/2 connection can hang during closing if shutdown were preempted by a fatal error.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [0.0.0-20220906165146-f3363e06e74c]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-52425_3.16:expat_2.5.0-r0",
              "shortDescription": {
                "text": "[CVE-2023-52425] 3.16:expat 2.5.0-r0"
              },
              "help": {
                "text": "libexpat through 2.5.0 allows a denial of service (resource consumption) because many full reparsings are required in the case of a large token for which multiple buffer fills are needed.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__f7dd0a2c0f0fc91d94bad3b99dd86ebda4f3e2332f7d0c22bfd8d7e23972b331.tar `       | [2.6.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-29403_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-29403] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "On Unix platforms, the Go runtime does not behave differently when a binary is run with the setuid/setgid bits. This can be dangerous in certain cases, such as when dumping memory state, or assuming the status of standard i/o file descriptors. If a setuid/setgid binary is executed with standard I/O file descriptors closed, opening any files can result in unexpected content being read or written with elevated privileges. Similarly, if a setuid/setgid program is terminated, either via panic or signal, it may leak the contents of its registers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2023-39325_golang.org/x/net_0.0.0-20211011170408-caeb26a5c8c0",
              "shortDescription": {
                "text": "[CVE-2023-39325] golang.org/x/net 0.0.0-20211011170408-caeb26a5c8c0"
              },
              "help": {
                "text": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing. With the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection. This issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2. The default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-38325_cryptography_41.0.1",
              "shortDescription": {
                "text": "[CVE-2023-38325] cryptography 41.0.1"
              },
              "help": {
                "text": "The cryptography package before 41.0.2 for Python mishandles SSH certificates that have critical options.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar `       | [41.0.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30634_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2022-30634] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "Infinite loop in Read in crypto/rand before Go 1.17.11 and Go 1.18.3 on Windows allows attacker to cause an indefinite hang by passing a buffer larger than 1 \u003c\u003c 32 - 1 bytes.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0217_3.16:openssl_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-0217] 3.16:openssl 1.1.1u-r1"
              },
              "help": {
                "text": "An invalid pointer dereference on read can be triggered when an\napplication tries to check a malformed DSA public key by the\nEVP_PKEY_public_check() function. This will most likely lead\nto an application crash. This function can be called on public\nkeys supplied from untrusted sources which could allow an attacker\nto cause a denial of service attack.\n\nThe TLS implementation in OpenSSL does not call this function\nbut applications might call the function if there are additional\nsecurity requirements imposed by standards such as FIPS 140-3.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41716_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2022-41716] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "Due to unsanitized NUL values, attackers may be able to maliciously set environment variables on Windows. In syscall.StartProcess and os/exec.Cmd, invalid environment variable values containing NUL values are not properly checked for. A malicious environment variable value can exploit this behavior to set a value for a different environment variable. For example, the environment variable string \"A=B\\x00C=D\" sets the variables \"A=B\" and \"C=D\".",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.18.8], [1.19.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0216_3.16:openssl_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-0216] 3.16:openssl 1.1.1u-r1"
              },
              "help": {
                "text": "An invalid pointer dereference on read can be triggered when an\napplication tries to load malformed PKCS7 data with the\nd2i_PKCS7(), d2i_PKCS7_bio() or d2i_PKCS7_fp() functions.\n\nThe result of the dereference is an application crash which could\nlead to a denial of service attack. The TLS implementation in OpenSSL\ndoes not call this function however third party applications might\ncall these functions on untrusted data.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41724_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2022-41724] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "Large handshake records may cause panics in crypto/tls. Both clients and servers may send large TLS handshake records which cause servers and clients, respectively, to panic when attempting to construct responses. This affects all TLS 1.3 clients, TLS 1.2 clients which explicitly enable session resumption (by setting Config.ClientSessionCache to a non-nil value), and TLS 1.3 servers which request client certificates (by setting Config.ClientAuth \u003e= RequestClientCert).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41720_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2022-41720] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "On Windows, restricted files can be accessed via os.DirFS and http.Dir. The os.DirFS function and http.Dir type provide access to a tree of files rooted at a given directory. These functions permit access to Windows device files under that root. For example, os.DirFS(\"C:/tmp\").Open(\"COM1\") opens the COM1 device. Both os.DirFS and http.Dir only provide read-only filesystem access. In addition, on Windows, an os.DirFS for the directory (the root of the current drive) can permit a maliciously crafted path to escape from the drive and access any path on the system. With fix applied, the behavior of os.DirFS(\"\") has changed. Previously, an empty root was treated equivalently to \"/\", so os.DirFS(\"\").Open(\"tmp\") would open the path \"/tmp\". This now returns an error.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.18.9], [1.19.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-7104_3.16:sqlite-libs_3.40.1-r0",
              "shortDescription": {
                "text": "[CVE-2023-7104] 3.16:sqlite-libs 3.40.1-r0"
              },
              "help": {
                "text": "A vulnerability was found in SQLite SQLite3 up to 3.43.0 and classified as critical. This issue affects the function sessionReadRecord of the file ext/session/sqlite3session.c of the component make alltest Handler. The manipulation leads to heap-based buffer overflow. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-248999.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.3      | Not Applicable       | `sha256__f7dd0a2c0f0fc91d94bad3b99dd86ebda4f3e2332f7d0c22bfd8d7e23972b331.tar `       | [3.40.1-r1]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2022-27191_golang.org/x/crypto_0.0.0-20201221181555-eec23a3978ad",
              "shortDescription": {
                "text": "[CVE-2022-27191] golang.org/x/crypto 0.0.0-20201221181555-eec23a3978ad"
              },
              "help": {
                "text": "The golang.org/x/crypto/ssh package before 0.0.0-20220314234659-1baeb1ce4c0b for Go allows an attacker to crash a server in certain circumstances involving AddHostKey.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [0.0.0-20220314234659-1baeb1ce4c0b]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45285_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2023-45285] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "Using go get to fetch a module with the \".git\" suffix may unexpectedly fallback to the insecure \"git://\" protocol if the module is unavailable via the secure \"https://\" and \"git+ssh://\" protocols, even if GOINSECURE is not set for said module. This only affects users who are not using the module proxy and are fetching modules directly (i.e. GOPROXY=off).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-39323_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-39323] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "Line directives (\"//line\") can be used to bypass the restrictions on \"//go:cgo_\" directives, allowing blocked linker and compiler flags to be passed during compilation. This can result in unexpected execution of arbitrary code when running \"go build\". The line directive requires the absolute path of the file in which the directive lives, which makes exploiting this issue significantly more complex.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.20.9], [1.21.2]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2022-41720_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2022-41720] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "On Windows, restricted files can be accessed via os.DirFS and http.Dir. The os.DirFS function and http.Dir type provide access to a tree of files rooted at a given directory. These functions permit access to Windows device files under that root. For example, os.DirFS(\"C:/tmp\").Open(\"COM1\") opens the COM1 device. Both os.DirFS and http.Dir only provide read-only filesystem access. In addition, on Windows, an os.DirFS for the directory (the root of the current drive) can permit a maliciously crafted path to escape from the drive and access any path on the system. With fix applied, the behavior of os.DirFS(\"\") has changed. Previously, an empty root was treated equivalently to \"/\", so os.DirFS(\"\").Open(\"tmp\") would open the path \"/tmp\". This now returns an error.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.18.9], [1.19.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-23772_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2022-23772] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "Rat.SetString in math/big in Go before 1.16.14 and 1.17.x before 1.17.7 has an overflow that can lead to Uncontrolled Memory Consumption.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.16.14], [1.17.7]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0217_3.16:libcrypto1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-0217] 3.16:libcrypto1.1 1.1.1u-r1"
              },
              "help": {
                "text": "An invalid pointer dereference on read can be triggered when an\napplication tries to check a malformed DSA public key by the\nEVP_PKEY_public_check() function. This will most likely lead\nto an application crash. This function can be called on public\nkeys supplied from untrusted sources which could allow an attacker\nto cause a denial of service attack.\n\nThe TLS implementation in OpenSSL does not call this function\nbut applications might call the function if there are additional\nsecurity requirements imposed by standards such as FIPS 140-3.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-29403_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2023-29403] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "On Unix platforms, the Go runtime does not behave differently when a binary is run with the setuid/setgid bits. This can be dangerous in certain cases, such as when dumping memory state, or assuming the status of standard i/o file descriptors. If a setuid/setgid binary is executed with standard I/O file descriptors closed, opening any files can result in unexpected content being read or written with elevated privileges. Similarly, if a setuid/setgid program is terminated, either via panic or signal, it may leak the contents of its registers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2024-26130_cryptography_41.0.1",
              "shortDescription": {
                "text": "[CVE-2024-26130] cryptography 41.0.1"
              },
              "help": {
                "text": "cryptography is a package designed to expose cryptographic primitives and recipes to Python developers. Starting in version 38.0.0 and prior to version 42.0.4, if `pkcs12.serialize_key_and_certificates` is called with both a certificate whose public key did not match the provided private key and an `encryption_algorithm` with `hmac_hash` set (via `PrivateFormat.PKCS12.encryption_builder().hmac_hash(...)`, then a NULL pointer dereference would occur, crashing the Python process. This has been resolved in version 42.0.4, the first version in which a `ValueError` is properly raised.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar `       | [42.0.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-32149_golang.org/x/text_0.3.7",
              "shortDescription": {
                "text": "[CVE-2022-32149] golang.org/x/text 0.3.7"
              },
              "help": {
                "text": "An attacker may cause a denial of service by crafting an Accept-Language header which ParseAcceptLanguage will take significant time to parse.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [0.3.8]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41716_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2022-41716] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "Due to unsanitized NUL values, attackers may be able to maliciously set environment variables on Windows. In syscall.StartProcess and os/exec.Cmd, invalid environment variable values containing NUL values are not properly checked for. A malicious environment variable value can exploit this behavior to set a value for a different environment variable. For example, the environment variable string \"A=B\\x00C=D\" sets the variables \"A=B\" and \"C=D\".",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.18.8], [1.19.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30580_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2022-30580] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "Code injection in Cmd.Start in os/exec before Go 1.17.11 and Go 1.18.3 allows execution of any binaries in the working directory named either \"..com\" or \"..exe\" by calling Cmd.Run, Cmd.Start, Cmd.Output, or Cmd.CombinedOutput when Cmd.Path is unset.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2016-7798_3.16:libssl1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2016-7798] 3.16:libssl1.1 1.1.1u-r1"
              },
              "help": {
                "text": "The openssl gem for Ruby uses the same initialization vector (IV) in GCM Mode (aes-*-gcm) when the IV is set before the key, which makes it easier for context-dependent attackers to bypass the encryption protection mechanism.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [3.0.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45283_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2023-45283] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "The filepath package does not recognize paths with a \\??\\ prefix as special. On Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x. Before fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b. Similarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b. In addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name. UPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.20.11], [1.20.12], [1.21.4], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-4807_cryptography_41.0.1",
              "shortDescription": {
                "text": "[CVE-2023-4807] cryptography 41.0.1"
              },
              "help": {
                "text": "Issue summary: The POLY1305 MAC (message authentication code) implementation\ncontains a bug that might corrupt the internal state of applications on the\nWindows 64 platform when running on newer X86_64 processors supporting the\nAVX512-IFMA instructions.\n\nImpact summary: If in an application that uses the OpenSSL library an attacker\ncan influence whether the POLY1305 MAC algorithm is used, the application\nstate might be corrupted with various application dependent consequences.\n\nThe POLY1305 MAC (message authentication code) implementation in OpenSSL does\nnot save the contents of non-volatile XMM registers on Windows 64 platform\nwhen calculating the MAC of data larger than 64 bytes. Before returning to\nthe caller all the XMM registers are set to zero rather than restoring their\nprevious content. The vulnerable code is used only on newer x86_64 processors\nsupporting the AVX512-IFMA instructions.\n\nThe consequences of this kind of internal application state corruption can\nbe various - from no consequences, if the calling application does not\ndepend on the contents of non-volatile XMM registers at all, to the worst\nconsequences, where the attacker could get complete control of the application\nprocess. However given the contents of the registers are just zeroized so\nthe attacker cannot put arbitrary values inside, the most likely consequence,\nif any, would be an incorrect result of some application dependent\ncalculations or a crash leading to a denial of service.\n\nThe POLY1305 MAC algorithm is most frequently used as part of the\nCHACHA20-POLY1305 AEAD (authenticated encryption with associated data)\nalgorithm. The most common usage of this AEAD cipher is with TLS protocol\nversions 1.2 and 1.3 and a malicious client can influence whether this AEAD\ncipher is used by the server. This implies that server applications using\nOpenSSL can be potentially impacted. However we are currently not aware of\nany concrete application that would be affected by this issue therefore we\nconsider this a Low severity security issue.\n\n...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Applicable       | `sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar `       | [41.0.4]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2023-45283_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-45283] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "The filepath package does not recognize paths with a \\??\\ prefix as special. On Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x. Before fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b. Similarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b. In addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name. UPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.20.11], [1.20.12], [1.21.4], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0401_3.16:openssl_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-0401] 3.16:openssl 1.1.1u-r1"
              },
              "help": {
                "text": "A NULL pointer can be dereferenced when signatures are being\nverified on PKCS7 signed or signedAndEnveloped data. In case the hash\nalgorithm used for the signature is known to the OpenSSL library but\nthe implementation of the hash algorithm is not available the digest\ninitialization will fail. There is a missing check for the return\nvalue from the initialization function which later leads to invalid\nusage of the digest API most likely leading to a crash.\n\nThe unavailability of an algorithm can be caused by using FIPS\nenabled configuration of providers or more commonly by not loading\nthe legacy provider.\n\nPKCS7 data is processed by the SMIME library calls and also by the\ntime stamp (TS) library calls. The TLS implementation in OpenSSL does\nnot call these functions however third party applications would be\naffected if they call these functions to verify signatures on untrusted\ndata.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45285_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-45285] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "Using go get to fetch a module with the \".git\" suffix may unexpectedly fallback to the insecure \"git://\" protocol if the module is unavailable via the secure \"https://\" and \"git+ssh://\" protocols, even if GOINSECURE is not set for said module. This only affects users who are not using the module proxy and are fetching modules directly (i.e. GOPROXY=off).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-2880_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2022-2880] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "Requests forwarded by ReverseProxy include the raw query parameters from the inbound request, including unparsable parameters rejected by net/http. This could permit query parameter smuggling when a Go proxy forwards a parameter with an unparsable value. After fix, ReverseProxy sanitizes the query parameters in the forwarded query when the outbound request's Form field is set after the ReverseProxy. Director function returns, indicating that the proxy has parsed the query parameters. Proxies which do not parse query parameters continue to forward the original query parameters unchanged.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.18.7], [1.19.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41722_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2022-41722] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "A path traversal vulnerability exists in filepath.Clean on Windows. On Windows, the filepath.Clean function could transform an invalid path such as \"a/../c:/b\" into the valid path \"c:\\b\". This transformation of a relative (if invalid) path into an absolute path could enable a directory traversal attack. After fix, the filepath.Clean function transforms this path into the relative (but still invalid) path \".\\c:\\b\".",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2016-7798_3.16:libcrypto1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2016-7798] 3.16:libcrypto1.1 1.1.1u-r1"
              },
              "help": {
                "text": "The openssl gem for Ruby uses the same initialization vector (IV) in GCM Mode (aes-*-gcm) when the IV is set before the key, which makes it easier for context-dependent attackers to bypass the encryption protection mechanism.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [3.0.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30635_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2022-30635] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "Uncontrolled recursion in Decoder.Decode in encoding/gob before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a message which contains deeply nested structures.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-32189_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2022-32189] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "A too-short encoded message can cause a panic in Float.GobDecode and Rat GobDecode in math/big in Go before 1.17.13 and 1.18.5, potentially allowing a denial of service.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.17.13], [1.18.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-29804_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2022-29804] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "Incorrect conversion of certain invalid paths to valid, absolute paths in Clean in path/filepath before Go 1.17.11 and Go 1.18.3 on Windows allows potential directory traversal attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-41772_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2021-41772] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "Go before 1.16.10 and 1.17.x before 1.17.3 allows an archive/zip Reader.Open panic via a crafted ZIP archive containing an invalid name or an empty filename field.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.16.10], [1.17.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-35945_3.16:nghttp2-libs_1.47.0-r0",
              "shortDescription": {
                "text": "[CVE-2023-35945] 3.16:nghttp2-libs 1.47.0-r0"
              },
              "help": {
                "text": "Envoy is a cloud-native high-performance edge/middle/service proxy. Envoy’s HTTP/2 codec may leak a header map and bookkeeping structures upon receiving `RST_STREAM` immediately followed by the `GOAWAY` frames from an upstream server. In nghttp2, cleanup of pending requests due to receipt of the `GOAWAY` frame skips de-allocation of the bookkeeping structure and pending compressed header. The error return [code path] is taken if connection is already marked for not sending more requests due to `GOAWAY` frame. The clean-up code is right after the return statement, causing memory leak. Denial of service through memory exhaustion. This vulnerability was patched in versions(s) 1.26.3, 1.25.8, 1.24.9, 1.23.11.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.47.0-r1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-50782_cryptography_41.0.1",
              "shortDescription": {
                "text": "[CVE-2023-50782] cryptography 41.0.1"
              },
              "help": {
                "text": "A flaw was found in the python-cryptography package. This issue may allow a remote attacker to decrypt captured messages in TLS servers that use RSA key exchanges, which may lead to exposure of confidential or sensitive data.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar `       | [42.0.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-5363_3.16:openssl_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-5363] 3.16:openssl 1.1.1u-r1"
              },
              "help": {
                "text": "Issue summary: A bug has been identified in the processing of key and\ninitialisation vector (IV) lengths.  This can lead to potential truncation\nor overruns during the initialisation of some symmetric ciphers.\n\nImpact summary: A truncation in the IV can result in non-uniqueness,\nwhich could result in loss of confidentiality for some cipher modes.\n\nWhen calling EVP_EncryptInit_ex2(), EVP_DecryptInit_ex2() or\nEVP_CipherInit_ex2() the provided OSSL_PARAM array is processed after\nthe key and IV have been established.  Any alterations to the key length,\nvia the \"keylen\" parameter or the IV length, via the \"ivlen\" parameter,\nwithin the OSSL_PARAM array will not take effect as intended, potentially\ncausing truncation or overreading of these values.  The following ciphers\nand cipher modes are impacted: RC2, RC4, RC5, CCM, GCM and OCB.\n\nFor the CCM, GCM and OCB cipher modes, truncation of the IV can result in\nloss of confidentiality.  For example, when following NIST's SP 800-38D\nsection 8.2.1 guidance for constructing a deterministic IV for AES in\nGCM mode, truncation of the counter portion could lead to IV reuse.\n\nBoth truncations and overruns of the key and overruns of the IV will\nproduce incorrect results and could, in some cases, trigger a memory\nexception.  However, these issues are not currently assessed as security\ncritical.\n\nChanging the key and/or IV lengths is not considered to be a common operation\nand the vulnerable API was recently introduced. Furthermore it is likely that\napplication developers will have spotted this problem during testing since\ndecryption would fail unless both peers in the communication were similarly\nvulnerable. For these reasons we expect the probability of an application being\nvulnerable to this to be quite low. However if an application is vulnerable then\nthis issue is considered very serious. For these reasons we have assessed this\nissue as Moderate severity overall.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [3.1.4-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-23773_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2022-23773] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "cmd/go in Go before 1.16.14 and 1.17.x before 1.17.7 can misinterpret branch names that falsely appear to be version tags. This can lead to incorrect access control if an actor is supposed to be able to create branches but not tags.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.16.14], [1.17.7]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41724_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2022-41724] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "Large handshake records may cause panics in crypto/tls. Both clients and servers may send large TLS handshake records which cause servers and clients, respectively, to panic when attempting to construct responses. This affects all TLS 1.3 clients, TLS 1.2 clients which explicitly enable session resumption (by setting Config.ClientSessionCache to a non-nil value), and TLS 1.3 servers which request client certificates (by setting Config.ClientAuth \u003e= RequestClientCert).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-27191_golang.org/x/crypto_0.0.0-20210817164053-32db794688a5",
              "shortDescription": {
                "text": "[CVE-2022-27191] golang.org/x/crypto 0.0.0-20210817164053-32db794688a5"
              },
              "help": {
                "text": "The golang.org/x/crypto/ssh package before 0.0.0-20220314234659-1baeb1ce4c0b for Go allows an attacker to crash a server in certain circumstances involving AddHostKey.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [0.0.0-20220314234659-1baeb1ce4c0b]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-43787_3.16:libx11_1.8-r1",
              "shortDescription": {
                "text": "[CVE-2023-43787] 3.16:libx11 1.8-r1"
              },
              "help": {
                "text": "A vulnerability was found in libX11 due to an integer overflow within the XCreateImage() function. This flaw allows a local user to trigger an integer overflow and execute arbitrary code with elevated privileges.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.8.7-r0]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2022-30630_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2022-30630] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "Uncontrolled recursion in Glob in io/fs before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a path which contains a large number of path separators.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2024-25062_3.16:libxml2_2.9.14-r2",
              "shortDescription": {
                "text": "[CVE-2024-25062] 3.16:libxml2 2.9.14-r2"
              },
              "help": {
                "text": "An issue was discovered in libxml2 before 2.11.7 and 2.12.x before 2.12.5. When using the XML Reader interface with DTD validation and XInclude expansion enabled, processing crafted XML documents can lead to an xmlValidatePopElement use-after-free.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [2.12.5-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-39323_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2023-39323] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "Line directives (\"//line\") can be used to bypass the restrictions on \"//go:cgo_\" directives, allowing blocked linker and compiler flags to be passed during compilation. This can result in unexpected execution of arbitrary code when running \"go build\". The line directive requires the absolute path of the file in which the directive lives, which makes exploiting this issue significantly more complex.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.20.9], [1.21.2]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2023-0216_3.16:libcrypto1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-0216] 3.16:libcrypto1.1 1.1.1u-r1"
              },
              "help": {
                "text": "An invalid pointer dereference on read can be triggered when an\napplication tries to load malformed PKCS7 data with the\nd2i_PKCS7(), d2i_PKCS7_bio() or d2i_PKCS7_fp() functions.\n\nThe result of the dereference is an application crash which could\nlead to a denial of service attack. The TLS implementation in OpenSSL\ndoes not call this function however third party applications might\ncall these functions on untrusted data.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0217_3.16:libssl1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-0217] 3.16:libssl1.1 1.1.1u-r1"
              },
              "help": {
                "text": "An invalid pointer dereference on read can be triggered when an\napplication tries to check a malformed DSA public key by the\nEVP_PKEY_public_check() function. This will most likely lead\nto an application crash. This function can be called on public\nkeys supplied from untrusted sources which could allow an attacker\nto cause a denial of service attack.\n\nThe TLS implementation in OpenSSL does not call this function\nbut applications might call the function if there are additional\nsecurity requirements imposed by standards such as FIPS 140-3.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0401_3.16:libcrypto1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-0401] 3.16:libcrypto1.1 1.1.1u-r1"
              },
              "help": {
                "text": "A NULL pointer can be dereferenced when signatures are being\nverified on PKCS7 signed or signedAndEnveloped data. In case the hash\nalgorithm used for the signature is known to the OpenSSL library but\nthe implementation of the hash algorithm is not available the digest\ninitialization will fail. There is a missing check for the return\nvalue from the initialization function which later leads to invalid\nusage of the digest API most likely leading to a crash.\n\nThe unavailability of an algorithm can be caused by using FIPS\nenabled configuration of providers or more commonly by not loading\nthe legacy provider.\n\nPKCS7 data is processed by the SMIME library calls and also by the\ntime stamp (TS) library calls. The TLS implementation in OpenSSL does\nnot call these functions however third party applications would be\naffected if they call these functions to verify signatures on untrusted\ndata.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0216_3.16:libssl1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-0216] 3.16:libssl1.1 1.1.1u-r1"
              },
              "help": {
                "text": "An invalid pointer dereference on read can be triggered when an\napplication tries to load malformed PKCS7 data with the\nd2i_PKCS7(), d2i_PKCS7_bio() or d2i_PKCS7_fp() functions.\n\nThe result of the dereference is an application crash which could\nlead to a denial of service attack. The TLS implementation in OpenSSL\ndoes not call this function however third party applications might\ncall these functions on untrusted data.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-25173_github.com/containerd/containerd_1.5.7",
              "shortDescription": {
                "text": "[CVE-2023-25173] github.com/containerd/containerd 1.5.7"
              },
              "help": {
                "text": "containerd is an open source container runtime. A bug was found in containerd prior to versions 1.6.18 and 1.5.18 where supplementary groups are not set up properly inside a container. If an attacker has direct access to a container and manipulates their supplementary group access, they may be able to use supplementary group access to bypass primary group restrictions in some cases, potentially gaining access to sensitive information or gaining the ability to execute code in that container. Downstream applications that use the containerd client library may be affected as well.\n\nThis bug has been fixed in containerd v1.6.18 and v.1.5.18. Users should update to these versions and recreate containers to resolve this issue. Users who rely on a downstream application that uses containerd's client library should check that application for a separate advisory and instructions. As a workaround, ensure that the `\"USER $USERNAME\"` Dockerfile instruction is not used. Instead, set the container entrypoint to a value similar to `ENTRYPOINT [\"su\", \"-\", \"user\"]` to allow `su` to properly set up supplementary groups.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.5.18], [1.6.18]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2023-49083_cryptography_41.0.1",
              "shortDescription": {
                "text": "[CVE-2023-49083] cryptography 41.0.1"
              },
              "help": {
                "text": "cryptography is a package designed to expose cryptographic primitives and recipes to Python developers. Calling `load_pem_pkcs7_certificates` or `load_der_pkcs7_certificates` could lead to a NULL-pointer dereference and segfault. Exploitation of this vulnerability poses a serious risk of Denial of Service (DoS) for any application attempting to deserialize a PKCS7 blob/certificate. The consequences extend to potential disruptions in system availability and stability. This vulnerability has been patched in version 41.0.6.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar `       | [41.0.6]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0401_3.16:libssl1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-0401] 3.16:libssl1.1 1.1.1u-r1"
              },
              "help": {
                "text": "A NULL pointer can be dereferenced when signatures are being\nverified on PKCS7 signed or signedAndEnveloped data. In case the hash\nalgorithm used for the signature is known to the OpenSSL library but\nthe implementation of the hash algorithm is not available the digest\ninitialization will fail. There is a missing check for the return\nvalue from the initialization function which later leads to invalid\nusage of the digest API most likely leading to a crash.\n\nThe unavailability of an algorithm can be caused by using FIPS\nenabled configuration of providers or more commonly by not loading\nthe legacy provider.\n\nPKCS7 data is processed by the SMIME library calls and also by the\ntime stamp (TS) library calls. The TLS implementation in OpenSSL does\nnot call these functions however third party applications would be\naffected if they call these functions to verify signatures on untrusted\ndata.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41409_3.16:pcre2_10.40-r0",
              "shortDescription": {
                "text": "[CVE-2022-41409] 3.16:pcre2 10.40-r0"
              },
              "help": {
                "text": "Integer overflow vulnerability in pcre2test before 10.41 allows attackers to cause a denial of service or other unspecified impacts via negative input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [10.42-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2016-7798_3.16:openssl_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2016-7798] 3.16:openssl 1.1.1u-r1"
              },
              "help": {
                "text": "The openssl gem for Ruby uses the same initialization vector (IV) in GCM Mode (aes-*-gcm) when the IV is set before the key, which makes it easier for context-dependent attackers to bypass the encryption protection mechanism.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [3.0.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-43804_urllib3_2.0.3",
              "shortDescription": {
                "text": "[CVE-2023-43804] urllib3 2.0.3"
              },
              "help": {
                "text": "urllib3 is a user-friendly HTTP client library for Python. urllib3 doesn't treat the `Cookie` HTTP header special or provide any helpers for managing cookies over HTTP, that is the responsibility of the user. However, it is possible for a user to specify a `Cookie` header and unknowingly leak information via HTTP redirects to a different origin if that user doesn't disable redirects explicitly. This issue has been patched in urllib3 version 1.26.17 or 2.0.5.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Applicable       | `sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar `       | [1.26.17], [2.0.6]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2024-23334_aiohttp_3.8.4",
              "shortDescription": {
                "text": "[CVE-2024-23334] aiohttp 3.8.4"
              },
              "help": {
                "text": "aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. When using aiohttp as a web server and configuring static routes, it is necessary to specify the root path for static files. Additionally, the option 'follow_symlinks' can be used to determine whether to follow symbolic links outside the static root directory. When 'follow_symlinks' is set to True, there is no validation to check if reading a file is within the root directory. This can lead to directory traversal vulnerabilities, resulting in unauthorized access to arbitrary files on the system, even when symlinks are not present.  Disabling follow_symlinks and using a reverse proxy are encouraged mitigations.  Version 3.9.2 fixes this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar `       | [3.9.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-44487_google.golang.org/grpc_1.43.0",
              "shortDescription": {
                "text": "[CVE-2023-44487] google.golang.org/grpc 1.43.0"
              },
              "help": {
                "text": "The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.56.3], [1.57.1], [1.58.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-44487_3.16:nghttp2-libs_1.47.0-r0",
              "shortDescription": {
                "text": "[CVE-2023-44487] 3.16:nghttp2-libs 1.47.0-r0"
              },
              "help": {
                "text": "The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.47.0-r2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-44487_golang.org/x/net_0.0.0-20211011170408-caeb26a5c8c0",
              "shortDescription": {
                "text": "[CVE-2023-44487] golang.org/x/net 0.0.0-20211011170408-caeb26a5c8c0"
              },
              "help": {
                "text": "The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-5363_3.16:libcrypto1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-5363] 3.16:libcrypto1.1 1.1.1u-r1"
              },
              "help": {
                "text": "Issue summary: A bug has been identified in the processing of key and\ninitialisation vector (IV) lengths.  This can lead to potential truncation\nor overruns during the initialisation of some symmetric ciphers.\n\nImpact summary: A truncation in the IV can result in non-uniqueness,\nwhich could result in loss of confidentiality for some cipher modes.\n\nWhen calling EVP_EncryptInit_ex2(), EVP_DecryptInit_ex2() or\nEVP_CipherInit_ex2() the provided OSSL_PARAM array is processed after\nthe key and IV have been established.  Any alterations to the key length,\nvia the \"keylen\" parameter or the IV length, via the \"ivlen\" parameter,\nwithin the OSSL_PARAM array will not take effect as intended, potentially\ncausing truncation or overreading of these values.  The following ciphers\nand cipher modes are impacted: RC2, RC4, RC5, CCM, GCM and OCB.\n\nFor the CCM, GCM and OCB cipher modes, truncation of the IV can result in\nloss of confidentiality.  For example, when following NIST's SP 800-38D\nsection 8.2.1 guidance for constructing a deterministic IV for AES in\nGCM mode, truncation of the counter portion could lead to IV reuse.\n\nBoth truncations and overruns of the key and overruns of the IV will\nproduce incorrect results and could, in some cases, trigger a memory\nexception.  However, these issues are not currently assessed as security\ncritical.\n\nChanging the key and/or IV lengths is not considered to be a common operation\nand the vulnerable API was recently introduced. Furthermore it is likely that\napplication developers will have spotted this problem during testing since\ndecryption would fail unless both peers in the communication were similarly\nvulnerable. For these reasons we expect the probability of an application being\nvulnerable to this to be quite low. However if an application is vulnerable then\nthis issue is considered very serious. For these reasons we have assessed this\nissue as Moderate severity overall.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [3.1.4-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41722_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2022-41722] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "A path traversal vulnerability exists in filepath.Clean on Windows. On Windows, the filepath.Clean function could transform an invalid path such as \"a/../c:/b\" into the valid path \"c:\\b\". This transformation of a relative (if invalid) path into an absolute path could enable a directory traversal attack. After fix, the filepath.Clean function transforms this path into the relative (but still invalid) path \".\\c:\\b\".",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2024-24806_3.16:libuv_1.44.1-r0",
              "shortDescription": {
                "text": "[CVE-2024-24806] 3.16:libuv 1.44.1-r0"
              },
              "help": {
                "text": "libuv is a multi-platform support library with a focus on asynchronous I/O. The `uv_getaddrinfo` function in `src/unix/getaddrinfo.c` (and its windows counterpart `src/win/getaddrinfo.c`), truncates hostnames to 256 characters before calling `getaddrinfo`. This behavior can be exploited to create addresses like `0x00007f000001`, which are considered valid by `getaddrinfo` and could allow an attacker to craft payloads that resolve to unintended IP addresses, bypassing developer checks. The vulnerability arises due to how the `hostname_ascii` variable (with a length of 256 bytes) is handled in `uv_getaddrinfo` and subsequently in `uv__idna_toascii`. When the hostname exceeds 256 characters, it gets truncated without a terminating null byte. As a result attackers may be able to access internal APIs or for websites (similar to MySpace) that allows users to have `username.example.com` pages. Internal services that crawl or cache these user pages can be exposed to SSRF attacks if a malicious user chooses a long vulnerable username. This issue has been addressed in release version 1.48.0. Users are advised to upgrade. There are no known workarounds for this vulnerability.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.3      | Not Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.48.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2022-4899_3.16:zstd-libs_1.5.2-r1",
              "shortDescription": {
                "text": "[CVE-2022-4899] 3.16:zstd-libs 1.5.2-r1"
              },
              "help": {
                "text": "A vulnerability was found in zstd v1.4.10, where an attacker can supply empty string as an argument to the command line tool to cause buffer overrun.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-49082_aiohttp_3.8.4",
              "shortDescription": {
                "text": "[CVE-2023-49082] aiohttp 3.8.4"
              },
              "help": {
                "text": "aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. Improper validation makes it possible for an attacker to modify the HTTP request (e.g. insert a new header) or even create a new HTTP request if the attacker controls the HTTP method. The vulnerability occurs only if the attacker can control the HTTP method (GET, POST etc.) of the request. If the attacker can control the HTTP version of the request it will be able to modify the request (request smuggling). This issue has been patched in version 3.9.0.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar `       | [3.9.0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-25153_github.com/containerd/containerd_1.5.7",
              "shortDescription": {
                "text": "[CVE-2023-25153] github.com/containerd/containerd 1.5.7"
              },
              "help": {
                "text": "containerd is an open source container runtime. Before versions 1.6.18 and 1.5.18, when importing an OCI image, there was no limit on the number of bytes read for certain files. A maliciously crafted image with a large file where a limit was not applied could cause a denial of service. This bug has been fixed in containerd 1.6.18 and 1.5.18.  Users should update to these versions to resolve the issue. As a workaround, ensure that only trusted images are used and that only trusted users have permissions to import images.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.5.18], [1.6.18]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2022-40897_setuptools_65.5.0",
              "shortDescription": {
                "text": "[CVE-2022-40897] setuptools 65.5.0"
              },
              "help": {
                "text": "Python Packaging Authority (PyPA) setuptools before 65.5.1 allows remote attackers to cause a denial of service via HTML in a crafted package or custom PackageIndex page. There is a Regular Expression Denial of Service (ReDoS) in package_index.py.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Applicable       | `sha256__f7dd0a2c0f0fc91d94bad3b99dd86ebda4f3e2332f7d0c22bfd8d7e23972b331.tar `       | [65.5.1]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-45288_github.com/golang/go_1.17.1",
              "shortDescription": {
                "text": "[CVE-2023-45288] github.com/golang/go 1.17.1"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar `       | [1.21.9], [1.22.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-45288_golang.org/x/net_0.0.0-20211011170408-caeb26a5c8c0",
              "shortDescription": {
                "text": "[CVE-2023-45288] golang.org/x/net 0.0.0-20211011170408-caeb26a5c8c0"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [0.23.0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-45288_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-45288] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [1.21.9], [1.22.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-0466_3.16:openssl_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-0466] 3.16:openssl 1.1.1u-r1"
              },
              "help": {
                "text": "The function X509_VERIFY_PARAM_add0_policy() is documented to\nimplicitly enable the certificate policy check when doing certificate\nverification. However the implementation of the function does not\nenable the check which allows certificates with invalid or incorrect\npolicies to pass the certificate verification.\n\nAs suddenly enabling the policy check could break existing deployments it was\ndecided to keep the existing behavior of the X509_VERIFY_PARAM_add0_policy()\nfunction.\n\nInstead the applications that require OpenSSL to perform certificate\npolicy check need to use X509_VERIFY_PARAM_set1_policies() or explicitly\nenable the policy check by calling X509_VERIFY_PARAM_set_flags() with\nthe X509_V_FLAG_POLICY_CHECK flag argument.\n\nCertificate policy checks are disabled by default in OpenSSL and are not\ncommonly used by applications.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [3.0.8-r3]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-0466_3.16:libssl1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-0466] 3.16:libssl1.1 1.1.1u-r1"
              },
              "help": {
                "text": "The function X509_VERIFY_PARAM_add0_policy() is documented to\nimplicitly enable the certificate policy check when doing certificate\nverification. However the implementation of the function does not\nenable the check which allows certificates with invalid or incorrect\npolicies to pass the certificate verification.\n\nAs suddenly enabling the policy check could break existing deployments it was\ndecided to keep the existing behavior of the X509_VERIFY_PARAM_add0_policy()\nfunction.\n\nInstead the applications that require OpenSSL to perform certificate\npolicy check need to use X509_VERIFY_PARAM_set1_policies() or explicitly\nenable the policy check by calling X509_VERIFY_PARAM_set_flags() with\nthe X509_V_FLAG_POLICY_CHECK flag argument.\n\nCertificate policy checks are disabled by default in OpenSSL and are not\ncommonly used by applications.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [3.0.8-r3]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-41717_golang.org/x/net_0.0.0-20211011170408-caeb26a5c8c0",
              "shortDescription": {
                "text": "[CVE-2022-41717] golang.org/x/net 0.0.0-20211011170408-caeb26a5c8c0"
              },
              "help": {
                "text": "An attacker can cause excessive memory growth in a Go server accepting HTTP/2 requests. HTTP/2 server connections contain a cache of HTTP header keys sent by the client. While the total number of entries in this cache is capped, an attacker sending very large keys can cause the server to allocate approximately 64 MiB per open connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [0.4.0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-3978_golang.org/x/net_0.0.0-20211011170408-caeb26a5c8c0",
              "shortDescription": {
                "text": "[CVE-2023-3978] golang.org/x/net 0.0.0-20211011170408-caeb26a5c8c0"
              },
              "help": {
                "text": "Text nodes not in the HTML namespace are incorrectly literally rendered, causing text which should be escaped to not be. This could lead to an XSS attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [0.13.0]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2022-29526_golang.org/x/sys_0.0.0-20211216021012-1d35b9e2eb4e",
              "shortDescription": {
                "text": "[CVE-2022-29526] golang.org/x/sys 0.0.0-20211216021012-1d35b9e2eb4e"
              },
              "help": {
                "text": "Go before 1.17.10 and 1.18.x before 1.18.2 has Incorrect Privilege Assignment. When called with a non-zero flags parameter, the Faccessat function could incorrectly report that a file is accessible.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [0.0.0-20220412211240-33da011f77ad]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-0466_3.16:libcrypto1.1_1.1.1u-r1",
              "shortDescription": {
                "text": "[CVE-2023-0466] 3.16:libcrypto1.1 1.1.1u-r1"
              },
              "help": {
                "text": "The function X509_VERIFY_PARAM_add0_policy() is documented to\nimplicitly enable the certificate policy check when doing certificate\nverification. However the implementation of the function does not\nenable the check which allows certificates with invalid or incorrect\npolicies to pass the certificate verification.\n\nAs suddenly enabling the policy check could break existing deployments it was\ndecided to keep the existing behavior of the X509_VERIFY_PARAM_add0_policy()\nfunction.\n\nInstead the applications that require OpenSSL to perform certificate\npolicy check need to use X509_VERIFY_PARAM_set1_policies() or explicitly\nenable the policy check by calling X509_VERIFY_PARAM_set_flags() with\nthe X509_V_FLAG_POLICY_CHECK flag argument.\n\nCertificate policy checks are disabled by default in OpenSSL and are not\ncommonly used by applications.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar `       | [3.0.8-r3]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-49081_aiohttp_3.8.4",
              "shortDescription": {
                "text": "[CVE-2023-49081] aiohttp 3.8.4"
              },
              "help": {
                "text": "aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. Improper validation made it possible for an attacker to modify the HTTP request (e.g. to insert a new header) or create a new HTTP request if the attacker controls the HTTP version. The vulnerability only occurs if the attacker can control the HTTP version of the request. This issue has been patched in version 3.9.0.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar `       | [3.9.0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2024-32004_3.16:git_2.36.6-r0",
              "shortDescription": {
                "text": "[CVE-2024-32004] 3.16:git 2.36.6-r0"
              },
              "help": {
                "text": "Git is a revision control system. Prior to versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4, an attacker can prepare a local repository in such a way that, when cloned, will execute arbitrary code during the operation. The problem has been patched in versions 2.45.1, 2.44.1, 2.43.4, 2.42.2, 2.41.1, 2.40.2, and 2.39.4. As a workaround, avoid cloning repositories from untrusted sources.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Applicable       | `sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar `       | [2.45.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            }
          ],
          "version": "3.96.1"
        }
      },
      "results": [
        {
          "ruleId": "CVE-2022-23806_github.com/golang/go_1.17.1",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "[CVE-2022-23806] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24540_github.com/golang/go_1.18.7",
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24540] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24538_github.com/golang/go_1.17.1",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24538] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24538_github.com/golang/go_1.18.7",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24538] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24540_github.com/golang/go_1.17.1",
          "ruleIndex": 4,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24540] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-40267_GitPython_3.1.31",
          "ruleIndex": 5,
          "level": "error",
          "message": {
            "text": "[CVE-2023-40267] sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-43816_github.com/containerd/containerd_1.5.7",
          "ruleIndex": 6,
          "level": "error",
          "message": {
            "text": "[CVE-2021-43816] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-48174_3.16:ssl_client_1.35.0-r17",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "[CVE-2022-48174] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-48174_3.16:busybox_1.35.0-r17",
          "ruleIndex": 8,
          "level": "error",
          "message": {
            "text": "[CVE-2022-48174] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-48620_3.16:libuv_1.44.1-r0",
          "ruleIndex": 9,
          "level": "error",
          "message": {
            "text": "[CVE-2022-48620] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-49569_gopkg.in/src-d/go-git.v4_4.13.1",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "[CVE-2023-49569] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-43565_golang.org/x/crypto_0.0.0-20210817164053-32db794688a5",
          "ruleIndex": 11,
          "level": "error",
          "message": {
            "text": "[CVE-2021-43565] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30631_github.com/golang/go_1.17.1",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30631] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24537_github.com/golang/go_1.17.1",
          "ruleIndex": 13,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24537] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-3786_3.16:libcrypto1.1_1.1.1u-r1",
          "ruleIndex": 14,
          "level": "error",
          "message": {
            "text": "[CVE-2022-3786] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-3602_3.16:openssl_1.1.1u-r1",
          "ruleIndex": 15,
          "level": "error",
          "message": {
            "text": "[CVE-2022-3602] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24534_github.com/golang/go_1.18.7",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24534] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24921_github.com/golang/go_1.17.1",
          "ruleIndex": 17,
          "level": "error",
          "message": {
            "text": "[CVE-2022-24921] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-28131_github.com/golang/go_1.17.1",
          "ruleIndex": 18,
          "level": "error",
          "message": {
            "text": "[CVE-2022-28131] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41725_github.com/golang/go_1.17.1",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41725] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30633_github.com/golang/go_1.17.1",
          "ruleIndex": 20,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30633] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-3786_3.16:openssl_1.1.1u-r1",
          "ruleIndex": 21,
          "level": "error",
          "message": {
            "text": "[CVE-2022-3786] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24536_github.com/golang/go_1.18.7",
          "ruleIndex": 22,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24536] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24675_github.com/golang/go_1.17.1",
          "ruleIndex": 23,
          "level": "error",
          "message": {
            "text": "[CVE-2022-24675] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30632_github.com/golang/go_1.17.1",
          "ruleIndex": 24,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30632] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24539_github.com/golang/go_1.18.7",
          "ruleIndex": 25,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24539] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-21698_github.com/prometheus/client_golang_1.11.0",
          "ruleIndex": 26,
          "level": "error",
          "message": {
            "text": "[CVE-2022-21698] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-30251_aiohttp_3.8.4",
          "ruleIndex": 27,
          "level": "error",
          "message": {
            "text": "[CVE-2024-30251] sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29400_github.com/golang/go_1.18.7",
          "ruleIndex": 28,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29400] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-3602_3.16:libssl1.1_1.1.1u-r1",
          "ruleIndex": 29,
          "level": "error",
          "message": {
            "text": "[CVE-2022-3602] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-3786_3.16:libssl1.1_1.1.1u-r1",
          "ruleIndex": 30,
          "level": "error",
          "message": {
            "text": "[CVE-2022-3786] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45287_github.com/golang/go_1.17.1",
          "ruleIndex": 31,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45287] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45287_github.com/golang/go_1.18.7",
          "ruleIndex": 32,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45287] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24534_github.com/golang/go_1.17.1",
          "ruleIndex": 33,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24534] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-3602_3.16:libcrypto1.1_1.1.1u-r1",
          "ruleIndex": 34,
          "level": "error",
          "message": {
            "text": "[CVE-2022-3602] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24536_github.com/golang/go_1.17.1",
          "ruleIndex": 35,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24536] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-43565_golang.org/x/crypto_0.0.0-20201221181555-eec23a3978ad",
          "ruleIndex": 36,
          "level": "error",
          "message": {
            "text": "[CVE-2021-43565] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2879_github.com/golang/go_1.17.1",
          "ruleIndex": 37,
          "level": "error",
          "message": {
            "text": "[CVE-2022-2879] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-41771_github.com/golang/go_1.17.1",
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "[CVE-2021-41771] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-28327_github.com/golang/go_1.17.1",
          "ruleIndex": 39,
          "level": "error",
          "message": {
            "text": "[CVE-2022-28327] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24539_github.com/golang/go_1.17.1",
          "ruleIndex": 40,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24539] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29400_github.com/golang/go_1.17.1",
          "ruleIndex": 41,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29400] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41723_golang.org/x/net_0.0.0-20211011170408-caeb26a5c8c0",
          "ruleIndex": 42,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41723] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41715_github.com/golang/go_1.17.1",
          "ruleIndex": 43,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41715] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41725_github.com/golang/go_1.18.7",
          "ruleIndex": 44,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41725] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24537_github.com/golang/go_1.18.7",
          "ruleIndex": 45,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24537] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-50387_3.16:bind-tools_9.16.42-r0",
          "ruleIndex": 46,
          "level": "error",
          "message": {
            "text": "[CVE-2023-50387] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-50387_3.16:bind-libs_9.16.42-r0",
          "ruleIndex": 47,
          "level": "error",
          "message": {
            "text": "[CVE-2023-50387] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-4408_3.16:bind-libs_9.16.42-r0",
          "ruleIndex": 48,
          "level": "error",
          "message": {
            "text": "[CVE-2023-4408] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5679_3.16:bind-libs_9.16.42-r0",
          "ruleIndex": 49,
          "level": "error",
          "message": {
            "text": "[CVE-2023-5679] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-22190_GitPython_3.1.31",
          "ruleIndex": 50,
          "level": "error",
          "message": {
            "text": "[CVE-2024-22190] sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3341_3.16:bind-tools_9.16.42-r0",
          "ruleIndex": 51,
          "level": "error",
          "message": {
            "text": "[CVE-2023-3341] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42915_3.16:curl_8.1.2-r0",
          "ruleIndex": 52,
          "level": "error",
          "message": {
            "text": "[CVE-2023-42915] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-38039_3.16:curl_8.1.2-r0",
          "ruleIndex": 53,
          "level": "error",
          "message": {
            "text": "[CVE-2023-38039] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23648_github.com/containerd/containerd_1.5.7",
          "ruleIndex": 54,
          "level": "error",
          "message": {
            "text": "[CVE-2022-23648] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-47627_aiohttp_3.8.4",
          "ruleIndex": 55,
          "level": "error",
          "message": {
            "text": "[CVE-2023-47627] sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42915_3.16:libcurl_8.1.2-r0",
          "ruleIndex": 56,
          "level": "error",
          "message": {
            "text": "[CVE-2023-42915] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-37276_aiohttp_3.8.4",
          "ruleIndex": 57,
          "level": "error",
          "message": {
            "text": "[CVE-2023-37276] sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24557_github.com/docker/docker_20.10.8+incompatible",
          "ruleIndex": 58,
          "level": "error",
          "message": {
            "text": "[CVE-2024-24557] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5517_3.16:bind-tools_9.16.42-r0",
          "ruleIndex": 59,
          "level": "error",
          "message": {
            "text": "[CVE-2023-5517] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5679_3.16:bind-tools_9.16.42-r0",
          "ruleIndex": 60,
          "level": "error",
          "message": {
            "text": "[CVE-2023-5679] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-4236_3.16:bind-libs_9.16.42-r0",
          "ruleIndex": 61,
          "level": "error",
          "message": {
            "text": "[CVE-2023-4236] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-6516_3.16:bind-libs_9.16.42-r0",
          "ruleIndex": 62,
          "level": "error",
          "message": {
            "text": "[CVE-2023-6516] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-6516_3.16:bind-tools_9.16.42-r0",
          "ruleIndex": 63,
          "level": "error",
          "message": {
            "text": "[CVE-2023-6516] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5517_3.16:bind-libs_9.16.42-r0",
          "ruleIndex": 64,
          "level": "error",
          "message": {
            "text": "[CVE-2023-5517] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-40590_GitPython_3.1.31",
          "ruleIndex": 65,
          "level": "error",
          "message": {
            "text": "[CVE-2023-40590] sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-4236_3.16:bind-tools_9.16.42-r0",
          "ruleIndex": 66,
          "level": "error",
          "message": {
            "text": "[CVE-2023-4236] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-4408_3.16:bind-tools_9.16.42-r0",
          "ruleIndex": 67,
          "level": "error",
          "message": {
            "text": "[CVE-2023-4408] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3341_3.16:bind-libs_9.16.42-r0",
          "ruleIndex": 68,
          "level": "error",
          "message": {
            "text": "[CVE-2023-3341] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-28840_github.com/docker/docker_20.10.8+incompatible",
          "ruleIndex": 69,
          "level": "error",
          "message": {
            "text": "[CVE-2023-28840] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-38039_3.16:libcurl_8.1.2-r0",
          "ruleIndex": 70,
          "level": "error",
          "message": {
            "text": "[CVE-2023-38039] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-33064_3.16:libsndfile_1.1.0-r0",
          "ruleIndex": 71,
          "level": "error",
          "message": {
            "text": "[CVE-2022-33064] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-20225_pip_23.1.2",
          "ruleIndex": 72,
          "level": "error",
          "message": {
            "text": "[CVE-2018-20225] sha256__f7dd0a2c0f0fc91d94bad3b99dd86ebda4f3e2332f7d0c22bfd8d7e23972b331.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-20225_pip_23.1.2",
          "ruleIndex": 72,
          "level": "error",
          "message": {
            "text": "[CVE-2018-20225] sha256__e296f2063d3a369f84037e6741c3d8f30e7304c2f80c9e2f22e98a1928305953.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-22219_3.16:flac_1.3.4-r0",
          "ruleIndex": 73,
          "level": "error",
          "message": {
            "text": "[CVE-2020-22219] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-31012_3.16:git_2.36.6-r0",
          "ruleIndex": 74,
          "level": "error",
          "message": {
            "text": "[CVE-2022-31012] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-49568_gopkg.in/src-d/go-git.v4_4.13.1",
          "ruleIndex": 75,
          "level": "error",
          "message": {
            "text": "[CVE-2023-49568] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32148_github.com/golang/go_1.17.1",
          "ruleIndex": 76,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-32148] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29406_github.com/golang/go_1.17.1",
          "ruleIndex": 77,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29406] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-39199_github.com/codenotary/immudb_1.2.1",
          "ruleIndex": 78,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-39199] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29409_github.com/golang/go_1.17.1",
          "ruleIndex": 79,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29409] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-44717_github.com/golang/go_1.17.1",
          "ruleIndex": 80,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-44717] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1962_github.com/golang/go_1.17.1",
          "ruleIndex": 81,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-1962] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29406_github.com/golang/go_1.18.7",
          "ruleIndex": 82,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29406] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29409_github.com/golang/go_1.18.7",
          "ruleIndex": 83,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29409] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-48795_golang.org/x/crypto_0.0.0-20210817164053-32db794688a5",
          "ruleIndex": 84,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-48795] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-48795_golang.org/x/crypto_0.0.0-20201221181555-eec23a3978ad",
          "ruleIndex": 85,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-48795] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-0853_3.16:curl_8.1.2-r0",
          "ruleIndex": 86,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-0853] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5678_3.16:libssl1.1_1.1.1u-r1",
          "ruleIndex": 87,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-5678] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5680_3.16:bind-tools_9.16.42-r0",
          "ruleIndex": 88,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-5680] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42366_3.16:busybox_1.35.0-r17",
          "ruleIndex": 89,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42366] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-28841_github.com/docker/docker_20.10.8+incompatible",
          "ruleIndex": 90,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-28841] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-28484_3.16:libxml2_2.9.14-r2",
          "ruleIndex": 91,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-28484] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-2975_3.16:libssl1.1_1.1.1u-r1",
          "ruleIndex": 92,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-2975] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3446_3.16:libcrypto1.1_1.1.1u-r1",
          "ruleIndex": 93,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3446] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4203_3.16:libssl1.1_1.1.1u-r1",
          "ruleIndex": 94,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-4203] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24786_google.golang.org/protobuf_1.27.1",
          "ruleIndex": 95,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-24786] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45284_github.com/golang/go_1.18.7",
          "ruleIndex": 96,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45284] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3446_cryptography_41.0.1",
          "ruleIndex": 97,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3446] sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-46219_3.16:libcurl_8.1.2-r0",
          "ruleIndex": 98,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-46219] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-22195_Jinja2_3.1.2",
          "ruleIndex": 99,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-22195] sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3817_3.16:libcrypto1.1_1.1.1u-r1",
          "ruleIndex": 100,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3817] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45803_urllib3_2.0.3",
          "ruleIndex": 101,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45803] sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-6129_3.16:openssl_1.1.1u-r1",
          "ruleIndex": 102,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-6129] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23471_github.com/containerd/containerd_1.5.7",
          "ruleIndex": 103,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-23471] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3446_3.16:libssl1.1_1.1.1u-r1",
          "ruleIndex": 104,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3446] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-50268_3.16:jq_1.6-r1",
          "ruleIndex": 105,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-50268] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-6129_3.16:libssl1.1_1.1.1u-r1",
          "ruleIndex": 106,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-6129] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-2975_3.16:openssl_1.1.1u-r1",
          "ruleIndex": 107,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-2975] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42365_3.16:busybox_1.35.0-r17",
          "ruleIndex": 108,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42365] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-28842_github.com/docker/docker_20.10.8+incompatible",
          "ruleIndex": 109,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-28842] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5678_3.16:libcrypto1.1_1.1.1u-r1",
          "ruleIndex": 110,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-5678] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-0853_3.16:libcurl_8.1.2-r0",
          "ruleIndex": 111,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-0853] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-0727_cryptography_41.0.1",
          "ruleIndex": 112,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-0727] sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42363_3.16:busybox_1.35.0-r17",
          "ruleIndex": 113,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42363] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-2253_github.com/docker/distribution_2.7.1+incompatible",
          "ruleIndex": 114,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-2253] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3817_3.16:openssl_1.1.1u-r1",
          "ruleIndex": 115,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3817] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45284_github.com/golang/go_1.17.1",
          "ruleIndex": 116,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45284] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4203_3.16:libcrypto1.1_1.1.1u-r1",
          "ruleIndex": 117,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-4203] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3817_3.16:libssl1.1_1.1.1u-r1",
          "ruleIndex": 118,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3817] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-46219_3.16:curl_8.1.2-r0",
          "ruleIndex": 119,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-46219] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-6129_3.16:libcrypto1.1_1.1.1u-r1",
          "ruleIndex": 120,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-6129] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42363_3.16:ssl_client_1.35.0-r17",
          "ruleIndex": 121,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42363] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42364_3.16:busybox_1.35.0-r17",
          "ruleIndex": 122,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42364] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-35195_requests_2.31.0",
          "ruleIndex": 123,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-35195] sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-29018_github.com/docker/docker_20.10.8+incompatible",
          "ruleIndex": 124,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-29018] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29469_3.16:libxml2_2.9.14-r2",
          "ruleIndex": 125,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29469] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-46218_3.16:libcurl_8.1.2-r0",
          "ruleIndex": 126,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-46218] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5680_3.16:bind-libs_9.16.42-r0",
          "ruleIndex": 127,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-5680] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5678_3.16:openssl_1.1.1u-r1",
          "ruleIndex": 128,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-5678] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-37891_urllib3_2.0.3",
          "ruleIndex": 129,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-37891] sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-41040_GitPython_3.1.31",
          "ruleIndex": 130,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-41040] sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-1255_3.16:libssl1.1_1.1.1u-r1",
          "ruleIndex": 131,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-1255] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-2975_3.16:libcrypto1.1_1.1.1u-r1",
          "ruleIndex": 132,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-2975] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-23829_aiohttp_3.8.4",
          "ruleIndex": 133,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-23829] sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-34064_Jinja2_3.1.2",
          "ruleIndex": 134,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-34064] sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-1255_3.16:libcrypto1.1_1.1.1u-r1",
          "ruleIndex": 135,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-1255] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-1255_3.16:openssl_1.1.1u-r1",
          "ruleIndex": 136,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-1255] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-4039_3.16:libstdc++_11.2.1_git20220219-r2",
          "ruleIndex": 137,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-4039] sha256__f7dd0a2c0f0fc91d94bad3b99dd86ebda4f3e2332f7d0c22bfd8d7e23972b331.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-43786_3.16:libx11_1.8-r1",
          "ruleIndex": 138,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-43786] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-27306_aiohttp_3.8.4",
          "ruleIndex": 139,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-27306] sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-0727_3.16:libcrypto1.1_1.1.1u-r1",
          "ruleIndex": 140,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-0727] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42364_3.16:ssl_client_1.35.0-r17",
          "ruleIndex": 141,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42364] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-52426_3.16:expat_2.5.0-r0",
          "ruleIndex": 142,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-52426] sha256__f7dd0a2c0f0fc91d94bad3b99dd86ebda4f3e2332f7d0c22bfd8d7e23972b331.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24532_github.com/golang/go_1.18.7",
          "ruleIndex": 143,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-24532] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39318_github.com/golang/go_1.18.7",
          "ruleIndex": 144,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39318] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39326_github.com/golang/go_1.18.7",
          "ruleIndex": 145,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39326] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-4039_3.16:libgomp_11.2.1_git20220219-r2",
          "ruleIndex": 146,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-4039] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1705_github.com/golang/go_1.17.1",
          "ruleIndex": 147,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-1705] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-41089_github.com/docker/docker_20.10.8+incompatible",
          "ruleIndex": 148,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-41089] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39319_github.com/golang/go_1.17.1",
          "ruleIndex": 149,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39319] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39319_github.com/golang/go_1.18.7",
          "ruleIndex": 150,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39319] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-31030_github.com/containerd/containerd_1.5.7",
          "ruleIndex": 151,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-31030] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24769_github.com/docker/docker_20.10.8+incompatible",
          "ruleIndex": 152,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-24769] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42365_3.16:ssl_client_1.35.0-r17",
          "ruleIndex": 153,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42365] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-41190_github.com/opencontainers/image-spec_1.0.1",
          "ruleIndex": 154,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-41190] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39326_github.com/golang/go_1.17.1",
          "ruleIndex": 155,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39326] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24532_github.com/golang/go_1.17.1",
          "ruleIndex": 156,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-24532] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-4039_3.16:libgcc_11.2.1_git20220219-r2",
          "ruleIndex": 157,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-4039] sha256__f7dd0a2c0f0fc91d94bad3b99dd86ebda4f3e2332f7d0c22bfd8d7e23972b331.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3446_3.16:openssl_1.1.1u-r1",
          "ruleIndex": 158,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3446] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-0727_3.16:openssl_1.1.1u-r1",
          "ruleIndex": 159,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-0727] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-46218_3.16:curl_8.1.2-r0",
          "ruleIndex": 160,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-46218] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39318_github.com/golang/go_1.17.1",
          "ruleIndex": 161,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39318] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4203_3.16:openssl_1.1.1u-r1",
          "ruleIndex": 162,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-4203] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-50246_3.16:jq_1.6-r1",
          "ruleIndex": 163,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-50246] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42366_3.16:ssl_client_1.35.0-r17",
          "ruleIndex": 164,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42366] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-41091_github.com/docker/docker_20.10.8+incompatible",
          "ruleIndex": 165,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-41091] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-36111_github.com/codenotary/immudb_1.2.1",
          "ruleIndex": 166,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-36111] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-0727_3.16:libssl1.1_1.1.1u-r1",
          "ruleIndex": 167,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-0727] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-43785_3.16:libx11_1.8-r1",
          "ruleIndex": 168,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-43785] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45322_3.16:libxml2_2.9.14-r2",
          "ruleIndex": 169,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45322] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3826_3.16:libstdc++_11.2.1_git20220219-r2",
          "ruleIndex": 170,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-3826] sha256__f7dd0a2c0f0fc91d94bad3b99dd86ebda4f3e2332f7d0c22bfd8d7e23972b331.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3826_3.16:libgcc_11.2.1_git20220219-r2",
          "ruleIndex": 171,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-3826] sha256__f7dd0a2c0f0fc91d94bad3b99dd86ebda4f3e2332f7d0c22bfd8d7e23972b331.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-23903_3.16:speexdsp_1.2.0-r0",
          "ruleIndex": 172,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-23903] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-23904_3.16:speexdsp_1.2.0-r0",
          "ruleIndex": 173,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-23904] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2009-3767_3.16:libssl1.1_1.1.1u-r1",
          "ruleIndex": 174,
          "level": "warning",
          "message": {
            "text": "[CVE-2009-3767] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2009-3767_3.16:libcrypto1.1_1.1.1u-r1",
          "ruleIndex": 175,
          "level": "warning",
          "message": {
            "text": "[CVE-2009-3767] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2009-3767_3.16:openssl_1.1.1u-r1",
          "ruleIndex": 176,
          "level": "warning",
          "message": {
            "text": "[CVE-2009-3767] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3826_3.16:libgomp_11.2.1_git20220219-r2",
          "ruleIndex": 177,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-3826] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-38546_3.16:libcurl_8.1.2-r0",
          "ruleIndex": 178,
          "level": "note",
          "message": {
            "text": "[CVE-2023-38546] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-38546_3.16:curl_8.1.2-r0",
          "ruleIndex": 179,
          "level": "note",
          "message": {
            "text": "[CVE-2023-38546] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30629_github.com/golang/go_1.17.1",
          "ruleIndex": 180,
          "level": "note",
          "message": {
            "text": "[CVE-2022-30629] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5752_pip_23.1.2",
          "ruleIndex": 181,
          "level": "note",
          "message": {
            "text": "[CVE-2023-5752] sha256__e296f2063d3a369f84037e6741c3d8f30e7304c2f80c9e2f22e98a1928305953.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5752_pip_23.1.2",
          "ruleIndex": 181,
          "level": "note",
          "message": {
            "text": "[CVE-2023-5752] sha256__f7dd0a2c0f0fc91d94bad3b99dd86ebda4f3e2332f7d0c22bfd8d7e23972b331.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-50868_3.16:bind-tools_9.16.42-r0",
          "ruleIndex": 182,
          "level": "none",
          "message": {
            "text": "[CVE-2023-50868] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-50868_3.16:bind-libs_9.16.42-r0",
          "ruleIndex": 183,
          "level": "none",
          "message": {
            "text": "[CVE-2023-50868] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2004_3.16:libcurl_8.1.2-r0",
          "ruleIndex": 184,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2004] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2398_3.16:curl_8.1.2-r0",
          "ruleIndex": 185,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2398] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-34459_3.16:libxml2_2.9.14-r2",
          "ruleIndex": 186,
          "level": "none",
          "message": {
            "text": "[CVE-2024-34459] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-28757_3.16:expat_2.5.0-r0",
          "ruleIndex": 187,
          "level": "none",
          "message": {
            "text": "[CVE-2024-28757] sha256__f7dd0a2c0f0fc91d94bad3b99dd86ebda4f3e2332f7d0c22bfd8d7e23972b331.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-1394_3.16:openssl_1.1.1u-r1",
          "ruleIndex": 188,
          "level": "none",
          "message": {
            "text": "[CVE-2024-1394] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2004_3.16:curl_8.1.2-r0",
          "ruleIndex": 189,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2004] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2398_3.16:libcurl_8.1.2-r0",
          "ruleIndex": 190,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2398] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2466_3.16:curl_8.1.2-r0",
          "ruleIndex": 191,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2466] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-28085_3.16:libuuid_2.38-r1",
          "ruleIndex": 192,
          "level": "none",
          "message": {
            "text": "[CVE-2024-28085] sha256__f7dd0a2c0f0fc91d94bad3b99dd86ebda4f3e2332f7d0c22bfd8d7e23972b331.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2379_3.16:curl_8.1.2-r0",
          "ruleIndex": 193,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2379] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-4603_3.16:libssl1.1_1.1.1u-r1",
          "ruleIndex": 194,
          "level": "none",
          "message": {
            "text": "[CVE-2024-4603] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2511_3.16:openssl_1.1.1u-r1",
          "ruleIndex": 195,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2511] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-32020_3.16:git_2.36.6-r0",
          "ruleIndex": 196,
          "level": "none",
          "message": {
            "text": "[CVE-2024-32020] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-4603_3.16:openssl_1.1.1u-r1",
          "ruleIndex": 197,
          "level": "none",
          "message": {
            "text": "[CVE-2024-4603] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-1394_3.16:libssl1.1_1.1.1u-r1",
          "ruleIndex": 198,
          "level": "none",
          "message": {
            "text": "[CVE-2024-1394] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-6237_3.16:openssl_1.1.1u-r1",
          "ruleIndex": 199,
          "level": "none",
          "message": {
            "text": "[CVE-2023-6237] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-4603_3.16:libcrypto1.1_1.1.1u-r1",
          "ruleIndex": 200,
          "level": "none",
          "message": {
            "text": "[CVE-2024-4603] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-3554_3.16:libx11_1.8-r1",
          "ruleIndex": 201,
          "level": "none",
          "message": {
            "text": "[CVE-2022-3554] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2379_3.16:libcurl_8.1.2-r0",
          "ruleIndex": 202,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2379] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-32465_3.16:git_2.36.6-r0",
          "ruleIndex": 203,
          "level": "none",
          "message": {
            "text": "[CVE-2024-32465] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2511_3.16:libssl1.1_1.1.1u-r1",
          "ruleIndex": 204,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2511] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2466_3.16:libcurl_8.1.2-r0",
          "ruleIndex": 205,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2466] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2511_3.16:libcrypto1.1_1.1.1u-r1",
          "ruleIndex": 206,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2511] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-6237_3.16:libcrypto1.1_1.1.1u-r1",
          "ruleIndex": 207,
          "level": "none",
          "message": {
            "text": "[CVE-2023-6237] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-6237_3.16:libssl1.1_1.1.1u-r1",
          "ruleIndex": 208,
          "level": "none",
          "message": {
            "text": "[CVE-2023-6237] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-28085_3.16:libblkid_2.38-r1",
          "ruleIndex": 209,
          "level": "none",
          "message": {
            "text": "[CVE-2024-28085] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-1394_3.16:libcrypto1.1_1.1.1u-r1",
          "ruleIndex": 210,
          "level": "none",
          "message": {
            "text": "[CVE-2024-1394] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-32021_3.16:git_2.36.6-r0",
          "ruleIndex": 211,
          "level": "none",
          "message": {
            "text": "[CVE-2024-32021] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-37920_certifi_2023.5.7",
          "ruleIndex": 212,
          "level": "error",
          "message": {
            "text": "[CVE-2023-37920] sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29402_github.com/golang/go_1.18.7",
          "ruleIndex": 213,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29402] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29405_github.com/golang/go_1.17.1",
          "ruleIndex": 214,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29405] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29404_github.com/golang/go_1.17.1",
          "ruleIndex": 215,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29404] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-32002_3.16:git_2.36.6-r0",
          "ruleIndex": 216,
          "level": "error",
          "message": {
            "text": "[CVE-2024-32002] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29402_github.com/golang/go_1.17.1",
          "ruleIndex": 217,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29402] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-38297_github.com/golang/go_1.17.1",
          "ruleIndex": 218,
          "level": "error",
          "message": {
            "text": "[CVE-2021-38297] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-38545_3.16:libcurl_8.1.2-r0",
          "ruleIndex": 219,
          "level": "error",
          "message": {
            "text": "[CVE-2023-38545] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29404_github.com/golang/go_1.18.7",
          "ruleIndex": 220,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29404] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29405_github.com/golang/go_1.18.7",
          "ruleIndex": 221,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29405] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-38545_3.16:curl_8.1.2-r0",
          "ruleIndex": 222,
          "level": "error",
          "message": {
            "text": "[CVE-2023-38545] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-49210_3.16:libssl1.1_1.1.1u-r1",
          "ruleIndex": 223,
          "level": "error",
          "message": {
            "text": "[CVE-2023-49210] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-49210_3.16:libcrypto1.1_1.1.1u-r1",
          "ruleIndex": 224,
          "level": "error",
          "message": {
            "text": "[CVE-2023-49210] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5363_3.16:libssl1.1_1.1.1u-r1",
          "ruleIndex": 225,
          "level": "error",
          "message": {
            "text": "[CVE-2023-5363] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27664_golang.org/x/net_0.0.0-20211011170408-caeb26a5c8c0",
          "ruleIndex": 226,
          "level": "error",
          "message": {
            "text": "[CVE-2022-27664] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-52425_3.16:expat_2.5.0-r0",
          "ruleIndex": 227,
          "level": "error",
          "message": {
            "text": "[CVE-2023-52425] sha256__f7dd0a2c0f0fc91d94bad3b99dd86ebda4f3e2332f7d0c22bfd8d7e23972b331.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29403_github.com/golang/go_1.18.7",
          "ruleIndex": 228,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29403] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39325_golang.org/x/net_0.0.0-20211011170408-caeb26a5c8c0",
          "ruleIndex": 229,
          "level": "error",
          "message": {
            "text": "[CVE-2023-39325] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-38325_cryptography_41.0.1",
          "ruleIndex": 230,
          "level": "error",
          "message": {
            "text": "[CVE-2023-38325] sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30634_github.com/golang/go_1.17.1",
          "ruleIndex": 231,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30634] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0217_3.16:openssl_1.1.1u-r1",
          "ruleIndex": 232,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0217] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41716_github.com/golang/go_1.17.1",
          "ruleIndex": 233,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41716] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0216_3.16:openssl_1.1.1u-r1",
          "ruleIndex": 234,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0216] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41724_github.com/golang/go_1.17.1",
          "ruleIndex": 235,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41724] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41720_github.com/golang/go_1.18.7",
          "ruleIndex": 236,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41720] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-7104_3.16:sqlite-libs_3.40.1-r0",
          "ruleIndex": 237,
          "level": "error",
          "message": {
            "text": "[CVE-2023-7104] sha256__f7dd0a2c0f0fc91d94bad3b99dd86ebda4f3e2332f7d0c22bfd8d7e23972b331.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27191_golang.org/x/crypto_0.0.0-20201221181555-eec23a3978ad",
          "ruleIndex": 238,
          "level": "error",
          "message": {
            "text": "[CVE-2022-27191] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45285_github.com/golang/go_1.17.1",
          "ruleIndex": 239,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45285] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39323_github.com/golang/go_1.18.7",
          "ruleIndex": 240,
          "level": "error",
          "message": {
            "text": "[CVE-2023-39323] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41720_github.com/golang/go_1.17.1",
          "ruleIndex": 241,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41720] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23772_github.com/golang/go_1.17.1",
          "ruleIndex": 242,
          "level": "error",
          "message": {
            "text": "[CVE-2022-23772] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0217_3.16:libcrypto1.1_1.1.1u-r1",
          "ruleIndex": 243,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0217] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29403_github.com/golang/go_1.17.1",
          "ruleIndex": 244,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29403] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-26130_cryptography_41.0.1",
          "ruleIndex": 245,
          "level": "error",
          "message": {
            "text": "[CVE-2024-26130] sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32149_golang.org/x/text_0.3.7",
          "ruleIndex": 246,
          "level": "error",
          "message": {
            "text": "[CVE-2022-32149] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41716_github.com/golang/go_1.18.7",
          "ruleIndex": 247,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41716] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30580_github.com/golang/go_1.17.1",
          "ruleIndex": 248,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30580] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2016-7798_3.16:libssl1.1_1.1.1u-r1",
          "ruleIndex": 249,
          "level": "error",
          "message": {
            "text": "[CVE-2016-7798] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45283_github.com/golang/go_1.17.1",
          "ruleIndex": 250,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45283] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-4807_cryptography_41.0.1",
          "ruleIndex": 251,
          "level": "error",
          "message": {
            "text": "[CVE-2023-4807] sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45283_github.com/golang/go_1.18.7",
          "ruleIndex": 252,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45283] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0401_3.16:openssl_1.1.1u-r1",
          "ruleIndex": 253,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0401] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45285_github.com/golang/go_1.18.7",
          "ruleIndex": 254,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45285] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2880_github.com/golang/go_1.17.1",
          "ruleIndex": 255,
          "level": "error",
          "message": {
            "text": "[CVE-2022-2880] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41722_github.com/golang/go_1.18.7",
          "ruleIndex": 256,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41722] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2016-7798_3.16:libcrypto1.1_1.1.1u-r1",
          "ruleIndex": 257,
          "level": "error",
          "message": {
            "text": "[CVE-2016-7798] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30635_github.com/golang/go_1.17.1",
          "ruleIndex": 258,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30635] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32189_github.com/golang/go_1.17.1",
          "ruleIndex": 259,
          "level": "error",
          "message": {
            "text": "[CVE-2022-32189] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-29804_github.com/golang/go_1.17.1",
          "ruleIndex": 260,
          "level": "error",
          "message": {
            "text": "[CVE-2022-29804] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-41772_github.com/golang/go_1.17.1",
          "ruleIndex": 261,
          "level": "error",
          "message": {
            "text": "[CVE-2021-41772] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-35945_3.16:nghttp2-libs_1.47.0-r0",
          "ruleIndex": 262,
          "level": "error",
          "message": {
            "text": "[CVE-2023-35945] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-50782_cryptography_41.0.1",
          "ruleIndex": 263,
          "level": "error",
          "message": {
            "text": "[CVE-2023-50782] sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5363_3.16:openssl_1.1.1u-r1",
          "ruleIndex": 264,
          "level": "error",
          "message": {
            "text": "[CVE-2023-5363] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23773_github.com/golang/go_1.17.1",
          "ruleIndex": 265,
          "level": "error",
          "message": {
            "text": "[CVE-2022-23773] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41724_github.com/golang/go_1.18.7",
          "ruleIndex": 266,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41724] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27191_golang.org/x/crypto_0.0.0-20210817164053-32db794688a5",
          "ruleIndex": 267,
          "level": "error",
          "message": {
            "text": "[CVE-2022-27191] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-43787_3.16:libx11_1.8-r1",
          "ruleIndex": 268,
          "level": "error",
          "message": {
            "text": "[CVE-2023-43787] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30630_github.com/golang/go_1.17.1",
          "ruleIndex": 269,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30630] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-25062_3.16:libxml2_2.9.14-r2",
          "ruleIndex": 270,
          "level": "error",
          "message": {
            "text": "[CVE-2024-25062] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39323_github.com/golang/go_1.17.1",
          "ruleIndex": 271,
          "level": "error",
          "message": {
            "text": "[CVE-2023-39323] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0216_3.16:libcrypto1.1_1.1.1u-r1",
          "ruleIndex": 272,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0216] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0217_3.16:libssl1.1_1.1.1u-r1",
          "ruleIndex": 273,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0217] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0401_3.16:libcrypto1.1_1.1.1u-r1",
          "ruleIndex": 274,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0401] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0216_3.16:libssl1.1_1.1.1u-r1",
          "ruleIndex": 275,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0216] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-25173_github.com/containerd/containerd_1.5.7",
          "ruleIndex": 276,
          "level": "error",
          "message": {
            "text": "[CVE-2023-25173] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-49083_cryptography_41.0.1",
          "ruleIndex": 277,
          "level": "error",
          "message": {
            "text": "[CVE-2023-49083] sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0401_3.16:libssl1.1_1.1.1u-r1",
          "ruleIndex": 278,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0401] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41409_3.16:pcre2_10.40-r0",
          "ruleIndex": 279,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41409] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2016-7798_3.16:openssl_1.1.1u-r1",
          "ruleIndex": 280,
          "level": "error",
          "message": {
            "text": "[CVE-2016-7798] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-43804_urllib3_2.0.3",
          "ruleIndex": 281,
          "level": "error",
          "message": {
            "text": "[CVE-2023-43804] sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-23334_aiohttp_3.8.4",
          "ruleIndex": 282,
          "level": "error",
          "message": {
            "text": "[CVE-2024-23334] sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-44487_google.golang.org/grpc_1.43.0",
          "ruleIndex": 283,
          "level": "error",
          "message": {
            "text": "[CVE-2023-44487] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-44487_3.16:nghttp2-libs_1.47.0-r0",
          "ruleIndex": 284,
          "level": "error",
          "message": {
            "text": "[CVE-2023-44487] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-44487_golang.org/x/net_0.0.0-20211011170408-caeb26a5c8c0",
          "ruleIndex": 285,
          "level": "error",
          "message": {
            "text": "[CVE-2023-44487] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5363_3.16:libcrypto1.1_1.1.1u-r1",
          "ruleIndex": 286,
          "level": "error",
          "message": {
            "text": "[CVE-2023-5363] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41722_github.com/golang/go_1.17.1",
          "ruleIndex": 287,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41722] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24806_3.16:libuv_1.44.1-r0",
          "ruleIndex": 288,
          "level": "error",
          "message": {
            "text": "[CVE-2024-24806] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4899_3.16:zstd-libs_1.5.2-r1",
          "ruleIndex": 289,
          "level": "error",
          "message": {
            "text": "[CVE-2022-4899] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-49082_aiohttp_3.8.4",
          "ruleIndex": 290,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-49082] sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-25153_github.com/containerd/containerd_1.5.7",
          "ruleIndex": 291,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-25153] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-40897_setuptools_65.5.0",
          "ruleIndex": 292,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-40897] sha256__f7dd0a2c0f0fc91d94bad3b99dd86ebda4f3e2332f7d0c22bfd8d7e23972b331.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_github.com/golang/go_1.17.1",
          "ruleIndex": 293,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__1aed77b08b94aaa4548cb4320310c0fcfc9804d354f6ecbdb30c6a67eef1b617.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_golang.org/x/net_0.0.0-20211011170408-caeb26a5c8c0",
          "ruleIndex": 294,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_github.com/golang/go_1.18.7",
          "ruleIndex": 295,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0466_3.16:openssl_1.1.1u-r1",
          "ruleIndex": 296,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-0466] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0466_3.16:libssl1.1_1.1.1u-r1",
          "ruleIndex": 297,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-0466] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41717_golang.org/x/net_0.0.0-20211011170408-caeb26a5c8c0",
          "ruleIndex": 298,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-41717] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3978_golang.org/x/net_0.0.0-20211011170408-caeb26a5c8c0",
          "ruleIndex": 299,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3978] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-29526_golang.org/x/sys_0.0.0-20211216021012-1d35b9e2eb4e",
          "ruleIndex": 300,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-29526] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0466_3.16:libcrypto1.1_1.1.1u-r1",
          "ruleIndex": 301,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-0466] sha256__18eb8b5891f2056b0a6c9978359916a519e8fdeec08c13c6383b922cd15fcfb2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-49081_aiohttp_3.8.4",
          "ruleIndex": 302,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-49081] sha256__169c9faba53dc79adf0edbd5c98cd0a9372aef083c91e37de1dfd8ef8fe49b61.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-32004_3.16:git_2.36.6-r0",
          "ruleIndex": 303,
          "level": "none",
          "message": {
            "text": "[CVE-2024-32004] sha256__90396d91c2d0defa4b38759d6412a7e2a2d02861231518cbca508b0ec88d869f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://jfrog.com/help/r/jfrog-security-documentation/jfrog-advanced-security",
          "name": "JFrog Applicability Scanner",
          "rules": [
            {
              "id": "applic_CVE-2022-41716",
              "name": "CVE-2022-41716",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41716"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-38297",
              "name": "CVE-2021-38297",
              "shortDescription": {
                "text": "Scanner for CVE-2021-38297"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-29804",
              "name": "CVE-2022-29804",
              "shortDescription": {
                "text": "Scanner for CVE-2022-29804"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-30580",
              "name": "CVE-2022-30580",
              "shortDescription": {
                "text": "Scanner for CVE-2022-30580"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41722",
              "name": "CVE-2022-41722",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41722"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-30634",
              "name": "CVE-2022-30634",
              "shortDescription": {
                "text": "Scanner for CVE-2022-30634"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41720",
              "name": "CVE-2022-41720",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41720"
              },
              "fullDescription": {
                "text": "The scanner checks whether one of the vulnerable functions `os.dirFS.Open` or  `net/http.Dir.Open` is called.",
                "markdown": "The scanner checks whether one of the vulnerable functions `os.dirFS.Open` or  `net/http.Dir.Open` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-45283",
              "name": "CVE-2023-45283",
              "shortDescription": {
                "text": "Scanner for CVE-2023-45283"
              },
              "fullDescription": {
                "text": "The vulnerability is only exploitable when running under the Windows OS.\nSince currently only Linux containers are supported, the scanner will always conclude that this vulnerability is not applicable.",
                "markdown": "The vulnerability is only exploitable when running under the Windows OS.\nSince currently only Linux containers are supported, the scanner will always conclude that this vulnerability is not applicable."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-4807",
              "name": "CVE-2023-4807",
              "shortDescription": {
                "text": "Scanner for CVE-2023-4807"
              },
              "fullDescription": {
                "text": "The vulnerability is only exploitable when running under the Windows OS.\nSince currently only Linux containers are supported, the scanner will always conclude that this vulnerability is not applicable.",
                "markdown": "The vulnerability is only exploitable when running under the Windows OS.\nSince currently only Linux containers are supported, the scanner will always conclude that this vulnerability is not applicable."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-2880",
              "name": "CVE-2022-2880",
              "shortDescription": {
                "text": "Scanner for CVE-2022-2880"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-41771",
              "name": "CVE-2021-41771",
              "shortDescription": {
                "text": "Scanner for CVE-2021-41771"
              },
              "fullDescription": {
                "text": "The scanner checks whether the functions `macho.NewFile()`, `macho.OpenFat()` or `macho.Open()` are called with external input.",
                "markdown": "The scanner checks whether the functions `macho.NewFile()`, `macho.OpenFat()` or `macho.Open()` are called with external input."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-41772",
              "name": "CVE-2021-41772",
              "shortDescription": {
                "text": "Scanner for CVE-2021-41772"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `archive/zip.(*Reader).Open` is used.",
                "markdown": "The scanner checks whether the vulnerable function `archive/zip.(*Reader).Open` is used."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-43565",
              "name": "CVE-2021-43565",
              "shortDescription": {
                "text": "Scanner for CVE-2021-43565"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `NewServerConn` is called.",
                "markdown": "The scanner checks whether the vulnerable function `NewServerConn` is called."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-44717",
              "name": "CVE-2021-44717",
              "shortDescription": {
                "text": "Scanner for CVE-2021-44717"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-1962",
              "name": "CVE-2022-1962",
              "shortDescription": {
                "text": "Scanner for CVE-2022-1962"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-21698",
              "name": "CVE-2022-21698",
              "shortDescription": {
                "text": "Scanner for CVE-2022-21698"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-23772",
              "name": "CVE-2022-23772",
              "shortDescription": {
                "text": "Scanner for CVE-2022-23772"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `Rat.SetString` is called.",
                "markdown": "The scanner checks whether the vulnerable function `Rat.SetString` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-23806",
              "name": "CVE-2022-23806",
              "shortDescription": {
                "text": "Scanner for CVE-2022-23806"
              },
              "fullDescription": {
                "text": "The scanner checks if at least one of the following vulnerable functions is called with external output - \n```\ncrypto/elliptic.(*CurveParams).IsOnCurve()\ncrypto/elliptic.p224Curve.IsOnCurve()\ncrypto/elliptic.p521Curve.IsOnCurve()\ncrypto/elliptic.Curve.IsOnCurve()\ncrypto/elliptic.p256Curve.IsOnCurve()\ncrypto/elliptic.(*p224Curve).IsOnCurve()\ncrypto/elliptic.(*p256Curve).IsOnCurve()\ncrypto/elliptic.(*p521Curve).IsOnCurve()\n```",
                "markdown": "The scanner checks if at least one of the following vulnerable functions is called with external output - \n```\ncrypto/elliptic.(*CurveParams).IsOnCurve()\ncrypto/elliptic.p224Curve.IsOnCurve()\ncrypto/elliptic.p521Curve.IsOnCurve()\ncrypto/elliptic.Curve.IsOnCurve()\ncrypto/elliptic.p256Curve.IsOnCurve()\ncrypto/elliptic.(*p224Curve).IsOnCurve()\ncrypto/elliptic.(*p256Curve).IsOnCurve()\ncrypto/elliptic.(*p521Curve).IsOnCurve()\n```"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-24675",
              "name": "CVE-2022-24675",
              "shortDescription": {
                "text": "Scanner for CVE-2022-24675"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `pem.Decode` is called.",
                "markdown": "The scanner checks whether the vulnerable function `pem.Decode` is called."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-24921",
              "name": "CVE-2022-24921",
              "shortDescription": {
                "text": "Scanner for CVE-2022-24921"
              },
              "fullDescription": {
                "text": "The scanner checks whether at least one of the vulnerable functions is called : \n```\nregexp.Match\nregexp.MatchReader \nregexp.MatchString\nregexp.Compile\nregexp.CompilePOSIX \nregexp.MustCompile\nregexp.MustCompilePOSIX\n```",
                "markdown": "The scanner checks whether at least one of the vulnerable functions is called : \n```\nregexp.Match\nregexp.MatchReader \nregexp.MatchString\nregexp.Compile\nregexp.CompilePOSIX \nregexp.MustCompile\nregexp.MustCompilePOSIX\n```"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-27191",
              "name": "CVE-2022-27191",
              "shortDescription": {
                "text": "Scanner for CVE-2022-27191"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-27664",
              "name": "CVE-2022-27664",
              "shortDescription": {
                "text": "Scanner for CVE-2022-27664"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `net/http.ListenAndServeTLS` is called.",
                "markdown": "The scanner checks whether the vulnerable function `net/http.ListenAndServeTLS` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-28131",
              "name": "CVE-2022-28131",
              "shortDescription": {
                "text": "Scanner for CVE-2022-28131"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `Decoder.Skip` is called.",
                "markdown": "The scanner checks whether the vulnerable function `Decoder.Skip` is called."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-28327",
              "name": "CVE-2022-28327",
              "shortDescription": {
                "text": "Scanner for CVE-2022-28327"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-2879",
              "name": "CVE-2022-2879",
              "shortDescription": {
                "text": "Scanner for CVE-2022-2879"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `archive/tar.(*Reader).Next` is called.",
                "markdown": "The scanner checks whether the vulnerable function `archive/tar.(*Reader).Next` is called."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-29526",
              "name": "CVE-2022-29526",
              "shortDescription": {
                "text": "Scanner for CVE-2022-29526"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-30630",
              "name": "CVE-2022-30630",
              "shortDescription": {
                "text": "Scanner for CVE-2022-30630"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `fs.Glob` is called.",
                "markdown": "The scanner checks whether the vulnerable function `fs.Glob` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-30631",
              "name": "CVE-2022-30631",
              "shortDescription": {
                "text": "Scanner for CVE-2022-30631"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `Reader.Read` is called.",
                "markdown": "The scanner checks whether the vulnerable function `Reader.Read` is called."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-30632",
              "name": "CVE-2022-30632",
              "shortDescription": {
                "text": "Scanner for CVE-2022-30632"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `filepath.Glob` is called.",
                "markdown": "The scanner checks whether the vulnerable function `filepath.Glob` is called."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-30633",
              "name": "CVE-2022-30633",
              "shortDescription": {
                "text": "Scanner for CVE-2022-30633"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-32148",
              "name": "CVE-2022-32148",
              "shortDescription": {
                "text": "Scanner for CVE-2022-32148"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-32149",
              "name": "CVE-2022-32149",
              "shortDescription": {
                "text": "Scanner for CVE-2022-32149"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-32189",
              "name": "CVE-2022-32189",
              "shortDescription": {
                "text": "Scanner for CVE-2022-32189"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable functions `Float.GobDecode()` or `Rat.GobDecode()` are called.",
                "markdown": "The scanner checks whether the vulnerable functions `Float.GobDecode()` or `Rat.GobDecode()` are called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-3602",
              "name": "CVE-2022-3602",
              "shortDescription": {
                "text": "Scanner for CVE-2022-3602"
              },
              "fullDescription": {
                "text": "The scanner checks if at least one of the vulnerable functions is called:\n```\nSSL_connect\nBIO_new_ssl_connect\nBIO_do_handshake\nBIO_do_connect\nBIO_new_connect\nSSL_accept\nSSL_set_verify\nSSL_CTX_set_verify\nX509_verify_cert\n```\nThen, if the application is a server, the client authentication option should be checked manually. \nIt is a client, it is applicable as described in the description.",
                "markdown": "The scanner checks if at least one of the vulnerable functions is called:\n```\nSSL_connect\nBIO_new_ssl_connect\nBIO_do_handshake\nBIO_do_connect\nBIO_new_connect\nSSL_accept\nSSL_set_verify\nSSL_CTX_set_verify\nX509_verify_cert\n```\nThen, if the application is a server, the client authentication option should be checked manually. \nIt is a client, it is applicable as described in the description."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-3786",
              "name": "CVE-2022-3786",
              "shortDescription": {
                "text": "Scanner for CVE-2022-3786"
              },
              "fullDescription": {
                "text": "The scanner checks if at least one of the vulnerable functions is called:\n```\nSSL_connect\nBIO_new_ssl_connect\nBIO_do_handshake\nBIO_do_connect\nBIO_new_connect\nSSL_accept\nSSL_set_verify\nSSL_CTX_set_verify\nX509_verify_cert\n```\nThen, if the application is a server, the client authentication option should be checked manually. \nIt is a client, it is applicable as described in the description.",
                "markdown": "The scanner checks if at least one of the vulnerable functions is called:\n```\nSSL_connect\nBIO_new_ssl_connect\nBIO_do_handshake\nBIO_do_connect\nBIO_new_connect\nSSL_accept\nSSL_set_verify\nSSL_CTX_set_verify\nX509_verify_cert\n```\nThen, if the application is a server, the client authentication option should be checked manually. \nIt is a client, it is applicable as described in the description."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-39199",
              "name": "CVE-2022-39199",
              "shortDescription": {
                "text": "Scanner for CVE-2022-39199"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-52425",
              "name": "CVE-2023-52425",
              "shortDescription": {
                "text": "Scanner for CVE-2023-52425"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the next functions are called:\n\n* `XML_Parse()`\n* `XML_ParseBuffer()`\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The vulnerable functions are used to parse an attacker-controlled file by chunks.",
                "markdown": "The scanner checks whether any of the next functions are called:\n\n* `XML_Parse()`\n* `XML_ParseBuffer()`\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The vulnerable functions are used to parse an attacker-controlled file by chunks."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-40897",
              "name": "CVE-2022-40897",
              "shortDescription": {
                "text": "Scanner for CVE-2022-40897"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `find_external_links` is called.\n\nNote that the scanner does not check for an additional vulnerable case in which the `pip` CLI tool is executed with the  `--editable` flag. In this case, the vulnerability will lead to a DoS of a forked command-line utility, which has a minimal security impact.",
                "markdown": "The scanner checks whether the vulnerable function `find_external_links` is called.\n\nNote that the scanner does not check for an additional vulnerable case in which the `pip` CLI tool is executed with the  `--editable` flag. In this case, the vulnerability will lead to a DoS of a forked command-line utility, which has a minimal security impact."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41715",
              "name": "CVE-2022-41715",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41715"
              },
              "fullDescription": {
                "text": "The scanner checks whether any function eventually calls the vulnerable function `regexp/syntax.parse`.",
                "markdown": "The scanner checks whether any function eventually calls the vulnerable function `regexp/syntax.parse`."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41717",
              "name": "CVE-2022-41717",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41717"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41723",
              "name": "CVE-2022-41723",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41723"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `Decoder.DecodeFull` is called",
                "markdown": "The scanner checks whether the vulnerable function `Decoder.DecodeFull` is called"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41724",
              "name": "CVE-2022-41724",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41724"
              },
              "fullDescription": {
                "text": "The CVE is never applicable. A closer inspection of the issue shows there are no potential user-controllable paths that allow creating a panic (see also original commit message - https://go.dev/cl/468125)",
                "markdown": "The CVE is never applicable. A closer inspection of the issue shows there are no potential user-controllable paths that allow creating a panic (see also original commit message - https://go.dev/cl/468125)"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-24536",
              "name": "CVE-2023-24536",
              "shortDescription": {
                "text": "Scanner for CVE-2023-24536"
              },
              "fullDescription": {
                "text": "The scanner checks whether one of the following vulnerable functions is called:\n- `mime/multipart Reader.ReadForm`\n- `net/http Request.FormFile`\n- `net/http Request.FormValue`\n- `net/http Request.ParseMultipartForm`\n- `net/http Request.PostFormValue`",
                "markdown": "The scanner checks whether one of the following vulnerable functions is called:\n- `mime/multipart Reader.ReadForm`\n- `net/http Request.FormFile`\n- `net/http Request.FormValue`\n- `net/http Request.ParseMultipartForm`\n- `net/http Request.PostFormValue`"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41725",
              "name": "CVE-2022-41725",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41725"
              },
              "fullDescription": {
                "text": "The scanner checks whether one of the following vulnerable functions is called:\n- `mime/multipart Reader.ReadForm`\n- `net/http Request.FormFile`\n- `net/http Request.FormValue`\n- `net/http Request.ParseMultipartForm`\n- `net/http Request.PostFormValue`",
                "markdown": "The scanner checks whether one of the following vulnerable functions is called:\n- `mime/multipart Reader.ReadForm`\n- `net/http Request.FormFile`\n- `net/http Request.FormValue`\n- `net/http Request.ParseMultipartForm`\n- `net/http Request.PostFormValue`"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0217",
              "name": "CVE-2023-0217",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0217"
              },
              "fullDescription": {
                "text": "When checking ELF files, the scanner checks whether the vulnerable `EVP_PKEY_public_check()` function is called.\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked",
                "markdown": "When checking ELF files, the scanner checks whether the vulnerable `EVP_PKEY_public_check()` function is called.\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0401",
              "name": "CVE-2023-0401",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0401"
              },
              "fullDescription": {
                "text": "When checking ELF files, the scanner checks whether at least one of the vulnerable API calls is called:\n\n* `PKCS7_decrypt`\n* `PKCS7_dataInit`\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked",
                "markdown": "When checking ELF files, the scanner checks whether at least one of the vulnerable API calls is called:\n\n* `PKCS7_decrypt`\n* `PKCS7_dataInit`\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-24534",
              "name": "CVE-2023-24534",
              "shortDescription": {
                "text": "Scanner for CVE-2023-24534"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-24537",
              "name": "CVE-2023-24537",
              "shortDescription": {
                "text": "Scanner for CVE-2023-24537"
              },
              "fullDescription": {
                "text": "The scanner checks whether one of the following vulnerable functions is called:\n\n- `scanner.Scanner.Scan`\n- `parser.ParseDir`\n- `parser.ParseExpr`\n- `parser.ExprFrom`\n- `parser.ParseFile`\n\nNote that the scanner does not check for the invocation of command-line utilities (such as `go build`) that can indirectly trigger this vulnerability",
                "markdown": "The scanner checks whether one of the following vulnerable functions is called:\n\n- `scanner.Scanner.Scan`\n- `parser.ParseDir`\n- `parser.ParseExpr`\n- `parser.ExprFrom`\n- `parser.ParseFile`\n\nNote that the scanner does not check for the invocation of command-line utilities (such as `go build`) that can indirectly trigger this vulnerability"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-24538",
              "name": "CVE-2023-24538",
              "shortDescription": {
                "text": "Scanner for CVE-2023-24538"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `Template.Execute`\n\t\n* `Template.ExecuteTemplate`",
                "markdown": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `Template.Execute`\n\t\n* `Template.ExecuteTemplate`"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-24539",
              "name": "CVE-2023-24539",
              "shortDescription": {
                "text": "Scanner for CVE-2023-24539"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-24540",
              "name": "CVE-2023-24540",
              "shortDescription": {
                "text": "Scanner for CVE-2023-24540"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-25153",
              "name": "CVE-2023-25153",
              "shortDescription": {
                "text": "Scanner for CVE-2023-25153"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-25173",
              "name": "CVE-2023-25173",
              "shortDescription": {
                "text": "Scanner for CVE-2023-25173"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29400",
              "name": "CVE-2023-29400",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29400"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29402",
              "name": "CVE-2023-29402",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29402"
              },
              "fullDescription": {
                "text": "The scanner looks for Go program binaries that were built with \"cgo\" support (C language bindings)",
                "markdown": "The scanner looks for Go program binaries that were built with \"cgo\" support (C language bindings)"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29403",
              "name": "CVE-2023-29403",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29403"
              },
              "fullDescription": {
                "text": "The scanner checks whether any Go binaries exist in the image, that have the SETUID or SETGID flags enabled",
                "markdown": "The scanner checks whether any Go binaries exist in the image, that have the SETUID or SETGID flags enabled"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29406",
              "name": "CVE-2023-29406",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29406"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29409",
              "name": "CVE-2023-29409",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29409"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-3978",
              "name": "CVE-2023-3978",
              "shortDescription": {
                "text": "Scanner for CVE-2023-3978"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-37920",
              "name": "CVE-2023-37920",
              "shortDescription": {
                "text": "Scanner for CVE-2023-37920"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `certifi.where()` is called, or if any of the following functions are called with the `verify` argument set to false:\n\n* `requests.get()` \n* `requests.options()`\n* `requests.head()`\n* `requests.post()`\n* `requests.put()`\n* `requests.patch()`\n* `requests.delete()`",
                "markdown": "The scanner checks whether the vulnerable function `certifi.where()` is called, or if any of the following functions are called with the `verify` argument set to false:\n\n* `requests.get()` \n* `requests.options()`\n* `requests.head()`\n* `requests.post()`\n* `requests.put()`\n* `requests.patch()`\n* `requests.delete()`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-38325",
              "name": "CVE-2023-38325",
              "shortDescription": {
                "text": "Scanner for CVE-2023-38325"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are called with external input:\n\n* `cryptography.hazmat.primitives.serialization.load_ssh_public_identity`\n* `cryptography.hazmat.primitives.serialization.SSHCertificateBuilder.add_critical_option`",
                "markdown": "The scanner checks whether any of the following vulnerable functions are called with external input:\n\n* `cryptography.hazmat.primitives.serialization.load_ssh_public_identity`\n* `cryptography.hazmat.primitives.serialization.SSHCertificateBuilder.add_critical_option`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-43787",
              "name": "CVE-2023-43787",
              "shortDescription": {
                "text": "Scanner for CVE-2023-43787"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `XCreateImage`\n* `XpmCreateImageFromXpmImage`\n* `XpmCreateImageFromBuffer`\n* `XpmCreateImageFromData`\n* `XpmCreatePixmapFromXpmImage`\n* `XpmCreatePixmapFromBuffer`\n* `XpmCreatePixmapFromData`\n* `XpmReadFileToImage`\n* `XpmReadFileToPixmap`",
                "markdown": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `XCreateImage`\n* `XpmCreateImageFromXpmImage`\n* `XpmCreateImageFromBuffer`\n* `XpmCreateImageFromData`\n* `XpmCreatePixmapFromXpmImage`\n* `XpmCreatePixmapFromBuffer`\n* `XpmCreatePixmapFromData`\n* `XpmReadFileToImage`\n* `XpmReadFileToPixmap`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-39323",
              "name": "CVE-2023-39323",
              "shortDescription": {
                "text": "Scanner for CVE-2023-39323"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information).",
                "markdown": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information)."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-23773",
              "name": "CVE-2022-23773",
              "shortDescription": {
                "text": "Scanner for CVE-2022-23773"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable, since exploitation depends on the structure of the organization's Git repositories (see extended information).",
                "markdown": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable, since exploitation depends on the structure of the organization's Git repositories (see extended information)."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-45285",
              "name": "CVE-2023-45285",
              "shortDescription": {
                "text": "Scanner for CVE-2023-45285"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue is only exploitable via user interaction.",
                "markdown": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue is only exploitable via user interaction."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29404",
              "name": "CVE-2023-29404",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29404"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information).",
                "markdown": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information)."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29405",
              "name": "CVE-2023-29405",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29405"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information).",
                "markdown": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information)."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-43804",
              "name": "CVE-2023-43804",
              "shortDescription": {
                "text": "Scanner for CVE-2023-43804"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are called, with a `headers` argument and `redirect` argument is not set to `False`:\n\n* `urllib3.request()`\n* `urllib3.request_encode_url()`\n* `urllib3.request_encode_body()`\n* `urllib3.urlopen()`\n* `urllib3.PoolManager().request()`\n* `urllib3.PoolManager().request_encode_url()`\n* `urllib3.PoolManager().request_encode_body()`\n* `urllib3.PoolManager().urlopen()`",
                "markdown": "The scanner checks whether any of the following vulnerable functions are called, with a `headers` argument and `redirect` argument is not set to `False`:\n\n* `urllib3.request()`\n* `urllib3.request_encode_url()`\n* `urllib3.request_encode_body()`\n* `urllib3.urlopen()`\n* `urllib3.PoolManager().request()`\n* `urllib3.PoolManager().request_encode_url()`\n* `urllib3.PoolManager().request_encode_body()`\n* `urllib3.PoolManager().urlopen()`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41409",
              "name": "CVE-2022-41409",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41409"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable `pcre2test` binary exists on the scanned artifact.",
                "markdown": "The scanner checks whether the vulnerable `pcre2test` binary exists on the scanned artifact."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0216",
              "name": "CVE-2023-0216",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0216"
              },
              "fullDescription": {
                "text": "When checking ELF files, the scanner checks if at least one of the vulnerable functions is called:\n\n* `d2i_PKCS7()`\n* `d2i_PKCS7_bio()`\n* `d2i_PKCS7_fp()`\n\nWhen checking Python files, the scanner checks if at least one of the vulnerable functions is called with external input to its 1st (`bytes`) argument:\n\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_der_pkcs7_certificates`\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_pem_pkcs7_certificates`",
                "markdown": "When checking ELF files, the scanner checks if at least one of the vulnerable functions is called:\n\n* `d2i_PKCS7()`\n* `d2i_PKCS7_bio()`\n* `d2i_PKCS7_fp()`\n\nWhen checking Python files, the scanner checks if at least one of the vulnerable functions is called with external input to its 1st (`bytes`) argument:\n\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_der_pkcs7_certificates`\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_pem_pkcs7_certificates`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-38545",
              "name": "CVE-2023-38545",
              "shortDescription": {
                "text": "Scanner for CVE-2023-38545"
              },
              "fullDescription": {
                "text": "The scanner checks for any of the vulnerable conditions:\n1. Whether the `curl` CLI tool is called with the vulnerable argument `--socks5-hostname`.\n2. Whether the vulnerable scheme `socks5h://` is referenced anywhere. This includes (but not limited to) command line arguments, environment variables and shell scripts.\n3. Whether the function `curl_easy_setopt` is called when using `libcurl`.\n\nIn the case of the last condition, for fully determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: `curl_easy_setopt` must be called with any of the following arguments:\n\n* `curl_easy_setopt(handle, CURLOPT_PROXYTYPE, CURLPROXY_SOCKS5_HOSTNAME)`\n* `curl_easy_setopt(handle, CURLOPT_PROXY, \"socks5h://...\")`\n* `curl_easy_setopt(handle, CURLOPT_PRE_PROXY, \"socks5h://...\")`",
                "markdown": "The scanner checks for any of the vulnerable conditions:\n1. Whether the `curl` CLI tool is called with the vulnerable argument `--socks5-hostname`.\n2. Whether the vulnerable scheme `socks5h://` is referenced anywhere. This includes (but not limited to) command line arguments, environment variables and shell scripts.\n3. Whether the function `curl_easy_setopt` is called when using `libcurl`.\n\nIn the case of the last condition, for fully determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: `curl_easy_setopt` must be called with any of the following arguments:\n\n* `curl_easy_setopt(handle, CURLOPT_PROXYTYPE, CURLPROXY_SOCKS5_HOSTNAME)`\n* `curl_easy_setopt(handle, CURLOPT_PROXY, \"socks5h://...\")`\n* `curl_easy_setopt(handle, CURLOPT_PRE_PROXY, \"socks5h://...\")`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-5363",
              "name": "CVE-2023-5363",
              "shortDescription": {
                "text": "Scanner for CVE-2023-5363"
              },
              "fullDescription": {
                "text": "The scanner checks if any of the following vulnerable functions are called:\n\n- `EVP_EncryptInit_ex2`\n- `EVP_DecryptInit_ex2`\n- `EVP_CipherInit_ex2`",
                "markdown": "The scanner checks if any of the following vulnerable functions are called:\n\n- `EVP_EncryptInit_ex2`\n- `EVP_DecryptInit_ex2`\n- `EVP_CipherInit_ex2`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-39325",
              "name": "CVE-2023-39325",
              "shortDescription": {
                "text": "Scanner for CVE-2023-39325"
              },
              "fullDescription": {
                "text": "The scanner should check whether one of the functions is used:\n\n* net/http\n\n    - ListenAndServe\n    - ListenAndServeTLS\n    - Serve\n    - ServeTLS\n    - Server.ListenAndServe\n    - Server.ListenAndServeTLS\n    - Server.Serve\n    - Server.ServeTLS\n    - http2serverConn.serve\n    - http2serverConn.processHeaders\n    - http2serverConn.upgradeRequest\n    - http2serverConn.runHandler\n        \n* golang.org/x/net/http2\n\n    - Server.ServeConn\n    - serverConn.serve\n    - serverConn.processHeaders\n    - serverConn.upgradeRequest\n    - serverConn.runHandler",
                "markdown": "The scanner should check whether one of the functions is used:\n\n* net/http\n\n    - ListenAndServe\n    - ListenAndServeTLS\n    - Serve\n    - ServeTLS\n    - Server.ListenAndServe\n    - Server.ListenAndServeTLS\n    - Server.Serve\n    - Server.ServeTLS\n    - http2serverConn.serve\n    - http2serverConn.processHeaders\n    - http2serverConn.upgradeRequest\n    - http2serverConn.runHandler\n        \n* golang.org/x/net/http2\n\n    - Server.ServeConn\n    - serverConn.serve\n    - serverConn.processHeaders\n    - serverConn.upgradeRequest\n    - serverConn.runHandler"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-49082",
              "name": "CVE-2023-49082",
              "shortDescription": {
                "text": "Scanner for CVE-2023-49082"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following functions are called with a non-constant method argument:\n\n* `aiohttp.ClientSession.request()` \n* `aiohttp.ClientSession.ws_connect()`",
                "markdown": "The scanner checks whether any of the following functions are called with a non-constant method argument:\n\n* `aiohttp.ClientSession.request()` \n* `aiohttp.ClientSession.ws_connect()`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-49081",
              "name": "CVE-2023-49081",
              "shortDescription": {
                "text": "Scanner for CVE-2023-49081"
              },
              "fullDescription": {
                "text": "The scanner verifies whether `aiohttp.ClientSession()` is called with a non-constant version argument.\n\nTo determine the applicability of the vulnerability, an additional condition, which is currently not being checked, must be verified: The headers argument should include a connection key.",
                "markdown": "The scanner verifies whether `aiohttp.ClientSession()` is called with a non-constant version argument.\n\nTo determine the applicability of the vulnerability, an additional condition, which is currently not being checked, must be verified: The headers argument should include a connection key."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-49083",
              "name": "CVE-2023-49083",
              "shortDescription": {
                "text": "Scanner for CVE-2023-49083"
              },
              "fullDescription": {
                "text": "The scanner checks whether the following vulnerable functions are called with external input:\n\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_pem_pkcs7_certificates`\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_der_pkcs7_certificates`",
                "markdown": "The scanner checks whether the following vulnerable functions are called with external input:\n\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_pem_pkcs7_certificates`\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_der_pkcs7_certificates`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-35945",
              "name": "CVE-2023-35945",
              "shortDescription": {
                "text": "Scanner for CVE-2023-35945"
              },
              "fullDescription": {
                "text": "The scanner checks whether the Envoy YAML or JSON configuration contains a definition for an upstream cluster.\nFor example -\n```yaml\nstatic_resources:\n\tclusters:\n\t- name: ...\t\n```",
                "markdown": "The scanner checks whether the Envoy YAML or JSON configuration contains a definition for an upstream cluster.\nFor example -\n```yaml\nstatic_resources:\n\tclusters:\n\t- name: ...\t\n```"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-45287",
              "name": "CVE-2023-45287",
              "shortDescription": {
                "text": "Scanner for CVE-2023-45287"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following functions are called:\n\n* `Conn.Handshake()`\n\n* `Conn.HandshakeContext()`\n\n* `Conn.Read()`\n\n* `Conn.Write()`\n\n* `Dial()`\n\n* `DialWithDialer()`\n\n* `Dialer.Dial()`\n\n* `Dialer.DialContext()`",
                "markdown": "The scanner checks whether any of the following functions are called:\n\n* `Conn.Handshake()`\n\n* `Conn.HandshakeContext()`\n\n* `Conn.Read()`\n\n* `Conn.Write()`\n\n* `Dial()`\n\n* `DialWithDialer()`\n\n* `Dialer.Dial()`\n\n* `Dialer.DialContext()`"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-48795",
              "name": "CVE-2023-48795",
              "shortDescription": {
                "text": "Scanner for CVE-2023-48795"
              },
              "fullDescription": {
                "text": "The scanner looks for the OpenSSH/libssh server and client configurations in the following locations:\n\n* `/etc/ssh/sshd_config`\n* `/etc/ssh/ssh_config`\n* `~/.ssh/config`\n* `/root/.ssh/config`\n\nAnd checks if all of the following steps were taken to mitigate the vulnerability:\n\n1. Disabling/overriding the vulnerable `chacha20-poly1305` cipher, which is enabled by default.\n\n2. Turning off `AES-CBC`, unless you combine it with case 3.\n\n3. Disabling/overriding the vulnerable Message Authentication Code (MAC) algorithms, some of which are enabled by default. This is only relevant when `AES-CBC` is enabled.\n\nThe scanner currently only checks for libssh and OpenSSH attack prerequisites, even though other SSH programs may be vulnerable with different prerequisites. Therefore - the scanner either returns an Applicable result (libssh or OpenSSH are applicable) or an Undetermined result (libssh or OpenSSH are not applicable, other SSH programs may be applicable).",
                "markdown": "The scanner looks for the OpenSSH/libssh server and client configurations in the following locations:\n\n* `/etc/ssh/sshd_config`\n* `/etc/ssh/ssh_config`\n* `~/.ssh/config`\n* `/root/.ssh/config`\n\nAnd checks if all of the following steps were taken to mitigate the vulnerability:\n\n1. Disabling/overriding the vulnerable `chacha20-poly1305` cipher, which is enabled by default.\n\n2. Turning off `AES-CBC`, unless you combine it with case 3.\n\n3. Disabling/overriding the vulnerable Message Authentication Code (MAC) algorithms, some of which are enabled by default. This is only relevant when `AES-CBC` is enabled.\n\nThe scanner currently only checks for libssh and OpenSSH attack prerequisites, even though other SSH programs may be vulnerable with different prerequisites. Therefore - the scanner either returns an Applicable result (libssh or OpenSSH are applicable) or an Undetermined result (libssh or OpenSSH are not applicable, other SSH programs may be applicable)."
              },
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private"
              }
            },
            {
              "id": "applic_CVE-2022-4899",
              "name": "CVE-2022-4899",
              "shortDescription": {
                "text": "Scanner for CVE-2022-4899"
              },
              "fullDescription": {
                "text": "The scanner checks whether one of the flags `--output-dir-flat` or `--output-dir-mirror` are used with the `zstd` command.",
                "markdown": "The scanner checks whether one of the flags `--output-dir-flat` or `--output-dir-mirror` are used with the `zstd` command."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-7104",
              "name": "CVE-2023-7104",
              "shortDescription": {
                "text": "Scanner for CVE-2023-7104"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the vulnerable functions are called -\n\n- `sqlite3_open()`\n- `sqlite3_open16()` \n- `sqlite3_open_v2()`\n\nNote that vulnerability can also be exploited for DoS when opening a database with the `sqlite3` command line utility, but in that case it would have no security impact (crashing a forked client process)",
                "markdown": "The scanner checks whether any of the vulnerable functions are called -\n\n- `sqlite3_open()`\n- `sqlite3_open16()` \n- `sqlite3_open_v2()`\n\nNote that vulnerability can also be exploited for DoS when opening a database with the `sqlite3` command line utility, but in that case it would have no security impact (crashing a forked client process)"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0466",
              "name": "CVE-2023-0466",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0466"
              },
              "fullDescription": {
                "text": "The scanner checks whether `X509_VERIFY_PARAM_add0_policy()` is called.\n\nNote that calling `X509_VERIFY_PARAM_set_flags()` with the parameter `X509_V_FLAG_POLICY_CHECK` mitigates this vulnerability. The scanner currently does not check for that mitigation.",
                "markdown": "The scanner checks whether `X509_VERIFY_PARAM_add0_policy()` is called.\n\nNote that calling `X509_VERIFY_PARAM_set_flags()` with the parameter `X509_V_FLAG_POLICY_CHECK` mitigates this vulnerability. The scanner currently does not check for that mitigation."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2024-26130",
              "name": "CVE-2024-26130",
              "shortDescription": {
                "text": "Scanner for CVE-2024-26130"
              },
              "fullDescription": {
                "text": "The scanner should check whether `pkcs12.serialize_key_and_certificates()` is called with either an external `cert` parameter or an external `key` parameter.\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: An `hmac_hash` is set in the `encryption_algorithm` parameter.",
                "markdown": "The scanner should check whether `pkcs12.serialize_key_and_certificates()` is called with either an external `cert` parameter or an external `key` parameter.\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: An `hmac_hash` is set in the `encryption_algorithm` parameter."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2024-25062",
              "name": "CVE-2024-25062",
              "shortDescription": {
                "text": "Scanner for CVE-2024-25062"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following functions are called:\n\n* `xmlValidatePopElement()`\n* `xmlTextReaderClose()`\n* `xmlFreeTextReader() `\n* `xmlTextReaderRead()`\n* `xmlSchemaValidateDoc()`",
                "markdown": "The scanner checks whether any of the following functions are called:\n\n* `xmlValidatePopElement()`\n* `xmlTextReaderClose()`\n* `xmlFreeTextReader() `\n* `xmlTextReaderRead()`\n* `xmlSchemaValidateDoc()`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2024-23334",
              "name": "CVE-2024-23334",
              "shortDescription": {
                "text": "Scanner for CVE-2024-23334"
              },
              "fullDescription": {
                "text": "The scanner checks if any of the following vulnerable functions are called with `follow_symlinks` argument set to `True`:\n\n* `aiohttp.web.static()`\n* `aiohttp.web_routedef.static()`\n* `aiohttp.web.StaticDef()`\n* `aiohttp.web_urldispatcher.UrlDispatcher().add_static()`\n* `aiohttp.web.RouteTableDef().static()`\n* `aiohttp.web.StaticResource()`",
                "markdown": "The scanner checks if any of the following vulnerable functions are called with `follow_symlinks` argument set to `True`:\n\n* `aiohttp.web.static()`\n* `aiohttp.web_routedef.static()`\n* `aiohttp.web.StaticDef()`\n* `aiohttp.web_urldispatcher.UrlDispatcher().add_static()`\n* `aiohttp.web.RouteTableDef().static()`\n* `aiohttp.web.StaticResource()`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2024-24806",
              "name": "CVE-2024-24806",
              "shortDescription": {
                "text": "Scanner for CVE-2024-24806"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `uv_getaddrinfo` is called.",
                "markdown": "The scanner checks whether the vulnerable function `uv_getaddrinfo` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-50387",
              "name": "CVE-2023-50387",
              "shortDescription": {
                "text": "Scanner for CVE-2023-50387"
              },
              "fullDescription": {
                "text": "The scanner checks whether DNSSEC validation is on. Currently, the supported packages are:\n\n* `bind`\n\nFor bind, the scanner checks whether `dnssec-validation` configuration option is set to `auto` or `yes` in the bind configuration file.\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: the attacker must be able to query the DNSSEC resolver to validate their malicious domain.",
                "markdown": "The scanner checks whether DNSSEC validation is on. Currently, the supported packages are:\n\n* `bind`\n\nFor bind, the scanner checks whether `dnssec-validation` configuration option is set to `auto` or `yes` in the bind configuration file.\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: the attacker must be able to query the DNSSEC resolver to validate their malicious domain."
              },
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private"
              }
            },
            {
              "id": "applic_CVE-2023-50868",
              "name": "CVE-2023-50868",
              "shortDescription": {
                "text": "Scanner for CVE-2023-50868"
              },
              "fullDescription": {
                "text": "The scanner checks whether DNSSEC validation is on. Currently, the supported packages are `bind`, `dnsmasq`, `systemd`, `unbound`.\nFor bind, the scanner checks whether `dnssec-validation` configuration option is set to `auto` or `yes` in the bind configuration file.\n\nFor dnsmasq, the scanner checks whether the `dnssec` configuration appears in the dnsmasq configuration file.\n\nFor systemd, the scanner checks whether the `DNSSEC` configuration is set to `true` or `allow-downgrade` in the systemd-resolved configuration file.\n\nFor unbound, the scanner checks whether a `trust-anchor-file` or `auto-trust-anchor-file` file is set in the `server` configuration in the Unbound configuration file.\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: the attacker must be able to query the DNSSEC resolver to validate their malicious domain.",
                "markdown": "The scanner checks whether DNSSEC validation is on. Currently, the supported packages are `bind`, `dnsmasq`, `systemd`, `unbound`.\nFor bind, the scanner checks whether `dnssec-validation` configuration option is set to `auto` or `yes` in the bind configuration file.\n\nFor dnsmasq, the scanner checks whether the `dnssec` configuration appears in the dnsmasq configuration file.\n\nFor systemd, the scanner checks whether the `DNSSEC` configuration is set to `true` or `allow-downgrade` in the systemd-resolved configuration file.\n\nFor unbound, the scanner checks whether a `trust-anchor-file` or `auto-trust-anchor-file` file is set in the `server` configuration in the Unbound configuration file.\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: the attacker must be able to query the DNSSEC resolver to validate their malicious domain."
              },
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private"
              }
            },
            {
              "id": "applic_CVE-2023-50782",
              "name": "CVE-2023-50782",
              "shortDescription": {
                "text": "Scanner for CVE-2023-50782"
              },
              "fullDescription": {
                "text": "The scanner checks whether the PKCS1v15 vulnerable padding is used in a decryption function.",
                "markdown": "The scanner checks whether the PKCS1v15 vulnerable padding is used in a decryption function."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-49210",
              "name": "CVE-2023-49210",
              "shortDescription": {
                "text": "Scanner for CVE-2023-49210"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable `openssl` function is used with external input.",
                "markdown": "The scanner checks whether the vulnerable `openssl` function is used with external input."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-45288",
              "name": "CVE-2023-45288",
              "shortDescription": {
                "text": "Scanner for CVE-2023-45288"
              },
              "fullDescription": {
                "text": "The scanner checks if any of the following functions are called:\n\n* `net/http/ServeTLS`\n* `x/net/http2/Server/ServeConn`\n* `x/net/http2/ConfigureServer`\n\nAn additional condition (that the scanner currently does not check) should be verified to determine if the CVE is applicable: `crypto/tls/Config/NextProtos` or `net/http/TLSNextProto` are not used to disable `HTTP/2`.",
                "markdown": "The scanner checks if any of the following functions are called:\n\n* `net/http/ServeTLS`\n* `x/net/http2/Server/ServeConn`\n* `x/net/http2/ConfigureServer`\n\nAn additional condition (that the scanner currently does not check) should be verified to determine if the CVE is applicable: `crypto/tls/Config/NextProtos` or `net/http/TLSNextProto` are not used to disable `HTTP/2`."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2016-7798",
              "name": "CVE-2016-7798",
              "shortDescription": {
                "text": "Scanner for CVE-2016-7798"
              },
              "fullDescription": {
                "text": "The scanner checks if the function `OpenSSL::Cipher.new()` is called with AES gcm is as the encryption type. \nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The AES IV initialization happens before the key initialization.",
                "markdown": "The scanner checks if the function `OpenSSL::Cipher.new()` is called with AES gcm is as the encryption type. \nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The AES IV initialization happens before the key initialization."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2024-30251",
              "name": "CVE-2024-30251",
              "shortDescription": {
                "text": "Scanner for CVE-2024-30251"
              },
              "fullDescription": {
                "text": "The scanner checks whether a `MultipartReader` was instantiated and used by assigning the result of the `multipart()` function and then calling a vulnerable function on it.\nFor example:\n\n```\nreader = await request.multipart()\nfield = await reader.next()\n```\n\nFor an alternative case, the scanner also checks for direct calls to any of the following vulnerable functions:\n\n- `aiohttp.multipart.BodyPartReader._read_chunk_from_length`\n- `aiohttp.multipart.BodyPartReader.read_chunk`\n- `aiohttp.multipart.BodyPartReader.read`\n- `aiohttp.multipart.BodyPartReader.next`\n- `aiohttp.multipart.BodyPartReader.__anext__`\n- `aiohttp.multipart.BodyPartReader.text`\n- `aiohttp.multipart.BodyPartReader.json`\n- `aiohttp.multipart.BodyPartReader.form`\n- `aiohttp.multipart.BodyPartReader.release`\n- `aiohttp.multipart.MultiPartReader.release`\n- `aiohttp.multipart.MultiPartReader._maybe_release_last_part`\n- `aiohttp.multipart.MultiPartReader.next`\n- `aiohttp.multipart.MultiPartReader.__anext__`\n- `aiohttp.multipart.MultipartResponseWrapper.next`\n- `aiohttp.multipart.MultipartResponseWrapper.__anext__`\n- `aiohttp.web.BaseRequest.post`\n- `aiohttp.web_request.BaseRequest.post`",
                "markdown": "The scanner checks whether a `MultipartReader` was instantiated and used by assigning the result of the `multipart()` function and then calling a vulnerable function on it.\nFor example:\n\n```\nreader = await request.multipart()\nfield = await reader.next()\n```\n\nFor an alternative case, the scanner also checks for direct calls to any of the following vulnerable functions:\n\n- `aiohttp.multipart.BodyPartReader._read_chunk_from_length`\n- `aiohttp.multipart.BodyPartReader.read_chunk`\n- `aiohttp.multipart.BodyPartReader.read`\n- `aiohttp.multipart.BodyPartReader.next`\n- `aiohttp.multipart.BodyPartReader.__anext__`\n- `aiohttp.multipart.BodyPartReader.text`\n- `aiohttp.multipart.BodyPartReader.json`\n- `aiohttp.multipart.BodyPartReader.form`\n- `aiohttp.multipart.BodyPartReader.release`\n- `aiohttp.multipart.MultiPartReader.release`\n- `aiohttp.multipart.MultiPartReader._maybe_release_last_part`\n- `aiohttp.multipart.MultiPartReader.next`\n- `aiohttp.multipart.MultiPartReader.__anext__`\n- `aiohttp.multipart.MultipartResponseWrapper.next`\n- `aiohttp.multipart.MultipartResponseWrapper.__anext__`\n- `aiohttp.web.BaseRequest.post`\n- `aiohttp.web_request.BaseRequest.post`"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2024-32002",
              "name": "CVE-2024-32002",
              "shortDescription": {
                "text": "Scanner for CVE-2024-32002"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2024-32004",
              "name": "CVE-2024-32004",
              "shortDescription": {
                "text": "Scanner for CVE-2024-32004"
              },
              "fullDescription": {
                "text": "The scanner checks whether a local git repository contains a `upload-pack` command in its git config file (`repo-name/.git/config`).",
                "markdown": "The scanner checks whether a local git repository contains a `upload-pack` command in its git config file (`repo-name/.git/config`)."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-44487",
              "name": "CVE-2023-44487",
              "shortDescription": {
                "text": "Scanner for CVE-2023-44487"
              },
              "fullDescription": {
                "text": "The scanner checks for each vendor listed here:\n\n* Tomcat: configuration enables HTTP/2 either through the XML file or Java's `addUpgradeProtocol()` method.\n* Jetty: HTTP/2 enabled through `HTTP2CServerConnectionFactory`/`HTTP2ServerConnectionFactory` class initialization. Note: it also checks whether `jenkins` enables http/2 through its configuration.\n* Nginx: check whether one of the HTTP configurations is enabling http/2.\nNote: the following parameters should be configured properly to make the vulnerability not applicable:\n`keepalive_requests` should be kept at the default setting of 1000 requests\n`http2_max_concurrent_streams` should be kept at the default setting of 128 streams\n`limit_conn and limit_req` should be set `with a reasonable setting balancing application performance and security`. \n* Netty: check whether the `http2` codec classes are used in a java class\n* NodeJS: check whether the `http2.createSecureServer()` is used\n* NGHttp2: check whether a web server is instantiated through one of the symbols `nghttp2_session_server_new` or `listen_and_serve`.\n* Go: check whether a server is instantiated through the `net/http` or `net/http2` packages",
                "markdown": "The scanner checks for each vendor listed here:\n\n* Tomcat: configuration enables HTTP/2 either through the XML file or Java's `addUpgradeProtocol()` method.\n* Jetty: HTTP/2 enabled through `HTTP2CServerConnectionFactory`/`HTTP2ServerConnectionFactory` class initialization. Note: it also checks whether `jenkins` enables http/2 through its configuration.\n* Nginx: check whether one of the HTTP configurations is enabling http/2.\nNote: the following parameters should be configured properly to make the vulnerability not applicable:\n`keepalive_requests` should be kept at the default setting of 1000 requests\n`http2_max_concurrent_streams` should be kept at the default setting of 128 streams\n`limit_conn and limit_req` should be set `with a reasonable setting balancing application performance and security`. \n* Netty: check whether the `http2` codec classes are used in a java class\n* NodeJS: check whether the `http2.createSecureServer()` is used\n* NGHttp2: check whether a web server is instantiated through one of the symbols `nghttp2_session_server_new` or `listen_and_serve`.\n* Go: check whether a server is instantiated through the `net/http` or `net/http2` packages"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-30635",
              "name": "CVE-2022-30635",
              "shortDescription": {
                "text": "Scanner for CVE-2022-30635"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function Decoder.Decode of encoding/gob is called.",
                "markdown": "The scanner checks whether the vulnerable function Decoder.Decode of encoding/gob is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2024-23829",
              "name": "CVE-2024-23829",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-23829"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-0853",
              "name": "CVE-2024-0853",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-0853"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-49568",
              "name": "CVE-2023-49568",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-49568"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-33064",
              "name": "CVE-2022-33064",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-33064"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-23648",
              "name": "CVE-2022-23648",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-23648"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-2511",
              "name": "CVE-2024-2511",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-2511"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-5679",
              "name": "CVE-2023-5679",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-5679"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-4408",
              "name": "CVE-2023-4408",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-4408"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-37276",
              "name": "CVE-2023-37276",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-37276"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-48174",
              "name": "CVE-2022-48174",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-48174"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-28085",
              "name": "CVE-2024-28085",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-28085"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-43786",
              "name": "CVE-2023-43786",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-43786"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-36111",
              "name": "CVE-2022-36111",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-36111"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-31030",
              "name": "CVE-2022-31030",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-31030"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-2398",
              "name": "CVE-2024-2398",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-2398"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-45803",
              "name": "CVE-2023-45803",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-45803"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-29469",
              "name": "CVE-2023-29469",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-29469"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-45284",
              "name": "CVE-2023-45284",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-45284"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42365",
              "name": "CVE-2023-42365",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42365"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-24769",
              "name": "CVE-2022-24769",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-24769"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-41040",
              "name": "CVE-2023-41040",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-41040"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-3817",
              "name": "CVE-2023-3817",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-3817"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-50246",
              "name": "CVE-2023-50246",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-50246"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-29018",
              "name": "CVE-2024-29018",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-29018"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-4603",
              "name": "CVE-2024-4603",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-4603"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-41091",
              "name": "CVE-2021-41091",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-41091"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-34064",
              "name": "CVE-2024-34064",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-34064"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-32020",
              "name": "CVE-2024-32020",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-32020"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-5678",
              "name": "CVE-2023-5678",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-5678"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-49569",
              "name": "CVE-2023-49569",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-49569"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-5517",
              "name": "CVE-2023-5517",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-5517"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-3554",
              "name": "CVE-2022-3554",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-3554"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-46219",
              "name": "CVE-2023-46219",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-46219"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42366",
              "name": "CVE-2023-42366",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42366"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-1394",
              "name": "CVE-2024-1394",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-1394"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-43816",
              "name": "CVE-2021-43816",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-43816"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-1705",
              "name": "CVE-2022-1705",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-1705"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-39326",
              "name": "CVE-2023-39326",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-39326"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42363",
              "name": "CVE-2023-42363",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42363"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-4039",
              "name": "CVE-2023-4039",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-4039"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-50268",
              "name": "CVE-2023-50268",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-50268"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-35195",
              "name": "CVE-2024-35195",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-35195"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-28757",
              "name": "CVE-2024-28757",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-28757"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-32021",
              "name": "CVE-2024-32021",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-32021"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-24532",
              "name": "CVE-2023-24532",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-24532"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-43785",
              "name": "CVE-2023-43785",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-43785"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-2253",
              "name": "CVE-2023-2253",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-2253"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-4203",
              "name": "CVE-2022-4203",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-4203"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `SSL_CTX_set_verify()` or `SSL_set_verify()` functions are called.\nA call with the `SSL_VERIFY_PEER` mode is enabling client authentication and makes this vulnerability possible.",
                "markdown": "The scanner checks whether the `SSL_CTX_set_verify()` or `SSL_set_verify()` functions are called.\nA call with the `SSL_VERIFY_PEER` mode is enabling client authentication and makes this vulnerability possible."
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-2975",
              "name": "CVE-2023-2975",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-2975"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-22195",
              "name": "CVE-2024-22195",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-22195"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-28840",
              "name": "CVE-2023-28840",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-28840"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-27306",
              "name": "CVE-2024-27306",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-27306"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-32465",
              "name": "CVE-2024-32465",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-32465"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-40590",
              "name": "CVE-2023-40590",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-40590"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-34459",
              "name": "CVE-2024-34459",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-34459"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-3826",
              "name": "CVE-2021-3826",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-3826"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-2379",
              "name": "CVE-2024-2379",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-2379"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-45322",
              "name": "CVE-2023-45322",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-45322"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-30629",
              "name": "CVE-2022-30629",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-30629"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-52426",
              "name": "CVE-2023-52426",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-52426"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-6237",
              "name": "CVE-2023-6237",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-6237"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-2466",
              "name": "CVE-2024-2466",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-2466"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-23904",
              "name": "CVE-2020-23904",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-23904"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-48620",
              "name": "CVE-2022-48620",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-48620"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-37891",
              "name": "CVE-2024-37891",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-37891"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-6516",
              "name": "CVE-2023-6516",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-6516"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-5680",
              "name": "CVE-2023-5680",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-5680"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-28841",
              "name": "CVE-2023-28841",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-28841"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-39319",
              "name": "CVE-2023-39319",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-39319"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-4236",
              "name": "CVE-2023-4236",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-4236"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-24786",
              "name": "CVE-2024-24786",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-24786"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-28484",
              "name": "CVE-2023-28484",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-28484"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-24557",
              "name": "CVE-2024-24557",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-24557"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42915",
              "name": "CVE-2023-42915",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42915"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-41190",
              "name": "CVE-2021-41190",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-41190"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-6129",
              "name": "CVE-2023-6129",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-6129"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-47627",
              "name": "CVE-2023-47627",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-47627"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-1255",
              "name": "CVE-2023-1255",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-1255"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-41089",
              "name": "CVE-2021-41089",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-41089"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-38039",
              "name": "CVE-2023-38039",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-38039"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-3341",
              "name": "CVE-2023-3341",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-3341"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-3446",
              "name": "CVE-2023-3446",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-3446"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2018-20225",
              "name": "CVE-2018-20225",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2018-20225"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42364",
              "name": "CVE-2023-42364",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42364"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-31012",
              "name": "CVE-2022-31012",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-31012"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-23471",
              "name": "CVE-2022-23471",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-23471"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-5752",
              "name": "CVE-2023-5752",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-5752"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2009-3767",
              "name": "CVE-2009-3767",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2009-3767"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-38546",
              "name": "CVE-2023-38546",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-38546"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-28842",
              "name": "CVE-2023-28842",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-28842"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-2004",
              "name": "CVE-2024-2004",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-2004"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-22219",
              "name": "CVE-2020-22219",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-22219"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-23903",
              "name": "CVE-2020-23903",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-23903"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-22190",
              "name": "CVE-2024-22190",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-22190"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-0727",
              "name": "CVE-2024-0727",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-0727"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-39318",
              "name": "CVE-2023-39318",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-39318"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-46218",
              "name": "CVE-2023-46218",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-46218"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-40267",
              "name": "CVE-2023-40267",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-40267"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            }
          ],
          "version": "1.0"
        }
      },
      "invocations": [
        {
          "arguments": [
            "/root/.jfrog/dependencies/analyzerManager/jas_scanner/jas_scanner",
            "scan",
            "/tmp/jfrog.cli.temp.-1718761807-1523244624/config.yaml"
          ],
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "/tmp/jfrog.cli.temp.-1718761748-3836255504/image.tar"
          }
        }
      ],
      "results": [
        {
          "ruleId": "applic_CVE-2022-41716",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2021-38297",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-29804",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-30580",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-41722",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-30634",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-41720",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether one of the vulnerable functions `os.dirFS.Open` or  `net/http.Dir.Open` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2023-45283",
          "kind": "pass",
          "message": {
            "text": "The vulnerability is only exploitable when running under the Windows OS.\nSince currently only Linux containers are supported, the scanner will always conclude that this vulnerability is not applicable."
          }
        },
        {
          "ruleId": "applic_CVE-2023-4807",
          "kind": "pass",
          "message": {
            "text": "The vulnerability is only exploitable when running under the Windows OS.\nSince currently only Linux containers are supported, the scanner will always conclude that this vulnerability is not applicable."
          }
        },
        {
          "ruleId": "applic_CVE-2022-2880",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2021-41771",
          "message": {
            "text": "The vulnerable function NewFile is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-41772",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `archive/zip.(*Reader).Open` is used."
          }
        },
        {
          "ruleId": "applic_CVE-2021-43565",
          "message": {
            "text": "The vulnerable function gcmCipher.readCipherPacket is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-43565",
          "message": {
            "text": "The vulnerable function chacha20Poly1305Cipher.readCipherPacket is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-43565",
          "message": {
            "text": "The vulnerable function NewClientConn is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-44717",
          "message": {
            "text": "The vulnerable function forkExec is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-1962",
          "message": {
            "text": "The vulnerable function ParseExprFrom is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-1962",
          "message": {
            "text": "The vulnerable function parser.tryIdentOrType is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-1962",
          "message": {
            "text": "The vulnerable function parser.parsePrimaryExpr is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-1962",
          "message": {
            "text": "The vulnerable function parser.parseUnaryExpr is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-1962",
          "message": {
            "text": "The vulnerable function parser.parseBinaryExpr is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-1962",
          "message": {
            "text": "The vulnerable function parser.parseIfStmt is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-1962",
          "message": {
            "text": "The vulnerable function parser.parseStmt is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-21698",
          "message": {
            "text": "The vulnerable function responseWriterDelegator.WriteHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-21698",
          "message": {
            "text": "The vulnerable function responseWriterDelegator.Write is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-21698",
          "message": {
            "text": "The vulnerable function flusherDelegator.Flush is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-21698",
          "message": {
            "text": "The vulnerable function readerFromDelegator.ReadFrom is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-21698",
          "message": {
            "text": "The vulnerable function flusherDelegator.Flush is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-21698",
          "message": {
            "text": "The vulnerable function readerFromDelegator.ReadFrom is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23772",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `Rat.SetString` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/tempio"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/tempio"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/tempio"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/tempio"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/tempio"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/tempio"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/tempio"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24675",
          "message": {
            "text": "The vulnerable function pem.Decode is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24675",
          "message": {
            "text": "The vulnerable function pem.Decode is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/tempio"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.Compile is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.MustCompile is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.Compile is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.MatchString is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.Compile is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/tempio"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.MustCompile is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/tempio"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.Compile is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/tempio"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.MatchString is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/tempio"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-27191",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-27664",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `net/http.ListenAndServeTLS` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2022-28131",
          "message": {
            "text": "The vulnerable function xml.Decoder.Skip is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function CurveParams.ScalarMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function CurveParams.ScalarBaseMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256GetScalar is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.CombinedMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.ScalarBaseMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.ScalarMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.CombinedMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.ScalarBaseMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.ScalarMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function CurveParams.ScalarMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/tempio"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function CurveParams.ScalarBaseMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/tempio"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256GetScalar is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/tempio"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.CombinedMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/tempio"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.ScalarBaseMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/tempio"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.ScalarMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/tempio"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.CombinedMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/tempio"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.ScalarBaseMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/tempio"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.ScalarMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/tempio"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-2879",
          "message": {
            "text": "The vulnerable function archive/tar.Reader.Next is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-29526",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-30630",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `fs.Glob` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2022-30631",
          "message": {
            "text": "The vulnerable function gzip.Reader.Read is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-30632",
          "message": {
            "text": "The vulnerable function filepath.Glob is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-30633",
          "message": {
            "text": "The vulnerable function Decoder.DecodeElement is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-30633",
          "message": {
            "text": "The vulnerable function Decoder.unmarshal is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-30633",
          "message": {
            "text": "The vulnerable function Decoder.unmarshalPath is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-32148",
          "message": {
            "text": "The vulnerable function Header.Clone is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-32148",
          "message": {
            "text": "The vulnerable function Header.Clone is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-32149",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-32189",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable functions `Float.GobDecode()` or `Rat.GobDecode()` are called."
          }
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///lib/libapk.so.3.12.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///lib/libapk.so.3.12.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/ssl_client"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/ssl_client"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/krb5/plugins/tls/k5tls.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/krb5/plugins/tls/k5tls.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libcurl.so.4.8.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libcurl.so.4.8.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libcurl.so.4.8.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/lib/python3.11/lib-dynload/_ssl.cpython-311-x86_64-linux-musl.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/lib/python3.11/lib-dynload/_ssl.cpython-311-x86_64-linux-musl.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/lib/python3.11/lib-dynload/_ssl.cpython-311-x86_64-linux-musl.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/lib/python3.11/site-packages/cryptography/hazmat/bindings/_rust.abi3.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/lib/python3.11/site-packages/cryptography/hazmat/bindings/_rust.abi3.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/lib/python3.11/site-packages/cryptography/hazmat/bindings/_rust.abi3.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/lib/python3.11/site-packages/cryptography/hazmat/bindings/_rust.abi3.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/lib/python3.11/site-packages/cryptography/hazmat/bindings/_rust.abi3.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/lib/python3.11/site-packages/cryptography/hazmat/bindings/_rust.abi3.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/lib/python3.11/site-packages/cryptography/hazmat/bindings/_rust.abi3.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/lib/python3.11/site-packages/cryptography/hazmat/bindings/_rust.abi3.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/lib/python3.11/site-packages/cryptography/hazmat/bindings/_rust.abi3.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/lib/python3.11/site-packages/cryptography/hazmat/bindings/_rust.abi3.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/lib/python3.11/site-packages/cryptography/hazmat/bindings/_rust.abi3.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/lib/python3.11/site-packages/cryptography/hazmat/bindings/_rust.abi3.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/lib/python3.11/site-packages/cryptography/hazmat/bindings/_rust.abi3.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/lib/python3.11/site-packages/cryptography/hazmat/bindings/_rust.abi3.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/lib/python3.11/site-packages/cryptography/hazmat/bindings/_rust.abi3.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///lib/libapk.so.3.12.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///lib/libapk.so.3.12.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/ssl_client"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/ssl_client"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/krb5/plugins/tls/k5tls.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/krb5/plugins/tls/k5tls.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libcurl.so.4.8.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libcurl.so.4.8.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libcurl.so.4.8.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/lib/python3.11/lib-dynload/_ssl.cpython-311-x86_64-linux-musl.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/lib/python3.11/lib-dynload/_ssl.cpython-311-x86_64-linux-musl.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/lib/python3.11/lib-dynload/_ssl.cpython-311-x86_64-linux-musl.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/lib/python3.11/site-packages/cryptography/hazmat/bindings/_rust.abi3.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/lib/python3.11/site-packages/cryptography/hazmat/bindings/_rust.abi3.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/lib/python3.11/site-packages/cryptography/hazmat/bindings/_rust.abi3.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/lib/python3.11/site-packages/cryptography/hazmat/bindings/_rust.abi3.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/lib/python3.11/site-packages/cryptography/hazmat/bindings/_rust.abi3.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/lib/python3.11/site-packages/cryptography/hazmat/bindings/_rust.abi3.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/lib/python3.11/site-packages/cryptography/hazmat/bindings/_rust.abi3.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/lib/python3.11/site-packages/cryptography/hazmat/bindings/_rust.abi3.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/lib/python3.11/site-packages/cryptography/hazmat/bindings/_rust.abi3.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/lib/python3.11/site-packages/cryptography/hazmat/bindings/_rust.abi3.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/lib/python3.11/site-packages/cryptography/hazmat/bindings/_rust.abi3.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/lib/python3.11/site-packages/cryptography/hazmat/bindings/_rust.abi3.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/lib/python3.11/site-packages/cryptography/hazmat/bindings/_rust.abi3.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/lib/python3.11/site-packages/cryptography/hazmat/bindings/_rust.abi3.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/lib/python3.11/site-packages/cryptography/hazmat/bindings/_rust.abi3.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-39199",
          "message": {
            "text": "The vulnerable function DefaultOptions is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-52425",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the next functions are called:\n\n* `XML_Parse()`\n* `XML_ParseBuffer()`\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The vulnerable functions are used to parse an attacker-controlled file by chunks."
          }
        },
        {
          "ruleId": "applic_CVE-2022-40897",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `find_external_links` is called.\n\nNote that the scanner does not check for an additional vulnerable case in which the `pip` CLI tool is executed with the  `--editable` flag. In this case, the vulnerability will lead to a DoS of a forked command-line utility, which has a minimal security impact."
          }
        },
        {
          "ruleId": "applic_CVE-2022-41715",
          "message": {
            "text": "The vulnerable function regexp/syntax.parse is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41717",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-41723",
          "message": {
            "text": "The vulnerable function Decoder.DecodeFull is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41723",
          "message": {
            "text": "The vulnerable function Decoder.Write is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41723",
          "message": {
            "text": "The vulnerable function Decoder.parseFieldLiteral is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41723",
          "message": {
            "text": "The vulnerable function Decoder.readString is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41724",
          "kind": "pass",
          "message": {
            "text": "The CVE is never applicable. A closer inspection of the issue shows there are no potential user-controllable paths that allow creating a panic (see also original commit message - https://go.dev/cl/468125)"
          }
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.ReadMIMEHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.ReadForm is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.readForm is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.NextPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function newPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Part.populateHeaders is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.NextRawPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.nextPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.ReadMIMEHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.ReadForm is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.readForm is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.NextPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function newPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Part.populateHeaders is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.NextRawPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.nextPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0217",
          "kind": "pass",
          "message": {
            "text": "When checking ELF files, the scanner checks whether the vulnerable `EVP_PKEY_public_check()` function is called.\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked"
          }
        },
        {
          "ruleId": "applic_CVE-2023-0401",
          "kind": "pass",
          "message": {
            "text": "When checking ELF files, the scanner checks whether at least one of the vulnerable API calls is called:\n\n* `PKCS7_decrypt`\n* `PKCS7_dataInit`\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked"
          }
        },
        {
          "ruleId": "applic_CVE-2023-24534",
          "message": {
            "text": "The vulnerable function Reader.ReadMIMEHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24534",
          "message": {
            "text": "The vulnerable function Reader.upcomingHeaderNewlines is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24537",
          "message": {
            "text": "The vulnerable function Scanner.scan is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24537",
          "message": {
            "text": "The vulnerable function ParseExprFrom is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24537",
          "message": {
            "text": "The vulnerable function ParseExpr is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24538",
          "message": {
            "text": "The vulnerable function Template.Execute is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24538",
          "message": {
            "text": "The vulnerable function Template.ExecuteTemplate is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24539",
          "message": {
            "text": "The vulnerable function cssValueFilter is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24539",
          "message": {
            "text": "The vulnerable function escaper.commit is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24539",
          "message": {
            "text": "The vulnerable function Template.Execute is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24539",
          "message": {
            "text": "The vulnerable function Template.ExecuteTemplate is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24539",
          "message": {
            "text": "The vulnerable function cssValueFilter is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/tempio"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24540",
          "message": {
            "text": "The vulnerable function nextJSCtx is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24540",
          "message": {
            "text": "The vulnerable function Template.Execute is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24540",
          "message": {
            "text": "The vulnerable function Template.ExecuteTemplate is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24540",
          "message": {
            "text": "The vulnerable function nextJSCtx is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/tempio"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-25153",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2023-25173",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2023-29400",
          "message": {
            "text": "The vulnerable function appendCmd is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29400",
          "message": {
            "text": "The vulnerable function htmlNospaceEscaper is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29400",
          "message": {
            "text": "The vulnerable function Template.Execute is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29400",
          "message": {
            "text": "The vulnerable function Template.ExecuteTemplate is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29400",
          "message": {
            "text": "The vulnerable function htmlNospaceEscaper is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/tempio"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29402",
          "kind": "pass",
          "message": {
            "text": "The scanner looks for Go program binaries that were built with \"cgo\" support (C language bindings)"
          }
        },
        {
          "ruleId": "applic_CVE-2023-29403",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any Go binaries exist in the image, that have the SETUID or SETGID flags enabled"
          }
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Client.Get is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Client.Do is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Client.Post is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Client.PostForm is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Client.Head is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Client.CloseIdleConnections is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Request.Write is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Request.WriteProxy is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Request.write is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Transport.RoundTrip is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Transport.CloseIdleConnections is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Transport.CancelRequest is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.Write is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.Handshake is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.HandshakeContext is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.Read is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.verifyServerCertificate is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.processCertsFromClient is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Dial is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function DialWithDialer is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Dialer.DialContext is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-3978",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2023-37920",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `certifi.where()` is called, or if any of the following functions are called with the `verify` argument set to false:\n\n* `requests.get()` \n* `requests.options()`\n* `requests.head()`\n* `requests.post()`\n* `requests.put()`\n* `requests.patch()`\n* `requests.delete()`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-38325",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following vulnerable functions are called with external input:\n\n* `cryptography.hazmat.primitives.serialization.load_ssh_public_identity`\n* `cryptography.hazmat.primitives.serialization.SSHCertificateBuilder.add_critical_option`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-43787",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `XCreateImage`\n* `XpmCreateImageFromXpmImage`\n* `XpmCreateImageFromBuffer`\n* `XpmCreateImageFromData`\n* `XpmCreatePixmapFromXpmImage`\n* `XpmCreatePixmapFromBuffer`\n* `XpmCreatePixmapFromData`\n* `XpmReadFileToImage`\n* `XpmReadFileToPixmap`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-39323",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information)."
          }
        },
        {
          "ruleId": "applic_CVE-2022-23773",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable, since exploitation depends on the structure of the organization's Git repositories (see extended information)."
          }
        },
        {
          "ruleId": "applic_CVE-2023-45285",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue is only exploitable via user interaction."
          }
        },
        {
          "ruleId": "applic_CVE-2023-29404",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information)."
          }
        },
        {
          "ruleId": "applic_CVE-2023-29405",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information)."
          }
        },
        {
          "ruleId": "applic_CVE-2023-43804",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following vulnerable functions are called, with a `headers` argument and `redirect` argument is not set to `False`:\n\n* `urllib3.request()`\n* `urllib3.request_encode_url()`\n* `urllib3.request_encode_body()`\n* `urllib3.urlopen()`\n* `urllib3.PoolManager().request()`\n* `urllib3.PoolManager().request_encode_url()`\n* `urllib3.PoolManager().request_encode_body()`\n* `urllib3.PoolManager().urlopen()`"
          }
        },
        {
          "ruleId": "applic_CVE-2022-41409",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable `pcre2test` binary exists on the scanned artifact."
          }
        },
        {
          "ruleId": "applic_CVE-2023-0216",
          "kind": "pass",
          "message": {
            "text": "When checking ELF files, the scanner checks if at least one of the vulnerable functions is called:\n\n* `d2i_PKCS7()`\n* `d2i_PKCS7_bio()`\n* `d2i_PKCS7_fp()`\n\nWhen checking Python files, the scanner checks if at least one of the vulnerable functions is called with external input to its 1st (`bytes`) argument:\n\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_der_pkcs7_certificates`\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_pem_pkcs7_certificates`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-38545",
          "kind": "pass",
          "message": {
            "text": "The scanner checks for any of the vulnerable conditions:\n1. Whether the `curl` CLI tool is called with the vulnerable argument `--socks5-hostname`.\n2. Whether the vulnerable scheme `socks5h://` is referenced anywhere. This includes (but not limited to) command line arguments, environment variables and shell scripts.\n3. Whether the function `curl_easy_setopt` is called when using `libcurl`.\n\nIn the case of the last condition, for fully determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: `curl_easy_setopt` must be called with any of the following arguments:\n\n* `curl_easy_setopt(handle, CURLOPT_PROXYTYPE, CURLPROXY_SOCKS5_HOSTNAME)`\n* `curl_easy_setopt(handle, CURLOPT_PROXY, \"socks5h://...\")`\n* `curl_easy_setopt(handle, CURLOPT_PRE_PROXY, \"socks5h://...\")`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-5363",
          "kind": "pass",
          "message": {
            "text": "The scanner checks if any of the following vulnerable functions are called:\n\n- `EVP_EncryptInit_ex2`\n- `EVP_DecryptInit_ex2`\n- `EVP_CipherInit_ex2`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "kind": "pass",
          "message": {
            "text": "The scanner should check whether one of the functions is used:\n\n* net/http\n\n    - ListenAndServe\n    - ListenAndServeTLS\n    - Serve\n    - ServeTLS\n    - Server.ListenAndServe\n    - Server.ListenAndServeTLS\n    - Server.Serve\n    - Server.ServeTLS\n    - http2serverConn.serve\n    - http2serverConn.processHeaders\n    - http2serverConn.upgradeRequest\n    - http2serverConn.runHandler\n        \n* golang.org/x/net/http2\n\n    - Server.ServeConn\n    - serverConn.serve\n    - serverConn.processHeaders\n    - serverConn.upgradeRequest\n    - serverConn.runHandler"
          }
        },
        {
          "ruleId": "applic_CVE-2023-49082",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following functions are called with a non-constant method argument:\n\n* `aiohttp.ClientSession.request()` \n* `aiohttp.ClientSession.ws_connect()`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-49081",
          "kind": "pass",
          "message": {
            "text": "The scanner verifies whether `aiohttp.ClientSession()` is called with a non-constant version argument.\n\nTo determine the applicability of the vulnerability, an additional condition, which is currently not being checked, must be verified: The headers argument should include a connection key."
          }
        },
        {
          "ruleId": "applic_CVE-2023-49083",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the following vulnerable functions are called with external input:\n\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_pem_pkcs7_certificates`\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_der_pkcs7_certificates`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-35945",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the Envoy YAML or JSON configuration contains a definition for an upstream cluster.\nFor example -\n```yaml\nstatic_resources:\n\tclusters:\n\t- name: ...\t\n```"
          }
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/cas"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/tempio"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4899",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether one of the flags `--output-dir-flat` or `--output-dir-mirror` are used with the `zstd` command."
          }
        },
        {
          "ruleId": "applic_CVE-2023-7104",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the vulnerable functions are called -\n\n- `sqlite3_open()`\n- `sqlite3_open16()` \n- `sqlite3_open_v2()`\n\nNote that vulnerability can also be exploited for DoS when opening a database with the `sqlite3` command line utility, but in that case it would have no security impact (crashing a forked client process)"
          }
        },
        {
          "ruleId": "applic_CVE-2023-0466",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether `X509_VERIFY_PARAM_add0_policy()` is called.\n\nNote that calling `X509_VERIFY_PARAM_set_flags()` with the parameter `X509_V_FLAG_POLICY_CHECK` mitigates this vulnerability. The scanner currently does not check for that mitigation."
          }
        },
        {
          "ruleId": "applic_CVE-2024-26130",
          "kind": "pass",
          "message": {
            "text": "The scanner should check whether `pkcs12.serialize_key_and_certificates()` is called with either an external `cert` parameter or an external `key` parameter.\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: An `hmac_hash` is set in the `encryption_algorithm` parameter."
          }
        },
        {
          "ruleId": "applic_CVE-2024-25062",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following functions are called:\n\n* `xmlValidatePopElement()`\n* `xmlTextReaderClose()`\n* `xmlFreeTextReader() `\n* `xmlTextReaderRead()`\n* `xmlSchemaValidateDoc()`"
          }
        },
        {
          "ruleId": "applic_CVE-2024-23334",
          "kind": "pass",
          "message": {
            "text": "The scanner checks if any of the following vulnerable functions are called with `follow_symlinks` argument set to `True`:\n\n* `aiohttp.web.static()`\n* `aiohttp.web_routedef.static()`\n* `aiohttp.web.StaticDef()`\n* `aiohttp.web_urldispatcher.UrlDispatcher().add_static()`\n* `aiohttp.web.RouteTableDef().static()`\n* `aiohttp.web.StaticResource()`"
          }
        },
        {
          "ruleId": "applic_CVE-2024-24806",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `uv_getaddrinfo` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2023-50782",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the PKCS1v15 vulnerable padding is used in a decryption function."
          }
        },
        {
          "ruleId": "applic_CVE-2023-49210",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable `openssl` function is used with external input."
          }
        },
        {
          "ruleId": "applic_CVE-2023-45288",
          "kind": "pass",
          "message": {
            "text": "The scanner checks if any of the following functions are called:\n\n* `net/http/ServeTLS`\n* `x/net/http2/Server/ServeConn`\n* `x/net/http2/ConfigureServer`\n\nAn additional condition (that the scanner currently does not check) should be verified to determine if the CVE is applicable: `crypto/tls/Config/NextProtos` or `net/http/TLSNextProto` are not used to disable `HTTP/2`."
          }
        },
        {
          "ruleId": "applic_CVE-2016-7798",
          "kind": "pass",
          "message": {
            "text": "The scanner checks if the function `OpenSSL::Cipher.new()` is called with AES gcm is as the encryption type. \nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The AES IV initialization happens before the key initialization."
          }
        },
        {
          "ruleId": "applic_CVE-2024-30251",
          "message": {
            "text": "The vulnerable function `multipart` is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp6n38g_kh/unpacked/filesystem/blobs/sha256/dc504c936e443823db3dfa71c98b88378d14df5fa097febf0cb7819de0546afe/usr/src/supervisor/supervisor/api/backups.py"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 29,
                  "endLine": 260,
                  "endColumn": 42,
                  "snippet": {
                    "text": "reader.next()"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2024-32002",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2024-32004",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether a local git repository contains a `upload-pack` command in its git config file (`repo-name/.git/config`)."
          }
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "kind": "pass",
          "message": {
            "text": "The scanner checks for each vendor listed here:\n\n* Tomcat: configuration enables HTTP/2 either through the XML file or Java's `addUpgradeProtocol()` method.\n* Jetty: HTTP/2 enabled through `HTTP2CServerConnectionFactory`/`HTTP2ServerConnectionFactory` class initialization. Note: it also checks whether `jenkins` enables http/2 through its configuration.\n* Nginx: check whether one of the HTTP configurations is enabling http/2.\nNote: the following parameters should be configured properly to make the vulnerability not applicable:\n`keepalive_requests` should be kept at the default setting of 1000 requests\n`http2_max_concurrent_streams` should be kept at the default setting of 128 streams\n`limit_conn and limit_req` should be set `with a reasonable setting balancing application performance and security`. \n* Netty: check whether the `http2` codec classes are used in a java class\n* NodeJS: check whether the `http2.createSecureServer()` is used\n* NGHttp2: check whether a web server is instantiated through one of the symbols `nghttp2_session_server_new` or `listen_and_serve`.\n* Go: check whether a server is instantiated through the `net/http` or `net/http2` packages"
          }
        },
        {
          "ruleId": "applic_CVE-2022-30635",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function Decoder.Decode of encoding/gob is called."
          }
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://jfrog.com/help/r/jfrog-security-documentation/jfrog-advanced-security",
          "name": "JFrog Secrets scanner",
          "rules": [
            {
              "id": "REQ.SECRET.GENERIC.TEXT",
              "name": "REQ.SECRET.GENERIC.TEXT",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.TEXT"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive"
              }
            },
            {
              "id": "REQ.SECRET.GENERIC.CODE",
              "name": "REQ.SECRET.GENERIC.CODE",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.CODE"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive"
              }
            },
            {
              "id": "REQ.SECRET.GENERIC.URL",
              "name": "REQ.SECRET.GENERIC.URL",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.URL"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive"
              }
            },
            {
              "id": "REQ.SECRET.KEYS",
              "name": "REQ.SECRET.KEYS",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.KEYS"
              },
              "fullDescription": {
                "text": "\nStoring an API key in the image could lead to several risks.\n\nIf the key is associated with a wide scope of privileges, attackers could extract it from a single image or firmware and use it maliciously to attack many targets. For example, if the embedded key allows querying/modifying data for all cloud user accounts, without per-user authentication, the attackers who extract it would gain access to system-wide data.\n\nIf the cloud/SaaS provider bills by key usage - for example, every million queries cost the key's owner a fixed sum of money - attackers could use the keys for their own purposes (or just as a form of vandalism), incurring a large cost to the legitimate user or operator.\n\n## Best practices\n\nUse narrow scopes for stored API keys. As much as possible, API keys should be unique per host and require additional authentication with the user's individual credentials for any sensitive actions.\n\nAvoid placing keys whose use incurs costs directly in the image. Store the key with any software or hardware protection available on the host for key storage (such as operating system key-stores, hardware cryptographic storage mechanisms or cloud-managed secure storage services such as [AWS KMS](https://aws.amazon.com/kms/)).\n\nTokens that were detected as exposed should be revoked and replaced -\n\n* [AWS Key Revocation](https://aws.amazon.com/premiumsupport/knowledge-center/delete-access-key/#:~:text=If%20you%20see%20a%20warning,the%20confirmation%20box%2C%20choose%20Deactivate.)\n* [GCP Key Revocation](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/CloudIAM/delete-api-keys.html)\n* [Azure Key Revocation](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops\u0026tabs=Windows#revoke-a-pat)\n* [GitHub Key Revocation](https://docs.github.com/en/rest/apps/oauth-applications#delete-an-app-authorization)\n",
                "markdown": "\nStoring an API key in the image could lead to several risks.\n\nIf the key is associated with a wide scope of privileges, attackers could extract it from a single image or firmware and use it maliciously to attack many targets. For example, if the embedded key allows querying/modifying data for all cloud user accounts, without per-user authentication, the attackers who extract it would gain access to system-wide data.\n\nIf the cloud/SaaS provider bills by key usage - for example, every million queries cost the key's owner a fixed sum of money - attackers could use the keys for their own purposes (or just as a form of vandalism), incurring a large cost to the legitimate user or operator.\n\n## Best practices\n\nUse narrow scopes for stored API keys. As much as possible, API keys should be unique per host and require additional authentication with the user's individual credentials for any sensitive actions.\n\nAvoid placing keys whose use incurs costs directly in the image. Store the key with any software or hardware protection available on the host for key storage (such as operating system key-stores, hardware cryptographic storage mechanisms or cloud-managed secure storage services such as [AWS KMS](https://aws.amazon.com/kms/)).\n\nTokens that were detected as exposed should be revoked and replaced -\n\n* [AWS Key Revocation](https://aws.amazon.com/premiumsupport/knowledge-center/delete-access-key/#:~:text=If%20you%20see%20a%20warning,the%20confirmation%20box%2C%20choose%20Deactivate.)\n* [GCP Key Revocation](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/CloudIAM/delete-api-keys.html)\n* [Azure Key Revocation](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops\u0026tabs=Windows#revoke-a-pat)\n* [GitHub Key Revocation](https://docs.github.com/en/rest/apps/oauth-applications#delete-an-app-authorization)\n"
              },
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private"
              }
            }
          ],
          "version": "1.0"
        }
      },
      "invocations": [
        {
          "arguments": [
            "/root/.jfrog/dependencies/analyzerManager/jas_scanner/jas_scanner",
            "scan",
            "/tmp/jfrog.cli.temp.-1718761807-1523244624/config.yaml"
          ],
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "/tmp/jfrog.cli.temp.-1718761748-3836255504/image.tar"
          }
        }
      ],
      "results": []
    }
  ]
}
