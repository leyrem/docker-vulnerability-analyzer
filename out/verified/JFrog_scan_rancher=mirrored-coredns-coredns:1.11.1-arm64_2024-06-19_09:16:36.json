{
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "informationUri": "https://docs.jfrog-applications.jfrog.io/jfrog-security-features/sca",
          "name": "JFrog Xray SCA",
          "rules": [
            {
              "id": "CVE-2023-44487_golang.org/x/net_0.14.0",
              "shortDescription": {
                "text": "[CVE-2023-44487] golang.org/x/net 0.14.0"
              },
              "help": {
                "text": "The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__72c78ea0a9a16495ba718bcfd5a1ae146733d5f488e881f4097b99862e4210f7.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-39325_golang.org/x/net_0.14.0",
              "shortDescription": {
                "text": "[CVE-2023-39325] golang.org/x/net 0.14.0"
              },
              "help": {
                "text": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing. With the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection. This issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2. The default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__72c78ea0a9a16495ba718bcfd5a1ae146733d5f488e881f4097b99862e4210f7.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-44487_google.golang.org/grpc_1.57.0",
              "shortDescription": {
                "text": "[CVE-2023-44487] google.golang.org/grpc 1.57.0"
              },
              "help": {
                "text": "The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__72c78ea0a9a16495ba718bcfd5a1ae146733d5f488e881f4097b99862e4210f7.tar `       | [1.56.3], [1.57.1], [1.58.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2024-22189_github.com/quic-go/quic-go_0.37.4",
              "shortDescription": {
                "text": "[CVE-2024-22189] github.com/quic-go/quic-go 0.37.4"
              },
              "help": {
                "text": "quic-go is an implementation of the QUIC protocol in Go. Prior to version 0.42.0, an attacker can cause its peer to run out of memory sending a large number of `NEW_CONNECTION_ID` frames that retire old connection IDs. The receiver is supposed to respond to each retirement frame with a `RETIRE_CONNECTION_ID` frame. The attacker can prevent the receiver from sending out (the vast majority of) these `RETIRE_CONNECTION_ID` frames by collapsing the peers congestion window (by selectively acknowledging received packets) and by manipulating the peer's RTT estimate. Version 0.42.0 contains a patch for the issue. No known workarounds are available.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__72c78ea0a9a16495ba718bcfd5a1ae146733d5f488e881f4097b99862e4210f7.tar `       | [0.42.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45288_github.com/golang/go_1.20.7",
              "shortDescription": {
                "text": "[CVE-2023-45288] github.com/golang/go 1.20.7"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__72c78ea0a9a16495ba718bcfd5a1ae146733d5f488e881f4097b99862e4210f7.tar `       | [1.21.9], [1.22.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-45288_golang.org/x/net_0.14.0",
              "shortDescription": {
                "text": "[CVE-2023-45288] golang.org/x/net 0.14.0"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__72c78ea0a9a16495ba718bcfd5a1ae146733d5f488e881f4097b99862e4210f7.tar `       | [0.23.0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-48795_golang.org/x/crypto_0.12.0",
              "shortDescription": {
                "text": "[CVE-2023-48795] golang.org/x/crypto 0.12.0"
              },
              "help": {
                "text": "The SSH transport protocol with certain OpenSSH extensions, found in OpenSSH before 9.6 and other products, allows remote attackers to bypass integrity checks such that some packets are omitted (from the extension negotiation message), and a client and server may consequently end up with a connection for which some security features have been downgraded or disabled, aka a Terrapin attack. This occurs because the SSH Binary Packet Protocol (BPP), implemented by these extensions, mishandles the handshake phase and mishandles use of sequence numbers. For example, there is an effective attack against SSH's use of ChaCha20-Poly1305 (and CBC with Encrypt-then-MAC). The bypass occurs in chacha20-poly1305@openssh.com and (if CBC is used) the -etm@openssh.com MAC algorithms. This also affects Maverick Synergy Java SSH API before 3.1.0-SNAPSHOT, Dropbear through 2022.83, Ssh before 5.1.1 in Erlang/OTP, PuTTY before 0.80, AsyncSSH before 2.14.2, golang.org/x/crypto before 0.17.0, libssh before 0.10.6, libssh2 through 1.11.0, Thorn Tech SFTP Gateway before 3.4.6, Tera Term before 5.1, Paramiko before 3.4.0, jsch before 0.2.15, SFTPGo before 2.5.6, Netgate pfSense Plus through 23.09.1, Netgate pfSense CE through 2.7.2, HPN-SSH through 18.2.0, ProFTPD before 1.3.8b (and before 1.3.9rc2), ORYX CycloneSSH before 2.3.4, NetSarang XShell 7 before Build 0144, CrushFTP before 10.6.0, ConnectBot SSH library before 2.2.22, Apache MINA sshd through 2.11.0, sshj through 0.37.0, TinySSH through 20230101, trilead-ssh2 6401, LANCOM LCOS and LANconfig, FileZilla before 3.66.4, Nova before 11.8, PKIX-SSH before 14.4, SecureCRT before 9.4.3, Transmit5 before 5.10.4, Win32-OpenSSH before 9.5.0.0p1-Beta, WinSCP before 6.2.2, Bitvise SSH Server before 9.32, Bitvise SSH Client before 9.33, KiTTY through 0.76.1.13, the net-ssh gem 7.2.0 for Ruby, the mscdex ssh2 module before 1.15.0 for Node.js, the thrussh library before 0.35.1 for Rust, and the Russh crate before 0.40.2 for Rust.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Undetermined       | `sha256__72c78ea0a9a16495ba718bcfd5a1ae146733d5f488e881f4097b99862e4210f7.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-49295_github.com/quic-go/quic-go_0.37.4",
              "shortDescription": {
                "text": "[CVE-2023-49295] github.com/quic-go/quic-go 0.37.4"
              },
              "help": {
                "text": "quic-go is an implementation of the QUIC protocol (RFC 9000, RFC 9001, RFC 9002) in Go. An attacker can cause its peer to run out of memory sending a large number of PATH_CHALLENGE frames. The receiver is supposed to respond to each PATH_CHALLENGE frame with a PATH_RESPONSE frame. The attacker can prevent the receiver from sending out (the vast majority of) these PATH_RESPONSE frames by collapsing the peers congestion window (by selectively acknowledging received packets) and by manipulating the peer's RTT estimate. This vulnerability has been patched in versions 0.37.7, 0.38.2 and 0.39.4.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__72c78ea0a9a16495ba718bcfd5a1ae146733d5f488e881f4097b99862e4210f7.tar `       | [0.37.7], [0.38.2], [0.39.4], [0.40.1]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2024-24786_google.golang.org/protobuf_1.31.0",
              "shortDescription": {
                "text": "[CVE-2024-24786] google.golang.org/protobuf 1.31.0"
              },
              "help": {
                "text": "The protojson.Unmarshal function can enter an infinite loop when unmarshaling certain forms of invalid JSON. This condition can occur when unmarshaling into a message which contains a google.protobuf.Any value, or when the UnmarshalOptions.DiscardUnknown option is set.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__72c78ea0a9a16495ba718bcfd5a1ae146733d5f488e881f4097b99862e4210f7.tar `       | [1.33.0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-39326_github.com/golang/go_1.20.7",
              "shortDescription": {
                "text": "[CVE-2023-39326] github.com/golang/go 1.20.7"
              },
              "help": {
                "text": "A malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body. A malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request. Chunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__72c78ea0a9a16495ba718bcfd5a1ae146733d5f488e881f4097b99862e4210f7.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-39318_github.com/golang/go_1.20.7",
              "shortDescription": {
                "text": "[CVE-2023-39318] github.com/golang/go 1.20.7"
              },
              "help": {
                "text": "The html/template package does not properly handle HTML-like \"\" comment tokens, nor hashbang \"#!\" comment tokens, in \u003cscript\u003e contexts. This may cause the template parser to improperly interpret the contents of \u003cscript\u003e contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__72c78ea0a9a16495ba718bcfd5a1ae146733d5f488e881f4097b99862e4210f7.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2023-39319_github.com/golang/go_1.20.7",
              "shortDescription": {
                "text": "[CVE-2023-39319] github.com/golang/go 1.20.7"
              },
              "help": {
                "text": "The html/template package does not apply the proper rules for handling occurrences of \"\u003cscript\", \"\u003c!--\", and \"\u003c/script\" within JS literals in \u003cscript\u003e contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__72c78ea0a9a16495ba718bcfd5a1ae146733d5f488e881f4097b99862e4210f7.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2023-45284_github.com/golang/go_1.20.7",
              "shortDescription": {
                "text": "[CVE-2023-45284] github.com/golang/go 1.20.7"
              },
              "help": {
                "text": "On Windows, The IsLocal function does not correctly detect reserved device names in some cases. Reserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local. With fix, IsLocal now correctly reports these names as non-local.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__72c78ea0a9a16495ba718bcfd5a1ae146733d5f488e881f4097b99862e4210f7.tar `       | [1.20.11], [1.21.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-45285_github.com/golang/go_1.20.7",
              "shortDescription": {
                "text": "[CVE-2023-45285] github.com/golang/go 1.20.7"
              },
              "help": {
                "text": "Using go get to fetch a module with the \".git\" suffix may unexpectedly fallback to the insecure \"git://\" protocol if the module is unavailable via the secure \"https://\" and \"git+ssh://\" protocols, even if GOINSECURE is not set for said module. This only affects users who are not using the module proxy and are fetching modules directly (i.e. GOPROXY=off).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__72c78ea0a9a16495ba718bcfd5a1ae146733d5f488e881f4097b99862e4210f7.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-39323_github.com/golang/go_1.20.7",
              "shortDescription": {
                "text": "[CVE-2023-39323] github.com/golang/go 1.20.7"
              },
              "help": {
                "text": "Line directives (\"//line\") can be used to bypass the restrictions on \"//go:cgo_\" directives, allowing blocked linker and compiler flags to be passed during compilation. This can result in unexpected execution of arbitrary code when running \"go build\". The line directive requires the absolute path of the file in which the directive lives, which makes exploiting this issue significantly more complex.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Applicable       | `sha256__72c78ea0a9a16495ba718bcfd5a1ae146733d5f488e881f4097b99862e4210f7.tar `       | [1.20.9], [1.21.2]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2023-45283_github.com/golang/go_1.20.7",
              "shortDescription": {
                "text": "[CVE-2023-45283] github.com/golang/go 1.20.7"
              },
              "help": {
                "text": "The filepath package does not recognize paths with a \\??\\ prefix as special. On Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x. Before fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b. Similarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b. In addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name. UPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__72c78ea0a9a16495ba718bcfd5a1ae146733d5f488e881f4097b99862e4210f7.tar `       | [1.20.11], [1.20.12], [1.21.4], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            }
          ],
          "version": "3.96.1"
        }
      },
      "results": [
        {
          "ruleId": "CVE-2023-44487_golang.org/x/net_0.14.0",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "[CVE-2023-44487] sha256__72c78ea0a9a16495ba718bcfd5a1ae146733d5f488e881f4097b99862e4210f7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39325_golang.org/x/net_0.14.0",
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "[CVE-2023-39325] sha256__72c78ea0a9a16495ba718bcfd5a1ae146733d5f488e881f4097b99862e4210f7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-44487_google.golang.org/grpc_1.57.0",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "[CVE-2023-44487] sha256__72c78ea0a9a16495ba718bcfd5a1ae146733d5f488e881f4097b99862e4210f7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-22189_github.com/quic-go/quic-go_0.37.4",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "text": "[CVE-2024-22189] sha256__72c78ea0a9a16495ba718bcfd5a1ae146733d5f488e881f4097b99862e4210f7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_github.com/golang/go_1.20.7",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__72c78ea0a9a16495ba718bcfd5a1ae146733d5f488e881f4097b99862e4210f7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_golang.org/x/net_0.14.0",
          "ruleIndex": 5,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__72c78ea0a9a16495ba718bcfd5a1ae146733d5f488e881f4097b99862e4210f7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-48795_golang.org/x/crypto_0.12.0",
          "ruleIndex": 6,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-48795] sha256__72c78ea0a9a16495ba718bcfd5a1ae146733d5f488e881f4097b99862e4210f7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-49295_github.com/quic-go/quic-go_0.37.4",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-49295] sha256__72c78ea0a9a16495ba718bcfd5a1ae146733d5f488e881f4097b99862e4210f7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24786_google.golang.org/protobuf_1.31.0",
          "ruleIndex": 8,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-24786] sha256__72c78ea0a9a16495ba718bcfd5a1ae146733d5f488e881f4097b99862e4210f7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39326_github.com/golang/go_1.20.7",
          "ruleIndex": 9,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39326] sha256__72c78ea0a9a16495ba718bcfd5a1ae146733d5f488e881f4097b99862e4210f7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39318_github.com/golang/go_1.20.7",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39318] sha256__72c78ea0a9a16495ba718bcfd5a1ae146733d5f488e881f4097b99862e4210f7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39319_github.com/golang/go_1.20.7",
          "ruleIndex": 11,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39319] sha256__72c78ea0a9a16495ba718bcfd5a1ae146733d5f488e881f4097b99862e4210f7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45284_github.com/golang/go_1.20.7",
          "ruleIndex": 12,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45284] sha256__72c78ea0a9a16495ba718bcfd5a1ae146733d5f488e881f4097b99862e4210f7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45285_github.com/golang/go_1.20.7",
          "ruleIndex": 13,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45285] sha256__72c78ea0a9a16495ba718bcfd5a1ae146733d5f488e881f4097b99862e4210f7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39323_github.com/golang/go_1.20.7",
          "ruleIndex": 14,
          "level": "error",
          "message": {
            "text": "[CVE-2023-39323] sha256__72c78ea0a9a16495ba718bcfd5a1ae146733d5f488e881f4097b99862e4210f7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45283_github.com/golang/go_1.20.7",
          "ruleIndex": 15,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45283] sha256__72c78ea0a9a16495ba718bcfd5a1ae146733d5f488e881f4097b99862e4210f7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://jfrog.com/help/r/jfrog-security-documentation/jfrog-advanced-security",
          "name": "JFrog Applicability Scanner",
          "rules": [
            {
              "id": "applic_CVE-2023-45283",
              "name": "CVE-2023-45283",
              "shortDescription": {
                "text": "Scanner for CVE-2023-45283"
              },
              "fullDescription": {
                "text": "The vulnerability is only exploitable when running under the Windows OS.\nSince currently only Linux containers are supported, the scanner will always conclude that this vulnerability is not applicable.",
                "markdown": "The vulnerability is only exploitable when running under the Windows OS.\nSince currently only Linux containers are supported, the scanner will always conclude that this vulnerability is not applicable."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-39323",
              "name": "CVE-2023-39323",
              "shortDescription": {
                "text": "Scanner for CVE-2023-39323"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information).",
                "markdown": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information)."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-45285",
              "name": "CVE-2023-45285",
              "shortDescription": {
                "text": "Scanner for CVE-2023-45285"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue is only exploitable via user interaction.",
                "markdown": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue is only exploitable via user interaction."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-39325",
              "name": "CVE-2023-39325",
              "shortDescription": {
                "text": "Scanner for CVE-2023-39325"
              },
              "fullDescription": {
                "text": "The scanner should check whether one of the functions is used:\n\n* net/http\n\n    - ListenAndServe\n    - ListenAndServeTLS\n    - Serve\n    - ServeTLS\n    - Server.ListenAndServe\n    - Server.ListenAndServeTLS\n    - Server.Serve\n    - Server.ServeTLS\n    - http2serverConn.serve\n    - http2serverConn.processHeaders\n    - http2serverConn.upgradeRequest\n    - http2serverConn.runHandler\n        \n* golang.org/x/net/http2\n\n    - Server.ServeConn\n    - serverConn.serve\n    - serverConn.processHeaders\n    - serverConn.upgradeRequest\n    - serverConn.runHandler",
                "markdown": "The scanner should check whether one of the functions is used:\n\n* net/http\n\n    - ListenAndServe\n    - ListenAndServeTLS\n    - Serve\n    - ServeTLS\n    - Server.ListenAndServe\n    - Server.ListenAndServeTLS\n    - Server.Serve\n    - Server.ServeTLS\n    - http2serverConn.serve\n    - http2serverConn.processHeaders\n    - http2serverConn.upgradeRequest\n    - http2serverConn.runHandler\n        \n* golang.org/x/net/http2\n\n    - Server.ServeConn\n    - serverConn.serve\n    - serverConn.processHeaders\n    - serverConn.upgradeRequest\n    - serverConn.runHandler"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-48795",
              "name": "CVE-2023-48795",
              "shortDescription": {
                "text": "Scanner for CVE-2023-48795"
              },
              "fullDescription": {
                "text": "The scanner looks for the OpenSSH/libssh server and client configurations in the following locations:\n\n* `/etc/ssh/sshd_config`\n* `/etc/ssh/ssh_config`\n* `~/.ssh/config`\n* `/root/.ssh/config`\n\nAnd checks if all of the following steps were taken to mitigate the vulnerability:\n\n1. Disabling/overriding the vulnerable `chacha20-poly1305` cipher, which is enabled by default.\n\n2. Turning off `AES-CBC`, unless you combine it with case 3.\n\n3. Disabling/overriding the vulnerable Message Authentication Code (MAC) algorithms, some of which are enabled by default. This is only relevant when `AES-CBC` is enabled.\n\nThe scanner currently only checks for libssh and OpenSSH attack prerequisites, even though other SSH programs may be vulnerable with different prerequisites. Therefore - the scanner either returns an Applicable result (libssh or OpenSSH are applicable) or an Undetermined result (libssh or OpenSSH are not applicable, other SSH programs may be applicable).",
                "markdown": "The scanner looks for the OpenSSH/libssh server and client configurations in the following locations:\n\n* `/etc/ssh/sshd_config`\n* `/etc/ssh/ssh_config`\n* `~/.ssh/config`\n* `/root/.ssh/config`\n\nAnd checks if all of the following steps were taken to mitigate the vulnerability:\n\n1. Disabling/overriding the vulnerable `chacha20-poly1305` cipher, which is enabled by default.\n\n2. Turning off `AES-CBC`, unless you combine it with case 3.\n\n3. Disabling/overriding the vulnerable Message Authentication Code (MAC) algorithms, some of which are enabled by default. This is only relevant when `AES-CBC` is enabled.\n\nThe scanner currently only checks for libssh and OpenSSH attack prerequisites, even though other SSH programs may be vulnerable with different prerequisites. Therefore - the scanner either returns an Applicable result (libssh or OpenSSH are applicable) or an Undetermined result (libssh or OpenSSH are not applicable, other SSH programs may be applicable)."
              },
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private"
              }
            },
            {
              "id": "applic_CVE-2023-45288",
              "name": "CVE-2023-45288",
              "shortDescription": {
                "text": "Scanner for CVE-2023-45288"
              },
              "fullDescription": {
                "text": "The scanner checks if any of the following functions are called:\n\n* `net/http/ServeTLS`\n* `x/net/http2/Server/ServeConn`\n* `x/net/http2/ConfigureServer`\n\nAn additional condition (that the scanner currently does not check) should be verified to determine if the CVE is applicable: `crypto/tls/Config/NextProtos` or `net/http/TLSNextProto` are not used to disable `HTTP/2`.",
                "markdown": "The scanner checks if any of the following functions are called:\n\n* `net/http/ServeTLS`\n* `x/net/http2/Server/ServeConn`\n* `x/net/http2/ConfigureServer`\n\nAn additional condition (that the scanner currently does not check) should be verified to determine if the CVE is applicable: `crypto/tls/Config/NextProtos` or `net/http/TLSNextProto` are not used to disable `HTTP/2`."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-44487",
              "name": "CVE-2023-44487",
              "shortDescription": {
                "text": "Scanner for CVE-2023-44487"
              },
              "fullDescription": {
                "text": "The scanner checks for each vendor listed here:\n\n* Tomcat: configuration enables HTTP/2 either through the XML file or Java's `addUpgradeProtocol()` method.\n* Jetty: HTTP/2 enabled through `HTTP2CServerConnectionFactory`/`HTTP2ServerConnectionFactory` class initialization. Note: it also checks whether `jenkins` enables http/2 through its configuration.\n* Nginx: check whether one of the HTTP configurations is enabling http/2.\nNote: the following parameters should be configured properly to make the vulnerability not applicable:\n`keepalive_requests` should be kept at the default setting of 1000 requests\n`http2_max_concurrent_streams` should be kept at the default setting of 128 streams\n`limit_conn and limit_req` should be set `with a reasonable setting balancing application performance and security`. \n* Netty: check whether the `http2` codec classes are used in a java class\n* NodeJS: check whether the `http2.createSecureServer()` is used\n* NGHttp2: check whether a web server is instantiated through one of the symbols `nghttp2_session_server_new` or `listen_and_serve`.\n* Go: check whether a server is instantiated through the `net/http` or `net/http2` packages",
                "markdown": "The scanner checks for each vendor listed here:\n\n* Tomcat: configuration enables HTTP/2 either through the XML file or Java's `addUpgradeProtocol()` method.\n* Jetty: HTTP/2 enabled through `HTTP2CServerConnectionFactory`/`HTTP2ServerConnectionFactory` class initialization. Note: it also checks whether `jenkins` enables http/2 through its configuration.\n* Nginx: check whether one of the HTTP configurations is enabling http/2.\nNote: the following parameters should be configured properly to make the vulnerability not applicable:\n`keepalive_requests` should be kept at the default setting of 1000 requests\n`http2_max_concurrent_streams` should be kept at the default setting of 128 streams\n`limit_conn and limit_req` should be set `with a reasonable setting balancing application performance and security`. \n* Netty: check whether the `http2` codec classes are used in a java class\n* NodeJS: check whether the `http2.createSecureServer()` is used\n* NGHttp2: check whether a web server is instantiated through one of the symbols `nghttp2_session_server_new` or `listen_and_serve`.\n* Go: check whether a server is instantiated through the `net/http` or `net/http2` packages"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2024-24786",
              "name": "CVE-2024-24786",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-24786"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-39318",
              "name": "CVE-2023-39318",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-39318"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-49295",
              "name": "CVE-2023-49295",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-49295"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-22189",
              "name": "CVE-2024-22189",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-22189"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-39319",
              "name": "CVE-2023-39319",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-39319"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-45284",
              "name": "CVE-2023-45284",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-45284"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-39326",
              "name": "CVE-2023-39326",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-39326"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            }
          ],
          "version": "1.0"
        }
      },
      "invocations": [
        {
          "arguments": [
            "/root/.jfrog/dependencies/analyzerManager/jas_scanner/jas_scanner",
            "scan",
            "/tmp/jfrog.cli.temp.-1718788623-3469260453/config.yaml"
          ],
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "/tmp/jfrog.cli.temp.-1718788596-1045405781/image.tar"
          }
        }
      ],
      "results": [
        {
          "ruleId": "applic_CVE-2023-45283",
          "kind": "pass",
          "message": {
            "text": "The vulnerability is only exploitable when running under the Windows OS.\nSince currently only Linux containers are supported, the scanner will always conclude that this vulnerability is not applicable."
          }
        },
        {
          "ruleId": "applic_CVE-2023-39323",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information)."
          }
        },
        {
          "ruleId": "applic_CVE-2023-45285",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue is only exploitable via user interaction."
          }
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function http2Server.ServeConn is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///coredns"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function http2serverConn.serve is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///coredns"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function http2serverConn.processHeaders is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///coredns"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function http2serverConn.upgradeRequest is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///coredns"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function http2serverConn.runHandler is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///coredns"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function Server.ListenAndServe is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///coredns"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function Server.Serve is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///coredns"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function Server.ServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///coredns"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function Server.ListenAndServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///coredns"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function Serve is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///coredns"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45288",
          "message": {
            "text": "The vulnerable function ServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///coredns"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function http2Server.ServeConn is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///coredns"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function http2serverConn.serve is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///coredns"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function http2serverConn.processHeaders is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///coredns"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function http2serverConn.upgradeRequest is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///coredns"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function http2serverConn.runHandler is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///coredns"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function Server.ListenAndServe is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///coredns"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function Server.Serve is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///coredns"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function Server.ServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///coredns"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function Server.ListenAndServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///coredns"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function Serve is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///coredns"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://jfrog.com/help/r/jfrog-security-documentation/jfrog-advanced-security",
          "name": "JFrog Secrets scanner",
          "rules": [
            {
              "id": "REQ.SECRET.GENERIC.TEXT",
              "name": "REQ.SECRET.GENERIC.TEXT",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.TEXT"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive"
              }
            },
            {
              "id": "REQ.SECRET.GENERIC.CODE",
              "name": "REQ.SECRET.GENERIC.CODE",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.CODE"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private"
              }
            },
            {
              "id": "REQ.SECRET.GENERIC.URL",
              "name": "REQ.SECRET.GENERIC.URL",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.URL"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive"
              }
            },
            {
              "id": "REQ.SECRET.KEYS",
              "name": "REQ.SECRET.KEYS",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.KEYS"
              },
              "fullDescription": {
                "text": "\nStoring an API key in the image could lead to several risks.\n\nIf the key is associated with a wide scope of privileges, attackers could extract it from a single image or firmware and use it maliciously to attack many targets. For example, if the embedded key allows querying/modifying data for all cloud user accounts, without per-user authentication, the attackers who extract it would gain access to system-wide data.\n\nIf the cloud/SaaS provider bills by key usage - for example, every million queries cost the key's owner a fixed sum of money - attackers could use the keys for their own purposes (or just as a form of vandalism), incurring a large cost to the legitimate user or operator.\n\n## Best practices\n\nUse narrow scopes for stored API keys. As much as possible, API keys should be unique per host and require additional authentication with the user's individual credentials for any sensitive actions.\n\nAvoid placing keys whose use incurs costs directly in the image. Store the key with any software or hardware protection available on the host for key storage (such as operating system key-stores, hardware cryptographic storage mechanisms or cloud-managed secure storage services such as [AWS KMS](https://aws.amazon.com/kms/)).\n\nTokens that were detected as exposed should be revoked and replaced -\n\n* [AWS Key Revocation](https://aws.amazon.com/premiumsupport/knowledge-center/delete-access-key/#:~:text=If%20you%20see%20a%20warning,the%20confirmation%20box%2C%20choose%20Deactivate.)\n* [GCP Key Revocation](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/CloudIAM/delete-api-keys.html)\n* [Azure Key Revocation](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops\u0026tabs=Windows#revoke-a-pat)\n* [GitHub Key Revocation](https://docs.github.com/en/rest/apps/oauth-applications#delete-an-app-authorization)\n",
                "markdown": "\nStoring an API key in the image could lead to several risks.\n\nIf the key is associated with a wide scope of privileges, attackers could extract it from a single image or firmware and use it maliciously to attack many targets. For example, if the embedded key allows querying/modifying data for all cloud user accounts, without per-user authentication, the attackers who extract it would gain access to system-wide data.\n\nIf the cloud/SaaS provider bills by key usage - for example, every million queries cost the key's owner a fixed sum of money - attackers could use the keys for their own purposes (or just as a form of vandalism), incurring a large cost to the legitimate user or operator.\n\n## Best practices\n\nUse narrow scopes for stored API keys. As much as possible, API keys should be unique per host and require additional authentication with the user's individual credentials for any sensitive actions.\n\nAvoid placing keys whose use incurs costs directly in the image. Store the key with any software or hardware protection available on the host for key storage (such as operating system key-stores, hardware cryptographic storage mechanisms or cloud-managed secure storage services such as [AWS KMS](https://aws.amazon.com/kms/)).\n\nTokens that were detected as exposed should be revoked and replaced -\n\n* [AWS Key Revocation](https://aws.amazon.com/premiumsupport/knowledge-center/delete-access-key/#:~:text=If%20you%20see%20a%20warning,the%20confirmation%20box%2C%20choose%20Deactivate.)\n* [GCP Key Revocation](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/CloudIAM/delete-api-keys.html)\n* [Azure Key Revocation](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops\u0026tabs=Windows#revoke-a-pat)\n* [GitHub Key Revocation](https://docs.github.com/en/rest/apps/oauth-applications#delete-an-app-authorization)\n"
              },
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private"
              }
            }
          ],
          "version": "1.0"
        }
      },
      "invocations": [
        {
          "arguments": [
            "/root/.jfrog/dependencies/analyzerManager/jas_scanner/jas_scanner",
            "scan",
            "/tmp/jfrog.cli.temp.-1718788623-3469260453/config.yaml"
          ],
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "/tmp/jfrog.cli.temp.-1718788596-1045405781/image.tar"
          }
        }
      ],
      "results": []
    }
  ]
}
