{
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "informationUri": "https://docs.jfrog-applications.jfrog.io/jfrog-security-features/sca",
          "name": "JFrog Xray SCA",
          "rules": [
            {
              "id": "CVE-2023-29405_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-29405] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. Flags containing embedded spaces are mishandled, allowing disallowed flags to be smuggled through the LDFLAGS sanitization by including them in the argument of another flag. This only affects usage of the gccgo compiler.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-24538_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-24538] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Templates do not properly consider backticks (`) as Javascript string delimiters, and do not escape them as expected. Backticks are used, since ES6, for JS template literals. If a template contains a Go template action within a Javascript template literal, the contents of the action can be used to terminate the literal, injecting arbitrary Javascript code into the Go template. As ES6 template literals are rather complex, and themselves can do string interpolation, the decision was made to simply disallow Go template actions from being used inside of them (e.g. \"var a = {{.}}\"), since there is no obviously safe way to allow this behavior. This takes the same approach as github.com/google/safehtml. With fix, Template.Parse returns an Error when it encounters templates like this, with an ErrorCode of value 12. This ErrorCode is currently unexported, but will be exported in the release of Go 1.21. Users who rely on the previous behavior can re-enable it using the GODEBUG flag jstmpllitinterp=1, with the caveat that backticks will now be escaped. This should be used with caution.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29404_github.com/golang/go_1.18.10",
              "shortDescription": {
                "text": "[CVE-2023-29404] github.com/golang/go 1.18.10"
              },
              "help": {
                "text": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. The arguments for a number of flags which are non-optional are incorrectly considered optional, allowing disallowed flags to be smuggled through the LDFLAGS sanitization. This affects usage of both the gc and gccgo compilers.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-23806_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-23806] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Curve.IsOnCurve in crypto/elliptic in Go before 1.16.14 and 1.17.x before 1.17.7 can incorrectly return true in situations with a big.Int value that is not a valid field element.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.1      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.16.14], [1.17.7]   |"
              },
              "properties": {
                "security-severity": "9.1"
              }
            },
            {
              "id": "CVE-2023-24540_github.com/golang/go_1.20",
              "shortDescription": {
                "text": "[CVE-2023-24540] github.com/golang/go 1.20"
              },
              "help": {
                "text": "Not all valid JavaScript whitespace characters are considered to be whitespace. Templates containing whitespace characters outside of the character set \"\\t\\n\\f\\r\\u0020\\u2028\\u2029\" in JavaScript contexts that also contain actions may not be properly sanitized during execution.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29402_github.com/golang/go_1.19.7",
              "shortDescription": {
                "text": "[CVE-2023-29402] github.com/golang/go 1.19.7"
              },
              "help": {
                "text": "The go command may generate unexpected code at build time when using cgo. This may result in unexpected behavior when running a go program which uses cgo. This may occur when running an untrusted module which contains directories with newline characters in their names. Modules which are retrieved using the go command, i.e. via \"go get\", are not affected (modules retrieved using GOPATH-mode, i.e. GO111MODULE=off, may be affected).",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29405_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2023-29405] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. Flags containing embedded spaces are mishandled, allowing disallowed flags to be smuggled through the LDFLAGS sanitization by including them in the argument of another flag. This only affects usage of the gccgo compiler.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2014-0048_github.com/moby/moby_1.4.2-0.20170731201646-1009e6a40b29",
              "shortDescription": {
                "text": "[CVE-2014-0048] github.com/moby/moby 1.4.2-0.20170731201646-1009e6a40b29"
              },
              "help": {
                "text": "An issue was found in Docker before 1.6.0. Some programs and scripts in Docker are downloaded via HTTP and then executed or used in unsafe ways.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.6.0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29404_github.com/golang/go_1.20",
              "shortDescription": {
                "text": "[CVE-2023-29404] github.com/golang/go 1.20"
              },
              "help": {
                "text": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. The arguments for a number of flags which are non-optional are incorrectly considered optional, allowing disallowed flags to be smuggled through the LDFLAGS sanitization. This affects usage of both the gc and gccgo compilers.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29405_github.com/golang/go_1.19.7",
              "shortDescription": {
                "text": "[CVE-2023-29405] github.com/golang/go 1.19.7"
              },
              "help": {
                "text": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. Flags containing embedded spaces are mishandled, allowing disallowed flags to be smuggled through the LDFLAGS sanitization by including them in the argument of another flag. This only affects usage of the gccgo compiler.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29404_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2023-29404] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. The arguments for a number of flags which are non-optional are incorrectly considered optional, allowing disallowed flags to be smuggled through the LDFLAGS sanitization. This affects usage of both the gc and gccgo compilers.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-24538_github.com/golang/go_1.20",
              "shortDescription": {
                "text": "[CVE-2023-24538] github.com/golang/go 1.20"
              },
              "help": {
                "text": "Templates do not properly consider backticks (`) as Javascript string delimiters, and do not escape them as expected. Backticks are used, since ES6, for JS template literals. If a template contains a Go template action within a Javascript template literal, the contents of the action can be used to terminate the literal, injecting arbitrary Javascript code into the Go template. As ES6 template literals are rather complex, and themselves can do string interpolation, the decision was made to simply disallow Go template actions from being used inside of them (e.g. \"var a = {{.}}\"), since there is no obviously safe way to allow this behavior. This takes the same approach as github.com/google/safehtml. With fix, Template.Parse returns an Error when it encounters templates like this, with an ErrorCode of value 12. This ErrorCode is currently unexported, but will be exported in the release of Go 1.21. Users who rely on the previous behavior can re-enable it using the GODEBUG flag jstmpllitinterp=1, with the caveat that backticks will now be escaped. This should be used with caution.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-24540_github.com/golang/go_1.18.10",
              "shortDescription": {
                "text": "[CVE-2023-24540] github.com/golang/go 1.18.10"
              },
              "help": {
                "text": "Not all valid JavaScript whitespace characters are considered to be whitespace. Templates containing whitespace characters outside of the character set \"\\t\\n\\f\\r\\u0020\\u2028\\u2029\" in JavaScript contexts that also contain actions may not be properly sanitized during execution.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-24540_github.com/golang/go_1.19.7",
              "shortDescription": {
                "text": "[CVE-2023-24540] github.com/golang/go 1.19.7"
              },
              "help": {
                "text": "Not all valid JavaScript whitespace characters are considered to be whitespace. Templates containing whitespace characters outside of the character set \"\\t\\n\\f\\r\\u0020\\u2028\\u2029\" in JavaScript contexts that also contain actions may not be properly sanitized during execution.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-24538_github.com/golang/go_1.19.7",
              "shortDescription": {
                "text": "[CVE-2023-24538] github.com/golang/go 1.19.7"
              },
              "help": {
                "text": "Templates do not properly consider backticks (`) as Javascript string delimiters, and do not escape them as expected. Backticks are used, since ES6, for JS template literals. If a template contains a Go template action within a Javascript template literal, the contents of the action can be used to terminate the literal, injecting arbitrary Javascript code into the Go template. As ES6 template literals are rather complex, and themselves can do string interpolation, the decision was made to simply disallow Go template actions from being used inside of them (e.g. \"var a = {{.}}\"), since there is no obviously safe way to allow this behavior. This takes the same approach as github.com/google/safehtml. With fix, Template.Parse returns an Error when it encounters templates like this, with an ErrorCode of value 12. This ErrorCode is currently unexported, but will be exported in the release of Go 1.21. Users who rely on the previous behavior can re-enable it using the GODEBUG flag jstmpllitinterp=1, with the caveat that backticks will now be escaped. This should be used with caution.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-24538_github.com/golang/go_1.18.10",
              "shortDescription": {
                "text": "[CVE-2023-24538] github.com/golang/go 1.18.10"
              },
              "help": {
                "text": "Templates do not properly consider backticks (`) as Javascript string delimiters, and do not escape them as expected. Backticks are used, since ES6, for JS template literals. If a template contains a Go template action within a Javascript template literal, the contents of the action can be used to terminate the literal, injecting arbitrary Javascript code into the Go template. As ES6 template literals are rather complex, and themselves can do string interpolation, the decision was made to simply disallow Go template actions from being used inside of them (e.g. \"var a = {{.}}\"), since there is no obviously safe way to allow this behavior. This takes the same approach as github.com/google/safehtml. With fix, Template.Parse returns an Error when it encounters templates like this, with an ErrorCode of value 12. This ErrorCode is currently unexported, but will be exported in the release of Go 1.21. Users who rely on the previous behavior can re-enable it using the GODEBUG flag jstmpllitinterp=1, with the caveat that backticks will now be escaped. This should be used with caution.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29404_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-29404] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. The arguments for a number of flags which are non-optional are incorrectly considered optional, allowing disallowed flags to be smuggled through the LDFLAGS sanitization. This affects usage of both the gc and gccgo compilers.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29405_github.com/golang/go_1.18.10",
              "shortDescription": {
                "text": "[CVE-2023-29405] github.com/golang/go 1.18.10"
              },
              "help": {
                "text": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. Flags containing embedded spaces are mishandled, allowing disallowed flags to be smuggled through the LDFLAGS sanitization by including them in the argument of another flag. This only affects usage of the gccgo compiler.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29402_github.com/golang/go_1.20",
              "shortDescription": {
                "text": "[CVE-2023-29402] github.com/golang/go 1.20"
              },
              "help": {
                "text": "The go command may generate unexpected code at build time when using cgo. This may result in unexpected behavior when running a go program which uses cgo. This may occur when running an untrusted module which contains directories with newline characters in their names. Modules which are retrieved using the go command, i.e. via \"go get\", are not affected (modules retrieved using GOPATH-mode, i.e. GO111MODULE=off, may be affected).",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29402_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-29402] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "The go command may generate unexpected code at build time when using cgo. This may result in unexpected behavior when running a go program which uses cgo. This may occur when running an untrusted module which contains directories with newline characters in their names. Modules which are retrieved using the go command, i.e. via \"go get\", are not affected (modules retrieved using GOPATH-mode, i.e. GO111MODULE=off, may be affected).",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29404_github.com/golang/go_1.19.7",
              "shortDescription": {
                "text": "[CVE-2023-29404] github.com/golang/go 1.19.7"
              },
              "help": {
                "text": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. The arguments for a number of flags which are non-optional are incorrectly considered optional, allowing disallowed flags to be smuggled through the LDFLAGS sanitization. This affects usage of both the gc and gccgo compilers.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-24540_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-24540] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Not all valid JavaScript whitespace characters are considered to be whitespace. Templates containing whitespace characters outside of the character set \"\\t\\n\\f\\r\\u0020\\u2028\\u2029\" in JavaScript contexts that also contain actions may not be properly sanitized during execution.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29405_github.com/golang/go_1.20",
              "shortDescription": {
                "text": "[CVE-2023-29405] github.com/golang/go 1.20"
              },
              "help": {
                "text": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. Flags containing embedded spaces are mishandled, allowing disallowed flags to be smuggled through the LDFLAGS sanitization by including them in the argument of another flag. This only affects usage of the gccgo compiler.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29402_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2023-29402] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "The go command may generate unexpected code at build time when using cgo. This may result in unexpected behavior when running a go program which uses cgo. This may occur when running an untrusted module which contains directories with newline characters in their names. Modules which are retrieved using the go command, i.e. via \"go get\", are not affected (modules retrieved using GOPATH-mode, i.e. GO111MODULE=off, may be affected).",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-24538_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2023-24538] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Templates do not properly consider backticks (`) as Javascript string delimiters, and do not escape them as expected. Backticks are used, since ES6, for JS template literals. If a template contains a Go template action within a Javascript template literal, the contents of the action can be used to terminate the literal, injecting arbitrary Javascript code into the Go template. As ES6 template literals are rather complex, and themselves can do string interpolation, the decision was made to simply disallow Go template actions from being used inside of them (e.g. \"var a = {{.}}\"), since there is no obviously safe way to allow this behavior. This takes the same approach as github.com/google/safehtml. With fix, Template.Parse returns an Error when it encounters templates like this, with an ErrorCode of value 12. This ErrorCode is currently unexported, but will be exported in the release of Go 1.21. Users who rely on the previous behavior can re-enable it using the GODEBUG flag jstmpllitinterp=1, with the caveat that backticks will now be escaped. This should be used with caution.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-23806_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2022-23806] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Curve.IsOnCurve in crypto/elliptic in Go before 1.16.14 and 1.17.x before 1.17.7 can incorrectly return true in situations with a big.Int value that is not a valid field element.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.1      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.16.14], [1.17.7]   |"
              },
              "properties": {
                "security-severity": "9.1"
              }
            },
            {
              "id": "CVE-2023-24540_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2023-24540] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Not all valid JavaScript whitespace characters are considered to be whitespace. Templates containing whitespace characters outside of the character set \"\\t\\n\\f\\r\\u0020\\u2028\\u2029\" in JavaScript contexts that also contain actions may not be properly sanitized during execution.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29402_github.com/golang/go_1.18.10",
              "shortDescription": {
                "text": "[CVE-2023-29402] github.com/golang/go 1.18.10"
              },
              "help": {
                "text": "The go command may generate unexpected code at build time when using cgo. This may result in unexpected behavior when running a go program which uses cgo. This may occur when running an untrusted module which contains directories with newline characters in their names. Modules which are retrieved using the go command, i.e. via \"go get\", are not affected (modules retrieved using GOPATH-mode, i.e. GO111MODULE=off, may be affected).",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2021-38297_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2021-38297] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Go before 1.16.9 and 1.17.x before 1.17.2 has a Buffer Overflow via large arguments in a function invocation from a WASM module, when GOARCH=wasm GOOS=js is used.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 9.8      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.16.9], [1.17.2]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2021-3115_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2021-3115] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Go before 1.14.14 and 1.15.x before 1.15.7 on Windows is vulnerable to Command Injection and remote code execution when using the \"go get\" command to fetch modules that make use of cgo (for example, cgo can execute a gcc program from an untrusted download).",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.14.14], [1.15.7]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-41771_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2021-41771] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "ImportedSymbols in debug/macho (for Open or OpenFat) in Go before 1.16.10 and 1.17.x before 1.17.3 Accesses a Memory Location After the End of a Buffer, aka an out-of-bounds slice situation.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.16.10], [1.17.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-39323_github.com/golang/go_1.20",
              "shortDescription": {
                "text": "[CVE-2023-39323] github.com/golang/go 1.20"
              },
              "help": {
                "text": "Line directives (\"//line\") can be used to bypass the restrictions on \"//go:cgo_\" directives, allowing blocked linker and compiler flags to be passed during compilation. This can result in unexpected execution of arbitrary code when running \"go build\". The line directive requires the absolute path of the file in which the directive lives, which makes exploiting this issue significantly more complex.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 8.1      | `sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar `       | [1.20.9], [1.21.2]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2022-41725_github.com/golang/go_1.18.10",
              "shortDescription": {
                "text": "[CVE-2022-41725] github.com/golang/go 1.18.10"
              },
              "help": {
                "text": "A denial of service is possible from excessive resource consumption in net/http and mime/multipart. Multipart form parsing with mime/multipart.Reader.ReadForm can consume largely unlimited amounts of memory and disk files. This also affects form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. ReadForm takes a maxMemory parameter, and is documented as storing \"up to maxMemory bytes +10MB (reserved for non-file parts) in memory\". File parts which cannot be stored in memory are stored on disk in temporary files. The unconfigurable 10MB reserved for non-file parts is excessively large and can potentially open a denial of service vector on its own. However, ReadForm did not properly account for all memory consumed by a parsed form, such as map entry overhead, part names, and MIME headers, permitting a maliciously crafted form to consume well over 10MB. In addition, ReadForm contained no limit on the number of disk files created, permitting a relatively small request body to create a large number of disk temporary files. With fix, ReadForm now properly accounts for various forms of memory overhead, and should now stay within its documented limit of 10MB + maxMemory bytes of memory consumption. Users should still be aware that this limit is high and may still be hazardous. In addition, ReadForm now creates at most one on-disk temporary file, combining multiple form parts into a single temporary file. The mime/multipart.File interface type's documentation states, \"If stored on disk, the File's underlying concrete type will be an *os.File.\". This is no longer the case when a form contains more than one file part, due to this coalescing of parts into a single file. The previous behavior of using distinct files for each form part may be reenabled with the environment variable GODEBUG=multipartfiles=distinct. Users should be aware that multipart.ReadForm and the http.Request methods that call it do not limit the amount of disk consumed by temporary ...",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24539_github.com/golang/go_1.19.7",
              "shortDescription": {
                "text": "[CVE-2023-24539] github.com/golang/go 1.19.7"
              },
              "help": {
                "text": "Angle brackets (\u003c\u003e) are not considered dangerous characters when inserted into CSS contexts. Templates containing multiple actions separated by a '/' character can result in unexpectedly closing the CSS context and allowing for injection of unexpected HTML, if executed with untrusted input.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.3      | `sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2023-24539_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2023-24539] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Angle brackets (\u003c\u003e) are not considered dangerous characters when inserted into CSS contexts. Templates containing multiple actions separated by a '/' character can result in unexpectedly closing the CSS context and allowing for injection of unexpected HTML, if executed with untrusted input.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.3      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2023-29400_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2023-29400] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Templates containing actions in unquoted HTML attributes (e.g. \"attr={{.}}\") executed with empty input can result in output with unexpected results when parsed due to HTML normalization rules. This may allow injection of arbitrary attributes into tags.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.3      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2023-45283_github.com/golang/go_1.20",
              "shortDescription": {
                "text": "[CVE-2023-45283] github.com/golang/go 1.20"
              },
              "help": {
                "text": "The filepath package does not recognize paths with a \\??\\ prefix as special. On Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x. Before fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b. Similarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b. In addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name. UPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar `       | [1.20.11], [1.20.12], [1.21.4], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30630_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2022-30630] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Uncontrolled recursion in Glob in io/fs before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a path which contains a large number of path separators.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24537_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2023-24537] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Calling any of the Parse functions on Go source code which contains //line directives with very large line numbers can cause an infinite loop due to integer overflow.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45283_github.com/golang/go_1.21.3",
              "shortDescription": {
                "text": "[CVE-2023-45283] github.com/golang/go 1.21.3"
              },
              "help": {
                "text": "The filepath package does not recognize paths with a \\??\\ prefix as special. On Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x. Before fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b. Similarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b. In addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name. UPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__aa360f6fc46f93e2723fe069922ed7d573dc39a443488ada6ddc7d10edf37d95.tar `       | [1.20.11], [1.20.12], [1.21.4], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45283_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-45283] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "The filepath package does not recognize paths with a \\??\\ prefix as special. On Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x. Before fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b. Similarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b. In addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name. UPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.20.11], [1.20.12], [1.21.4], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30633_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-30633] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Uncontrolled recursion in Unmarshal in encoding/xml before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via unmarshalling an XML document into a Go struct which has a nested field that uses the 'any' field tag.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41724_github.com/golang/go_1.20",
              "shortDescription": {
                "text": "[CVE-2022-41724] github.com/golang/go 1.20"
              },
              "help": {
                "text": "Large handshake records may cause panics in crypto/tls. Both clients and servers may send large TLS handshake records which cause servers and clients, respectively, to panic when attempting to construct responses. This affects all TLS 1.3 clients, TLS 1.2 clients which explicitly enable session resumption (by setting Config.ClientSessionCache to a non-nil value), and TLS 1.3 servers which request client certificates (by setting Config.ClientAuth \u003e= RequestClientCert).",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-28327_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-28327] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "The generic P-256 feature in crypto/elliptic in Go before 1.17.9 and 1.18.x before 1.18.1 allows a panic via long scalar input.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.17.9], [1.18.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-23773_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2022-23773] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "cmd/go in Go before 1.16.14 and 1.17.x before 1.17.7 can misinterpret branch names that falsely appear to be version tags. This can lead to incorrect access control if an actor is supposed to be able to create branches but not tags.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.16.14], [1.17.7]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24537_github.com/golang/go_1.18.10",
              "shortDescription": {
                "text": "[CVE-2023-24537] github.com/golang/go 1.18.10"
              },
              "help": {
                "text": "Calling any of the Parse functions on Go source code which contains //line directives with very large line numbers can cause an infinite loop due to integer overflow.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-39323_github.com/golang/go_1.20.7",
              "shortDescription": {
                "text": "[CVE-2023-39323] github.com/golang/go 1.20.7"
              },
              "help": {
                "text": "Line directives (\"//line\") can be used to bypass the restrictions on \"//go:cgo_\" directives, allowing blocked linker and compiler flags to be passed during compilation. This can result in unexpected execution of arbitrary code when running \"go build\". The line directive requires the absolute path of the file in which the directive lives, which makes exploiting this issue significantly more complex.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 8.1      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.20.9], [1.21.2]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2023-45287_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2023-45287] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Before Go 1.20, the RSA based TLS key exchanges used the math/big library, which is not constant time. RSA blinding was applied to prevent timing attacks, but analysis shows this may not have been fully effective. In particular it appears as if the removal of PKCS#1 padding may leak timing information, which in turn could be used to recover session key bits. In Go 1.20, the crypto/tls library switched to a fully constant time RSA implementation, which we do not believe exhibits any timing side channels.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.20.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-28131_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-28131] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Uncontrolled recursion in Decoder.Skip in encoding/xml before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a deeply nested XML document.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-39323_github.com/golang/go_1.20.5",
              "shortDescription": {
                "text": "[CVE-2023-39323] github.com/golang/go 1.20.5"
              },
              "help": {
                "text": "Line directives (\"//line\") can be used to bypass the restrictions on \"//go:cgo_\" directives, allowing blocked linker and compiler flags to be passed during compilation. This can result in unexpected execution of arbitrary code when running \"go build\". The line directive requires the absolute path of the file in which the directive lives, which makes exploiting this issue significantly more complex.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 8.1      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.20.9], [1.21.2]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2022-41715_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-41715] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Programs which compile regular expressions from untrusted sources may be vulnerable to memory exhaustion or denial of service. The parsed regexp representation is linear in the size of the input, but in some cases the constant factor can be as high as 40,000, making relatively small regexps consume much larger amounts of memory. After fix, each regexp being parsed is limited to a 256 MB memory footprint. Regular expressions whose representation would use more space than that are rejected. Normal use of regular expressions is unaffected.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.18.7], [1.19.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-41772_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2021-41772] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Go before 1.16.10 and 1.17.x before 1.17.3 allows an archive/zip Reader.Open panic via a crafted ZIP archive containing an invalid name or an empty filename field.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.16.10], [1.17.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24537_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-24537] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Calling any of the Parse functions on Go source code which contains //line directives with very large line numbers can cause an infinite loop due to integer overflow.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-44487_google.golang.org/grpc_1.52.3",
              "shortDescription": {
                "text": "[CVE-2023-44487] google.golang.org/grpc 1.52.3"
              },
              "help": {
                "text": "The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar `       | [1.56.3], [1.57.1], [1.58.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-29403_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-29403] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "On Unix platforms, the Go runtime does not behave differently when a binary is run with the setuid/setgid bits. This can be dangerous in certain cases, such as when dumping memory state, or assuming the status of standard i/o file descriptors. If a setuid/setgid binary is executed with standard I/O file descriptors closed, opening any files can result in unexpected content being read or written with elevated privileges. Similarly, if a setuid/setgid program is terminated, either via panic or signal, it may leak the contents of its registers.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.8      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2022-41722_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2022-41722] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "A path traversal vulnerability exists in filepath.Clean on Windows. On Windows, the filepath.Clean function could transform an invalid path such as \"a/../c:/b\" into the valid path \"c:\\b\". This transformation of a relative (if invalid) path into an absolute path could enable a directory traversal attack. After fix, the filepath.Clean function transforms this path into the relative (but still invalid) path \".\\c:\\b\".",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41725_github.com/golang/go_1.20",
              "shortDescription": {
                "text": "[CVE-2022-41725] github.com/golang/go 1.20"
              },
              "help": {
                "text": "A denial of service is possible from excessive resource consumption in net/http and mime/multipart. Multipart form parsing with mime/multipart.Reader.ReadForm can consume largely unlimited amounts of memory and disk files. This also affects form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. ReadForm takes a maxMemory parameter, and is documented as storing \"up to maxMemory bytes +10MB (reserved for non-file parts) in memory\". File parts which cannot be stored in memory are stored on disk in temporary files. The unconfigurable 10MB reserved for non-file parts is excessively large and can potentially open a denial of service vector on its own. However, ReadForm did not properly account for all memory consumed by a parsed form, such as map entry overhead, part names, and MIME headers, permitting a maliciously crafted form to consume well over 10MB. In addition, ReadForm contained no limit on the number of disk files created, permitting a relatively small request body to create a large number of disk temporary files. With fix, ReadForm now properly accounts for various forms of memory overhead, and should now stay within its documented limit of 10MB + maxMemory bytes of memory consumption. Users should still be aware that this limit is high and may still be hazardous. In addition, ReadForm now creates at most one on-disk temporary file, combining multiple form parts into a single temporary file. The mime/multipart.File interface type's documentation states, \"If stored on disk, the File's underlying concrete type will be an *os.File.\". This is no longer the case when a form contains more than one file part, due to this coalescing of parts into a single file. The previous behavior of using distinct files for each form part may be reenabled with the environment variable GODEBUG=multipartfiles=distinct. Users should be aware that multipart.ReadForm and the http.Request methods that call it do not limit the amount of disk consumed by temporary ...",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24534_github.com/golang/go_1.18.10",
              "shortDescription": {
                "text": "[CVE-2023-24534] github.com/golang/go 1.18.10"
              },
              "help": {
                "text": "HTTP and MIME header parsing can allocate large amounts of memory, even when parsing small inputs, potentially leading to a denial of service. Certain unusual patterns of input data can cause the common function used to parse HTTP and MIME headers to allocate substantially more memory than required to hold the parsed headers. An attacker can exploit this behavior to cause an HTTP server to allocate large amounts of memory from a small request, potentially leading to memory exhaustion and a denial of service. With fix, header parsing now correctly allocates only the memory required to hold parsed headers.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41724_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-41724] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Large handshake records may cause panics in crypto/tls. Both clients and servers may send large TLS handshake records which cause servers and clients, respectively, to panic when attempting to construct responses. This affects all TLS 1.3 clients, TLS 1.2 clients which explicitly enable session resumption (by setting Config.ClientSessionCache to a non-nil value), and TLS 1.3 servers which request client certificates (by setting Config.ClientAuth \u003e= RequestClientCert).",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45287_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-45287] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Before Go 1.20, the RSA based TLS key exchanges used the math/big library, which is not constant time. RSA blinding was applied to prevent timing attacks, but analysis shows this may not have been fully effective. In particular it appears as if the removal of PKCS#1 padding may leak timing information, which in turn could be used to recover session key bits. In Go 1.20, the crypto/tls library switched to a fully constant time RSA implementation, which we do not believe exhibits any timing side channels.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.20.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30630_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-30630] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Uncontrolled recursion in Glob in io/fs before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a path which contains a large number of path separators.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-39323_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2023-39323] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Line directives (\"//line\") can be used to bypass the restrictions on \"//go:cgo_\" directives, allowing blocked linker and compiler flags to be passed during compilation. This can result in unexpected execution of arbitrary code when running \"go build\". The line directive requires the absolute path of the file in which the directive lives, which makes exploiting this issue significantly more complex.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 8.1      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.20.9], [1.21.2]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2021-33195_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2021-33195] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Go before 1.15.13 and 1.16.x before 1.16.5 has functions for DNS lookups that do not validate replies from DNS servers, and thus a return value may contain an unsafe injection (e.g., XSS) that does not conform to the RFC1035 format.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.3      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.15.13], [1.16.5]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2023-45287_github.com/golang/go_1.19.7",
              "shortDescription": {
                "text": "[CVE-2023-45287] github.com/golang/go 1.19.7"
              },
              "help": {
                "text": "Before Go 1.20, the RSA based TLS key exchanges used the math/big library, which is not constant time. RSA blinding was applied to prevent timing attacks, but analysis shows this may not have been fully effective. In particular it appears as if the removal of PKCS#1 padding may leak timing information, which in turn could be used to recover session key bits. In Go 1.20, the crypto/tls library switched to a fully constant time RSA implementation, which we do not believe exhibits any timing side channels.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar `       | [1.20.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41725_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2022-41725] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "A denial of service is possible from excessive resource consumption in net/http and mime/multipart. Multipart form parsing with mime/multipart.Reader.ReadForm can consume largely unlimited amounts of memory and disk files. This also affects form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. ReadForm takes a maxMemory parameter, and is documented as storing \"up to maxMemory bytes +10MB (reserved for non-file parts) in memory\". File parts which cannot be stored in memory are stored on disk in temporary files. The unconfigurable 10MB reserved for non-file parts is excessively large and can potentially open a denial of service vector on its own. However, ReadForm did not properly account for all memory consumed by a parsed form, such as map entry overhead, part names, and MIME headers, permitting a maliciously crafted form to consume well over 10MB. In addition, ReadForm contained no limit on the number of disk files created, permitting a relatively small request body to create a large number of disk temporary files. With fix, ReadForm now properly accounts for various forms of memory overhead, and should now stay within its documented limit of 10MB + maxMemory bytes of memory consumption. Users should still be aware that this limit is high and may still be hazardous. In addition, ReadForm now creates at most one on-disk temporary file, combining multiple form parts into a single temporary file. The mime/multipart.File interface type's documentation states, \"If stored on disk, the File's underlying concrete type will be an *os.File.\". This is no longer the case when a form contains more than one file part, due to this coalescing of parts into a single file. The previous behavior of using distinct files for each form part may be reenabled with the environment variable GODEBUG=multipartfiles=distinct. Users should be aware that multipart.ReadForm and the http.Request methods that call it do not limit the amount of disk consumed by temporary ...",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-24675_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2022-24675] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "encoding/pem in Go before 1.17.9 and 1.18.x before 1.18.1 has a Decode stack overflow via a large amount of PEM data.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.17.9], [1.18.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24536_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-24536] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Multipart form parsing can consume large amounts of CPU and memory when processing form inputs containing very large numbers of parts. This stems from several causes: 1. mime/multipart.Reader.ReadForm limits the total memory a parsed multipart form can consume. ReadForm can undercount the amount of memory consumed, leading it to accept larger inputs than intended. 2. Limiting total memory does not account for increased pressure on the garbage collector from large numbers of small allocations in forms with many parts. 3. ReadForm can allocate a large number of short-lived buffers, further increasing pressure on the garbage collector. The combination of these factors can permit an attacker to cause an program that parses multipart forms to consume large amounts of CPU and memory, potentially resulting in a denial of service. This affects programs that use mime/multipart.Reader.ReadForm, as well as form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. With fix, ReadForm now does a better job of estimating the memory consumption of parsed forms, and performs many fewer short-lived allocations. In addition, the fixed mime/multipart.Reader imposes the following limits on the size of parsed forms: 1. Forms parsed with ReadForm may contain no more than 1000 parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxparts=. 2. Form parts parsed with NextPart and NextRawPart may contain no more than 10,000 header fields. In addition, forms parsed with ReadForm may contain no more than 10,000 header fields across all parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxheaders=.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24536_github.com/golang/go_1.20",
              "shortDescription": {
                "text": "[CVE-2023-24536] github.com/golang/go 1.20"
              },
              "help": {
                "text": "Multipart form parsing can consume large amounts of CPU and memory when processing form inputs containing very large numbers of parts. This stems from several causes: 1. mime/multipart.Reader.ReadForm limits the total memory a parsed multipart form can consume. ReadForm can undercount the amount of memory consumed, leading it to accept larger inputs than intended. 2. Limiting total memory does not account for increased pressure on the garbage collector from large numbers of small allocations in forms with many parts. 3. ReadForm can allocate a large number of short-lived buffers, further increasing pressure on the garbage collector. The combination of these factors can permit an attacker to cause an program that parses multipart forms to consume large amounts of CPU and memory, potentially resulting in a denial of service. This affects programs that use mime/multipart.Reader.ReadForm, as well as form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. With fix, ReadForm now does a better job of estimating the memory consumption of parsed forms, and performs many fewer short-lived allocations. In addition, the fixed mime/multipart.Reader imposes the following limits on the size of parsed forms: 1. Forms parsed with ReadForm may contain no more than 1000 parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxparts=. 2. Form parts parsed with NextPart and NextRawPart may contain no more than 10,000 header fields. In addition, forms parsed with ReadForm may contain no more than 10,000 header fields across all parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxheaders=.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-29400_github.com/golang/go_1.20",
              "shortDescription": {
                "text": "[CVE-2023-29400] github.com/golang/go 1.20"
              },
              "help": {
                "text": "Templates containing actions in unquoted HTML attributes (e.g. \"attr={{.}}\") executed with empty input can result in output with unexpected results when parsed due to HTML normalization rules. This may allow injection of arbitrary attributes into tags.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.3      | `sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2022-41716_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-41716] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Due to unsanitized NUL values, attackers may be able to maliciously set environment variables on Windows. In syscall.StartProcess and os/exec.Cmd, invalid environment variable values containing NUL values are not properly checked for. A malicious environment variable value can exploit this behavior to set a value for a different environment variable. For example, the environment variable string \"A=B\\x00C=D\" sets the variables \"A=B\" and \"C=D\".",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.18.8], [1.19.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30632_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-30632] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Uncontrolled recursion in Glob in path/filepath before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a path containing a large number of path separators.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-44487_google.golang.org/grpc_1.45.0",
              "shortDescription": {
                "text": "[CVE-2023-44487] google.golang.org/grpc 1.45.0"
              },
              "help": {
                "text": "The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.56.3], [1.57.1], [1.58.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2024-24557_github.com/docker/docker_24.0.0-rc.2.0.20230801142700-69c9adb7d386+incompatible",
              "shortDescription": {
                "text": "[CVE-2024-24557] github.com/docker/docker 24.0.0-rc.2.0.20230801142700-69c9adb7d386+incompatible"
              },
              "help": {
                "text": "Moby is an open-source project created by Docker to enable software containerization. The classic builder cache system is prone to cache poisoning if the image is built FROM scratch. Also, changes to some instructions (most important being HEALTHCHECK and ONBUILD) would not cause a cache miss. An attacker with the knowledge of the Dockerfile someone is using could poison their cache by making them pull a specially crafted image that would be considered as a valid cache candidate for some build steps. 23.0+ users are only affected if they explicitly opted out of Buildkit (DOCKER_BUILDKIT=0 environment variable) or are using the /build API endpoint. All users on versions older than 23.0 could be impacted. Image build API endpoint (/build) and ImageBuild function from github.com/docker/docker/client is also affected as it the uses classic builder by default. Patches are included in 24.0.9 and 25.0.2 releases.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.8      | `sha256__58df8290592143d99a2e16b12a9a04501e511b0020e4c7bd5a0bef516fea6032.tar `       | [24.0.9], [25.0.2]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2020-0601_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2020-0601] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "A spoofing vulnerability exists in the way Windows CryptoAPI (Crypt32.dll) validates Elliptic Curve Cryptography (ECC) certificates.An attacker could exploit the vulnerability by using a spoofed code-signing certificate to sign a malicious executable, making it appear the file was from a trusted, legitimate source, aka 'Windows CryptoAPI Spoofing Vulnerability'.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 8.1      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.12.16], [1.13.7]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2022-2880_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-2880] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Requests forwarded by ReverseProxy include the raw query parameters from the inbound request, including unparsable parameters rejected by net/http. This could permit query parameter smuggling when a Go proxy forwards a parameter with an unparsable value. After fix, ReverseProxy sanitizes the query parameters in the forwarded query when the outbound request's Form field is set after the ReverseProxy. Director function returns, indicating that the proxy has parsed the query parameters. Proxies which do not parse query parameters continue to forward the original query parameters unchanged.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.18.7], [1.19.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45285_github.com/golang/go_1.19.7",
              "shortDescription": {
                "text": "[CVE-2023-45285] github.com/golang/go 1.19.7"
              },
              "help": {
                "text": "Using go get to fetch a module with the \".git\" suffix may unexpectedly fallback to the insecure \"git://\" protocol if the module is unavailable via the secure \"https://\" and \"git+ssh://\" protocols, even if GOINSECURE is not set for said module. This only affects users who are not using the module proxy and are fetching modules directly (i.e. GOPROXY=off).",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2024-24557_github.com/docker/docker_20.10.24+incompatible",
              "shortDescription": {
                "text": "[CVE-2024-24557] github.com/docker/docker 20.10.24+incompatible"
              },
              "help": {
                "text": "Moby is an open-source project created by Docker to enable software containerization. The classic builder cache system is prone to cache poisoning if the image is built FROM scratch. Also, changes to some instructions (most important being HEALTHCHECK and ONBUILD) would not cause a cache miss. An attacker with the knowledge of the Dockerfile someone is using could poison their cache by making them pull a specially crafted image that would be considered as a valid cache candidate for some build steps. 23.0+ users are only affected if they explicitly opted out of Buildkit (DOCKER_BUILDKIT=0 environment variable) or are using the /build API endpoint. All users on versions older than 23.0 could be impacted. Image build API endpoint (/build) and ImageBuild function from github.com/docker/docker/client is also affected as it the uses classic builder by default. Patches are included in 24.0.9 and 25.0.2 releases.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.8      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [24.0.9], [25.0.2]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2022-23772_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-23772] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Rat.SetString in math/big in Go before 1.16.14 and 1.17.x before 1.17.7 has an overflow that can lead to Uncontrolled Memory Consumption.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.16.14], [1.17.7]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2024-24557_github.com/docker/docker_20.10.25+incompatible",
              "shortDescription": {
                "text": "[CVE-2024-24557] github.com/docker/docker 20.10.25+incompatible"
              },
              "help": {
                "text": "Moby is an open-source project created by Docker to enable software containerization. The classic builder cache system is prone to cache poisoning if the image is built FROM scratch. Also, changes to some instructions (most important being HEALTHCHECK and ONBUILD) would not cause a cache miss. An attacker with the knowledge of the Dockerfile someone is using could poison their cache by making them pull a specially crafted image that would be considered as a valid cache candidate for some build steps. 23.0+ users are only affected if they explicitly opted out of Buildkit (DOCKER_BUILDKIT=0 environment variable) or are using the /build API endpoint. All users on versions older than 23.0 could be impacted. Image build API endpoint (/build) and ImageBuild function from github.com/docker/docker/client is also affected as it the uses classic builder by default. Patches are included in 24.0.9 and 25.0.2 releases.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.8      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [24.0.9], [25.0.2]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2022-30631_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-30631] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Uncontrolled recursion in Reader.Read in compress/gzip before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via an archive containing a large number of concatenated 0-length compressed files.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-24921_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-24921] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "regexp.Compile in Go before 1.16.15 and 1.17.x before 1.17.8 allows stack exhaustion via a deeply nested expression.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.16.15], [1.17.8]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41716_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2022-41716] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Due to unsanitized NUL values, attackers may be able to maliciously set environment variables on Windows. In syscall.StartProcess and os/exec.Cmd, invalid environment variable values containing NUL values are not properly checked for. A malicious environment variable value can exploit this behavior to set a value for a different environment variable. For example, the environment variable string \"A=B\\x00C=D\" sets the variables \"A=B\" and \"C=D\".",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.18.8], [1.19.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-39323_github.com/golang/go_1.19.7",
              "shortDescription": {
                "text": "[CVE-2023-39323] github.com/golang/go 1.19.7"
              },
              "help": {
                "text": "Line directives (\"//line\") can be used to bypass the restrictions on \"//go:cgo_\" directives, allowing blocked linker and compiler flags to be passed during compilation. This can result in unexpected execution of arbitrary code when running \"go build\". The line directive requires the absolute path of the file in which the directive lives, which makes exploiting this issue significantly more complex.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 8.1      | `sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar `       | [1.20.9], [1.21.2]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2022-41720_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-41720] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "On Windows, restricted files can be accessed via os.DirFS and http.Dir. The os.DirFS function and http.Dir type provide access to a tree of files rooted at a given directory. These functions permit access to Windows device files under that root. For example, os.DirFS(\"C:/tmp\").Open(\"COM1\") opens the COM1 device. Both os.DirFS and http.Dir only provide read-only filesystem access. In addition, on Windows, an os.DirFS for the directory (the root of the current drive) can permit a maliciously crafted path to escape from the drive and access any path on the system. With fix applied, the behavior of os.DirFS(\"\") has changed. Previously, an empty root was treated equivalently to \"/\", so os.DirFS(\"\").Open(\"tmp\") would open the path \"/tmp\". This now returns an error.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.18.9], [1.19.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41725_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-41725] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "A denial of service is possible from excessive resource consumption in net/http and mime/multipart. Multipart form parsing with mime/multipart.Reader.ReadForm can consume largely unlimited amounts of memory and disk files. This also affects form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. ReadForm takes a maxMemory parameter, and is documented as storing \"up to maxMemory bytes +10MB (reserved for non-file parts) in memory\". File parts which cannot be stored in memory are stored on disk in temporary files. The unconfigurable 10MB reserved for non-file parts is excessively large and can potentially open a denial of service vector on its own. However, ReadForm did not properly account for all memory consumed by a parsed form, such as map entry overhead, part names, and MIME headers, permitting a maliciously crafted form to consume well over 10MB. In addition, ReadForm contained no limit on the number of disk files created, permitting a relatively small request body to create a large number of disk temporary files. With fix, ReadForm now properly accounts for various forms of memory overhead, and should now stay within its documented limit of 10MB + maxMemory bytes of memory consumption. Users should still be aware that this limit is high and may still be hazardous. In addition, ReadForm now creates at most one on-disk temporary file, combining multiple form parts into a single temporary file. The mime/multipart.File interface type's documentation states, \"If stored on disk, the File's underlying concrete type will be an *os.File.\". This is no longer the case when a form contains more than one file part, due to this coalescing of parts into a single file. The previous behavior of using distinct files for each form part may be reenabled with the environment variable GODEBUG=multipartfiles=distinct. Users should be aware that multipart.ReadForm and the http.Request methods that call it do not limit the amount of disk consumed by temporary ...",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41722_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-41722] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "A path traversal vulnerability exists in filepath.Clean on Windows. On Windows, the filepath.Clean function could transform an invalid path such as \"a/../c:/b\" into the valid path \"c:\\b\". This transformation of a relative (if invalid) path into an absolute path could enable a directory traversal attack. After fix, the filepath.Clean function transforms this path into the relative (but still invalid) path \".\\c:\\b\".",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2024-24557_github.com/docker/docker_20.10.9+incompatible",
              "shortDescription": {
                "text": "[CVE-2024-24557] github.com/docker/docker 20.10.9+incompatible"
              },
              "help": {
                "text": "Moby is an open-source project created by Docker to enable software containerization. The classic builder cache system is prone to cache poisoning if the image is built FROM scratch. Also, changes to some instructions (most important being HEALTHCHECK and ONBUILD) would not cause a cache miss. An attacker with the knowledge of the Dockerfile someone is using could poison their cache by making them pull a specially crafted image that would be considered as a valid cache candidate for some build steps. 23.0+ users are only affected if they explicitly opted out of Buildkit (DOCKER_BUILDKIT=0 environment variable) or are using the /build API endpoint. All users on versions older than 23.0 could be impacted. Image build API endpoint (/build) and ImageBuild function from github.com/docker/docker/client is also affected as it the uses classic builder by default. Patches are included in 24.0.9 and 25.0.2 releases.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.8      | `sha256__0cd215bda863ad4c73080e4b3dac0224982c891026ed83c26f1146ca938e7b42.tar `       | [24.0.9], [25.0.2]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2018-12608_github.com/moby/moby_1.4.2-0.20170731201646-1009e6a40b29",
              "shortDescription": {
                "text": "[CVE-2018-12608] github.com/moby/moby 1.4.2-0.20170731201646-1009e6a40b29"
              },
              "help": {
                "text": "An issue was discovered in Docker Moby before 17.06.0. The Docker engine validated a client TLS certificate using both the configured client CA root certificate and all system roots on non-Windows systems. This allowed a client with any domain validated certificate signed by a system-trusted root CA (as opposed to one signed by the configured CA root certificate) to authenticate.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [17.06.0-ce]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-29403_github.com/golang/go_1.19.7",
              "shortDescription": {
                "text": "[CVE-2023-29403] github.com/golang/go 1.19.7"
              },
              "help": {
                "text": "On Unix platforms, the Go runtime does not behave differently when a binary is run with the setuid/setgid bits. This can be dangerous in certain cases, such as when dumping memory state, or assuming the status of standard i/o file descriptors. If a setuid/setgid binary is executed with standard I/O file descriptors closed, opening any files can result in unexpected content being read or written with elevated privileges. Similarly, if a setuid/setgid program is terminated, either via panic or signal, it may leak the contents of its registers.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.8      | `sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2022-23772_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2022-23772] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Rat.SetString in math/big in Go before 1.16.14 and 1.17.x before 1.17.7 has an overflow that can lead to Uncontrolled Memory Consumption.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.16.14], [1.17.7]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2019-17596_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2019-17596] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Go before 1.12.11 and 1.3.x before 1.13.2 can panic upon an attempt to process network traffic containing an invalid DSA public key. There are several attack scenarios, such as traffic from a client to a server that verifies client certificates.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.12.11], [1.13.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2019-16276_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2019-16276] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Go before 1.12.10 and 1.13.x before 1.13.1 allow HTTP Request Smuggling.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.12.10], [1.13.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30631_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2022-30631] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Uncontrolled recursion in Reader.Read in compress/gzip before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via an archive containing a large number of concatenated 0-length compressed files.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24536_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2023-24536] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Multipart form parsing can consume large amounts of CPU and memory when processing form inputs containing very large numbers of parts. This stems from several causes: 1. mime/multipart.Reader.ReadForm limits the total memory a parsed multipart form can consume. ReadForm can undercount the amount of memory consumed, leading it to accept larger inputs than intended. 2. Limiting total memory does not account for increased pressure on the garbage collector from large numbers of small allocations in forms with many parts. 3. ReadForm can allocate a large number of short-lived buffers, further increasing pressure on the garbage collector. The combination of these factors can permit an attacker to cause an program that parses multipart forms to consume large amounts of CPU and memory, potentially resulting in a denial of service. This affects programs that use mime/multipart.Reader.ReadForm, as well as form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. With fix, ReadForm now does a better job of estimating the memory consumption of parsed forms, and performs many fewer short-lived allocations. In addition, the fixed mime/multipart.Reader imposes the following limits on the size of parsed forms: 1. Forms parsed with ReadForm may contain no more than 1000 parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxparts=. 2. Form parts parsed with NextPart and NextRawPart may contain no more than 10,000 header fields. In addition, forms parsed with ReadForm may contain no more than 10,000 header fields across all parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxheaders=.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41722_github.com/golang/go_1.20",
              "shortDescription": {
                "text": "[CVE-2022-41722] github.com/golang/go 1.20"
              },
              "help": {
                "text": "A path traversal vulnerability exists in filepath.Clean on Windows. On Windows, the filepath.Clean function could transform an invalid path such as \"a/../c:/b\" into the valid path \"c:\\b\". This transformation of a relative (if invalid) path into an absolute path could enable a directory traversal attack. After fix, the filepath.Clean function transforms this path into the relative (but still invalid) path \".\\c:\\b\".",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-39323_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-39323] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Line directives (\"//line\") can be used to bypass the restrictions on \"//go:cgo_\" directives, allowing blocked linker and compiler flags to be passed during compilation. This can result in unexpected execution of arbitrary code when running \"go build\". The line directive requires the absolute path of the file in which the directive lives, which makes exploiting this issue significantly more complex.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 8.1      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.20.9], [1.21.2]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2023-24539_github.com/golang/go_1.20",
              "shortDescription": {
                "text": "[CVE-2023-24539] github.com/golang/go 1.20"
              },
              "help": {
                "text": "Angle brackets (\u003c\u003e) are not considered dangerous characters when inserted into CSS contexts. Templates containing multiple actions separated by a '/' character can result in unexpectedly closing the CSS context and allowing for injection of unexpected HTML, if executed with untrusted input.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.3      | `sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2020-28366_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2020-28366] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Code injection in the go command with cgo before Go 1.14.12 and Go 1.15.5 allows arbitrary code execution at build time via a malicious unquoted symbol name in a linked object file.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.14.12], [1.15.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45283_github.com/golang/go_1.18.10",
              "shortDescription": {
                "text": "[CVE-2023-45283] github.com/golang/go 1.18.10"
              },
              "help": {
                "text": "The filepath package does not recognize paths with a \\??\\ prefix as special. On Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x. Before fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b. Similarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b. In addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name. UPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.20.11], [1.20.12], [1.21.4], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-29400_github.com/golang/go_1.18.10",
              "shortDescription": {
                "text": "[CVE-2023-29400] github.com/golang/go 1.18.10"
              },
              "help": {
                "text": "Templates containing actions in unquoted HTML attributes (e.g. \"attr={{.}}\") executed with empty input can result in output with unexpected results when parsed due to HTML normalization rules. This may allow injection of arbitrary attributes into tags.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.3      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2023-44487_golang.org/x/net_0.12.0",
              "shortDescription": {
                "text": "[CVE-2023-44487] golang.org/x/net 0.12.0"
              },
              "help": {
                "text": "The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2014-0047_github.com/moby/moby_1.4.2-0.20170731201646-1009e6a40b29",
              "shortDescription": {
                "text": "[CVE-2014-0047] github.com/moby/moby 1.4.2-0.20170731201646-1009e6a40b29"
              },
              "help": {
                "text": "Docker before 1.5 allows local users to have unspecified impact via vectors involving unsafe /tmp usage.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.8      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.5]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2022-23773_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-23773] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "cmd/go in Go before 1.16.14 and 1.17.x before 1.17.7 can misinterpret branch names that falsely appear to be version tags. This can lead to incorrect access control if an actor is supposed to be able to create branches but not tags.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.16.14], [1.17.7]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-39325_golang.org/x/net_0.4.0",
              "shortDescription": {
                "text": "[CVE-2023-39325] golang.org/x/net 0.4.0"
              },
              "help": {
                "text": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing. With the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection. This issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2. The default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24536_github.com/golang/go_1.19.7",
              "shortDescription": {
                "text": "[CVE-2023-24536] github.com/golang/go 1.19.7"
              },
              "help": {
                "text": "Multipart form parsing can consume large amounts of CPU and memory when processing form inputs containing very large numbers of parts. This stems from several causes: 1. mime/multipart.Reader.ReadForm limits the total memory a parsed multipart form can consume. ReadForm can undercount the amount of memory consumed, leading it to accept larger inputs than intended. 2. Limiting total memory does not account for increased pressure on the garbage collector from large numbers of small allocations in forms with many parts. 3. ReadForm can allocate a large number of short-lived buffers, further increasing pressure on the garbage collector. The combination of these factors can permit an attacker to cause an program that parses multipart forms to consume large amounts of CPU and memory, potentially resulting in a denial of service. This affects programs that use mime/multipart.Reader.ReadForm, as well as form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. With fix, ReadForm now does a better job of estimating the memory consumption of parsed forms, and performs many fewer short-lived allocations. In addition, the fixed mime/multipart.Reader imposes the following limits on the size of parsed forms: 1. Forms parsed with ReadForm may contain no more than 1000 parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxparts=. 2. Form parts parsed with NextPart and NextRawPart may contain no more than 10,000 header fields. In addition, forms parsed with ReadForm may contain no more than 10,000 header fields across all parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxheaders=.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30633_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2022-30633] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Uncontrolled recursion in Unmarshal in encoding/xml before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via unmarshalling an XML document into a Go struct which has a nested field that uses the 'any' field tag.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-2879_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-2879] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Reader.Read does not set a limit on the maximum size of file headers. A maliciously crafted archive could cause Read to allocate unbounded amounts of memory, potentially causing resource exhaustion or panics. After fix, Reader.Read limits the maximum size of header blocks to 1 MiB.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.18.7], [1.19.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24539_github.com/golang/go_1.18.10",
              "shortDescription": {
                "text": "[CVE-2023-24539] github.com/golang/go 1.18.10"
              },
              "help": {
                "text": "Angle brackets (\u003c\u003e) are not considered dangerous characters when inserted into CSS contexts. Templates containing multiple actions separated by a '/' character can result in unexpectedly closing the CSS context and allowing for injection of unexpected HTML, if executed with untrusted input.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.3      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2022-41724_github.com/golang/go_1.18.10",
              "shortDescription": {
                "text": "[CVE-2022-41724] github.com/golang/go 1.18.10"
              },
              "help": {
                "text": "Large handshake records may cause panics in crypto/tls. Both clients and servers may send large TLS handshake records which cause servers and clients, respectively, to panic when attempting to construct responses. This affects all TLS 1.3 clients, TLS 1.2 clients which explicitly enable session resumption (by setting Config.ClientSessionCache to a non-nil value), and TLS 1.3 servers which request client certificates (by setting Config.ClientAuth \u003e= RequestClientCert).",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45285_github.com/golang/go_1.18.10",
              "shortDescription": {
                "text": "[CVE-2023-45285] github.com/golang/go 1.18.10"
              },
              "help": {
                "text": "Using go get to fetch a module with the \".git\" suffix may unexpectedly fallback to the insecure \"git://\" protocol if the module is unavailable via the secure \"https://\" and \"git+ssh://\" protocols, even if GOINSECURE is not set for said module. This only affects users who are not using the module proxy and are fetching modules directly (i.e. GOPROXY=off).",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24534_github.com/golang/go_1.20",
              "shortDescription": {
                "text": "[CVE-2023-24534] github.com/golang/go 1.20"
              },
              "help": {
                "text": "HTTP and MIME header parsing can allocate large amounts of memory, even when parsing small inputs, potentially leading to a denial of service. Certain unusual patterns of input data can cause the common function used to parse HTTP and MIME headers to allocate substantially more memory than required to hold the parsed headers. An attacker can exploit this behavior to cause an HTTP server to allocate large amounts of memory from a small request, potentially leading to memory exhaustion and a denial of service. With fix, header parsing now correctly allocates only the memory required to hold parsed headers.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-28840_github.com/docker/docker_20.10.9+incompatible",
              "shortDescription": {
                "text": "[CVE-2023-28840] github.com/docker/docker 20.10.9+incompatible"
              },
              "help": {
                "text": "Moby is an open source container framework developed by Docker Inc. that is distributed as Docker, Mirantis Container Runtime, and various other downstream projects/products. The Moby daemon component (`dockerd`), which is developed as moby/moby, is commonly referred to as *Docker*.\n\nSwarm Mode, which is compiled in and delivered by default in dockerd and is thus present in most major Moby downstreams, is a simple, built-in container orchestrator that is implemented through a combination of SwarmKit and supporting network code.\n\nThe overlay network driver is a core feature of Swarm Mode, providing isolated virtual LANs that allow communication between containers and services across the cluster. This driver is an implementation/user of VXLAN, which encapsulates link-layer (Ethernet) frames in UDP datagrams that tag the frame with a VXLAN Network ID (VNI) that identifies the originating overlay network. In addition, the overlay network driver supports an optional, off-by-default encrypted mode, which is especially useful when VXLAN packets traverses an untrusted network between nodes.\n\nEncrypted overlay networks function by encapsulating the VXLAN datagrams through the use of the IPsec Encapsulating Security Payload protocol in Transport mode. By deploying IPSec encapsulation, encrypted overlay networks gain the additional properties of source authentication through cryptographic proof, data integrity through check-summing, and confidentiality through encryption.\n\nWhen setting an endpoint up on an encrypted overlay network, Moby installs three iptables (Linux kernel firewall) rules that enforce both incoming and outgoing IPSec. These rules rely on the u32 iptables extension provided by the xt_u32 kernel module to directly filter on a VXLAN packet's VNI field, so that IPSec guarantees can be enforced on encrypted overlay networks without interfering with other overlay networks or other users of VXLAN.\n\nTwo iptables rules serve to filter incoming VXLAN datagrams with a VNI that corresponds to an encrypted net...",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 8.7      | `sha256__0cd215bda863ad4c73080e4b3dac0224982c891026ed83c26f1146ca938e7b42.tar `       | [20.10.24], [23.0.3]   |"
              },
              "properties": {
                "security-severity": "8.7"
              }
            },
            {
              "id": "CVE-2023-45287_github.com/golang/go_1.18.10",
              "shortDescription": {
                "text": "[CVE-2023-45287] github.com/golang/go 1.18.10"
              },
              "help": {
                "text": "Before Go 1.20, the RSA based TLS key exchanges used the math/big library, which is not constant time. RSA blinding was applied to prevent timing attacks, but analysis shows this may not have been fully effective. In particular it appears as if the removal of PKCS#1 padding may leak timing information, which in turn could be used to recover session key bits. In Go 1.20, the crypto/tls library switched to a fully constant time RSA implementation, which we do not believe exhibits any timing side channels.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.20.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2024-22189_github.com/quic-go/quic-go_0.38.2",
              "shortDescription": {
                "text": "[CVE-2024-22189] github.com/quic-go/quic-go 0.38.2"
              },
              "help": {
                "text": "quic-go is an implementation of the QUIC protocol in Go. Prior to version 0.42.0, an attacker can cause its peer to run out of memory sending a large number of `NEW_CONNECTION_ID` frames that retire old connection IDs. The receiver is supposed to respond to each retirement frame with a `RETIRE_CONNECTION_ID` frame. The attacker can prevent the receiver from sending out (the vast majority of) these `RETIRE_CONNECTION_ID` frames by collapsing the peers congestion window (by selectively acknowledging received packets) and by manipulating the peer's RTT estimate. Version 0.42.0 contains a patch for the issue. No known workarounds are available.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__58df8290592143d99a2e16b12a9a04501e511b0020e4c7bd5a0bef516fea6032.tar `       | [0.42.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-32189_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-32189] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "A too-short encoded message can cause a panic in Float.GobDecode and Rat GobDecode in math/big in Go before 1.17.13 and 1.18.5, potentially allowing a denial of service.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.17.13], [1.18.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-3676_k8s.io/kubernetes_1.24.16",
              "shortDescription": {
                "text": "[CVE-2023-3676] k8s.io/kubernetes 1.24.16"
              },
              "help": {
                "text": "A security issue was discovered in Kubernetes where a user\n that can create pods on Windows nodes may be able to escalate to admin \nprivileges on those nodes. Kubernetes clusters are only affected if they\n include Windows nodes.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 8.8      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.24.17], [1.25.13], [1.26.8], [1.27.5], [1.28.1]   |"
              },
              "properties": {
                "security-severity": "8.8"
              }
            },
            {
              "id": "CVE-2024-21626_github.com/opencontainers/runc_1.1.5",
              "shortDescription": {
                "text": "[CVE-2024-21626] github.com/opencontainers/runc 1.1.5"
              },
              "help": {
                "text": "runc is a CLI tool for spawning and running containers on Linux according to the OCI specification. In runc 1.1.11 and earlier, due to an internal file descriptor leak, an attacker could cause a newly-spawned container process (from runc exec) to have a working directory in the host filesystem namespace, allowing for a container escape by giving access to the host filesystem (\"attack 2\"). The same attack could be used by a malicious image to allow a container process to gain access to the host filesystem through runc run (\"attack 1\"). Variants of attacks 1 and 2 could be also be used to overwrite semi-arbitrary host binaries, allowing for complete container escapes (\"attack 3a\" and \"attack 3b\"). runc 1.1.12 includes patches for this issue.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 8.6      | `sha256__58df8290592143d99a2e16b12a9a04501e511b0020e4c7bd5a0bef516fea6032.tar `       | [1.1.12]   |"
              },
              "properties": {
                "security-severity": "8.6"
              }
            },
            {
              "id": "CVE-2023-24537_github.com/golang/go_1.19.7",
              "shortDescription": {
                "text": "[CVE-2023-24537] github.com/golang/go 1.19.7"
              },
              "help": {
                "text": "Calling any of the Parse functions on Go source code which contains //line directives with very large line numbers can cause an infinite loop due to integer overflow.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41715_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2022-41715] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Programs which compile regular expressions from untrusted sources may be vulnerable to memory exhaustion or denial of service. The parsed regexp representation is linear in the size of the input, but in some cases the constant factor can be as high as 40,000, making relatively small regexps consume much larger amounts of memory. After fix, each regexp being parsed is limited to a 256 MB memory footprint. Regular expressions whose representation would use more space than that are rejected. Normal use of regular expressions is unaffected.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.18.7], [1.19.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-24921_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2022-24921] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "regexp.Compile in Go before 1.16.15 and 1.17.x before 1.17.8 allows stack exhaustion via a deeply nested expression.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.16.15], [1.17.8]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-29403_github.com/golang/go_1.18.10",
              "shortDescription": {
                "text": "[CVE-2023-29403] github.com/golang/go 1.18.10"
              },
              "help": {
                "text": "On Unix platforms, the Go runtime does not behave differently when a binary is run with the setuid/setgid bits. This can be dangerous in certain cases, such as when dumping memory state, or assuming the status of standard i/o file descriptors. If a setuid/setgid binary is executed with standard I/O file descriptors closed, opening any files can result in unexpected content being read or written with elevated privileges. Similarly, if a setuid/setgid program is terminated, either via panic or signal, it may leak the contents of its registers.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.8      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2022-41722_github.com/golang/go_1.18.10",
              "shortDescription": {
                "text": "[CVE-2022-41722] github.com/golang/go 1.18.10"
              },
              "help": {
                "text": "A path traversal vulnerability exists in filepath.Clean on Windows. On Windows, the filepath.Clean function could transform an invalid path such as \"a/../c:/b\" into the valid path \"c:\\b\". This transformation of a relative (if invalid) path into an absolute path could enable a directory traversal attack. After fix, the filepath.Clean function transforms this path into the relative (but still invalid) path \".\\c:\\b\".",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-39293_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2021-39293] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "In archive/zip in Go before 1.16.8 and 1.17.x before 1.17.1, a crafted archive header (falsely designating that many files are present) can cause a NewReader or OpenReader panic. NOTE: this issue exists because of an incomplete fix for CVE-2021-33196.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.16.8], [1.17.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-44487_golang.org/x/net_0.8.0",
              "shortDescription": {
                "text": "[CVE-2023-44487] golang.org/x/net 0.8.0"
              },
              "help": {
                "text": "The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__58df8290592143d99a2e16b12a9a04501e511b0020e4c7bd5a0bef516fea6032.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30632_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2022-30632] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Uncontrolled recursion in Glob in path/filepath before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a path containing a large number of path separators.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24536_github.com/golang/go_1.18.10",
              "shortDescription": {
                "text": "[CVE-2023-24536] github.com/golang/go 1.18.10"
              },
              "help": {
                "text": "Multipart form parsing can consume large amounts of CPU and memory when processing form inputs containing very large numbers of parts. This stems from several causes: 1. mime/multipart.Reader.ReadForm limits the total memory a parsed multipart form can consume. ReadForm can undercount the amount of memory consumed, leading it to accept larger inputs than intended. 2. Limiting total memory does not account for increased pressure on the garbage collector from large numbers of small allocations in forms with many parts. 3. ReadForm can allocate a large number of short-lived buffers, further increasing pressure on the garbage collector. The combination of these factors can permit an attacker to cause an program that parses multipart forms to consume large amounts of CPU and memory, potentially resulting in a denial of service. This affects programs that use mime/multipart.Reader.ReadForm, as well as form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. With fix, ReadForm now does a better job of estimating the memory consumption of parsed forms, and performs many fewer short-lived allocations. In addition, the fixed mime/multipart.Reader imposes the following limits on the size of parsed forms: 1. Forms parsed with ReadForm may contain no more than 1000 parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxparts=. 2. Form parts parsed with NextPart and NextRawPart may contain no more than 10,000 header fields. In addition, forms parsed with ReadForm may contain no more than 10,000 header fields across all parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxheaders=.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41720_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2022-41720] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "On Windows, restricted files can be accessed via os.DirFS and http.Dir. The os.DirFS function and http.Dir type provide access to a tree of files rooted at a given directory. These functions permit access to Windows device files under that root. For example, os.DirFS(\"C:/tmp\").Open(\"COM1\") opens the COM1 device. Both os.DirFS and http.Dir only provide read-only filesystem access. In addition, on Windows, an os.DirFS for the directory (the root of the current drive) can permit a maliciously crafted path to escape from the drive and access any path on the system. With fix applied, the behavior of os.DirFS(\"\") has changed. Previously, an empty root was treated equivalently to \"/\", so os.DirFS(\"\").Open(\"tmp\") would open the path \"/tmp\". This now returns an error.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.18.9], [1.19.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30635_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-30635] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Uncontrolled recursion in Decoder.Decode in encoding/gob before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a message which contains deeply nested structures.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41723_golang.org/x/net_0.4.0",
              "shortDescription": {
                "text": "[CVE-2022-41723] golang.org/x/net 0.4.0"
              },
              "help": {
                "text": "A maliciously crafted HTTP/2 stream could cause excessive CPU consumption in the HPACK decoder, sufficient to cause a denial of service from a small number of small requests.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar `       | [0.7.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24534_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-24534] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "HTTP and MIME header parsing can allocate large amounts of memory, even when parsing small inputs, potentially leading to a denial of service. Certain unusual patterns of input data can cause the common function used to parse HTTP and MIME headers to allocate substantially more memory than required to hold the parsed headers. An attacker can exploit this behavior to cause an HTTP server to allocate large amounts of memory from a small request, potentially leading to memory exhaustion and a denial of service. With fix, header parsing now correctly allocates only the memory required to hold parsed headers.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-39325_golang.org/x/net_0.12.0",
              "shortDescription": {
                "text": "[CVE-2023-39325] golang.org/x/net 0.12.0"
              },
              "help": {
                "text": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing. With the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection. This issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2. The default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-2879_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2022-2879] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Reader.Read does not set a limit on the maximum size of file headers. A maliciously crafted archive could cause Read to allocate unbounded amounts of memory, potentially causing resource exhaustion or panics. After fix, Reader.Read limits the maximum size of header blocks to 1 MiB.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.18.7], [1.19.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45283_github.com/golang/go_1.20.5",
              "shortDescription": {
                "text": "[CVE-2023-45283] github.com/golang/go 1.20.5"
              },
              "help": {
                "text": "The filepath package does not recognize paths with a \\??\\ prefix as special. On Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x. Before fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b. Similarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b. In addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name. UPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.20.11], [1.20.12], [1.21.4], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-28327_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2022-28327] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "The generic P-256 feature in crypto/elliptic in Go before 1.17.9 and 1.18.x before 1.18.1 allows a panic via long scalar input.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.17.9], [1.18.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-39325_golang.org/x/net_0.11.0",
              "shortDescription": {
                "text": "[CVE-2023-39325] golang.org/x/net 0.11.0"
              },
              "help": {
                "text": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing. With the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection. This issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2. The default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45285_github.com/golang/go_1.20",
              "shortDescription": {
                "text": "[CVE-2023-45285] github.com/golang/go 1.20"
              },
              "help": {
                "text": "Using go get to fetch a module with the \".git\" suffix may unexpectedly fallback to the insecure \"git://\" protocol if the module is unavailable via the secure \"https://\" and \"git+ssh://\" protocols, even if GOINSECURE is not set for said module. This only affects users who are not using the module proxy and are fetching modules directly (i.e. GOPROXY=off).",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30634_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2022-30634] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Infinite loop in Read in crypto/rand before Go 1.17.11 and Go 1.18.3 on Windows allows attacker to cause an indefinite hang by passing a buffer larger than 1 \u003c\u003c 32 - 1 bytes.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-39323_github.com/golang/go_1.18.10",
              "shortDescription": {
                "text": "[CVE-2023-39323] github.com/golang/go 1.18.10"
              },
              "help": {
                "text": "Line directives (\"//line\") can be used to bypass the restrictions on \"//go:cgo_\" directives, allowing blocked linker and compiler flags to be passed during compilation. This can result in unexpected execution of arbitrary code when running \"go build\". The line directive requires the absolute path of the file in which the directive lives, which makes exploiting this issue significantly more complex.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 8.1      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.20.9], [1.21.2]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2023-24537_github.com/golang/go_1.20",
              "shortDescription": {
                "text": "[CVE-2023-24537] github.com/golang/go 1.20"
              },
              "help": {
                "text": "Calling any of the Parse functions on Go source code which contains //line directives with very large line numbers can cause an infinite loop due to integer overflow.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-29804_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2022-29804] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Incorrect conversion of certain invalid paths to valid, absolute paths in Clean in path/filepath before Go 1.17.11 and Go 1.18.3 on Windows allows potential directory traversal attack.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2020-28367_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2020-28367] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Code injection in the go command with cgo before Go 1.14.12 and Go 1.15.5 allows arbitrary code execution at build time via malicious gcc flags specified via a #cgo directive.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.14.12], [1.15.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-2880_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2022-2880] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Requests forwarded by ReverseProxy include the raw query parameters from the inbound request, including unparsable parameters rejected by net/http. This could permit query parameter smuggling when a Go proxy forwards a parameter with an unparsable value. After fix, ReverseProxy sanitizes the query parameters in the forwarded query when the outbound request's Form field is set after the ReverseProxy. Director function returns, indicating that the proxy has parsed the query parameters. Proxies which do not parse query parameters continue to forward the original query parameters unchanged.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.18.7], [1.19.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45283_github.com/golang/go_1.20.7",
              "shortDescription": {
                "text": "[CVE-2023-45283] github.com/golang/go 1.20.7"
              },
              "help": {
                "text": "The filepath package does not recognize paths with a \\??\\ prefix as special. On Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x. Before fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b. Similarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b. In addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name. UPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.20.11], [1.20.12], [1.21.4], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-29400_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-29400] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Templates containing actions in unquoted HTML attributes (e.g. \"attr={{.}}\") executed with empty input can result in output with unexpected results when parsed due to HTML normalization rules. This may allow injection of arbitrary attributes into tags.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.3      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2023-44487_golang.org/x/net_0.11.0",
              "shortDescription": {
                "text": "[CVE-2023-44487] golang.org/x/net 0.11.0"
              },
              "help": {
                "text": "The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-27918_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2021-27918] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "encoding/xml in Go before 1.15.9 and 1.16.x before 1.16.1 has an infinite loop if a custom TokenReader (for xml.NewTokenDecoder) returns EOF in the middle of an element. This can occur in the Decode, DecodeElement, or Skip method.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.15.9], [1.16.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-39325_golang.org/x/net_0.9.0",
              "shortDescription": {
                "text": "[CVE-2023-39325] golang.org/x/net 0.9.0"
              },
              "help": {
                "text": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing. With the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection. This issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2. The default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45285_github.com/golang/go_1.20.5",
              "shortDescription": {
                "text": "[CVE-2023-45285] github.com/golang/go 1.20.5"
              },
              "help": {
                "text": "Using go get to fetch a module with the \".git\" suffix may unexpectedly fallback to the insecure \"git://\" protocol if the module is unavailable via the secure \"https://\" and \"git+ssh://\" protocols, even if GOINSECURE is not set for said module. This only affects users who are not using the module proxy and are fetching modules directly (i.e. GOPROXY=off).",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-44487_google.golang.org/grpc_1.57.0",
              "shortDescription": {
                "text": "[CVE-2023-44487] google.golang.org/grpc 1.57.0"
              },
              "help": {
                "text": "The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.56.3], [1.57.1], [1.58.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30635_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2022-30635] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Uncontrolled recursion in Decoder.Decode in encoding/gob before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a message which contains deeply nested structures.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-29403_github.com/golang/go_1.20",
              "shortDescription": {
                "text": "[CVE-2023-29403] github.com/golang/go 1.20"
              },
              "help": {
                "text": "On Unix platforms, the Go runtime does not behave differently when a binary is run with the setuid/setgid bits. This can be dangerous in certain cases, such as when dumping memory state, or assuming the status of standard i/o file descriptors. If a setuid/setgid binary is executed with standard I/O file descriptors closed, opening any files can result in unexpected content being read or written with elevated privileges. Similarly, if a setuid/setgid program is terminated, either via panic or signal, it may leak the contents of its registers.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.8      | `sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2022-28131_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2022-28131] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Uncontrolled recursion in Decoder.Skip in encoding/xml before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a deeply nested XML document.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45285_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-45285] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Using go get to fetch a module with the \".git\" suffix may unexpectedly fallback to the insecure \"git://\" protocol if the module is unavailable via the secure \"https://\" and \"git+ssh://\" protocols, even if GOINSECURE is not set for said module. This only affects users who are not using the module proxy and are fetching modules directly (i.e. GOPROXY=off).",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2024-24557_github.com/docker/docker_24.0.7+incompatible",
              "shortDescription": {
                "text": "[CVE-2024-24557] github.com/docker/docker 24.0.7+incompatible"
              },
              "help": {
                "text": "Moby is an open-source project created by Docker to enable software containerization. The classic builder cache system is prone to cache poisoning if the image is built FROM scratch. Also, changes to some instructions (most important being HEALTHCHECK and ONBUILD) would not cause a cache miss. An attacker with the knowledge of the Dockerfile someone is using could poison their cache by making them pull a specially crafted image that would be considered as a valid cache candidate for some build steps. 23.0+ users are only affected if they explicitly opted out of Buildkit (DOCKER_BUILDKIT=0 environment variable) or are using the /build API endpoint. All users on versions older than 23.0 could be impacted. Image build API endpoint (/build) and ImageBuild function from github.com/docker/docker/client is also affected as it the uses classic builder by default. Patches are included in 24.0.9 and 25.0.2 releases.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.8      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `\u003cbr/\u003e`sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar `       | [24.0.9], [25.0.2]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2023-24534_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2023-24534] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "HTTP and MIME header parsing can allocate large amounts of memory, even when parsing small inputs, potentially leading to a denial of service. Certain unusual patterns of input data can cause the common function used to parse HTTP and MIME headers to allocate substantially more memory than required to hold the parsed headers. An attacker can exploit this behavior to cause an HTTP server to allocate large amounts of memory from a small request, potentially leading to memory exhaustion and a denial of service. With fix, header parsing now correctly allocates only the memory required to hold parsed headers.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-39325_golang.org/x/net_0.8.0",
              "shortDescription": {
                "text": "[CVE-2023-39325] golang.org/x/net 0.8.0"
              },
              "help": {
                "text": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing. With the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection. This issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2. The default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__58df8290592143d99a2e16b12a9a04501e511b0020e4c7bd5a0bef516fea6032.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41724_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2022-41724] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Large handshake records may cause panics in crypto/tls. Both clients and servers may send large TLS handshake records which cause servers and clients, respectively, to panic when attempting to construct responses. This affects all TLS 1.3 clients, TLS 1.2 clients which explicitly enable session resumption (by setting Config.ClientSessionCache to a non-nil value), and TLS 1.3 servers which request client certificates (by setting Config.ClientAuth \u003e= RequestClientCert).",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-29804_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-29804] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Incorrect conversion of certain invalid paths to valid, absolute paths in Clean in path/filepath before Go 1.17.11 and Go 1.18.3 on Windows allows potential directory traversal attack.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-44487_golang.org/x/net_0.4.0",
              "shortDescription": {
                "text": "[CVE-2023-44487] golang.org/x/net 0.4.0"
              },
              "help": {
                "text": "The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-47108_go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc_0.35.0",
              "shortDescription": {
                "text": "[CVE-2023-47108] go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc 0.35.0"
              },
              "help": {
                "text": "OpenTelemetry-Go Contrib is a collection of third-party packages for OpenTelemetry-Go. Prior to version 0.46.0, the grpc Unary Server Interceptor out of the box adds labels `net.peer.sock.addr` and `net.peer.sock.port` that have unbound cardinality. It leads to the server's potential memory exhaustion when many malicious requests are sent. An attacker can easily flood the peer address and port for requests. Version 0.46.0 contains a fix for this issue. As a workaround to stop being affected, a view removing the attributes can be used. The other possibility is to disable grpc metrics instrumentation by passing `otelgrpc.WithMeterProvider` option with `noop.NewMeterProvider`.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__58df8290592143d99a2e16b12a9a04501e511b0020e4c7bd5a0bef516fea6032.tar `       | [0.46.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45283_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2023-45283] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "The filepath package does not recognize paths with a \\??\\ prefix as special. On Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x. Before fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b. Similarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b. In addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name. UPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.20.11], [1.20.12], [1.21.4], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24534_github.com/golang/go_1.19.7",
              "shortDescription": {
                "text": "[CVE-2023-24534] github.com/golang/go 1.19.7"
              },
              "help": {
                "text": "HTTP and MIME header parsing can allocate large amounts of memory, even when parsing small inputs, potentially leading to a denial of service. Certain unusual patterns of input data can cause the common function used to parse HTTP and MIME headers to allocate substantially more memory than required to hold the parsed headers. An attacker can exploit this behavior to cause an HTTP server to allocate large amounts of memory from a small request, potentially leading to memory exhaustion and a denial of service. With fix, header parsing now correctly allocates only the memory required to hold parsed headers.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-29403_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2023-29403] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "On Unix platforms, the Go runtime does not behave differently when a binary is run with the setuid/setgid bits. This can be dangerous in certain cases, such as when dumping memory state, or assuming the status of standard i/o file descriptors. If a setuid/setgid binary is executed with standard I/O file descriptors closed, opening any files can result in unexpected content being read or written with elevated privileges. Similarly, if a setuid/setgid program is terminated, either via panic or signal, it may leak the contents of its registers.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.8      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2024-24557_github.com/docker/docker_20.10.27+incompatible",
              "shortDescription": {
                "text": "[CVE-2024-24557] github.com/docker/docker 20.10.27+incompatible"
              },
              "help": {
                "text": "Moby is an open-source project created by Docker to enable software containerization. The classic builder cache system is prone to cache poisoning if the image is built FROM scratch. Also, changes to some instructions (most important being HEALTHCHECK and ONBUILD) would not cause a cache miss. An attacker with the knowledge of the Dockerfile someone is using could poison their cache by making them pull a specially crafted image that would be considered as a valid cache candidate for some build steps. 23.0+ users are only affected if they explicitly opted out of Buildkit (DOCKER_BUILDKIT=0 environment variable) or are using the /build API endpoint. All users on versions older than 23.0 could be impacted. Image build API endpoint (/build) and ImageBuild function from github.com/docker/docker/client is also affected as it the uses classic builder by default. Patches are included in 24.0.9 and 25.0.2 releases.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.8      | `sha256__190862799647a743f9e38781a7a4d6add1f39d71417aadfb324107266efb7aa2.tar `       | [24.0.9], [25.0.2]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2023-44487_golang.org/x/net_0.9.0",
              "shortDescription": {
                "text": "[CVE-2023-44487] golang.org/x/net 0.9.0"
              },
              "help": {
                "text": "The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30580_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2022-30580] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Code injection in Cmd.Start in os/exec before Go 1.17.11 and Go 1.18.3 allows execution of any binaries in the working directory named either \"..com\" or \"..exe\" by calling Cmd.Run, Cmd.Start, Cmd.Output, or Cmd.CombinedOutput when Cmd.Path is unset.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.8      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2021-33196_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2021-33196] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "In archive/zip in Go before 1.15.13 and 1.16.x before 1.16.5, a crafted file count (in an archive's header) can cause a NewReader or OpenReader panic.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.15.13], [1.16.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30580_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-30580] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Code injection in Cmd.Start in os/exec before Go 1.17.11 and Go 1.18.3 allows execution of any binaries in the working directory named either \"..com\" or \"..exe\" by calling Cmd.Run, Cmd.Start, Cmd.Output, or Cmd.CombinedOutput when Cmd.Path is unset.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.8      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2022-30634_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-30634] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Infinite loop in Read in crypto/rand before Go 1.17.11 and Go 1.18.3 on Windows allows attacker to cause an indefinite hang by passing a buffer larger than 1 \u003c\u003c 32 - 1 bytes.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-24675_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-24675] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "encoding/pem in Go before 1.17.9 and 1.18.x before 1.18.1 has a Decode stack overflow via a large amount of PEM data.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.17.9], [1.18.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-3893_github.com/kubernetes-csi/csi-proxy_1.1.3-0-g0211fea",
              "shortDescription": {
                "text": "[CVE-2023-3893] github.com/kubernetes-csi/csi-proxy 1.1.3-0-g0211fea"
              },
              "help": {
                "text": "A security issue was discovered in Kubernetes where a user that can \ncreate pods on Windows nodes running kubernetes-csi-proxy may be able to\n escalate to admin privileges on those nodes. Kubernetes clusters are \nonly affected if they include Windows nodes running \nkubernetes-csi-proxy.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 8.8      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.1.3], [2.0.0-alpha.1]   |"
              },
              "properties": {
                "security-severity": "8.8"
              }
            },
            {
              "id": "CVE-2022-32189_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2022-32189] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "A too-short encoded message can cause a panic in Float.GobDecode and Rat GobDecode in math/big in Go before 1.17.13 and 1.18.5, potentially allowing a denial of service.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.17.13], [1.18.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-5528_k8s.io/kubernetes_1.24.16",
              "shortDescription": {
                "text": "[CVE-2023-5528] k8s.io/kubernetes 1.24.16"
              },
              "help": {
                "text": "A security issue was discovered in Kubernetes where a user that can create pods and persistent volumes on Windows nodes may be able to escalate to admin privileges on those nodes. Kubernetes clusters are only affected if they are using an in-tree storage plugin for Windows nodes.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 8.8      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.25.16], [1.26.11], [1.27.8], [1.28.4]   |"
              },
              "properties": {
                "security-severity": "8.8"
              }
            },
            {
              "id": "CVE-2021-33198_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2021-33198] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "In Go before 1.15.13 and 1.16.x before 1.16.5, there can be a panic for a large exponent to the math/big.Rat SetString or UnmarshalText method.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.15.13], [1.16.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24539_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-24539] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Angle brackets (\u003c\u003e) are not considered dangerous characters when inserted into CSS contexts. Templates containing multiple actions separated by a '/' character can result in unexpectedly closing the CSS context and allowing for injection of unexpected HTML, if executed with untrusted input.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.3      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2023-44487_google.golang.org/grpc_1.40.0",
              "shortDescription": {
                "text": "[CVE-2023-44487] google.golang.org/grpc 1.40.0"
              },
              "help": {
                "text": "The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.56.3], [1.57.1], [1.58.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45142_go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp_0.35.1",
              "shortDescription": {
                "text": "[CVE-2023-45142] go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp 0.35.1"
              },
              "help": {
                "text": "OpenTelemetry-Go Contrib is a collection of third-party packages for OpenTelemetry-Go. A handler wrapper out of the box adds labels `http.user_agent` and `http.method` that have unbound cardinality. It leads to the server's potential memory exhaustion when many malicious requests are sent to it. HTTP header User-Agent or HTTP method for requests can be easily set by an attacker to be random and long. The library internally uses `httpconv.ServerRequest` that records every value for HTTP `method` and `User-Agent`. In order to be affected, a program has to use the `otelhttp.NewHandler` wrapper and not filter any unknown HTTP methods or User agents on the level of CDN, LB, previous middleware, etc. Version 0.44.0 fixed this issue when the values collected for attribute `http.request.method` were changed to be restricted to a set of well-known values and other high cardinality attributes were removed. As a workaround to stop being affected, `otelhttp.WithFilter()` can be used, but it requires manual careful configuration to not log certain requests entirely. For convenience and safe usage of this library, it should by default mark with the label `unknown` non-standard HTTP methods and User agents to show that such requests were made but do not increase cardinality. In case someone wants to stay with the current behavior, library API should allow to enable it.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__58df8290592143d99a2e16b12a9a04501e511b0020e4c7bd5a0bef516fea6032.tar `       | [0.44.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-29400_github.com/golang/go_1.19.7",
              "shortDescription": {
                "text": "[CVE-2023-29400] github.com/golang/go 1.19.7"
              },
              "help": {
                "text": "Templates containing actions in unquoted HTML attributes (e.g. \"attr={{.}}\") executed with empty input can result in output with unexpected results when parsed due to HTML normalization rules. This may allow injection of arbitrary attributes into tags.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.3      | `sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2014-8179_github.com/moby/moby_1.4.2-0.20170731201646-1009e6a40b29",
              "shortDescription": {
                "text": "[CVE-2014-8179] github.com/moby/moby 1.4.2-0.20170731201646-1009e6a40b29"
              },
              "help": {
                "text": "Docker Engine before 1.8.3 and CS Docker Engine before 1.6.2-CS7 does not properly validate and extract the manifest object from its JSON representation during a pull, which allows attackers to inject new attributes in a JSON object and bypass pull-by-digest validation.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.8.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45285_github.com/golang/go_1.21.3",
              "shortDescription": {
                "text": "[CVE-2023-45285] github.com/golang/go 1.21.3"
              },
              "help": {
                "text": "Using go get to fetch a module with the \".git\" suffix may unexpectedly fallback to the insecure \"git://\" protocol if the module is unavailable via the secure \"https://\" and \"git+ssh://\" protocols, even if GOINSECURE is not set for said module. This only affects users who are not using the module proxy and are fetching modules directly (i.e. GOPROXY=off).",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__aa360f6fc46f93e2723fe069922ed7d573dc39a443488ada6ddc7d10edf37d95.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45283_github.com/golang/go_1.19.7",
              "shortDescription": {
                "text": "[CVE-2023-45283] github.com/golang/go 1.19.7"
              },
              "help": {
                "text": "The filepath package does not recognize paths with a \\??\\ prefix as special. On Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x. Before fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b. Similarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b. In addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name. UPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar `       | [1.20.11], [1.20.12], [1.21.4], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45285_github.com/golang/go_1.20.7",
              "shortDescription": {
                "text": "[CVE-2023-45285] github.com/golang/go 1.20.7"
              },
              "help": {
                "text": "Using go get to fetch a module with the \".git\" suffix may unexpectedly fallback to the insecure \"git://\" protocol if the module is unavailable via the secure \"https://\" and \"git+ssh://\" protocols, even if GOINSECURE is not set for said module. This only affects users who are not using the module proxy and are fetching modules directly (i.e. GOPROXY=off).",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-3955_k8s.io/kubernetes_1.24.16",
              "shortDescription": {
                "text": "[CVE-2023-3955] k8s.io/kubernetes 1.24.16"
              },
              "help": {
                "text": "A security issue was discovered in Kubernetes where a user\n that can create pods on Windows nodes may be able to escalate to admin \nprivileges on those nodes. Kubernetes clusters are only affected if they\n include Windows nodes.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 8.8      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.24.17], [1.25.13], [1.26.8], [1.27.5], [1.28.1]   |"
              },
              "properties": {
                "security-severity": "8.8"
              }
            },
            {
              "id": "CVE-2023-45285_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2023-45285] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Using go get to fetch a module with the \".git\" suffix may unexpectedly fallback to the insecure \"git://\" protocol if the module is unavailable via the secure \"https://\" and \"git+ssh://\" protocols, even if GOINSECURE is not set for said module. This only affects users who are not using the module proxy and are fetching modules directly (i.e. GOPROXY=off).",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-5408_k8s.io/kubernetes_1.27.10",
              "shortDescription": {
                "text": "[CVE-2023-5408] k8s.io/kubernetes 1.27.10"
              },
              "help": {
                "text": "A privilege escalation flaw was found in the node restriction admission plugin of the kubernetes api server of OpenShift. A remote attacker who modifies the node role label could steer workloads from the control plane and etcd nodes onto different worker nodes and gain broader access to the cluster.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.2      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2024-4741_openssl-1_1_0:1.1.1l-150500.17.28.2",
              "shortDescription": {
                "text": "[CVE-2024-4741] openssl-1_1 0:1.1.1l-150500.17.28.2"
              },
              "help": {
                "text": "Security update for openssl-1_1 (Important)\nSecurity update for openssl-3 (Important)",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 8.1      | `sha256__3fa1d37901e783448b69dbdc013879ae88fe64472f6f452c7391b4198c4c9f5a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2023-5408_k8s.io/kubernetes_1.24.16",
              "shortDescription": {
                "text": "[CVE-2023-5408] k8s.io/kubernetes 1.24.16"
              },
              "help": {
                "text": "A privilege escalation flaw was found in the node restriction admission plugin of the kubernetes api server of OpenShift. A remote attacker who modifies the node role label could steer workloads from the control plane and etcd nodes onto different worker nodes and gain broader access to the cluster.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 7.2      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2024-24577_git-core_0:2.35.3-150300.10.39.1",
              "shortDescription": {
                "text": "[CVE-2024-24577] git-core 0:2.35.3-150300.10.39.1"
              },
              "help": {
                "text": "CVE-2024-24577",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 8.6      | `sha256__3fa1d37901e783448b69dbdc013879ae88fe64472f6f452c7391b4198c4c9f5a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "8.6"
              }
            },
            {
              "id": "CVE-2024-4741_libopenssl1_1_0:1.1.1l-150500.17.28.2",
              "shortDescription": {
                "text": "[CVE-2024-4741] libopenssl1_1 0:1.1.1l-150500.17.28.2"
              },
              "help": {
                "text": "Security update for openssl-1_1 (Important)\nSecurity update for openssl-3 (Important)",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 8.1      | `sha256__3fa1d37901e783448b69dbdc013879ae88fe64472f6f452c7391b4198c4c9f5a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2023-26484_kubevirt.io/kubevirt_0.54.0",
              "shortDescription": {
                "text": "[CVE-2023-26484] kubevirt.io/kubevirt 0.54.0"
              },
              "help": {
                "text": "KubeVirt is a virtual machine management add-on for Kubernetes. In versions 0.59.0 and prior, if a malicious user has taken over a Kubernetes node where virt-handler (the KubeVirt node-daemon) is running, the virt-handler service account can be used to modify all node specs. This can be misused to lure-in system-level-privileged components which can, for instance, read all secrets on the cluster, or can exec into pods on other nodes. This way, a compromised node can be used to elevate privileges beyond the node until potentially having full privileged access to the whole cluster. The simplest way to exploit this, once a user could compromise a specific node, is to set with the virt-handler service account all other nodes to unschedulable and simply wait until system-critical components with high privileges appear on its node. No patches are available as of time of publication. As a workaround, gatekeeper users can add a webhook which will block the `virt-handler` service account to modify the spec of a node.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 8.2      | `sha256__0cd215bda863ad4c73080e4b3dac0224982c891026ed83c26f1146ca938e7b42.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "8.2"
              }
            },
            {
              "id": "CVE-2023-24532_github.com/golang/go_1.20",
              "shortDescription": {
                "text": "[CVE-2023-24532] github.com/golang/go 1.20"
              },
              "help": {
                "text": "The ScalarMult and ScalarBaseMult methods of the P256 Curve may return an incorrect result if called with some specific unreduced scalars (a scalar larger than the order of the curve). This does not impact usages of crypto/ecdsa or crypto/ecdh.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar `       | [1.19.7], [1.20.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-45288_github.com/golang/go_1.21.3",
              "shortDescription": {
                "text": "[CVE-2023-45288] github.com/golang/go 1.21.3"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__aa360f6fc46f93e2723fe069922ed7d573dc39a443488ada6ddc7d10edf37d95.tar `       | [1.21.9], [1.22.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-39318_github.com/golang/go_1.20.5",
              "shortDescription": {
                "text": "[CVE-2023-39318] github.com/golang/go 1.20.5"
              },
              "help": {
                "text": "The html/template package does not properly handle HTML-like \"\" comment tokens, nor hashbang \"#!\" comment tokens, in \u003cscript\u003e contexts. This may cause the template parser to improperly interpret the contents of \u003cscript\u003e contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.1      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2020-27534_github.com/moby/moby_1.4.2-0.20170731201646-1009e6a40b29",
              "shortDescription": {
                "text": "[CVE-2020-27534] github.com/moby/moby 1.4.2-0.20170731201646-1009e6a40b29"
              },
              "help": {
                "text": "util/binfmt_misc/check.go in Builder in Docker Engine before 19.03.9 calls os.OpenFile with a potentially unsafe qemu-check temporary pathname, constructed with an empty first argument in an ioutil.TempDir call.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [19.03.9]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-24769_github.com/moby/moby_1.4.2-0.20170731201646-1009e6a40b29",
              "shortDescription": {
                "text": "[CVE-2022-24769] github.com/moby/moby 1.4.2-0.20170731201646-1009e6a40b29"
              },
              "help": {
                "text": "Moby is an open-source project created by Docker to enable and accelerate software containerization. A bug was found in Moby (Docker Engine) prior to version 20.10.14 where containers were incorrectly started with non-empty inheritable Linux process capabilities, creating an atypical Linux environment and enabling programs with inheritable file capabilities to elevate those capabilities to the permitted set during `execve(2)`. Normally, when executable programs have specified permitted file capabilities, otherwise unprivileged users and processes can execute those programs and gain the specified file capabilities up to the bounding set. Due to this bug, containers which included executable programs with inheritable file capabilities allowed otherwise unprivileged users and processes to additionally gain these inheritable file capabilities up to the container's bounding set. Containers which use Linux users and groups to perform privilege separation inside the container are most directly impacted. This bug did not affect the container security sandbox as the inheritable set never contained more capabilities than were included in the container's bounding set. This bug has been fixed in Moby (Docker Engine) 20.10.14. Running containers should be stopped, deleted, and recreated for the inheritable capabilities to be reset. This fix changes Moby (Docker Engine) behavior such that containers are started with a more typical Linux environment. As a workaround, the entry point of a container can be modified to use a utility like `capsh(1)` to drop inheritable capabilities prior to the primary process starting.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.9      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [20.10.14]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-24532_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-24532] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "The ScalarMult and ScalarBaseMult methods of the P256 Curve may return an incorrect result if called with some specific unreduced scalars (a scalar larger than the order of the curve). This does not impact usages of crypto/ecdsa or crypto/ecdh.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.19.7], [1.20.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-36109_github.com/moby/moby_1.4.2-0.20170731201646-1009e6a40b29",
              "shortDescription": {
                "text": "[CVE-2022-36109] github.com/moby/moby 1.4.2-0.20170731201646-1009e6a40b29"
              },
              "help": {
                "text": "Moby is an open-source project created by Docker to enable software containerization. A bug was found in Moby (Docker Engine) where supplementary groups are not set up properly. If an attacker has direct access to a container and manipulates their supplementary group access, they may be able to use supplementary group access to bypass primary group restrictions in some cases, potentially gaining access to sensitive information or gaining the ability to execute code in that container. This bug is fixed in Moby (Docker Engine) 20.10.18. Running containers should be stopped and restarted for the permissions to be fixed. For users unable to upgrade, this problem can be worked around by not using the `\"USER $USERNAME\"` Dockerfile instruction. Instead by calling `ENTRYPOINT [\"su\", \"-\", \"user\"]` the supplementary groups will be set up properly.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.3      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [20.10.18]   |"
              },
              "properties": {
                "security-severity": "6.3"
              }
            },
            {
              "id": "CVE-2023-45288_github.com/golang/go_1.19.7",
              "shortDescription": {
                "text": "[CVE-2023-45288] github.com/golang/go 1.19.7"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar `       | [1.21.9], [1.22.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-29409_github.com/golang/go_1.18.10",
              "shortDescription": {
                "text": "[CVE-2023-29409] github.com/golang/go 1.18.10"
              },
              "help": {
                "text": "Extremely large RSA keys in certificate chains can cause a client/server to expend significant CPU time verifying signatures. With fix, the size of RSA keys transmitted during handshakes is restricted to \u003c= 8192 bits. Based on a survey of publicly trusted RSA keys, there are currently only three certificates in circulation with keys larger than this, and all three appear to be test certificates that are not actively deployed. It is possible there are larger keys in use in private PKIs, but we target the web PKI, so causing breakage here in the interests of increasing the default safety of users of crypto/tls seems reasonable.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.19.12], [1.20.7], [1.21.0-rc.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-29406_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-29406] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "The HTTP/1 client does not fully validate the contents of the Host header. A maliciously crafted Host header can inject additional headers or entire requests. With fix, the HTTP/1 client now refuses to send requests containing an invalid Request.Host or Request.URL.Host value.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.19.11], [1.20.6]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2024-29018_github.com/docker/docker_20.10.24+incompatible",
              "shortDescription": {
                "text": "[CVE-2024-29018] github.com/docker/docker 20.10.24+incompatible"
              },
              "help": {
                "text": "Moby is an open source container framework that is a key component of Docker Engine, Docker Desktop, and other distributions of container tooling or runtimes. Moby's networking implementation allows for many networks, each with their own IP address range and gateway, to be defined. This feature is frequently referred to as custom networks, as each network can have a different driver, set of parameters and thus behaviors. When creating a network, the `--internal` flag is used to designate a network as _internal_. The `internal` attribute in a docker-compose.yml file may also be used to mark a network _internal_, and other API clients may specify the `internal` parameter as well.\n\nWhen containers with networking are created, they are assigned unique network interfaces and IP addresses. The host serves as a router for non-internal networks, with a gateway IP that provides SNAT/DNAT to/from container IPs.\n\nContainers on an internal network may communicate between each other, but are precluded from communicating with any networks the host has access to (LAN or WAN) as no default route is configured, and firewall rules are set up to drop all outgoing traffic. Communication with the gateway IP address (and thus appropriately configured host services) is possible, and the host may communicate with any container IP directly.\n\nIn addition to configuring the Linux kernel's various networking features to enable container networking, `dockerd` directly provides some services to container networks. Principal among these is serving as a resolver, enabling service discovery, and resolution of names from an upstream resolver.\n\nWhen a DNS request for a name that does not correspond to a container is received, the request is forwarded to the configured upstream resolver. This request is made from the container's network namespace: the level of access and routing of traffic is the same as if the request was made by the container itself.\n\nAs a consequence of this design, containers solely attached to an internal network will ...",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.9      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [23.0.11], [25.0.5], [26.0.0-rc3]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-45288_golang.org/x/net_0.11.0",
              "shortDescription": {
                "text": "[CVE-2023-45288] golang.org/x/net 0.11.0"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [0.23.0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2020-14039_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2020-14039] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "In Go before 1.13.13 and 1.14.x before 1.14.5, Certificate.Verify may lack a check on the VerifyOptions.KeyUsages EKU requirements (if VerifyOptions.Roots equals nil and the installation is on Windows). Thus, X.509 certificate verification is incomplete.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.13.13], [1.14.5]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-39326_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-39326] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "A malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body. A malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request. Chunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-24532_github.com/golang/go_1.18.10",
              "shortDescription": {
                "text": "[CVE-2023-24532] github.com/golang/go 1.18.10"
              },
              "help": {
                "text": "The ScalarMult and ScalarBaseMult methods of the P256 Curve may return an incorrect result if called with some specific unreduced scalars (a scalar larger than the order of the curve). This does not impact usages of crypto/ecdsa or crypto/ecdh.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.19.7], [1.20.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-39326_github.com/golang/go_1.20.7",
              "shortDescription": {
                "text": "[CVE-2023-39326] github.com/golang/go 1.20.7"
              },
              "help": {
                "text": "A malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body. A malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request. Chunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-24769_github.com/docker/docker_20.10.9+incompatible",
              "shortDescription": {
                "text": "[CVE-2022-24769] github.com/docker/docker 20.10.9+incompatible"
              },
              "help": {
                "text": "Moby is an open-source project created by Docker to enable and accelerate software containerization. A bug was found in Moby (Docker Engine) prior to version 20.10.14 where containers were incorrectly started with non-empty inheritable Linux process capabilities, creating an atypical Linux environment and enabling programs with inheritable file capabilities to elevate those capabilities to the permitted set during `execve(2)`. Normally, when executable programs have specified permitted file capabilities, otherwise unprivileged users and processes can execute those programs and gain the specified file capabilities up to the bounding set. Due to this bug, containers which included executable programs with inheritable file capabilities allowed otherwise unprivileged users and processes to additionally gain these inheritable file capabilities up to the container's bounding set. Containers which use Linux users and groups to perform privilege separation inside the container are most directly impacted. This bug did not affect the container security sandbox as the inheritable set never contained more capabilities than were included in the container's bounding set. This bug has been fixed in Moby (Docker Engine) 20.10.14. Running containers should be stopped, deleted, and recreated for the inheritable capabilities to be reset. This fix changes Moby (Docker Engine) behavior such that containers are started with a more typical Linux environment. As a workaround, the entry point of a container can be modified to use a utility like `capsh(1)` to drop inheritable capabilities prior to the primary process starting.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.9      | `sha256__0cd215bda863ad4c73080e4b3dac0224982c891026ed83c26f1146ca938e7b42.tar `       | [20.10.14]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2021-21285_github.com/moby/moby_1.4.2-0.20170731201646-1009e6a40b29",
              "shortDescription": {
                "text": "[CVE-2021-21285] github.com/moby/moby 1.4.2-0.20170731201646-1009e6a40b29"
              },
              "help": {
                "text": "In Docker before versions 9.03.15, 20.10.3 there is a vulnerability in which pulling an intentionally malformed Docker image manifest crashes the dockerd daemon. Versions 20.10.3 and 19.03.15 contain patches that prevent the daemon from crashing.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [19.3.15], [20.10.3]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-48795_golang.org/x/crypto_0.14.0",
              "shortDescription": {
                "text": "[CVE-2023-48795] golang.org/x/crypto 0.14.0"
              },
              "help": {
                "text": "The SSH transport protocol with certain OpenSSH extensions, found in OpenSSH before 9.6 and other products, allows remote attackers to bypass integrity checks such that some packets are omitted (from the extension negotiation message), and a client and server may consequently end up with a connection for which some security features have been downgraded or disabled, aka a Terrapin attack. This occurs because the SSH Binary Packet Protocol (BPP), implemented by these extensions, mishandles the handshake phase and mishandles use of sequence numbers. For example, there is an effective attack against SSH's use of ChaCha20-Poly1305 (and CBC with Encrypt-then-MAC). The bypass occurs in chacha20-poly1305@openssh.com and (if CBC is used) the -etm@openssh.com MAC algorithms. This also affects Maverick Synergy Java SSH API before 3.1.0-SNAPSHOT, Dropbear through 2022.83, Ssh before 5.1.1 in Erlang/OTP, PuTTY before 0.80, AsyncSSH before 2.14.2, golang.org/x/crypto before 0.17.0, libssh before 0.10.6, libssh2 through 1.11.0, Thorn Tech SFTP Gateway before 3.4.6, Tera Term before 5.1, Paramiko before 3.4.0, jsch before 0.2.15, SFTPGo before 2.5.6, Netgate pfSense Plus through 23.09.1, Netgate pfSense CE through 2.7.2, HPN-SSH through 18.2.0, ProFTPD before 1.3.8b (and before 1.3.9rc2), ORYX CycloneSSH before 2.3.4, NetSarang XShell 7 before Build 0144, CrushFTP before 10.6.0, ConnectBot SSH library before 2.2.22, Apache MINA sshd through 2.11.0, sshj through 0.37.0, TinySSH through 20230101, trilead-ssh2 6401, LANCOM LCOS and LANconfig, FileZilla before 3.66.4, Nova before 11.8, PKIX-SSH before 14.4, SecureCRT before 9.4.3, Transmit5 before 5.10.4, Win32-OpenSSH before 9.5.0.0p1-Beta, WinSCP before 6.2.2, Bitvise SSH Server before 9.32, Bitvise SSH Client before 9.33, KiTTY through 0.76.1.13, the net-ssh gem 7.2.0 for Ruby, the mscdex ssh2 module before 1.15.0 for Node.js, the thrussh library before 0.35.1 for Rust, and the Russh crate before 0.40.2 for Rust.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.9      | `sha256__aa360f6fc46f93e2723fe069922ed7d573dc39a443488ada6ddc7d10edf37d95.tar `\u003cbr/\u003e`sha256__0cd215bda863ad4c73080e4b3dac0224982c891026ed83c26f1146ca938e7b42.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2021-33197_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2021-33197] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "In Go before 1.15.13 and 1.16.x before 1.16.5, some configurations of ReverseProxy (from net/http/httputil) result in a situation where an attacker is able to drop arbitrary headers.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.15.13], [1.16.5]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-45288_github.com/golang/go_1.21.7",
              "shortDescription": {
                "text": "[CVE-2023-45288] github.com/golang/go 1.21.7"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar `\u003cbr/\u003e`sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.21.9], [1.22.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-45288_github.com/golang/go_1.20.13",
              "shortDescription": {
                "text": "[CVE-2023-45288] github.com/golang/go 1.20.13"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__aa360f6fc46f93e2723fe069922ed7d573dc39a443488ada6ddc7d10edf37d95.tar `\u003cbr/\u003e`sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.21.9], [1.22.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2024-29018_github.com/docker/docker_20.10.9+incompatible",
              "shortDescription": {
                "text": "[CVE-2024-29018] github.com/docker/docker 20.10.9+incompatible"
              },
              "help": {
                "text": "Moby is an open source container framework that is a key component of Docker Engine, Docker Desktop, and other distributions of container tooling or runtimes. Moby's networking implementation allows for many networks, each with their own IP address range and gateway, to be defined. This feature is frequently referred to as custom networks, as each network can have a different driver, set of parameters and thus behaviors. When creating a network, the `--internal` flag is used to designate a network as _internal_. The `internal` attribute in a docker-compose.yml file may also be used to mark a network _internal_, and other API clients may specify the `internal` parameter as well.\n\nWhen containers with networking are created, they are assigned unique network interfaces and IP addresses. The host serves as a router for non-internal networks, with a gateway IP that provides SNAT/DNAT to/from container IPs.\n\nContainers on an internal network may communicate between each other, but are precluded from communicating with any networks the host has access to (LAN or WAN) as no default route is configured, and firewall rules are set up to drop all outgoing traffic. Communication with the gateway IP address (and thus appropriately configured host services) is possible, and the host may communicate with any container IP directly.\n\nIn addition to configuring the Linux kernel's various networking features to enable container networking, `dockerd` directly provides some services to container networks. Principal among these is serving as a resolver, enabling service discovery, and resolution of names from an upstream resolver.\n\nWhen a DNS request for a name that does not correspond to a container is received, the request is forwarded to the configured upstream resolver. This request is made from the container's network namespace: the level of access and routing of traffic is the same as if the request was made by the container itself.\n\nAs a consequence of this design, containers solely attached to an internal network will ...",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.9      | `sha256__0cd215bda863ad4c73080e4b3dac0224982c891026ed83c26f1146ca938e7b42.tar `       | [23.0.11], [25.0.5], [26.0.0-rc3]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2021-21284_github.com/moby/moby_1.4.2-0.20170731201646-1009e6a40b29",
              "shortDescription": {
                "text": "[CVE-2021-21284] github.com/moby/moby 1.4.2-0.20170731201646-1009e6a40b29"
              },
              "help": {
                "text": "In Docker before versions 9.03.15, 20.10.3 there is a vulnerability involving the --userns-remap option in which access to remapped root allows privilege escalation to real root. When using \"--userns-remap\", if the root user in the remapped namespace has access to the host filesystem they can modify files under \"/var/lib/docker/\u003cremapping\u003e\" that cause writing files with extended privileges. Versions 20.10.3 and 19.03.15 contain patches that prevent privilege escalation from remapped user.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.8      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [19.3.15], [20.10.3]   |"
              },
              "properties": {
                "security-severity": "6.8"
              }
            },
            {
              "id": "CVE-2023-39319_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2023-39319] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "The html/template package does not apply the proper rules for handling occurrences of \"\u003cscript\", \"\u003c!--\", and \"\u003c/script\" within JS literals in \u003cscript\u003e contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.1      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2023-39319_github.com/golang/go_1.19.7",
              "shortDescription": {
                "text": "[CVE-2023-39319] github.com/golang/go 1.19.7"
              },
              "help": {
                "text": "The html/template package does not apply the proper rules for handling occurrences of \"\u003cscript\", \"\u003c!--\", and \"\u003c/script\" within JS literals in \u003cscript\u003e contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.1      | `sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2024-24786_google.golang.org/protobuf_1.28.0",
              "shortDescription": {
                "text": "[CVE-2024-24786] google.golang.org/protobuf 1.28.0"
              },
              "help": {
                "text": "The protojson.Unmarshal function can enter an infinite loop when unmarshaling certain forms of invalid JSON. This condition can occur when unmarshaling into a message which contains a google.protobuf.Any value, or when the UnmarshalOptions.DiscardUnknown option is set.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 0.0      | `sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar `       | [1.33.0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-3978_golang.org/x/net_0.4.0",
              "shortDescription": {
                "text": "[CVE-2023-3978] golang.org/x/net 0.4.0"
              },
              "help": {
                "text": "Text nodes not in the HTML namespace are incorrectly literally rendered, causing text which should be escaped to not be. This could lead to an XSS attack.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.1      | `sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar `       | [0.13.0]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2023-29406_github.com/golang/go_1.18.10",
              "shortDescription": {
                "text": "[CVE-2023-29406] github.com/golang/go 1.18.10"
              },
              "help": {
                "text": "The HTTP/1 client does not fully validate the contents of the Host header. A maliciously crafted Host header can inject additional headers or entire requests. With fix, the HTTP/1 client now refuses to send requests containing an invalid Request.Host or Request.URL.Host value.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.5      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.19.11], [1.20.6]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-29406_github.com/golang/go_1.20",
              "shortDescription": {
                "text": "[CVE-2023-29406] github.com/golang/go 1.20"
              },
              "help": {
                "text": "The HTTP/1 client does not fully validate the contents of the Host header. A maliciously crafted Host header can inject additional headers or entire requests. With fix, the HTTP/1 client now refuses to send requests containing an invalid Request.Host or Request.URL.Host value.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.5      | `sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar `       | [1.19.11], [1.20.6]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-39318_github.com/golang/go_1.20",
              "shortDescription": {
                "text": "[CVE-2023-39318] github.com/golang/go 1.20"
              },
              "help": {
                "text": "The html/template package does not properly handle HTML-like \"\" comment tokens, nor hashbang \"#!\" comment tokens, in \u003cscript\u003e contexts. This may cause the template parser to improperly interpret the contents of \u003cscript\u003e contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.1      | `sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2023-45288_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-45288] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.21.9], [1.22.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-48795_golang.org/x/crypto_0.0.0-20221010152910-d6f0a8c073c2",
              "shortDescription": {
                "text": "[CVE-2023-48795] golang.org/x/crypto 0.0.0-20221010152910-d6f0a8c073c2"
              },
              "help": {
                "text": "The SSH transport protocol with certain OpenSSH extensions, found in OpenSSH before 9.6 and other products, allows remote attackers to bypass integrity checks such that some packets are omitted (from the extension negotiation message), and a client and server may consequently end up with a connection for which some security features have been downgraded or disabled, aka a Terrapin attack. This occurs because the SSH Binary Packet Protocol (BPP), implemented by these extensions, mishandles the handshake phase and mishandles use of sequence numbers. For example, there is an effective attack against SSH's use of ChaCha20-Poly1305 (and CBC with Encrypt-then-MAC). The bypass occurs in chacha20-poly1305@openssh.com and (if CBC is used) the -etm@openssh.com MAC algorithms. This also affects Maverick Synergy Java SSH API before 3.1.0-SNAPSHOT, Dropbear through 2022.83, Ssh before 5.1.1 in Erlang/OTP, PuTTY before 0.80, AsyncSSH before 2.14.2, golang.org/x/crypto before 0.17.0, libssh before 0.10.6, libssh2 through 1.11.0, Thorn Tech SFTP Gateway before 3.4.6, Tera Term before 5.1, Paramiko before 3.4.0, jsch before 0.2.15, SFTPGo before 2.5.6, Netgate pfSense Plus through 23.09.1, Netgate pfSense CE through 2.7.2, HPN-SSH through 18.2.0, ProFTPD before 1.3.8b (and before 1.3.9rc2), ORYX CycloneSSH before 2.3.4, NetSarang XShell 7 before Build 0144, CrushFTP before 10.6.0, ConnectBot SSH library before 2.2.22, Apache MINA sshd through 2.11.0, sshj through 0.37.0, TinySSH through 20230101, trilead-ssh2 6401, LANCOM LCOS and LANconfig, FileZilla before 3.66.4, Nova before 11.8, PKIX-SSH before 14.4, SecureCRT before 9.4.3, Transmit5 before 5.10.4, Win32-OpenSSH before 9.5.0.0p1-Beta, WinSCP before 6.2.2, Bitvise SSH Server before 9.32, Bitvise SSH Client before 9.33, KiTTY through 0.76.1.13, the net-ssh gem 7.2.0 for Ruby, the mscdex ssh2 module before 1.15.0 for Node.js, the thrussh library before 0.35.1 for Rust, and the Russh crate before 0.40.2 for Rust.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.9      | `sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2022-1962_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-1962] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Uncontrolled recursion in the Parse functions in go/parser before Go 1.17.12 and Go 1.18.4 allow an attacker to cause a panic due to stack exhaustion via deeply nested types or declarations.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2020-29511_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2020-29511] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "The encoding/xml package in Go (all versions) does not correctly preserve the semantics of element namespace prefixes during tokenization round-trips, which allows an attacker to craft inputs that behave in conflicting ways during different stages of processing in affected downstream applications.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.6      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.15.6]   |"
              },
              "properties": {
                "security-severity": "5.6"
              }
            },
            {
              "id": "CVE-2022-32148_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-32148] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Improper exposure of client IP addresses in net/http before Go 1.17.12 and Go 1.18.4 can be triggered by calling httputil.ReverseProxy.ServeHTTP with a Request.Header map containing a nil value for the X-Forwarded-For header, which causes ReverseProxy to set the client IP as the value of the X-Forwarded-For header.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-45288_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2023-45288] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.21.9], [1.22.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-39319_github.com/golang/go_1.20",
              "shortDescription": {
                "text": "[CVE-2023-39319] github.com/golang/go 1.20"
              },
              "help": {
                "text": "The html/template package does not apply the proper rules for handling occurrences of \"\u003cscript\", \"\u003c!--\", and \"\u003c/script\" within JS literals in \u003cscript\u003e contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.1      | `sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2023-29409_github.com/golang/go_1.20",
              "shortDescription": {
                "text": "[CVE-2023-29409] github.com/golang/go 1.20"
              },
              "help": {
                "text": "Extremely large RSA keys in certificate chains can cause a client/server to expend significant CPU time verifying signatures. With fix, the size of RSA keys transmitted during handshakes is restricted to \u003c= 8192 bits. Based on a survey of publicly trusted RSA keys, there are currently only three certificates in circulation with keys larger than this, and all three appear to be test certificates that are not actively deployed. It is possible there are larger keys in use in private PKIs, but we target the web PKI, so causing breakage here in the interests of increasing the default safety of users of crypto/tls seems reasonable.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar `       | [1.19.12], [1.20.7], [1.21.0-rc.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2020-29510_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2020-29510] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "The encoding/xml package in Go versions 1.15 and earlier does not correctly preserve the semantics of directives during tokenization round-trips, which allows an attacker to craft inputs that behave in conflicting ways during different stages of processing in affected downstream applications.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.6      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.15.6]   |"
              },
              "properties": {
                "security-severity": "5.6"
              }
            },
            {
              "id": "CVE-2023-45288_golang.org/x/net_0.12.0",
              "shortDescription": {
                "text": "[CVE-2023-45288] golang.org/x/net 0.12.0"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [0.23.0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-24532_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2023-24532] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "The ScalarMult and ScalarBaseMult methods of the P256 Curve may return an incorrect result if called with some specific unreduced scalars (a scalar larger than the order of the curve). This does not impact usages of crypto/ecdsa or crypto/ecdh.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.19.7], [1.20.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-28841_github.com/docker/docker_20.10.9+incompatible",
              "shortDescription": {
                "text": "[CVE-2023-28841] github.com/docker/docker 20.10.9+incompatible"
              },
              "help": {
                "text": "Moby is an open source container framework developed by Docker Inc. that is distributed as Docker, Mirantis Container Runtime, and various other downstream projects/products. The Moby daemon component (`dockerd`), which is developed as moby/moby is commonly referred to as *Docker*.\n\nSwarm Mode, which is compiled in and delivered by default in `dockerd` and is thus present in most major Moby downstreams, is a simple, built-in container orchestrator that is implemented through a combination of SwarmKit and supporting network code.\n\nThe `overlay` network driver is a core feature of Swarm Mode, providing isolated virtual LANs that allow communication between containers and services across the cluster. This driver is an implementation/user of VXLAN, which encapsulates link-layer (Ethernet) frames in UDP datagrams that tag the frame with the VXLAN metadata, including a VXLAN Network ID (VNI) that identifies the originating overlay network. In addition, the overlay network driver supports an optional, off-by-default encrypted mode, which is especially useful when VXLAN packets traverses an untrusted network between nodes.\n\nEncrypted overlay networks function by encapsulating the VXLAN datagrams through the use of the IPsec Encapsulating Security Payload protocol in Transport mode. By deploying IPSec encapsulation, encrypted overlay networks gain the additional properties of source authentication through cryptographic proof, data integrity through check-summing, and confidentiality through encryption.\n\nWhen setting an endpoint up on an encrypted overlay network, Moby installs three iptables (Linux kernel firewall) rules that enforce both incoming and outgoing IPSec. These rules rely on the `u32` iptables extension provided by the `xt_u32` kernel module to directly filter on a VXLAN packet's VNI field, so that IPSec guarantees can be enforced on encrypted overlay networks without interfering with other overlay networks or other users of VXLAN.\n\nAn iptables rule designates outgoing VXLAN datagrams with a VNI that c...",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.8      | `sha256__0cd215bda863ad4c73080e4b3dac0224982c891026ed83c26f1146ca938e7b42.tar `       | [20.10.24], [23.0.3]   |"
              },
              "properties": {
                "security-severity": "6.8"
              }
            },
            {
              "id": "CVE-2023-45288_github.com/golang/go_1.20.5",
              "shortDescription": {
                "text": "[CVE-2023-45288] github.com/golang/go 1.20.5"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.21.9], [1.22.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-29409_github.com/golang/go_1.20.5",
              "shortDescription": {
                "text": "[CVE-2023-29409] github.com/golang/go 1.20.5"
              },
              "help": {
                "text": "Extremely large RSA keys in certificate chains can cause a client/server to expend significant CPU time verifying signatures. With fix, the size of RSA keys transmitted during handshakes is restricted to \u003c= 8192 bits. Based on a survey of publicly trusted RSA keys, there are currently only three certificates in circulation with keys larger than this, and all three appear to be test certificates that are not actively deployed. It is possible there are larger keys in use in private PKIs, but we target the web PKI, so causing breakage here in the interests of increasing the default safety of users of crypto/tls seems reasonable.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.19.12], [1.20.7], [1.21.0-rc.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-45288_github.com/golang/go_1.20.12",
              "shortDescription": {
                "text": "[CVE-2023-45288] github.com/golang/go 1.20.12"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__0cd215bda863ad4c73080e4b3dac0224982c891026ed83c26f1146ca938e7b42.tar `       | [1.21.9], [1.22.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-29409_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2023-29409] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Extremely large RSA keys in certificate chains can cause a client/server to expend significant CPU time verifying signatures. With fix, the size of RSA keys transmitted during handshakes is restricted to \u003c= 8192 bits. Based on a survey of publicly trusted RSA keys, there are currently only three certificates in circulation with keys larger than this, and all three appear to be test certificates that are not actively deployed. It is possible there are larger keys in use in private PKIs, but we target the web PKI, so causing breakage here in the interests of increasing the default safety of users of crypto/tls seems reasonable.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.19.12], [1.20.7], [1.21.0-rc.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-39318_github.com/golang/go_1.20.7",
              "shortDescription": {
                "text": "[CVE-2023-39318] github.com/golang/go 1.20.7"
              },
              "help": {
                "text": "The html/template package does not properly handle HTML-like \"\" comment tokens, nor hashbang \"#!\" comment tokens, in \u003cscript\u003e contexts. This may cause the template parser to improperly interpret the contents of \u003cscript\u003e contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.1      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2021-34558_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2021-34558] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "The crypto/tls package of Go through 1.16.5 does not properly assert that the type of public key in an X.509 certificate matches the expected type when doing a RSA based key exchange, allowing a malicious TLS server to cause a TLS client to panic.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.15.14], [1.16.6]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-39319_github.com/golang/go_1.18.10",
              "shortDescription": {
                "text": "[CVE-2023-39319] github.com/golang/go 1.18.10"
              },
              "help": {
                "text": "The html/template package does not apply the proper rules for handling occurrences of \"\u003cscript\", \"\u003c!--\", and \"\u003c/script\" within JS literals in \u003cscript\u003e contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.1      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2020-15586_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2020-15586] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Go before 1.13.13 and 1.14.x before 1.14.5 has a data race in some net/http servers, as demonstrated by the httputil.ReverseProxy Handler, because it reads a request body and writes a response at the same time.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.9      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.13.13], [1.14.5]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-29409_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-29409] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Extremely large RSA keys in certificate chains can cause a client/server to expend significant CPU time verifying signatures. With fix, the size of RSA keys transmitted during handshakes is restricted to \u003c= 8192 bits. Based on a survey of publicly trusted RSA keys, there are currently only three certificates in circulation with keys larger than this, and all three appear to be test certificates that are not actively deployed. It is possible there are larger keys in use in private PKIs, but we target the web PKI, so causing breakage here in the interests of increasing the default safety of users of crypto/tls seems reasonable.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.19.12], [1.20.7], [1.21.0-rc.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-39326_github.com/golang/go_1.20",
              "shortDescription": {
                "text": "[CVE-2023-39326] github.com/golang/go 1.20"
              },
              "help": {
                "text": "A malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body. A malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request. Chunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-3114_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2021-3114] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "In Go before 1.14.14 and 1.15.x before 1.15.7, crypto/elliptic/p224.go can generate incorrect outputs, related to an underflow of the lowest limb during the final complete reduction in the P-224 field.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.14.14], [1.15.7]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-45284_github.com/golang/go_1.21.3",
              "shortDescription": {
                "text": "[CVE-2023-45284] github.com/golang/go 1.21.3"
              },
              "help": {
                "text": "On Windows, The IsLocal function does not correctly detect reserved device names in some cases. Reserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local. With fix, IsLocal now correctly reports these names as non-local.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__aa360f6fc46f93e2723fe069922ed7d573dc39a443488ada6ddc7d10edf37d95.tar `       | [1.20.11], [1.21.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-3978_golang.org/x/net_0.9.0",
              "shortDescription": {
                "text": "[CVE-2023-3978] golang.org/x/net 0.9.0"
              },
              "help": {
                "text": "Text nodes not in the HTML namespace are incorrectly literally rendered, causing text which should be escaped to not be. This could lead to an XSS attack.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.1      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [0.13.0]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2023-39318_github.com/golang/go_1.18.10",
              "shortDescription": {
                "text": "[CVE-2023-39318] github.com/golang/go 1.18.10"
              },
              "help": {
                "text": "The html/template package does not properly handle HTML-like \"\" comment tokens, nor hashbang \"#!\" comment tokens, in \u003cscript\u003e contexts. This may cause the template parser to improperly interpret the contents of \u003cscript\u003e contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.1      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2024-29018_github.com/docker/docker_20.10.27+incompatible",
              "shortDescription": {
                "text": "[CVE-2024-29018] github.com/docker/docker 20.10.27+incompatible"
              },
              "help": {
                "text": "Moby is an open source container framework that is a key component of Docker Engine, Docker Desktop, and other distributions of container tooling or runtimes. Moby's networking implementation allows for many networks, each with their own IP address range and gateway, to be defined. This feature is frequently referred to as custom networks, as each network can have a different driver, set of parameters and thus behaviors. When creating a network, the `--internal` flag is used to designate a network as _internal_. The `internal` attribute in a docker-compose.yml file may also be used to mark a network _internal_, and other API clients may specify the `internal` parameter as well.\n\nWhen containers with networking are created, they are assigned unique network interfaces and IP addresses. The host serves as a router for non-internal networks, with a gateway IP that provides SNAT/DNAT to/from container IPs.\n\nContainers on an internal network may communicate between each other, but are precluded from communicating with any networks the host has access to (LAN or WAN) as no default route is configured, and firewall rules are set up to drop all outgoing traffic. Communication with the gateway IP address (and thus appropriately configured host services) is possible, and the host may communicate with any container IP directly.\n\nIn addition to configuring the Linux kernel's various networking features to enable container networking, `dockerd` directly provides some services to container networks. Principal among these is serving as a resolver, enabling service discovery, and resolution of names from an upstream resolver.\n\nWhen a DNS request for a name that does not correspond to a container is received, the request is forwarded to the configured upstream resolver. This request is made from the container's network namespace: the level of access and routing of traffic is the same as if the request was made by the container itself.\n\nAs a consequence of this design, containers solely attached to an internal network will ...",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.9      | `sha256__190862799647a743f9e38781a7a4d6add1f39d71417aadfb324107266efb7aa2.tar `       | [23.0.11], [25.0.5], [26.0.0-rc3]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-45288_github.com/golang/go_1.20.7",
              "shortDescription": {
                "text": "[CVE-2023-45288] github.com/golang/go 1.20.7"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.21.9], [1.22.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-41091_github.com/moby/moby_1.4.2-0.20170731201646-1009e6a40b29",
              "shortDescription": {
                "text": "[CVE-2021-41091] github.com/moby/moby 1.4.2-0.20170731201646-1009e6a40b29"
              },
              "help": {
                "text": "Moby is an open-source project created by Docker to enable software containerization. A bug was found in Moby (Docker Engine) where the data directory (typically `/var/lib/docker`) contained subdirectories with insufficiently restricted permissions, allowing otherwise unprivileged Linux users to traverse directory contents and execute programs. When containers included executable programs with extended permission bits (such as `setuid`), unprivileged Linux users could discover and execute those programs. When the UID of an unprivileged Linux user on the host collided with the file owner or group inside a container, the unprivileged Linux user on the host could discover, read, and modify those files. This bug has been fixed in Moby (Docker Engine) 20.10.9. Users should update to this version as soon as possible. Running containers should be stopped and restarted for the permissions to be fixed. For users unable to upgrade limit access to the host to trusted users. Limit access to host volumes to trusted containers.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.3      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [20.10.9]   |"
              },
              "properties": {
                "security-severity": "6.3"
              }
            },
            {
              "id": "CVE-2023-45288_golang.org/x/net_0.19.0",
              "shortDescription": {
                "text": "[CVE-2023-45288] golang.org/x/net 0.19.0"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `\u003cbr/\u003e`sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [0.23.0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-48795_golang.org/x/crypto_0.16.0",
              "shortDescription": {
                "text": "[CVE-2023-48795] golang.org/x/crypto 0.16.0"
              },
              "help": {
                "text": "The SSH transport protocol with certain OpenSSH extensions, found in OpenSSH before 9.6 and other products, allows remote attackers to bypass integrity checks such that some packets are omitted (from the extension negotiation message), and a client and server may consequently end up with a connection for which some security features have been downgraded or disabled, aka a Terrapin attack. This occurs because the SSH Binary Packet Protocol (BPP), implemented by these extensions, mishandles the handshake phase and mishandles use of sequence numbers. For example, there is an effective attack against SSH's use of ChaCha20-Poly1305 (and CBC with Encrypt-then-MAC). The bypass occurs in chacha20-poly1305@openssh.com and (if CBC is used) the -etm@openssh.com MAC algorithms. This also affects Maverick Synergy Java SSH API before 3.1.0-SNAPSHOT, Dropbear through 2022.83, Ssh before 5.1.1 in Erlang/OTP, PuTTY before 0.80, AsyncSSH before 2.14.2, golang.org/x/crypto before 0.17.0, libssh before 0.10.6, libssh2 through 1.11.0, Thorn Tech SFTP Gateway before 3.4.6, Tera Term before 5.1, Paramiko before 3.4.0, jsch before 0.2.15, SFTPGo before 2.5.6, Netgate pfSense Plus through 23.09.1, Netgate pfSense CE through 2.7.2, HPN-SSH through 18.2.0, ProFTPD before 1.3.8b (and before 1.3.9rc2), ORYX CycloneSSH before 2.3.4, NetSarang XShell 7 before Build 0144, CrushFTP before 10.6.0, ConnectBot SSH library before 2.2.22, Apache MINA sshd through 2.11.0, sshj through 0.37.0, TinySSH through 20230101, trilead-ssh2 6401, LANCOM LCOS and LANconfig, FileZilla before 3.66.4, Nova before 11.8, PKIX-SSH before 14.4, SecureCRT before 9.4.3, Transmit5 before 5.10.4, Win32-OpenSSH before 9.5.0.0p1-Beta, WinSCP before 6.2.2, Bitvise SSH Server before 9.32, Bitvise SSH Client before 9.33, KiTTY through 0.76.1.13, the net-ssh gem 7.2.0 for Ruby, the mscdex ssh2 module before 1.15.0 for Node.js, the thrussh library before 0.35.1 for Rust, and the Russh crate before 0.40.2 for Rust.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.9      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-45288_golang.org/x/net_0.17.0",
              "shortDescription": {
                "text": "[CVE-2023-45288] golang.org/x/net 0.17.0"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar `\u003cbr/\u003e`sha256__58df8290592143d99a2e16b12a9a04501e511b0020e4c7bd5a0bef516fea6032.tar `\u003cbr/\u003e`sha256__aa360f6fc46f93e2723fe069922ed7d573dc39a443488ada6ddc7d10edf37d95.tar `\u003cbr/\u003e`sha256__0cd215bda863ad4c73080e4b3dac0224982c891026ed83c26f1146ca938e7b42.tar `       | [0.23.0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-45284_github.com/golang/go_1.20.7",
              "shortDescription": {
                "text": "[CVE-2023-45284] github.com/golang/go 1.20.7"
              },
              "help": {
                "text": "On Windows, The IsLocal function does not correctly detect reserved device names in some cases. Reserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local. With fix, IsLocal now correctly reports these names as non-local.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.20.11], [1.21.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2024-24786_google.golang.org/protobuf_1.28.1",
              "shortDescription": {
                "text": "[CVE-2024-24786] google.golang.org/protobuf 1.28.1"
              },
              "help": {
                "text": "The protojson.Unmarshal function can enter an infinite loop when unmarshaling certain forms of invalid JSON. This condition can occur when unmarshaling into a message which contains a google.protobuf.Any value, or when the UnmarshalOptions.DiscardUnknown option is set.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 0.0      | `sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar `\u003cbr/\u003e`sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.33.0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-3978_golang.org/x/net_0.12.0",
              "shortDescription": {
                "text": "[CVE-2023-3978] golang.org/x/net 0.12.0"
              },
              "help": {
                "text": "Text nodes not in the HTML namespace are incorrectly literally rendered, causing text which should be escaped to not be. This could lead to an XSS attack.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.1      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [0.13.0]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2023-29409_github.com/golang/go_1.19.7",
              "shortDescription": {
                "text": "[CVE-2023-29409] github.com/golang/go 1.19.7"
              },
              "help": {
                "text": "Extremely large RSA keys in certificate chains can cause a client/server to expend significant CPU time verifying signatures. With fix, the size of RSA keys transmitted during handshakes is restricted to \u003c= 8192 bits. Based on a survey of publicly trusted RSA keys, there are currently only three certificates in circulation with keys larger than this, and all three appear to be test certificates that are not actively deployed. It is possible there are larger keys in use in private PKIs, but we target the web PKI, so causing breakage here in the interests of increasing the default safety of users of crypto/tls seems reasonable.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar `       | [1.19.12], [1.20.7], [1.21.0-rc.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2024-27304_github.com/jackc/pgx/v5_5.4.2",
              "shortDescription": {
                "text": "[CVE-2024-27304] github.com/jackc/pgx/v5 5.4.2"
              },
              "help": {
                "text": "pgx is a PostgreSQL driver and toolkit for Go. SQL injection can occur if an attacker can cause a single query or bind message to exceed 4 GB in size. An integer overflow in the calculated message size can cause the one large message to be sent as multiple messages under the attacker's control. The problem is resolved in v4.18.2 and v5.5.4. As a workaround, reject user input large enough to cause a single query or bind message to exceed 4 GB in size.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 0.0      | `sha256__58df8290592143d99a2e16b12a9a04501e511b0020e4c7bd5a0bef516fea6032.tar `       | [5.5.4]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2022-1705_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2022-1705] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Acceptance of some invalid Transfer-Encoding headers in the HTTP/1 client in net/http before Go 1.17.12 and Go 1.18.4 allows HTTP request smuggling if combined with an intermediate server that also improperly fails to reject the header as invalid.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-45288_github.com/golang/go_1.20",
              "shortDescription": {
                "text": "[CVE-2023-45288] github.com/golang/go 1.20"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar `       | [1.21.9], [1.22.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-39326_github.com/golang/go_1.18.10",
              "shortDescription": {
                "text": "[CVE-2023-39326] github.com/golang/go 1.18.10"
              },
              "help": {
                "text": "A malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body. A malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request. Chunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-45288_github.com/golang/go_1.21.8",
              "shortDescription": {
                "text": "[CVE-2023-45288] github.com/golang/go 1.21.8"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__58df8290592143d99a2e16b12a9a04501e511b0020e4c7bd5a0bef516fea6032.tar `       | [1.21.9], [1.22.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-45288_github.com/golang/go_1.18.10",
              "shortDescription": {
                "text": "[CVE-2023-45288] github.com/golang/go 1.18.10"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.21.9], [1.22.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2024-24786_google.golang.org/protobuf_1.27.1",
              "shortDescription": {
                "text": "[CVE-2024-24786] google.golang.org/protobuf 1.27.1"
              },
              "help": {
                "text": "The protojson.Unmarshal function can enter an infinite loop when unmarshaling certain forms of invalid JSON. This condition can occur when unmarshaling into a message which contains a google.protobuf.Any value, or when the UnmarshalOptions.DiscardUnknown option is set.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 0.0      | `sha256__58df8290592143d99a2e16b12a9a04501e511b0020e4c7bd5a0bef516fea6032.tar `       | [1.33.0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-28842_github.com/docker/docker_20.10.9+incompatible",
              "shortDescription": {
                "text": "[CVE-2023-28842] github.com/docker/docker 20.10.9+incompatible"
              },
              "help": {
                "text": "Moby) is an open source container framework developed by Docker Inc. that is distributed as Docker, Mirantis Container Runtime, and various other downstream projects/products. The Moby daemon component (`dockerd`), which is developed as moby/moby is commonly referred to as *Docker*.\n\nSwarm Mode, which is compiled in and delivered by default in `dockerd` and is thus present in most major Moby downstreams, is a simple, built-in container orchestrator that is implemented through a combination of SwarmKit and supporting network code.\n\nThe `overlay` network driver is a core feature of Swarm Mode, providing isolated virtual LANs that allow communication between containers and services across the cluster. This driver is an implementation/user of VXLAN, which encapsulates link-layer (Ethernet) frames in UDP datagrams that tag the frame with the VXLAN metadata, including a VXLAN Network ID (VNI) that identifies the originating overlay network. In addition, the overlay network driver supports an optional, off-by-default encrypted mode, which is especially useful when VXLAN packets traverses an untrusted network between nodes.\n\nEncrypted overlay networks function by encapsulating the VXLAN datagrams through the use of the IPsec Encapsulating Security Payload protocol in Transport mode. By deploying IPSec encapsulation, encrypted overlay networks gain the additional properties of source authentication through cryptographic proof, data integrity through check-summing, and confidentiality through encryption.\n\nWhen setting an endpoint up on an encrypted overlay network, Moby installs three iptables (Linux kernel firewall) rules that enforce both incoming and outgoing IPSec. These rules rely on the `u32` iptables extension provided by the `xt_u32` kernel module to directly filter on a VXLAN packet's VNI field, so that IPSec guarantees can be enforced on encrypted overlay networks without interfering with other overlay networks or other users of VXLAN.\n\nThe `overlay` driver dynamically and lazily defines the kernel config...",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.8      | `sha256__0cd215bda863ad4c73080e4b3dac0224982c891026ed83c26f1146ca938e7b42.tar `       | [20.10.24], [23.0.3]   |"
              },
              "properties": {
                "security-severity": "6.8"
              }
            },
            {
              "id": "CVE-2023-39319_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-39319] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "The html/template package does not apply the proper rules for handling occurrences of \"\u003cscript\", \"\u003c!--\", and \"\u003c/script\" within JS literals in \u003cscript\u003e contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.1      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2020-24553_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2020-24553] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Go before 1.14.8 and 1.15.x before 1.15.1 allows XSS because text/html is the default for CGI/FCGI handlers that lack a Content-Type header.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.1      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.14.8], [1.15.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2022-1705_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-1705] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Acceptance of some invalid Transfer-Encoding headers in the HTTP/1 client in net/http before Go 1.17.12 and Go 1.18.4 allows HTTP request smuggling if combined with an intermediate server that also improperly fails to reject the header as invalid.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-29406_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2023-29406] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "The HTTP/1 client does not fully validate the contents of the Host header. A maliciously crafted Host header can inject additional headers or entire requests. With fix, the HTTP/1 client now refuses to send requests containing an invalid Request.Host or Request.URL.Host value.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.19.11], [1.20.6]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2024-24786_google.golang.org/protobuf_1.31.0",
              "shortDescription": {
                "text": "[CVE-2024-24786] google.golang.org/protobuf 1.31.0"
              },
              "help": {
                "text": "The protojson.Unmarshal function can enter an infinite loop when unmarshaling certain forms of invalid JSON. This condition can occur when unmarshaling into a message which contains a google.protobuf.Any value, or when the UnmarshalOptions.DiscardUnknown option is set.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 0.0      | `sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar `\u003cbr/\u003e`sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `\u003cbr/\u003e`sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `\u003cbr/\u003e`sha256__58df8290592143d99a2e16b12a9a04501e511b0020e4c7bd5a0bef516fea6032.tar `\u003cbr/\u003e`sha256__aa360f6fc46f93e2723fe069922ed7d573dc39a443488ada6ddc7d10edf37d95.tar `\u003cbr/\u003e`sha256__0cd215bda863ad4c73080e4b3dac0224982c891026ed83c26f1146ca938e7b42.tar `       | [1.33.0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-39326_github.com/golang/go_1.19.7",
              "shortDescription": {
                "text": "[CVE-2023-39326] github.com/golang/go 1.19.7"
              },
              "help": {
                "text": "A malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body. A malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request. Chunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-44717_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2021-44717] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Go before 1.16.12 and 1.17.x before 1.17.5 on UNIX allows write operations to an unintended file or unintended network connection as a consequence of erroneous closing of file descriptor 0 after file-descriptor exhaustion.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 4.8      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.16.12], [1.17.5]   |"
              },
              "properties": {
                "security-severity": "4.8"
              }
            },
            {
              "id": "CVE-2024-35255_github.com/Azure/azure-sdk-for-go/sdk/azidentity_1.5.2",
              "shortDescription": {
                "text": "[CVE-2024-35255] github.com/Azure/azure-sdk-for-go/sdk/azidentity 1.5.2"
              },
              "help": {
                "text": "Azure Identity Libraries and Microsoft Authentication Library Elevation of Privilege Vulnerability",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__190862799647a743f9e38781a7a4d6add1f39d71417aadfb324107266efb7aa2.tar `       | [1.6.0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2022-1798_kubevirt.io/kubevirt_0.54.0",
              "shortDescription": {
                "text": "[CVE-2022-1798] kubevirt.io/kubevirt 0.54.0"
              },
              "help": {
                "text": "A path traversal vulnerability in KubeVirt versions up to 0.56 (and 0.55.1) on all platforms allows a user able to configure the kubevirt to read arbitrary files on the host filesystem which are publicly readable or which are readable for UID 107 or GID 107. /proc/self/\u003c\u003e is not accessible.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.5      | `sha256__0cd215bda863ad4c73080e4b3dac0224982c891026ed83c26f1146ca938e7b42.tar `       | [0.55.1]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2021-36221_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2021-36221] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Go before 1.15.15 and 1.16.x before 1.16.7 has a race condition that can lead to a net/http/httputil ReverseProxy panic upon an ErrAbortHandler abort.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.9      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.15.15], [1.16.7]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-3978_golang.org/x/net_0.8.0",
              "shortDescription": {
                "text": "[CVE-2023-3978] golang.org/x/net 0.8.0"
              },
              "help": {
                "text": "Text nodes not in the HTML namespace are incorrectly literally rendered, causing text which should be escaped to not be. This could lead to an XSS attack.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.1      | `sha256__58df8290592143d99a2e16b12a9a04501e511b0020e4c7bd5a0bef516fea6032.tar `       | [0.13.0]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2023-39318_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-39318] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "The html/template package does not properly handle HTML-like \"\" comment tokens, nor hashbang \"#!\" comment tokens, in \u003cscript\u003e contexts. This may cause the template parser to improperly interpret the contents of \u003cscript\u003e contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.1      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2023-39318_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2023-39318] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "The html/template package does not properly handle HTML-like \"\" comment tokens, nor hashbang \"#!\" comment tokens, in \u003cscript\u003e contexts. This may cause the template parser to improperly interpret the contents of \u003cscript\u003e contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.1      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2023-48795_golang.org/x/crypto_0.10.0",
              "shortDescription": {
                "text": "[CVE-2023-48795] golang.org/x/crypto 0.10.0"
              },
              "help": {
                "text": "The SSH transport protocol with certain OpenSSH extensions, found in OpenSSH before 9.6 and other products, allows remote attackers to bypass integrity checks such that some packets are omitted (from the extension negotiation message), and a client and server may consequently end up with a connection for which some security features have been downgraded or disabled, aka a Terrapin attack. This occurs because the SSH Binary Packet Protocol (BPP), implemented by these extensions, mishandles the handshake phase and mishandles use of sequence numbers. For example, there is an effective attack against SSH's use of ChaCha20-Poly1305 (and CBC with Encrypt-then-MAC). The bypass occurs in chacha20-poly1305@openssh.com and (if CBC is used) the -etm@openssh.com MAC algorithms. This also affects Maverick Synergy Java SSH API before 3.1.0-SNAPSHOT, Dropbear through 2022.83, Ssh before 5.1.1 in Erlang/OTP, PuTTY before 0.80, AsyncSSH before 2.14.2, golang.org/x/crypto before 0.17.0, libssh before 0.10.6, libssh2 through 1.11.0, Thorn Tech SFTP Gateway before 3.4.6, Tera Term before 5.1, Paramiko before 3.4.0, jsch before 0.2.15, SFTPGo before 2.5.6, Netgate pfSense Plus through 23.09.1, Netgate pfSense CE through 2.7.2, HPN-SSH through 18.2.0, ProFTPD before 1.3.8b (and before 1.3.9rc2), ORYX CycloneSSH before 2.3.4, NetSarang XShell 7 before Build 0144, CrushFTP before 10.6.0, ConnectBot SSH library before 2.2.22, Apache MINA sshd through 2.11.0, sshj through 0.37.0, TinySSH through 20230101, trilead-ssh2 6401, LANCOM LCOS and LANconfig, FileZilla before 3.66.4, Nova before 11.8, PKIX-SSH before 14.4, SecureCRT before 9.4.3, Transmit5 before 5.10.4, Win32-OpenSSH before 9.5.0.0p1-Beta, WinSCP before 6.2.2, Bitvise SSH Server before 9.32, Bitvise SSH Client before 9.33, KiTTY through 0.76.1.13, the net-ssh gem 7.2.0 for Ruby, the mscdex ssh2 module before 1.15.0 for Node.js, the thrussh library before 0.35.1 for Rust, and the Russh crate before 0.40.2 for Rust.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.9      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-29406_github.com/golang/go_1.20.5",
              "shortDescription": {
                "text": "[CVE-2023-29406] github.com/golang/go 1.20.5"
              },
              "help": {
                "text": "The HTTP/1 client does not fully validate the contents of the Host header. A maliciously crafted Host header can inject additional headers or entire requests. With fix, the HTTP/1 client now refuses to send requests containing an invalid Request.Host or Request.URL.Host value.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.19.11], [1.20.6]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-29406_github.com/golang/go_1.19.7",
              "shortDescription": {
                "text": "[CVE-2023-29406] github.com/golang/go 1.19.7"
              },
              "help": {
                "text": "The HTTP/1 client does not fully validate the contents of the Host header. A maliciously crafted Host header can inject additional headers or entire requests. With fix, the HTTP/1 client now refuses to send requests containing an invalid Request.Host or Request.URL.Host value.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.5      | `sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar `       | [1.19.11], [1.20.6]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-45284_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2023-45284] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "On Windows, The IsLocal function does not correctly detect reserved device names in some cases. Reserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local. With fix, IsLocal now correctly reports these names as non-local.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.20.11], [1.21.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-45284_github.com/golang/go_1.18.10",
              "shortDescription": {
                "text": "[CVE-2023-45284] github.com/golang/go 1.18.10"
              },
              "help": {
                "text": "On Windows, The IsLocal function does not correctly detect reserved device names in some cases. Reserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local. With fix, IsLocal now correctly reports these names as non-local.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.20.11], [1.21.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-32148_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2022-32148] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Improper exposure of client IP addresses in net/http before Go 1.17.12 and Go 1.18.4 can be triggered by calling httputil.ReverseProxy.ServeHTTP with a Request.Header map containing a nil value for the X-Forwarded-For header, which causes ReverseProxy to set the client IP as the value of the X-Forwarded-For header.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-45288_golang.org/x/net_0.9.0",
              "shortDescription": {
                "text": "[CVE-2023-45288] golang.org/x/net 0.9.0"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [0.23.0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-39326_github.com/golang/go_1.21.3",
              "shortDescription": {
                "text": "[CVE-2023-39326] github.com/golang/go 1.21.3"
              },
              "help": {
                "text": "A malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body. A malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request. Chunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__aa360f6fc46f93e2723fe069922ed7d573dc39a443488ada6ddc7d10edf37d95.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2024-29018_github.com/docker/docker_20.10.25+incompatible",
              "shortDescription": {
                "text": "[CVE-2024-29018] github.com/docker/docker 20.10.25+incompatible"
              },
              "help": {
                "text": "Moby is an open source container framework that is a key component of Docker Engine, Docker Desktop, and other distributions of container tooling or runtimes. Moby's networking implementation allows for many networks, each with their own IP address range and gateway, to be defined. This feature is frequently referred to as custom networks, as each network can have a different driver, set of parameters and thus behaviors. When creating a network, the `--internal` flag is used to designate a network as _internal_. The `internal` attribute in a docker-compose.yml file may also be used to mark a network _internal_, and other API clients may specify the `internal` parameter as well.\n\nWhen containers with networking are created, they are assigned unique network interfaces and IP addresses. The host serves as a router for non-internal networks, with a gateway IP that provides SNAT/DNAT to/from container IPs.\n\nContainers on an internal network may communicate between each other, but are precluded from communicating with any networks the host has access to (LAN or WAN) as no default route is configured, and firewall rules are set up to drop all outgoing traffic. Communication with the gateway IP address (and thus appropriately configured host services) is possible, and the host may communicate with any container IP directly.\n\nIn addition to configuring the Linux kernel's various networking features to enable container networking, `dockerd` directly provides some services to container networks. Principal among these is serving as a resolver, enabling service discovery, and resolution of names from an upstream resolver.\n\nWhen a DNS request for a name that does not correspond to a container is received, the request is forwarded to the configured upstream resolver. This request is made from the container's network namespace: the level of access and routing of traffic is the same as if the request was made by the container itself.\n\nAs a consequence of this design, containers solely attached to an internal network will ...",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.9      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [23.0.11], [25.0.5], [26.0.0-rc3]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2022-39253_github.com/moby/moby_1.4.2-0.20170731201646-1009e6a40b29",
              "shortDescription": {
                "text": "[CVE-2022-39253] github.com/moby/moby 1.4.2-0.20170731201646-1009e6a40b29"
              },
              "help": {
                "text": "Git is an open source, scalable, distributed revision control system. Versions prior to 2.30.6, 2.31.5, 2.32.4, 2.33.5, 2.34.5, 2.35.5, 2.36.3, and 2.37.4 are subject to exposure of sensitive information to a malicious actor. When performing a local clone (where the source and target of the clone are on the same volume), Git copies the contents of the source's `$GIT_DIR/objects` directory into the destination by either creating hardlinks to the source contents, or copying them (if hardlinks are disabled via `--no-hardlinks`). A malicious actor could convince a victim to clone a repository with a symbolic link pointing at sensitive information on the victim's machine. This can be done either by having the victim clone a malicious repository on the same machine, or having them clone a malicious repository embedded as a bare repository via a submodule from any source, provided they clone with the `--recurse-submodules` option. Git does not create symbolic links in the `$GIT_DIR/objects` directory. The problem has been patched in the versions published on 2022-10-18, and backported to v2.30.x. Potential workarounds: Avoid cloning untrusted repositories using the `--local` optimization when on a shared machine, either by passing the `--no-local` option to `git clone` or cloning from a URL that uses the `file://` scheme. Alternatively, avoid cloning repositories from untrusted sources with `--recurse-submodules` or run `git config --global protocol.file.allow user`.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [20.10.20]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-45284_github.com/golang/go_1.19.7",
              "shortDescription": {
                "text": "[CVE-2023-45284] github.com/golang/go 1.19.7"
              },
              "help": {
                "text": "On Windows, The IsLocal function does not correctly detect reserved device names in some cases. Reserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local. With fix, IsLocal now correctly reports these names as non-local.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar `       | [1.20.11], [1.21.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-39318_github.com/golang/go_1.19.7",
              "shortDescription": {
                "text": "[CVE-2023-39318] github.com/golang/go 1.19.7"
              },
              "help": {
                "text": "The html/template package does not properly handle HTML-like \"\" comment tokens, nor hashbang \"#!\" comment tokens, in \u003cscript\u003e contexts. This may cause the template parser to improperly interpret the contents of \u003cscript\u003e contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.1      | `sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2023-39319_github.com/golang/go_1.20.7",
              "shortDescription": {
                "text": "[CVE-2023-39319] github.com/golang/go 1.20.7"
              },
              "help": {
                "text": "The html/template package does not apply the proper rules for handling occurrences of \"\u003cscript\", \"\u003c!--\", and \"\u003c/script\" within JS literals in \u003cscript\u003e contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.1      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2014-8178_github.com/moby/moby_1.4.2-0.20170731201646-1009e6a40b29",
              "shortDescription": {
                "text": "[CVE-2014-8178] github.com/moby/moby 1.4.2-0.20170731201646-1009e6a40b29"
              },
              "help": {
                "text": "Docker Engine before 1.8.3 and CS Docker Engine before 1.6.2-CS7 do not use a globally unique identifier to store image layers, which makes it easier for attackers to poison the image cache via a crafted image in pull or push commands.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.8.3]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2024-24786_google.golang.org/protobuf_1.32.0",
              "shortDescription": {
                "text": "[CVE-2024-24786] google.golang.org/protobuf 1.32.0"
              },
              "help": {
                "text": "The protojson.Unmarshal function can enter an infinite loop when unmarshaling certain forms of invalid JSON. This condition can occur when unmarshaling into a message which contains a google.protobuf.Any value, or when the UnmarshalOptions.DiscardUnknown option is set.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 0.0      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.33.0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-39326_github.com/golang/go_1.20.5",
              "shortDescription": {
                "text": "[CVE-2023-39326] github.com/golang/go 1.20.5"
              },
              "help": {
                "text": "A malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body. A malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request. Chunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-1962_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2022-1962] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Uncontrolled recursion in the Parse functions in go/parser before Go 1.17.12 and Go 1.18.4 allow an attacker to cause a panic due to stack exhaustion via deeply nested types or declarations.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-3978_golang.org/x/net_0.11.0",
              "shortDescription": {
                "text": "[CVE-2023-3978] golang.org/x/net 0.11.0"
              },
              "help": {
                "text": "Text nodes not in the HTML namespace are incorrectly literally rendered, causing text which should be escaped to not be. This could lead to an XSS attack.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.1      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [0.13.0]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2023-45284_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2023-45284] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "On Windows, The IsLocal function does not correctly detect reserved device names in some cases. Reserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local. With fix, IsLocal now correctly reports these names as non-local.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.20.11], [1.21.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-39326_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2023-39326] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "A malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body. A malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request. Chunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-45284_github.com/golang/go_1.20",
              "shortDescription": {
                "text": "[CVE-2023-45284] github.com/golang/go 1.20"
              },
              "help": {
                "text": "On Windows, The IsLocal function does not correctly detect reserved device names in some cases. Reserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local. With fix, IsLocal now correctly reports these names as non-local.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar `       | [1.20.11], [1.21.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-45288_golang.org/x/net_0.8.0",
              "shortDescription": {
                "text": "[CVE-2023-45288] golang.org/x/net 0.8.0"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__58df8290592143d99a2e16b12a9a04501e511b0020e4c7bd5a0bef516fea6032.tar `       | [0.23.0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-39319_github.com/golang/go_1.20.5",
              "shortDescription": {
                "text": "[CVE-2023-39319] github.com/golang/go 1.20.5"
              },
              "help": {
                "text": "The html/template package does not apply the proper rules for handling occurrences of \"\u003cscript\", \"\u003c!--\", and \"\u003c/script\" within JS literals in \u003cscript\u003e contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.1      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2023-45288_golang.org/x/net_0.4.0",
              "shortDescription": {
                "text": "[CVE-2023-45288] golang.org/x/net 0.4.0"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar `       | [0.23.0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-45284_github.com/golang/go_1.20.5",
              "shortDescription": {
                "text": "[CVE-2023-45284] github.com/golang/go 1.20.5"
              },
              "help": {
                "text": "On Windows, The IsLocal function does not correctly detect reserved device names in some cases. Reserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local. With fix, IsLocal now correctly reports these names as non-local.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.3      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.20.11], [1.21.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2024-28180_gopkg.in/square/go-jose.v2_2.6.0",
              "shortDescription": {
                "text": "[CVE-2024-28180] gopkg.in/square/go-jose.v2 2.6.0"
              },
              "help": {
                "text": "Package jose aims to provide an implementation of the Javascript Object Signing and Encryption set of standards. An attacker could send a JWE containing compressed data that used large amounts of memory and CPU when decompressed by Decrypt or DecryptMulti. Those functions now return an error if the decompressed data would exceed 250kB or 10x the compressed size (whichever is larger). This vulnerability has been patched in versions 4.0.1, 3.0.3 and 2.6.3.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 4.3      | `sha256__58df8290592143d99a2e16b12a9a04501e511b0020e4c7bd5a0bef516fea6032.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "4.3"
              }
            },
            {
              "id": "CVE-2013-4235_login_defs_0:4.8.1-150400.10.15.1",
              "shortDescription": {
                "text": "[CVE-2013-4235] login_defs 0:4.8.1-150400.10.15.1"
              },
              "help": {
                "text": "libsubid4-4.15.1-1.1 on GA media (Moderate)",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.7      | `sha256__3fa1d37901e783448b69dbdc013879ae88fe64472f6f452c7391b4198c4c9f5a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "6.7"
              }
            },
            {
              "id": "CVE-2024-33394_kubevirt.io/kubevirt_0.54.0",
              "shortDescription": {
                "text": "[CVE-2024-33394] kubevirt.io/kubevirt 0.54.0"
              },
              "help": {
                "text": "An issue in kubevirt kubevirt v1.2.0 and before allows a local attacker to execute arbitrary code via a crafted command to get the token component.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 0.0      | `sha256__0cd215bda863ad4c73080e4b3dac0224982c891026ed83c26f1146ca938e7b42.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-40453_github.com/docker/machine_0.16.2",
              "shortDescription": {
                "text": "[CVE-2023-40453] github.com/docker/machine 0.16.2"
              },
              "help": {
                "text": "Docker Machine through 0.16.2 allows an attacker, who has control of a worker node, to provide crafted version data, which might potentially trick an administrator into performing an unsafe action (via escape sequence injection), or might have a data size that causes a denial of service to a bastion node. NOTE: This vulnerability only affects products that are no longer supported by the maintainer.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.5      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2024-31420_kubevirt.io/kubevirt_0.54.0",
              "shortDescription": {
                "text": "[CVE-2024-31420] kubevirt.io/kubevirt 0.54.0"
              },
              "help": {
                "text": "A NULL pointer dereference flaw was found in KubeVirt. This flaw allows an attacker who has access to a virtual machine guest on a node with DownwardMetrics enabled to cause a denial of service by issuing a high number of calls to vm-dump-metrics --virtio and then deleting the virtual machine.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.5      | `sha256__0cd215bda863ad4c73080e4b3dac0224982c891026ed83c26f1146ca938e7b42.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-52426_libexpat1_0:2.4.4-150400.3.17.1",
              "shortDescription": {
                "text": "[CVE-2023-52426] libexpat1 0:2.4.4-150400.3.17.1"
              },
              "help": {
                "text": "CVE-2023-52426",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.5      | `sha256__3fa1d37901e783448b69dbdc013879ae88fe64472f6f452c7391b4198c4c9f5a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2013-4235_shadow_0:4.8.1-150400.10.15.1",
              "shortDescription": {
                "text": "[CVE-2013-4235] shadow 0:4.8.1-150400.10.15.1"
              },
              "help": {
                "text": "libsubid4-4.15.1-1.1 on GA media (Moderate)",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 6.7      | `sha256__3fa1d37901e783448b69dbdc013879ae88fe64472f6f452c7391b4198c4c9f5a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "6.7"
              }
            },
            {
              "id": "CVE-2022-30629_github.com/golang/go_1.17.5",
              "shortDescription": {
                "text": "[CVE-2022-30629] github.com/golang/go 1.17.5"
              },
              "help": {
                "text": "Non-random values for ticket_age_add in session tickets in crypto/tls before Go 1.17.11 and Go 1.18.3 allow an attacker that can observe TLS handshakes to correlate successive connections by comparing ticket ages during session resumption.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 3.1      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "3.1"
              }
            },
            {
              "id": "CVE-2015-3631_github.com/moby/moby_1.4.2-0.20170731201646-1009e6a40b29",
              "shortDescription": {
                "text": "[CVE-2015-3631] github.com/moby/moby 1.4.2-0.20170731201646-1009e6a40b29"
              },
              "help": {
                "text": "Docker Engine before 1.6.1 allows local users to set arbitrary Linux Security Modules (LSM) and docker_t policies via an image that allows volumes to override files in /proc.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 5.1      | `sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar `       | [1.6.1]   |"
              },
              "properties": {
                "security-severity": "5.1"
              }
            },
            {
              "id": "CVE-2024-3177_k8s.io/kubernetes_1.24.16",
              "shortDescription": {
                "text": "[CVE-2024-3177] k8s.io/kubernetes 1.24.16"
              },
              "help": {
                "text": "A security issue was discovered in Kubernetes where users may be able to launch containers that bypass the mountable secrets policy enforced by the ServiceAccount admission plugin when using containers, init containers, and ephemeral containers with the envFrom field populated. The policy ensures pods running with a service account may only reference secrets specified in the service account’s secrets field. Kubernetes clusters are only affected if the ServiceAccount admission plugin and the kubernetes.io/enforce-mountable-secrets annotation are used together with containers, init containers, and ephemeral containers with the envFrom field populated.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 2.7      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.27.13], [1.28.9], [1.29.4]   |"
              },
              "properties": {
                "security-severity": "2.7"
              }
            },
            {
              "id": "CVE-2024-3177_k8s.io/kubernetes_1.27.10",
              "shortDescription": {
                "text": "[CVE-2024-3177] k8s.io/kubernetes 1.27.10"
              },
              "help": {
                "text": "A security issue was discovered in Kubernetes where users may be able to launch containers that bypass the mountable secrets policy enforced by the ServiceAccount admission plugin when using containers, init containers, and ephemeral containers with the envFrom field populated. The policy ensures pods running with a service account may only reference secrets specified in the service account’s secrets field. Kubernetes clusters are only affected if the ServiceAccount admission plugin and the kubernetes.io/enforce-mountable-secrets annotation are used together with containers, init containers, and ephemeral containers with the envFrom field populated.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 2.7      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.27.13], [1.28.9], [1.29.4]   |"
              },
              "properties": {
                "security-severity": "2.7"
              }
            },
            {
              "id": "CVE-2021-25743_k8s.io/kubernetes_1.24.16",
              "shortDescription": {
                "text": "[CVE-2021-25743] k8s.io/kubernetes 1.24.16"
              },
              "help": {
                "text": "kubectl does not neutralize escape, meta or control sequences contained in the raw data it outputs to a terminal. This includes but is not limited to the unstructured string fields in objects such as Events.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 3.0      | `sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar `       | [1.26.0-alpha.3]   |"
              },
              "properties": {
                "security-severity": "3.0"
              }
            },
            {
              "id": "CVE-2022-30629_github.com/golang/go_1.12.9",
              "shortDescription": {
                "text": "[CVE-2022-30629] github.com/golang/go 1.12.9"
              },
              "help": {
                "text": "Non-random values for ticket_age_add in session tickets in crypto/tls before Go 1.17.11 and Go 1.18.3 allow an attacker that can observe TLS handshakes to correlate successive connections by comparing ticket ages during session resumption.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 3.1      | `sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "3.1"
              }
            },
            {
              "id": "CVE-2024-3177_k8s.io/kubernetes_1.29.3",
              "shortDescription": {
                "text": "[CVE-2024-3177] k8s.io/kubernetes 1.29.3"
              },
              "help": {
                "text": "A security issue was discovered in Kubernetes where users may be able to launch containers that bypass the mountable secrets policy enforced by the ServiceAccount admission plugin when using containers, init containers, and ephemeral containers with the envFrom field populated. The policy ensures pods running with a service account may only reference secrets specified in the service account’s secrets field. Kubernetes clusters are only affected if the ServiceAccount admission plugin and the kubernetes.io/enforce-mountable-secrets annotation are used together with containers, init containers, and ephemeral containers with the envFrom field populated.",
                "markdown": "| Severity Score | Direct Dependencies | Fixed Versions     |\n| :---:        |    :----:   |          :---: |\n| 2.7      | `sha256__190862799647a743f9e38781a7a4d6add1f39d71417aadfb324107266efb7aa2.tar `       | [1.27.13], [1.28.9], [1.29.4]   |"
              },
              "properties": {
                "security-severity": "2.7"
              }
            }
          ],
          "version": "3.96.1"
        }
      },
      "results": [
        {
          "ruleId": "CVE-2023-29405_github.com/golang/go_1.17.5",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29405] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24538_github.com/golang/go_1.17.5",
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24538] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29404_github.com/golang/go_1.18.10",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29404] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23806_github.com/golang/go_1.17.5",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "text": "[CVE-2022-23806] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24540_github.com/golang/go_1.20",
          "ruleIndex": 4,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24540] sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29402_github.com/golang/go_1.19.7",
          "ruleIndex": 5,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29402] sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29405_github.com/golang/go_1.12.9",
          "ruleIndex": 6,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29405] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2014-0048_github.com/moby/moby_1.4.2-0.20170731201646-1009e6a40b29",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "[CVE-2014-0048] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29404_github.com/golang/go_1.20",
          "ruleIndex": 8,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29404] sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29405_github.com/golang/go_1.19.7",
          "ruleIndex": 9,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29405] sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29404_github.com/golang/go_1.12.9",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29404] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24538_github.com/golang/go_1.20",
          "ruleIndex": 11,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24538] sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24540_github.com/golang/go_1.18.10",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24540] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24540_github.com/golang/go_1.19.7",
          "ruleIndex": 13,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24540] sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24538_github.com/golang/go_1.19.7",
          "ruleIndex": 14,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24538] sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24538_github.com/golang/go_1.18.10",
          "ruleIndex": 15,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24538] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29404_github.com/golang/go_1.17.5",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29404] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29405_github.com/golang/go_1.18.10",
          "ruleIndex": 17,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29405] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29402_github.com/golang/go_1.20",
          "ruleIndex": 18,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29402] sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29402_github.com/golang/go_1.17.5",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29402] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29404_github.com/golang/go_1.19.7",
          "ruleIndex": 20,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29404] sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24540_github.com/golang/go_1.17.5",
          "ruleIndex": 21,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24540] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29405_github.com/golang/go_1.20",
          "ruleIndex": 22,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29405] sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29402_github.com/golang/go_1.12.9",
          "ruleIndex": 23,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29402] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24538_github.com/golang/go_1.12.9",
          "ruleIndex": 24,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24538] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23806_github.com/golang/go_1.12.9",
          "ruleIndex": 25,
          "level": "error",
          "message": {
            "text": "[CVE-2022-23806] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24540_github.com/golang/go_1.12.9",
          "ruleIndex": 26,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24540] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29402_github.com/golang/go_1.18.10",
          "ruleIndex": 27,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29402] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-38297_github.com/golang/go_1.12.9",
          "ruleIndex": 28,
          "level": "error",
          "message": {
            "text": "[CVE-2021-38297] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3115_github.com/golang/go_1.12.9",
          "ruleIndex": 29,
          "level": "error",
          "message": {
            "text": "[CVE-2021-3115] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-41771_github.com/golang/go_1.12.9",
          "ruleIndex": 30,
          "level": "error",
          "message": {
            "text": "[CVE-2021-41771] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39323_github.com/golang/go_1.20",
          "ruleIndex": 31,
          "level": "error",
          "message": {
            "text": "[CVE-2023-39323] sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41725_github.com/golang/go_1.18.10",
          "ruleIndex": 32,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41725] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24539_github.com/golang/go_1.19.7",
          "ruleIndex": 33,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24539] sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24539_github.com/golang/go_1.12.9",
          "ruleIndex": 34,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24539] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29400_github.com/golang/go_1.12.9",
          "ruleIndex": 35,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29400] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45283_github.com/golang/go_1.20",
          "ruleIndex": 36,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45283] sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30630_github.com/golang/go_1.12.9",
          "ruleIndex": 37,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30630] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24537_github.com/golang/go_1.12.9",
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24537] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45283_github.com/golang/go_1.21.3",
          "ruleIndex": 39,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45283] sha256__aa360f6fc46f93e2723fe069922ed7d573dc39a443488ada6ddc7d10edf37d95.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45283_github.com/golang/go_1.17.5",
          "ruleIndex": 40,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45283] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30633_github.com/golang/go_1.17.5",
          "ruleIndex": 41,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30633] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41724_github.com/golang/go_1.20",
          "ruleIndex": 42,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41724] sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-28327_github.com/golang/go_1.17.5",
          "ruleIndex": 43,
          "level": "error",
          "message": {
            "text": "[CVE-2022-28327] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23773_github.com/golang/go_1.12.9",
          "ruleIndex": 44,
          "level": "error",
          "message": {
            "text": "[CVE-2022-23773] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24537_github.com/golang/go_1.18.10",
          "ruleIndex": 45,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24537] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39323_github.com/golang/go_1.20.7",
          "ruleIndex": 46,
          "level": "error",
          "message": {
            "text": "[CVE-2023-39323] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45287_github.com/golang/go_1.12.9",
          "ruleIndex": 47,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45287] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-28131_github.com/golang/go_1.17.5",
          "ruleIndex": 48,
          "level": "error",
          "message": {
            "text": "[CVE-2022-28131] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39323_github.com/golang/go_1.20.5",
          "ruleIndex": 49,
          "level": "error",
          "message": {
            "text": "[CVE-2023-39323] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41715_github.com/golang/go_1.17.5",
          "ruleIndex": 50,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41715] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-41772_github.com/golang/go_1.12.9",
          "ruleIndex": 51,
          "level": "error",
          "message": {
            "text": "[CVE-2021-41772] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24537_github.com/golang/go_1.17.5",
          "ruleIndex": 52,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24537] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-44487_google.golang.org/grpc_1.52.3",
          "ruleIndex": 53,
          "level": "error",
          "message": {
            "text": "[CVE-2023-44487] sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29403_github.com/golang/go_1.17.5",
          "ruleIndex": 54,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29403] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41722_github.com/golang/go_1.12.9",
          "ruleIndex": 55,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41722] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41725_github.com/golang/go_1.20",
          "ruleIndex": 56,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41725] sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24534_github.com/golang/go_1.18.10",
          "ruleIndex": 57,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24534] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41724_github.com/golang/go_1.17.5",
          "ruleIndex": 58,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41724] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45287_github.com/golang/go_1.17.5",
          "ruleIndex": 59,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45287] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30630_github.com/golang/go_1.17.5",
          "ruleIndex": 60,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30630] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39323_github.com/golang/go_1.12.9",
          "ruleIndex": 61,
          "level": "error",
          "message": {
            "text": "[CVE-2023-39323] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-33195_github.com/golang/go_1.12.9",
          "ruleIndex": 62,
          "level": "error",
          "message": {
            "text": "[CVE-2021-33195] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45287_github.com/golang/go_1.19.7",
          "ruleIndex": 63,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45287] sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41725_github.com/golang/go_1.12.9",
          "ruleIndex": 64,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41725] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24675_github.com/golang/go_1.12.9",
          "ruleIndex": 65,
          "level": "error",
          "message": {
            "text": "[CVE-2022-24675] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24536_github.com/golang/go_1.17.5",
          "ruleIndex": 66,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24536] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24536_github.com/golang/go_1.20",
          "ruleIndex": 67,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24536] sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29400_github.com/golang/go_1.20",
          "ruleIndex": 68,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29400] sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41716_github.com/golang/go_1.17.5",
          "ruleIndex": 69,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41716] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30632_github.com/golang/go_1.17.5",
          "ruleIndex": 70,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30632] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-44487_google.golang.org/grpc_1.45.0",
          "ruleIndex": 71,
          "level": "error",
          "message": {
            "text": "[CVE-2023-44487] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24557_github.com/docker/docker_24.0.0-rc.2.0.20230801142700-69c9adb7d386+incompatible",
          "ruleIndex": 72,
          "level": "error",
          "message": {
            "text": "[CVE-2024-24557] sha256__58df8290592143d99a2e16b12a9a04501e511b0020e4c7bd5a0bef516fea6032.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-0601_github.com/golang/go_1.12.9",
          "ruleIndex": 73,
          "level": "error",
          "message": {
            "text": "[CVE-2020-0601] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2880_github.com/golang/go_1.17.5",
          "ruleIndex": 74,
          "level": "error",
          "message": {
            "text": "[CVE-2022-2880] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45285_github.com/golang/go_1.19.7",
          "ruleIndex": 75,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45285] sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24557_github.com/docker/docker_20.10.24+incompatible",
          "ruleIndex": 76,
          "level": "error",
          "message": {
            "text": "[CVE-2024-24557] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23772_github.com/golang/go_1.17.5",
          "ruleIndex": 77,
          "level": "error",
          "message": {
            "text": "[CVE-2022-23772] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24557_github.com/docker/docker_20.10.25+incompatible",
          "ruleIndex": 78,
          "level": "error",
          "message": {
            "text": "[CVE-2024-24557] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30631_github.com/golang/go_1.17.5",
          "ruleIndex": 79,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30631] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24921_github.com/golang/go_1.17.5",
          "ruleIndex": 80,
          "level": "error",
          "message": {
            "text": "[CVE-2022-24921] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41716_github.com/golang/go_1.12.9",
          "ruleIndex": 81,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41716] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39323_github.com/golang/go_1.19.7",
          "ruleIndex": 82,
          "level": "error",
          "message": {
            "text": "[CVE-2023-39323] sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41720_github.com/golang/go_1.17.5",
          "ruleIndex": 83,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41720] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41725_github.com/golang/go_1.17.5",
          "ruleIndex": 84,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41725] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41722_github.com/golang/go_1.17.5",
          "ruleIndex": 85,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41722] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24557_github.com/docker/docker_20.10.9+incompatible",
          "ruleIndex": 86,
          "level": "error",
          "message": {
            "text": "[CVE-2024-24557] sha256__0cd215bda863ad4c73080e4b3dac0224982c891026ed83c26f1146ca938e7b42.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-12608_github.com/moby/moby_1.4.2-0.20170731201646-1009e6a40b29",
          "ruleIndex": 87,
          "level": "error",
          "message": {
            "text": "[CVE-2018-12608] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29403_github.com/golang/go_1.19.7",
          "ruleIndex": 88,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29403] sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23772_github.com/golang/go_1.12.9",
          "ruleIndex": 89,
          "level": "error",
          "message": {
            "text": "[CVE-2022-23772] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-17596_github.com/golang/go_1.12.9",
          "ruleIndex": 90,
          "level": "error",
          "message": {
            "text": "[CVE-2019-17596] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-16276_github.com/golang/go_1.12.9",
          "ruleIndex": 91,
          "level": "error",
          "message": {
            "text": "[CVE-2019-16276] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30631_github.com/golang/go_1.12.9",
          "ruleIndex": 92,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30631] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24536_github.com/golang/go_1.12.9",
          "ruleIndex": 93,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24536] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41722_github.com/golang/go_1.20",
          "ruleIndex": 94,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41722] sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39323_github.com/golang/go_1.17.5",
          "ruleIndex": 95,
          "level": "error",
          "message": {
            "text": "[CVE-2023-39323] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24539_github.com/golang/go_1.20",
          "ruleIndex": 96,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24539] sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-28366_github.com/golang/go_1.12.9",
          "ruleIndex": 97,
          "level": "error",
          "message": {
            "text": "[CVE-2020-28366] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45283_github.com/golang/go_1.18.10",
          "ruleIndex": 98,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45283] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29400_github.com/golang/go_1.18.10",
          "ruleIndex": 99,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29400] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-44487_golang.org/x/net_0.12.0",
          "ruleIndex": 100,
          "level": "error",
          "message": {
            "text": "[CVE-2023-44487] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2014-0047_github.com/moby/moby_1.4.2-0.20170731201646-1009e6a40b29",
          "ruleIndex": 101,
          "level": "error",
          "message": {
            "text": "[CVE-2014-0047] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23773_github.com/golang/go_1.17.5",
          "ruleIndex": 102,
          "level": "error",
          "message": {
            "text": "[CVE-2022-23773] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39325_golang.org/x/net_0.4.0",
          "ruleIndex": 103,
          "level": "error",
          "message": {
            "text": "[CVE-2023-39325] sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24536_github.com/golang/go_1.19.7",
          "ruleIndex": 104,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24536] sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30633_github.com/golang/go_1.12.9",
          "ruleIndex": 105,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30633] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2879_github.com/golang/go_1.17.5",
          "ruleIndex": 106,
          "level": "error",
          "message": {
            "text": "[CVE-2022-2879] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24539_github.com/golang/go_1.18.10",
          "ruleIndex": 107,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24539] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41724_github.com/golang/go_1.18.10",
          "ruleIndex": 108,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41724] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45285_github.com/golang/go_1.18.10",
          "ruleIndex": 109,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45285] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24534_github.com/golang/go_1.20",
          "ruleIndex": 110,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24534] sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-28840_github.com/docker/docker_20.10.9+incompatible",
          "ruleIndex": 111,
          "level": "error",
          "message": {
            "text": "[CVE-2023-28840] sha256__0cd215bda863ad4c73080e4b3dac0224982c891026ed83c26f1146ca938e7b42.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45287_github.com/golang/go_1.18.10",
          "ruleIndex": 112,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45287] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-22189_github.com/quic-go/quic-go_0.38.2",
          "ruleIndex": 113,
          "level": "error",
          "message": {
            "text": "[CVE-2024-22189] sha256__58df8290592143d99a2e16b12a9a04501e511b0020e4c7bd5a0bef516fea6032.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32189_github.com/golang/go_1.17.5",
          "ruleIndex": 114,
          "level": "error",
          "message": {
            "text": "[CVE-2022-32189] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3676_k8s.io/kubernetes_1.24.16",
          "ruleIndex": 115,
          "level": "error",
          "message": {
            "text": "[CVE-2023-3676] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-21626_github.com/opencontainers/runc_1.1.5",
          "ruleIndex": 116,
          "level": "error",
          "message": {
            "text": "[CVE-2024-21626] sha256__58df8290592143d99a2e16b12a9a04501e511b0020e4c7bd5a0bef516fea6032.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24537_github.com/golang/go_1.19.7",
          "ruleIndex": 117,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24537] sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41715_github.com/golang/go_1.12.9",
          "ruleIndex": 118,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41715] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24921_github.com/golang/go_1.12.9",
          "ruleIndex": 119,
          "level": "error",
          "message": {
            "text": "[CVE-2022-24921] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29403_github.com/golang/go_1.18.10",
          "ruleIndex": 120,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29403] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41722_github.com/golang/go_1.18.10",
          "ruleIndex": 121,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41722] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-39293_github.com/golang/go_1.12.9",
          "ruleIndex": 122,
          "level": "error",
          "message": {
            "text": "[CVE-2021-39293] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-44487_golang.org/x/net_0.8.0",
          "ruleIndex": 123,
          "level": "error",
          "message": {
            "text": "[CVE-2023-44487] sha256__58df8290592143d99a2e16b12a9a04501e511b0020e4c7bd5a0bef516fea6032.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30632_github.com/golang/go_1.12.9",
          "ruleIndex": 124,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30632] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24536_github.com/golang/go_1.18.10",
          "ruleIndex": 125,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24536] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41720_github.com/golang/go_1.12.9",
          "ruleIndex": 126,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41720] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30635_github.com/golang/go_1.17.5",
          "ruleIndex": 127,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30635] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41723_golang.org/x/net_0.4.0",
          "ruleIndex": 128,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41723] sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24534_github.com/golang/go_1.17.5",
          "ruleIndex": 129,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24534] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39325_golang.org/x/net_0.12.0",
          "ruleIndex": 130,
          "level": "error",
          "message": {
            "text": "[CVE-2023-39325] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2879_github.com/golang/go_1.12.9",
          "ruleIndex": 131,
          "level": "error",
          "message": {
            "text": "[CVE-2022-2879] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45283_github.com/golang/go_1.20.5",
          "ruleIndex": 132,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45283] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-28327_github.com/golang/go_1.12.9",
          "ruleIndex": 133,
          "level": "error",
          "message": {
            "text": "[CVE-2022-28327] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39325_golang.org/x/net_0.11.0",
          "ruleIndex": 134,
          "level": "error",
          "message": {
            "text": "[CVE-2023-39325] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45285_github.com/golang/go_1.20",
          "ruleIndex": 135,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45285] sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30634_github.com/golang/go_1.12.9",
          "ruleIndex": 136,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30634] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39323_github.com/golang/go_1.18.10",
          "ruleIndex": 137,
          "level": "error",
          "message": {
            "text": "[CVE-2023-39323] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24537_github.com/golang/go_1.20",
          "ruleIndex": 138,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24537] sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-29804_github.com/golang/go_1.12.9",
          "ruleIndex": 139,
          "level": "error",
          "message": {
            "text": "[CVE-2022-29804] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-28367_github.com/golang/go_1.12.9",
          "ruleIndex": 140,
          "level": "error",
          "message": {
            "text": "[CVE-2020-28367] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2880_github.com/golang/go_1.12.9",
          "ruleIndex": 141,
          "level": "error",
          "message": {
            "text": "[CVE-2022-2880] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45283_github.com/golang/go_1.20.7",
          "ruleIndex": 142,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45283] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29400_github.com/golang/go_1.17.5",
          "ruleIndex": 143,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29400] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-44487_golang.org/x/net_0.11.0",
          "ruleIndex": 144,
          "level": "error",
          "message": {
            "text": "[CVE-2023-44487] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-27918_github.com/golang/go_1.12.9",
          "ruleIndex": 145,
          "level": "error",
          "message": {
            "text": "[CVE-2021-27918] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39325_golang.org/x/net_0.9.0",
          "ruleIndex": 146,
          "level": "error",
          "message": {
            "text": "[CVE-2023-39325] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45285_github.com/golang/go_1.20.5",
          "ruleIndex": 147,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45285] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-44487_google.golang.org/grpc_1.57.0",
          "ruleIndex": 148,
          "level": "error",
          "message": {
            "text": "[CVE-2023-44487] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30635_github.com/golang/go_1.12.9",
          "ruleIndex": 149,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30635] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29403_github.com/golang/go_1.20",
          "ruleIndex": 150,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29403] sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-28131_github.com/golang/go_1.12.9",
          "ruleIndex": 151,
          "level": "error",
          "message": {
            "text": "[CVE-2022-28131] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45285_github.com/golang/go_1.17.5",
          "ruleIndex": 152,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45285] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24557_github.com/docker/docker_24.0.7+incompatible",
          "ruleIndex": 153,
          "level": "error",
          "message": {
            "text": "[CVE-2024-24557] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24557_github.com/docker/docker_24.0.7+incompatible",
          "ruleIndex": 153,
          "level": "error",
          "message": {
            "text": "[CVE-2024-24557] sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24534_github.com/golang/go_1.12.9",
          "ruleIndex": 154,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24534] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39325_golang.org/x/net_0.8.0",
          "ruleIndex": 155,
          "level": "error",
          "message": {
            "text": "[CVE-2023-39325] sha256__58df8290592143d99a2e16b12a9a04501e511b0020e4c7bd5a0bef516fea6032.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41724_github.com/golang/go_1.12.9",
          "ruleIndex": 156,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41724] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-29804_github.com/golang/go_1.17.5",
          "ruleIndex": 157,
          "level": "error",
          "message": {
            "text": "[CVE-2022-29804] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-44487_golang.org/x/net_0.4.0",
          "ruleIndex": 158,
          "level": "error",
          "message": {
            "text": "[CVE-2023-44487] sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-47108_go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc_0.35.0",
          "ruleIndex": 159,
          "level": "error",
          "message": {
            "text": "[CVE-2023-47108] sha256__58df8290592143d99a2e16b12a9a04501e511b0020e4c7bd5a0bef516fea6032.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45283_github.com/golang/go_1.12.9",
          "ruleIndex": 160,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45283] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24534_github.com/golang/go_1.19.7",
          "ruleIndex": 161,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24534] sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29403_github.com/golang/go_1.12.9",
          "ruleIndex": 162,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29403] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24557_github.com/docker/docker_20.10.27+incompatible",
          "ruleIndex": 163,
          "level": "error",
          "message": {
            "text": "[CVE-2024-24557] sha256__190862799647a743f9e38781a7a4d6add1f39d71417aadfb324107266efb7aa2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-44487_golang.org/x/net_0.9.0",
          "ruleIndex": 164,
          "level": "error",
          "message": {
            "text": "[CVE-2023-44487] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30580_github.com/golang/go_1.12.9",
          "ruleIndex": 165,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30580] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-33196_github.com/golang/go_1.12.9",
          "ruleIndex": 166,
          "level": "error",
          "message": {
            "text": "[CVE-2021-33196] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30580_github.com/golang/go_1.17.5",
          "ruleIndex": 167,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30580] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30634_github.com/golang/go_1.17.5",
          "ruleIndex": 168,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30634] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24675_github.com/golang/go_1.17.5",
          "ruleIndex": 169,
          "level": "error",
          "message": {
            "text": "[CVE-2022-24675] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3893_github.com/kubernetes-csi/csi-proxy_1.1.3-0-g0211fea",
          "ruleIndex": 170,
          "level": "error",
          "message": {
            "text": "[CVE-2023-3893] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32189_github.com/golang/go_1.12.9",
          "ruleIndex": 171,
          "level": "error",
          "message": {
            "text": "[CVE-2022-32189] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5528_k8s.io/kubernetes_1.24.16",
          "ruleIndex": 172,
          "level": "error",
          "message": {
            "text": "[CVE-2023-5528] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-33198_github.com/golang/go_1.12.9",
          "ruleIndex": 173,
          "level": "error",
          "message": {
            "text": "[CVE-2021-33198] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24539_github.com/golang/go_1.17.5",
          "ruleIndex": 174,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24539] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-44487_google.golang.org/grpc_1.40.0",
          "ruleIndex": 175,
          "level": "error",
          "message": {
            "text": "[CVE-2023-44487] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45142_go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp_0.35.1",
          "ruleIndex": 176,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45142] sha256__58df8290592143d99a2e16b12a9a04501e511b0020e4c7bd5a0bef516fea6032.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29400_github.com/golang/go_1.19.7",
          "ruleIndex": 177,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29400] sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2014-8179_github.com/moby/moby_1.4.2-0.20170731201646-1009e6a40b29",
          "ruleIndex": 178,
          "level": "error",
          "message": {
            "text": "[CVE-2014-8179] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45285_github.com/golang/go_1.21.3",
          "ruleIndex": 179,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45285] sha256__aa360f6fc46f93e2723fe069922ed7d573dc39a443488ada6ddc7d10edf37d95.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45283_github.com/golang/go_1.19.7",
          "ruleIndex": 180,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45283] sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45285_github.com/golang/go_1.20.7",
          "ruleIndex": 181,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45285] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3955_k8s.io/kubernetes_1.24.16",
          "ruleIndex": 182,
          "level": "error",
          "message": {
            "text": "[CVE-2023-3955] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45285_github.com/golang/go_1.12.9",
          "ruleIndex": 183,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45285] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5408_k8s.io/kubernetes_1.27.10",
          "ruleIndex": 184,
          "level": "error",
          "message": {
            "text": "[CVE-2023-5408] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-4741_openssl-1_1_0:1.1.1l-150500.17.28.2",
          "ruleIndex": 185,
          "level": "error",
          "message": {
            "text": "[CVE-2024-4741] sha256__3fa1d37901e783448b69dbdc013879ae88fe64472f6f452c7391b4198c4c9f5a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5408_k8s.io/kubernetes_1.24.16",
          "ruleIndex": 186,
          "level": "error",
          "message": {
            "text": "[CVE-2023-5408] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24577_git-core_0:2.35.3-150300.10.39.1",
          "ruleIndex": 187,
          "level": "error",
          "message": {
            "text": "[CVE-2024-24577] sha256__3fa1d37901e783448b69dbdc013879ae88fe64472f6f452c7391b4198c4c9f5a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-4741_libopenssl1_1_0:1.1.1l-150500.17.28.2",
          "ruleIndex": 188,
          "level": "error",
          "message": {
            "text": "[CVE-2024-4741] sha256__3fa1d37901e783448b69dbdc013879ae88fe64472f6f452c7391b4198c4c9f5a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-26484_kubevirt.io/kubevirt_0.54.0",
          "ruleIndex": 189,
          "level": "error",
          "message": {
            "text": "[CVE-2023-26484] sha256__0cd215bda863ad4c73080e4b3dac0224982c891026ed83c26f1146ca938e7b42.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24532_github.com/golang/go_1.20",
          "ruleIndex": 190,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-24532] sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_github.com/golang/go_1.21.3",
          "ruleIndex": 191,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__aa360f6fc46f93e2723fe069922ed7d573dc39a443488ada6ddc7d10edf37d95.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39318_github.com/golang/go_1.20.5",
          "ruleIndex": 192,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39318] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-27534_github.com/moby/moby_1.4.2-0.20170731201646-1009e6a40b29",
          "ruleIndex": 193,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-27534] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24769_github.com/moby/moby_1.4.2-0.20170731201646-1009e6a40b29",
          "ruleIndex": 194,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-24769] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24532_github.com/golang/go_1.17.5",
          "ruleIndex": 195,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-24532] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-36109_github.com/moby/moby_1.4.2-0.20170731201646-1009e6a40b29",
          "ruleIndex": 196,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-36109] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_github.com/golang/go_1.19.7",
          "ruleIndex": 197,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29409_github.com/golang/go_1.18.10",
          "ruleIndex": 198,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29409] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29406_github.com/golang/go_1.17.5",
          "ruleIndex": 199,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29406] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-29018_github.com/docker/docker_20.10.24+incompatible",
          "ruleIndex": 200,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-29018] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_golang.org/x/net_0.11.0",
          "ruleIndex": 201,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-14039_github.com/golang/go_1.12.9",
          "ruleIndex": 202,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-14039] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39326_github.com/golang/go_1.17.5",
          "ruleIndex": 203,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39326] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24532_github.com/golang/go_1.18.10",
          "ruleIndex": 204,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-24532] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39326_github.com/golang/go_1.20.7",
          "ruleIndex": 205,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39326] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24769_github.com/docker/docker_20.10.9+incompatible",
          "ruleIndex": 206,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-24769] sha256__0cd215bda863ad4c73080e4b3dac0224982c891026ed83c26f1146ca938e7b42.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-21285_github.com/moby/moby_1.4.2-0.20170731201646-1009e6a40b29",
          "ruleIndex": 207,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-21285] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-48795_golang.org/x/crypto_0.14.0",
          "ruleIndex": 208,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-48795] sha256__aa360f6fc46f93e2723fe069922ed7d573dc39a443488ada6ddc7d10edf37d95.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-48795_golang.org/x/crypto_0.14.0",
          "ruleIndex": 208,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-48795] sha256__0cd215bda863ad4c73080e4b3dac0224982c891026ed83c26f1146ca938e7b42.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-33197_github.com/golang/go_1.12.9",
          "ruleIndex": 209,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-33197] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_github.com/golang/go_1.21.7",
          "ruleIndex": 210,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_github.com/golang/go_1.21.7",
          "ruleIndex": 210,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_github.com/golang/go_1.20.13",
          "ruleIndex": 211,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__aa360f6fc46f93e2723fe069922ed7d573dc39a443488ada6ddc7d10edf37d95.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_github.com/golang/go_1.20.13",
          "ruleIndex": 211,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-29018_github.com/docker/docker_20.10.9+incompatible",
          "ruleIndex": 212,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-29018] sha256__0cd215bda863ad4c73080e4b3dac0224982c891026ed83c26f1146ca938e7b42.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-21284_github.com/moby/moby_1.4.2-0.20170731201646-1009e6a40b29",
          "ruleIndex": 213,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-21284] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39319_github.com/golang/go_1.12.9",
          "ruleIndex": 214,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39319] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39319_github.com/golang/go_1.19.7",
          "ruleIndex": 215,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39319] sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24786_google.golang.org/protobuf_1.28.0",
          "ruleIndex": 216,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-24786] sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3978_golang.org/x/net_0.4.0",
          "ruleIndex": 217,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3978] sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29406_github.com/golang/go_1.18.10",
          "ruleIndex": 218,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29406] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29406_github.com/golang/go_1.20",
          "ruleIndex": 219,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29406] sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39318_github.com/golang/go_1.20",
          "ruleIndex": 220,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39318] sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_github.com/golang/go_1.17.5",
          "ruleIndex": 221,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-48795_golang.org/x/crypto_0.0.0-20221010152910-d6f0a8c073c2",
          "ruleIndex": 222,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-48795] sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1962_github.com/golang/go_1.17.5",
          "ruleIndex": 223,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-1962] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-29511_github.com/golang/go_1.12.9",
          "ruleIndex": 224,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-29511] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32148_github.com/golang/go_1.17.5",
          "ruleIndex": 225,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-32148] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_github.com/golang/go_1.12.9",
          "ruleIndex": 226,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39319_github.com/golang/go_1.20",
          "ruleIndex": 227,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39319] sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29409_github.com/golang/go_1.20",
          "ruleIndex": 228,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29409] sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-29510_github.com/golang/go_1.12.9",
          "ruleIndex": 229,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-29510] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_golang.org/x/net_0.12.0",
          "ruleIndex": 230,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24532_github.com/golang/go_1.12.9",
          "ruleIndex": 231,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-24532] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-28841_github.com/docker/docker_20.10.9+incompatible",
          "ruleIndex": 232,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-28841] sha256__0cd215bda863ad4c73080e4b3dac0224982c891026ed83c26f1146ca938e7b42.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_github.com/golang/go_1.20.5",
          "ruleIndex": 233,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29409_github.com/golang/go_1.20.5",
          "ruleIndex": 234,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29409] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_github.com/golang/go_1.20.12",
          "ruleIndex": 235,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__0cd215bda863ad4c73080e4b3dac0224982c891026ed83c26f1146ca938e7b42.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29409_github.com/golang/go_1.12.9",
          "ruleIndex": 236,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29409] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39318_github.com/golang/go_1.20.7",
          "ruleIndex": 237,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39318] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-34558_github.com/golang/go_1.12.9",
          "ruleIndex": 238,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-34558] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39319_github.com/golang/go_1.18.10",
          "ruleIndex": 239,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39319] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-15586_github.com/golang/go_1.12.9",
          "ruleIndex": 240,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-15586] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29409_github.com/golang/go_1.17.5",
          "ruleIndex": 241,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29409] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39326_github.com/golang/go_1.20",
          "ruleIndex": 242,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39326] sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3114_github.com/golang/go_1.12.9",
          "ruleIndex": 243,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-3114] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45284_github.com/golang/go_1.21.3",
          "ruleIndex": 244,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45284] sha256__aa360f6fc46f93e2723fe069922ed7d573dc39a443488ada6ddc7d10edf37d95.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3978_golang.org/x/net_0.9.0",
          "ruleIndex": 245,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3978] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39318_github.com/golang/go_1.18.10",
          "ruleIndex": 246,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39318] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-29018_github.com/docker/docker_20.10.27+incompatible",
          "ruleIndex": 247,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-29018] sha256__190862799647a743f9e38781a7a4d6add1f39d71417aadfb324107266efb7aa2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_github.com/golang/go_1.20.7",
          "ruleIndex": 248,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-41091_github.com/moby/moby_1.4.2-0.20170731201646-1009e6a40b29",
          "ruleIndex": 249,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-41091] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_golang.org/x/net_0.19.0",
          "ruleIndex": 250,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_golang.org/x/net_0.19.0",
          "ruleIndex": 250,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-48795_golang.org/x/crypto_0.16.0",
          "ruleIndex": 251,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-48795] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_golang.org/x/net_0.17.0",
          "ruleIndex": 252,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_golang.org/x/net_0.17.0",
          "ruleIndex": 252,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__58df8290592143d99a2e16b12a9a04501e511b0020e4c7bd5a0bef516fea6032.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_golang.org/x/net_0.17.0",
          "ruleIndex": 252,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__aa360f6fc46f93e2723fe069922ed7d573dc39a443488ada6ddc7d10edf37d95.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_golang.org/x/net_0.17.0",
          "ruleIndex": 252,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__0cd215bda863ad4c73080e4b3dac0224982c891026ed83c26f1146ca938e7b42.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45284_github.com/golang/go_1.20.7",
          "ruleIndex": 253,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45284] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24786_google.golang.org/protobuf_1.28.1",
          "ruleIndex": 254,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-24786] sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24786_google.golang.org/protobuf_1.28.1",
          "ruleIndex": 254,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-24786] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3978_golang.org/x/net_0.12.0",
          "ruleIndex": 255,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3978] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29409_github.com/golang/go_1.19.7",
          "ruleIndex": 256,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29409] sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-27304_github.com/jackc/pgx/v5_5.4.2",
          "ruleIndex": 257,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-27304] sha256__58df8290592143d99a2e16b12a9a04501e511b0020e4c7bd5a0bef516fea6032.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1705_github.com/golang/go_1.12.9",
          "ruleIndex": 258,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-1705] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_github.com/golang/go_1.20",
          "ruleIndex": 259,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39326_github.com/golang/go_1.18.10",
          "ruleIndex": 260,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39326] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_github.com/golang/go_1.21.8",
          "ruleIndex": 261,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__58df8290592143d99a2e16b12a9a04501e511b0020e4c7bd5a0bef516fea6032.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_github.com/golang/go_1.18.10",
          "ruleIndex": 262,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24786_google.golang.org/protobuf_1.27.1",
          "ruleIndex": 263,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-24786] sha256__58df8290592143d99a2e16b12a9a04501e511b0020e4c7bd5a0bef516fea6032.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-28842_github.com/docker/docker_20.10.9+incompatible",
          "ruleIndex": 264,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-28842] sha256__0cd215bda863ad4c73080e4b3dac0224982c891026ed83c26f1146ca938e7b42.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39319_github.com/golang/go_1.17.5",
          "ruleIndex": 265,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39319] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-24553_github.com/golang/go_1.12.9",
          "ruleIndex": 266,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-24553] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1705_github.com/golang/go_1.17.5",
          "ruleIndex": 267,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-1705] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29406_github.com/golang/go_1.12.9",
          "ruleIndex": 268,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29406] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24786_google.golang.org/protobuf_1.31.0",
          "ruleIndex": 269,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-24786] sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24786_google.golang.org/protobuf_1.31.0",
          "ruleIndex": 269,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-24786] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24786_google.golang.org/protobuf_1.31.0",
          "ruleIndex": 269,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-24786] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24786_google.golang.org/protobuf_1.31.0",
          "ruleIndex": 269,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-24786] sha256__58df8290592143d99a2e16b12a9a04501e511b0020e4c7bd5a0bef516fea6032.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24786_google.golang.org/protobuf_1.31.0",
          "ruleIndex": 269,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-24786] sha256__aa360f6fc46f93e2723fe069922ed7d573dc39a443488ada6ddc7d10edf37d95.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24786_google.golang.org/protobuf_1.31.0",
          "ruleIndex": 269,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-24786] sha256__0cd215bda863ad4c73080e4b3dac0224982c891026ed83c26f1146ca938e7b42.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39326_github.com/golang/go_1.19.7",
          "ruleIndex": 270,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39326] sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-44717_github.com/golang/go_1.12.9",
          "ruleIndex": 271,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-44717] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-35255_github.com/Azure/azure-sdk-for-go/sdk/azidentity_1.5.2",
          "ruleIndex": 272,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-35255] sha256__190862799647a743f9e38781a7a4d6add1f39d71417aadfb324107266efb7aa2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1798_kubevirt.io/kubevirt_0.54.0",
          "ruleIndex": 273,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-1798] sha256__0cd215bda863ad4c73080e4b3dac0224982c891026ed83c26f1146ca938e7b42.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-36221_github.com/golang/go_1.12.9",
          "ruleIndex": 274,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-36221] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3978_golang.org/x/net_0.8.0",
          "ruleIndex": 275,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3978] sha256__58df8290592143d99a2e16b12a9a04501e511b0020e4c7bd5a0bef516fea6032.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39318_github.com/golang/go_1.17.5",
          "ruleIndex": 276,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39318] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39318_github.com/golang/go_1.12.9",
          "ruleIndex": 277,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39318] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-48795_golang.org/x/crypto_0.10.0",
          "ruleIndex": 278,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-48795] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29406_github.com/golang/go_1.20.5",
          "ruleIndex": 279,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29406] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29406_github.com/golang/go_1.19.7",
          "ruleIndex": 280,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29406] sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45284_github.com/golang/go_1.12.9",
          "ruleIndex": 281,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45284] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45284_github.com/golang/go_1.18.10",
          "ruleIndex": 282,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45284] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32148_github.com/golang/go_1.12.9",
          "ruleIndex": 283,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-32148] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_golang.org/x/net_0.9.0",
          "ruleIndex": 284,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39326_github.com/golang/go_1.21.3",
          "ruleIndex": 285,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39326] sha256__aa360f6fc46f93e2723fe069922ed7d573dc39a443488ada6ddc7d10edf37d95.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-29018_github.com/docker/docker_20.10.25+incompatible",
          "ruleIndex": 286,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-29018] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-39253_github.com/moby/moby_1.4.2-0.20170731201646-1009e6a40b29",
          "ruleIndex": 287,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-39253] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45284_github.com/golang/go_1.19.7",
          "ruleIndex": 288,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45284] sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39318_github.com/golang/go_1.19.7",
          "ruleIndex": 289,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39318] sha256__ce54711d5f5714a32d191c9e557ebe10c1492f3ff3c53c41068dc2c0ae2d5706.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39319_github.com/golang/go_1.20.7",
          "ruleIndex": 290,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39319] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2014-8178_github.com/moby/moby_1.4.2-0.20170731201646-1009e6a40b29",
          "ruleIndex": 291,
          "level": "warning",
          "message": {
            "text": "[CVE-2014-8178] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24786_google.golang.org/protobuf_1.32.0",
          "ruleIndex": 292,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-24786] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39326_github.com/golang/go_1.20.5",
          "ruleIndex": 293,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39326] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1962_github.com/golang/go_1.12.9",
          "ruleIndex": 294,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-1962] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3978_golang.org/x/net_0.11.0",
          "ruleIndex": 295,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3978] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45284_github.com/golang/go_1.17.5",
          "ruleIndex": 296,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45284] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39326_github.com/golang/go_1.12.9",
          "ruleIndex": 297,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39326] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45284_github.com/golang/go_1.20",
          "ruleIndex": 298,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45284] sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_golang.org/x/net_0.8.0",
          "ruleIndex": 299,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__58df8290592143d99a2e16b12a9a04501e511b0020e4c7bd5a0bef516fea6032.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39319_github.com/golang/go_1.20.5",
          "ruleIndex": 300,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39319] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_golang.org/x/net_0.4.0",
          "ruleIndex": 301,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__57e686622acedec0b70de708952c6a8bd97c0427aa5334b8923778ae5359f7e1.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45284_github.com/golang/go_1.20.5",
          "ruleIndex": 302,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45284] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-28180_gopkg.in/square/go-jose.v2_2.6.0",
          "ruleIndex": 303,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-28180] sha256__58df8290592143d99a2e16b12a9a04501e511b0020e4c7bd5a0bef516fea6032.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2013-4235_login_defs_0:4.8.1-150400.10.15.1",
          "ruleIndex": 304,
          "level": "warning",
          "message": {
            "text": "[CVE-2013-4235] sha256__3fa1d37901e783448b69dbdc013879ae88fe64472f6f452c7391b4198c4c9f5a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-33394_kubevirt.io/kubevirt_0.54.0",
          "ruleIndex": 305,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-33394] sha256__0cd215bda863ad4c73080e4b3dac0224982c891026ed83c26f1146ca938e7b42.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-40453_github.com/docker/machine_0.16.2",
          "ruleIndex": 306,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-40453] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-31420_kubevirt.io/kubevirt_0.54.0",
          "ruleIndex": 307,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-31420] sha256__0cd215bda863ad4c73080e4b3dac0224982c891026ed83c26f1146ca938e7b42.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-52426_libexpat1_0:2.4.4-150400.3.17.1",
          "ruleIndex": 308,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-52426] sha256__3fa1d37901e783448b69dbdc013879ae88fe64472f6f452c7391b4198c4c9f5a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2013-4235_shadow_0:4.8.1-150400.10.15.1",
          "ruleIndex": 309,
          "level": "warning",
          "message": {
            "text": "[CVE-2013-4235] sha256__3fa1d37901e783448b69dbdc013879ae88fe64472f6f452c7391b4198c4c9f5a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30629_github.com/golang/go_1.17.5",
          "ruleIndex": 310,
          "level": "note",
          "message": {
            "text": "[CVE-2022-30629] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2015-3631_github.com/moby/moby_1.4.2-0.20170731201646-1009e6a40b29",
          "ruleIndex": 311,
          "level": "note",
          "message": {
            "text": "[CVE-2015-3631] sha256__7a98d6697336a9f579afa6e48ba3870adb1ab5c30cf7499a8e0fce7e34158868.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-3177_k8s.io/kubernetes_1.24.16",
          "ruleIndex": 312,
          "level": "note",
          "message": {
            "text": "[CVE-2024-3177] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-3177_k8s.io/kubernetes_1.27.10",
          "ruleIndex": 313,
          "level": "note",
          "message": {
            "text": "[CVE-2024-3177] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-25743_k8s.io/kubernetes_1.24.16",
          "ruleIndex": 314,
          "level": "note",
          "message": {
            "text": "[CVE-2021-25743] sha256__10a5b1f704141111af94456fcd389f070b7b1de5cfa5b2a044f28f1ba40b10a5.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30629_github.com/golang/go_1.12.9",
          "ruleIndex": 315,
          "level": "note",
          "message": {
            "text": "[CVE-2022-30629] sha256__a38c816f841576be1b91c2174ff4f08b3c49febf8eed7ed7c90354c68048d312.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-3177_k8s.io/kubernetes_1.29.3",
          "ruleIndex": 316,
          "level": "note",
          "message": {
            "text": "[CVE-2024-3177] sha256__190862799647a743f9e38781a7a4d6add1f39d71417aadfb324107266efb7aa2.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        }
      ]
    }
  ]
}
