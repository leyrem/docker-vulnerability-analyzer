{
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "informationUri": "https://docs.jfrog-applications.jfrog.io/jfrog-security-features/sca",
          "name": "JFrog Xray SCA",
          "rules": [
            {
              "id": "CVE-2018-1000517_3.8:busybox_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2018-1000517] 3.8:busybox 1.28.4-r1"
              },
              "help": {
                "text": "BusyBox project BusyBox wget version prior to commit 8e2174e9bd836e53c8b9c6e00d1bc6e2a718686e contains a Buffer Overflow vulnerability in Busybox wget that can result in heap buffer overflow. This attack appear to be exploitable via network connectivity. This vulnerability appears to have been fixed in after commit 8e2174e9bd836e53c8b9c6e00d1bc6e2a718686e.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Applicable       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2018-1000517_3.8:ssl_client_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2018-1000517] 3.8:ssl_client 1.28.4-r1"
              },
              "help": {
                "text": "BusyBox project BusyBox wget version prior to commit 8e2174e9bd836e53c8b9c6e00d1bc6e2a718686e contains a Buffer Overflow vulnerability in Busybox wget that can result in heap buffer overflow. This attack appear to be exploitable via network connectivity. This vulnerability appears to have been fixed in after commit 8e2174e9bd836e53c8b9c6e00d1bc6e2a718686e.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Applicable       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2020-36328_3.8:libwebp_1.0.0-r0",
              "shortDescription": {
                "text": "[CVE-2020-36328] 3.8:libwebp 1.0.0-r0"
              },
              "help": {
                "text": "A flaw was found in libwebp in versions before 1.0.1. A heap-based buffer overflow in function WebPDecodeRGBInto is possible due to an invalid check for buffer size. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-35784_3.8:libressl2.7-libssl_2.7.4-r0",
              "shortDescription": {
                "text": "[CVE-2023-35784] 3.8:libressl2.7-libssl 2.7.4-r0"
              },
              "help": {
                "text": "A double free or use after free could occur after SSL_clear in OpenBSD 7.2 before errata 026 and 7.3 before errata 004, and in LibreSSL before 3.6.3 and 3.7.x before 3.7.3. NOTE: OpenSSL is not affected.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2019-14697_3.8:musl_1.1.19-r10",
              "shortDescription": {
                "text": "[CVE-2019-14697] 3.8:musl 1.1.19-r10"
              },
              "help": {
                "text": "musl libc through 1.1.23 has an x87 floating-point stack adjustment imbalance, related to the math/i386/ directory. In some cases, use of this library could introduce out-of-bounds writes that are not present in an application's source code.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.1.19-r11]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2021-36159_3.8:apk-tools_2.10.1-r0",
              "shortDescription": {
                "text": "[CVE-2021-36159] 3.8:apk-tools 2.10.1-r0"
              },
              "help": {
                "text": "libfetch before 2021-07-26, as used in apk-tools, xbps, and other products, mishandles numeric strings for the FTP and HTTP protocols. The FTP passive mode implementation allows an out-of-bounds read because strtol is used to parse the relevant numbers into address bytes. It does not check if the line ends prematurely. If it does, the for-loop condition checks for the '\\0' terminator one byte too late.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.1      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [2.12.6-r0]   |"
              },
              "properties": {
                "security-severity": "9.1"
              }
            },
            {
              "id": "CVE-2020-36330_3.8:libwebp_1.0.0-r0",
              "shortDescription": {
                "text": "[CVE-2020-36330] 3.8:libwebp 1.0.0-r0"
              },
              "help": {
                "text": "A flaw was found in libwebp in versions before 1.0.1. An out-of-bounds read was found in function ChunkVerifyAndAssign. The highest threat from this vulnerability is to data confidentiality and to the service availability.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.1      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.1"
              }
            },
            {
              "id": "CVE-2019-11068_3.8:libxslt_1.1.32-r0",
              "shortDescription": {
                "text": "[CVE-2019-11068] 3.8:libxslt 1.1.32-r0"
              },
              "help": {
                "text": "libxslt through 1.1.33 allows bypass of a protection mechanism because callers of xsltCheckRead and xsltCheckWrite permit access even upon receiving a -1 error code. xsltCheckRead can return -1 for a crafted URL that is not actually invalid and is subsequently loaded.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.1.33-r1]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2018-18751_3.8:libintl_0.19.8.1-r2",
              "shortDescription": {
                "text": "[CVE-2018-18751] 3.8:libintl 0.19.8.1-r2"
              },
              "help": {
                "text": "An issue was discovered in GNU gettext 0.19.8. There is a double free in default_add_message in read-catalog.c, related to an invalid free in po_gram_parse in po-gram-gen.y, as demonstrated by lt-msgfmt.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [0.20.1-r0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-48174_3.8:ssl_client_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2022-48174] 3.8:ssl_client 1.28.4-r1"
              },
              "help": {
                "text": "There is a stack overflow vulnerability in ash.c:6030 in busybox before 1.35. In the environment of Internet of Vehicles, this vulnerability can be executed from command to arbitrary code execution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.36.1-r2]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2021-46880_3.8:libressl2.7-libssl_2.7.4-r0",
              "shortDescription": {
                "text": "[CVE-2021-46880] 3.8:libressl2.7-libssl 2.7.4-r0"
              },
              "help": {
                "text": "x509/x509_verify.c in LibreSSL before 3.4.2, and OpenBSD before 7.0 errata 006, allows authentication bypass because an error for an unverified certificate chain is sometimes discarded.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-48174_3.8:busybox_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2022-48174] 3.8:busybox 1.28.4-r1"
              },
              "help": {
                "text": "There is a stack overflow vulnerability in ash.c:6030 in busybox before 1.35. In the environment of Internet of Vehicles, this vulnerability can be executed from command to arbitrary code execution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.36.1-r2]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2019-6978_3.8:libgd_2.2.5-r1",
              "shortDescription": {
                "text": "[CVE-2019-6978] 3.8:libgd 2.2.5-r1"
              },
              "help": {
                "text": "The GD Graphics Library (aka LibGD) 2.2.5 has a double free in the gdImage*Ptr() functions in gd_gif_out.c, gd_jpeg.c, and gd_wbmp.c. NOTE: PHP is unaffected.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.2.5-r2]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2018-25012_3.8:libwebp_1.0.0-r0",
              "shortDescription": {
                "text": "[CVE-2018-25012] 3.8:libwebp 1.0.0-r0"
              },
              "help": {
                "text": "A heap-based buffer overflow was found in libwebp in versions before 1.0.1 in GetLE24().",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.1      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.1"
              }
            },
            {
              "id": "CVE-2023-35784_3.8:libressl2.7-libcrypto_2.7.4-r0",
              "shortDescription": {
                "text": "[CVE-2023-35784] 3.8:libressl2.7-libcrypto 2.7.4-r0"
              },
              "help": {
                "text": "A double free or use after free could occur after SSL_clear in OpenBSD 7.2 before errata 026 and 7.3 before errata 004, and in LibreSSL before 3.6.3 and 3.7.x before 3.7.3. NOTE: OpenSSL is not affected.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-35784_3.8:libressl2.7-libtls_2.7.4-r0",
              "shortDescription": {
                "text": "[CVE-2023-35784] 3.8:libressl2.7-libtls 2.7.4-r0"
              },
              "help": {
                "text": "A double free or use after free could occur after SSL_clear in OpenBSD 7.2 before errata 026 and 7.3 before errata 004, and in LibreSSL before 3.6.3 and 3.7.x before 3.7.3. NOTE: OpenSSL is not affected.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2021-46880_3.8:libressl2.7-libtls_2.7.4-r0",
              "shortDescription": {
                "text": "[CVE-2021-46880] 3.8:libressl2.7-libtls 2.7.4-r0"
              },
              "help": {
                "text": "x509/x509_verify.c in LibreSSL before 3.4.2, and OpenBSD before 7.0 errata 006, allows authentication bypass because an error for an unverified certificate chain is sometimes discarded.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2018-25013_3.8:libwebp_1.0.0-r0",
              "shortDescription": {
                "text": "[CVE-2018-25013] 3.8:libwebp 1.0.0-r0"
              },
              "help": {
                "text": "A heap-based buffer overflow was found in libwebp in versions before 1.0.1 in ShiftBytes().",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.1      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.1"
              }
            },
            {
              "id": "CVE-2019-14697_3.8:musl-utils_1.1.19-r10",
              "shortDescription": {
                "text": "[CVE-2019-14697] 3.8:musl-utils 1.1.19-r10"
              },
              "help": {
                "text": "musl libc through 1.1.23 has an x87 floating-point stack adjustment imbalance, related to the math/i386/ directory. In some cases, use of this library could introduce out-of-bounds writes that are not present in an application's source code.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.1.19-r11]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2021-46880_3.8:libressl2.7-libcrypto_2.7.4-r0",
              "shortDescription": {
                "text": "[CVE-2021-46880] 3.8:libressl2.7-libcrypto 2.7.4-r0"
              },
              "help": {
                "text": "x509/x509_verify.c in LibreSSL before 3.4.2, and OpenBSD before 7.0 errata 006, allows authentication bypass because an error for an unverified certificate chain is sometimes discarded.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-3786_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2022-3786] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "A buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed a malicious certificate or for an application to continue certificate verification despite failure to construct a path to a trusted issuer. An attacker can craft a malicious email address in a certificate to overflow an arbitrary number of bytes containing the `.' character (decimal 46) on the stack. This buffer overflow could result in a crash (causing a denial of service). In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.0.7-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-3602_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2022-3602] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "A buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed the malicious certificate or for the application to continue certificate verification despite failure to construct a path to a trusted issuer. An attacker can craft a malicious email address to overflow four attacker-controlled bytes on the stack. This buffer overflow could result in a crash (causing a denial of service) or potentially remote code execution. Many platforms implement stack overflow protections which would mitigate against the risk of remote code execution. The risk may be further mitigated based on stack layout for any given platform/compiler. Pre-announcements of CVE-2022-3602 described this issue as CRITICAL. Further analysis based on some of the mitigating factors described above have led this to be downgraded to HIGH. Users are still encouraged to upgrade to a new version as soon as possible. In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects. Fixed in OpenSSL 3.0.7 (Affected 3.0.0,3.0.1,3.0.2,3.0.3,3.0.4,3.0.5,3.0.6).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.0.7-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-4450_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2022-4450] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "The function PEM_read_bio_ex() reads a PEM file from a BIO and parses and\ndecodes the \"name\" (e.g. \"CERTIFICATE\"), any header data and the payload data.\nIf the function succeeds then the \"name_out\", \"header\" and \"data\" arguments are\npopulated with pointers to buffers containing the relevant decoded data. The\ncaller is responsible for freeing those buffers. It is possible to construct a\nPEM file that results in 0 bytes of payload data. In this case PEM_read_bio_ex()\nwill return a failure code but will populate the header argument with a pointer\nto a buffer that has already been freed. If the caller also frees this buffer\nthen a double free will occur. This will most likely lead to a crash. This\ncould be exploited by an attacker who has the ability to supply malicious PEM\nfiles for parsing to achieve a denial of service attack.\n\nThe functions PEM_read_bio() and PEM_read() are simple wrappers around\nPEM_read_bio_ex() and therefore these functions are also directly affected.\n\nThese functions are also called indirectly by a number of other OpenSSL\nfunctions including PEM_X509_INFO_read_bio_ex() and\nSSL_CTX_use_serverinfo_file() which are also vulnerable. Some OpenSSL internal\nuses of these functions are not vulnerable because the caller does not free the\nheader argument if PEM_read_bio_ex() returns a failure code. These locations\ninclude the PEM_read_bio_TYPE() functions as well as the decoders introduced in\nOpenSSL 3.0.\n\nThe OpenSSL asn1parse command line application is also impacted by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-4450_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2022-4450] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "The function PEM_read_bio_ex() reads a PEM file from a BIO and parses and\ndecodes the \"name\" (e.g. \"CERTIFICATE\"), any header data and the payload data.\nIf the function succeeds then the \"name_out\", \"header\" and \"data\" arguments are\npopulated with pointers to buffers containing the relevant decoded data. The\ncaller is responsible for freeing those buffers. It is possible to construct a\nPEM file that results in 0 bytes of payload data. In this case PEM_read_bio_ex()\nwill return a failure code but will populate the header argument with a pointer\nto a buffer that has already been freed. If the caller also frees this buffer\nthen a double free will occur. This will most likely lead to a crash. This\ncould be exploited by an attacker who has the ability to supply malicious PEM\nfiles for parsing to achieve a denial of service attack.\n\nThe functions PEM_read_bio() and PEM_read() are simple wrappers around\nPEM_read_bio_ex() and therefore these functions are also directly affected.\n\nThese functions are also called indirectly by a number of other OpenSSL\nfunctions including PEM_X509_INFO_read_bio_ex() and\nSSL_CTX_use_serverinfo_file() which are also vulnerable. Some OpenSSL internal\nuses of these functions are not vulnerable because the caller does not free the\nheader argument if PEM_read_bio_ex() returns a failure code. These locations\ninclude the PEM_read_bio_TYPE() functions as well as the decoders introduced in\nOpenSSL 3.0.\n\nThe OpenSSL asn1parse command line application is also impacted by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-3786_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2022-3786] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "A buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed a malicious certificate or for an application to continue certificate verification despite failure to construct a path to a trusted issuer. An attacker can craft a malicious email address in a certificate to overflow an arbitrary number of bytes containing the `.' character (decimal 46) on the stack. This buffer overflow could result in a crash (causing a denial of service). In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.0.7-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-3602_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2022-3602] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "A buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed the malicious certificate or for the application to continue certificate verification despite failure to construct a path to a trusted issuer. An attacker can craft a malicious email address to overflow four attacker-controlled bytes on the stack. This buffer overflow could result in a crash (causing a denial of service) or potentially remote code execution. Many platforms implement stack overflow protections which would mitigate against the risk of remote code execution. The risk may be further mitigated based on stack layout for any given platform/compiler. Pre-announcements of CVE-2022-3602 described this issue as CRITICAL. Further analysis based on some of the mitigating factors described above have led this to be downgraded to HIGH. Users are still encouraged to upgrade to a new version as soon as possible. In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects. Fixed in OpenSSL 3.0.7 (Affected 3.0.0,3.0.1,3.0.2,3.0.3,3.0.4,3.0.5,3.0.6).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.0.7-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2018-25032_3.8:zlib_1.2.11-r1",
              "shortDescription": {
                "text": "[CVE-2018-25032] 3.8:zlib 1.2.11-r1"
              },
              "help": {
                "text": "zlib before 1.2.12 allows memory corruption when deflating (i.e., when compressing) if the input has many distant matches.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.2.11-r4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2019-20838_3.8:pcre_8.42-r0",
              "shortDescription": {
                "text": "[CVE-2019-20838] 3.8:pcre 8.42-r0"
              },
              "help": {
                "text": "libpcre in PCRE before 8.43 allows a subject buffer over-read in JIT when UTF is disabled, and \\X or \\R has more than one fixed quantifier, a related issue to CVE-2019-20454.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-42379_3.8:busybox_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2021-42379] 3.8:busybox 1.28.4-r1"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the next_input_file function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2020-1967_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2020-1967] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "Server or client applications that call the SSL_check_chain() function during or after a TLS 1.3 handshake may crash due to a NULL pointer dereference as a result of incorrect handling of the \"signature_algorithms_cert\" TLS extension. The crash occurs if an invalid or unrecognised signature algorithm is received from the peer. This could be exploited by a malicious peer in a Denial of Service attack. OpenSSL version 1.1.1d, 1.1.1e, and 1.1.1f are affected by this issue. This issue did not affect OpenSSL versions prior to 1.1.1d. Fixed in OpenSSL 1.1.1g (Affected 1.1.1d-1.1.1f).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.1.1g-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2019-2201_3.8:libjpeg-turbo_1.5.3-r3",
              "shortDescription": {
                "text": "[CVE-2019-2201] 3.8:libjpeg-turbo 1.5.3-r3"
              },
              "help": {
                "text": "In generate_jsimd_ycc_rgb_convert_neon of jsimd_arm64_neon.S, there is a possible out of bounds write due to a missing bounds check. This could lead to remote code execution in an unprivileged process with no additional execution privileges needed. User interaction is needed for exploitation.Product: AndroidVersions: Android-8.0 Android-8.1 Android-9 Android-10Android ID: A-120551338",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.5.3-r6]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2018-20679_3.8:ssl_client_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2018-20679] 3.8:ssl_client 1.28.4-r1"
              },
              "help": {
                "text": "An issue was discovered in BusyBox before 1.30.0. An out of bounds read in udhcp components (consumed by the DHCP server, client, and relay) allows a remote attacker to leak sensitive information from the stack by sending a crafted DHCP message. This is related to verification in udhcp_get_option() in networking/udhcp/common.c that 4-byte options are indeed 4 bytes.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.29.3-r10]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-30560_3.8:libxslt_1.1.32-r0",
              "shortDescription": {
                "text": "[CVE-2021-30560] 3.8:libxslt 1.1.32-r0"
              },
              "help": {
                "text": "Use after free in Blink XSLT in Google Chrome prior to 91.0.4472.164 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.8      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.1.35-r0]   |"
              },
              "properties": {
                "security-severity": "8.8"
              }
            },
            {
              "id": "CVE-2022-30065_3.8:busybox_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2022-30065] 3.8:busybox 1.28.4-r1"
              },
              "help": {
                "text": "A use-after-free in Busybox 1.35-x's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the copyvar function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.35.0-r17]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2019-20388_3.8:libxml2_2.9.8-r0",
              "shortDescription": {
                "text": "[CVE-2019-20388] 3.8:libxml2 2.9.8-r0"
              },
              "help": {
                "text": "xmlSchemaPreRun in xmlschemas.c in libxml2 2.9.10 allows an xmlSchemaValidateStream memory leak.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.9.10-r4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2019-5747_3.8:busybox_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2019-5747] 3.8:busybox 1.28.4-r1"
              },
              "help": {
                "text": "An issue was discovered in BusyBox through 1.30.0. An out of bounds read in udhcp components (consumed by the DHCP client, server, and/or relay) might allow a remote attacker to leak sensitive information from the stack by sending a crafted DHCP message. This is related to assurance of a 4-byte length when decoding DHCP_SUBNET. NOTE: this issue exists because of an incomplete fix for CVE-2018-20679.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.30.1-r2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2018-14404_3.8:libxml2_2.9.8-r0",
              "shortDescription": {
                "text": "[CVE-2018-14404] 3.8:libxml2 2.9.8-r0"
              },
              "help": {
                "text": "A NULL pointer dereference vulnerability exists in the xpath.c:xmlXPathCompOpEval() function of libxml2 through 2.9.8 when parsing an invalid XPath expression in the XPATH_OP_AND or XPATH_OP_OR case. Applications processing untrusted XSL format inputs with the use of the libxml2 library may be vulnerable to a denial of service attack due to a crash of the application.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.9.8-r1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2019-18197_3.8:libxslt_1.1.32-r0",
              "shortDescription": {
                "text": "[CVE-2019-18197] 3.8:libxslt 1.1.32-r0"
              },
              "help": {
                "text": "In xsltCopyText in transform.c in libxslt 1.1.33, a pointer variable isn't reset under certain circumstances. If the relevant memory area happened to be freed and reused in a certain way, a bounds check could fail and memory outside a buffer could be written to, or uninitialized data could be disclosed.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.1.33-r2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-0778_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2022-0778] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "The BN_mod_sqrt() function, which computes a modular square root, contains a bug that can cause it to loop forever for non-prime moduli. Internally this function is used when parsing certificates that contain elliptic curve public keys in compressed form or explicit elliptic curve parameters with a base point encoded in compressed form. It is possible to trigger the infinite loop by crafting a certificate that has invalid explicit curve parameters. Since certificate parsing happens prior to verification of the certificate signature, any process that parses an externally supplied certificate may thus be subject to a denial of service attack. The infinite loop can also be reached when parsing crafted private keys as they can contain explicit elliptic curve parameters. Thus vulnerable situations include: - TLS clients consuming server certificates - TLS servers consuming client certificates - Hosting providers taking certificates or private keys from customers - Certificate authorities parsing certification requests from subscribers - Anything else which parses ASN.1 elliptic curve parameters Also any other applications that use the BN_mod_sqrt() where the attacker can control the parameter values are vulnerable to this DoS issue. In the OpenSSL 1.0.2 version the public key is not parsed during initial parsing of the certificate which makes it slightly harder to trigger the infinite loop. However any operation which requires the public key from the certificate will trigger the infinite loop. In particular the attacker can use a self-signed certificate to trigger the loop during verification of the certificate signature. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0. It was addressed in the releases of 1.1.1n and 3.0.2 on the 15th March 2022. Fixed in OpenSSL 3.0.2 (Affected 3.0.0,3.0.1). Fixed in OpenSSL 1.1.1n (Affected 1.1.1-1.1.1m). Fixed in OpenSSL 1.0.2zd (Affected 1.0.2-1.0.2zc).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.0.2-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-42379_3.8:ssl_client_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2021-42379] 3.8:ssl_client 1.28.4-r1"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the next_input_file function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-42386_3.8:busybox_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2021-42386] 3.8:busybox 1.28.4-r1"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the nvalloc function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2022-30065_3.8:ssl_client_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2022-30065] 3.8:ssl_client 1.28.4-r1"
              },
              "help": {
                "text": "A use-after-free in Busybox 1.35-x's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the copyvar function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.35.0-r17]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2019-1543_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2019-1543] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "ChaCha20-Poly1305 is an AEAD cipher, and requires a unique nonce input for every encryption operation. RFC 7539 specifies that the nonce value (IV) should be 96 bits (12 bytes). OpenSSL allows a variable nonce length and front pads the nonce with 0 bytes if it is less than 12 bytes. However it also incorrectly allows a nonce to be set of up to 16 bytes. In this case only the last 12 bytes are significant and any additional leading bytes are ignored. It is a requirement of using this cipher that nonce values are unique. Messages encrypted using a reused nonce value are susceptible to serious confidentiality and integrity attacks. If an application changes the default nonce length to be longer than 12 bytes and then makes a change to the leading bytes of the nonce expecting the new value to be a new unique nonce then such an application could inadvertently encrypt messages with a reused nonce. Additionally the ignored bytes in a long nonce are not covered by the integrity guarantee of this cipher. Any application that relies on the integrity of these ignored leading bytes of a long nonce may be further affected. Any OpenSSL internal use of this cipher, including in SSL/TLS, is safe because no such use sets such a long nonce value. However user applications that use this cipher directly and set a non-default nonce length to be longer than 12 bytes may be vulnerable. OpenSSL versions 1.1.1 and 1.1.0 are affected by this issue. Due to the limited scope of affected deployments this has been assessed as low severity and therefore we are not creating new releases at this time. Fixed in OpenSSL 1.1.1c (Affected 1.1.1-1.1.1b). Fixed in OpenSSL 1.1.0k (Affected 1.1.0-1.1.0j).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.4      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.1.1b-r1]   |"
              },
              "properties": {
                "security-severity": "7.4"
              }
            },
            {
              "id": "CVE-2022-0778_3.8:libressl2.7-libssl_2.7.4-r0",
              "shortDescription": {
                "text": "[CVE-2022-0778] 3.8:libressl2.7-libssl 2.7.4-r0"
              },
              "help": {
                "text": "The BN_mod_sqrt() function, which computes a modular square root, contains a bug that can cause it to loop forever for non-prime moduli. Internally this function is used when parsing certificates that contain elliptic curve public keys in compressed form or explicit elliptic curve parameters with a base point encoded in compressed form. It is possible to trigger the infinite loop by crafting a certificate that has invalid explicit curve parameters. Since certificate parsing happens prior to verification of the certificate signature, any process that parses an externally supplied certificate may thus be subject to a denial of service attack. The infinite loop can also be reached when parsing crafted private keys as they can contain explicit elliptic curve parameters. Thus vulnerable situations include: - TLS clients consuming server certificates - TLS servers consuming client certificates - Hosting providers taking certificates or private keys from customers - Certificate authorities parsing certification requests from subscribers - Anything else which parses ASN.1 elliptic curve parameters Also any other applications that use the BN_mod_sqrt() where the attacker can control the parameter values are vulnerable to this DoS issue. In the OpenSSL 1.0.2 version the public key is not parsed during initial parsing of the certificate which makes it slightly harder to trigger the infinite loop. However any operation which requires the public key from the certificate will trigger the infinite loop. In particular the attacker can use a self-signed certificate to trigger the loop during verification of the certificate signature. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0. It was addressed in the releases of 1.1.1n and 3.0.2 on the 15th March 2022. Fixed in OpenSSL 3.0.2 (Affected 3.0.0,3.0.1). Fixed in OpenSSL 1.1.1n (Affected 1.1.1-1.1.1m). Fixed in OpenSSL 1.0.2zd (Affected 1.0.2-1.0.2zc).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [3.4.3-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-42381_3.8:busybox_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2021-42381] 3.8:busybox 1.28.4-r1"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the hash_init function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-42380_3.8:ssl_client_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2021-42380] 3.8:ssl_client 1.28.4-r1"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the clrvar function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2022-0778_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2022-0778] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "The BN_mod_sqrt() function, which computes a modular square root, contains a bug that can cause it to loop forever for non-prime moduli. Internally this function is used when parsing certificates that contain elliptic curve public keys in compressed form or explicit elliptic curve parameters with a base point encoded in compressed form. It is possible to trigger the infinite loop by crafting a certificate that has invalid explicit curve parameters. Since certificate parsing happens prior to verification of the certificate signature, any process that parses an externally supplied certificate may thus be subject to a denial of service attack. The infinite loop can also be reached when parsing crafted private keys as they can contain explicit elliptic curve parameters. Thus vulnerable situations include: - TLS clients consuming server certificates - TLS servers consuming client certificates - Hosting providers taking certificates or private keys from customers - Certificate authorities parsing certification requests from subscribers - Anything else which parses ASN.1 elliptic curve parameters Also any other applications that use the BN_mod_sqrt() where the attacker can control the parameter values are vulnerable to this DoS issue. In the OpenSSL 1.0.2 version the public key is not parsed during initial parsing of the certificate which makes it slightly harder to trigger the infinite loop. However any operation which requires the public key from the certificate will trigger the infinite loop. In particular the attacker can use a self-signed certificate to trigger the loop during verification of the certificate signature. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0. It was addressed in the releases of 1.1.1n and 3.0.2 on the 15th March 2022. Fixed in OpenSSL 3.0.2 (Affected 3.0.0,3.0.1). Fixed in OpenSSL 1.1.1n (Affected 1.1.1-1.1.1m). Fixed in OpenSSL 1.0.2zd (Affected 1.0.2-1.0.2zc).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.0.2-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2018-14550_3.8:libpng_1.6.34-r1",
              "shortDescription": {
                "text": "[CVE-2018-14550] 3.8:libpng 1.6.34-r1"
              },
              "help": {
                "text": "An issue has been found in third-party PNM decoding associated with libpng 1.6.35. It is a stack-based buffer overflow in the function get_token in pnm2png.c in pnm2png.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.8      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.6.37-r0]   |"
              },
              "properties": {
                "security-severity": "8.8"
              }
            },
            {
              "id": "CVE-2021-42383_3.8:busybox_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2021-42383] 3.8:busybox 1.28.4-r1"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the evaluate function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-42382_3.8:ssl_client_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2021-42382] 3.8:ssl_client 1.28.4-r1"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the getvar_s function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-42384_3.8:busybox_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2021-42384] 3.8:busybox 1.28.4-r1"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the handle_special function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-42380_3.8:busybox_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2021-42380] 3.8:busybox 1.28.4-r1"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the clrvar function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-42383_3.8:ssl_client_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2021-42383] 3.8:ssl_client 1.28.4-r1"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the evaluate function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-3450_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2021-3450] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "The X509_V_FLAG_X509_STRICT flag enables additional security checks of the certificates present in a certificate chain. It is not set by default. Starting from OpenSSL version 1.1.1h a check to disallow certificates in the chain that have explicitly encoded elliptic curve parameters was added as an additional strict check. An error in the implementation of this check meant that the result of a previous check to confirm that certificates in the chain are valid CA certificates was overwritten. This effectively bypasses the check that non-CA certificates must not be able to issue other certificates. If a \"purpose\" has been configured then there is a subsequent opportunity for checks that the certificate is a valid CA. All of the named \"purpose\" values implemented in libcrypto perform this check. Therefore, where a purpose is set the certificate chain will still be rejected even when the strict flag has been used. A purpose is set by default in libssl client and server certificate verification routines, but it can be overridden or removed by an application. In order to be affected, an application must explicitly set the X509_V_FLAG_X509_STRICT verification flag and either not set a purpose for the certificate verification or, in the case of TLS client or server applications, override the default purpose. OpenSSL versions 1.1.1h and newer are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1k. OpenSSL 1.0.2 is not impacted by this issue. Fixed in OpenSSL 1.1.1k (Affected 1.1.1h-1.1.1j).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.4      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.1.1k-r0]   |"
              },
              "properties": {
                "security-severity": "7.4"
              }
            },
            {
              "id": "CVE-2017-6363_3.8:libgd_2.2.5-r1",
              "shortDescription": {
                "text": "[CVE-2017-6363] 3.8:libgd 2.2.5-r1"
              },
              "help": {
                "text": "In the GD Graphics Library (aka LibGD) through 2.2.5, there is a heap-based buffer over-read in tiffWriter in gd_tiff.c. NOTE: the vendor says \"In my opinion this issue should not have a CVE, since the GD and GD2 formats are documented to be 'obsolete, and should only be used for development and testing purposes.'",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.3.0-r0]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2021-30139_3.8:apk-tools_2.10.1-r0",
              "shortDescription": {
                "text": "[CVE-2021-30139] 3.8:apk-tools 2.10.1-r0"
              },
              "help": {
                "text": "In Alpine Linux apk-tools before 2.12.5, the tarball parser allows a buffer overflow and crash.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [2.12.5-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-0778_3.8:libressl2.7-libcrypto_2.7.4-r0",
              "shortDescription": {
                "text": "[CVE-2022-0778] 3.8:libressl2.7-libcrypto 2.7.4-r0"
              },
              "help": {
                "text": "The BN_mod_sqrt() function, which computes a modular square root, contains a bug that can cause it to loop forever for non-prime moduli. Internally this function is used when parsing certificates that contain elliptic curve public keys in compressed form or explicit elliptic curve parameters with a base point encoded in compressed form. It is possible to trigger the infinite loop by crafting a certificate that has invalid explicit curve parameters. Since certificate parsing happens prior to verification of the certificate signature, any process that parses an externally supplied certificate may thus be subject to a denial of service attack. The infinite loop can also be reached when parsing crafted private keys as they can contain explicit elliptic curve parameters. Thus vulnerable situations include: - TLS clients consuming server certificates - TLS servers consuming client certificates - Hosting providers taking certificates or private keys from customers - Certificate authorities parsing certification requests from subscribers - Anything else which parses ASN.1 elliptic curve parameters Also any other applications that use the BN_mod_sqrt() where the attacker can control the parameter values are vulnerable to this DoS issue. In the OpenSSL 1.0.2 version the public key is not parsed during initial parsing of the certificate which makes it slightly harder to trigger the infinite loop. However any operation which requires the public key from the certificate will trigger the infinite loop. In particular the attacker can use a self-signed certificate to trigger the loop during verification of the certificate signature. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0. It was addressed in the releases of 1.1.1n and 3.0.2 on the 15th March 2022. Fixed in OpenSSL 3.0.2 (Affected 3.0.0,3.0.1). Fixed in OpenSSL 1.1.1n (Affected 1.1.1-1.1.1m). Fixed in OpenSSL 1.0.2zd (Affected 1.0.2-1.0.2zc).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [3.4.3-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2018-14553_3.8:libgd_2.2.5-r1",
              "shortDescription": {
                "text": "[CVE-2018-14553] 3.8:libgd 2.2.5-r1"
              },
              "help": {
                "text": "gdImageClone in gd.c in libgd 2.1.0-rc2 through 2.2.5 has a NULL pointer dereference allowing attackers to crash an application via a specific function call sequence. Only affects PHP when linked with an external libgd (not bundled).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.2.5-r3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-3450_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2021-3450] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "The X509_V_FLAG_X509_STRICT flag enables additional security checks of the certificates present in a certificate chain. It is not set by default. Starting from OpenSSL version 1.1.1h a check to disallow certificates in the chain that have explicitly encoded elliptic curve parameters was added as an additional strict check. An error in the implementation of this check meant that the result of a previous check to confirm that certificates in the chain are valid CA certificates was overwritten. This effectively bypasses the check that non-CA certificates must not be able to issue other certificates. If a \"purpose\" has been configured then there is a subsequent opportunity for checks that the certificate is a valid CA. All of the named \"purpose\" values implemented in libcrypto perform this check. Therefore, where a purpose is set the certificate chain will still be rejected even when the strict flag has been used. A purpose is set by default in libssl client and server certificate verification routines, but it can be overridden or removed by an application. In order to be affected, an application must explicitly set the X509_V_FLAG_X509_STRICT verification flag and either not set a purpose for the certificate verification or, in the case of TLS client or server applications, override the default purpose. OpenSSL versions 1.1.1h and newer are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1k. OpenSSL 1.0.2 is not impacted by this issue. Fixed in OpenSSL 1.1.1k (Affected 1.1.1h-1.1.1j).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.4      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.1.1k-r0]   |"
              },
              "properties": {
                "security-severity": "7.4"
              }
            },
            {
              "id": "CVE-2020-7595_3.8:libxml2_2.9.8-r0",
              "shortDescription": {
                "text": "[CVE-2020-7595] 3.8:libxml2 2.9.8-r0"
              },
              "help": {
                "text": "xmlStringLenDecodeEntities in parser.c in libxml2 2.9.10 has an infinite loop in a certain end-of-file situation.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.9.8-r3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-28831_3.8:ssl_client_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2021-28831] 3.8:ssl_client 1.28.4-r1"
              },
              "help": {
                "text": "decompress_gunzip.c in BusyBox through 1.32.1 mishandles the error bit on the huft_build result pointer, with a resultant invalid free or segmentation fault, via malformed gzip data.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.33.0-r5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2020-1967_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2020-1967] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "Server or client applications that call the SSL_check_chain() function during or after a TLS 1.3 handshake may crash due to a NULL pointer dereference as a result of incorrect handling of the \"signature_algorithms_cert\" TLS extension. The crash occurs if an invalid or unrecognised signature algorithm is received from the peer. This could be exploited by a malicious peer in a Denial of Service attack. OpenSSL version 1.1.1d, 1.1.1e, and 1.1.1f are affected by this issue. This issue did not affect OpenSSL versions prior to 1.1.1d. Fixed in OpenSSL 1.1.1g (Affected 1.1.1d-1.1.1f).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.1.1g-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-28391_3.8:ssl_client_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2022-28391] 3.8:ssl_client 1.28.4-r1"
              },
              "help": {
                "text": "BusyBox through 1.35.0 allows remote attackers to execute arbitrary code if netstat is used to print a DNS PTR record's value to a VT compatible terminal. Alternatively, the attacker could choose to change the terminal's colors.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.8      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.35.0-r7]   |"
              },
              "properties": {
                "security-severity": "8.8"
              }
            },
            {
              "id": "CVE-2021-28831_3.8:busybox_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2021-28831] 3.8:busybox 1.28.4-r1"
              },
              "help": {
                "text": "decompress_gunzip.c in BusyBox through 1.32.1 mishandles the error bit on the huft_build result pointer, with a resultant invalid free or segmentation fault, via malformed gzip data.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.33.0-r5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-3518_3.8:libxml2_2.9.8-r0",
              "shortDescription": {
                "text": "[CVE-2021-3518] 3.8:libxml2 2.9.8-r0"
              },
              "help": {
                "text": "There's a flaw in libxml2 in versions before 2.9.11. An attacker who is able to submit a crafted file to be processed by an application linked with libxml2 could trigger a use-after-free. The greatest impact from this flaw is to confidentiality, integrity, and availability.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.8      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.9.11-r0]   |"
              },
              "properties": {
                "security-severity": "8.8"
              }
            },
            {
              "id": "CVE-2021-42385_3.8:busybox_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2021-42385] 3.8:busybox 1.28.4-r1"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the evaluate function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2018-20679_3.8:busybox_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2018-20679] 3.8:busybox 1.28.4-r1"
              },
              "help": {
                "text": "An issue was discovered in BusyBox before 1.30.0. An out of bounds read in udhcp components (consumed by the DHCP server, client, and relay) allows a remote attacker to leak sensitive information from the stack by sending a crafted DHCP message. This is related to verification in udhcp_get_option() in networking/udhcp/common.c that 4-byte options are indeed 4 bytes.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.29.3-r10]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2019-19956_3.8:libxml2_2.9.8-r0",
              "shortDescription": {
                "text": "[CVE-2019-19956] 3.8:libxml2 2.9.8-r0"
              },
              "help": {
                "text": "xmlParseBalancedChunkMemoryRecover in parser.c in libxml2 before 2.9.10 has a memory leak related to newDoc-\u003eoldNs.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.9.8-r2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2018-20330_3.8:libjpeg-turbo_1.5.3-r3",
              "shortDescription": {
                "text": "[CVE-2018-20330] 3.8:libjpeg-turbo 1.5.3-r3"
              },
              "help": {
                "text": "The tjLoadImage function in libjpeg-turbo 2.0.1 has an integer overflow with a resultant heap-based buffer overflow via a BMP image because multiplication of pitch and height is mishandled, as demonstrated by tjbench.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.8      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.0.2-r0]   |"
              },
              "properties": {
                "security-severity": "8.8"
              }
            },
            {
              "id": "CVE-2021-42382_3.8:busybox_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2021-42382] 3.8:busybox 1.28.4-r1"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the getvar_s function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-42384_3.8:ssl_client_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2021-42384] 3.8:ssl_client 1.28.4-r1"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the handle_special function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-23840_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2021-23840] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "Calls to EVP_CipherUpdate, EVP_EncryptUpdate and EVP_DecryptUpdate may overflow the output length argument in some cases where the input length is close to the maximum permissable length for an integer on the platform. In such cases the return value from the function call will be 1 (indicating success), but the output length value will be negative. This could cause applications to behave incorrectly or crash. OpenSSL versions 1.1.1i and below are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1j. OpenSSL versions 1.0.2x and below are affected by this issue. However OpenSSL 1.0.2 is out of support and no longer receiving public updates. Premium support customers of OpenSSL 1.0.2 should upgrade to 1.0.2y. Other users should upgrade to 1.1.1j. Fixed in OpenSSL 1.1.1j (Affected 1.1.1-1.1.1i). Fixed in OpenSSL 1.0.2y (Affected 1.0.2-1.0.2x).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.1.1j-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2020-13790_3.8:libjpeg-turbo_1.5.3-r3",
              "shortDescription": {
                "text": "[CVE-2020-13790] 3.8:libjpeg-turbo 1.5.3-r3"
              },
              "help": {
                "text": "libjpeg-turbo 2.0.4, and mozjpeg 4.0.0, has a heap-based buffer over-read in get_rgb_row() in rdppm.c via a malformed PPM input file.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.0.4-r2]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2021-42386_3.8:ssl_client_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2021-42386] 3.8:ssl_client 1.28.4-r1"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the nvalloc function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-42381_3.8:ssl_client_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2021-42381] 3.8:ssl_client 1.28.4-r1"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the hash_init function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2019-1543_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2019-1543] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "ChaCha20-Poly1305 is an AEAD cipher, and requires a unique nonce input for every encryption operation. RFC 7539 specifies that the nonce value (IV) should be 96 bits (12 bytes). OpenSSL allows a variable nonce length and front pads the nonce with 0 bytes if it is less than 12 bytes. However it also incorrectly allows a nonce to be set of up to 16 bytes. In this case only the last 12 bytes are significant and any additional leading bytes are ignored. It is a requirement of using this cipher that nonce values are unique. Messages encrypted using a reused nonce value are susceptible to serious confidentiality and integrity attacks. If an application changes the default nonce length to be longer than 12 bytes and then makes a change to the leading bytes of the nonce expecting the new value to be a new unique nonce then such an application could inadvertently encrypt messages with a reused nonce. Additionally the ignored bytes in a long nonce are not covered by the integrity guarantee of this cipher. Any application that relies on the integrity of these ignored leading bytes of a long nonce may be further affected. Any OpenSSL internal use of this cipher, including in SSL/TLS, is safe because no such use sets such a long nonce value. However user applications that use this cipher directly and set a non-default nonce length to be longer than 12 bytes may be vulnerable. OpenSSL versions 1.1.1 and 1.1.0 are affected by this issue. Due to the limited scope of affected deployments this has been assessed as low severity and therefore we are not creating new releases at this time. Fixed in OpenSSL 1.1.1c (Affected 1.1.1-1.1.1b). Fixed in OpenSSL 1.1.0k (Affected 1.1.0-1.1.0j).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.4      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.1.1b-r1]   |"
              },
              "properties": {
                "security-severity": "7.4"
              }
            },
            {
              "id": "CVE-2021-23840_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2021-23840] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "Calls to EVP_CipherUpdate, EVP_EncryptUpdate and EVP_DecryptUpdate may overflow the output length argument in some cases where the input length is close to the maximum permissable length for an integer on the platform. In such cases the return value from the function call will be 1 (indicating success), but the output length value will be negative. This could cause applications to behave incorrectly or crash. OpenSSL versions 1.1.1i and below are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1j. OpenSSL versions 1.0.2x and below are affected by this issue. However OpenSSL 1.0.2 is out of support and no longer receiving public updates. Premium support customers of OpenSSL 1.0.2 should upgrade to 1.0.2y. Other users should upgrade to 1.1.1j. Fixed in OpenSSL 1.1.1j (Affected 1.1.1-1.1.1i). Fixed in OpenSSL 1.0.2y (Affected 1.0.2-1.0.2x).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.1.1j-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-42385_3.8:ssl_client_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2021-42385] 3.8:ssl_client 1.28.4-r1"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the evaluate function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2019-5747_3.8:ssl_client_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2019-5747] 3.8:ssl_client 1.28.4-r1"
              },
              "help": {
                "text": "An issue was discovered in BusyBox through 1.30.0. An out of bounds read in udhcp components (consumed by the DHCP client, server, and/or relay) might allow a remote attacker to leak sensitive information from the stack by sending a crafted DHCP message. This is related to assurance of a 4-byte length when decoding DHCP_SUBNET. NOTE: this issue exists because of an incomplete fix for CVE-2018-20679.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.30.1-r2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-42378_3.8:busybox_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2021-42378] 3.8:busybox 1.28.4-r1"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the getvar_i function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2019-6977_3.8:libgd_2.2.5-r1",
              "shortDescription": {
                "text": "[CVE-2019-6977] 3.8:libgd 2.2.5-r1"
              },
              "help": {
                "text": "gdImageColorMatch in gd_color_match.c in the GD Graphics Library (aka LibGD) 2.2.5, as used in the imagecolormatch function in PHP before 5.6.40, 7.x before 7.1.26, 7.2.x before 7.2.14, and 7.3.x before 7.3.1, has a heap-based buffer overflow. This can be exploited by an attacker who is able to trigger imagecolormatch calls with crafted image data.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.8      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.2.5-r2]   |"
              },
              "properties": {
                "security-severity": "8.8"
              }
            },
            {
              "id": "CVE-2021-3517_3.8:libxml2_2.9.8-r0",
              "shortDescription": {
                "text": "[CVE-2021-3517] 3.8:libxml2 2.9.8-r0"
              },
              "help": {
                "text": "There is a flaw in the xml entity encoding functionality of libxml2 in versions before 2.9.11. An attacker who is able to supply a crafted file to be processed by an application linked with the affected functionality of libxml2 could trigger an out-of-bounds read. The most likely impact of this flaw is to application availability, with some potential impact to confidentiality and integrity if an attacker is able to use memory information to further exploit the application.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.6      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.9.11-r0]   |"
              },
              "properties": {
                "security-severity": "8.6"
              }
            },
            {
              "id": "CVE-2023-1999_3.8:libwebp_1.0.0-r0",
              "shortDescription": {
                "text": "[CVE-2023-1999] 3.8:libwebp 1.0.0-r0"
              },
              "help": {
                "text": "There exists a use after free/double free in libwebp. An attacker can use the ApplyFiltersAndEncode() function and loop through to free best.bw and assign best = trial pointer. The second loop will then return 0 because of an Out of memory error in VP8 encoder, the pointer is still assigned to trial and the AddressSanitizer will attempt a double free.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.3.0-r3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-42378_3.8:ssl_client_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2021-42378] 3.8:ssl_client 1.28.4-r1"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the getvar_i function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2022-23308_3.8:libxml2_2.9.8-r0",
              "shortDescription": {
                "text": "[CVE-2022-23308] 3.8:libxml2 2.9.8-r0"
              },
              "help": {
                "text": "valid.c in libxml2 before 2.9.13 has a use-after-free of ID and IDREF attributes.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.9.13-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-28391_3.8:busybox_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2022-28391] 3.8:busybox 1.28.4-r1"
              },
              "help": {
                "text": "BusyBox through 1.35.0 allows remote attackers to execute arbitrary code if netstat is used to print a DNS PTR record's value to a VT compatible terminal. Alternatively, the attacker could choose to change the terminal's colors.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.8      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.35.0-r7]   |"
              },
              "properties": {
                "security-severity": "8.8"
              }
            },
            {
              "id": "CVE-2022-0778_3.8:libressl2.7-libtls_2.7.4-r0",
              "shortDescription": {
                "text": "[CVE-2022-0778] 3.8:libressl2.7-libtls 2.7.4-r0"
              },
              "help": {
                "text": "The BN_mod_sqrt() function, which computes a modular square root, contains a bug that can cause it to loop forever for non-prime moduli. Internally this function is used when parsing certificates that contain elliptic curve public keys in compressed form or explicit elliptic curve parameters with a base point encoded in compressed form. It is possible to trigger the infinite loop by crafting a certificate that has invalid explicit curve parameters. Since certificate parsing happens prior to verification of the certificate signature, any process that parses an externally supplied certificate may thus be subject to a denial of service attack. The infinite loop can also be reached when parsing crafted private keys as they can contain explicit elliptic curve parameters. Thus vulnerable situations include: - TLS clients consuming server certificates - TLS servers consuming client certificates - Hosting providers taking certificates or private keys from customers - Certificate authorities parsing certification requests from subscribers - Anything else which parses ASN.1 elliptic curve parameters Also any other applications that use the BN_mod_sqrt() where the attacker can control the parameter values are vulnerable to this DoS issue. In the OpenSSL 1.0.2 version the public key is not parsed during initial parsing of the certificate which makes it slightly harder to trigger the infinite loop. However any operation which requires the public key from the certificate will trigger the infinite loop. In particular the attacker can use a self-signed certificate to trigger the loop during verification of the certificate signature. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0. It was addressed in the releases of 1.1.1n and 3.0.2 on the 15th March 2022. Fixed in OpenSSL 3.0.2 (Affected 3.0.0,3.0.1). Fixed in OpenSSL 1.1.1n (Affected 1.1.1-1.1.1m). Fixed in OpenSSL 1.0.2zd (Affected 1.0.2-1.0.2zc).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [3.4.3-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-40145_3.8:libgd_2.2.5-r1",
              "shortDescription": {
                "text": "[CVE-2021-40145] 3.8:libgd 2.2.5-r1"
              },
              "help": {
                "text": "gdImageGd2Ptr in gd_gd2.c in the GD Graphics Library (aka LibGD) through 2.3.2 has a double free. NOTE: the vendor's position is \"The GD2 image format is a proprietary image format of libgd. It has to be regarded as being obsolete, and should only be used for development and testing purposes.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.3.0-r1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2020-17541_3.8:libjpeg-turbo_1.5.3-r3",
              "shortDescription": {
                "text": "[CVE-2020-17541] 3.8:libjpeg-turbo 1.5.3-r3"
              },
              "help": {
                "text": "Libjpeg-turbo all version have a stack-based buffer overflow in the \"transform\" component. A remote attacker can send a malformed jpeg file to the service and cause arbitrary code execution or denial of service of the target service.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.8      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "8.8"
              }
            },
            {
              "id": "CVE-2000-1254_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2000-1254] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "crypto/rsa/rsa_gen.c in OpenSSL before 0.9.6 mishandles C bitwise-shift operations that exceed the size of an expression, which makes it easier for remote attackers to defeat cryptographic protection mechanisms by leveraging improper RSA key generation on 64-bit HP-UX platforms.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2020-36332_3.8:libwebp_1.0.0-r0",
              "shortDescription": {
                "text": "[CVE-2020-36332] 3.8:libwebp 1.0.0-r0"
              },
              "help": {
                "text": "A flaw was found in libwebp in versions before 1.0.1. When reading a file libwebp allocates an excessive amount of memory. The highest threat from this vulnerability is to the service availability.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2000-1254_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2000-1254] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "crypto/rsa/rsa_gen.c in OpenSSL before 0.9.6 mishandles C bitwise-shift operations that exceed the size of an expression, which makes it easier for remote attackers to defeat cryptographic protection mechanisms by leveraging improper RSA key generation on 64-bit HP-UX platforms.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-2650_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2023-2650] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "Issue summary: Processing some specially crafted ASN.1 object identifiers or\ndata containing them may be very slow.\n\nImpact summary: Applications that use OBJ_obj2txt() directly, or use any of\nthe OpenSSL subsystems OCSP, PKCS7/SMIME, CMS, CMP/CRMF or TS with no message\nsize limit may experience notable to very long delays when processing those\nmessages, which may lead to a Denial of Service.\n\nAn OBJECT IDENTIFIER is composed of a series of numbers - sub-identifiers -\nmost of which have no size limit.  OBJ_obj2txt() may be used to translate\nan ASN.1 OBJECT IDENTIFIER given in DER encoding form (using the OpenSSL\ntype ASN1_OBJECT) to its canonical numeric text form, which are the\nsub-identifiers of the OBJECT IDENTIFIER in decimal form, separated by\nperiods.\n\nWhen one of the sub-identifiers in the OBJECT IDENTIFIER is very large\n(these are sizes that are seen as absurdly large, taking up tens or hundreds\nof KiBs), the translation to a decimal number in text may take a very long\ntime.  The time complexity is O(n^2) with 'n' being the size of the\nsub-identifiers in bytes (*).\n\nWith OpenSSL 3.0, support to fetch cryptographic algorithms using names /\nidentifiers in string form was introduced.  This includes using OBJECT\nIDENTIFIERs in canonical numeric text form as identifiers for fetching\nalgorithms.\n\nSuch OBJECT IDENTIFIERs may be received through the ASN.1 structure\nAlgorithmIdentifier, which is commonly used in multiple protocols to specify\nwhat cryptographic algorithm should be used to sign or verify, encrypt or\ndecrypt, or digest passed data.\n\nApplications that call OBJ_obj2txt() directly with untrusted data are\naffected, with any version of OpenSSL.  If the use is for the mere purpose\nof display, the severity is considered low.\n\nIn OpenSSL 3.0 and newer, this affects the subsystems OCSP, PKCS7/SMIME,\nCMS, CMP/CRMF or TS.  It also impacts anything that processes X.509\ncertificates, including simple things like verifying its signature.\n\nThe impact on TLS is relatively low, because all versions of OpenSSL...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.1.1-r0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-2097_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2022-2097] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "AES OCB mode for 32-bit x86 platforms using the AES-NI assembly optimised implementation will not encrypt the entirety of the data under some circumstances. This could reveal sixteen bytes of data that was preexisting in the memory that wasn't written. In the special case of \"in place\" encryption, sixteen bytes of the plaintext would be revealed. Since OpenSSL does not support OCB based cipher suites for TLS and DTLS, they are both unaffected. Fixed in OpenSSL 3.0.5 (Affected 3.0.0-3.0.4). Fixed in OpenSSL 1.1.1q (Affected 1.1.1-1.1.1p).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.0.5-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-2097_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2022-2097] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "AES OCB mode for 32-bit x86 platforms using the AES-NI assembly optimised implementation will not encrypt the entirety of the data under some circumstances. This could reveal sixteen bytes of data that was preexisting in the memory that wasn't written. In the special case of \"in place\" encryption, sixteen bytes of the plaintext would be revealed. Since OpenSSL does not support OCB based cipher suites for TLS and DTLS, they are both unaffected. Fixed in OpenSSL 3.0.5 (Affected 3.0.0-3.0.4). Fixed in OpenSSL 1.1.1q (Affected 1.1.1-1.1.1p).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.0.5-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-2650_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2023-2650] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "Issue summary: Processing some specially crafted ASN.1 object identifiers or\ndata containing them may be very slow.\n\nImpact summary: Applications that use OBJ_obj2txt() directly, or use any of\nthe OpenSSL subsystems OCSP, PKCS7/SMIME, CMS, CMP/CRMF or TS with no message\nsize limit may experience notable to very long delays when processing those\nmessages, which may lead to a Denial of Service.\n\nAn OBJECT IDENTIFIER is composed of a series of numbers - sub-identifiers -\nmost of which have no size limit.  OBJ_obj2txt() may be used to translate\nan ASN.1 OBJECT IDENTIFIER given in DER encoding form (using the OpenSSL\ntype ASN1_OBJECT) to its canonical numeric text form, which are the\nsub-identifiers of the OBJECT IDENTIFIER in decimal form, separated by\nperiods.\n\nWhen one of the sub-identifiers in the OBJECT IDENTIFIER is very large\n(these are sizes that are seen as absurdly large, taking up tens or hundreds\nof KiBs), the translation to a decimal number in text may take a very long\ntime.  The time complexity is O(n^2) with 'n' being the size of the\nsub-identifiers in bytes (*).\n\nWith OpenSSL 3.0, support to fetch cryptographic algorithms using names /\nidentifiers in string form was introduced.  This includes using OBJECT\nIDENTIFIERs in canonical numeric text form as identifiers for fetching\nalgorithms.\n\nSuch OBJECT IDENTIFIERs may be received through the ASN.1 structure\nAlgorithmIdentifier, which is commonly used in multiple protocols to specify\nwhat cryptographic algorithm should be used to sign or verify, encrypt or\ndecrypt, or digest passed data.\n\nApplications that call OBJ_obj2txt() directly with untrusted data are\naffected, with any version of OpenSSL.  If the use is for the mere purpose\nof display, the severity is considered low.\n\nIn OpenSSL 3.0 and newer, this affects the subsystems OCSP, PKCS7/SMIME,\nCMS, CMP/CRMF or TS.  It also impacts anything that processes X.509\ncertificates, including simple things like verifying its signature.\n\nThe impact on TLS is relatively low, because all versions of OpenSSL...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.1.1-r0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-3817_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2023-3817] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. After fixing\nCVE-2023-3446 it was discovered that a large q parameter value can also trigger\nan overly long computation during some of these checks. A correct q value,\nif present, cannot be larger than the modulus p parameter, thus it is\nunnecessary to perform these checks if q is larger than p.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulnerable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the \"-check\" option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.1.2-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2024-0727_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2024-0727] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "Issue summary: Processing a maliciously formatted PKCS12 file may lead OpenSSL\nto crash leading to a potential Denial of Service attack\n\nImpact summary: Applications loading files in the PKCS12 format from untrusted\nsources might terminate abruptly.\n\nA file in PKCS12 format can contain certificates and keys and may come from an\nuntrusted source. The PKCS12 specification allows certain fields to be NULL, but\nOpenSSL does not correctly check for this case. This can lead to a NULL pointer\ndereference that results in OpenSSL crashing. If an application processes PKCS12\nfiles from an untrusted source using the OpenSSL APIs then that application will\nbe vulnerable to this issue.\n\nOpenSSL APIs that are vulnerable to this are: PKCS12_parse(),\nPKCS12_unpack_p7data(), PKCS12_unpack_p7encdata(), PKCS12_unpack_authsafes()\nand PKCS12_newpass().\n\nWe have also fixed a similar issue in SMIME_write_PKCS7(). However since this\nfunction is related to writing data we do not consider it security significant.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.1.4-r5]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42363_3.8:busybox_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2023-42363] 3.8:busybox 1.28.4-r1"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in xasprintf function in xfuncs_printf.c:344 in BusyBox v.1.36.1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.36.1-r27]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2018-9251_3.8:libxml2_2.9.8-r0",
              "shortDescription": {
                "text": "[CVE-2018-9251] 3.8:libxml2 2.9.8-r0"
              },
              "help": {
                "text": "The xz_decomp function in xzlib.c in libxml2 2.9.8, if --with-lzma is used, allows remote attackers to cause a denial of service (infinite loop) via a crafted XML file that triggers LZMA_MEMLIMIT_ERROR, as demonstrated by xmllint, a different vulnerability than CVE-2015-8035.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.9.8-r1]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2018-0735_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2018-0735] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "The OpenSSL ECDSA signature algorithm has been shown to be vulnerable to a timing side channel attack. An attacker could use variations in the signing algorithm to recover the private key. Fixed in OpenSSL 1.1.0j (Affected 1.1.0-1.1.0i). Fixed in OpenSSL 1.1.1a (Affected 1.1.1).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.1.1a-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2021-42374_3.8:ssl_client_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2021-42374] 3.8:ssl_client 1.28.4-r1"
              },
              "help": {
                "text": "An out-of-bounds heap read in Busybox's unlzma applet leads to information leak and denial of service when crafted LZMA-compressed input is decompressed. This can be triggered by any applet/format that",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-38115_3.8:libgd_2.2.5-r1",
              "shortDescription": {
                "text": "[CVE-2021-38115] 3.8:libgd 2.2.5-r1"
              },
              "help": {
                "text": "read_header_tga in gd_tga.c in the GD Graphics Library (aka LibGD) through 2.3.2 allows remote attackers to cause a denial of service (out-of-bounds read) via a crafted TGA file.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.3.0-r1]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-42364_3.8:busybox_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2023-42364] 3.8:busybox 1.28.4-r1"
              },
              "help": {
                "text": "A use-after-free vulnerability in BusyBox v.1.36.1 allows attackers to cause a denial of service via a crafted awk pattern in the awk.c evaluate function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2019-1547_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2019-1547] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "Normally in OpenSSL EC groups always have a co-factor present and this is used in side channel resistant code paths. However, in some cases, it is possible to construct a group using explicit parameters (instead of using a named curve). In those cases it is possible that such a group does not have the cofactor present. This can occur even where all the parameters match a known named curve. If such a curve is used then OpenSSL falls back to non-side channel resistant code paths which may result in full key recovery during an ECDSA signature operation. In order to be vulnerable an attacker would have to have the ability to time the creation of a large number of signatures where explicit parameters with no co-factor present are in use by an application using libcrypto. For the avoidance of doubt libssl is not vulnerable because explicit parameters are never used. Fixed in OpenSSL 1.1.1d (Affected 1.1.1-1.1.1c). Fixed in OpenSSL 1.1.0l (Affected 1.1.0-1.1.0k). Fixed in OpenSSL 1.0.2t (Affected 1.0.2-1.0.2s).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.7      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.0.2t-r0]   |"
              },
              "properties": {
                "security-severity": "4.7"
              }
            },
            {
              "id": "CVE-2018-0734_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2018-0734] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "The OpenSSL DSA signature algorithm has been shown to be vulnerable to a timing side channel attack. An attacker could use variations in the signing algorithm to recover the private key. Fixed in OpenSSL 1.1.1a (Affected 1.1.1). Fixed in OpenSSL 1.1.0j (Affected 1.1.0-1.1.0i). Fixed in OpenSSL 1.0.2q (Affected 1.0.2-1.0.2p).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.0.2q-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-2804_3.8:libjpeg-turbo_1.5.3-r3",
              "shortDescription": {
                "text": "[CVE-2023-2804] 3.8:libjpeg-turbo 1.5.3-r3"
              },
              "help": {
                "text": "A heap-based buffer overflow issue was discovered in libjpeg-turbo in h2v2_merged_upsample_internal() function of jdmrgext.c file. The vulnerability can only be exploited with 12-bit data precision for which the range of the sample data type exceeds the valid sample range, hence, an attacker could craft a 12-bit lossless JPEG image that contains out-of-range 12-bit samples. An application attempting to decompress such image using merged upsampling would lead to segmentation fault or buffer overflows, causing an application to crash.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.1.5.1-r4]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-5678_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2023-5678] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "Issue summary: Generating excessively long X9.42 DH keys or checking\nexcessively long X9.42 DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_generate_key() to\ngenerate an X9.42 DH key may experience long delays.  Likewise, applications\nthat use DH_check_pub_key(), DH_check_pub_key_ex() or EVP_PKEY_public_check()\nto check an X9.42 DH key or X9.42 DH parameters may experience long delays.\nWhere the key or parameters that are being checked have been obtained from\nan untrusted source this may lead to a Denial of Service.\n\nWhile DH_check() performs all the necessary checks (as of CVE-2023-3817),\nDH_check_pub_key() doesn't make any of these checks, and is therefore\nvulnerable for excessively large P and Q parameters.\n\nLikewise, while DH_generate_key() performs a check for an excessively large\nP, it doesn't check for an excessively large Q.\n\nAn application that calls DH_generate_key() or DH_check_pub_key() and\nsupplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nDH_generate_key() and DH_check_pub_key() are also called by a number of\nother OpenSSL functions.  An application calling any of those other\nfunctions may similarly be affected.  The other functions affected by this\nare DH_check_pub_key_ex(), EVP_PKEY_public_check(), and EVP_PKEY_generate().\n\nAlso vulnerable are the OpenSSL pkey command line application when using the\n\"-pubcheck\" option, as well as the OpenSSL genpkey command line application.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.1.4-r1]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-28484_3.8:libxml2_2.9.8-r0",
              "shortDescription": {
                "text": "[CVE-2023-28484] 3.8:libxml2 2.9.8-r0"
              },
              "help": {
                "text": "In libxml2 before 2.10.4, parsing of certain invalid XSD schemas can lead to a NULL pointer dereference and subsequently a segfault. This occurs in xmlSchemaFixupComplexType in xmlschemas.c.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.10.4-r0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2020-1971_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2020-1971] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "The X.509 GeneralName type is a generic type for representing different types of names. One of those name types is known as EDIPartyName. OpenSSL provides a function GENERAL_NAME_cmp which compares different instances of a GENERAL_NAME to see if they are equal or not. This function behaves incorrectly when both GENERAL_NAMEs contain an EDIPARTYNAME. A NULL pointer dereference and a crash may occur leading to a possible denial of service attack. OpenSSL itself uses the GENERAL_NAME_cmp function for two purposes: 1) Comparing CRL distribution point names between an available CRL and a CRL distribution point embedded in an X509 certificate 2) When verifying that a timestamp response token signer matches the timestamp authority name (exposed via the API functions TS_RESP_verify_response and TS_RESP_verify_token) If an attacker can control both items being compared then that attacker could trigger a crash. For example if the attacker can trick a client or server into checking a malicious certificate against a malicious CRL then this may occur. Note that some applications automatically download CRLs based on a URL embedded in a certificate. This checking happens prior to the signatures on the certificate and CRL being verified. OpenSSL's s_server, s_client and verify tools have support for the \"-crl_download\" option which implements automatic CRL downloading and this attack has been demonstrated to work against those tools. Note that an unrelated bug means that affected versions of OpenSSL cannot parse or construct correct encodings of EDIPARTYNAME. However it is possible to construct a malformed EDIPARTYNAME that OpenSSL's parser will accept and hence trigger this attack. All OpenSSL 1.1.1 and 1.0.2 versions are affected by this issue. Other OpenSSL releases are out of support and have not been checked. Fixed in OpenSSL 1.1.1i (Affected 1.1.1-1.1.1h). Fixed in OpenSSL 1.0.2x (Affected 1.0.2-1.0.2w).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.1.1i-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-42364_3.8:ssl_client_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2023-42364] 3.8:ssl_client 1.28.4-r1"
              },
              "help": {
                "text": "A use-after-free vulnerability in BusyBox v.1.36.1 allows attackers to cause a denial of service via a crafted awk pattern in the awk.c evaluate function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2020-35538_3.8:libjpeg-turbo_1.5.3-r3",
              "shortDescription": {
                "text": "[CVE-2020-35538] 3.8:libjpeg-turbo 1.5.3-r3"
              },
              "help": {
                "text": "A crafted input file could cause a null pointer dereference in jcopy_sample_rows() when processed by libjpeg-turbo.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.0.6-r0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2020-28928_3.8:musl_1.1.19-r10",
              "shortDescription": {
                "text": "[CVE-2020-28928] 3.8:musl 1.1.19-r10"
              },
              "help": {
                "text": "In musl libc through 1.2.1, wcsnrtombs mishandles particular combinations of destination buffer size and source character limit, as demonstrated by an invalid write access (buffer overflow).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.2.2_pre2-r0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2019-1559_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2019-1559] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "If an application encounters a fatal protocol error and then calls SSL_shutdown() twice (once to send a close_notify, and once to receive one) then OpenSSL can respond differently to the calling application if a 0 byte record is received with invalid padding compared to if a 0 byte record is received with an invalid MAC. If the application then behaves differently based on that in a way that is detectable to the remote peer, then this amounts to a padding oracle that could be used to decrypt data. In order for this to be exploitable \"non-stitched\" ciphersuites must be in use. Stitched ciphersuites are optimised implementations of certain commonly used ciphersuites. Also the application must call SSL_shutdown() twice even if a protocol error has occurred (applications should not do this but some do anyway). Fixed in OpenSSL 1.0.2r (Affected 1.0.2-1.0.2q).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.0.2r-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2022-29824_3.8:libxml2_2.9.8-r0",
              "shortDescription": {
                "text": "[CVE-2022-29824] 3.8:libxml2 2.9.8-r0"
              },
              "help": {
                "text": "In libxml2 before 2.9.14, several buffer handling functions in buf.c (xmlBuf*) and tree.c (xmlBuffer*) don't check for integer overflows. This can result in out-of-bounds memory writes. Exploitation requires a victim to open a crafted, multi-gigabyte XML file. Other software using libxml2's buffer functions, for example libxslt through 1.1.35, is affected as well.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.9.14-r0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2019-1551_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2019-1551] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "There is an overflow bug in the x64_64 Montgomery squaring procedure used in exponentiation with 512-bit moduli. No EC algorithms are affected. Analysis suggests that attacks against 2-prime RSA1024, 3-prime RSA1536, and DSA1024 as a result of this defect would be very difficult to perform and are not believed likely. Attacks against DH512 are considered just feasible. However, for an attack the target would have to re-use the DH512 private key, which is not recommended anyway. Also applications directly using the low level API BN_mod_exp may be affected if they use BN_FLG_CONSTTIME. Fixed in OpenSSL 1.1.1e (Affected 1.1.1-1.1.1d). Fixed in OpenSSL 1.0.2u (Affected 1.0.2-1.0.2t).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.0.2u-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2018-14498_3.8:libjpeg-turbo_1.5.3-r3",
              "shortDescription": {
                "text": "[CVE-2018-14498] 3.8:libjpeg-turbo 1.5.3-r3"
              },
              "help": {
                "text": "get_8bit_row in rdbmp.c in libjpeg-turbo through 1.5.90 and MozJPEG through 3.3.1 allows attackers to cause a denial of service (heap-based buffer over-read and application crash) via a crafted 8-bit BMP in which one or more of the color indices is out of range for the number of palette entries.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.5.3-r5]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2019-1549_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2019-1549] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "OpenSSL 1.1.1 introduced a rewritten random number generator (RNG). This was intended to include protection in the event of a fork() system call in order to ensure that the parent and child processes did not share the same RNG state. However this protection was not being used in the default case. A partial mitigation for this issue is that the output from a high precision timer is mixed into the RNG state so the likelihood of a parent and child process sharing state is significantly reduced. If an application already calls OPENSSL_init_crypto() explicitly using OPENSSL_INIT_ATFORK then this problem does not occur at all. Fixed in OpenSSL 1.1.1d (Affected 1.1.1-1.1.1c).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.1.1d-r1]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2020-1971_3.8:libressl2.7-libtls_2.7.4-r0",
              "shortDescription": {
                "text": "[CVE-2020-1971] 3.8:libressl2.7-libtls 2.7.4-r0"
              },
              "help": {
                "text": "The X.509 GeneralName type is a generic type for representing different types of names. One of those name types is known as EDIPartyName. OpenSSL provides a function GENERAL_NAME_cmp which compares different instances of a GENERAL_NAME to see if they are equal or not. This function behaves incorrectly when both GENERAL_NAMEs contain an EDIPARTYNAME. A NULL pointer dereference and a crash may occur leading to a possible denial of service attack. OpenSSL itself uses the GENERAL_NAME_cmp function for two purposes: 1) Comparing CRL distribution point names between an available CRL and a CRL distribution point embedded in an X509 certificate 2) When verifying that a timestamp response token signer matches the timestamp authority name (exposed via the API functions TS_RESP_verify_response and TS_RESP_verify_token) If an attacker can control both items being compared then that attacker could trigger a crash. For example if the attacker can trick a client or server into checking a malicious certificate against a malicious CRL then this may occur. Note that some applications automatically download CRLs based on a URL embedded in a certificate. This checking happens prior to the signatures on the certificate and CRL being verified. OpenSSL's s_server, s_client and verify tools have support for the \"-crl_download\" option which implements automatic CRL downloading and this attack has been demonstrated to work against those tools. Note that an unrelated bug means that affected versions of OpenSSL cannot parse or construct correct encodings of EDIPARTYNAME. However it is possible to construct a malformed EDIPARTYNAME that OpenSSL's parser will accept and hence trigger this attack. All OpenSSL 1.1.1 and 1.0.2 versions are affected by this issue. Other OpenSSL releases are out of support and have not been checked. Fixed in OpenSSL 1.1.1i (Affected 1.1.1-1.1.1h). Fixed in OpenSSL 1.0.2x (Affected 1.0.2-1.0.2w).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [3.1.5-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2019-7317_3.8:libpng_1.6.34-r1",
              "shortDescription": {
                "text": "[CVE-2019-7317] 3.8:libpng 1.6.34-r1"
              },
              "help": {
                "text": "png_image_free in png.c in libpng 1.6.x before 1.6.37 has a use-after-free because png_image_free_function is called under png_safe_execute.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.6.37-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-4304_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2022-4304] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "A timing based side channel exists in the OpenSSL RSA Decryption implementation\nwhich could be sufficient to recover a plaintext across a network in a\nBleichenbacher style attack. To achieve a successful decryption an attacker\nwould have to be able to send a very large number of trial messages for\ndecryption. The vulnerability affects all RSA padding modes: PKCS#1 v1.5,\nRSA-OEAP and RSASVE.\n\nFor example, in a TLS connection, RSA is commonly used by a client to send an\nencrypted pre-master secret to the server. An attacker that had observed a\ngenuine connection between a client and a server could use this flaw to send\ntrial messages to the server and record the time taken to process them. After a\nsufficiently large number of messages the attacker could recover the pre-master\nsecret used for the original connection and thus be able to decrypt the\napplication data sent over that connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2021-23841_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2021-23841] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "The OpenSSL public API function X509_issuer_and_serial_hash() attempts to create a unique hash value based on the issuer and serial number data contained within an X509 certificate. However it fails to correctly handle any errors that may occur while parsing the issuer field (which might occur if the issuer field is maliciously constructed). This may subsequently result in a NULL pointer deref and a crash leading to a potential denial of service attack. The function X509_issuer_and_serial_hash() is never directly called by OpenSSL itself so applications are only vulnerable if they use this function directly and they use it on certificates that may have been obtained from untrusted sources. OpenSSL versions 1.1.1i and below are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1j. OpenSSL versions 1.0.2x and below are affected by this issue. However OpenSSL 1.0.2 is out of support and no longer receiving public updates. Premium support customers of OpenSSL 1.0.2 should upgrade to 1.0.2y. Other users should upgrade to 1.1.1j. Fixed in OpenSSL 1.1.1j (Affected 1.1.1-1.1.1i). Fixed in OpenSSL 1.0.2y (Affected 1.0.2-1.0.2x).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.1.1j-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2019-1551_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2019-1551] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "There is an overflow bug in the x64_64 Montgomery squaring procedure used in exponentiation with 512-bit moduli. No EC algorithms are affected. Analysis suggests that attacks against 2-prime RSA1024, 3-prime RSA1536, and DSA1024 as a result of this defect would be very difficult to perform and are not believed likely. Attacks against DH512 are considered just feasible. However, for an attack the target would have to re-use the DH512 private key, which is not recommended anyway. Also applications directly using the low level API BN_mod_exp may be affected if they use BN_FLG_CONSTTIME. Fixed in OpenSSL 1.1.1e (Affected 1.1.1-1.1.1d). Fixed in OpenSSL 1.0.2u (Affected 1.0.2-1.0.2t).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.0.2u-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-3446_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2023-3446] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. One of those\nchecks confirms that the modulus ('p' parameter) is not too large. Trying to use\na very large modulus is slow and OpenSSL will not normally use a modulus which\nis over 10,000 bits in length.\n\nHowever the DH_check() function checks numerous aspects of the key or parameters\nthat have been supplied. Some of those checks use the supplied modulus value\neven if it has already been found to be too large.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulernable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the '-check' option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.1.1-r3]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2020-15999_3.8:freetype_2.9.1-r1",
              "shortDescription": {
                "text": "[CVE-2020-15999] 3.8:freetype 2.9.1-r1"
              },
              "help": {
                "text": "Heap buffer overflow in Freetype in Google Chrome prior to 86.0.4240.111 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.10.4-r0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2021-42375_3.8:ssl_client_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2021-42375] 3.8:ssl_client 1.28.4-r1"
              },
              "help": {
                "text": "An incorrect handling of a special element in Busybox's ash applet leads to denial of service when processing a crafted shell command, due to the shell mistaking specific characters for reserved characters. This may be used for DoS under rare conditions of filtered command input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-1255_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2023-1255] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "Issue summary: The AES-XTS cipher decryption implementation for 64 bit ARM\nplatform contains a bug that could cause it to read past the input buffer,\nleading to a crash.\n\nImpact summary: Applications that use the AES-XTS algorithm on the 64 bit ARM\nplatform can crash in rare circumstances. The AES-XTS algorithm is usually\nused for disk encryption.\n\nThe AES-XTS cipher decryption implementation for 64 bit ARM platform will read\npast the end of the ciphertext buffer if the ciphertext size is 4 mod 5 in 16\nbyte blocks, e.g. 144 bytes or 1024 bytes. If the memory after the ciphertext\nbuffer is unmapped, this will trigger a crash which results in a denial of\nservice.\n\nIf an attacker can control the size and location of the ciphertext buffer\nbeing decrypted by an application using AES-XTS on 64 bit ARM, the\napplication is affected. This is fairly unlikely making this issue\na Low severity one.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.1.0-r4]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2016-3709_3.8:libxml2_2.9.8-r0",
              "shortDescription": {
                "text": "[CVE-2016-3709] 3.8:libxml2 2.9.8-r0"
              },
              "help": {
                "text": "Possible cross-site scripting vulnerability in libxml after commit 960f0e2.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.9.11-r0]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2021-20205_3.8:libjpeg-turbo_1.5.3-r3",
              "shortDescription": {
                "text": "[CVE-2021-20205] 3.8:libjpeg-turbo 1.5.3-r3"
              },
              "help": {
                "text": "Libjpeg-turbo versions 2.0.91 and 2.0.90 is vulnerable to a denial of service vulnerability caused by a divide by zero when processing a crafted GIF image.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.1.0-r0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2019-13118_3.8:libxslt_1.1.32-r0",
              "shortDescription": {
                "text": "[CVE-2019-13118] 3.8:libxslt 1.1.32-r0"
              },
              "help": {
                "text": "In numbers.c in libxslt 1.1.33, a type holding grouping characters of an xsl:number instruction was too narrow and an invalid character/length combination could be passed to xsltNumberFormatDecimal, leading to a read of uninitialized stack data.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.1.33-r3]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-23841_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2021-23841] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "The OpenSSL public API function X509_issuer_and_serial_hash() attempts to create a unique hash value based on the issuer and serial number data contained within an X509 certificate. However it fails to correctly handle any errors that may occur while parsing the issuer field (which might occur if the issuer field is maliciously constructed). This may subsequently result in a NULL pointer deref and a crash leading to a potential denial of service attack. The function X509_issuer_and_serial_hash() is never directly called by OpenSSL itself so applications are only vulnerable if they use this function directly and they use it on certificates that may have been obtained from untrusted sources. OpenSSL versions 1.1.1i and below are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1j. OpenSSL versions 1.0.2x and below are affected by this issue. However OpenSSL 1.0.2 is out of support and no longer receiving public updates. Premium support customers of OpenSSL 1.0.2 should upgrade to 1.0.2y. Other users should upgrade to 1.1.1j. Fixed in OpenSSL 1.1.1j (Affected 1.1.1-1.1.1i). Fixed in OpenSSL 1.0.2y (Affected 1.0.2-1.0.2x).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.1.1j-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-29469_3.8:libxml2_2.9.8-r0",
              "shortDescription": {
                "text": "[CVE-2023-29469] 3.8:libxml2 2.9.8-r0"
              },
              "help": {
                "text": "An issue was discovered in libxml2 before 2.10.4. When hashing empty dict strings in a crafted XML document, xmlDictComputeFastKey in dict.c can produce non-deterministic values, leading to various logic and memory errors, such as a double free. This behavior occurs because there is an attempt to use the first byte of an empty string, and any value is possible (not solely the '\\0' value).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.10.4-r0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-2975_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2023-2975] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "Issue summary: The AES-SIV cipher implementation contains a bug that causes\nit to ignore empty associated data entries which are unauthenticated as\na consequence.\n\nImpact summary: Applications that use the AES-SIV algorithm and want to\nauthenticate empty data entries as associated data can be mislead by removing\nadding or reordering such empty entries as these are ignored by the OpenSSL\nimplementation. We are currently unaware of any such applications.\n\nThe AES-SIV algorithm allows for authentication of multiple associated\ndata entries along with the encryption. To authenticate empty data the\napplication has to call EVP_EncryptUpdate() (or EVP_CipherUpdate()) with\nNULL pointer as the output buffer and 0 as the input buffer length.\nThe AES-SIV implementation in OpenSSL just returns success for such a call\ninstead of performing the associated data authentication operation.\nThe empty data thus will not be authenticated.\n\nAs this issue does not affect non-empty associated data authentication and\nwe expect it to be rare for an application to use empty associated data\nentries this is qualified as Low severity issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.1.1-r2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-5678_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2023-5678] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "Issue summary: Generating excessively long X9.42 DH keys or checking\nexcessively long X9.42 DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_generate_key() to\ngenerate an X9.42 DH key may experience long delays.  Likewise, applications\nthat use DH_check_pub_key(), DH_check_pub_key_ex() or EVP_PKEY_public_check()\nto check an X9.42 DH key or X9.42 DH parameters may experience long delays.\nWhere the key or parameters that are being checked have been obtained from\nan untrusted source this may lead to a Denial of Service.\n\nWhile DH_check() performs all the necessary checks (as of CVE-2023-3817),\nDH_check_pub_key() doesn't make any of these checks, and is therefore\nvulnerable for excessively large P and Q parameters.\n\nLikewise, while DH_generate_key() performs a check for an excessively large\nP, it doesn't check for an excessively large Q.\n\nAn application that calls DH_generate_key() or DH_check_pub_key() and\nsupplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nDH_generate_key() and DH_check_pub_key() are also called by a number of\nother OpenSSL functions.  An application calling any of those other\nfunctions may similarly be affected.  The other functions affected by this\nare DH_check_pub_key_ex(), EVP_PKEY_public_check(), and EVP_PKEY_generate().\n\nAlso vulnerable are the OpenSSL pkey command line application when using the\n\"-pubcheck\" option, as well as the OpenSSL genpkey command line application.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.1.4-r1]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2019-13627_3.8:libgcrypt_1.8.3-r0",
              "shortDescription": {
                "text": "[CVE-2019-13627] 3.8:libgcrypt 1.8.3-r0"
              },
              "help": {
                "text": "It was discovered that there was a ECDSA timing attack in the libgcrypt20 cryptographic library. Version affected: 1.8.4-5, 1.7.6-2+deb9u3, and 1.6.3-2+deb8u4. Versions fixed: 1.8.5-2 and 1.6.3-2+deb8u7.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.3      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.8.5-r0]   |"
              },
              "properties": {
                "security-severity": "6.3"
              }
            },
            {
              "id": "CVE-2020-1971_3.8:libressl2.7-libssl_2.7.4-r0",
              "shortDescription": {
                "text": "[CVE-2020-1971] 3.8:libressl2.7-libssl 2.7.4-r0"
              },
              "help": {
                "text": "The X.509 GeneralName type is a generic type for representing different types of names. One of those name types is known as EDIPartyName. OpenSSL provides a function GENERAL_NAME_cmp which compares different instances of a GENERAL_NAME to see if they are equal or not. This function behaves incorrectly when both GENERAL_NAMEs contain an EDIPARTYNAME. A NULL pointer dereference and a crash may occur leading to a possible denial of service attack. OpenSSL itself uses the GENERAL_NAME_cmp function for two purposes: 1) Comparing CRL distribution point names between an available CRL and a CRL distribution point embedded in an X509 certificate 2) When verifying that a timestamp response token signer matches the timestamp authority name (exposed via the API functions TS_RESP_verify_response and TS_RESP_verify_token) If an attacker can control both items being compared then that attacker could trigger a crash. For example if the attacker can trick a client or server into checking a malicious certificate against a malicious CRL then this may occur. Note that some applications automatically download CRLs based on a URL embedded in a certificate. This checking happens prior to the signatures on the certificate and CRL being verified. OpenSSL's s_server, s_client and verify tools have support for the \"-crl_download\" option which implements automatic CRL downloading and this attack has been demonstrated to work against those tools. Note that an unrelated bug means that affected versions of OpenSSL cannot parse or construct correct encodings of EDIPARTYNAME. However it is possible to construct a malformed EDIPARTYNAME that OpenSSL's parser will accept and hence trigger this attack. All OpenSSL 1.1.1 and 1.0.2 versions are affected by this issue. Other OpenSSL releases are out of support and have not been checked. Fixed in OpenSSL 1.1.1i (Affected 1.1.1-1.1.1h). Fixed in OpenSSL 1.0.2x (Affected 1.0.2-1.0.2w).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [3.1.5-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2020-1971_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2020-1971] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "The X.509 GeneralName type is a generic type for representing different types of names. One of those name types is known as EDIPartyName. OpenSSL provides a function GENERAL_NAME_cmp which compares different instances of a GENERAL_NAME to see if they are equal or not. This function behaves incorrectly when both GENERAL_NAMEs contain an EDIPARTYNAME. A NULL pointer dereference and a crash may occur leading to a possible denial of service attack. OpenSSL itself uses the GENERAL_NAME_cmp function for two purposes: 1) Comparing CRL distribution point names between an available CRL and a CRL distribution point embedded in an X509 certificate 2) When verifying that a timestamp response token signer matches the timestamp authority name (exposed via the API functions TS_RESP_verify_response and TS_RESP_verify_token) If an attacker can control both items being compared then that attacker could trigger a crash. For example if the attacker can trick a client or server into checking a malicious certificate against a malicious CRL then this may occur. Note that some applications automatically download CRLs based on a URL embedded in a certificate. This checking happens prior to the signatures on the certificate and CRL being verified. OpenSSL's s_server, s_client and verify tools have support for the \"-crl_download\" option which implements automatic CRL downloading and this attack has been demonstrated to work against those tools. Note that an unrelated bug means that affected versions of OpenSSL cannot parse or construct correct encodings of EDIPARTYNAME. However it is possible to construct a malformed EDIPARTYNAME that OpenSSL's parser will accept and hence trigger this attack. All OpenSSL 1.1.1 and 1.0.2 versions are affected by this issue. Other OpenSSL releases are out of support and have not been checked. Fixed in OpenSSL 1.1.1i (Affected 1.1.1-1.1.1h). Fixed in OpenSSL 1.0.2x (Affected 1.0.2-1.0.2w).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.1.1i-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-6129_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2023-6129] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "Issue summary: The POLY1305 MAC (message authentication code) implementation\ncontains a bug that might corrupt the internal state of applications running\non PowerPC CPU based platforms if the CPU provides vector instructions.\n\nImpact summary: If an attacker can influence whether the POLY1305 MAC\nalgorithm is used, the application state might be corrupted with various\napplication dependent consequences.\n\nThe POLY1305 MAC (message authentication code) implementation in OpenSSL for\nPowerPC CPUs restores the contents of vector registers in a different order\nthan they are saved. Thus the contents of some of these vector registers\nare corrupted when returning to the caller. The vulnerable code is used only\non newer PowerPC processors supporting the PowerISA 2.07 instructions.\n\nThe consequences of this kind of internal application state corruption can\nbe various - from no consequences, if the calling application does not\ndepend on the contents of non-volatile XMM registers at all, to the worst\nconsequences, where the attacker could get complete control of the application\nprocess. However unless the compiler uses the vector registers for storing\npointers, the most likely consequence, if any, would be an incorrect result\nof some application dependent calculations or a crash leading to a denial of\nservice.\n\nThe POLY1305 MAC algorithm is most frequently used as part of the\nCHACHA20-POLY1305 AEAD (authenticated encryption with associated data)\nalgorithm. The most common usage of this AEAD cipher is with TLS protocol\nversions 1.2 and 1.3. If this cipher is enabled on the server a malicious\nclient can influence whether this AEAD cipher is used. This implies that\nTLS server applications using OpenSSL can be potentially impacted. However\nwe are currently not aware of any concrete application that would be affected\nby this issue therefore we consider this a Low severity security issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.1.4-r3]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-4203_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2022-4203] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "A read buffer overrun can be triggered in X.509 certificate verification,\nspecifically in name constraint checking. Note that this occurs\nafter certificate chain signature verification and requires either a\nCA to have signed the malicious certificate or for the application to\ncontinue certificate verification despite failure to construct a path\nto a trusted issuer.\n\nThe read buffer overrun might result in a crash which could lead to\na denial of service attack. In theory it could also result in the disclosure\nof private memory contents (such as private keys, or sensitive plaintext)\nalthough we are not aware of any working exploit leading to memory\ncontents disclosure as of the time of release of this advisory.\n\nIn a TLS client, this can be triggered by connecting to a malicious\nserver. In a TLS server, this can be triggered if the server requests\nclient authentication and a malicious client connects.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.9      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "4.9"
              }
            },
            {
              "id": "CVE-2018-5407_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2018-5407] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "Simultaneous Multi-threading (SMT) in processors can enable local users to exploit software vulnerable to timing attacks via a side-channel timing attack on 'port contention'.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.7      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.0.2q-r0]   |"
              },
              "properties": {
                "security-severity": "4.7"
              }
            },
            {
              "id": "CVE-2019-11038_3.8:libgd_2.2.5-r1",
              "shortDescription": {
                "text": "[CVE-2019-11038] 3.8:libgd 2.2.5-r1"
              },
              "help": {
                "text": "When using the gdImageCreateFromXbm() function in the GD Graphics Library (aka LibGD) 2.2.5, as used in the PHP GD extension in PHP versions 7.1.x below 7.1.30, 7.2.x below 7.2.19 and 7.3.x below 7.3.6, it is possible to supply data that will cause the function to use the value of uninitialized variable. This may lead to disclosing contents of the stack that has been left there by previous code.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.2.5-r3]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-42365_3.8:ssl_client_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2023-42365] 3.8:ssl_client 1.28.4-r1"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in BusyBox v.1.36.1 via a crafted awk pattern in the awk.c copyvar function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-2975_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2023-2975] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "Issue summary: The AES-SIV cipher implementation contains a bug that causes\nit to ignore empty associated data entries which are unauthenticated as\na consequence.\n\nImpact summary: Applications that use the AES-SIV algorithm and want to\nauthenticate empty data entries as associated data can be mislead by removing\nadding or reordering such empty entries as these are ignored by the OpenSSL\nimplementation. We are currently unaware of any such applications.\n\nThe AES-SIV algorithm allows for authentication of multiple associated\ndata entries along with the encryption. To authenticate empty data the\napplication has to call EVP_EncryptUpdate() (or EVP_CipherUpdate()) with\nNULL pointer as the output buffer and 0 as the input buffer length.\nThe AES-SIV implementation in OpenSSL just returns success for such a call\ninstead of performing the associated data authentication operation.\nThe empty data thus will not be authenticated.\n\nAs this issue does not affect non-empty associated data authentication and\nwe expect it to be rare for an application to use empty associated data\nentries this is qualified as Low severity issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.1.1-r2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2019-12904_3.8:libgcrypt_1.8.3-r0",
              "shortDescription": {
                "text": "[CVE-2019-12904] 3.8:libgcrypt 1.8.3-r0"
              },
              "help": {
                "text": "In Libgcrypt 1.8.4, the C implementation of AES is vulnerable to a flush-and-reload side-channel attack because physical addresses are available to other processes. (The C implementation is used on platforms where an assembly-language implementation is unavailable.) NOTE: the vendor's position is that the issue report cannot be validated because there is no description of an attack",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.8.3-r1]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2020-24977_3.8:libxml2_2.9.8-r0",
              "shortDescription": {
                "text": "[CVE-2020-24977] 3.8:libxml2 2.9.8-r0"
              },
              "help": {
                "text": "GNOME project libxml2 v2.9.10 has a global buffer over-read vulnerability in xmlEncodeEntitiesInternal at libxml2/entities.c. The issue has been fixed in commit 50f06b3e.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.9.10-r5]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-42366_3.8:ssl_client_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2023-42366] 3.8:ssl_client 1.28.4-r1"
              },
              "help": {
                "text": "A heap-buffer-overflow was discovered in BusyBox v.1.36.1 in the next_token function at awk.c:1159.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.36.1-r25]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-3446_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2023-3446] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. One of those\nchecks confirms that the modulus ('p' parameter) is not too large. Trying to use\na very large modulus is slow and OpenSSL will not normally use a modulus which\nis over 10,000 bits in length.\n\nHowever the DH_check() function checks numerous aspects of the key or parameters\nthat have been supplied. Some of those checks use the supplied modulus value\neven if it has already been found to be too large.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulernable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the '-check' option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.1.1-r3]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-42374_3.8:busybox_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2021-42374] 3.8:busybox 1.28.4-r1"
              },
              "help": {
                "text": "An out-of-bounds heap read in Busybox's unlzma applet leads to information leak and denial of service when crafted LZMA-compressed input is decompressed. This can be triggered by any applet/format that",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-6129_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2023-6129] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "Issue summary: The POLY1305 MAC (message authentication code) implementation\ncontains a bug that might corrupt the internal state of applications running\non PowerPC CPU based platforms if the CPU provides vector instructions.\n\nImpact summary: If an attacker can influence whether the POLY1305 MAC\nalgorithm is used, the application state might be corrupted with various\napplication dependent consequences.\n\nThe POLY1305 MAC (message authentication code) implementation in OpenSSL for\nPowerPC CPUs restores the contents of vector registers in a different order\nthan they are saved. Thus the contents of some of these vector registers\nare corrupted when returning to the caller. The vulnerable code is used only\non newer PowerPC processors supporting the PowerISA 2.07 instructions.\n\nThe consequences of this kind of internal application state corruption can\nbe various - from no consequences, if the calling application does not\ndepend on the contents of non-volatile XMM registers at all, to the worst\nconsequences, where the attacker could get complete control of the application\nprocess. However unless the compiler uses the vector registers for storing\npointers, the most likely consequence, if any, would be an incorrect result\nof some application dependent calculations or a crash leading to a denial of\nservice.\n\nThe POLY1305 MAC algorithm is most frequently used as part of the\nCHACHA20-POLY1305 AEAD (authenticated encryption with associated data)\nalgorithm. The most common usage of this AEAD cipher is with TLS protocol\nversions 1.2 and 1.3. If this cipher is enabled on the server a malicious\nclient can influence whether this AEAD cipher is used. This implies that\nTLS server applications using OpenSSL can be potentially impacted. However\nwe are currently not aware of any concrete application that would be affected\nby this issue therefore we consider this a Low severity security issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.1.4-r3]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2024-0727_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2024-0727] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "Issue summary: Processing a maliciously formatted PKCS12 file may lead OpenSSL\nto crash leading to a potential Denial of Service attack\n\nImpact summary: Applications loading files in the PKCS12 format from untrusted\nsources might terminate abruptly.\n\nA file in PKCS12 format can contain certificates and keys and may come from an\nuntrusted source. The PKCS12 specification allows certain fields to be NULL, but\nOpenSSL does not correctly check for this case. This can lead to a NULL pointer\ndereference that results in OpenSSL crashing. If an application processes PKCS12\nfiles from an untrusted source using the OpenSSL APIs then that application will\nbe vulnerable to this issue.\n\nOpenSSL APIs that are vulnerable to this are: PKCS12_parse(),\nPKCS12_unpack_p7data(), PKCS12_unpack_p7encdata(), PKCS12_unpack_authsafes()\nand PKCS12_newpass().\n\nWe have also fixed a similar issue in SMIME_write_PKCS7(). However since this\nfunction is related to writing data we do not consider it security significant.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.1.4-r5]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2021-3537_3.8:libxml2_2.9.8-r0",
              "shortDescription": {
                "text": "[CVE-2021-3537] 3.8:libxml2 2.9.8-r0"
              },
              "help": {
                "text": "A vulnerability found in libxml2 in versions before 2.9.11 shows that it did not propagate errors while parsing XML mixed content, causing a NULL dereference. If an untrusted XML document was parsed in recovery mode and post-validated, the flaw could be used to crash the application. The highest threat from this vulnerability is to system availability.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.9.11-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-1255_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2023-1255] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "Issue summary: The AES-XTS cipher decryption implementation for 64 bit ARM\nplatform contains a bug that could cause it to read past the input buffer,\nleading to a crash.\n\nImpact summary: Applications that use the AES-XTS algorithm on the 64 bit ARM\nplatform can crash in rare circumstances. The AES-XTS algorithm is usually\nused for disk encryption.\n\nThe AES-XTS cipher decryption implementation for 64 bit ARM platform will read\npast the end of the ciphertext buffer if the ciphertext size is 4 mod 5 in 16\nbyte blocks, e.g. 144 bytes or 1024 bytes. If the memory after the ciphertext\nbuffer is unmapped, this will trigger a crash which results in a denial of\nservice.\n\nIf an attacker can control the size and location of the ciphertext buffer\nbeing decrypted by an application using AES-XTS on 64 bit ARM, the\napplication is affected. This is fairly unlikely making this issue\na Low severity one.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.1.0-r4]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2020-1971_3.8:libressl2.7-libcrypto_2.7.4-r0",
              "shortDescription": {
                "text": "[CVE-2020-1971] 3.8:libressl2.7-libcrypto 2.7.4-r0"
              },
              "help": {
                "text": "The X.509 GeneralName type is a generic type for representing different types of names. One of those name types is known as EDIPartyName. OpenSSL provides a function GENERAL_NAME_cmp which compares different instances of a GENERAL_NAME to see if they are equal or not. This function behaves incorrectly when both GENERAL_NAMEs contain an EDIPARTYNAME. A NULL pointer dereference and a crash may occur leading to a possible denial of service attack. OpenSSL itself uses the GENERAL_NAME_cmp function for two purposes: 1) Comparing CRL distribution point names between an available CRL and a CRL distribution point embedded in an X509 certificate 2) When verifying that a timestamp response token signer matches the timestamp authority name (exposed via the API functions TS_RESP_verify_response and TS_RESP_verify_token) If an attacker can control both items being compared then that attacker could trigger a crash. For example if the attacker can trick a client or server into checking a malicious certificate against a malicious CRL then this may occur. Note that some applications automatically download CRLs based on a URL embedded in a certificate. This checking happens prior to the signatures on the certificate and CRL being verified. OpenSSL's s_server, s_client and verify tools have support for the \"-crl_download\" option which implements automatic CRL downloading and this attack has been demonstrated to work against those tools. Note that an unrelated bug means that affected versions of OpenSSL cannot parse or construct correct encodings of EDIPARTYNAME. However it is possible to construct a malformed EDIPARTYNAME that OpenSSL's parser will accept and hence trigger this attack. All OpenSSL 1.1.1 and 1.0.2 versions are affected by this issue. Other OpenSSL releases are out of support and have not been checked. Fixed in OpenSSL 1.1.1i (Affected 1.1.1-1.1.1h). Fixed in OpenSSL 1.0.2x (Affected 1.0.2-1.0.2w).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [3.1.5-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2018-19664_3.8:libjpeg-turbo_1.5.3-r3",
              "shortDescription": {
                "text": "[CVE-2018-19664] 3.8:libjpeg-turbo 1.5.3-r3"
              },
              "help": {
                "text": "libjpeg-turbo 2.0.1 has a heap-based buffer over-read in the put_pixel_rows function in wrbmp.c, as demonstrated by djpeg.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.0.2-r0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-4304_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2022-4304] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "A timing based side channel exists in the OpenSSL RSA Decryption implementation\nwhich could be sufficient to recover a plaintext across a network in a\nBleichenbacher style attack. To achieve a successful decryption an attacker\nwould have to be able to send a very large number of trial messages for\ndecryption. The vulnerability affects all RSA padding modes: PKCS#1 v1.5,\nRSA-OEAP and RSASVE.\n\nFor example, in a TLS connection, RSA is commonly used by a client to send an\nencrypted pre-master secret to the server. An attacker that had observed a\ngenuine connection between a client and a server could use this flaw to send\ntrial messages to the server and record the time taken to process them. After a\nsufficiently large number of messages the attacker could recover the pre-master\nsecret used for the original connection and thus be able to decrypt the\napplication data sent over that connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-42366_3.8:busybox_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2023-42366] 3.8:busybox 1.28.4-r1"
              },
              "help": {
                "text": "A heap-buffer-overflow was discovered in BusyBox v.1.36.1 in the next_token function at awk.c:1159.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.36.1-r25]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2018-14567_3.8:libxml2_2.9.8-r0",
              "shortDescription": {
                "text": "[CVE-2018-14567] 3.8:libxml2 2.9.8-r0"
              },
              "help": {
                "text": "libxml2 2.9.8, if --with-lzma is used, allows remote attackers to cause a denial of service (infinite loop) via a crafted XML file that triggers LZMA_MEMLIMIT_ERROR, as demonstrated by xmllint, a different vulnerability than CVE-2015-8035 and CVE-2018-9251.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.9.8-r1]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2019-1559_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2019-1559] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "If an application encounters a fatal protocol error and then calls SSL_shutdown() twice (once to send a close_notify, and once to receive one) then OpenSSL can respond differently to the calling application if a 0 byte record is received with invalid padding compared to if a 0 byte record is received with an invalid MAC. If the application then behaves differently based on that in a way that is detectable to the remote peer, then this amounts to a padding oracle that could be used to decrypt data. In order for this to be exploitable \"non-stitched\" ciphersuites must be in use. Stitched ciphersuites are optimised implementations of certain commonly used ciphersuites. Also the application must call SSL_shutdown() twice even if a protocol error has occurred (applications should not do this but some do anyway). Fixed in OpenSSL 1.0.2r (Affected 1.0.2-1.0.2q).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.0.2r-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2018-5711_3.8:libgd_2.2.5-r1",
              "shortDescription": {
                "text": "[CVE-2018-5711] 3.8:libgd 2.2.5-r1"
              },
              "help": {
                "text": "gd_gif_in.c in the GD Graphics Library (aka libgd), as used in PHP before 5.6.33, 7.0.x before 7.0.27, 7.1.x before 7.1.13, and 7.2.x before 7.2.1, has an integer signedness error that leads to an infinite loop via a crafted GIF file, as demonstrated by a call to the imagecreatefromgif or imagecreatefromstring PHP function. This is related to GetCode_ and gdImageCreateFromGifCtx.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.2.5-r2]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-3817_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2023-3817] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. After fixing\nCVE-2023-3446 it was discovered that a large q parameter value can also trigger\nan overly long computation during some of these checks. A correct q value,\nif present, cannot be larger than the modulus p parameter, thus it is\nunnecessary to perform these checks if q is larger than p.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulnerable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the \"-check\" option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.1.2-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2019-13117_3.8:libxslt_1.1.32-r0",
              "shortDescription": {
                "text": "[CVE-2019-13117] 3.8:libxslt 1.1.32-r0"
              },
              "help": {
                "text": "In numbers.c in libxslt 1.1.33, an xsl:number with certain format strings could lead to a uninitialized read in xsltNumberFormatInsertNumbers. This could allow an attacker to discern whether a byte on the stack contains the characters A, a, I, i, or 0, or any other character.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.1.33-r3]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2018-0734_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2018-0734] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "The OpenSSL DSA signature algorithm has been shown to be vulnerable to a timing side channel attack. An attacker could use variations in the signing algorithm to recover the private key. Fixed in OpenSSL 1.1.1a (Affected 1.1.1). Fixed in OpenSSL 1.1.0j (Affected 1.1.0-1.1.0i). Fixed in OpenSSL 1.0.2q (Affected 1.0.2-1.0.2p).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.0.2q-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2019-1549_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2019-1549] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "OpenSSL 1.1.1 introduced a rewritten random number generator (RNG). This was intended to include protection in the event of a fork() system call in order to ensure that the parent and child processes did not share the same RNG state. However this protection was not being used in the default case. A partial mitigation for this issue is that the output from a high precision timer is mixed into the RNG state so the likelihood of a parent and child process sharing state is significantly reduced. If an application already calls OPENSSL_init_crypto() explicitly using OPENSSL_INIT_ATFORK then this problem does not occur at all. Fixed in OpenSSL 1.1.1d (Affected 1.1.1-1.1.1c).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.1.1d-r1]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-42375_3.8:busybox_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2021-42375] 3.8:busybox 1.28.4-r1"
              },
              "help": {
                "text": "An incorrect handling of a special element in Busybox's ash applet leads to denial of service when processing a crafted shell command, due to the shell mistaking specific characters for reserved characters. This may be used for DoS under rare conditions of filtered command input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2019-1547_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2019-1547] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "Normally in OpenSSL EC groups always have a co-factor present and this is used in side channel resistant code paths. However, in some cases, it is possible to construct a group using explicit parameters (instead of using a named curve). In those cases it is possible that such a group does not have the cofactor present. This can occur even where all the parameters match a known named curve. If such a curve is used then OpenSSL falls back to non-side channel resistant code paths which may result in full key recovery during an ECDSA signature operation. In order to be vulnerable an attacker would have to have the ability to time the creation of a large number of signatures where explicit parameters with no co-factor present are in use by an application using libcrypto. For the avoidance of doubt libssl is not vulnerable because explicit parameters are never used. Fixed in OpenSSL 1.1.1d (Affected 1.1.1-1.1.1c). Fixed in OpenSSL 1.1.0l (Affected 1.1.0-1.1.0k). Fixed in OpenSSL 1.0.2t (Affected 1.0.2-1.0.2s).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.7      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.0.2t-r0]   |"
              },
              "properties": {
                "security-severity": "4.7"
              }
            },
            {
              "id": "CVE-2018-14048_3.8:libpng_1.6.34-r1",
              "shortDescription": {
                "text": "[CVE-2018-14048] 3.8:libpng 1.6.34-r1"
              },
              "help": {
                "text": "An issue has been found in libpng 1.6.34. It is a SEGV in the function png_free_data in png.c, related to the recommended error handling for png_read_image.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.6.37-r0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2020-28928_3.8:musl-utils_1.1.19-r10",
              "shortDescription": {
                "text": "[CVE-2020-28928] 3.8:musl-utils 1.1.19-r10"
              },
              "help": {
                "text": "In musl libc through 1.2.1, wcsnrtombs mishandles particular combinations of destination buffer size and source character limit, as demonstrated by an invalid write access (buffer overflow).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.2.2_pre2-r0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2020-14155_3.8:pcre_8.42-r0",
              "shortDescription": {
                "text": "[CVE-2020-14155] 3.8:pcre 8.42-r0"
              },
              "help": {
                "text": "libpcre in PCRE before 8.44 allows an integer overflow via a large number after a (?C substring.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [8.44-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-42363_3.8:ssl_client_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2023-42363] 3.8:ssl_client 1.28.4-r1"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in xasprintf function in xfuncs_printf.c:344 in BusyBox v.1.36.1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.36.1-r27]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2021-40528_3.8:libgcrypt_1.8.3-r0",
              "shortDescription": {
                "text": "[CVE-2021-40528] 3.8:libgcrypt 1.8.3-r0"
              },
              "help": {
                "text": "The ElGamal implementation in Libgcrypt before 1.9.4 allows plaintext recovery because, during interaction between two cryptographic libraries, a certain dangerous combination of the prime defined by the receiver's public key, the generator defined by the receiver's public key, and the sender's ephemeral exponents can lead to a cross-configuration attack against OpenPGP.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.8.8-r1]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2018-0735_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2018-0735] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "The OpenSSL ECDSA signature algorithm has been shown to be vulnerable to a timing side channel attack. An attacker could use variations in the signing algorithm to recover the private key. Fixed in OpenSSL 1.1.0j (Affected 1.1.0-1.1.0i). Fixed in OpenSSL 1.1.1a (Affected 1.1.1).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.1.1a-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2022-4203_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2022-4203] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "A read buffer overrun can be triggered in X.509 certificate verification,\nspecifically in name constraint checking. Note that this occurs\nafter certificate chain signature verification and requires either a\nCA to have signed the malicious certificate or for the application to\ncontinue certificate verification despite failure to construct a path\nto a trusted issuer.\n\nThe read buffer overrun might result in a crash which could lead to\na denial of service attack. In theory it could also result in the disclosure\nof private memory contents (such as private keys, or sensitive plaintext)\nalthough we are not aware of any working exploit leading to memory\ncontents disclosure as of the time of release of this advisory.\n\nIn a TLS client, this can be triggered by connecting to a malicious\nserver. In a TLS server, this can be triggered if the server requests\nclient authentication and a malicious client connects.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.9      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "4.9"
              }
            },
            {
              "id": "CVE-2023-42365_3.8:busybox_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2023-42365] 3.8:busybox 1.28.4-r1"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in BusyBox v.1.36.1 via a crafted awk pattern in the awk.c copyvar function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2018-5407_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2018-5407] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "Simultaneous Multi-threading (SMT) in processors can enable local users to exploit software vulnerable to timing attacks via a side-channel timing attack on 'port contention'.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.7      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.0.2q-r0]   |"
              },
              "properties": {
                "security-severity": "4.7"
              }
            },
            {
              "id": "CVE-2021-4160_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2021-4160] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "There is a carry propagation bug in the MIPS32 and MIPS64 squaring procedure. Many EC algorithms are affected, including some of the TLS 1.3 default curves. Impact was not analyzed in detail, because the pre-requisites for attack are considered unlikely and include reusing private keys. Analysis suggests that attacks against RSA and DSA as a result of this defect would be very difficult to perform and are not believed likely. Attacks against DH are considered just feasible (although very difficult) because most of the work necessary to deduce information about a private key may be performed offline. The amount of resources required for such an attack would be significant. However, for an attack on TLS to be meaningful, the server would have to share the DH private key among multiple clients, which is no longer an option since CVE-2016-0701. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0.0. It was addressed in the releases of 1.1.1m and 3.0.1 on the 15th of December 2021. For the 1.0.2 release it is addressed in git commit 6fc1aaaf3 that is available to premium support customers only. It will be made available in 1.0.2zc when it is released. The issue only affects OpenSSL on MIPS platforms. Fixed in OpenSSL 3.0.1 (Affected 3.0.0). Fixed in OpenSSL 1.1.1m (Affected 1.1.1-1.1.1l). Fixed in OpenSSL 1.0.2zc-dev (Affected 1.0.2-1.0.2zb).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2022-48437_3.8:libressl2.7-libssl_2.7.4-r0",
              "shortDescription": {
                "text": "[CVE-2022-48437] 3.8:libressl2.7-libssl 2.7.4-r0"
              },
              "help": {
                "text": "An issue was discovered in x509/x509_verify.c in LibreSSL before 3.6.1, and in OpenBSD before 7.2 errata 001. x509_verify_ctx_add_chain does not store errors that occur during leaf certificate verification, and therefore an incorrect error is returned. This behavior occurs when there is an installed verification callback that instructs the verifier to continue upon detecting an invalid certificate.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-4160_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2021-4160] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "There is a carry propagation bug in the MIPS32 and MIPS64 squaring procedure. Many EC algorithms are affected, including some of the TLS 1.3 default curves. Impact was not analyzed in detail, because the pre-requisites for attack are considered unlikely and include reusing private keys. Analysis suggests that attacks against RSA and DSA as a result of this defect would be very difficult to perform and are not believed likely. Attacks against DH are considered just feasible (although very difficult) because most of the work necessary to deduce information about a private key may be performed offline. The amount of resources required for such an attack would be significant. However, for an attack on TLS to be meaningful, the server would have to share the DH private key among multiple clients, which is no longer an option since CVE-2016-0701. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0.0. It was addressed in the releases of 1.1.1m and 3.0.1 on the 15th of December 2021. For the 1.0.2 release it is addressed in git commit 6fc1aaaf3 that is available to premium support customers only. It will be made available in 1.0.2zc when it is released. The issue only affects OpenSSL on MIPS platforms. Fixed in OpenSSL 3.0.1 (Affected 3.0.0). Fixed in OpenSSL 1.1.1m (Affected 1.1.1-1.1.1l). Fixed in OpenSSL 1.0.2zc-dev (Affected 1.0.2-1.0.2zb).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2021-41581_3.8:libressl2.7-libtls_2.7.4-r0",
              "shortDescription": {
                "text": "[CVE-2021-41581] 3.8:libressl2.7-libtls 2.7.4-r0"
              },
              "help": {
                "text": "x509_constraints_parse_mailbox in lib/libcrypto/x509/x509_constraints.c in LibreSSL through 3.4.0 has a stack-based buffer over-read. When the input exceeds DOMAIN_PART_MAX_LEN, the buffer lacks '\\0' termination.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2009-3767_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2009-3767] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "libraries/libldap/tls_o.c in OpenLDAP 2.2 and 2.4, and possibly other versions, when OpenSSL is used, does not properly handle a '\\0' character in a domain name in the subject's Common Name (CN) field of an X.509 certificate, which allows man-in-the-middle attackers to spoof arbitrary SSL servers via a crafted certificate issued by a legitimate Certification Authority, a related issue to CVE-2009-2408.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2012-5373_3.8:libxslt_1.1.32-r0",
              "shortDescription": {
                "text": "[CVE-2012-5373] 3.8:libxslt 1.1.32-r0"
              },
              "help": {
                "text": "Oracle Java SE 7 and earlier, and OpenJDK 7 and earlier, computes hash values without properly restricting the ability to trigger hash collisions predictably, which allows context-dependent attackers to cause a denial of service (CPU consumption) via crafted input to an application that maintains a hash table, as demonstrated by a universal multicollision attack against the MurmurHash3 algorithm, a different vulnerability than CVE-2012-2739.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2021-46822_3.8:libjpeg-turbo_1.5.3-r3",
              "shortDescription": {
                "text": "[CVE-2021-46822] 3.8:libjpeg-turbo 1.5.3-r3"
              },
              "help": {
                "text": "The PPM reader in libjpeg-turbo through 2.0.90 mishandles use of tjLoadImage for loading a 16-bit binary PPM file into a grayscale buffer and loading a 16-bit binary PGM file into an RGB buffer. This is related to a heap-based buffer overflow in the get_word_rgb_row function in rdppm.c.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2021-4214_3.8:libpng_1.6.34-r1",
              "shortDescription": {
                "text": "[CVE-2021-4214] 3.8:libpng 1.6.34-r1"
              },
              "help": {
                "text": "A heap overflow flaw was found in libpngs' pngimage.c program. This flaw allows an attacker with local network access to pass a specially crafted PNG file to the pngimage utility, causing an application to crash, leading to a denial of service.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2021-41581_3.8:libressl2.7-libssl_2.7.4-r0",
              "shortDescription": {
                "text": "[CVE-2021-41581] 3.8:libressl2.7-libssl 2.7.4-r0"
              },
              "help": {
                "text": "x509_constraints_parse_mailbox in lib/libcrypto/x509/x509_constraints.c in LibreSSL through 3.4.0 has a stack-based buffer over-read. When the input exceeds DOMAIN_PART_MAX_LEN, the buffer lacks '\\0' termination.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2021-42376_3.8:ssl_client_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2021-42376] 3.8:ssl_client 1.28.4-r1"
              },
              "help": {
                "text": "A NULL pointer dereference in Busybox's hush applet leads to denial of service when processing a crafted shell command, due to missing validation after a \\x03 delimiter character. This may be used for DoS under very rare conditions of filtered command input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-45322_3.8:libxml2_2.9.8-r0",
              "shortDescription": {
                "text": "[CVE-2023-45322] 3.8:libxml2 2.9.8-r0"
              },
              "help": {
                "text": "libxml2 through 2.11.5 has a use-after-free that can only occur after a certain memory allocation fails. This occurs in xmlUnlinkNode in tree.c. NOTE: the vendor's position is \"I don't think these issues are critical enough to warrant a CVE ID ... because an attacker typically can't control when memory allocations fail.\"",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-48437_3.8:libressl2.7-libtls_2.7.4-r0",
              "shortDescription": {
                "text": "[CVE-2022-48437] 3.8:libressl2.7-libtls 2.7.4-r0"
              },
              "help": {
                "text": "An issue was discovered in x509/x509_verify.c in LibreSSL before 3.6.1, and in OpenBSD before 7.2 errata 001. x509_verify_ctx_add_chain does not store errors that occur during leaf certificate verification, and therefore an incorrect error is returned. This behavior occurs when there is an installed verification callback that instructs the verifier to continue upon detecting an invalid certificate.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-41581_3.8:libressl2.7-libcrypto_2.7.4-r0",
              "shortDescription": {
                "text": "[CVE-2021-41581] 3.8:libressl2.7-libcrypto 2.7.4-r0"
              },
              "help": {
                "text": "x509_constraints_parse_mailbox in lib/libcrypto/x509/x509_constraints.c in LibreSSL through 3.4.0 has a stack-based buffer over-read. When the input exceeds DOMAIN_PART_MAX_LEN, the buffer lacks '\\0' termination.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2021-42376_3.8:busybox_1.28.4-r1",
              "shortDescription": {
                "text": "[CVE-2021-42376] 3.8:busybox 1.28.4-r1"
              },
              "help": {
                "text": "A NULL pointer dereference in Busybox's hush applet leads to denial of service when processing a crafted shell command, due to missing validation after a \\x03 delimiter character. This may be used for DoS under very rare conditions of filtered command input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2022-48437_3.8:libressl2.7-libcrypto_2.7.4-r0",
              "shortDescription": {
                "text": "[CVE-2022-48437] 3.8:libressl2.7-libcrypto 2.7.4-r0"
              },
              "help": {
                "text": "An issue was discovered in x509/x509_verify.c in LibreSSL before 3.6.1, and in OpenBSD before 7.2 errata 001. x509_verify_ctx_add_chain does not store errors that occur during leaf certificate verification, and therefore an incorrect error is returned. This behavior occurs when there is an installed verification callback that instructs the verifier to continue upon detecting an invalid certificate.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2009-3767_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2009-3767] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "libraries/libldap/tls_o.c in OpenLDAP 2.2 and 2.4, and possibly other versions, when OpenSSL is used, does not properly handle a '\\0' character in a domain name in the subject's Common Name (CN) field of an X.509 certificate, which allows man-in-the-middle attackers to spoof arbitrary SSL servers via a crafted certificate issued by a legitimate Certification Authority, a related issue to CVE-2009-2408.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2021-40812_3.8:libgd_2.2.5-r1",
              "shortDescription": {
                "text": "[CVE-2021-40812] 3.8:libgd 2.2.5-r1"
              },
              "help": {
                "text": "The GD Graphics Library (aka LibGD) through 2.3.2 has an out-of-bounds read because of the lack of certain gdGetBuf and gdPutBuf return value checks.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2012-2739_3.8:libxslt_1.1.32-r0",
              "shortDescription": {
                "text": "[CVE-2012-2739] 3.8:libxslt 1.1.32-r0"
              },
              "help": {
                "text": "Oracle Java SE before 7 Update 6, and OpenJDK 7 before 7u6 build 12 and 8 before build 39, computes hash values without restricting the ability to trigger hash collisions predictably, which allows context-dependent attackers to cause a denial of service (CPU consumption) via crafted input to an application that maintains a hash table.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2022-3209_3.8:libxml2_2.9.8-r0",
              "shortDescription": {
                "text": "[CVE-2022-3209] 3.8:libxml2 2.9.8-r0"
              },
              "help": {
                "text": "The soledad WordPress theme before 8.2.5 does not sanitise the {id,datafilter[type],...} parameters in its penci_more_slist_post_ajax AJAX action, leading to a Reflected Cross-Site Scripting (XSS) vulnerability.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2020-1968_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2020-1968] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "The Raccoon attack exploits a flaw in the TLS specification which can lead to an attacker being able to compute the pre-master secret in connections which have used a Diffie-Hellman (DH) based ciphersuite. In such a case this would result in the attacker being able to eavesdrop on all encrypted communications sent over that TLS connection. The attack can only be exploited if an implementation re-uses a DH secret across multiple TLS connections. Note that this issue only impacts DH ciphersuites and not ECDH ciphersuites. This issue affects OpenSSL 1.0.2 which is out of support and no longer receiving public updates. OpenSSL 1.1.1 is not vulnerable to this issue. Fixed in OpenSSL 1.0.2w (Affected 1.0.2-1.0.2v).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.7      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "3.7"
              }
            },
            {
              "id": "CVE-2021-23839_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2021-23839] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "OpenSSL 1.0.2 supports SSLv2. If a client attempts to negotiate SSLv2 with a server that is configured to support both SSLv2 and more recent SSL and TLS versions then a check is made for a version rollback attack when unpadding an RSA signature. Clients that support SSL or TLS versions greater than SSLv2 are supposed to use a special form of padding. A server that supports greater than SSLv2 is supposed to reject connection attempts from a client where this special form of padding is present, because this indicates that a version rollback has occurred (i.e. both client and server support greater than SSLv2, and yet this is the version that is being requested). The implementation of this padding check inverted the logic so that the connection attempt is accepted if the padding is present, and rejected if it is absent. This means that such as server will accept a connection if a version rollback attack has occurred. Further the server will erroneously reject a connection if a normal SSLv2 connection attempt is made. Only OpenSSL 1.0.2 servers from version 1.0.2s to 1.0.2x are affected by this issue. In order to be vulnerable a 1.0.2 server must: 1) have configured SSLv2 support at compile time (this is off by default), 2) have configured SSLv2 support at runtime (this is off by default), 3) have configured SSLv2 ciphersuites (these are not in the default ciphersuite list) OpenSSL 1.1.1 does not have SSLv2 support and therefore is not vulnerable to this issue. The underlying error is in the implementation of the RSA_padding_check_SSLv23() function. This also affects the RSA_SSLV23_PADDING padding mode used by various other functions. Although 1.1.1 does not support SSLv2 the RSA_padding_check_SSLv23() function still exists, as does the RSA_SSLV23_PADDING padding mode. Applications that directly call that function or use that padding mode will encounter this issue. However since there is no support for the SSLv2 protocol in 1.1.1 this is considered a bug and not a security issue in that version. OpenSSL 1.0.2...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.7      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.1.1j-r0]   |"
              },
              "properties": {
                "security-severity": "3.7"
              }
            },
            {
              "id": "CVE-2021-23839_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2021-23839] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "OpenSSL 1.0.2 supports SSLv2. If a client attempts to negotiate SSLv2 with a server that is configured to support both SSLv2 and more recent SSL and TLS versions then a check is made for a version rollback attack when unpadding an RSA signature. Clients that support SSL or TLS versions greater than SSLv2 are supposed to use a special form of padding. A server that supports greater than SSLv2 is supposed to reject connection attempts from a client where this special form of padding is present, because this indicates that a version rollback has occurred (i.e. both client and server support greater than SSLv2, and yet this is the version that is being requested). The implementation of this padding check inverted the logic so that the connection attempt is accepted if the padding is present, and rejected if it is absent. This means that such as server will accept a connection if a version rollback attack has occurred. Further the server will erroneously reject a connection if a normal SSLv2 connection attempt is made. Only OpenSSL 1.0.2 servers from version 1.0.2s to 1.0.2x are affected by this issue. In order to be vulnerable a 1.0.2 server must: 1) have configured SSLv2 support at compile time (this is off by default), 2) have configured SSLv2 support at runtime (this is off by default), 3) have configured SSLv2 ciphersuites (these are not in the default ciphersuite list) OpenSSL 1.1.1 does not have SSLv2 support and therefore is not vulnerable to this issue. The underlying error is in the implementation of the RSA_padding_check_SSLv23() function. This also affects the RSA_SSLV23_PADDING padding mode used by various other functions. Although 1.1.1 does not support SSLv2 the RSA_padding_check_SSLv23() function still exists, as does the RSA_SSLV23_PADDING padding mode. Applications that directly call that function or use that padding mode will encounter this issue. However since there is no support for the SSLv2 protocol in 1.1.1 this is considered a bug and not a security issue in that version. OpenSSL 1.0.2...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.7      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.1.1j-r0]   |"
              },
              "properties": {
                "security-severity": "3.7"
              }
            },
            {
              "id": "CVE-2019-1563_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2019-1563] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "In situations where an attacker receives automated notification of the success or failure of a decryption attempt an attacker, after sending a very large number of messages to be decrypted, can recover a CMS/PKCS7 transported encryption key or decrypt any RSA encrypted message that was encrypted with the public RSA key, using a Bleichenbacher padding oracle attack. Applications are not affected if they use a certificate together with the private RSA key to the CMS_decrypt or PKCS7_decrypt functions to select the correct recipient info to decrypt. Fixed in OpenSSL 1.1.1d (Affected 1.1.1-1.1.1c). Fixed in OpenSSL 1.1.0l (Affected 1.1.0-1.1.0k). Fixed in OpenSSL 1.0.2t (Affected 1.0.2-1.0.2s).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.7      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.0.2t-r0]   |"
              },
              "properties": {
                "security-severity": "3.7"
              }
            },
            {
              "id": "CVE-2020-1968_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2020-1968] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "The Raccoon attack exploits a flaw in the TLS specification which can lead to an attacker being able to compute the pre-master secret in connections which have used a Diffie-Hellman (DH) based ciphersuite. In such a case this would result in the attacker being able to eavesdrop on all encrypted communications sent over that TLS connection. The attack can only be exploited if an implementation re-uses a DH secret across multiple TLS connections. Note that this issue only impacts DH ciphersuites and not ECDH ciphersuites. This issue affects OpenSSL 1.0.2 which is out of support and no longer receiving public updates. OpenSSL 1.1.1 is not vulnerable to this issue. Fixed in OpenSSL 1.0.2w (Affected 1.0.2-1.0.2v).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.7      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "3.7"
              }
            },
            {
              "id": "CVE-2019-1563_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2019-1563] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "In situations where an attacker receives automated notification of the success or failure of a decryption attempt an attacker, after sending a very large number of messages to be decrypted, can recover a CMS/PKCS7 transported encryption key or decrypt any RSA encrypted message that was encrypted with the public RSA key, using a Bleichenbacher padding oracle attack. Applications are not affected if they use a certificate together with the private RSA key to the CMS_decrypt or PKCS7_decrypt functions to select the correct recipient info to decrypt. Fixed in OpenSSL 1.1.1d (Affected 1.1.1-1.1.1c). Fixed in OpenSSL 1.1.0l (Affected 1.1.0-1.1.0k). Fixed in OpenSSL 1.0.2t (Affected 1.0.2-1.0.2s).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.7      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.0.2t-r0]   |"
              },
              "properties": {
                "security-severity": "3.7"
              }
            },
            {
              "id": "CVE-2024-1394_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2024-1394] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "A memory leak flaw was found in Golang in the RSA encrypting/decrypting code, which might lead to a resource exhaustion vulnerability using attacker-controlled inputs​. The memory leak happens in github.com/golang-fips/openssl/openssl/rsa.go#L113. The objects leaked are pkey​ and ctx​. That function uses named return parameters to free pkey​ and ctx​ if there is an error initializing the context or setting the different properties. All return statements related to error cases follow the \"return nil, nil, fail(...)\" pattern, meaning that pkey​ and ctx​ will be nil inside the deferred function that should free them.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-6237_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2023-6237] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "Issue summary: Checking excessively long invalid RSA public keys may take\na long time.\n\nImpact summary: Applications that use the function EVP_PKEY_public_check()\nto check RSA public keys may experience long delays. Where the key that\nis being checked has been obtained from an untrusted source this may lead\nto a Denial of Service.\n\nWhen function EVP_PKEY_public_check() is called on RSA public keys,\na computation is done to confirm that the RSA modulus, n, is composite.\nFor valid RSA keys, n is a product of two or more large primes and this\ncomputation completes quickly. However, if n is an overly large prime,\nthen this computation would take a long time.\n\nAn application that calls EVP_PKEY_public_check() and supplies an RSA key\nobtained from an untrusted source could be vulnerable to a Denial of Service\nattack.\n\nThe function EVP_PKEY_public_check() is not called from other OpenSSL\nfunctions however it is called from the OpenSSL pkey command line\napplication. For that reason that application is also vulnerable if used\nwith the '-pubin' and '-check' options on untrusted data.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.1.4-r4]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2511_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2024-2511] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "Issue summary: Some non-default TLS server configurations can cause unbounded\nmemory growth when processing TLSv1.3 sessions\n\nImpact summary: An attacker may exploit certain server configurations to trigger\nunbounded memory growth that would lead to a Denial of Service\n\nThis problem can occur in TLSv1.3 if the non-default SSL_OP_NO_TICKET option is\nbeing used (but not if early_data support is also configured and the default\nanti-replay protection is in use). In this case, under certain conditions, the\nsession cache can get into an incorrect state and it will fail to flush properly\nas it fills. The session cache will continue to grow in an unbounded manner. A\nmalicious client could deliberately create the scenario for this failure to\nforce a Denial of Service. It may also happen by accident in normal operation.\n\nThis issue only affects TLS servers supporting TLSv1.3. It does not affect TLS\nclients.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue. OpenSSL\n1.0.2 is also not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.2.1-r2]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-34459_3.8:libxml2_2.9.8-r0",
              "shortDescription": {
                "text": "[CVE-2024-34459] 3.8:libxml2 2.9.8-r0"
              },
              "help": {
                "text": "An issue was discovered in xmllint (from libxml2) before 2.11.8 and 2.12.x before 2.12.7. Formatting error messages with xmllint --htmlout can result in a buffer over-read in xmlHTMLPrintFileContext in xmllint.c.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.12.7-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-6237_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2023-6237] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "Issue summary: Checking excessively long invalid RSA public keys may take\na long time.\n\nImpact summary: Applications that use the function EVP_PKEY_public_check()\nto check RSA public keys may experience long delays. Where the key that\nis being checked has been obtained from an untrusted source this may lead\nto a Denial of Service.\n\nWhen function EVP_PKEY_public_check() is called on RSA public keys,\na computation is done to confirm that the RSA modulus, n, is composite.\nFor valid RSA keys, n is a product of two or more large primes and this\ncomputation completes quickly. However, if n is an overly large prime,\nthen this computation would take a long time.\n\nAn application that calls EVP_PKEY_public_check() and supplies an RSA key\nobtained from an untrusted source could be vulnerable to a Denial of Service\nattack.\n\nThe function EVP_PKEY_public_check() is not called from other OpenSSL\nfunctions however it is called from the OpenSSL pkey command line\napplication. For that reason that application is also vulnerable if used\nwith the '-pubin' and '-check' options on untrusted data.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.1.4-r4]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-1394_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2024-1394] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "A memory leak flaw was found in Golang in the RSA encrypting/decrypting code, which might lead to a resource exhaustion vulnerability using attacker-controlled inputs​. The memory leak happens in github.com/golang-fips/openssl/openssl/rsa.go#L113. The objects leaked are pkey​ and ctx​. That function uses named return parameters to free pkey​ and ctx​ if there is an error initializing the context or setting the different properties. All return statements related to error cases follow the \"return nil, nil, fail(...)\" pattern, meaning that pkey​ and ctx​ will be nil inside the deferred function that should free them.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2511_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2024-2511] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "Issue summary: Some non-default TLS server configurations can cause unbounded\nmemory growth when processing TLSv1.3 sessions\n\nImpact summary: An attacker may exploit certain server configurations to trigger\nunbounded memory growth that would lead to a Denial of Service\n\nThis problem can occur in TLSv1.3 if the non-default SSL_OP_NO_TICKET option is\nbeing used (but not if early_data support is also configured and the default\nanti-replay protection is in use). In this case, under certain conditions, the\nsession cache can get into an incorrect state and it will fail to flush properly\nas it fills. The session cache will continue to grow in an unbounded manner. A\nmalicious client could deliberately create the scenario for this failure to\nforce a Denial of Service. It may also happen by accident in normal operation.\n\nThis issue only affects TLS servers supporting TLSv1.3. It does not affect TLS\nclients.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue. OpenSSL\n1.0.2 is also not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.2.1-r2]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-4603_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2024-4603] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DSA keys or parameters may be very\nslow.\n\nImpact summary: Applications that use the functions EVP_PKEY_param_check()\nor EVP_PKEY_public_check() to check a DSA public key or DSA parameters may\nexperience long delays. Where the key or parameters that are being checked\nhave been obtained from an untrusted source this may lead to a Denial of\nService.\n\nThe functions EVP_PKEY_param_check() or EVP_PKEY_public_check() perform\nvarious checks on DSA parameters. Some of those computations take a long time\nif the modulus (`p` parameter) is too large.\n\nTrying to use a very large modulus is slow and OpenSSL will not allow using\npublic keys with a modulus which is over 10,000 bits in length for signature\nverification. However the key and parameter check functions do not limit\nthe modulus size when performing the checks.\n\nAn application that calls EVP_PKEY_param_check() or EVP_PKEY_public_check()\nand supplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nThese functions are not called by OpenSSL itself on untrusted DSA keys so\nonly applications that directly call these functions may be vulnerable.\n\nAlso vulnerable are the OpenSSL pkey and pkeyparam command line applications\nwhen using the `-check` option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.3.0-r2]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-4603_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2024-4603] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DSA keys or parameters may be very\nslow.\n\nImpact summary: Applications that use the functions EVP_PKEY_param_check()\nor EVP_PKEY_public_check() to check a DSA public key or DSA parameters may\nexperience long delays. Where the key or parameters that are being checked\nhave been obtained from an untrusted source this may lead to a Denial of\nService.\n\nThe functions EVP_PKEY_param_check() or EVP_PKEY_public_check() perform\nvarious checks on DSA parameters. Some of those computations take a long time\nif the modulus (`p` parameter) is too large.\n\nTrying to use a very large modulus is slow and OpenSSL will not allow using\npublic keys with a modulus which is over 10,000 bits in length for signature\nverification. However the key and parameter check functions do not limit\nthe modulus size when performing the checks.\n\nAn application that calls EVP_PKEY_param_check() or EVP_PKEY_public_check()\nand supplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nThese functions are not called by OpenSSL itself on untrusted DSA keys so\nonly applications that directly call these functions may be vulnerable.\n\nAlso vulnerable are the OpenSSL pkey and pkeyparam command line applications\nwhen using the `-check` option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.3.0-r2]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2018-25014_3.8:libwebp_1.0.0-r0",
              "shortDescription": {
                "text": "[CVE-2018-25014] 3.8:libwebp 1.0.0-r0"
              },
              "help": {
                "text": "A use of uninitialized value was found in libwebp in versions before 1.0.1 in ReadSymbol().",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-49210_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2023-49210] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "The openssl (aka node-openssl) NPM package through 2.0.0 was characterized as \"a nonsense wrapper with no real purpose\" by its author, and accepts an opts argument that contains a verb field (used for command execution). NOTE: This vulnerability only affects products that are no longer supported by the maintainer.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-2068_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2022-2068] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "In addition to the c_rehash shell command injection identified in CVE-2022-1292, further circumstances where the c_rehash script does not properly sanitise shell metacharacters to prevent command injection were found by code review. When the CVE-2022-1292 was fixed it was not discovered that there are other places in the script where the file names of certificates being hashed were possibly passed to a command executed through the shell. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.4 (Affected 3.0.0,3.0.1,3.0.2,3.0.3). Fixed in OpenSSL 1.1.1p (Affected 1.1.1-1.1.1o). Fixed in OpenSSL 1.0.2zf (Affected 1.0.2-1.0.2ze).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2021-3711_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2021-3711] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "In order to decrypt SM2 encrypted data an application is expected to call the API function EVP_PKEY_decrypt(). Typically an application will call this function twice. The first time, on entry, the \"out\" parameter can be NULL and, on exit, the \"outlen\" parameter is populated with the buffer size required to hold the decrypted plaintext. The application can then allocate a sufficiently sized buffer and call EVP_PKEY_decrypt() again, but this time passing a non-NULL value for the \"out\" parameter. A bug in the implementation of the SM2 decryption code means that the calculation of the buffer size required to hold the plaintext returned by the first call to EVP_PKEY_decrypt() can be smaller than the actual size required by the second call. This can lead to a buffer overflow when EVP_PKEY_decrypt() is called by the application a second time with a buffer that is too small. A malicious attacker who is able present SM2 content for decryption to an application could cause attacker chosen data to overflow the buffer by up to a maximum of 62 bytes altering the contents of other data held after the buffer, possibly changing application behaviour or causing the application to crash. The location of the buffer is application dependent but is typically heap allocated. Fixed in OpenSSL 1.1.1l (Affected 1.1.1-1.1.1k).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.1.1l-r0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-49210_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2023-49210] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "The openssl (aka node-openssl) NPM package through 2.0.0 was characterized as \"a nonsense wrapper with no real purpose\" by its author, and accepts an opts argument that contains a verb field (used for command execution). NOTE: This vulnerability only affects products that are no longer supported by the maintainer.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2020-36331_3.8:libwebp_1.0.0-r0",
              "shortDescription": {
                "text": "[CVE-2020-36331] 3.8:libwebp 1.0.0-r0"
              },
              "help": {
                "text": "A flaw was found in libwebp in versions before 1.0.1. An out-of-bounds read was found in function ChunkAssignData. The highest threat from this vulnerability is to data confidentiality and to the service availability.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.1      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.1"
              }
            },
            {
              "id": "CVE-2022-1292_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2022-1292] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "The c_rehash script does not properly sanitise shell metacharacters to prevent command injection. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.3 (Affected 3.0.0,3.0.1,3.0.2). Fixed in OpenSSL 1.1.1o (Affected 1.1.1-1.1.1n). Fixed in OpenSSL 1.0.2ze (Affected 1.0.2-1.0.2zd).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-27404_3.8:freetype_2.9.1-r1",
              "shortDescription": {
                "text": "[CVE-2022-27404] 3.8:freetype 2.9.1-r1"
              },
              "help": {
                "text": "FreeType commit 1e2eb65048f75c64b68708efed6ce904c31f3b2f was discovered to contain a heap buffer overflow via the function sfnt_init_face.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.12.1-r0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2020-36329_3.8:libwebp_1.0.0-r0",
              "shortDescription": {
                "text": "[CVE-2020-36329] 3.8:libwebp 1.0.0-r0"
              },
              "help": {
                "text": "A flaw was found in libwebp in versions before 1.0.1. A use-after-free was found due to a thread being killed too early. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-37434_3.8:zlib_1.2.11-r1",
              "shortDescription": {
                "text": "[CVE-2022-37434] 3.8:zlib 1.2.11-r1"
              },
              "help": {
                "text": "zlib through 1.2.12 has a heap-based buffer over-read or buffer overflow in inflate in inflate.c via a large gzip header extra field. NOTE: only applications that call inflateGetHeader are affected. Some common applications bundle the affected zlib source code but may be unable to call inflateGetHeader (e.g., see the nodejs/node reference).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar `       | [1.2.12-r2]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2021-3711_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2021-3711] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "In order to decrypt SM2 encrypted data an application is expected to call the API function EVP_PKEY_decrypt(). Typically an application will call this function twice. The first time, on entry, the \"out\" parameter can be NULL and, on exit, the \"outlen\" parameter is populated with the buffer size required to hold the decrypted plaintext. The application can then allocate a sufficiently sized buffer and call EVP_PKEY_decrypt() again, but this time passing a non-NULL value for the \"out\" parameter. A bug in the implementation of the SM2 decryption code means that the calculation of the buffer size required to hold the plaintext returned by the first call to EVP_PKEY_decrypt() can be smaller than the actual size required by the second call. This can lead to a buffer overflow when EVP_PKEY_decrypt() is called by the application a second time with a buffer that is too small. A malicious attacker who is able present SM2 content for decryption to an application could cause attacker chosen data to overflow the buffer by up to a maximum of 62 bytes altering the contents of other data held after the buffer, possibly changing application behaviour or causing the application to crash. The location of the buffer is application dependent but is typically heap allocated. Fixed in OpenSSL 1.1.1l (Affected 1.1.1-1.1.1k).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.1.1l-r0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2018-25011_3.8:libwebp_1.0.0-r0",
              "shortDescription": {
                "text": "[CVE-2018-25011] 3.8:libwebp 1.0.0-r0"
              },
              "help": {
                "text": "A heap-based buffer overflow was found in libwebp in versions before 1.0.1 in PutLE16().",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-1292_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2022-1292] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "The c_rehash script does not properly sanitise shell metacharacters to prevent command injection. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.3 (Affected 3.0.0,3.0.1,3.0.2). Fixed in OpenSSL 1.1.1o (Affected 1.1.1-1.1.1n). Fixed in OpenSSL 1.0.2ze (Affected 1.0.2-1.0.2zd).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2018-25010_3.8:libwebp_1.0.0-r0",
              "shortDescription": {
                "text": "[CVE-2018-25010] 3.8:libwebp 1.0.0-r0"
              },
              "help": {
                "text": "A heap-based buffer overflow was found in libwebp in versions before 1.0.1 in ApplyFilter().",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.1      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.1"
              }
            },
            {
              "id": "CVE-2022-2068_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2022-2068] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "In addition to the c_rehash shell command injection identified in CVE-2022-1292, further circumstances where the c_rehash script does not properly sanitise shell metacharacters to prevent command injection were found by code review. When the CVE-2022-1292 was fixed it was not discovered that there are other places in the script where the file names of certificates being hashed were possibly passed to a command executed through the shell. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.4 (Affected 3.0.0,3.0.1,3.0.2,3.0.3). Fixed in OpenSSL 1.1.1p (Affected 1.1.1-1.1.1o). Fixed in OpenSSL 1.0.2zf (Affected 1.0.2-1.0.2ze).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2018-25009_3.8:libwebp_1.0.0-r0",
              "shortDescription": {
                "text": "[CVE-2018-25009] 3.8:libwebp 1.0.0-r0"
              },
              "help": {
                "text": "A heap-based buffer overflow was found in libwebp in versions before 1.0.1 in GetLE16().",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.1      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.1"
              }
            },
            {
              "id": "CVE-2019-12900_3.8:libbz2_1.0.6-r6",
              "shortDescription": {
                "text": "[CVE-2019-12900] 3.8:libbz2 1.0.6-r6"
              },
              "help": {
                "text": "BZ2_decompress in decompress.c in bzip2 through 1.0.6 has an out-of-bounds write when there are many selectors.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.0.6-r7]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2021-3712_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2021-3712] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "ASN.1 strings are represented internally within OpenSSL as an ASN1_STRING structure which contains a buffer holding the string data and a field holding the buffer length. This contrasts with normal C strings which are repesented as a buffer for the string data which is terminated with a NUL (0) byte. Although not a strict requirement, ASN.1 strings that are parsed using OpenSSL's own \"d2i\" functions (and other similar parsing functions) as well as any string whose value has been set with the ASN1_STRING_set() function will additionally NUL terminate the byte array in the ASN1_STRING structure. However, it is possible for applications to directly construct valid ASN1_STRING structures which do not NUL terminate the byte array by directly setting the \"data\" and \"length\" fields in the ASN1_STRING array. This can also happen by using the ASN1_STRING_set0() function. Numerous OpenSSL functions that print ASN.1 data have been found to assume that the ASN1_STRING byte array will be NUL terminated, even though this is not guaranteed for strings that have been directly constructed. Where an application requests an ASN.1 structure to be printed, and where that ASN.1 structure contains ASN1_STRINGs that have been directly constructed by the application without NUL terminating the \"data\" field, then a read buffer overrun can occur. The same thing can also occur during name constraints processing of certificates (for example if a certificate has been directly constructed by the application instead of loading it via the OpenSSL parsing functions, and the certificate contains non NUL terminated ASN1_STRING structures). It can also occur in the X509_get1_email(), X509_REQ_get1_email() and X509_get1_ocsp() functions. If a malicious actor can cause an application to directly construct an ASN1_STRING and then process it through one of the affected OpenSSL functions then this issue could be hit. This might result in a crash (causing a Denial of Service attack). It could also result in the disclosure of private memory content...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.4      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.1.1l-r0]   |"
              },
              "properties": {
                "security-severity": "7.4"
              }
            },
            {
              "id": "CVE-2022-40304_3.8:libxml2_2.9.8-r0",
              "shortDescription": {
                "text": "[CVE-2022-40304] 3.8:libxml2 2.9.8-r0"
              },
              "help": {
                "text": "An issue was discovered in libxml2 before 2.10.3. Certain invalid XML entity definitions can corrupt a hash table key, potentially leading to subsequent logic errors. In one case, a double-free can be provoked.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.10.3-r0]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2023-0401_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2023-0401] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "A NULL pointer can be dereferenced when signatures are being\nverified on PKCS7 signed or signedAndEnveloped data. In case the hash\nalgorithm used for the signature is known to the OpenSSL library but\nthe implementation of the hash algorithm is not available the digest\ninitialization will fail. There is a missing check for the return\nvalue from the initialization function which later leads to invalid\nusage of the digest API most likely leading to a crash.\n\nThe unavailability of an algorithm can be caused by using FIPS\nenabled configuration of providers or more commonly by not loading\nthe legacy provider.\n\nPKCS7 data is processed by the SMIME library calls and also by the\ntime stamp (TS) library calls. The TLS implementation in OpenSSL does\nnot call these functions however third party applications would be\naffected if they call these functions to verify signatures on untrusted\ndata.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0286_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2023-0286] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "There is a type confusion vulnerability relating to X.400 address processing\ninside an X.509 GeneralName. X.400 addresses were parsed as an ASN1_STRING but\nthe public structure definition for GENERAL_NAME incorrectly specified the type\nof the x400Address field as ASN1_TYPE. This field is subsequently interpreted by\nthe OpenSSL function GENERAL_NAME_cmp as an ASN1_TYPE rather than an\nASN1_STRING.\n\nWhen CRL checking is enabled (i.e. the application sets the\nX509_V_FLAG_CRL_CHECK flag), this vulnerability may allow an attacker to pass\narbitrary pointers to a memcmp call, enabling them to read memory contents or\nenact a denial of service. In most cases, the attack requires the attacker to\nprovide both the certificate chain and CRL, neither of which need to have a\nvalid signature. If the attacker only controls one of these inputs, the other\ninput must already contain an X.400 address as a CRL distribution point, which\nis uncommon. As such, this vulnerability is most likely to only affect\napplications which have implemented their own functionality for retrieving CRLs\nover a network.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.4      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.4"
              }
            },
            {
              "id": "CVE-2023-0216_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2023-0216] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "An invalid pointer dereference on read can be triggered when an\napplication tries to load malformed PKCS7 data with the\nd2i_PKCS7(), d2i_PKCS7_bio() or d2i_PKCS7_fp() functions.\n\nThe result of the dereference is an application crash which could\nlead to a denial of service attack. The TLS implementation in OpenSSL\ndoes not call this function however third party applications might\ncall these functions on untrusted data.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-5363_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2023-5363] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "Issue summary: A bug has been identified in the processing of key and\ninitialisation vector (IV) lengths.  This can lead to potential truncation\nor overruns during the initialisation of some symmetric ciphers.\n\nImpact summary: A truncation in the IV can result in non-uniqueness,\nwhich could result in loss of confidentiality for some cipher modes.\n\nWhen calling EVP_EncryptInit_ex2(), EVP_DecryptInit_ex2() or\nEVP_CipherInit_ex2() the provided OSSL_PARAM array is processed after\nthe key and IV have been established.  Any alterations to the key length,\nvia the \"keylen\" parameter or the IV length, via the \"ivlen\" parameter,\nwithin the OSSL_PARAM array will not take effect as intended, potentially\ncausing truncation or overreading of these values.  The following ciphers\nand cipher modes are impacted: RC2, RC4, RC5, CCM, GCM and OCB.\n\nFor the CCM, GCM and OCB cipher modes, truncation of the IV can result in\nloss of confidentiality.  For example, when following NIST's SP 800-38D\nsection 8.2.1 guidance for constructing a deterministic IV for AES in\nGCM mode, truncation of the counter portion could lead to IV reuse.\n\nBoth truncations and overruns of the key and overruns of the IV will\nproduce incorrect results and could, in some cases, trigger a memory\nexception.  However, these issues are not currently assessed as security\ncritical.\n\nChanging the key and/or IV lengths is not considered to be a common operation\nand the vulnerable API was recently introduced. Furthermore it is likely that\napplication developers will have spotted this problem during testing since\ndecryption would fail unless both peers in the communication were similarly\nvulnerable. For these reasons we expect the probability of an application being\nvulnerable to this to be quite low. However if an application is vulnerable then\nthis issue is considered very serious. For these reasons we have assessed this\nissue as Moderate severity overall.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.1.4-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0217_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2023-0217] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "An invalid pointer dereference on read can be triggered when an\napplication tries to check a malformed DSA public key by the\nEVP_PKEY_public_check() function. This will most likely lead\nto an application crash. This function can be called on public\nkeys supplied from untrusted sources which could allow an attacker\nto cause a denial of service attack.\n\nThe TLS implementation in OpenSSL does not call this function\nbut applications might call the function if there are additional\nsecurity requirements imposed by standards such as FIPS 140-3.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-27405_3.8:freetype_2.9.1-r1",
              "shortDescription": {
                "text": "[CVE-2022-27405] 3.8:freetype 2.9.1-r1"
              },
              "help": {
                "text": "FreeType commit 53dfdcd8198d2b3201a23c4bad9190519ba918db was discovered to contain a segmentation violation via the function FNT_Size_Request.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.12.1-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-2309_3.8:libxml2_2.9.8-r0",
              "shortDescription": {
                "text": "[CVE-2022-2309] 3.8:libxml2 2.9.8-r0"
              },
              "help": {
                "text": "NULL Pointer Dereference allows attackers to cause a denial of service (or application crash). This only applies when lxml is used together with libxml2 2.9.10 through 2.9.14. libxml2 2.9.9 and earlier are not affected. It allows triggering crashes through forged input data, given a vulnerable code sequence in the application. The vulnerability is caused by the iterwalk function (also used by the canonicalize function). Such code shouldn't be in wide-spread use, given that parsing + iterwalk would usually be replaced with the more efficient iterparse function. However, an XML converter that serialises to C14N would also be vulnerable, for example, and there are legitimate use cases for this code sequence. If untrusted input is received (also remotely) and processed via iterwalk function, a crash can be triggered.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.10.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0215_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2023-0215] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "The public API function BIO_new_NDEF is a helper function used for streaming\nASN.1 data via a BIO. It is primarily used internally to OpenSSL to support the\nSMIME, CMS and PKCS7 streaming capabilities, but may also be called directly by\nend user applications.\n\nThe function receives a BIO from the caller, prepends a new BIO_f_asn1 filter\nBIO onto the front of it to form a BIO chain, and then returns the new head of\nthe BIO chain to the caller. Under certain conditions, for example if a CMS\nrecipient public key is invalid, the new filter BIO is freed and the function\nreturns a NULL result indicating a failure. However, in this case, the BIO chain\nis not properly cleaned up and the BIO passed by the caller still retains\ninternal pointers to the previously freed filter BIO. If the caller then goes on\nto call BIO_pop() on the BIO then a use-after-free will occur. This will most\nlikely result in a crash.\n\n\n\nThis scenario occurs directly in the internal function B64_write_ASN1() which\nmay cause BIO_new_NDEF() to be called and will subsequently call BIO_pop() on\nthe BIO. This internal function is in turn called by the public API functions\nPEM_write_bio_ASN1_stream, PEM_write_bio_CMS_stream, PEM_write_bio_PKCS7_stream,\nSMIME_write_ASN1, SMIME_write_CMS and SMIME_write_PKCS7.\n\nOther public API functions that may be impacted by this include\ni2d_ASN1_bio_stream, BIO_new_CMS, BIO_new_PKCS7, i2d_CMS_bio_stream and\ni2d_PKCS7_bio_stream.\n\nThe OpenSSL cms and smime command line applications are similarly affected.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0464_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2023-0464] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "A security vulnerability has been identified in all supported versions\n\nof OpenSSL related to the verification of X.509 certificate chains\nthat include policy constraints.  Attackers may be able to exploit this\nvulnerability by creating a malicious certificate chain that triggers\nexponential use of computational resources, leading to a denial-of-service\n(DoS) attack on affected systems.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.1.0-r1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-5363_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2023-5363] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "Issue summary: A bug has been identified in the processing of key and\ninitialisation vector (IV) lengths.  This can lead to potential truncation\nor overruns during the initialisation of some symmetric ciphers.\n\nImpact summary: A truncation in the IV can result in non-uniqueness,\nwhich could result in loss of confidentiality for some cipher modes.\n\nWhen calling EVP_EncryptInit_ex2(), EVP_DecryptInit_ex2() or\nEVP_CipherInit_ex2() the provided OSSL_PARAM array is processed after\nthe key and IV have been established.  Any alterations to the key length,\nvia the \"keylen\" parameter or the IV length, via the \"ivlen\" parameter,\nwithin the OSSL_PARAM array will not take effect as intended, potentially\ncausing truncation or overreading of these values.  The following ciphers\nand cipher modes are impacted: RC2, RC4, RC5, CCM, GCM and OCB.\n\nFor the CCM, GCM and OCB cipher modes, truncation of the IV can result in\nloss of confidentiality.  For example, when following NIST's SP 800-38D\nsection 8.2.1 guidance for constructing a deterministic IV for AES in\nGCM mode, truncation of the counter portion could lead to IV reuse.\n\nBoth truncations and overruns of the key and overruns of the IV will\nproduce incorrect results and could, in some cases, trigger a memory\nexception.  However, these issues are not currently assessed as security\ncritical.\n\nChanging the key and/or IV lengths is not considered to be a common operation\nand the vulnerable API was recently introduced. Furthermore it is likely that\napplication developers will have spotted this problem during testing since\ndecryption would fail unless both peers in the communication were similarly\nvulnerable. For these reasons we expect the probability of an application being\nvulnerable to this to be quite low. However if an application is vulnerable then\nthis issue is considered very serious. For these reasons we have assessed this\nissue as Moderate severity overall.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.1.4-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-4863_3.8:libwebp_1.0.0-r0",
              "shortDescription": {
                "text": "[CVE-2023-4863] 3.8:libwebp 1.0.0-r0"
              },
              "help": {
                "text": "Heap buffer overflow in libwebp in Google Chrome prior to 116.0.5845.187 and libwebp 1.3.2 allowed a remote attacker to perform an out of bounds memory write via a crafted HTML page. (Chromium security severity: Critical)",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.8      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.3.1-r1]   |"
              },
              "properties": {
                "security-severity": "8.8"
              }
            },
            {
              "id": "CVE-2023-0217_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2023-0217] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "An invalid pointer dereference on read can be triggered when an\napplication tries to check a malformed DSA public key by the\nEVP_PKEY_public_check() function. This will most likely lead\nto an application crash. This function can be called on public\nkeys supplied from untrusted sources which could allow an attacker\nto cause a denial of service attack.\n\nThe TLS implementation in OpenSSL does not call this function\nbut applications might call the function if there are additional\nsecurity requirements imposed by standards such as FIPS 140-3.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0215_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2023-0215] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "The public API function BIO_new_NDEF is a helper function used for streaming\nASN.1 data via a BIO. It is primarily used internally to OpenSSL to support the\nSMIME, CMS and PKCS7 streaming capabilities, but may also be called directly by\nend user applications.\n\nThe function receives a BIO from the caller, prepends a new BIO_f_asn1 filter\nBIO onto the front of it to form a BIO chain, and then returns the new head of\nthe BIO chain to the caller. Under certain conditions, for example if a CMS\nrecipient public key is invalid, the new filter BIO is freed and the function\nreturns a NULL result indicating a failure. However, in this case, the BIO chain\nis not properly cleaned up and the BIO passed by the caller still retains\ninternal pointers to the previously freed filter BIO. If the caller then goes on\nto call BIO_pop() on the BIO then a use-after-free will occur. This will most\nlikely result in a crash.\n\n\n\nThis scenario occurs directly in the internal function B64_write_ASN1() which\nmay cause BIO_new_NDEF() to be called and will subsequently call BIO_pop() on\nthe BIO. This internal function is in turn called by the public API functions\nPEM_write_bio_ASN1_stream, PEM_write_bio_CMS_stream, PEM_write_bio_PKCS7_stream,\nSMIME_write_ASN1, SMIME_write_CMS and SMIME_write_PKCS7.\n\nOther public API functions that may be impacted by this include\ni2d_ASN1_bio_stream, BIO_new_CMS, BIO_new_PKCS7, i2d_CMS_bio_stream and\ni2d_PKCS7_bio_stream.\n\nThe OpenSSL cms and smime command line applications are similarly affected.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-3712_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2021-3712] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "ASN.1 strings are represented internally within OpenSSL as an ASN1_STRING structure which contains a buffer holding the string data and a field holding the buffer length. This contrasts with normal C strings which are repesented as a buffer for the string data which is terminated with a NUL (0) byte. Although not a strict requirement, ASN.1 strings that are parsed using OpenSSL's own \"d2i\" functions (and other similar parsing functions) as well as any string whose value has been set with the ASN1_STRING_set() function will additionally NUL terminate the byte array in the ASN1_STRING structure. However, it is possible for applications to directly construct valid ASN1_STRING structures which do not NUL terminate the byte array by directly setting the \"data\" and \"length\" fields in the ASN1_STRING array. This can also happen by using the ASN1_STRING_set0() function. Numerous OpenSSL functions that print ASN.1 data have been found to assume that the ASN1_STRING byte array will be NUL terminated, even though this is not guaranteed for strings that have been directly constructed. Where an application requests an ASN.1 structure to be printed, and where that ASN.1 structure contains ASN1_STRINGs that have been directly constructed by the application without NUL terminating the \"data\" field, then a read buffer overrun can occur. The same thing can also occur during name constraints processing of certificates (for example if a certificate has been directly constructed by the application instead of loading it via the OpenSSL parsing functions, and the certificate contains non NUL terminated ASN1_STRING structures). It can also occur in the X509_get1_email(), X509_REQ_get1_email() and X509_get1_ocsp() functions. If a malicious actor can cause an application to directly construct an ASN1_STRING and then process it through one of the affected OpenSSL functions then this issue could be hit. This might result in a crash (causing a Denial of Service attack). It could also result in the disclosure of private memory content...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.4      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.1.1l-r0]   |"
              },
              "properties": {
                "security-severity": "7.4"
              }
            },
            {
              "id": "CVE-2022-27406_3.8:freetype_2.9.1-r1",
              "shortDescription": {
                "text": "[CVE-2022-27406] 3.8:freetype 2.9.1-r1"
              },
              "help": {
                "text": "FreeType commit 22a0cccb4d9d002f33c1ba7a4b36812c7d4f46b5 was discovered to contain a segmentation violation via the function FT_Request_Size.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.12.1-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-40303_3.8:libxml2_2.9.8-r0",
              "shortDescription": {
                "text": "[CVE-2022-40303] 3.8:libxml2 2.9.8-r0"
              },
              "help": {
                "text": "An issue was discovered in libxml2 before 2.10.3. When parsing a multi-gigabyte XML document with the XML_PARSE_HUGE parser option enabled, several integer counters can overflow. This results in an attempt to access an array at a negative 2GB offset, typically leading to a segmentation fault.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.10.3-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0216_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2023-0216] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "An invalid pointer dereference on read can be triggered when an\napplication tries to load malformed PKCS7 data with the\nd2i_PKCS7(), d2i_PKCS7_bio() or d2i_PKCS7_fp() functions.\n\nThe result of the dereference is an application crash which could\nlead to a denial of service attack. The TLS implementation in OpenSSL\ndoes not call this function however third party applications might\ncall these functions on untrusted data.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0401_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2023-0401] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "A NULL pointer can be dereferenced when signatures are being\nverified on PKCS7 signed or signedAndEnveloped data. In case the hash\nalgorithm used for the signature is known to the OpenSSL library but\nthe implementation of the hash algorithm is not available the digest\ninitialization will fail. There is a missing check for the return\nvalue from the initialization function which later leads to invalid\nusage of the digest API most likely leading to a crash.\n\nThe unavailability of an algorithm can be caused by using FIPS\nenabled configuration of providers or more commonly by not loading\nthe legacy provider.\n\nPKCS7 data is processed by the SMIME library calls and also by the\ntime stamp (TS) library calls. The TLS implementation in OpenSSL does\nnot call these functions however third party applications would be\naffected if they call these functions to verify signatures on untrusted\ndata.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-33560_3.8:libgcrypt_1.8.3-r0",
              "shortDescription": {
                "text": "[CVE-2021-33560] 3.8:libgcrypt 1.8.3-r0"
              },
              "help": {
                "text": "Libgcrypt before 1.8.8 and 1.9.x before 1.9.3 mishandles ElGamal encryption because it lacks exponent blinding to address a side-channel attack against mpi_powm, and the window size is not chosen appropriately. This, for example, affects use of ElGamal in OpenPGP.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.9.4-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0464_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2023-0464] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "A security vulnerability has been identified in all supported versions\n\nof OpenSSL related to the verification of X.509 certificate chains\nthat include policy constraints.  Attackers may be able to exploit this\nvulnerability by creating a malicious certificate chain that triggers\nexponential use of computational resources, leading to a denial-of-service\n(DoS) attack on affected systems.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.1.0-r1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0286_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2023-0286] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "There is a type confusion vulnerability relating to X.400 address processing\ninside an X.509 GeneralName. X.400 addresses were parsed as an ASN1_STRING but\nthe public structure definition for GENERAL_NAME incorrectly specified the type\nof the x400Address field as ASN1_TYPE. This field is subsequently interpreted by\nthe OpenSSL function GENERAL_NAME_cmp as an ASN1_TYPE rather than an\nASN1_STRING.\n\nWhen CRL checking is enabled (i.e. the application sets the\nX509_V_FLAG_CRL_CHECK flag), this vulnerability may allow an attacker to pass\narbitrary pointers to a memcmp call, enabling them to read memory contents or\nenact a denial of service. In most cases, the attack requires the attacker to\nprovide both the certificate chain and CRL, neither of which need to have a\nvalid signature. If the attacker only controls one of these inputs, the other\ninput must already contain an X.400 address as a CRL distribution point, which\nis uncommon. As such, this vulnerability is most likely to only affect\napplications which have implemented their own functionality for retrieving CRLs\nover a network.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.4      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.4"
              }
            },
            {
              "id": "CVE-2024-25062_3.8:libxml2_2.9.8-r0",
              "shortDescription": {
                "text": "[CVE-2024-25062] 3.8:libxml2 2.9.8-r0"
              },
              "help": {
                "text": "An issue was discovered in libxml2 before 2.11.7 and 2.12.x before 2.12.5. When using the XML Reader interface with DTD validation and XInclude expansion enabled, processing crafted XML documents can lead to an xmlValidatePopElement use-after-free.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.12.5-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-2004_3.8:freetype_2.9.1-r1",
              "shortDescription": {
                "text": "[CVE-2023-2004] 3.8:freetype 2.9.1-r1"
              },
              "help": {
                "text": "An integer overflow vulnerability was discovered in Freetype in tt_hvadvance_adjust() function in src/truetype/ttgxvar.c.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2016-7798_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2016-7798] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "The openssl gem for Ruby uses the same initialization vector (IV) in GCM Mode (aes-*-gcm) when the IV is set before the key, which makes it easier for context-dependent attackers to bypass the encryption protection mechanism.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2016-7798_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2016-7798] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "The openssl gem for Ruby uses the same initialization vector (IV) in GCM Mode (aes-*-gcm) when the IV is set before the key, which makes it easier for context-dependent attackers to bypass the encryption protection mechanism.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0465_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2023-0465] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "Applications that use a non-default option when verifying certificates may be\nvulnerable to an attack from a malicious CA to circumvent certain checks.\n\nInvalid certificate policies in leaf certificates are silently ignored by\nOpenSSL and other certificate policy checks are skipped for that certificate.\nA malicious CA could use this to deliberately assert invalid certificate policies\nin order to circumvent policy checking on the certificate altogether.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.1.0-r2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-3541_3.8:libxml2_2.9.8-r0",
              "shortDescription": {
                "text": "[CVE-2021-3541] 3.8:libxml2 2.9.8-r0"
              },
              "help": {
                "text": "A flaw was found in libxml2. Exponential entity expansion attack its possible bypassing all existing protection mechanisms and leading to denial of service.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [2.9.11-r0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-0466_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2023-0466] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "The function X509_VERIFY_PARAM_add0_policy() is documented to\nimplicitly enable the certificate policy check when doing certificate\nverification. However the implementation of the function does not\nenable the check which allows certificates with invalid or incorrect\npolicies to pass the certificate verification.\n\nAs suddenly enabling the policy check could break existing deployments it was\ndecided to keep the existing behavior of the X509_VERIFY_PARAM_add0_policy()\nfunction.\n\nInstead the applications that require OpenSSL to perform certificate\npolicy check need to use X509_VERIFY_PARAM_set1_policies() or explicitly\nenable the policy check by calling X509_VERIFY_PARAM_set_flags() with\nthe X509_V_FLAG_POLICY_CHECK flag argument.\n\nCertificate policy checks are disabled by default in OpenSSL and are not\ncommonly used by applications.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.0.8-r3]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-3449_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2021-3449] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "An OpenSSL TLS server may crash if sent a maliciously crafted renegotiation ClientHello message from a client. If a TLSv1.2 renegotiation ClientHello omits the signature_algorithms extension (where it was present in the initial ClientHello), but includes a signature_algorithms_cert extension then a NULL pointer dereference will result, leading to a crash and a denial of service attack. A server is only vulnerable if it has TLSv1.2 and renegotiation enabled (which is the default configuration). OpenSSL TLS clients are not impacted by this issue. All OpenSSL 1.1.1 versions are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1k. OpenSSL 1.0.2 is not impacted by this issue. Fixed in OpenSSL 1.1.1k (Affected 1.1.1-1.1.1j).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.1.1k-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2021-3449_3.8:libcrypto1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2021-3449] 3.8:libcrypto1.0 1.0.2p-r0"
              },
              "help": {
                "text": "An OpenSSL TLS server may crash if sent a maliciously crafted renegotiation ClientHello message from a client. If a TLSv1.2 renegotiation ClientHello omits the signature_algorithms extension (where it was present in the initial ClientHello), but includes a signature_algorithms_cert extension then a NULL pointer dereference will result, leading to a crash and a denial of service attack. A server is only vulnerable if it has TLSv1.2 and renegotiation enabled (which is the default configuration). OpenSSL TLS clients are not impacted by this issue. All OpenSSL 1.1.1 versions are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1k. OpenSSL 1.0.2 is not impacted by this issue. Fixed in OpenSSL 1.1.1k (Affected 1.1.1-1.1.1j).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [1.1.1k-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-0466_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2023-0466] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "The function X509_VERIFY_PARAM_add0_policy() is documented to\nimplicitly enable the certificate policy check when doing certificate\nverification. However the implementation of the function does not\nenable the check which allows certificates with invalid or incorrect\npolicies to pass the certificate verification.\n\nAs suddenly enabling the policy check could break existing deployments it was\ndecided to keep the existing behavior of the X509_VERIFY_PARAM_add0_policy()\nfunction.\n\nInstead the applications that require OpenSSL to perform certificate\npolicy check need to use X509_VERIFY_PARAM_set1_policies() or explicitly\nenable the policy check by calling X509_VERIFY_PARAM_set_flags() with\nthe X509_V_FLAG_POLICY_CHECK flag argument.\n\nCertificate policy checks are disabled by default in OpenSSL and are not\ncommonly used by applications.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.0.8-r3]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-0465_3.8:libssl1.0_1.0.2p-r0",
              "shortDescription": {
                "text": "[CVE-2023-0465] 3.8:libssl1.0 1.0.2p-r0"
              },
              "help": {
                "text": "Applications that use a non-default option when verifying certificates may be\nvulnerable to an attack from a malicious CA to circumvent certain checks.\n\nInvalid certificate policies in leaf certificates are silently ignored by\nOpenSSL and other certificate policy checks are skipped for that certificate.\nA malicious CA could use this to deliberately assert invalid certificate policies\nin order to circumvent policy checking on the certificate altogether.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar `       | [3.1.0-r2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            }
          ],
          "version": "3.96.1"
        }
      },
      "results": [
        {
          "ruleId": "CVE-2018-1000517_3.8:busybox_1.28.4-r1",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "[CVE-2018-1000517] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-1000517_3.8:ssl_client_1.28.4-r1",
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "[CVE-2018-1000517] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-36328_3.8:libwebp_1.0.0-r0",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "[CVE-2020-36328] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-35784_3.8:libressl2.7-libssl_2.7.4-r0",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "text": "[CVE-2023-35784] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-14697_3.8:musl_1.1.19-r10",
          "ruleIndex": 4,
          "level": "error",
          "message": {
            "text": "[CVE-2019-14697] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-36159_3.8:apk-tools_2.10.1-r0",
          "ruleIndex": 5,
          "level": "error",
          "message": {
            "text": "[CVE-2021-36159] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-36330_3.8:libwebp_1.0.0-r0",
          "ruleIndex": 6,
          "level": "error",
          "message": {
            "text": "[CVE-2020-36330] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-11068_3.8:libxslt_1.1.32-r0",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "[CVE-2019-11068] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-18751_3.8:libintl_0.19.8.1-r2",
          "ruleIndex": 8,
          "level": "error",
          "message": {
            "text": "[CVE-2018-18751] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-48174_3.8:ssl_client_1.28.4-r1",
          "ruleIndex": 9,
          "level": "error",
          "message": {
            "text": "[CVE-2022-48174] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-46880_3.8:libressl2.7-libssl_2.7.4-r0",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "[CVE-2021-46880] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-48174_3.8:busybox_1.28.4-r1",
          "ruleIndex": 11,
          "level": "error",
          "message": {
            "text": "[CVE-2022-48174] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-6978_3.8:libgd_2.2.5-r1",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "[CVE-2019-6978] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-25012_3.8:libwebp_1.0.0-r0",
          "ruleIndex": 13,
          "level": "error",
          "message": {
            "text": "[CVE-2018-25012] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-35784_3.8:libressl2.7-libcrypto_2.7.4-r0",
          "ruleIndex": 14,
          "level": "error",
          "message": {
            "text": "[CVE-2023-35784] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-35784_3.8:libressl2.7-libtls_2.7.4-r0",
          "ruleIndex": 15,
          "level": "error",
          "message": {
            "text": "[CVE-2023-35784] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-46880_3.8:libressl2.7-libtls_2.7.4-r0",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "[CVE-2021-46880] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-25013_3.8:libwebp_1.0.0-r0",
          "ruleIndex": 17,
          "level": "error",
          "message": {
            "text": "[CVE-2018-25013] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-14697_3.8:musl-utils_1.1.19-r10",
          "ruleIndex": 18,
          "level": "error",
          "message": {
            "text": "[CVE-2019-14697] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-46880_3.8:libressl2.7-libcrypto_2.7.4-r0",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "[CVE-2021-46880] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-3786_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 20,
          "level": "error",
          "message": {
            "text": "[CVE-2022-3786] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-3602_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 21,
          "level": "error",
          "message": {
            "text": "[CVE-2022-3602] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4450_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 22,
          "level": "error",
          "message": {
            "text": "[CVE-2022-4450] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4450_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 23,
          "level": "error",
          "message": {
            "text": "[CVE-2022-4450] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-3786_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 24,
          "level": "error",
          "message": {
            "text": "[CVE-2022-3786] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-3602_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 25,
          "level": "error",
          "message": {
            "text": "[CVE-2022-3602] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-25032_3.8:zlib_1.2.11-r1",
          "ruleIndex": 26,
          "level": "error",
          "message": {
            "text": "[CVE-2018-25032] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-20838_3.8:pcre_8.42-r0",
          "ruleIndex": 27,
          "level": "error",
          "message": {
            "text": "[CVE-2019-20838] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42379_3.8:busybox_1.28.4-r1",
          "ruleIndex": 28,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42379] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-1967_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 29,
          "level": "error",
          "message": {
            "text": "[CVE-2020-1967] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-2201_3.8:libjpeg-turbo_1.5.3-r3",
          "ruleIndex": 30,
          "level": "error",
          "message": {
            "text": "[CVE-2019-2201] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-20679_3.8:ssl_client_1.28.4-r1",
          "ruleIndex": 31,
          "level": "error",
          "message": {
            "text": "[CVE-2018-20679] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-30560_3.8:libxslt_1.1.32-r0",
          "ruleIndex": 32,
          "level": "error",
          "message": {
            "text": "[CVE-2021-30560] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30065_3.8:busybox_1.28.4-r1",
          "ruleIndex": 33,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30065] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-20388_3.8:libxml2_2.9.8-r0",
          "ruleIndex": 34,
          "level": "error",
          "message": {
            "text": "[CVE-2019-20388] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-5747_3.8:busybox_1.28.4-r1",
          "ruleIndex": 35,
          "level": "error",
          "message": {
            "text": "[CVE-2019-5747] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-14404_3.8:libxml2_2.9.8-r0",
          "ruleIndex": 36,
          "level": "error",
          "message": {
            "text": "[CVE-2018-14404] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-18197_3.8:libxslt_1.1.32-r0",
          "ruleIndex": 37,
          "level": "error",
          "message": {
            "text": "[CVE-2019-18197] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-0778_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "[CVE-2022-0778] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42379_3.8:ssl_client_1.28.4-r1",
          "ruleIndex": 39,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42379] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42386_3.8:busybox_1.28.4-r1",
          "ruleIndex": 40,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42386] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30065_3.8:ssl_client_1.28.4-r1",
          "ruleIndex": 41,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30065] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-1543_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 42,
          "level": "error",
          "message": {
            "text": "[CVE-2019-1543] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-0778_3.8:libressl2.7-libssl_2.7.4-r0",
          "ruleIndex": 43,
          "level": "error",
          "message": {
            "text": "[CVE-2022-0778] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42381_3.8:busybox_1.28.4-r1",
          "ruleIndex": 44,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42381] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42380_3.8:ssl_client_1.28.4-r1",
          "ruleIndex": 45,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42380] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-0778_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 46,
          "level": "error",
          "message": {
            "text": "[CVE-2022-0778] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-14550_3.8:libpng_1.6.34-r1",
          "ruleIndex": 47,
          "level": "error",
          "message": {
            "text": "[CVE-2018-14550] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42383_3.8:busybox_1.28.4-r1",
          "ruleIndex": 48,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42383] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42382_3.8:ssl_client_1.28.4-r1",
          "ruleIndex": 49,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42382] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42384_3.8:busybox_1.28.4-r1",
          "ruleIndex": 50,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42384] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42380_3.8:busybox_1.28.4-r1",
          "ruleIndex": 51,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42380] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42383_3.8:ssl_client_1.28.4-r1",
          "ruleIndex": 52,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42383] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3450_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 53,
          "level": "error",
          "message": {
            "text": "[CVE-2021-3450] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2017-6363_3.8:libgd_2.2.5-r1",
          "ruleIndex": 54,
          "level": "error",
          "message": {
            "text": "[CVE-2017-6363] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-30139_3.8:apk-tools_2.10.1-r0",
          "ruleIndex": 55,
          "level": "error",
          "message": {
            "text": "[CVE-2021-30139] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-0778_3.8:libressl2.7-libcrypto_2.7.4-r0",
          "ruleIndex": 56,
          "level": "error",
          "message": {
            "text": "[CVE-2022-0778] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-14553_3.8:libgd_2.2.5-r1",
          "ruleIndex": 57,
          "level": "error",
          "message": {
            "text": "[CVE-2018-14553] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3450_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 58,
          "level": "error",
          "message": {
            "text": "[CVE-2021-3450] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-7595_3.8:libxml2_2.9.8-r0",
          "ruleIndex": 59,
          "level": "error",
          "message": {
            "text": "[CVE-2020-7595] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-28831_3.8:ssl_client_1.28.4-r1",
          "ruleIndex": 60,
          "level": "error",
          "message": {
            "text": "[CVE-2021-28831] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-1967_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 61,
          "level": "error",
          "message": {
            "text": "[CVE-2020-1967] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-28391_3.8:ssl_client_1.28.4-r1",
          "ruleIndex": 62,
          "level": "error",
          "message": {
            "text": "[CVE-2022-28391] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-28831_3.8:busybox_1.28.4-r1",
          "ruleIndex": 63,
          "level": "error",
          "message": {
            "text": "[CVE-2021-28831] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3518_3.8:libxml2_2.9.8-r0",
          "ruleIndex": 64,
          "level": "error",
          "message": {
            "text": "[CVE-2021-3518] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42385_3.8:busybox_1.28.4-r1",
          "ruleIndex": 65,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42385] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-20679_3.8:busybox_1.28.4-r1",
          "ruleIndex": 66,
          "level": "error",
          "message": {
            "text": "[CVE-2018-20679] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-19956_3.8:libxml2_2.9.8-r0",
          "ruleIndex": 67,
          "level": "error",
          "message": {
            "text": "[CVE-2019-19956] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-20330_3.8:libjpeg-turbo_1.5.3-r3",
          "ruleIndex": 68,
          "level": "error",
          "message": {
            "text": "[CVE-2018-20330] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42382_3.8:busybox_1.28.4-r1",
          "ruleIndex": 69,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42382] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42384_3.8:ssl_client_1.28.4-r1",
          "ruleIndex": 70,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42384] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-23840_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 71,
          "level": "error",
          "message": {
            "text": "[CVE-2021-23840] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-13790_3.8:libjpeg-turbo_1.5.3-r3",
          "ruleIndex": 72,
          "level": "error",
          "message": {
            "text": "[CVE-2020-13790] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42386_3.8:ssl_client_1.28.4-r1",
          "ruleIndex": 73,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42386] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42381_3.8:ssl_client_1.28.4-r1",
          "ruleIndex": 74,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42381] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-1543_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 75,
          "level": "error",
          "message": {
            "text": "[CVE-2019-1543] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-23840_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 76,
          "level": "error",
          "message": {
            "text": "[CVE-2021-23840] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42385_3.8:ssl_client_1.28.4-r1",
          "ruleIndex": 77,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42385] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-5747_3.8:ssl_client_1.28.4-r1",
          "ruleIndex": 78,
          "level": "error",
          "message": {
            "text": "[CVE-2019-5747] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42378_3.8:busybox_1.28.4-r1",
          "ruleIndex": 79,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42378] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-6977_3.8:libgd_2.2.5-r1",
          "ruleIndex": 80,
          "level": "error",
          "message": {
            "text": "[CVE-2019-6977] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3517_3.8:libxml2_2.9.8-r0",
          "ruleIndex": 81,
          "level": "error",
          "message": {
            "text": "[CVE-2021-3517] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-1999_3.8:libwebp_1.0.0-r0",
          "ruleIndex": 82,
          "level": "error",
          "message": {
            "text": "[CVE-2023-1999] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42378_3.8:ssl_client_1.28.4-r1",
          "ruleIndex": 83,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42378] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23308_3.8:libxml2_2.9.8-r0",
          "ruleIndex": 84,
          "level": "error",
          "message": {
            "text": "[CVE-2022-23308] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-28391_3.8:busybox_1.28.4-r1",
          "ruleIndex": 85,
          "level": "error",
          "message": {
            "text": "[CVE-2022-28391] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-0778_3.8:libressl2.7-libtls_2.7.4-r0",
          "ruleIndex": 86,
          "level": "error",
          "message": {
            "text": "[CVE-2022-0778] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-40145_3.8:libgd_2.2.5-r1",
          "ruleIndex": 87,
          "level": "error",
          "message": {
            "text": "[CVE-2021-40145] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-17541_3.8:libjpeg-turbo_1.5.3-r3",
          "ruleIndex": 88,
          "level": "error",
          "message": {
            "text": "[CVE-2020-17541] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2000-1254_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 89,
          "level": "error",
          "message": {
            "text": "[CVE-2000-1254] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-36332_3.8:libwebp_1.0.0-r0",
          "ruleIndex": 90,
          "level": "error",
          "message": {
            "text": "[CVE-2020-36332] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2000-1254_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 91,
          "level": "error",
          "message": {
            "text": "[CVE-2000-1254] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-2650_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 92,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-2650] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2097_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 93,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-2097] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2097_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 94,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-2097] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-2650_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 95,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-2650] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3817_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 96,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3817] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-0727_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 97,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-0727] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42363_3.8:busybox_1.28.4-r1",
          "ruleIndex": 98,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42363] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-9251_3.8:libxml2_2.9.8-r0",
          "ruleIndex": 99,
          "level": "warning",
          "message": {
            "text": "[CVE-2018-9251] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-0735_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 100,
          "level": "warning",
          "message": {
            "text": "[CVE-2018-0735] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42374_3.8:ssl_client_1.28.4-r1",
          "ruleIndex": 101,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-42374] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-38115_3.8:libgd_2.2.5-r1",
          "ruleIndex": 102,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-38115] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42364_3.8:busybox_1.28.4-r1",
          "ruleIndex": 103,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42364] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-1547_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 104,
          "level": "warning",
          "message": {
            "text": "[CVE-2019-1547] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-0734_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 105,
          "level": "warning",
          "message": {
            "text": "[CVE-2018-0734] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-2804_3.8:libjpeg-turbo_1.5.3-r3",
          "ruleIndex": 106,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-2804] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5678_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 107,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-5678] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-28484_3.8:libxml2_2.9.8-r0",
          "ruleIndex": 108,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-28484] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-1971_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 109,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-1971] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42364_3.8:ssl_client_1.28.4-r1",
          "ruleIndex": 110,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42364] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-35538_3.8:libjpeg-turbo_1.5.3-r3",
          "ruleIndex": 111,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-35538] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-28928_3.8:musl_1.1.19-r10",
          "ruleIndex": 112,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-28928] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-1559_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 113,
          "level": "warning",
          "message": {
            "text": "[CVE-2019-1559] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-29824_3.8:libxml2_2.9.8-r0",
          "ruleIndex": 114,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-29824] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-1551_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 115,
          "level": "warning",
          "message": {
            "text": "[CVE-2019-1551] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-14498_3.8:libjpeg-turbo_1.5.3-r3",
          "ruleIndex": 116,
          "level": "warning",
          "message": {
            "text": "[CVE-2018-14498] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-1549_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 117,
          "level": "warning",
          "message": {
            "text": "[CVE-2019-1549] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-1971_3.8:libressl2.7-libtls_2.7.4-r0",
          "ruleIndex": 118,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-1971] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-7317_3.8:libpng_1.6.34-r1",
          "ruleIndex": 119,
          "level": "warning",
          "message": {
            "text": "[CVE-2019-7317] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4304_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 120,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-4304] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-23841_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 121,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-23841] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-1551_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 122,
          "level": "warning",
          "message": {
            "text": "[CVE-2019-1551] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3446_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 123,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3446] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-15999_3.8:freetype_2.9.1-r1",
          "ruleIndex": 124,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-15999] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42375_3.8:ssl_client_1.28.4-r1",
          "ruleIndex": 125,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-42375] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-1255_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 126,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-1255] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2016-3709_3.8:libxml2_2.9.8-r0",
          "ruleIndex": 127,
          "level": "warning",
          "message": {
            "text": "[CVE-2016-3709] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-20205_3.8:libjpeg-turbo_1.5.3-r3",
          "ruleIndex": 128,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-20205] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-13118_3.8:libxslt_1.1.32-r0",
          "ruleIndex": 129,
          "level": "warning",
          "message": {
            "text": "[CVE-2019-13118] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-23841_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 130,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-23841] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29469_3.8:libxml2_2.9.8-r0",
          "ruleIndex": 131,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29469] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-2975_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 132,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-2975] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5678_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 133,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-5678] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-13627_3.8:libgcrypt_1.8.3-r0",
          "ruleIndex": 134,
          "level": "warning",
          "message": {
            "text": "[CVE-2019-13627] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-1971_3.8:libressl2.7-libssl_2.7.4-r0",
          "ruleIndex": 135,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-1971] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-1971_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 136,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-1971] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-6129_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 137,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-6129] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4203_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 138,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-4203] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-5407_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 139,
          "level": "warning",
          "message": {
            "text": "[CVE-2018-5407] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-11038_3.8:libgd_2.2.5-r1",
          "ruleIndex": 140,
          "level": "warning",
          "message": {
            "text": "[CVE-2019-11038] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42365_3.8:ssl_client_1.28.4-r1",
          "ruleIndex": 141,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42365] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-2975_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 142,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-2975] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-12904_3.8:libgcrypt_1.8.3-r0",
          "ruleIndex": 143,
          "level": "warning",
          "message": {
            "text": "[CVE-2019-12904] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-24977_3.8:libxml2_2.9.8-r0",
          "ruleIndex": 144,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-24977] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42366_3.8:ssl_client_1.28.4-r1",
          "ruleIndex": 145,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42366] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3446_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 146,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3446] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42374_3.8:busybox_1.28.4-r1",
          "ruleIndex": 147,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-42374] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-6129_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 148,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-6129] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-0727_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 149,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-0727] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3537_3.8:libxml2_2.9.8-r0",
          "ruleIndex": 150,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-3537] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-1255_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 151,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-1255] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-1971_3.8:libressl2.7-libcrypto_2.7.4-r0",
          "ruleIndex": 152,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-1971] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-19664_3.8:libjpeg-turbo_1.5.3-r3",
          "ruleIndex": 153,
          "level": "warning",
          "message": {
            "text": "[CVE-2018-19664] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4304_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 154,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-4304] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42366_3.8:busybox_1.28.4-r1",
          "ruleIndex": 155,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42366] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-14567_3.8:libxml2_2.9.8-r0",
          "ruleIndex": 156,
          "level": "warning",
          "message": {
            "text": "[CVE-2018-14567] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-1559_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 157,
          "level": "warning",
          "message": {
            "text": "[CVE-2019-1559] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-5711_3.8:libgd_2.2.5-r1",
          "ruleIndex": 158,
          "level": "warning",
          "message": {
            "text": "[CVE-2018-5711] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3817_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 159,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3817] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-13117_3.8:libxslt_1.1.32-r0",
          "ruleIndex": 160,
          "level": "warning",
          "message": {
            "text": "[CVE-2019-13117] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-0734_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 161,
          "level": "warning",
          "message": {
            "text": "[CVE-2018-0734] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-1549_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 162,
          "level": "warning",
          "message": {
            "text": "[CVE-2019-1549] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42375_3.8:busybox_1.28.4-r1",
          "ruleIndex": 163,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-42375] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-1547_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 164,
          "level": "warning",
          "message": {
            "text": "[CVE-2019-1547] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-14048_3.8:libpng_1.6.34-r1",
          "ruleIndex": 165,
          "level": "warning",
          "message": {
            "text": "[CVE-2018-14048] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-28928_3.8:musl-utils_1.1.19-r10",
          "ruleIndex": 166,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-28928] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-14155_3.8:pcre_8.42-r0",
          "ruleIndex": 167,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-14155] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42363_3.8:ssl_client_1.28.4-r1",
          "ruleIndex": 168,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42363] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-40528_3.8:libgcrypt_1.8.3-r0",
          "ruleIndex": 169,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-40528] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-0735_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 170,
          "level": "warning",
          "message": {
            "text": "[CVE-2018-0735] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4203_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 171,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-4203] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42365_3.8:busybox_1.28.4-r1",
          "ruleIndex": 172,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42365] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-5407_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 173,
          "level": "warning",
          "message": {
            "text": "[CVE-2018-5407] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-4160_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 174,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-4160] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-48437_3.8:libressl2.7-libssl_2.7.4-r0",
          "ruleIndex": 175,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-48437] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-4160_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 176,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-4160] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-41581_3.8:libressl2.7-libtls_2.7.4-r0",
          "ruleIndex": 177,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-41581] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2009-3767_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 178,
          "level": "warning",
          "message": {
            "text": "[CVE-2009-3767] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2012-5373_3.8:libxslt_1.1.32-r0",
          "ruleIndex": 179,
          "level": "warning",
          "message": {
            "text": "[CVE-2012-5373] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-46822_3.8:libjpeg-turbo_1.5.3-r3",
          "ruleIndex": 180,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-46822] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-4214_3.8:libpng_1.6.34-r1",
          "ruleIndex": 181,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-4214] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-41581_3.8:libressl2.7-libssl_2.7.4-r0",
          "ruleIndex": 182,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-41581] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42376_3.8:ssl_client_1.28.4-r1",
          "ruleIndex": 183,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-42376] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45322_3.8:libxml2_2.9.8-r0",
          "ruleIndex": 184,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45322] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-48437_3.8:libressl2.7-libtls_2.7.4-r0",
          "ruleIndex": 185,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-48437] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-41581_3.8:libressl2.7-libcrypto_2.7.4-r0",
          "ruleIndex": 186,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-41581] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42376_3.8:busybox_1.28.4-r1",
          "ruleIndex": 187,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-42376] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-48437_3.8:libressl2.7-libcrypto_2.7.4-r0",
          "ruleIndex": 188,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-48437] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2009-3767_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 189,
          "level": "warning",
          "message": {
            "text": "[CVE-2009-3767] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-40812_3.8:libgd_2.2.5-r1",
          "ruleIndex": 190,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-40812] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2012-2739_3.8:libxslt_1.1.32-r0",
          "ruleIndex": 191,
          "level": "warning",
          "message": {
            "text": "[CVE-2012-2739] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-3209_3.8:libxml2_2.9.8-r0",
          "ruleIndex": 192,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-3209] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-1968_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 193,
          "level": "note",
          "message": {
            "text": "[CVE-2020-1968] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-23839_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 194,
          "level": "note",
          "message": {
            "text": "[CVE-2021-23839] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-23839_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 195,
          "level": "note",
          "message": {
            "text": "[CVE-2021-23839] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-1563_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 196,
          "level": "note",
          "message": {
            "text": "[CVE-2019-1563] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-1968_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 197,
          "level": "note",
          "message": {
            "text": "[CVE-2020-1968] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-1563_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 198,
          "level": "note",
          "message": {
            "text": "[CVE-2019-1563] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-1394_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 199,
          "level": "none",
          "message": {
            "text": "[CVE-2024-1394] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-6237_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 200,
          "level": "none",
          "message": {
            "text": "[CVE-2023-6237] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2511_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 201,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2511] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-34459_3.8:libxml2_2.9.8-r0",
          "ruleIndex": 202,
          "level": "none",
          "message": {
            "text": "[CVE-2024-34459] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-6237_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 203,
          "level": "none",
          "message": {
            "text": "[CVE-2023-6237] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-1394_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 204,
          "level": "none",
          "message": {
            "text": "[CVE-2024-1394] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2511_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 205,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2511] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-4603_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 206,
          "level": "none",
          "message": {
            "text": "[CVE-2024-4603] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-4603_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 207,
          "level": "none",
          "message": {
            "text": "[CVE-2024-4603] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-25014_3.8:libwebp_1.0.0-r0",
          "ruleIndex": 208,
          "level": "error",
          "message": {
            "text": "[CVE-2018-25014] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-49210_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 209,
          "level": "error",
          "message": {
            "text": "[CVE-2023-49210] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2068_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 210,
          "level": "error",
          "message": {
            "text": "[CVE-2022-2068] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3711_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 211,
          "level": "error",
          "message": {
            "text": "[CVE-2021-3711] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-49210_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 212,
          "level": "error",
          "message": {
            "text": "[CVE-2023-49210] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-36331_3.8:libwebp_1.0.0-r0",
          "ruleIndex": 213,
          "level": "error",
          "message": {
            "text": "[CVE-2020-36331] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1292_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 214,
          "level": "error",
          "message": {
            "text": "[CVE-2022-1292] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27404_3.8:freetype_2.9.1-r1",
          "ruleIndex": 215,
          "level": "error",
          "message": {
            "text": "[CVE-2022-27404] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-36329_3.8:libwebp_1.0.0-r0",
          "ruleIndex": 216,
          "level": "error",
          "message": {
            "text": "[CVE-2020-36329] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-37434_3.8:zlib_1.2.11-r1",
          "ruleIndex": 217,
          "level": "error",
          "message": {
            "text": "[CVE-2022-37434] sha256__df64d3292fd6194b7865d7326af5255db6d81e9df29f48adde61a918fbd8c332.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3711_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 218,
          "level": "error",
          "message": {
            "text": "[CVE-2021-3711] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-25011_3.8:libwebp_1.0.0-r0",
          "ruleIndex": 219,
          "level": "error",
          "message": {
            "text": "[CVE-2018-25011] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1292_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 220,
          "level": "error",
          "message": {
            "text": "[CVE-2022-1292] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-25010_3.8:libwebp_1.0.0-r0",
          "ruleIndex": 221,
          "level": "error",
          "message": {
            "text": "[CVE-2018-25010] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2068_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 222,
          "level": "error",
          "message": {
            "text": "[CVE-2022-2068] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-25009_3.8:libwebp_1.0.0-r0",
          "ruleIndex": 223,
          "level": "error",
          "message": {
            "text": "[CVE-2018-25009] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-12900_3.8:libbz2_1.0.6-r6",
          "ruleIndex": 224,
          "level": "error",
          "message": {
            "text": "[CVE-2019-12900] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3712_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 225,
          "level": "error",
          "message": {
            "text": "[CVE-2021-3712] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-40304_3.8:libxml2_2.9.8-r0",
          "ruleIndex": 226,
          "level": "error",
          "message": {
            "text": "[CVE-2022-40304] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0401_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 227,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0401] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0286_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 228,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0286] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0216_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 229,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0216] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5363_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 230,
          "level": "error",
          "message": {
            "text": "[CVE-2023-5363] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0217_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 231,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0217] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27405_3.8:freetype_2.9.1-r1",
          "ruleIndex": 232,
          "level": "error",
          "message": {
            "text": "[CVE-2022-27405] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2309_3.8:libxml2_2.9.8-r0",
          "ruleIndex": 233,
          "level": "error",
          "message": {
            "text": "[CVE-2022-2309] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0215_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 234,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0215] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0464_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 235,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0464] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5363_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 236,
          "level": "error",
          "message": {
            "text": "[CVE-2023-5363] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-4863_3.8:libwebp_1.0.0-r0",
          "ruleIndex": 237,
          "level": "error",
          "message": {
            "text": "[CVE-2023-4863] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0217_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 238,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0217] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0215_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 239,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0215] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3712_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 240,
          "level": "error",
          "message": {
            "text": "[CVE-2021-3712] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27406_3.8:freetype_2.9.1-r1",
          "ruleIndex": 241,
          "level": "error",
          "message": {
            "text": "[CVE-2022-27406] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-40303_3.8:libxml2_2.9.8-r0",
          "ruleIndex": 242,
          "level": "error",
          "message": {
            "text": "[CVE-2022-40303] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0216_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 243,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0216] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0401_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 244,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0401] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-33560_3.8:libgcrypt_1.8.3-r0",
          "ruleIndex": 245,
          "level": "error",
          "message": {
            "text": "[CVE-2021-33560] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0464_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 246,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0464] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0286_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 247,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0286] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-25062_3.8:libxml2_2.9.8-r0",
          "ruleIndex": 248,
          "level": "error",
          "message": {
            "text": "[CVE-2024-25062] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-2004_3.8:freetype_2.9.1-r1",
          "ruleIndex": 249,
          "level": "error",
          "message": {
            "text": "[CVE-2023-2004] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2016-7798_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 250,
          "level": "error",
          "message": {
            "text": "[CVE-2016-7798] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2016-7798_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 251,
          "level": "error",
          "message": {
            "text": "[CVE-2016-7798] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0465_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 252,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-0465] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3541_3.8:libxml2_2.9.8-r0",
          "ruleIndex": 253,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-3541] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0466_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 254,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-0466] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3449_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 255,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-3449] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3449_3.8:libcrypto1.0_1.0.2p-r0",
          "ruleIndex": 256,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-3449] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0466_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 257,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-0466] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0465_3.8:libssl1.0_1.0.2p-r0",
          "ruleIndex": 258,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-0465] sha256__39e8483b9882aa8e95fb00c14e1c5dbdf32e836af4aff4bf862608e0a35bc914.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://jfrog.com/help/r/jfrog-security-documentation/jfrog-advanced-security",
          "name": "JFrog Applicability Scanner",
          "rules": [
            {
              "id": "applic_CVE-2018-1000517",
              "name": "CVE-2018-1000517",
              "shortDescription": {
                "text": "Scanner for CVE-2018-1000517"
              },
              "fullDescription": {
                "text": "The scanner checks whether the BusyBox binary supports `wget`.\n\nNote: The scanner does not check whether busybox's `wget` is executed in the image. To confirm the applicability, this should also be verified.",
                "markdown": "The scanner checks whether the BusyBox binary supports `wget`.\n\nNote: The scanner does not check whether busybox's `wget` is executed in the image. To confirm the applicability, this should also be verified."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2018-25009",
              "name": "CVE-2018-25009",
              "shortDescription": {
                "text": "Scanner for CVE-2018-25009"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are referenced:\n\n- `WebPGetInfo`\n- `WebPDecodeRGBA`\n- `WebPDecodeARGB`\n- `WebPDecodeBGRA`\n- `WebPDecodeRGB`\n- `WebPDecodeBGR`\n- `WebPDecodeYUV`\n- `WebPDecodeRGBAInto`\n- `WebPDecodeARGBInto`\n- `WebPDecodeBGRAInto`\n- `WebPDecodeRGBInto`\n- `WebPDecodeBGRInto`\n- `WebPDecodeYUVInto`\n- `WebPIAppend`\n- `WebPIUpdate`\n- `WebPGetFeatures`\n- `WebPIDecode`\n- `WebPDecode`\n- `WebPDemux`\n- `WebPAnimDecoderNew`\n- `WebPAnimDecoderGetNext`\n- `WebPMuxCreate`\n- `WebPMuxSetImage`\n- `WebPMuxPushFrame`\n- `WebPMuxGetAnimationParams`\n- `WebPMuxGetCanvasSize`\n- `WebPMuxGetFeatures`\n- `WebPMuxAssemble`\n- `WebPAnimEncoderAdd`\n- `WebPAnimEncoderAssemble`",
                "markdown": "The scanner checks whether any of the following vulnerable functions are referenced:\n\n- `WebPGetInfo`\n- `WebPDecodeRGBA`\n- `WebPDecodeARGB`\n- `WebPDecodeBGRA`\n- `WebPDecodeRGB`\n- `WebPDecodeBGR`\n- `WebPDecodeYUV`\n- `WebPDecodeRGBAInto`\n- `WebPDecodeARGBInto`\n- `WebPDecodeBGRAInto`\n- `WebPDecodeRGBInto`\n- `WebPDecodeBGRInto`\n- `WebPDecodeYUVInto`\n- `WebPIAppend`\n- `WebPIUpdate`\n- `WebPGetFeatures`\n- `WebPIDecode`\n- `WebPDecode`\n- `WebPDemux`\n- `WebPAnimDecoderNew`\n- `WebPAnimDecoderGetNext`\n- `WebPMuxCreate`\n- `WebPMuxSetImage`\n- `WebPMuxPushFrame`\n- `WebPMuxGetAnimationParams`\n- `WebPMuxGetCanvasSize`\n- `WebPMuxGetFeatures`\n- `WebPMuxAssemble`\n- `WebPAnimEncoderAdd`\n- `WebPAnimEncoderAssemble`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2018-25010",
              "name": "CVE-2018-25010",
              "shortDescription": {
                "text": "Scanner for CVE-2018-25010"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are referenced:\n\n- `WebPDecodeRGBA`\n- `WebPDecodeARGB`\n- `WebPDecodeBGRA`\n- `WebPDecodeRGB`\n- `WebPDecodeBGR`\n- `WebPDecodeYUV`\n- `WebPDecodeRGBAInto`\n- `WebPDecodeARGBInto`\n- `WebPDecodeBGRAInto`\n- `WebPDecodeRGBInto`\n- `WebPDecodeBGRInto`\n- `WebPDecodeYUVInto`\n- `WebPIAppend`\n- `WebPIUpdate`\n- `WebPIDecode`\n- `WebPDecode`\n- `WebPAnimDecoderGetNext`\n- `WebPAnimEncoderAssemble`",
                "markdown": "The scanner checks whether any of the following vulnerable functions are referenced:\n\n- `WebPDecodeRGBA`\n- `WebPDecodeARGB`\n- `WebPDecodeBGRA`\n- `WebPDecodeRGB`\n- `WebPDecodeBGR`\n- `WebPDecodeYUV`\n- `WebPDecodeRGBAInto`\n- `WebPDecodeARGBInto`\n- `WebPDecodeBGRAInto`\n- `WebPDecodeRGBInto`\n- `WebPDecodeBGRInto`\n- `WebPDecodeYUVInto`\n- `WebPIAppend`\n- `WebPIUpdate`\n- `WebPIDecode`\n- `WebPDecode`\n- `WebPAnimDecoderGetNext`\n- `WebPAnimEncoderAssemble`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2018-25014",
              "name": "CVE-2018-25014",
              "shortDescription": {
                "text": "Scanner for CVE-2018-25014"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are referenced:\n\n- `WebPDecodeRGBA`\n- `WebPDecodeARGB`\n- `WebPDecodeBGRA`\n- `WebPDecodeRGB`\n- `WebPDecodeBGR`\n- `WebPDecodeYUV`\n- `WebPDecodeRGBAInto`\n- `WebPDecodeARGBInto`\n- `WebPDecodeBGRAInto`\n- `WebPDecodeRGBInto`\n- `WebPDecodeBGRInto`\n- `WebPDecodeYUVInto`\n- `WebPIAppend`\n- `WebPIUpdate`\n- `WebPIDecode`\n- `WebPDecode`\n- `WebPAnimDecoderGetNext`\n- `WebPAnimEncoderAssemble`",
                "markdown": "The scanner checks whether any of the following vulnerable functions are referenced:\n\n- `WebPDecodeRGBA`\n- `WebPDecodeARGB`\n- `WebPDecodeBGRA`\n- `WebPDecodeRGB`\n- `WebPDecodeBGR`\n- `WebPDecodeYUV`\n- `WebPDecodeRGBAInto`\n- `WebPDecodeARGBInto`\n- `WebPDecodeBGRAInto`\n- `WebPDecodeRGBInto`\n- `WebPDecodeBGRInto`\n- `WebPDecodeYUVInto`\n- `WebPIAppend`\n- `WebPIUpdate`\n- `WebPIDecode`\n- `WebPDecode`\n- `WebPAnimDecoderGetNext`\n- `WebPAnimEncoderAssemble`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2018-25011",
              "name": "CVE-2018-25011",
              "shortDescription": {
                "text": "Scanner for CVE-2018-25011"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are referenced:\n\n- `WebPMuxPushFrame`\n- `WebPMuxGetFrame`\n- `WebPMuxSetAnimationParams`\n- `WebPMuxAssemble`\n- `WebPAnimEncoderAdd`\n- `WebPAnimEncoderAssemble`\n- `WebPMemoryWrite`\n- `WebPEncode`",
                "markdown": "The scanner checks whether any of the following vulnerable functions are referenced:\n\n- `WebPMuxPushFrame`\n- `WebPMuxGetFrame`\n- `WebPMuxSetAnimationParams`\n- `WebPMuxAssemble`\n- `WebPAnimEncoderAdd`\n- `WebPAnimEncoderAssemble`\n- `WebPMemoryWrite`\n- `WebPEncode`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2018-25032",
              "name": "CVE-2018-25032",
              "shortDescription": {
                "text": "Scanner for CVE-2018-25032"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `deflateInit2` is called.",
                "markdown": "The scanner checks whether the vulnerable function `deflateInit2` is called."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2019-12900",
              "name": "CVE-2019-12900",
              "shortDescription": {
                "text": "Scanner for CVE-2019-12900"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are referenced:\n\n* `BZ2_bzDecompress`\n* `BZ2_bzRead`\n* `BZ2_bzBuffToBuffDecompress`",
                "markdown": "The scanner checks whether any of the following vulnerable functions are referenced:\n\n* `BZ2_bzDecompress`\n* `BZ2_bzRead`\n* `BZ2_bzBuffToBuffDecompress`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2020-36329",
              "name": "CVE-2020-36329",
              "shortDescription": {
                "text": "Scanner for CVE-2020-36329"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are referenced:\n\n- `WebPDecodeRGBA`\n- `WebPDecodeARGB`\n- `WebPDecodeBGRA`\n- `WebPDecodeRGB`\n- `WebPDecodeBGR`\n- `WebPDecodeYUV`\n- `WebPDecodeRGBAInto`\n- `WebPDecodeARGBInto`\n- `WebPDecodeBGRAInto`\n- `WebPDecodeRGBInto`\n- `WebPDecodeBGRInto`\n- `WebPDecodeYUVInto`\n- `WebPINewDecoder`\n- `WebPINewRGB`\n- `WebPINewYUVA`\n- `WebPINewYUV`\n- `WebPIAppend`\n- `WebPIUpdate`\n- `WebPIDecode`\n- `WebPDecode`\n- `WebPAnimDecoderGetNext`\n- `WebPAnimEncoderAssemble`",
                "markdown": "The scanner checks whether any of the following vulnerable functions are referenced:\n\n- `WebPDecodeRGBA`\n- `WebPDecodeARGB`\n- `WebPDecodeBGRA`\n- `WebPDecodeRGB`\n- `WebPDecodeBGR`\n- `WebPDecodeYUV`\n- `WebPDecodeRGBAInto`\n- `WebPDecodeARGBInto`\n- `WebPDecodeBGRAInto`\n- `WebPDecodeRGBInto`\n- `WebPDecodeBGRInto`\n- `WebPDecodeYUVInto`\n- `WebPINewDecoder`\n- `WebPINewRGB`\n- `WebPINewYUVA`\n- `WebPINewYUV`\n- `WebPIAppend`\n- `WebPIUpdate`\n- `WebPIDecode`\n- `WebPDecode`\n- `WebPAnimDecoderGetNext`\n- `WebPAnimEncoderAssemble`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2020-36331",
              "name": "CVE-2020-36331",
              "shortDescription": {
                "text": "Scanner for CVE-2020-36331"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are referenced:\n\n- `WebPMuxCreate`\n- `WebPMuxSetImage`\n- `WebPMuxPushFrame`\n- `WebPAnimEncoderAdd`\n- `WebPAnimEncoderAssemble`",
                "markdown": "The scanner checks whether any of the following vulnerable functions are referenced:\n\n- `WebPMuxCreate`\n- `WebPMuxSetImage`\n- `WebPMuxPushFrame`\n- `WebPAnimEncoderAdd`\n- `WebPAnimEncoderAssemble`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-3541",
              "name": "CVE-2021-3541",
              "shortDescription": {
                "text": "Scanner for CVE-2021-3541"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `xmlReadFile` is called.",
                "markdown": "The scanner checks whether the vulnerable function `xmlReadFile` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-2097",
              "name": "CVE-2022-2097",
              "shortDescription": {
                "text": "Scanner for CVE-2022-2097"
              },
              "fullDescription": {
                "text": "The scanner checks if the vulnerable function `EVP_EncryptInit_ex` is called.\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: the system's architecture is 32bit / x86.",
                "markdown": "The scanner checks if the vulnerable function `EVP_EncryptInit_ex` is called.\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: the system's architecture is 32bit / x86."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-27405",
              "name": "CVE-2022-27405",
              "shortDescription": {
                "text": "Scanner for CVE-2022-27405"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n- `FT_New_Face`\n- `FT_Open_Face`\n- `FT_New_Memory_Face`",
                "markdown": "The scanner checks whether any of the following vulnerable functions are called:\n\n- `FT_New_Face`\n- `FT_Open_Face`\n- `FT_New_Memory_Face`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-27404",
              "name": "CVE-2022-27404",
              "shortDescription": {
                "text": "Scanner for CVE-2022-27404"
              },
              "fullDescription": {
                "text": "The scanner checks whether at least one of the vulnerable functions is called:\n```\nFT_New_Face\nFT_New_Memory_Face\nFT_Open_Face\n```",
                "markdown": "The scanner checks whether at least one of the vulnerable functions is called:\n```\nFT_New_Face\nFT_New_Memory_Face\nFT_Open_Face\n```"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-27406",
              "name": "CVE-2022-27406",
              "shortDescription": {
                "text": "Scanner for CVE-2022-27406"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n- `FT_Request_Size`\n- `FT_Set_Char_Size`\n- `FT_Set_Pixel_Sizes`",
                "markdown": "The scanner checks whether any of the following vulnerable functions are called:\n\n- `FT_Request_Size`\n- `FT_Set_Char_Size`\n- `FT_Set_Pixel_Sizes`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-3786",
              "name": "CVE-2022-3786",
              "shortDescription": {
                "text": "Scanner for CVE-2022-3786"
              },
              "fullDescription": {
                "text": "The scanner checks if at least one of the vulnerable functions is called:\n```\nSSL_connect\nBIO_new_ssl_connect\nBIO_do_handshake\nBIO_do_connect\nBIO_new_connect\nSSL_accept\nSSL_set_verify\nSSL_CTX_set_verify\nX509_verify_cert\n```\nThen, if the application is a server, the client authentication option should be checked manually. \nIt is a client, it is applicable as described in the description.",
                "markdown": "The scanner checks if at least one of the vulnerable functions is called:\n```\nSSL_connect\nBIO_new_ssl_connect\nBIO_do_handshake\nBIO_do_connect\nBIO_new_connect\nSSL_accept\nSSL_set_verify\nSSL_CTX_set_verify\nX509_verify_cert\n```\nThen, if the application is a server, the client authentication option should be checked manually. \nIt is a client, it is applicable as described in the description."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-3602",
              "name": "CVE-2022-3602",
              "shortDescription": {
                "text": "Scanner for CVE-2022-3602"
              },
              "fullDescription": {
                "text": "The scanner checks if at least one of the vulnerable functions is called:\n```\nSSL_connect\nBIO_new_ssl_connect\nBIO_do_handshake\nBIO_do_connect\nBIO_new_connect\nSSL_accept\nSSL_set_verify\nSSL_CTX_set_verify\nX509_verify_cert\n```\nThen, if the application is a server, the client authentication option should be checked manually. \nIt is a client, it is applicable as described in the description.",
                "markdown": "The scanner checks if at least one of the vulnerable functions is called:\n```\nSSL_connect\nBIO_new_ssl_connect\nBIO_do_handshake\nBIO_do_connect\nBIO_new_connect\nSSL_accept\nSSL_set_verify\nSSL_CTX_set_verify\nX509_verify_cert\n```\nThen, if the application is a server, the client authentication option should be checked manually. \nIt is a client, it is applicable as described in the description."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-37434",
              "name": "CVE-2022-37434",
              "shortDescription": {
                "text": "Scanner for CVE-2022-37434"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `inflateGetHeader()` is called.",
                "markdown": "The scanner checks whether the vulnerable function `inflateGetHeader()` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-40303",
              "name": "CVE-2022-40303",
              "shortDescription": {
                "text": "Scanner for CVE-2022-40303"
              },
              "fullDescription": {
                "text": "For determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: Usage of libxml2 with the `XML_PARSE_HUGE` (--huge) flag.\n\nThe scanner checks whether any of the following vulnerable functions are called:\n\n* `xmlParseAttribute`\n* `xmlParseAttributeListDecl`\n* `xmlParseDocTypeDecl`\n* `xmlParseElementDecl`\n* `xmlParseElementMixedContentDecl`\n* `xmlParseEndTag`\n* `xmlParseEntityDecl`\n* `xmlParseEntityRef`\n* `xmlParseName`\n* `xmlParseNotationDecl`\n* `xmlParseNotationType`\n* `xmlParsePEReference`\n* `xmlParsePITarget`\n* `xmlParseStartTag`",
                "markdown": "For determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: Usage of libxml2 with the `XML_PARSE_HUGE` (--huge) flag.\n\nThe scanner checks whether any of the following vulnerable functions are called:\n\n* `xmlParseAttribute`\n* `xmlParseAttributeListDecl`\n* `xmlParseDocTypeDecl`\n* `xmlParseElementDecl`\n* `xmlParseElementMixedContentDecl`\n* `xmlParseEndTag`\n* `xmlParseEntityDecl`\n* `xmlParseEntityRef`\n* `xmlParseName`\n* `xmlParseNotationDecl`\n* `xmlParseNotationType`\n* `xmlParsePEReference`\n* `xmlParsePITarget`\n* `xmlParseStartTag`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-40304",
              "name": "CVE-2022-40304",
              "shortDescription": {
                "text": "Scanner for CVE-2022-40304"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `xmlCtxtReadDoc`\n* `xmlCtxtReadFd`\n* `xmlCtxtReadFile`\n* `xmlCtxtReadIO`\n* `xmlCtxtReadMemory`\n* `xmlParseFile`\n* `xmlReadDoc`\n* `xmlReadFd`\n* `xmlReadFile`\n* `xmlReadIO`\n* `xmlReadMemory`\n* `xmlSAXParseDoc`\n* `xmlSAXParseFile`\n* `xmlSAXParseFileWithData`\n* `xmlSAXParseMemoryWithData`\n* `xmlSAXUserParseFile`\n* `xmlSAXUserParseMemory`",
                "markdown": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `xmlCtxtReadDoc`\n* `xmlCtxtReadFd`\n* `xmlCtxtReadFile`\n* `xmlCtxtReadIO`\n* `xmlCtxtReadMemory`\n* `xmlParseFile`\n* `xmlReadDoc`\n* `xmlReadFd`\n* `xmlReadFile`\n* `xmlReadIO`\n* `xmlReadMemory`\n* `xmlSAXParseDoc`\n* `xmlSAXParseFile`\n* `xmlSAXParseFileWithData`\n* `xmlSAXParseMemoryWithData`\n* `xmlSAXUserParseFile`\n* `xmlSAXUserParseMemory`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-4450",
              "name": "CVE-2022-4450",
              "shortDescription": {
                "text": "Scanner for CVE-2022-4450"
              },
              "fullDescription": {
                "text": "The scanner checks if at least one of the vulnerable functions is called:\n```\nPEM_read_bio_ex()\nPEM_read_bio()\nPEM_read()\nPEM_read_DHparams()\nPEM_read_PrivateKey()\nPEM_read_bio_PrivateKey()\nPEM_read_RSA_PUBKEY()\nPEM_read_bio_RSA_PUBKEY()\nPEM_read_RSAPrivateKey()\nPEM_read_bio_RSAPrivateKey()\nPEM_read_PKCS7()\nPEM_read_bio_PKCS7()\nPEM_read_X509()\nPEM_read_bio_X509()\nPEM_read_X509_AUX()\nPEM_read_bio_X509_AUX()\nPEM_read_X509_CRL()\nPEM_read_bio_X509_CRL()\nPEM_read_bio_X509_REQ()\nPEM_read_bio_ECPrivateKey()\nPEM_read_bio_PKCS8()\n\nPEM_X509_INFO_read_bio_ex()\nSSL_CTX_use_serverinfo_file()\nSSL_use_cert_and_key() \nSSL_CTX_use_certificate_chain_file()\nSSL_CTX_load_verify_locations()\nSSL_CTX_set1_verify_file()\nSSL_CTX_set1_verify_path()\nX509_LOOKUP_load_file()\n\nSSL_load_client_CA_file_ex()\nSSL_load_client_CA_file()\nSSL_add_file_cert_subjects_to_stack()\nSSL_add_dir_cert_subjects_to_stack()\nSSL_add_store_cert_subjects_to_stack()\n\nuse_certificate_chain_file\nSSL_use_certificate_file\nSSL_CTX_use_certificate_file\nSSL_use_PrivateKey_file\nSSL_CTX_use_PrivateKey_file\nSSL_CTX_use_serverinfo_file\n\nSSL_use_RSAPrivateKey_file\nSSL_CTX_use_RSAPrivateKey_file\n```\n\nNote that while the vulnerability is also exploitable through the use of the command line tool `openssl asn1parse`, the vulnerability's DoS impact in this case does not pose a threat, since the DoS will crash the forked `openssl` tool process only",
                "markdown": "The scanner checks if at least one of the vulnerable functions is called:\n```\nPEM_read_bio_ex()\nPEM_read_bio()\nPEM_read()\nPEM_read_DHparams()\nPEM_read_PrivateKey()\nPEM_read_bio_PrivateKey()\nPEM_read_RSA_PUBKEY()\nPEM_read_bio_RSA_PUBKEY()\nPEM_read_RSAPrivateKey()\nPEM_read_bio_RSAPrivateKey()\nPEM_read_PKCS7()\nPEM_read_bio_PKCS7()\nPEM_read_X509()\nPEM_read_bio_X509()\nPEM_read_X509_AUX()\nPEM_read_bio_X509_AUX()\nPEM_read_X509_CRL()\nPEM_read_bio_X509_CRL()\nPEM_read_bio_X509_REQ()\nPEM_read_bio_ECPrivateKey()\nPEM_read_bio_PKCS8()\n\nPEM_X509_INFO_read_bio_ex()\nSSL_CTX_use_serverinfo_file()\nSSL_use_cert_and_key() \nSSL_CTX_use_certificate_chain_file()\nSSL_CTX_load_verify_locations()\nSSL_CTX_set1_verify_file()\nSSL_CTX_set1_verify_path()\nX509_LOOKUP_load_file()\n\nSSL_load_client_CA_file_ex()\nSSL_load_client_CA_file()\nSSL_add_file_cert_subjects_to_stack()\nSSL_add_dir_cert_subjects_to_stack()\nSSL_add_store_cert_subjects_to_stack()\n\nuse_certificate_chain_file\nSSL_use_certificate_file\nSSL_CTX_use_certificate_file\nSSL_use_PrivateKey_file\nSSL_CTX_use_PrivateKey_file\nSSL_CTX_use_serverinfo_file\n\nSSL_use_RSAPrivateKey_file\nSSL_CTX_use_RSAPrivateKey_file\n```\n\nNote that while the vulnerability is also exploitable through the use of the command line tool `openssl asn1parse`, the vulnerability's DoS impact in this case does not pose a threat, since the DoS will crash the forked `openssl` tool process only"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0215",
              "name": "CVE-2023-0215",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0215"
              },
              "fullDescription": {
                "text": "The scanner checks if at least one of the vulnerable functions is called:\n```\nPEM_write_bio_ASN1_stream()\nPEM_write_bio_CMS_stream()\nPEM_write_bio_PKCS7_stream()\nSMIME_write_ASN1()\nSMIME_write_CMS()\nSMIME_write_PKCS7()\nBIO_new_CMS()\nBIO_new_PKCS7()\ni2d_CMS_bio_stream()\ni2d_PKCS7_bio_stream()\ni2d_ASN1_bio_stream()\nBIO_new_NDEF()\n```",
                "markdown": "The scanner checks if at least one of the vulnerable functions is called:\n```\nPEM_write_bio_ASN1_stream()\nPEM_write_bio_CMS_stream()\nPEM_write_bio_PKCS7_stream()\nSMIME_write_ASN1()\nSMIME_write_CMS()\nSMIME_write_PKCS7()\nBIO_new_CMS()\nBIO_new_PKCS7()\ni2d_CMS_bio_stream()\ni2d_PKCS7_bio_stream()\ni2d_ASN1_bio_stream()\nBIO_new_NDEF()\n```"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0217",
              "name": "CVE-2023-0217",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0217"
              },
              "fullDescription": {
                "text": "When checking ELF files, the scanner checks whether the vulnerable `EVP_PKEY_public_check()` function is called.\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked",
                "markdown": "When checking ELF files, the scanner checks whether the vulnerable `EVP_PKEY_public_check()` function is called.\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0286",
              "name": "CVE-2023-0286",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0286"
              },
              "fullDescription": {
                "text": "The scanner checks if at least one of the vulnerable API calls is called:\n\n* `X509_STORE_CTX_get_check_revocation`\n* `X509_STORE_get_check_revocation`\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The CRL checking option must also be enabled.",
                "markdown": "The scanner checks if at least one of the vulnerable API calls is called:\n\n* `X509_STORE_CTX_get_check_revocation`\n* `X509_STORE_get_check_revocation`\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The CRL checking option must also be enabled."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0401",
              "name": "CVE-2023-0401",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0401"
              },
              "fullDescription": {
                "text": "When checking ELF files, the scanner checks whether at least one of the vulnerable API calls is called:\n\n* `PKCS7_decrypt`\n* `PKCS7_dataInit`\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked",
                "markdown": "When checking ELF files, the scanner checks whether at least one of the vulnerable API calls is called:\n\n* `PKCS7_decrypt`\n* `PKCS7_dataInit`\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0465",
              "name": "CVE-2023-0465",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0465"
              },
              "fullDescription": {
                "text": "The scanner checks whether OpenSSL supports the vulnerable policy constraints parsing functionality, by checking whether the `X509_VERIFY_PARAM_set1_policies` function is called (the functionality is disabled by default)\n\nNote that the scanner does not check for an additional vulnerable case in which the vulnerable policy constraints parsing functionality is enabled via the command line flag `-policy`. For example, by running `openssl ca -policy match`. However - in this case, the vulnerability will lead to a DoS of a forked command-line utility, which has a minimal impact on security.",
                "markdown": "The scanner checks whether OpenSSL supports the vulnerable policy constraints parsing functionality, by checking whether the `X509_VERIFY_PARAM_set1_policies` function is called (the functionality is disabled by default)\n\nNote that the scanner does not check for an additional vulnerable case in which the vulnerable policy constraints parsing functionality is enabled via the command line flag `-policy`. For example, by running `openssl ca -policy match`. However - in this case, the vulnerability will lead to a DoS of a forked command-line utility, which has a minimal impact on security."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0464",
              "name": "CVE-2023-0464",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0464"
              },
              "fullDescription": {
                "text": "The scanner checks whether OpenSSL supports the vulnerable policy constraints parsing functionality, by checking whether the `X509_VERIFY_PARAM_set1_policies` function is called (the functionality is disabled by default)\n\nNote that the scanner does not check for an additional vulnerable case in which the vulnerable policy constraints parsing functionality is enabled via the command line flag `-policy`. For example, by running `openssl ca -policy match`. However - in this case, the vulnerability will lead to a DoS of a forked command-line utility, which has a minimal impact on security.",
                "markdown": "The scanner checks whether OpenSSL supports the vulnerable policy constraints parsing functionality, by checking whether the `X509_VERIFY_PARAM_set1_policies` function is called (the functionality is disabled by default)\n\nNote that the scanner does not check for an additional vulnerable case in which the vulnerable policy constraints parsing functionality is enabled via the command line flag `-policy`. For example, by running `openssl ca -policy match`. However - in this case, the vulnerability will lead to a DoS of a forked command-line utility, which has a minimal impact on security."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-2004",
              "name": "CVE-2023-2004",
              "shortDescription": {
                "text": "Scanner for CVE-2023-2004"
              },
              "fullDescription": {
                "text": "The scanner checks whether the following vulnerable functions are called:\n\n- `FT_Get_Advance`\n- `FT_Get_Advances`\n- `FT_Get_PFR_Metrics`\n- `FT_Get_PFR_Advance`\n- `FT_Load_Glyph`\n- `FT_Load_Char`",
                "markdown": "The scanner checks whether the following vulnerable functions are called:\n\n- `FT_Get_Advance`\n- `FT_Get_Advances`\n- `FT_Get_PFR_Metrics`\n- `FT_Get_PFR_Advance`\n- `FT_Load_Glyph`\n- `FT_Load_Char`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-4863",
              "name": "CVE-2023-4863",
              "shortDescription": {
                "text": "Scanner for CVE-2023-4863"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `WebPDecodeRGB`\n* `WebPDecodeARGB`\n* `WebPDecodeBGR`\n* `WebPDecodeBGRA`\n* `WebPDecodeRGBA`\n* `WebPDecodeYUV`\n* `WebPDecode`\n* `WebPDecodeARGBInto`\n* `WebPDecodeBGRAInto`\n* `WebPDecodeBGRInto`\n* `WebPDecodeRGBAInto`\n* `WebPDecodeRGBInto`\n* `WebPDecodeYUVInto`\n* `WebPIAppend`\n* `WebPIUpdate`",
                "markdown": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `WebPDecodeRGB`\n* `WebPDecodeARGB`\n* `WebPDecodeBGR`\n* `WebPDecodeBGRA`\n* `WebPDecodeRGBA`\n* `WebPDecodeYUV`\n* `WebPDecode`\n* `WebPDecodeARGBInto`\n* `WebPDecodeBGRAInto`\n* `WebPDecodeBGRInto`\n* `WebPDecodeRGBAInto`\n* `WebPDecodeRGBInto`\n* `WebPDecodeYUVInto`\n* `WebPIAppend`\n* `WebPIUpdate`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-3711",
              "name": "CVE-2021-3711",
              "shortDescription": {
                "text": "Scanner for CVE-2021-3711"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `EVP_PKEY_decrypt` is called.",
                "markdown": "The scanner checks whether the vulnerable function `EVP_PKEY_decrypt` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-2309",
              "name": "CVE-2022-2309",
              "shortDescription": {
                "text": "Scanner for CVE-2022-2309"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are called:\n\nVulnerable libxml2 functions - \n\n* `xmlCtxtReset`\n* `xmlCtxtResetPush`\n* `xmlCtxtReadFile`\n* `xmlCtxtReadMemory`\n* `xmlCtxtReadFd`\n* `xmlCtxtReadIO`\n* `xmlClearParserCtxt`\n* `xmlSchemaParseImport`\n* `xmlSchemaParseSchemaTopLevel`\n* `xmlSchemaParseIncludeOrRedefine`\n* `xmlReaderForFd`\n* `xmlReaderForIO`\n* `xmlReaderNewFd`\n* `xmlReaderNewIO`\n* `xmlSetupParserForBuffer`\n\nAnd also the vulnerable lxml Python functions:\n\n* `iterwalk`\n* `canonicalize`",
                "markdown": "The scanner checks whether any of the following vulnerable functions are called:\n\nVulnerable libxml2 functions - \n\n* `xmlCtxtReset`\n* `xmlCtxtResetPush`\n* `xmlCtxtReadFile`\n* `xmlCtxtReadMemory`\n* `xmlCtxtReadFd`\n* `xmlCtxtReadIO`\n* `xmlClearParserCtxt`\n* `xmlSchemaParseImport`\n* `xmlSchemaParseSchemaTopLevel`\n* `xmlSchemaParseIncludeOrRedefine`\n* `xmlReaderForFd`\n* `xmlReaderForIO`\n* `xmlReaderNewFd`\n* `xmlReaderNewIO`\n* `xmlSetupParserForBuffer`\n\nAnd also the vulnerable lxml Python functions:\n\n* `iterwalk`\n* `canonicalize`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0216",
              "name": "CVE-2023-0216",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0216"
              },
              "fullDescription": {
                "text": "When checking ELF files, the scanner checks if at least one of the vulnerable functions is called:\n\n* `d2i_PKCS7()`\n* `d2i_PKCS7_bio()`\n* `d2i_PKCS7_fp()`\n\nWhen checking Python files, the scanner checks if at least one of the vulnerable functions is called with external input to its 1st (`bytes`) argument:\n\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_der_pkcs7_certificates`\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_pem_pkcs7_certificates`",
                "markdown": "When checking ELF files, the scanner checks if at least one of the vulnerable functions is called:\n\n* `d2i_PKCS7()`\n* `d2i_PKCS7_bio()`\n* `d2i_PKCS7_fp()`\n\nWhen checking Python files, the scanner checks if at least one of the vulnerable functions is called with external input to its 1st (`bytes`) argument:\n\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_der_pkcs7_certificates`\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_pem_pkcs7_certificates`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-2650",
              "name": "CVE-2023-2650",
              "shortDescription": {
                "text": "Scanner for CVE-2023-2650"
              },
              "fullDescription": {
                "text": "When checking ELF files, the scanner checks whether one of the following function is called with an external input:\n\n* Direct call to `OBJ_obj2txt()` function (for OpenSSL 1.x and OpenSSL 3.x)\n\n**Only for OpenSSL 3.x:**\n\n* OCSP: `OCSP_basic_verify()`\n\n* PKCS7/SMIME:\n`PKCS7_decrypt()`\n`PKCS7_sign()`\n`PKCS7_verify()`\n\n* CMS:\n`CMS_EncryptedData_decrypt()`\n`CMS_EncryptedData_encrypt()`\n`CMS_EnvelopedData_decrypt()`\n`CMS_final()`\n`CMS_decrypt_set1_password()`\n`CMS_RecipientInfo_decrypt()`\n`CMS_decrypt()`\n`CMS_decrypt_set1_pkey()`\n`CMS_decrypt_set1_pkey_and_peer()`\n`CMS_SignedData_verify()`\n`CMS_verify()`\n`CMS_SignerInfo_verify()`\n`CMS_compress()`\n`CMS_data_create()`\n`CMS_data_create_ex()`\n`CMS_digest_create()`\n`CMS_digest_create_ex()`\n`CMS_digest_verify()`\n`CMS_encrypt()`\n`CMS_encrypt_ex()`\n`CMS_final_digest()`\n`CMS_sign()`\n`CMS_sign_ex()`\n`CMS_add1_signer()`\n`CMS_sign_receipt()`\n`CMS_uncompress()`\n`CMS_verify_receipt()`\n\n* CMP/CRMF:\n`OSSL_CMP_get_caCerts()`\n`OSSL_CRMF_ENCRYPTEDVALUE_get1_encCert()`\n`OSSL_CRMF_pbm_new()`\n\n* TS:\n`TS_REQ_print_bio()`\n`TS_OBJ_print_bio()`\n`TS_RESP_create_response()`\n`TS_RESP_print_bio()`\n`TS_RESP_verify_response()`\n`TS_RESP_verify_token()`\n\n* ASN1:\n`ASN1_parse()`\n`X509_NAME_print_ex()`\n`X509_NAME_print_ex_fp()`\n`d2i_AutoPrivateKey()`\n`d2i_PrivateKey()`\n`X509_STORE_CTX_print_verify_cb()`\n`x509_pubkey_ex_d2i_ex()`\n\n* EVP:\n`EVP_PKCS82PKEY()`\n`EVP_PKCS82PKEY_ex()`\n`PKCS5_v2_PBE_keyivgen()`\n`PKCS5_v2_PBE_keyivgen_ex()`\n\n* ESS:\n`OSSL_ESS_check_signing_certs()`\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked",
                "markdown": "When checking ELF files, the scanner checks whether one of the following function is called with an external input:\n\n* Direct call to `OBJ_obj2txt()` function (for OpenSSL 1.x and OpenSSL 3.x)\n\n**Only for OpenSSL 3.x:**\n\n* OCSP: `OCSP_basic_verify()`\n\n* PKCS7/SMIME:\n`PKCS7_decrypt()`\n`PKCS7_sign()`\n`PKCS7_verify()`\n\n* CMS:\n`CMS_EncryptedData_decrypt()`\n`CMS_EncryptedData_encrypt()`\n`CMS_EnvelopedData_decrypt()`\n`CMS_final()`\n`CMS_decrypt_set1_password()`\n`CMS_RecipientInfo_decrypt()`\n`CMS_decrypt()`\n`CMS_decrypt_set1_pkey()`\n`CMS_decrypt_set1_pkey_and_peer()`\n`CMS_SignedData_verify()`\n`CMS_verify()`\n`CMS_SignerInfo_verify()`\n`CMS_compress()`\n`CMS_data_create()`\n`CMS_data_create_ex()`\n`CMS_digest_create()`\n`CMS_digest_create_ex()`\n`CMS_digest_verify()`\n`CMS_encrypt()`\n`CMS_encrypt_ex()`\n`CMS_final_digest()`\n`CMS_sign()`\n`CMS_sign_ex()`\n`CMS_add1_signer()`\n`CMS_sign_receipt()`\n`CMS_uncompress()`\n`CMS_verify_receipt()`\n\n* CMP/CRMF:\n`OSSL_CMP_get_caCerts()`\n`OSSL_CRMF_ENCRYPTEDVALUE_get1_encCert()`\n`OSSL_CRMF_pbm_new()`\n\n* TS:\n`TS_REQ_print_bio()`\n`TS_OBJ_print_bio()`\n`TS_RESP_create_response()`\n`TS_RESP_print_bio()`\n`TS_RESP_verify_response()`\n`TS_RESP_verify_token()`\n\n* ASN1:\n`ASN1_parse()`\n`X509_NAME_print_ex()`\n`X509_NAME_print_ex_fp()`\n`d2i_AutoPrivateKey()`\n`d2i_PrivateKey()`\n`X509_STORE_CTX_print_verify_cb()`\n`x509_pubkey_ex_d2i_ex()`\n\n* EVP:\n`EVP_PKCS82PKEY()`\n`EVP_PKCS82PKEY_ex()`\n`PKCS5_v2_PBE_keyivgen()`\n`PKCS5_v2_PBE_keyivgen_ex()`\n\n* ESS:\n`OSSL_ESS_check_signing_certs()`\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-2068",
              "name": "CVE-2022-2068",
              "shortDescription": {
                "text": "Scanner for CVE-2022-2068"
              },
              "fullDescription": {
                "text": "The scanner checks for the execution of the vulnerable `c_rehash` by searching the artifact for the vulnerable command.",
                "markdown": "The scanner checks for the execution of the vulnerable `c_rehash` by searching the artifact for the vulnerable command."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-1292",
              "name": "CVE-2022-1292",
              "shortDescription": {
                "text": "Scanner for CVE-2022-1292"
              },
              "fullDescription": {
                "text": "The scanner checks for the execution of the vulnerable `c_rehash` by searching the artifact for the vulnerable command.",
                "markdown": "The scanner checks for the execution of the vulnerable `c_rehash` by searching the artifact for the vulnerable command."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-5363",
              "name": "CVE-2023-5363",
              "shortDescription": {
                "text": "Scanner for CVE-2023-5363"
              },
              "fullDescription": {
                "text": "The scanner checks if any of the following vulnerable functions are called:\n\n- `EVP_EncryptInit_ex2`\n- `EVP_DecryptInit_ex2`\n- `EVP_CipherInit_ex2`",
                "markdown": "The scanner checks if any of the following vulnerable functions are called:\n\n- `EVP_EncryptInit_ex2`\n- `EVP_DecryptInit_ex2`\n- `EVP_CipherInit_ex2`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0466",
              "name": "CVE-2023-0466",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0466"
              },
              "fullDescription": {
                "text": "The scanner checks whether `X509_VERIFY_PARAM_add0_policy()` is called.\n\nNote that calling `X509_VERIFY_PARAM_set_flags()` with the parameter `X509_V_FLAG_POLICY_CHECK` mitigates this vulnerability. The scanner currently does not check for that mitigation.",
                "markdown": "The scanner checks whether `X509_VERIFY_PARAM_add0_policy()` is called.\n\nNote that calling `X509_VERIFY_PARAM_set_flags()` with the parameter `X509_V_FLAG_POLICY_CHECK` mitigates this vulnerability. The scanner currently does not check for that mitigation."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2024-25062",
              "name": "CVE-2024-25062",
              "shortDescription": {
                "text": "Scanner for CVE-2024-25062"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following functions are called:\n\n* `xmlValidatePopElement()`\n* `xmlTextReaderClose()`\n* `xmlFreeTextReader() `\n* `xmlTextReaderRead()`\n* `xmlSchemaValidateDoc()`",
                "markdown": "The scanner checks whether any of the following functions are called:\n\n* `xmlValidatePopElement()`\n* `xmlTextReaderClose()`\n* `xmlFreeTextReader() `\n* `xmlTextReaderRead()`\n* `xmlSchemaValidateDoc()`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-49210",
              "name": "CVE-2023-49210",
              "shortDescription": {
                "text": "Scanner for CVE-2023-49210"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable `openssl` function is used with external input.",
                "markdown": "The scanner checks whether the vulnerable `openssl` function is used with external input."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2016-7798",
              "name": "CVE-2016-7798",
              "shortDescription": {
                "text": "Scanner for CVE-2016-7798"
              },
              "fullDescription": {
                "text": "The scanner checks if the function `OpenSSL::Cipher.new()` is called with AES gcm is as the encryption type. \nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The AES IV initialization happens before the key initialization.",
                "markdown": "The scanner checks if the function `OpenSSL::Cipher.new()` is called with AES gcm is as the encryption type. \nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The AES IV initialization happens before the key initialization."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-3712",
              "name": "CVE-2021-3712",
              "shortDescription": {
                "text": "Scanner for CVE-2021-3712"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `ASN1_STRING` structure is created by searching for the existence of all the functions that create the `ASN1_STRING` structure or other structures that are based on the `ASN1_STRING` structure:\n\n* ASN1_STRING_new()\nASN1_STRING_type_new()\nASN1_OCTET_STRING_new()\nASN1_BIT_STRING_new()\nASN1_INTEGER_new()\nASN1_ENUMERATED_new()\nASN1_UTF8STRING_new()\nASN1_IA5STRING_new()\nASN1_UNIVERSALSTRING_new()\nASN1_BMPSTRING_new()\nASN1_GENERALSTRING_new()\nASN1_T61STRING_new()\nASN1_VISIBLESTRING_new()\nASN1_PRINTABLESTRING_new()\nASN1_PRINTABLE_new()\nDIRECTORYSTRING_new()\nDISPLAYTEXT_new()  \nASN1_GENERALIZEDTIME_new()\nASN1_UTCTIME_new()\nASN1_TIME_new()",
                "markdown": "The scanner checks whether the `ASN1_STRING` structure is created by searching for the existence of all the functions that create the `ASN1_STRING` structure or other structures that are based on the `ASN1_STRING` structure:\n\n* ASN1_STRING_new()\nASN1_STRING_type_new()\nASN1_OCTET_STRING_new()\nASN1_BIT_STRING_new()\nASN1_INTEGER_new()\nASN1_ENUMERATED_new()\nASN1_UTF8STRING_new()\nASN1_IA5STRING_new()\nASN1_UNIVERSALSTRING_new()\nASN1_BMPSTRING_new()\nASN1_GENERALSTRING_new()\nASN1_T61STRING_new()\nASN1_VISIBLESTRING_new()\nASN1_PRINTABLESTRING_new()\nASN1_PRINTABLE_new()\nDIRECTORYSTRING_new()\nDISPLAYTEXT_new()  \nASN1_GENERALIZEDTIME_new()\nASN1_UTCTIME_new()\nASN1_TIME_new()"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2019-20838",
              "name": "CVE-2019-20838",
              "shortDescription": {
                "text": "Scanner for CVE-2019-20838"
              },
              "fullDescription": {
                "text": "The scanner checks whether the libpcre was compiled with JIT support.\n\nThe scanner also checks whether the following vulnerable functions are called:\n\n* `pcre_compile` \n* `pcre_exec`",
                "markdown": "The scanner checks whether the libpcre was compiled with JIT support.\n\nThe scanner also checks whether the following vulnerable functions are called:\n\n* `pcre_compile` \n* `pcre_exec`"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-3449",
              "name": "CVE-2021-3449",
              "shortDescription": {
                "text": "Scanner for CVE-2021-3449"
              },
              "fullDescription": {
                "text": "The scanner checks whether the server is configured with both:\n\n* TLSv1.2\n* Renegotiation is enabled\n\n\nThis CVE is applicable in ELF files under additional conditions (that the scanner currently does not check), which should be verified. The conditions are:\n\n1. The server code explicity sets the minimum and maximum versions of TLS to support TLSv1.2 (TLSv1.3 support 1.2 as well)\n\nFor example:\n```\nSSL_CTX_set_min_proto_version(ctx, TLS1_2_VERSION);\nSSL_CTX_set_max_proto_version(ctx, TLS1_3_VERSION);\n```\n\n2. The server code *does not* explicity disables renegotiation by `SSL_CTX_set_options(ctx, SSL_OP_NO_RENEGOTIATION)`.",
                "markdown": "The scanner checks whether the server is configured with both:\n\n* TLSv1.2\n* Renegotiation is enabled\n\n\nThis CVE is applicable in ELF files under additional conditions (that the scanner currently does not check), which should be verified. The conditions are:\n\n1. The server code explicity sets the minimum and maximum versions of TLS to support TLSv1.2 (TLSv1.3 support 1.2 as well)\n\nFor example:\n```\nSSL_CTX_set_min_proto_version(ctx, TLS1_2_VERSION);\nSSL_CTX_set_max_proto_version(ctx, TLS1_3_VERSION);\n```\n\n2. The server code *does not* explicity disables renegotiation by `SSL_CTX_set_options(ctx, SSL_OP_NO_RENEGOTIATION)`."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-33560",
              "name": "CVE-2021-33560",
              "shortDescription": {
                "text": "Scanner for CVE-2021-33560"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `gcry_pk_decrypt()` \n* `gcry_pk_encrypt()`\n* `gcry_pk_genkey()`\n* `gcry_pk_sign()`\n\nand if the `\"elg\"` string is found.\nNote - For determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified. The condition is that your public key's encryption algorithm must be ElGamal.",
                "markdown": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `gcry_pk_decrypt()` \n* `gcry_pk_encrypt()`\n* `gcry_pk_genkey()`\n* `gcry_pk_sign()`\n\nand if the `\"elg\"` string is found.\nNote - For determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified. The condition is that your public key's encryption algorithm must be ElGamal."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-42375",
              "name": "CVE-2021-42375",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42375"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-3517",
              "name": "CVE-2021-3517",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-3517"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-30560",
              "name": "CVE-2021-30560",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-30560"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-40528",
              "name": "CVE-2021-40528",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-40528"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2019-13118",
              "name": "CVE-2019-13118",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2019-13118"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-3450",
              "name": "CVE-2021-3450",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-3450"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2018-25013",
              "name": "CVE-2018-25013",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2018-25013"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2018-14498",
              "name": "CVE-2018-14498",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2018-14498"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2019-5747",
              "name": "CVE-2019-5747",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2019-5747"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2019-13117",
              "name": "CVE-2019-13117",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2019-13117"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2019-19956",
              "name": "CVE-2019-19956",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2019-19956"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42383",
              "name": "CVE-2021-42383",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42383"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-36159",
              "name": "CVE-2021-36159",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-36159"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42385",
              "name": "CVE-2021-42385",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42385"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2018-14048",
              "name": "CVE-2018-14048",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2018-14048"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-1394",
              "name": "CVE-2024-1394",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-1394"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-23839",
              "name": "CVE-2021-23839",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-23839"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-3537",
              "name": "CVE-2021-3537",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-3537"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-3209",
              "name": "CVE-2022-3209",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-3209"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-36332",
              "name": "CVE-2020-36332",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-36332"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-2511",
              "name": "CVE-2024-2511",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-2511"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42382",
              "name": "CVE-2021-42382",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42382"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42363",
              "name": "CVE-2023-42363",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42363"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-3817",
              "name": "CVE-2023-3817",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-3817"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2018-0735",
              "name": "CVE-2018-0735",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2018-0735"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2019-11038",
              "name": "CVE-2019-11038",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2019-11038"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-2975",
              "name": "CVE-2023-2975",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-2975"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-23840",
              "name": "CVE-2021-23840",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-23840"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-3446",
              "name": "CVE-2023-3446",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-3446"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2018-19664",
              "name": "CVE-2018-19664",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2018-19664"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2019-1563",
              "name": "CVE-2019-1563",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2019-1563"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-7595",
              "name": "CVE-2020-7595",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-7595"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-6129",
              "name": "CVE-2023-6129",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-6129"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-41581",
              "name": "CVE-2021-41581",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-41581"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-3518",
              "name": "CVE-2021-3518",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-3518"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42374",
              "name": "CVE-2021-42374",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42374"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-30139",
              "name": "CVE-2021-30139",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-30139"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-36330",
              "name": "CVE-2020-36330",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-36330"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2019-6977",
              "name": "CVE-2019-6977",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2019-6977"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-28928",
              "name": "CVE-2020-28928",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-28928"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-45322",
              "name": "CVE-2023-45322",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-45322"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2009-3767",
              "name": "CVE-2009-3767",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2009-3767"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-1971",
              "name": "CVE-2020-1971",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-1971"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42366",
              "name": "CVE-2023-42366",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42366"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-46822",
              "name": "CVE-2021-46822",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-46822"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2019-1559",
              "name": "CVE-2019-1559",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2019-1559"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-4304",
              "name": "CVE-2022-4304",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-4304"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2019-12904",
              "name": "CVE-2019-12904",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2019-12904"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2018-9251",
              "name": "CVE-2018-9251",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2018-9251"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-36328",
              "name": "CVE-2020-36328",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-36328"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-0778",
              "name": "CVE-2022-0778",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-0778"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2018-18751",
              "name": "CVE-2018-18751",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2018-18751"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2018-14553",
              "name": "CVE-2018-14553",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2018-14553"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2018-5407",
              "name": "CVE-2018-5407",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2018-5407"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-48437",
              "name": "CVE-2022-48437",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-48437"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-40145",
              "name": "CVE-2021-40145",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-40145"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-0727",
              "name": "CVE-2024-0727",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-0727"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-23308",
              "name": "CVE-2022-23308",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-23308"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-28391",
              "name": "CVE-2022-28391",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-28391"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-4160",
              "name": "CVE-2021-4160",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-4160"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-6237",
              "name": "CVE-2023-6237",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-6237"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2000-1254",
              "name": "CVE-2000-1254",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2000-1254"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-24977",
              "name": "CVE-2020-24977",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-24977"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42386",
              "name": "CVE-2021-42386",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42386"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2019-2201",
              "name": "CVE-2019-2201",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2019-2201"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2019-20388",
              "name": "CVE-2019-20388",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2019-20388"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-38115",
              "name": "CVE-2021-38115",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-38115"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-40812",
              "name": "CVE-2021-40812",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-40812"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42378",
              "name": "CVE-2021-42378",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42378"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-4203",
              "name": "CVE-2022-4203",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-4203"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `SSL_CTX_set_verify()` or `SSL_set_verify()` functions are called.\nA call with the `SSL_VERIFY_PEER` mode is enabling client authentication and makes this vulnerability possible.",
                "markdown": "The scanner checks whether the `SSL_CTX_set_verify()` or `SSL_set_verify()` functions are called.\nA call with the `SSL_VERIFY_PEER` mode is enabling client authentication and makes this vulnerability possible."
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2018-5711",
              "name": "CVE-2018-5711",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2018-5711"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-46880",
              "name": "CVE-2021-46880",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-46880"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-4603",
              "name": "CVE-2024-4603",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-4603"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2016-3709",
              "name": "CVE-2016-3709",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2016-3709"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2019-1549",
              "name": "CVE-2019-1549",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2019-1549"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-5678",
              "name": "CVE-2023-5678",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-5678"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-14155",
              "name": "CVE-2020-14155",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-14155"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42364",
              "name": "CVE-2023-42364",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42364"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2019-7317",
              "name": "CVE-2019-7317",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2019-7317"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-20205",
              "name": "CVE-2021-20205",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-20205"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2019-13627",
              "name": "CVE-2019-13627",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2019-13627"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-29469",
              "name": "CVE-2023-29469",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-29469"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-30065",
              "name": "CVE-2022-30065",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-30065"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42379",
              "name": "CVE-2021-42379",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42379"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-2804",
              "name": "CVE-2023-2804",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-2804"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-23841",
              "name": "CVE-2021-23841",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-23841"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-15999",
              "name": "CVE-2020-15999",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-15999"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2018-14550",
              "name": "CVE-2018-14550",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2018-14550"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-35784",
              "name": "CVE-2023-35784",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-35784"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42365",
              "name": "CVE-2023-42365",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42365"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-4214",
              "name": "CVE-2021-4214",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-4214"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2019-6978",
              "name": "CVE-2019-6978",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2019-6978"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-13790",
              "name": "CVE-2020-13790",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-13790"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-28484",
              "name": "CVE-2023-28484",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-28484"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42384",
              "name": "CVE-2021-42384",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42384"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2019-1543",
              "name": "CVE-2019-1543",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2019-1543"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-35538",
              "name": "CVE-2020-35538",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-35538"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2018-25012",
              "name": "CVE-2018-25012",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2018-25012"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42376",
              "name": "CVE-2021-42376",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42376"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-1999",
              "name": "CVE-2023-1999",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-1999"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2019-18197",
              "name": "CVE-2019-18197",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2019-18197"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-28831",
              "name": "CVE-2021-28831",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-28831"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-17541",
              "name": "CVE-2020-17541",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-17541"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-48174",
              "name": "CVE-2022-48174",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-48174"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-34459",
              "name": "CVE-2024-34459",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-34459"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2018-14567",
              "name": "CVE-2018-14567",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2018-14567"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2012-5373",
              "name": "CVE-2012-5373",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2012-5373"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2018-20330",
              "name": "CVE-2018-20330",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2018-20330"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2019-11068",
              "name": "CVE-2019-11068",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2019-11068"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2019-1551",
              "name": "CVE-2019-1551",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2019-1551"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2012-2739",
              "name": "CVE-2012-2739",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2012-2739"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2018-14404",
              "name": "CVE-2018-14404",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2018-14404"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2018-20679",
              "name": "CVE-2018-20679",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2018-20679"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-1968",
              "name": "CVE-2020-1968",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-1968"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2018-0734",
              "name": "CVE-2018-0734",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2018-0734"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42380",
              "name": "CVE-2021-42380",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42380"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2019-14697",
              "name": "CVE-2019-14697",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2019-14697"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42381",
              "name": "CVE-2021-42381",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42381"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-1967",
              "name": "CVE-2020-1967",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-1967"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-1255",
              "name": "CVE-2023-1255",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-1255"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2017-6363",
              "name": "CVE-2017-6363",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2017-6363"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-29824",
              "name": "CVE-2022-29824",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-29824"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2019-1547",
              "name": "CVE-2019-1547",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2019-1547"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            }
          ],
          "version": "1.0"
        }
      },
      "invocations": [
        {
          "arguments": [
            "/root/.jfrog/dependencies/analyzerManager/jas_scanner/jas_scanner",
            "scan",
            "/tmp/jfrog.cli.temp.-1718808529-2815740436/config.yaml"
          ],
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "/tmp/jfrog.cli.temp.-1718808507-2858394336/image.tar"
          }
        }
      ],
      "results": [
        {
          "ruleId": "applic_CVE-2018-1000517",
          "message": {
            "text": "The vulnerable `BusyBox` containing `wget` tool is present"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///bin/busybox"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2018-25009",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following vulnerable functions are referenced:\n\n- `WebPGetInfo`\n- `WebPDecodeRGBA`\n- `WebPDecodeARGB`\n- `WebPDecodeBGRA`\n- `WebPDecodeRGB`\n- `WebPDecodeBGR`\n- `WebPDecodeYUV`\n- `WebPDecodeRGBAInto`\n- `WebPDecodeARGBInto`\n- `WebPDecodeBGRAInto`\n- `WebPDecodeRGBInto`\n- `WebPDecodeBGRInto`\n- `WebPDecodeYUVInto`\n- `WebPIAppend`\n- `WebPIUpdate`\n- `WebPGetFeatures`\n- `WebPIDecode`\n- `WebPDecode`\n- `WebPDemux`\n- `WebPAnimDecoderNew`\n- `WebPAnimDecoderGetNext`\n- `WebPMuxCreate`\n- `WebPMuxSetImage`\n- `WebPMuxPushFrame`\n- `WebPMuxGetAnimationParams`\n- `WebPMuxGetCanvasSize`\n- `WebPMuxGetFeatures`\n- `WebPMuxAssemble`\n- `WebPAnimEncoderAdd`\n- `WebPAnimEncoderAssemble`"
          }
        },
        {
          "ruleId": "applic_CVE-2018-25010",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following vulnerable functions are referenced:\n\n- `WebPDecodeRGBA`\n- `WebPDecodeARGB`\n- `WebPDecodeBGRA`\n- `WebPDecodeRGB`\n- `WebPDecodeBGR`\n- `WebPDecodeYUV`\n- `WebPDecodeRGBAInto`\n- `WebPDecodeARGBInto`\n- `WebPDecodeBGRAInto`\n- `WebPDecodeRGBInto`\n- `WebPDecodeBGRInto`\n- `WebPDecodeYUVInto`\n- `WebPIAppend`\n- `WebPIUpdate`\n- `WebPIDecode`\n- `WebPDecode`\n- `WebPAnimDecoderGetNext`\n- `WebPAnimEncoderAssemble`"
          }
        },
        {
          "ruleId": "applic_CVE-2018-25014",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following vulnerable functions are referenced:\n\n- `WebPDecodeRGBA`\n- `WebPDecodeARGB`\n- `WebPDecodeBGRA`\n- `WebPDecodeRGB`\n- `WebPDecodeBGR`\n- `WebPDecodeYUV`\n- `WebPDecodeRGBAInto`\n- `WebPDecodeARGBInto`\n- `WebPDecodeBGRAInto`\n- `WebPDecodeRGBInto`\n- `WebPDecodeBGRInto`\n- `WebPDecodeYUVInto`\n- `WebPIAppend`\n- `WebPIUpdate`\n- `WebPIDecode`\n- `WebPDecode`\n- `WebPAnimDecoderGetNext`\n- `WebPAnimEncoderAssemble`"
          }
        },
        {
          "ruleId": "applic_CVE-2018-25011",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following vulnerable functions are referenced:\n\n- `WebPMuxPushFrame`\n- `WebPMuxGetFrame`\n- `WebPMuxSetAnimationParams`\n- `WebPMuxAssemble`\n- `WebPAnimEncoderAdd`\n- `WebPAnimEncoderAssemble`\n- `WebPMemoryWrite`\n- `WebPEncode`"
          }
        },
        {
          "ruleId": "applic_CVE-2018-25032",
          "message": {
            "text": "The vulnerable function deflateInit2 is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2018-25032",
          "message": {
            "text": "The vulnerable function deflateInit2 is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx-debug"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2019-12900",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following vulnerable functions are referenced:\n\n* `BZ2_bzDecompress`\n* `BZ2_bzRead`\n* `BZ2_bzBuffToBuffDecompress`"
          }
        },
        {
          "ruleId": "applic_CVE-2020-36329",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following vulnerable functions are referenced:\n\n- `WebPDecodeRGBA`\n- `WebPDecodeARGB`\n- `WebPDecodeBGRA`\n- `WebPDecodeRGB`\n- `WebPDecodeBGR`\n- `WebPDecodeYUV`\n- `WebPDecodeRGBAInto`\n- `WebPDecodeARGBInto`\n- `WebPDecodeBGRAInto`\n- `WebPDecodeRGBInto`\n- `WebPDecodeBGRInto`\n- `WebPDecodeYUVInto`\n- `WebPINewDecoder`\n- `WebPINewRGB`\n- `WebPINewYUVA`\n- `WebPINewYUV`\n- `WebPIAppend`\n- `WebPIUpdate`\n- `WebPIDecode`\n- `WebPDecode`\n- `WebPAnimDecoderGetNext`\n- `WebPAnimEncoderAssemble`"
          }
        },
        {
          "ruleId": "applic_CVE-2020-36331",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following vulnerable functions are referenced:\n\n- `WebPMuxCreate`\n- `WebPMuxSetImage`\n- `WebPMuxPushFrame`\n- `WebPAnimEncoderAdd`\n- `WebPAnimEncoderAssemble`"
          }
        },
        {
          "ruleId": "applic_CVE-2021-3541",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `xmlReadFile` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2022-2097",
          "message": {
            "text": "The vulnerable function EVP_EncryptInit_ex is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-2097",
          "message": {
            "text": "The vulnerable function EVP_EncryptInit_ex is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx-debug"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-27405",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n- `FT_New_Face`\n- `FT_Open_Face`\n- `FT_New_Memory_Face`"
          }
        },
        {
          "ruleId": "applic_CVE-2022-27404",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether at least one of the vulnerable functions is called:\n```\nFT_New_Face\nFT_New_Memory_Face\nFT_Open_Face\n```"
          }
        },
        {
          "ruleId": "applic_CVE-2022-27406",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n- `FT_Request_Size`\n- `FT_Set_Char_Size`\n- `FT_Set_Pixel_Sizes`"
          }
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///lib/libtls.so.17.0.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///lib/libtls.so.17.0.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///lib/libtls.so.17.0.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///lib/libtls.so.17.0.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_accept is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///lib/libtls.so.17.0.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///lib/libtls.so.17.0.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///sbin/apk"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///sbin/apk"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx-debug"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx-debug"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx-debug"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx-debug"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx-debug"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///lib/libtls.so.17.0.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///lib/libtls.so.17.0.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///lib/libtls.so.17.0.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///lib/libtls.so.17.0.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_accept is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///lib/libtls.so.17.0.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///lib/libtls.so.17.0.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///sbin/apk"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///sbin/apk"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx-debug"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx-debug"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx-debug"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx-debug"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx-debug"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-37434",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `inflateGetHeader()` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2022-40303",
          "kind": "pass",
          "message": {
            "text": "For determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: Usage of libxml2 with the `XML_PARSE_HUGE` (--huge) flag.\n\nThe scanner checks whether any of the following vulnerable functions are called:\n\n* `xmlParseAttribute`\n* `xmlParseAttributeListDecl`\n* `xmlParseDocTypeDecl`\n* `xmlParseElementDecl`\n* `xmlParseElementMixedContentDecl`\n* `xmlParseEndTag`\n* `xmlParseEntityDecl`\n* `xmlParseEntityRef`\n* `xmlParseName`\n* `xmlParseNotationDecl`\n* `xmlParseNotationType`\n* `xmlParsePEReference`\n* `xmlParsePITarget`\n* `xmlParseStartTag`"
          }
        },
        {
          "ruleId": "applic_CVE-2022-40304",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `xmlCtxtReadDoc`\n* `xmlCtxtReadFd`\n* `xmlCtxtReadFile`\n* `xmlCtxtReadIO`\n* `xmlCtxtReadMemory`\n* `xmlParseFile`\n* `xmlReadDoc`\n* `xmlReadFd`\n* `xmlReadFile`\n* `xmlReadIO`\n* `xmlReadMemory`\n* `xmlSAXParseDoc`\n* `xmlSAXParseFile`\n* `xmlSAXParseFileWithData`\n* `xmlSAXParseMemoryWithData`\n* `xmlSAXUserParseFile`\n* `xmlSAXUserParseMemory`"
          }
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx-debug"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx-debug"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx-debug"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx-debug"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx-debug"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0215",
          "kind": "pass",
          "message": {
            "text": "The scanner checks if at least one of the vulnerable functions is called:\n```\nPEM_write_bio_ASN1_stream()\nPEM_write_bio_CMS_stream()\nPEM_write_bio_PKCS7_stream()\nSMIME_write_ASN1()\nSMIME_write_CMS()\nSMIME_write_PKCS7()\nBIO_new_CMS()\nBIO_new_PKCS7()\ni2d_CMS_bio_stream()\ni2d_PKCS7_bio_stream()\ni2d_ASN1_bio_stream()\nBIO_new_NDEF()\n```"
          }
        },
        {
          "ruleId": "applic_CVE-2023-0217",
          "kind": "pass",
          "message": {
            "text": "When checking ELF files, the scanner checks whether the vulnerable `EVP_PKEY_public_check()` function is called.\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked"
          }
        },
        {
          "ruleId": "applic_CVE-2023-0286",
          "kind": "pass",
          "message": {
            "text": "The scanner checks if at least one of the vulnerable API calls is called:\n\n* `X509_STORE_CTX_get_check_revocation`\n* `X509_STORE_get_check_revocation`\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The CRL checking option must also be enabled."
          }
        },
        {
          "ruleId": "applic_CVE-2023-0401",
          "kind": "pass",
          "message": {
            "text": "When checking ELF files, the scanner checks whether at least one of the vulnerable API calls is called:\n\n* `PKCS7_decrypt`\n* `PKCS7_dataInit`\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked"
          }
        },
        {
          "ruleId": "applic_CVE-2023-0465",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether OpenSSL supports the vulnerable policy constraints parsing functionality, by checking whether the `X509_VERIFY_PARAM_set1_policies` function is called (the functionality is disabled by default)\n\nNote that the scanner does not check for an additional vulnerable case in which the vulnerable policy constraints parsing functionality is enabled via the command line flag `-policy`. For example, by running `openssl ca -policy match`. However - in this case, the vulnerability will lead to a DoS of a forked command-line utility, which has a minimal impact on security."
          }
        },
        {
          "ruleId": "applic_CVE-2023-0464",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether OpenSSL supports the vulnerable policy constraints parsing functionality, by checking whether the `X509_VERIFY_PARAM_set1_policies` function is called (the functionality is disabled by default)\n\nNote that the scanner does not check for an additional vulnerable case in which the vulnerable policy constraints parsing functionality is enabled via the command line flag `-policy`. For example, by running `openssl ca -policy match`. However - in this case, the vulnerability will lead to a DoS of a forked command-line utility, which has a minimal impact on security."
          }
        },
        {
          "ruleId": "applic_CVE-2023-2004",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the following vulnerable functions are called:\n\n- `FT_Get_Advance`\n- `FT_Get_Advances`\n- `FT_Get_PFR_Metrics`\n- `FT_Get_PFR_Advance`\n- `FT_Load_Glyph`\n- `FT_Load_Char`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-4863",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `WebPDecodeRGB`\n* `WebPDecodeARGB`\n* `WebPDecodeBGR`\n* `WebPDecodeBGRA`\n* `WebPDecodeRGBA`\n* `WebPDecodeYUV`\n* `WebPDecode`\n* `WebPDecodeARGBInto`\n* `WebPDecodeBGRAInto`\n* `WebPDecodeBGRInto`\n* `WebPDecodeRGBAInto`\n* `WebPDecodeRGBInto`\n* `WebPDecodeYUVInto`\n* `WebPIAppend`\n* `WebPIUpdate`"
          }
        },
        {
          "ruleId": "applic_CVE-2021-3711",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `EVP_PKEY_decrypt` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2022-2309",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following vulnerable functions are called:\n\nVulnerable libxml2 functions - \n\n* `xmlCtxtReset`\n* `xmlCtxtResetPush`\n* `xmlCtxtReadFile`\n* `xmlCtxtReadMemory`\n* `xmlCtxtReadFd`\n* `xmlCtxtReadIO`\n* `xmlClearParserCtxt`\n* `xmlSchemaParseImport`\n* `xmlSchemaParseSchemaTopLevel`\n* `xmlSchemaParseIncludeOrRedefine`\n* `xmlReaderForFd`\n* `xmlReaderForIO`\n* `xmlReaderNewFd`\n* `xmlReaderNewIO`\n* `xmlSetupParserForBuffer`\n\nAnd also the vulnerable lxml Python functions:\n\n* `iterwalk`\n* `canonicalize`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-0216",
          "kind": "pass",
          "message": {
            "text": "When checking ELF files, the scanner checks if at least one of the vulnerable functions is called:\n\n* `d2i_PKCS7()`\n* `d2i_PKCS7_bio()`\n* `d2i_PKCS7_fp()`\n\nWhen checking Python files, the scanner checks if at least one of the vulnerable functions is called with external input to its 1st (`bytes`) argument:\n\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_der_pkcs7_certificates`\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_pem_pkcs7_certificates`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx-debug"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "message": {
            "text": "References to the vulnerable functions for OpenSSL 3.x only were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx-debug"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-2068",
          "kind": "pass",
          "message": {
            "text": "The scanner checks for the execution of the vulnerable `c_rehash` by searching the artifact for the vulnerable command."
          }
        },
        {
          "ruleId": "applic_CVE-2022-1292",
          "kind": "pass",
          "message": {
            "text": "The scanner checks for the execution of the vulnerable `c_rehash` by searching the artifact for the vulnerable command."
          }
        },
        {
          "ruleId": "applic_CVE-2023-5363",
          "kind": "pass",
          "message": {
            "text": "The scanner checks if any of the following vulnerable functions are called:\n\n- `EVP_EncryptInit_ex2`\n- `EVP_DecryptInit_ex2`\n- `EVP_CipherInit_ex2`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-0466",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether `X509_VERIFY_PARAM_add0_policy()` is called.\n\nNote that calling `X509_VERIFY_PARAM_set_flags()` with the parameter `X509_V_FLAG_POLICY_CHECK` mitigates this vulnerability. The scanner currently does not check for that mitigation."
          }
        },
        {
          "ruleId": "applic_CVE-2024-25062",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following functions are called:\n\n* `xmlValidatePopElement()`\n* `xmlTextReaderClose()`\n* `xmlFreeTextReader() `\n* `xmlTextReaderRead()`\n* `xmlSchemaValidateDoc()`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-49210",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable `openssl` function is used with external input."
          }
        },
        {
          "ruleId": "applic_CVE-2016-7798",
          "kind": "pass",
          "message": {
            "text": "The scanner checks if the function `OpenSSL::Cipher.new()` is called with AES gcm is as the encryption type. \nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The AES IV initialization happens before the key initialization."
          }
        },
        {
          "ruleId": "applic_CVE-2021-3712",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `ASN1_STRING` structure is created by searching for the existence of all the functions that create the `ASN1_STRING` structure or other structures that are based on the `ASN1_STRING` structure:\n\n* ASN1_STRING_new()\nASN1_STRING_type_new()\nASN1_OCTET_STRING_new()\nASN1_BIT_STRING_new()\nASN1_INTEGER_new()\nASN1_ENUMERATED_new()\nASN1_UTF8STRING_new()\nASN1_IA5STRING_new()\nASN1_UNIVERSALSTRING_new()\nASN1_BMPSTRING_new()\nASN1_GENERALSTRING_new()\nASN1_T61STRING_new()\nASN1_VISIBLESTRING_new()\nASN1_PRINTABLESTRING_new()\nASN1_PRINTABLE_new()\nDIRECTORYSTRING_new()\nDISPLAYTEXT_new()  \nASN1_GENERALIZEDTIME_new()\nASN1_UTCTIME_new()\nASN1_TIME_new()"
          }
        },
        {
          "ruleId": "applic_CVE-2019-20838",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libpcre.so.1"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2019-20838",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libpcre.so.1.2.10"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2019-20838",
          "message": {
            "text": "References to the vulnerable function pcre(|16|32)_exec were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2019-20838",
          "message": {
            "text": "References to the vulnerable function pcre(|16|32)_compile were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2019-20838",
          "message": {
            "text": "References to the vulnerable function pcre(|16|32)_exec were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx-debug"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2019-20838",
          "message": {
            "text": "References to the vulnerable function pcre(|16|32)_compile were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/nginx-debug"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-3449",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the server is configured with both:\n\n* TLSv1.2\n* Renegotiation is enabled\n\n\nThis CVE is applicable in ELF files under additional conditions (that the scanner currently does not check), which should be verified. The conditions are:\n\n1. The server code explicity sets the minimum and maximum versions of TLS to support TLSv1.2 (TLSv1.3 support 1.2 as well)\n\nFor example:\n```\nSSL_CTX_set_min_proto_version(ctx, TLS1_2_VERSION);\nSSL_CTX_set_max_proto_version(ctx, TLS1_3_VERSION);\n```\n\n2. The server code *does not* explicity disables renegotiation by `SSL_CTX_set_options(ctx, SSL_OP_NO_RENEGOTIATION)`."
          }
        },
        {
          "ruleId": "applic_CVE-2021-33560",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `gcry_pk_decrypt()` \n* `gcry_pk_encrypt()`\n* `gcry_pk_genkey()`\n* `gcry_pk_sign()`\n\nand if the `\"elg\"` string is found.\nNote - For determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified. The condition is that your public key's encryption algorithm must be ElGamal."
          }
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://jfrog.com/help/r/jfrog-security-documentation/jfrog-advanced-security",
          "name": "JFrog Secrets scanner",
          "rules": [
            {
              "id": "REQ.SECRET.GENERIC.TEXT",
              "name": "REQ.SECRET.GENERIC.TEXT",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.TEXT"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive"
              }
            },
            {
              "id": "REQ.SECRET.GENERIC.CODE",
              "name": "REQ.SECRET.GENERIC.CODE",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.CODE"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private"
              }
            },
            {
              "id": "REQ.SECRET.GENERIC.URL",
              "name": "REQ.SECRET.GENERIC.URL",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.URL"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive"
              }
            },
            {
              "id": "REQ.SECRET.KEYS",
              "name": "REQ.SECRET.KEYS",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.KEYS"
              },
              "fullDescription": {
                "text": "\nStoring an API key in the image could lead to several risks.\n\nIf the key is associated with a wide scope of privileges, attackers could extract it from a single image or firmware and use it maliciously to attack many targets. For example, if the embedded key allows querying/modifying data for all cloud user accounts, without per-user authentication, the attackers who extract it would gain access to system-wide data.\n\nIf the cloud/SaaS provider bills by key usage - for example, every million queries cost the key's owner a fixed sum of money - attackers could use the keys for their own purposes (or just as a form of vandalism), incurring a large cost to the legitimate user or operator.\n\n## Best practices\n\nUse narrow scopes for stored API keys. As much as possible, API keys should be unique per host and require additional authentication with the user's individual credentials for any sensitive actions.\n\nAvoid placing keys whose use incurs costs directly in the image. Store the key with any software or hardware protection available on the host for key storage (such as operating system key-stores, hardware cryptographic storage mechanisms or cloud-managed secure storage services such as [AWS KMS](https://aws.amazon.com/kms/)).\n\nTokens that were detected as exposed should be revoked and replaced -\n\n* [AWS Key Revocation](https://aws.amazon.com/premiumsupport/knowledge-center/delete-access-key/#:~:text=If%20you%20see%20a%20warning,the%20confirmation%20box%2C%20choose%20Deactivate.)\n* [GCP Key Revocation](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/CloudIAM/delete-api-keys.html)\n* [Azure Key Revocation](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops\u0026tabs=Windows#revoke-a-pat)\n* [GitHub Key Revocation](https://docs.github.com/en/rest/apps/oauth-applications#delete-an-app-authorization)\n",
                "markdown": "\nStoring an API key in the image could lead to several risks.\n\nIf the key is associated with a wide scope of privileges, attackers could extract it from a single image or firmware and use it maliciously to attack many targets. For example, if the embedded key allows querying/modifying data for all cloud user accounts, without per-user authentication, the attackers who extract it would gain access to system-wide data.\n\nIf the cloud/SaaS provider bills by key usage - for example, every million queries cost the key's owner a fixed sum of money - attackers could use the keys for their own purposes (or just as a form of vandalism), incurring a large cost to the legitimate user or operator.\n\n## Best practices\n\nUse narrow scopes for stored API keys. As much as possible, API keys should be unique per host and require additional authentication with the user's individual credentials for any sensitive actions.\n\nAvoid placing keys whose use incurs costs directly in the image. Store the key with any software or hardware protection available on the host for key storage (such as operating system key-stores, hardware cryptographic storage mechanisms or cloud-managed secure storage services such as [AWS KMS](https://aws.amazon.com/kms/)).\n\nTokens that were detected as exposed should be revoked and replaced -\n\n* [AWS Key Revocation](https://aws.amazon.com/premiumsupport/knowledge-center/delete-access-key/#:~:text=If%20you%20see%20a%20warning,the%20confirmation%20box%2C%20choose%20Deactivate.)\n* [GCP Key Revocation](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/CloudIAM/delete-api-keys.html)\n* [Azure Key Revocation](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops\u0026tabs=Windows#revoke-a-pat)\n* [GitHub Key Revocation](https://docs.github.com/en/rest/apps/oauth-applications#delete-an-app-authorization)\n"
              },
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private"
              }
            }
          ],
          "version": "1.0"
        }
      },
      "invocations": [
        {
          "arguments": [
            "/root/.jfrog/dependencies/analyzerManager/jas_scanner/jas_scanner",
            "scan",
            "/tmp/jfrog.cli.temp.-1718808529-2815740436/config.yaml"
          ],
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "/tmp/jfrog.cli.temp.-1718808507-2858394336/image.tar"
          }
        }
      ],
      "results": []
    }
  ]
}
