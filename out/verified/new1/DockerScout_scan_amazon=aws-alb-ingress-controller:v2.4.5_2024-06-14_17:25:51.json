{
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "fullName": "Docker Scout",
          "informationUri": "https://docker.com/products/docker-scout",
          "name": "docker scout",
          "rules": [
            {
              "id": "CVE-2023-45288",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-45288"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-45288?s=golang&n=stdlib&t=golang&vr=%3C1.21.9",
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames.\n\nMaintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed.\n\nThis permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send.\n\nThe fix sets a limit on the amount of excess header frames we will process before closing a connection.\n",
                "markdown": "> An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames.\n\nMaintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed.\n\nThis permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send.\n\nThe fix sets a limit on the amount of excess header frames we will process before closing a connection.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.19.3 |\n| Affected range | <1.21.9                  |\n| Fixed version  | 1.21.9                   |\n"
              },
              "properties": {
                "affected_version": "<1.21.9",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "1.21.9",
                "purls": [
                  "pkg:golang/stdlib@1.19.3"
                ],
                "security-severity": "3.1",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "CVE-2023-45289",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-45289"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-45289?s=golang&n=stdlib&t=golang&vr=%3C1.21.8",
              "help": {
                "text": "When following an HTTP redirect to a domain which is not a subdomain match or exact match of the initial domain, an http.Client does not forward sensitive headers such as \"Authorization\" or \"Cookie\". For example, a redirect from foo.com to www.foo.com will forward the Authorization header, but a redirect to bar.com will not.\n\nA maliciously crafted HTTP redirect could cause sensitive headers to be unexpectedly forwarded.\n",
                "markdown": "> When following an HTTP redirect to a domain which is not a subdomain match or exact match of the initial domain, an http.Client does not forward sensitive headers such as \"Authorization\" or \"Cookie\". For example, a redirect from foo.com to www.foo.com will forward the Authorization header, but a redirect to bar.com will not.\n\nA maliciously crafted HTTP redirect could cause sensitive headers to be unexpectedly forwarded.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.19.3 |\n| Affected range | <1.21.8                  |\n| Fixed version  | 1.21.8                   |\n"
              },
              "properties": {
                "affected_version": "<1.21.8",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "1.21.8",
                "purls": [
                  "pkg:golang/stdlib@1.19.3"
                ],
                "security-severity": "3.1",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "CVE-2023-45290",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-45290"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-45290?s=golang&n=stdlib&t=golang&vr=%3C1.21.8",
              "help": {
                "text": "When parsing a multipart form (either explicitly with Request.ParseMultipartForm or implicitly with Request.FormValue, Request.PostFormValue, or Request.FormFile), limits on the total size of the parsed form were not applied to the memory consumed while reading a single form line. This permits a maliciously crafted input containing very long lines to cause allocation of arbitrarily large amounts of memory, potentially leading to memory exhaustion.\n\nWith fix, the ParseMultipartForm function now correctly limits the maximum size of form lines.\n",
                "markdown": "> When parsing a multipart form (either explicitly with Request.ParseMultipartForm or implicitly with Request.FormValue, Request.PostFormValue, or Request.FormFile), limits on the total size of the parsed form were not applied to the memory consumed while reading a single form line. This permits a maliciously crafted input containing very long lines to cause allocation of arbitrarily large amounts of memory, potentially leading to memory exhaustion.\n\nWith fix, the ParseMultipartForm function now correctly limits the maximum size of form lines.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.19.3 |\n| Affected range | <1.21.8                  |\n| Fixed version  | 1.21.8                   |\n"
              },
              "properties": {
                "affected_version": "<1.21.8",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "1.21.8",
                "purls": [
                  "pkg:golang/stdlib@1.19.3"
                ],
                "security-severity": "3.1",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "CVE-2024-24783",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2024-24783"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2024-24783?s=golang&n=stdlib&t=golang&vr=%3C1.21.8",
              "help": {
                "text": "Verifying a certificate chain which contains a certificate with an unknown public key algorithm will cause Certificate.Verify to panic.\n\nThis affects all crypto/tls clients, and servers that set Config.ClientAuth to VerifyClientCertIfGiven or RequireAndVerifyClientCert. The default behavior is for TLS servers to not verify client certificates.\n",
                "markdown": "> Verifying a certificate chain which contains a certificate with an unknown public key algorithm will cause Certificate.Verify to panic.\n\nThis affects all crypto/tls clients, and servers that set Config.ClientAuth to VerifyClientCertIfGiven or RequireAndVerifyClientCert. The default behavior is for TLS servers to not verify client certificates.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.19.3 |\n| Affected range | <1.21.8                  |\n| Fixed version  | 1.21.8                   |\n"
              },
              "properties": {
                "affected_version": "<1.21.8",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "1.21.8",
                "purls": [
                  "pkg:golang/stdlib@1.19.3"
                ],
                "security-severity": "3.1",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "CVE-2024-24784",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2024-24784"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2024-24784?s=golang&n=stdlib&t=golang&vr=%3C1.21.8",
              "help": {
                "text": "The ParseAddressList function incorrectly handles comments (text within parentheses) within display names. Since this is a misalignment with conforming address parsers, it can result in different trust decisions being made by programs using different parsers.\n",
                "markdown": "> The ParseAddressList function incorrectly handles comments (text within parentheses) within display names. Since this is a misalignment with conforming address parsers, it can result in different trust decisions being made by programs using different parsers.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.19.3 |\n| Affected range | <1.21.8                  |\n| Fixed version  | 1.21.8                   |\n"
              },
              "properties": {
                "affected_version": "<1.21.8",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "1.21.8",
                "purls": [
                  "pkg:golang/stdlib@1.19.3"
                ],
                "security-severity": "3.1",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "CVE-2024-24785",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2024-24785"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2024-24785?s=golang&n=stdlib&t=golang&vr=%3C1.21.8",
              "help": {
                "text": "If errors returned from MarshalJSON methods contain user controlled data, they may be used to break the contextual auto-escaping behavior of the html/template package, allowing for subsequent actions to inject unexpected content into templates.\n",
                "markdown": "> If errors returned from MarshalJSON methods contain user controlled data, they may be used to break the contextual auto-escaping behavior of the html/template package, allowing for subsequent actions to inject unexpected content into templates.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.19.3 |\n| Affected range | <1.21.8                  |\n| Fixed version  | 1.21.8                   |\n"
              },
              "properties": {
                "affected_version": "<1.21.8",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "1.21.8",
                "purls": [
                  "pkg:golang/stdlib@1.19.3"
                ],
                "security-severity": "3.1",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "CVE-2024-24789",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2024-24789"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2024-24789?s=golang&n=stdlib&t=golang&vr=%3C1.21.11",
              "help": {
                "text": "The archive/zip package's handling of certain types of invalid zip files differs from the behavior of most zip implementations. This misalignment could be exploited to create an zip file with contents that vary depending on the implementation reading the file. The archive/zip package now rejects files containing these errors.\n",
                "markdown": "> The archive/zip package's handling of certain types of invalid zip files differs from the behavior of most zip implementations. This misalignment could be exploited to create an zip file with contents that vary depending on the implementation reading the file. The archive/zip package now rejects files containing these errors.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.19.3 |\n| Affected range | <1.21.11                 |\n| Fixed version  | 1.21.11                  |\n"
              },
              "properties": {
                "affected_version": "<1.21.11",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "1.21.11",
                "purls": [
                  "pkg:golang/stdlib@1.19.3"
                ],
                "security-severity": "3.1",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "CVE-2024-24790",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2024-24790"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2024-24790?s=golang&n=stdlib&t=golang&vr=%3C1.21.11",
              "help": {
                "text": "The various Is methods (IsPrivate, IsLoopback, etc) did not work as expected for IPv4-mapped IPv6 addresses, returning false for addresses which would return true in their traditional IPv4 forms.\n",
                "markdown": "> The various Is methods (IsPrivate, IsLoopback, etc) did not work as expected for IPv4-mapped IPv6 addresses, returning false for addresses which would return true in their traditional IPv4 forms.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.19.3 |\n| Affected range | <1.21.11                 |\n| Fixed version  | 1.21.11                  |\n"
              },
              "properties": {
                "affected_version": "<1.21.11",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "1.21.11",
                "purls": [
                  "pkg:golang/stdlib@1.19.3"
                ],
                "security-severity": "3.1",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "CVE-2020-8912",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-8912"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2020-8912?s=golang&n=aws-sdk-go&ns=github.com%2Faws&t=golang&vr=%3E%3D0",
              "help": {
                "text": "The Go AWS S3 Crypto SDK contains vulnerabilities that can permit an attacker with write access to a bucket to decrypt files in that bucket.\n\nFiles encrypted by the V1 EncryptionClient using either the AES-CBC content cipher or the KMS key wrap algorithm are vulnerable. Users should migrate to the V1 EncryptionClientV2 API, which will not create vulnerable files. Old files will remain vulnerable until re-encrypted with the new client.\n",
                "markdown": "> The Go AWS S3 Crypto SDK contains vulnerabilities that can permit an attacker with write access to a bucket to decrypt files in that bucket.\n\nFiles encrypted by the V1 EncryptionClient using either the AES-CBC content cipher or the KMS key wrap algorithm are vulnerable. Users should migrate to the V1 EncryptionClientV2 API, which will not create vulnerable files. Old files will remain vulnerable until re-encrypted with the new client.\n\n|                |                                              |\n|----------------|----------------------------------------------|\n| Package        | pkg:golang/github.com/aws/aws-sdk-go@1.42.27 |\n| Affected range | >=0                                          |\n| Fixed version  | not fixed                                    |\n"
              },
              "properties": {
                "affected_version": ">=0",
                "cvssV3_severity": "LOW",
                "fixed_version": "not fixed",
                "purls": [
                  "pkg:golang/github.com/aws/aws-sdk-go@1.42.27"
                ],
                "security-severity": "2.5",
                "tags": [
                  "LOW"
                ]
              }
            },
            {
              "id": "CVE-2024-24786",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2024-24786: Loop with Unreachable Exit Condition ('Infinite Loop')"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2024-24786?s=github&n=protobuf&ns=google.golang.org&t=golang&vr=%3C1.33.0",
              "help": {
                "text": "The protojson.Unmarshal function can enter an infinite loop when unmarshaling certain forms of invalid JSON. This condition can occur when unmarshaling into a message which contains a google.protobuf.Any value, or when the UnmarshalOptions.DiscardUnknown option is set.\n",
                "markdown": "> The protojson.Unmarshal function can enter an infinite loop when unmarshaling certain forms of invalid JSON. This condition can occur when unmarshaling into a message which contains a google.protobuf.Any value, or when the UnmarshalOptions.DiscardUnknown option is set.\n\n|                |                                              |\n|----------------|----------------------------------------------|\n| Package        | pkg:golang/google.golang.org/protobuf@1.28.0 |\n| Affected range | <1.33.0                                      |\n| Fixed version  | 1.33.0                                       |\n"
              },
              "properties": {
                "affected_version": "<1.33.0",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.33.0",
                "purls": [
                  "pkg:golang/google.golang.org/protobuf@1.28.0"
                ],
                "security-severity": "4.1",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2022-29526",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-29526: Improper Privilege Management"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-29526?s=github&n=sys&ns=golang.org%2Fx&t=golang&vr=%3C0.0.0-20220412211240-33da011f77ad",
              "help": {
                "text": "Go before 1.17.10 and 1.18.x before 1.18.2 has Incorrect Privilege Reporting in syscall. When called with a non-zero flags parameter, the Faccessat function could incorrectly report that a file is accessible.\n\n### Specific Go Packages Affected\ngolang.org/x/sys/unix\n",
                "markdown": "> Go before 1.17.10 and 1.18.x before 1.18.2 has Incorrect Privilege Reporting in syscall. When called with a non-zero flags parameter, the Faccessat function could incorrectly report that a file is accessible.\n\n### Specific Go Packages Affected\ngolang.org/x/sys/unix\n\n|                |                                                               |\n|----------------|---------------------------------------------------------------|\n| Package        | pkg:golang/golang.org/x/sys@0.0.0-20210603081109-ebe580a85c40 |\n| Affected range | <0.0.0-20220412211240-33da011f77ad                            |\n| Fixed version  | 0.0.0-20220412211240-33da011f77ad                             |\n| CVSS Score     |                                                           5.3 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N                  |\n"
              },
              "properties": {
                "affected_version": "<0.0.0-20220412211240-33da011f77ad",
                "cvssV3": 5.3,
                "cvssV3_severity": "MEDIUM",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
                "fixed_version": "0.0.0-20220412211240-33da011f77ad",
                "purls": [
                  "pkg:golang/golang.org/x/sys@0.0.0-20210603081109-ebe580a85c40"
                ],
                "security-severity": "5.3",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2022-41717",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41717"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-41717?s=golang&n=stdlib&t=golang&vr=%3E%3D1.19.0-0%2C%3C1.19.4",
              "help": {
                "text": "An attacker can cause excessive memory growth in a Go server accepting HTTP/2 requests.\n\nHTTP/2 server connections contain a cache of HTTP header keys sent by the client. While the total number of entries in this cache is capped, an attacker sending very large keys can cause the server to allocate approximately 64 MiB per open connection.\n",
                "markdown": "> An attacker can cause excessive memory growth in a Go server accepting HTTP/2 requests.\n\nHTTP/2 server connections contain a cache of HTTP header keys sent by the client. While the total number of entries in this cache is capped, an attacker sending very large keys can cause the server to allocate approximately 64 MiB per open connection.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.19.3 |\n| Affected range | >=1.19.0-0,<1.19.4       |\n| Fixed version  | 1.19.4                   |\n"
              },
              "properties": {
                "affected_version": ">=1.19.0-0,<1.19.4",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.19.4",
                "purls": [
                  "pkg:golang/stdlib@1.19.3"
                ],
                "security-severity": "5.3",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2023-24532",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-24532"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-24532?s=golang&n=stdlib&t=golang&vr=%3C1.19.7",
              "help": {
                "text": "The ScalarMult and ScalarBaseMult methods of the P256 Curve may return an incorrect result if called with some specific unreduced scalars (a scalar larger than the order of the curve).\n\nThis does not impact usages of crypto/ecdsa or crypto/ecdh.\n",
                "markdown": "> The ScalarMult and ScalarBaseMult methods of the P256 Curve may return an incorrect result if called with some specific unreduced scalars (a scalar larger than the order of the curve).\n\nThis does not impact usages of crypto/ecdsa or crypto/ecdh.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.19.3 |\n| Affected range | <1.19.7                  |\n| Fixed version  | 1.19.7                   |\n"
              },
              "properties": {
                "affected_version": "<1.19.7",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.19.7",
                "purls": [
                  "pkg:golang/stdlib@1.19.3"
                ],
                "security-severity": "5.3",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2023-29409",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-29409"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-29409?s=golang&n=stdlib&t=golang&vr=%3C1.19.12",
              "help": {
                "text": "Extremely large RSA keys in certificate chains can cause a client/server to expend significant CPU time verifying signatures.\n\nWith fix, the size of RSA keys transmitted during handshakes is restricted to <= 8192 bits.\n\nBased on a survey of publicly trusted RSA keys, there are currently only three certificates in circulation with keys larger than this, and all three appear to be test certificates that are not actively deployed. It is possible there are larger keys in use in private PKIs, but we target the web PKI, so causing breakage here in the interests of increasing the default safety of users of crypto/tls seems reasonable.\n",
                "markdown": "> Extremely large RSA keys in certificate chains can cause a client/server to expend significant CPU time verifying signatures.\n\nWith fix, the size of RSA keys transmitted during handshakes is restricted to <= 8192 bits.\n\nBased on a survey of publicly trusted RSA keys, there are currently only three certificates in circulation with keys larger than this, and all three appear to be test certificates that are not actively deployed. It is possible there are larger keys in use in private PKIs, but we target the web PKI, so causing breakage here in the interests of increasing the default safety of users of crypto/tls seems reasonable.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.19.3 |\n| Affected range | <1.19.12                 |\n| Fixed version  | 1.19.12                  |\n"
              },
              "properties": {
                "affected_version": "<1.19.12",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.19.12",
                "purls": [
                  "pkg:golang/stdlib@1.19.3"
                ],
                "security-severity": "5.3",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2023-39326",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-39326"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-39326?s=golang&n=stdlib&t=golang&vr=%3C1.20.12",
              "help": {
                "text": "A malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body.\n\nA malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request.\n\nChunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small.\n",
                "markdown": "> A malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body.\n\nA malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request.\n\nChunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.19.3 |\n| Affected range | <1.20.12                 |\n| Fixed version  | 1.20.12                  |\n"
              },
              "properties": {
                "affected_version": "<1.20.12",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.20.12",
                "purls": [
                  "pkg:golang/stdlib@1.19.3"
                ],
                "security-severity": "5.3",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2023-45284",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-45284"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-45284?s=golang&n=stdlib&t=golang&vr=%3C1.20.11",
              "help": {
                "text": "On Windows, The IsLocal function does not correctly detect reserved device names in some cases.\n\nReserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local.\n\nWith fix, IsLocal now correctly reports these names as non-local.\n",
                "markdown": "> On Windows, The IsLocal function does not correctly detect reserved device names in some cases.\n\nReserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local.\n\nWith fix, IsLocal now correctly reports these names as non-local.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.19.3 |\n| Affected range | <1.20.11                 |\n| Fixed version  | 1.20.11                  |\n"
              },
              "properties": {
                "affected_version": "<1.20.11",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.20.11",
                "purls": [
                  "pkg:golang/stdlib@1.19.3"
                ],
                "security-severity": "5.3",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2020-8911",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-8911"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2020-8911?s=golang&n=aws-sdk-go&ns=github.com%2Faws&t=golang&vr=%3E%3D0",
              "help": {
                "text": "The Go AWS S3 Crypto SDK contains vulnerabilities that can permit an attacker with write access to a bucket to decrypt files in that bucket.\n\nFiles encrypted by the V1 EncryptionClient using either the AES-CBC content cipher or the KMS key wrap algorithm are vulnerable. Users should migrate to the V1 EncryptionClientV2 API, which will not create vulnerable files. Old files will remain vulnerable until re-encrypted with the new client.\n",
                "markdown": "> The Go AWS S3 Crypto SDK contains vulnerabilities that can permit an attacker with write access to a bucket to decrypt files in that bucket.\n\nFiles encrypted by the V1 EncryptionClient using either the AES-CBC content cipher or the KMS key wrap algorithm are vulnerable. Users should migrate to the V1 EncryptionClientV2 API, which will not create vulnerable files. Old files will remain vulnerable until re-encrypted with the new client.\n\n|                |                                              |\n|----------------|----------------------------------------------|\n| Package        | pkg:golang/github.com/aws/aws-sdk-go@1.42.27 |\n| Affected range | >=0                                          |\n| Fixed version  | not fixed                                    |\n"
              },
              "properties": {
                "affected_version": ">=0",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "not fixed",
                "purls": [
                  "pkg:golang/github.com/aws/aws-sdk-go@1.42.27"
                ],
                "security-severity": "5.6",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2023-39318",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-39318"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-39318?s=golang&n=stdlib&t=golang&vr=%3C1.20.8",
              "help": {
                "text": "The html/template package does not properly handle HTML-like \"\" comment tokens, nor hashbang \"#!\" comment tokens, in <script> contexts. This may cause the template parser to improperly interpret the contents of <script> contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack.\n",
                "markdown": "> The html/template package does not properly handle HTML-like \"\" comment tokens, nor hashbang \"#!\" comment tokens, in <script> contexts. This may cause the template parser to improperly interpret the contents of <script> contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.19.3 |\n| Affected range | <1.20.8                  |\n| Fixed version  | 1.20.8                   |\n"
              },
              "properties": {
                "affected_version": "<1.20.8",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.20.8",
                "purls": [
                  "pkg:golang/stdlib@1.19.3"
                ],
                "security-severity": "6.1",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2023-39319",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-39319"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-39319?s=golang&n=stdlib&t=golang&vr=%3C1.20.8",
              "help": {
                "text": "The html/template package does not apply the proper rules for handling occurrences of \"<script\", \"<!--\", and \"</script\" within JS literals in <script> contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack.\n",
                "markdown": "> The html/template package does not apply the proper rules for handling occurrences of \"<script\", \"<!--\", and \"</script\" within JS literals in <script> contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.19.3 |\n| Affected range | <1.20.8                  |\n| Fixed version  | 1.20.8                   |\n"
              },
              "properties": {
                "affected_version": "<1.20.8",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.20.8",
                "purls": [
                  "pkg:golang/stdlib@1.19.3"
                ],
                "security-severity": "6.1",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2023-29406",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-29406"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-29406?s=golang&n=stdlib&t=golang&vr=%3C1.19.11",
              "help": {
                "text": "The HTTP/1 client does not fully validate the contents of the Host header. A maliciously crafted Host header can inject additional headers or entire requests.\n\nWith fix, the HTTP/1 client now refuses to send requests containing an invalid Request.Host or Request.URL.Host value.\n",
                "markdown": "> The HTTP/1 client does not fully validate the contents of the Host header. A maliciously crafted Host header can inject additional headers or entire requests.\n\nWith fix, the HTTP/1 client now refuses to send requests containing an invalid Request.Host or Request.URL.Host value.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.19.3 |\n| Affected range | <1.19.11                 |\n| Fixed version  | 1.19.11                  |\n"
              },
              "properties": {
                "affected_version": "<1.19.11",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.19.11",
                "purls": [
                  "pkg:golang/stdlib@1.19.3"
                ],
                "security-severity": "6.5",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2023-32803",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-32803"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-32803?s=amazon&n=ca-certificates&ns=amazonlinux&t=rpm&osn=amazonlinux&osv=2&vr=%3C2021.2.50-72.amzn2.0.7",
              "help": {
                "text": "Package updates are available for Amazon Linux 2 that fix the following vulnerabilities:\nCVE-2023-32803:\n\tAn initial fix in Amazon Linux ca-certificates package relating to CVE-2022-23491 did not properly remove root certificates from TrustCor from the root store.\n",
                "markdown": "> Package updates are available for Amazon Linux 2 that fix the following vulnerabilities:\nCVE-2023-32803:\n\tAn initial fix in Amazon Linux ca-certificates package relating to CVE-2022-23491 did not properly remove root certificates from TrustCor from the root store.\n\n|                |                                                                                             |\n|----------------|---------------------------------------------------------------------------------------------|\n| Package        | pkg:rpm/amazonlinux/ca-certificates@2021.2.50-72.amzn2.0.3?os_name=amazonlinux&os_version=2 |\n| Affected range | <2021.2.50-72.amzn2.0.7                                                                     |\n| Fixed version  | 2021.2.50-72.amzn2.0.7                                                                      |\n"
              },
              "properties": {
                "affected_version": "<2021.2.50-72.amzn2.0.7",
                "cvssV3_severity": "HIGH",
                "fixed_version": "2021.2.50-72.amzn2.0.7",
                "purls": [
                  "pkg:rpm/amazonlinux/ca-certificates@2021.2.50-72.amzn2.0.3?os_name=amazonlinux&os_version=2"
                ],
                "security-severity": "7.1",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2023-37920",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-37920"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-37920?s=amazon&n=ca-certificates&ns=amazonlinux&t=rpm&osn=amazonlinux&osv=2&vr=%3C2021.2.50-72.amzn2.0.8",
              "help": {
                "text": "Package updates are available for Amazon Linux 2 that fix the following vulnerabilities:\nCVE-2023-37920:\n\tCertifi is a curated collection of Root Certificates for validating the trustworthiness of SSL certificates while verifying the identity of TLS hosts. Certifi prior to version 2023.07.22 recognizes \"e-Tugra\" root certificates. e-Tugra's root certificates were subject to an investigation prompted by reporting of security issues in their systems. Certifi 2023.07.22 removes root certificates from \"e-Tugra\" from the root store.\n",
                "markdown": "> Package updates are available for Amazon Linux 2 that fix the following vulnerabilities:\nCVE-2023-37920:\n\tCertifi is a curated collection of Root Certificates for validating the trustworthiness of SSL certificates while verifying the identity of TLS hosts. Certifi prior to version 2023.07.22 recognizes \"e-Tugra\" root certificates. e-Tugra's root certificates were subject to an investigation prompted by reporting of security issues in their systems. Certifi 2023.07.22 removes root certificates from \"e-Tugra\" from the root store.\n\n|                |                                                                                             |\n|----------------|---------------------------------------------------------------------------------------------|\n| Package        | pkg:rpm/amazonlinux/ca-certificates@2021.2.50-72.amzn2.0.3?os_name=amazonlinux&os_version=2 |\n| Affected range | <2021.2.50-72.amzn2.0.8                                                                     |\n| Fixed version  | 2021.2.50-72.amzn2.0.8                                                                      |\n"
              },
              "properties": {
                "affected_version": "<2021.2.50-72.amzn2.0.8",
                "cvssV3_severity": "HIGH",
                "fixed_version": "2021.2.50-72.amzn2.0.8",
                "purls": [
                  "pkg:rpm/amazonlinux/ca-certificates@2021.2.50-72.amzn2.0.3?os_name=amazonlinux&os_version=2"
                ],
                "security-severity": "7.1",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2023-24539",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-24539"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-24539?s=golang&n=stdlib&t=golang&vr=%3C1.19.9",
              "help": {
                "text": "Angle brackets (<>) are not considered dangerous characters when inserted into CSS contexts. Templates containing multiple actions separated by a '/' character can result in unexpectedly closing the CSS context and allowing for injection of unexpected HTML, if executed with untrusted input.\n",
                "markdown": "> Angle brackets (<>) are not considered dangerous characters when inserted into CSS contexts. Templates containing multiple actions separated by a '/' character can result in unexpectedly closing the CSS context and allowing for injection of unexpected HTML, if executed with untrusted input.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.19.3 |\n| Affected range | <1.19.9                  |\n| Fixed version  | 1.19.9                   |\n"
              },
              "properties": {
                "affected_version": "<1.19.9",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.19.9",
                "purls": [
                  "pkg:golang/stdlib@1.19.3"
                ],
                "security-severity": "7.3",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2023-29400",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-29400"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-29400?s=golang&n=stdlib&t=golang&vr=%3C1.19.9",
              "help": {
                "text": "Templates containing actions in unquoted HTML attributes (e.g. \"attr={{.}}\") executed with empty input can result in output with unexpected results when parsed due to HTML normalization rules. This may allow injection of arbitrary attributes into tags.\n",
                "markdown": "> Templates containing actions in unquoted HTML attributes (e.g. \"attr={{.}}\") executed with empty input can result in output with unexpected results when parsed due to HTML normalization rules. This may allow injection of arbitrary attributes into tags.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.19.3 |\n| Affected range | <1.19.9                  |\n| Fixed version  | 1.19.9                   |\n"
              },
              "properties": {
                "affected_version": "<1.19.9",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.19.9",
                "purls": [
                  "pkg:golang/stdlib@1.19.3"
                ],
                "security-severity": "7.3",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-21698",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-21698: Uncontrolled Resource Consumption"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-21698?s=github&n=client_golang&ns=github.com%2Fprometheus&t=golang&vr=%3C1.11.1",
              "help": {
                "text": "This is the Go client library for Prometheus. It has two separate parts, one for instrumenting application code, and one for creating clients that talk to the Prometheus HTTP API. client_golang is the instrumentation library for Go applications in Prometheus, and the promhttp package in client_golang provides tooling around HTTP servers and clients.\n\n### Impact\n\nHTTP server susceptible to a Denial of Service through unbounded cardinality, and potential memory exhaustion, when handling requests with non-standard HTTP methods.\n\n###  Affected Configuration\n\nIn order to be affected, an instrumented software must\n\n* Use any of `promhttp.InstrumentHandler*` middleware except `RequestsInFlight`.\n* Do not filter any specific methods (e.g GET) before middleware.\n* Pass metric with `method` label name to our middleware.\n* Not have any firewall/LB/proxy that filters away requests with unknown `method`.\n\n### Patches\n\n* https://github.com/prometheus/client_golang/pull/962\n* https://github.com/prometheus/client_golang/pull/987\n\n### Workarounds\n\nIf you cannot upgrade to [v1.11.1 or above](https://github.com/prometheus/client_golang/releases/tag/v1.11.1), in order to stop being affected you can:\n\n* Remove `method` label name from counter/gauge you use in the InstrumentHandler.\n* Turn off affected promhttp handlers.\n* Add custom middleware before promhttp handler that will sanitize the request method given by Go http.Request.\n* Use a reverse proxy or web application firewall, configured to only allow a limited set of methods.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in https://github.com/prometheus/client_golang\n* Email us at `prometheus-team@googlegroups.com`\n\n",
                "markdown": "> This is the Go client library for Prometheus. It has two separate parts, one for instrumenting application code, and one for creating clients that talk to the Prometheus HTTP API. client_golang is the instrumentation library for Go applications in Prometheus, and the promhttp package in client_golang provides tooling around HTTP servers and clients.\n\n### Impact\n\nHTTP server susceptible to a Denial of Service through unbounded cardinality, and potential memory exhaustion, when handling requests with non-standard HTTP methods.\n\n###  Affected Configuration\n\nIn order to be affected, an instrumented software must\n\n* Use any of `promhttp.InstrumentHandler*` middleware except `RequestsInFlight`.\n* Do not filter any specific methods (e.g GET) before middleware.\n* Pass metric with `method` label name to our middleware.\n* Not have any firewall/LB/proxy that filters away requests with unknown `method`.\n\n### Patches\n\n* https://github.com/prometheus/client_golang/pull/962\n* https://github.com/prometheus/client_golang/pull/987\n\n### Workarounds\n\nIf you cannot upgrade to [v1.11.1 or above](https://github.com/prometheus/client_golang/releases/tag/v1.11.1), in order to stop being affected you can:\n\n* Remove `method` label name from counter/gauge you use in the InstrumentHandler.\n* Turn off affected promhttp handlers.\n* Add custom middleware before promhttp handler that will sanitize the request method given by Go http.Request.\n* Use a reverse proxy or web application firewall, configured to only allow a limited set of methods.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in https://github.com/prometheus/client_golang\n* Email us at `prometheus-team@googlegroups.com`\n\n\n|                |                                                       |\n|----------------|-------------------------------------------------------|\n| Package        | pkg:golang/github.com/prometheus/client_golang@1.11.0 |\n| Affected range | <1.11.1                                               |\n| Fixed version  | 1.11.1                                                |\n| CVSS Score     |                                                   7.5 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H          |\n"
              },
              "properties": {
                "affected_version": "<1.11.1",
                "cvssV3": 7.5,
                "cvssV3_severity": "HIGH",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                "fixed_version": "1.11.1",
                "purls": [
                  "pkg:golang/github.com/prometheus/client_golang@1.11.0"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-27664",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-27664"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-27664?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.0.0-20220906165146-f3363e06e74c",
              "help": {
                "text": "In net/http in Go before 1.18.6 and 1.19.x before 1.19.1, attackers can cause a denial of service because an HTTP/2 connection can hang during closing if shutdown were preempted by a fatal error.\n",
                "markdown": "> In net/http in Go before 1.18.6 and 1.19.x before 1.19.1, attackers can cause a denial of service because an HTTP/2 connection can hang during closing if shutdown were preempted by a fatal error.\n\n|                |                                                               |\n|----------------|---------------------------------------------------------------|\n| Package        | pkg:golang/golang.org/x/net@0.0.0-20220722155237-a158d28d115b |\n| Affected range | <0.0.0-20220906165146-f3363e06e74c                            |\n| Fixed version  | 0.0.0-20220906165146-f3363e06e74c                             |\n| CVSS Score     |                                                           7.5 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H                  |\n"
              },
              "properties": {
                "affected_version": "<0.0.0-20220906165146-f3363e06e74c",
                "cvssV3": 7.5,
                "cvssV3_severity": "HIGH",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                "fixed_version": "0.0.0-20220906165146-f3363e06e74c",
                "purls": [
                  "pkg:golang/golang.org/x/net@0.0.0-20220722155237-a158d28d115b"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-32149",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-32149: Missing Release of Resource after Effective Lifetime"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-32149?s=github&n=text&ns=golang.org%2Fx&t=golang&vr=%3C0.3.8",
              "help": {
                "text": "The BCP 47 tag parser has quadratic time complexity due to inherent aspects of its design. Since the parser is, by design, exposed to untrusted user input, this can be leveraged to force a program to consume significant time parsing Accept-Language headers. The parser cannot be easily rewritten to fix this behavior for various reasons. Instead the solution implemented in this CL is to limit the total complexity of tags passed into ParseAcceptLanguage by limiting the number of dashes in the string to 1000. This should be more than enough for the majority of real world use cases, where the number of tags being sent is likely to be in the single digits.\n\n### Specific Go Packages Affected\ngolang.org/x/text/language\n",
                "markdown": "> The BCP 47 tag parser has quadratic time complexity due to inherent aspects of its design. Since the parser is, by design, exposed to untrusted user input, this can be leveraged to force a program to consume significant time parsing Accept-Language headers. The parser cannot be easily rewritten to fix this behavior for various reasons. Instead the solution implemented in this CL is to limit the total complexity of tags passed into ParseAcceptLanguage by limiting the number of dashes in the string to 1000. This should be more than enough for the majority of real world use cases, where the number of tags being sent is likely to be in the single digits.\n\n### Specific Go Packages Affected\ngolang.org/x/text/language\n\n|                |                                              |\n|----------------|----------------------------------------------|\n| Package        | pkg:golang/golang.org/x/text@0.3.7           |\n| Affected range | <0.3.8                                       |\n| Fixed version  | 0.3.8                                        |\n| CVSS Score     |                                          7.5 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H |\n"
              },
              "properties": {
                "affected_version": "<0.3.8",
                "cvssV3": 7.5,
                "cvssV3_severity": "HIGH",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                "fixed_version": "0.3.8",
                "purls": [
                  "pkg:golang/golang.org/x/text@0.3.7"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-41720",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41720"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-41720?s=golang&n=stdlib&t=golang&vr=%3E%3D1.19.0-0%2C%3C1.19.4",
              "help": {
                "text": "On Windows, restricted files can be accessed via os.DirFS and http.Dir.\n\nThe os.DirFS function and http.Dir type provide access to a tree of files rooted at a given directory. These functions permit access to Windows device files under that root. For example, os.DirFS(\"C:/tmp\").Open(\"COM1\") opens the COM1 device. Both os.DirFS and http.Dir only provide read-only filesystem access.\n\nIn addition, on Windows, an os.DirFS for the directory (the root of the current drive) can permit a maliciously crafted path to escape from the drive and access any path on the system.\n\nWith fix applied, the behavior of os.DirFS(\"\") has changed. Previously, an empty root was treated equivalently to \"/\", so os.DirFS(\"\").Open(\"tmp\") would open the path \"/tmp\". This now returns an error.\n",
                "markdown": "> On Windows, restricted files can be accessed via os.DirFS and http.Dir.\n\nThe os.DirFS function and http.Dir type provide access to a tree of files rooted at a given directory. These functions permit access to Windows device files under that root. For example, os.DirFS(\"C:/tmp\").Open(\"COM1\") opens the COM1 device. Both os.DirFS and http.Dir only provide read-only filesystem access.\n\nIn addition, on Windows, an os.DirFS for the directory (the root of the current drive) can permit a maliciously crafted path to escape from the drive and access any path on the system.\n\nWith fix applied, the behavior of os.DirFS(\"\") has changed. Previously, an empty root was treated equivalently to \"/\", so os.DirFS(\"\").Open(\"tmp\") would open the path \"/tmp\". This now returns an error.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.19.3 |\n| Affected range | >=1.19.0-0,<1.19.4       |\n| Fixed version  | 1.19.4                   |\n"
              },
              "properties": {
                "affected_version": ">=1.19.0-0,<1.19.4",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.19.4",
                "purls": [
                  "pkg:golang/stdlib@1.19.3"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-41721",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41721: Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-41721?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3E%3D0.0.0-20220524220425-1d687d428aca%2C%3C0.1.1-0.20221104162952-702349b0e862",
              "help": {
                "text": "A request smuggling attack is possible when using MaxBytesHandler. When using MaxBytesHandler, the body of an HTTP request is not fully consumed. When the server attempts to read HTTP2 frames from the connection, it will instead be reading the body of the HTTP request, which could be attacker-manipulated to represent arbitrary HTTP2 requests.\n\n### Specific Go Packages Affected\ngolang.org/x/net/http2/h2c\n",
                "markdown": "> A request smuggling attack is possible when using MaxBytesHandler. When using MaxBytesHandler, the body of an HTTP request is not fully consumed. When the server attempts to read HTTP2 frames from the connection, it will instead be reading the body of the HTTP request, which could be attacker-manipulated to represent arbitrary HTTP2 requests.\n\n### Specific Go Packages Affected\ngolang.org/x/net/http2/h2c\n\n|                |                                                                          |\n|----------------|--------------------------------------------------------------------------|\n| Package        | pkg:golang/golang.org/x/net@0.0.0-20220722155237-a158d28d115b            |\n| Affected range | >=0.0.0-20220524220425-1d687d428aca,<0.1.1-0.20221104162952-702349b0e862 |\n| Fixed version  | 0.1.1-0.20221104162952-702349b0e862                                      |\n| CVSS Score     |                                                                      7.5 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H                             |\n"
              },
              "properties": {
                "affected_version": ">=0.0.0-20220524220425-1d687d428aca,<0.1.1-0.20221104162952-702349b0e862",
                "cvssV3": 7.5,
                "cvssV3_severity": "HIGH",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                "fixed_version": "0.1.1-0.20221104162952-702349b0e862",
                "purls": [
                  "pkg:golang/golang.org/x/net@0.0.0-20220722155237-a158d28d115b"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-41722",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41722"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-41722?s=golang&n=stdlib&t=golang&vr=%3C1.19.6",
              "help": {
                "text": "A path traversal vulnerability exists in filepath.Clean on Windows.\n\nOn Windows, the filepath.Clean function could transform an invalid path such as \"a/../c:/b\" into the valid path \"c:\\b\". This transformation of a relative (if invalid) path into an absolute path could enable a directory traversal attack.\n\nAfter fix, the filepath.Clean function transforms this path into the relative (but still invalid) path \".\\c:\\b\".\n",
                "markdown": "> A path traversal vulnerability exists in filepath.Clean on Windows.\n\nOn Windows, the filepath.Clean function could transform an invalid path such as \"a/../c:/b\" into the valid path \"c:\\b\". This transformation of a relative (if invalid) path into an absolute path could enable a directory traversal attack.\n\nAfter fix, the filepath.Clean function transforms this path into the relative (but still invalid) path \".\\c:\\b\".\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.19.3 |\n| Affected range | <1.19.6                  |\n| Fixed version  | 1.19.6                   |\n"
              },
              "properties": {
                "affected_version": "<1.19.6",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.19.6",
                "purls": [
                  "pkg:golang/stdlib@1.19.3"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-41723",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41723"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-41723?s=golang&n=stdlib&t=golang&vr=%3C1.19.6",
              "help": {
                "text": "A maliciously crafted HTTP/2 stream could cause excessive CPU consumption in the HPACK decoder, sufficient to cause a denial of service from a small number of small requests.\n",
                "markdown": "> A maliciously crafted HTTP/2 stream could cause excessive CPU consumption in the HPACK decoder, sufficient to cause a denial of service from a small number of small requests.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.19.3 |\n| Affected range | <1.19.6                  |\n| Fixed version  | 1.19.6                   |\n"
              },
              "properties": {
                "affected_version": "<1.19.6",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.19.6",
                "purls": [
                  "pkg:golang/stdlib@1.19.3"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-41724",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41724"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-41724?s=golang&n=stdlib&t=golang&vr=%3C1.19.6",
              "help": {
                "text": "Large handshake records may cause panics in crypto/tls.\n\nBoth clients and servers may send large TLS handshake records which cause servers and clients, respectively, to panic when attempting to construct responses.\n\nThis affects all TLS 1.3 clients, TLS 1.2 clients which explicitly enable session resumption (by setting Config.ClientSessionCache to a non-nil value), and TLS 1.3 servers which request client certificates (by setting Config.ClientAuth >= RequestClientCert).\n",
                "markdown": "> Large handshake records may cause panics in crypto/tls.\n\nBoth clients and servers may send large TLS handshake records which cause servers and clients, respectively, to panic when attempting to construct responses.\n\nThis affects all TLS 1.3 clients, TLS 1.2 clients which explicitly enable session resumption (by setting Config.ClientSessionCache to a non-nil value), and TLS 1.3 servers which request client certificates (by setting Config.ClientAuth >= RequestClientCert).\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.19.3 |\n| Affected range | <1.19.6                  |\n| Fixed version  | 1.19.6                   |\n"
              },
              "properties": {
                "affected_version": "<1.19.6",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.19.6",
                "purls": [
                  "pkg:golang/stdlib@1.19.3"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-41725",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41725"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-41725?s=golang&n=stdlib&t=golang&vr=%3C1.19.6",
              "help": {
                "text": "A denial of service is possible from excessive resource consumption in net/http and mime/multipart.\n\nMultipart form parsing with mime/multipart.Reader.ReadForm can consume largely unlimited amounts of memory and disk files. This also affects form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue.\n\nReadForm takes a maxMemory parameter, and is documented as storing \"up to maxMemory bytes +10MB (reserved for non-file parts) in memory\". File parts which cannot be stored in memory are stored on disk in temporary files. The unconfigurable 10MB reserved for non-file parts is excessively large and can potentially open a denial of service vector on its own. However, ReadForm did not properly account for all memory consumed by a parsed form, such as map entry overhead, part names, and MIME headers, permitting a maliciously crafted form to consume well over 10MB. In addition, ReadForm contained no limit on the number of disk files created, permitting a relatively small request body to create a large number of disk temporary files.\n\nWith fix, ReadForm now properly accounts for various forms of memory overhead, and should now stay within its documented limit of 10MB + maxMemory bytes of memory consumption. Users should still be aware that this limit is high and may still be hazardous.\n\nIn addition, ReadForm now creates at most one on-disk temporary file, combining multiple form parts into a single temporary file. The mime/multipart.File interface type's documentation states, \"If stored on disk, the File's underlying concrete type will be an *os.File.\". This is no longer the case when a form contains more than one file part, due to this coalescing of parts into a single file. The previous behavior of using distinct files for each form part may be reenabled with the environment variable GODEBUG=multipartfiles=distinct.\n\nUsers should be aware that multipart.ReadForm and the http.Request methods that call it do not limit the amount of disk consumed by temporary files. Callers can limit the size of form data with http.MaxBytesReader.\n",
                "markdown": "> A denial of service is possible from excessive resource consumption in net/http and mime/multipart.\n\nMultipart form parsing with mime/multipart.Reader.ReadForm can consume largely unlimited amounts of memory and disk files. This also affects form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue.\n\nReadForm takes a maxMemory parameter, and is documented as storing \"up to maxMemory bytes +10MB (reserved for non-file parts) in memory\". File parts which cannot be stored in memory are stored on disk in temporary files. The unconfigurable 10MB reserved for non-file parts is excessively large and can potentially open a denial of service vector on its own. However, ReadForm did not properly account for all memory consumed by a parsed form, such as map entry overhead, part names, and MIME headers, permitting a maliciously crafted form to consume well over 10MB. In addition, ReadForm contained no limit on the number of disk files created, permitting a relatively small request body to create a large number of disk temporary files.\n\nWith fix, ReadForm now properly accounts for various forms of memory overhead, and should now stay within its documented limit of 10MB + maxMemory bytes of memory consumption. Users should still be aware that this limit is high and may still be hazardous.\n\nIn addition, ReadForm now creates at most one on-disk temporary file, combining multiple form parts into a single temporary file. The mime/multipart.File interface type's documentation states, \"If stored on disk, the File's underlying concrete type will be an *os.File.\". This is no longer the case when a form contains more than one file part, due to this coalescing of parts into a single file. The previous behavior of using distinct files for each form part may be reenabled with the environment variable GODEBUG=multipartfiles=distinct.\n\nUsers should be aware that multipart.ReadForm and the http.Request methods that call it do not limit the amount of disk consumed by temporary files. Callers can limit the size of form data with http.MaxBytesReader.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.19.3 |\n| Affected range | <1.19.6                  |\n| Fixed version  | 1.19.6                   |\n"
              },
              "properties": {
                "affected_version": "<1.19.6",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.19.6",
                "purls": [
                  "pkg:golang/stdlib@1.19.3"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2023-24534",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-24534"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-24534?s=golang&n=stdlib&t=golang&vr=%3C1.19.8",
              "help": {
                "text": "HTTP and MIME header parsing can allocate large amounts of memory, even when parsing small inputs, potentially leading to a denial of service.\n\nCertain unusual patterns of input data can cause the common function used to parse HTTP and MIME headers to allocate substantially more memory than required to hold the parsed headers. An attacker can exploit this behavior to cause an HTTP server to allocate large amounts of memory from a small request, potentially leading to memory exhaustion and a denial of service.\n\nWith fix, header parsing now correctly allocates only the memory required to hold parsed headers.\n",
                "markdown": "> HTTP and MIME header parsing can allocate large amounts of memory, even when parsing small inputs, potentially leading to a denial of service.\n\nCertain unusual patterns of input data can cause the common function used to parse HTTP and MIME headers to allocate substantially more memory than required to hold the parsed headers. An attacker can exploit this behavior to cause an HTTP server to allocate large amounts of memory from a small request, potentially leading to memory exhaustion and a denial of service.\n\nWith fix, header parsing now correctly allocates only the memory required to hold parsed headers.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.19.3 |\n| Affected range | <1.19.8                  |\n| Fixed version  | 1.19.8                   |\n"
              },
              "properties": {
                "affected_version": "<1.19.8",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.19.8",
                "purls": [
                  "pkg:golang/stdlib@1.19.3"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2023-24536",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-24536"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-24536?s=golang&n=stdlib&t=golang&vr=%3C1.19.8",
              "help": {
                "text": "Multipart form parsing can consume large amounts of CPU and memory when processing form inputs containing very large numbers of parts.\n\nThis stems from several causes:\n\n1. mime/multipart.Reader.ReadForm limits the total memory a parsed multipart form can consume. ReadForm can undercount the amount of memory consumed, leading it to accept larger inputs than intended.\n2. Limiting total memory does not account for increased pressure on the garbage collector from large numbers of small allocations in forms with many parts.\n3. ReadForm can allocate a large number of short-lived buffers, further increasing pressure on the garbage collector.\n\nThe combination of these factors can permit an attacker to cause an program that parses multipart forms to consume large amounts of CPU and memory, potentially resulting in a denial of service. This affects programs that use mime/multipart.Reader.ReadForm, as well as form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue.\n\nWith fix, ReadForm now does a better job of estimating the memory consumption of parsed forms, and performs many fewer short-lived allocations.\n\nIn addition, the fixed mime/multipart.Reader imposes the following limits on the size of parsed forms:\n\n1. Forms parsed with ReadForm may contain no more than 1000 parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxparts=.\n2. Form parts parsed with NextPart and NextRawPart may contain no more than 10,000 header fields. In addition, forms parsed with ReadForm may contain no more than 10,000 header fields across all parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxheaders=.\n",
                "markdown": "> Multipart form parsing can consume large amounts of CPU and memory when processing form inputs containing very large numbers of parts.\n\nThis stems from several causes:\n\n1. mime/multipart.Reader.ReadForm limits the total memory a parsed multipart form can consume. ReadForm can undercount the amount of memory consumed, leading it to accept larger inputs than intended.\n2. Limiting total memory does not account for increased pressure on the garbage collector from large numbers of small allocations in forms with many parts.\n3. ReadForm can allocate a large number of short-lived buffers, further increasing pressure on the garbage collector.\n\nThe combination of these factors can permit an attacker to cause an program that parses multipart forms to consume large amounts of CPU and memory, potentially resulting in a denial of service. This affects programs that use mime/multipart.Reader.ReadForm, as well as form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue.\n\nWith fix, ReadForm now does a better job of estimating the memory consumption of parsed forms, and performs many fewer short-lived allocations.\n\nIn addition, the fixed mime/multipart.Reader imposes the following limits on the size of parsed forms:\n\n1. Forms parsed with ReadForm may contain no more than 1000 parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxparts=.\n2. Form parts parsed with NextPart and NextRawPart may contain no more than 10,000 header fields. In addition, forms parsed with ReadForm may contain no more than 10,000 header fields across all parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxheaders=.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.19.3 |\n| Affected range | <1.19.8                  |\n| Fixed version  | 1.19.8                   |\n"
              },
              "properties": {
                "affected_version": "<1.19.8",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.19.8",
                "purls": [
                  "pkg:golang/stdlib@1.19.3"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2023-24537",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-24537"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-24537?s=golang&n=stdlib&t=golang&vr=%3C1.19.8",
              "help": {
                "text": "Calling any of the Parse functions on Go source code which contains //line directives with very large line numbers can cause an infinite loop due to integer overflow.\n",
                "markdown": "> Calling any of the Parse functions on Go source code which contains //line directives with very large line numbers can cause an infinite loop due to integer overflow.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.19.3 |\n| Affected range | <1.19.8                  |\n| Fixed version  | 1.19.8                   |\n"
              },
              "properties": {
                "affected_version": "<1.19.8",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.19.8",
                "purls": [
                  "pkg:golang/stdlib@1.19.3"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2023-39325",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-39325"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-39325?s=golang&n=stdlib&t=golang&vr=%3C1.20.10",
              "help": {
                "text": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing.\n\nWith the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection.\n\nThis issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2.\n\nThe default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.\n",
                "markdown": "> A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing.\n\nWith the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection.\n\nThis issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2.\n\nThe default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.19.3 |\n| Affected range | <1.20.10                 |\n| Fixed version  | 1.20.10                  |\n"
              },
              "properties": {
                "affected_version": "<1.20.10",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.20.10",
                "purls": [
                  "pkg:golang/stdlib@1.19.3"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2023-45283",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-45283"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-45283?s=golang&n=stdlib&t=golang&vr=%3C1.20.11",
              "help": {
                "text": "The filepath package does not recognize paths with a \\??\\ prefix as special.\n\nOn Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x.\n\nBefore fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b.\n\nSimilarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b.\n\nIn addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name.\n\nUPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored.\n",
                "markdown": "> The filepath package does not recognize paths with a \\??\\ prefix as special.\n\nOn Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x.\n\nBefore fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b.\n\nSimilarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b.\n\nIn addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name.\n\nUPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.19.3 |\n| Affected range | <1.20.11                 |\n| Fixed version  | 1.20.11                  |\n"
              },
              "properties": {
                "affected_version": "<1.20.11",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.20.11",
                "purls": [
                  "pkg:golang/stdlib@1.19.3"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2023-45287",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-45287"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-45287?s=golang&n=stdlib&t=golang&vr=%3C1.20.0",
              "help": {
                "text": "Before Go 1.20, the RSA based TLS key exchanges used the math/big library, which is not constant time. RSA blinding was applied to prevent timing attacks, but analysis shows this may not have been fully effective. In particular it appears as if the removal of PKCS#1 padding may leak timing information, which in turn could be used to recover session key bits.\n\nIn Go 1.20, the crypto/tls library switched to a fully constant time RSA implementation, which we do not believe exhibits any timing side channels.\n",
                "markdown": "> Before Go 1.20, the RSA based TLS key exchanges used the math/big library, which is not constant time. RSA blinding was applied to prevent timing attacks, but analysis shows this may not have been fully effective. In particular it appears as if the removal of PKCS#1 padding may leak timing information, which in turn could be used to recover session key bits.\n\nIn Go 1.20, the crypto/tls library switched to a fully constant time RSA implementation, which we do not believe exhibits any timing side channels.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.19.3 |\n| Affected range | <1.20.0                  |\n| Fixed version  | 1.20.0                   |\n"
              },
              "properties": {
                "affected_version": "<1.20.0",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.20.0",
                "purls": [
                  "pkg:golang/stdlib@1.19.3"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2023-29403",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-29403"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-29403?s=golang&n=stdlib&t=golang&vr=%3C1.19.10",
              "help": {
                "text": "On Unix platforms, the Go runtime does not behave differently when a binary is run with the setuid/setgid bits. This can be dangerous in certain cases, such as when dumping memory state, or assuming the status of standard i/o file descriptors.\n\nIf a setuid/setgid binary is executed with standard I/O file descriptors closed, opening any files can result in unexpected content being read or written with elevated privileges. Similarly, if a setuid/setgid program is terminated, either via panic or signal, it may leak the contents of its registers.\n",
                "markdown": "> On Unix platforms, the Go runtime does not behave differently when a binary is run with the setuid/setgid bits. This can be dangerous in certain cases, such as when dumping memory state, or assuming the status of standard i/o file descriptors.\n\nIf a setuid/setgid binary is executed with standard I/O file descriptors closed, opening any files can result in unexpected content being read or written with elevated privileges. Similarly, if a setuid/setgid program is terminated, either via panic or signal, it may leak the contents of its registers.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.19.3 |\n| Affected range | <1.19.10                 |\n| Fixed version  | 1.19.10                  |\n"
              },
              "properties": {
                "affected_version": "<1.19.10",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.19.10",
                "purls": [
                  "pkg:golang/stdlib@1.19.3"
                ],
                "security-severity": "7.8",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2023-24538",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-24538"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-24538?s=golang&n=stdlib&t=golang&vr=%3C1.19.8",
              "help": {
                "text": "Templates do not properly consider backticks (`) as Javascript string delimiters, and do not escape them as expected.\n\nBackticks are used, since ES6, for JS template literals. If a template contains a Go template action within a Javascript template literal, the contents of the action can be used to terminate the literal, injecting arbitrary Javascript code into the Go template.\n\nAs ES6 template literals are rather complex, and themselves can do string interpolation, the decision was made to simply disallow Go template actions from being used inside of them (e.g. \"var a = {{.}}\"), since there is no obviously safe way to allow this behavior. This takes the same approach as github.com/google/safehtml.\n\nWith fix, Template.Parse returns an Error when it encounters templates like this, with an ErrorCode of value 12. This ErrorCode is currently unexported, but will be exported in the release of Go 1.21.\n\nUsers who rely on the previous behavior can re-enable it using the GODEBUG flag jstmpllitinterp=1, with the caveat that backticks will now be escaped. This should be used with caution.\n",
                "markdown": "> Templates do not properly consider backticks (`) as Javascript string delimiters, and do not escape them as expected.\n\nBackticks are used, since ES6, for JS template literals. If a template contains a Go template action within a Javascript template literal, the contents of the action can be used to terminate the literal, injecting arbitrary Javascript code into the Go template.\n\nAs ES6 template literals are rather complex, and themselves can do string interpolation, the decision was made to simply disallow Go template actions from being used inside of them (e.g. \"var a = {{.}}\"), since there is no obviously safe way to allow this behavior. This takes the same approach as github.com/google/safehtml.\n\nWith fix, Template.Parse returns an Error when it encounters templates like this, with an ErrorCode of value 12. This ErrorCode is currently unexported, but will be exported in the release of Go 1.21.\n\nUsers who rely on the previous behavior can re-enable it using the GODEBUG flag jstmpllitinterp=1, with the caveat that backticks will now be escaped. This should be used with caution.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.19.3 |\n| Affected range | <1.19.8                  |\n| Fixed version  | 1.19.8                   |\n"
              },
              "properties": {
                "affected_version": "<1.19.8",
                "cvssV3_severity": "CRITICAL",
                "fixed_version": "1.19.8",
                "purls": [
                  "pkg:golang/stdlib@1.19.3"
                ],
                "security-severity": "9.8",
                "tags": [
                  "CRITICAL"
                ]
              }
            },
            {
              "id": "CVE-2023-24540",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-24540"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-24540?s=golang&n=stdlib&t=golang&vr=%3C1.19.9",
              "help": {
                "text": "Not all valid JavaScript whitespace characters are considered to be whitespace. Templates containing whitespace characters outside of the character set \"\\t\\n\\f\\r\\u0020\\u2028\\u2029\" in JavaScript contexts that also contain actions may not be properly sanitized during execution.\n",
                "markdown": "> Not all valid JavaScript whitespace characters are considered to be whitespace. Templates containing whitespace characters outside of the character set \"\\t\\n\\f\\r\\u0020\\u2028\\u2029\" in JavaScript contexts that also contain actions may not be properly sanitized during execution.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.19.3 |\n| Affected range | <1.19.9                  |\n| Fixed version  | 1.19.9                   |\n"
              },
              "properties": {
                "affected_version": "<1.19.9",
                "cvssV3_severity": "CRITICAL",
                "fixed_version": "1.19.9",
                "purls": [
                  "pkg:golang/stdlib@1.19.3"
                ],
                "security-severity": "9.8",
                "tags": [
                  "CRITICAL"
                ]
              }
            }
          ],
          "version": "1.9.3"
        }
      },
      "results": [
        {
          "ruleId": "CVE-2023-45288",
          "ruleIndex": 0,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability   : CVE-2023-45288            \n  Severity        : UNSPECIFIED               \n  Package         : pkg:golang/stdlib@1.19.3  \n  Affected range  : <1.21.9                   \n  Fixed version   : 1.21.9                    \n  EPSS Score      : 0.000440                  \n  EPSS Percentile : 0.132280                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45289",
          "ruleIndex": 1,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability   : CVE-2023-45289            \n  Severity        : UNSPECIFIED               \n  Package         : pkg:golang/stdlib@1.19.3  \n  Affected range  : <1.21.8                   \n  Fixed version   : 1.21.8                    \n  EPSS Score      : 0.000440                  \n  EPSS Percentile : 0.102930                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45290",
          "ruleIndex": 2,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability   : CVE-2023-45290            \n  Severity        : UNSPECIFIED               \n  Package         : pkg:golang/stdlib@1.19.3  \n  Affected range  : <1.21.8                   \n  Fixed version   : 1.21.8                    \n  EPSS Score      : 0.000440                  \n  EPSS Percentile : 0.102930                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24783",
          "ruleIndex": 3,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability   : CVE-2024-24783            \n  Severity        : UNSPECIFIED               \n  Package         : pkg:golang/stdlib@1.19.3  \n  Affected range  : <1.21.8                   \n  Fixed version   : 1.21.8                    \n  EPSS Score      : 0.000440                  \n  EPSS Percentile : 0.102930                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24784",
          "ruleIndex": 4,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability   : CVE-2024-24784            \n  Severity        : UNSPECIFIED               \n  Package         : pkg:golang/stdlib@1.19.3  \n  Affected range  : <1.21.8                   \n  Fixed version   : 1.21.8                    \n  EPSS Score      : 0.000440                  \n  EPSS Percentile : 0.102930                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24785",
          "ruleIndex": 5,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability   : CVE-2024-24785            \n  Severity        : UNSPECIFIED               \n  Package         : pkg:golang/stdlib@1.19.3  \n  Affected range  : <1.21.8                   \n  Fixed version   : 1.21.8                    \n  EPSS Score      : 0.000440                  \n  EPSS Percentile : 0.102930                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24789",
          "ruleIndex": 6,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability   : CVE-2024-24789            \n  Severity        : UNSPECIFIED               \n  Package         : pkg:golang/stdlib@1.19.3  \n  Affected range  : <1.21.11                  \n  Fixed version   : 1.21.11                   \n  EPSS Score      : 0.000450                  \n  EPSS Percentile : 0.154300                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24790",
          "ruleIndex": 7,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability   : CVE-2024-24790            \n  Severity        : UNSPECIFIED               \n  Package         : pkg:golang/stdlib@1.19.3  \n  Affected range  : <1.21.11                  \n  Fixed version   : 1.21.11                   \n  EPSS Score      : 0.000450                  \n  EPSS Percentile : 0.154300                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-8912",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "  Vulnerability   : CVE-2020-8912                                 \n  Severity        : LOW                                           \n  Package         : pkg:golang/github.com/aws/aws-sdk-go@1.42.27  \n  Affected range  : >=0                                           \n  Fixed version   : not fixed                                     \n  EPSS Score      : 0.000440                                      \n  EPSS Percentile : 0.128200                                      \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24786",
          "ruleIndex": 9,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2024-24786                                \n  Severity        : MEDIUM                                        \n  Package         : pkg:golang/google.golang.org/protobuf@1.28.0  \n  Affected range  : <1.33.0                                       \n  Fixed version   : 1.33.0                                        \n  EPSS Score      : 0.000450                                      \n  EPSS Percentile : 0.154300                                      \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-29526",
          "ruleIndex": 10,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2022-29526                                                 \n  Severity        : MEDIUM                                                         \n  Package         : pkg:golang/golang.org/x/sys@0.0.0-20210603081109-ebe580a85c40  \n  Affected range  : <0.0.0-20220412211240-33da011f77ad                             \n  Fixed version   : 0.0.0-20220412211240-33da011f77ad                              \n  CVSS Score      : 5.3                                                            \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N                   \n  EPSS Score      : 0.002440                                                       \n  EPSS Percentile : 0.646400                                                       \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41717",
          "ruleIndex": 11,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2022-41717            \n  Severity        : MEDIUM                    \n  Package         : pkg:golang/stdlib@1.19.3  \n  Affected range  : >=1.19.0-0,<1.19.4        \n  Fixed version   : 1.19.4                    \n  EPSS Score      : 0.002860                  \n  EPSS Percentile : 0.688640                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24532",
          "ruleIndex": 12,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2023-24532            \n  Severity        : MEDIUM                    \n  Package         : pkg:golang/stdlib@1.19.3  \n  Affected range  : <1.19.7                   \n  Fixed version   : 1.19.7                    \n  EPSS Score      : 0.000930                  \n  EPSS Percentile : 0.397440                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29409",
          "ruleIndex": 13,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2023-29409            \n  Severity        : MEDIUM                    \n  Package         : pkg:golang/stdlib@1.19.3  \n  Affected range  : <1.19.12                  \n  Fixed version   : 1.19.12                   \n  EPSS Score      : 0.000600                  \n  EPSS Percentile : 0.257210                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39326",
          "ruleIndex": 14,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2023-39326            \n  Severity        : MEDIUM                    \n  Package         : pkg:golang/stdlib@1.19.3  \n  Affected range  : <1.20.12                  \n  Fixed version   : 1.20.12                   \n  EPSS Score      : 0.000520                  \n  EPSS Percentile : 0.202910                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45284",
          "ruleIndex": 15,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2023-45284            \n  Severity        : MEDIUM                    \n  Package         : pkg:golang/stdlib@1.19.3  \n  Affected range  : <1.20.11                  \n  Fixed version   : 1.20.11                   \n  EPSS Score      : 0.000520                  \n  EPSS Percentile : 0.202910                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-8911",
          "ruleIndex": 16,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2020-8911                                 \n  Severity        : MEDIUM                                        \n  Package         : pkg:golang/github.com/aws/aws-sdk-go@1.42.27  \n  Affected range  : >=0                                           \n  Fixed version   : not fixed                                     \n  EPSS Score      : 0.000510                                      \n  EPSS Percentile : 0.200700                                      \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39318",
          "ruleIndex": 17,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2023-39318            \n  Severity        : MEDIUM                    \n  Package         : pkg:golang/stdlib@1.19.3  \n  Affected range  : <1.20.8                   \n  Fixed version   : 1.20.8                    \n  EPSS Score      : 0.000840                  \n  EPSS Percentile : 0.358960                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39319",
          "ruleIndex": 18,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2023-39319            \n  Severity        : MEDIUM                    \n  Package         : pkg:golang/stdlib@1.19.3  \n  Affected range  : <1.20.8                   \n  Fixed version   : 1.20.8                    \n  EPSS Score      : 0.000610                  \n  EPSS Percentile : 0.259730                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29406",
          "ruleIndex": 19,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2023-29406            \n  Severity        : MEDIUM                    \n  Package         : pkg:golang/stdlib@1.19.3  \n  Affected range  : <1.19.11                  \n  Fixed version   : 1.19.11                   \n  EPSS Score      : 0.000910                  \n  EPSS Percentile : 0.388510                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-32803",
          "ruleIndex": 20,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability  : CVE-2023-32803                                                                               \n  Severity       : HIGH                                                                                         \n  Package        : pkg:rpm/amazonlinux/ca-certificates@2021.2.50-72.amzn2.0.3?os_name=amazonlinux&os_version=2  \n  Affected range : <2021.2.50-72.amzn2.0.7                                                                      \n  Fixed version  : 2021.2.50-72.amzn2.0.7                                                                       \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/var/lib/rpm/Packages"
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/etc/pki/ca-trust/source/README"
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/bin/update-ca-trust"
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/share/pki/ca-trust-legacy/ca-bundle.legacy.disable.crt"
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/etc/pki/ca-trust/README"
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/etc/pki/ca-trust/extracted/pem/objsign-ca-bundle.pem"
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/bin/ca-legacy"
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/share/pki/ca-trust-source/README"
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/etc/pki/ca-trust/extracted/openssl/README"
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/etc/pki/ca-trust/extracted/openssl/ca-bundle.trust.crt"
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/share/pki/ca-trust-legacy/ca-bundle.legacy.default.crt"
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/etc/pki/ca-trust/extracted/java/README"
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/etc/pki/ca-trust/extracted/README"
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/etc/pki/ca-trust/extracted/java/cacerts"
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/etc/pki/ca-trust/extracted/pem/README"
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/etc/pki/ca-trust/extracted/pem/email-ca-bundle.pem"
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/share/pki/ca-trust-source/ca-bundle.trust.p11-kit"
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/etc/pki/ca-trust/ca-legacy.conf"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-37920",
          "ruleIndex": 21,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2023-37920                                                                               \n  Severity        : HIGH                                                                                         \n  Package         : pkg:rpm/amazonlinux/ca-certificates@2021.2.50-72.amzn2.0.3?os_name=amazonlinux&os_version=2  \n  Affected range  : <2021.2.50-72.amzn2.0.8                                                                      \n  Fixed version   : 2021.2.50-72.amzn2.0.8                                                                       \n  EPSS Score      : 0.000590                                                                                     \n  EPSS Percentile : 0.249000                                                                                     \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/var/lib/rpm/Packages"
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/etc/pki/ca-trust/source/README"
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/bin/update-ca-trust"
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/share/pki/ca-trust-legacy/ca-bundle.legacy.disable.crt"
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/etc/pki/ca-trust/README"
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/etc/pki/ca-trust/extracted/pem/objsign-ca-bundle.pem"
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/bin/ca-legacy"
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/share/pki/ca-trust-source/README"
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/etc/pki/ca-trust/extracted/openssl/README"
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/etc/pki/ca-trust/extracted/openssl/ca-bundle.trust.crt"
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/share/pki/ca-trust-legacy/ca-bundle.legacy.default.crt"
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/etc/pki/ca-trust/extracted/java/README"
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/etc/pki/ca-trust/extracted/README"
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/etc/pki/ca-trust/extracted/java/cacerts"
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/etc/pki/ca-trust/extracted/pem/README"
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/etc/pki/ca-trust/extracted/pem/email-ca-bundle.pem"
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/share/pki/ca-trust-source/ca-bundle.trust.p11-kit"
                }
              }
            },
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/etc/pki/ca-trust/ca-legacy.conf"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24539",
          "ruleIndex": 22,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2023-24539            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.19.3  \n  Affected range  : <1.19.9                   \n  Fixed version   : 1.19.9                    \n  EPSS Score      : 0.001270                  \n  EPSS Percentile : 0.475850                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29400",
          "ruleIndex": 23,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2023-29400            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.19.3  \n  Affected range  : <1.19.9                   \n  Fixed version   : 1.19.9                    \n  EPSS Score      : 0.001270                  \n  EPSS Percentile : 0.475850                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-21698",
          "ruleIndex": 24,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-21698                                         \n  Severity        : HIGH                                                   \n  Package         : pkg:golang/github.com/prometheus/client_golang@1.11.0  \n  Affected range  : <1.11.1                                                \n  Fixed version   : 1.11.1                                                 \n  CVSS Score      : 7.5                                                    \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H           \n  EPSS Score      : 0.004730                                               \n  EPSS Percentile : 0.757480                                               \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27664",
          "ruleIndex": 25,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-27664                                                 \n  Severity        : HIGH                                                           \n  Package         : pkg:golang/golang.org/x/net@0.0.0-20220722155237-a158d28d115b  \n  Affected range  : <0.0.0-20220906165146-f3363e06e74c                             \n  Fixed version   : 0.0.0-20220906165146-f3363e06e74c                              \n  CVSS Score      : 7.5                                                            \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H                   \n  EPSS Score      : 0.002390                                                       \n  EPSS Percentile : 0.620590                                                       \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32149",
          "ruleIndex": 26,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-32149                                \n  Severity        : HIGH                                          \n  Package         : pkg:golang/golang.org/x/text@0.3.7            \n  Affected range  : <0.3.8                                        \n  Fixed version   : 0.3.8                                         \n  CVSS Score      : 7.5                                           \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H  \n  EPSS Score      : 0.002390                                      \n  EPSS Percentile : 0.620600                                      \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41720",
          "ruleIndex": 27,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-41720            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.19.3  \n  Affected range  : >=1.19.0-0,<1.19.4        \n  Fixed version   : 1.19.4                    \n  EPSS Score      : 0.001690                  \n  EPSS Percentile : 0.539000                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41721",
          "ruleIndex": 28,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-41721                                                            \n  Severity        : HIGH                                                                      \n  Package         : pkg:golang/golang.org/x/net@0.0.0-20220722155237-a158d28d115b             \n  Affected range  : >=0.0.0-20220524220425-1d687d428aca,<0.1.1-0.20221104162952-702349b0e862  \n  Fixed version   : 0.1.1-0.20221104162952-702349b0e862                                       \n  CVSS Score      : 7.5                                                                       \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H                              \n  EPSS Score      : 0.001470                                                                  \n  EPSS Percentile : 0.508550                                                                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41722",
          "ruleIndex": 29,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-41722            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.19.3  \n  Affected range  : <1.19.6                   \n  Fixed version   : 1.19.6                    \n  EPSS Score      : 0.001110                  \n  EPSS Percentile : 0.445280                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41723",
          "ruleIndex": 30,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-41723            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.19.3  \n  Affected range  : <1.19.6                   \n  Fixed version   : 1.19.6                    \n  EPSS Score      : 0.024130                  \n  EPSS Percentile : 0.899570                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41724",
          "ruleIndex": 31,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-41724            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.19.3  \n  Affected range  : <1.19.6                   \n  Fixed version   : 1.19.6                    \n  EPSS Score      : 0.001290                  \n  EPSS Percentile : 0.479510                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41725",
          "ruleIndex": 32,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-41725            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.19.3  \n  Affected range  : <1.19.6                   \n  Fixed version   : 1.19.6                    \n  EPSS Score      : 0.001320                  \n  EPSS Percentile : 0.484780                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24534",
          "ruleIndex": 33,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2023-24534            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.19.3  \n  Affected range  : <1.19.8                   \n  Fixed version   : 1.19.8                    \n  EPSS Score      : 0.002150                  \n  EPSS Percentile : 0.596760                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24536",
          "ruleIndex": 34,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2023-24536            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.19.3  \n  Affected range  : <1.19.8                   \n  Fixed version   : 1.19.8                    \n  EPSS Score      : 0.005380                  \n  EPSS Percentile : 0.772930                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24537",
          "ruleIndex": 35,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2023-24537            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.19.3  \n  Affected range  : <1.19.8                   \n  Fixed version   : 1.19.8                    \n  EPSS Score      : 0.001040                  \n  EPSS Percentile : 0.424930                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39325",
          "ruleIndex": 36,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2023-39325            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.19.3  \n  Affected range  : <1.20.10                  \n  Fixed version   : 1.20.10                   \n  EPSS Score      : 0.002090                  \n  EPSS Percentile : 0.589890                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45283",
          "ruleIndex": 37,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2023-45283            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.19.3  \n  Affected range  : <1.20.11                  \n  Fixed version   : 1.20.11                   \n  EPSS Score      : 0.000980                  \n  EPSS Percentile : 0.411420                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45287",
          "ruleIndex": 38,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2023-45287            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.19.3  \n  Affected range  : <1.20.0                   \n  Fixed version   : 1.20.0                    \n  EPSS Score      : 0.000710                  \n  EPSS Percentile : 0.306540                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29403",
          "ruleIndex": 39,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2023-29403            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.19.3  \n  Affected range  : <1.19.10                  \n  Fixed version   : 1.19.10                   \n  EPSS Score      : 0.000580                  \n  EPSS Percentile : 0.240800                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24538",
          "ruleIndex": 40,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2023-24538            \n  Severity        : CRITICAL                  \n  Package         : pkg:golang/stdlib@1.19.3  \n  Affected range  : <1.19.8                   \n  Fixed version   : 1.19.8                    \n  EPSS Score      : 0.003430                  \n  EPSS Percentile : 0.716160                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24540",
          "ruleIndex": 41,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2023-24540            \n  Severity        : CRITICAL                  \n  Package         : pkg:golang/stdlib@1.19.3  \n  Affected range  : <1.19.9                   \n  Fixed version   : 1.19.9                    \n  EPSS Score      : 0.002560                  \n  EPSS Percentile : 0.655600                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/controller"
                }
              }
            }
          ]
        }
      ]
    }
  ]
}
