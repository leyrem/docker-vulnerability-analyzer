{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Snyk Container",
          "properties": {
            "artifactsScanned": 0
          },
          "rules": []
        }
      },
      "results": []
    },
    {
      "tool": {
        "driver": {
          "name": "Snyk Container",
          "properties": {
            "artifactsScanned": 1439
          },
          "rules": [
            {
              "id": "SNYK-GOLANG-GITHUBCOMCONTAINERDCONTAINERD-6219724",
              "shortDescription": {
                "text": "High severity - Container Breakout (Leaky Vessels) vulnerability in github.com/containerd/containerd"
              },
              "fullDescription": {
                "text": "(CVE-2024-21626) github.com/containerd/containerd@v1.7.12"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Container Breakout (Leaky Vessels). Due to certain leaked file descriptors, an attacker could cause a newly-spawned container process (from `runc exec`) to have a working directory in the host filesystem namespace, allowing for a container escape by giving access to the host filesystem (\"attack 2\"). The same attack could be used by a malicious image to allow a container process to gain access to the host filesystem through `runc run` (\"attack 1\"). Variants of attacks 1 and 2 could also be used to overwrite semi-arbitrary host binaries, allowing for complete container escapes (\"attack 3a\" and \"attack 3b\").\r\n\r\n**Attack 1: process.cwd \"mis-configuration\"**\r\n\r\nSeveral file descriptors are inadvertently leaked into `runc init`, including a handle to the host's `/sys/fs/cgroup` (this leak was added in v1.0.0-rc93). If the container was configured to have `process.cwd` set to `/proc/self/fd/7/` (the actual fd can change depending on file opening order in `runc`), the resulting pid1 process will have a working directory in the host mount namespace and thus the spawned process can access the entire host filesystem. This alone is not an exploit against runc, however a malicious image could make any innocuous-looking non-`/` path a symlink to `/proc/self/fd/7/` and thus trick a user into starting a container whose binary has access to the host filesystem.\r\n\r\nFurthermore, runc does not verify that the final working directory is inside the container's mount namespace after calling `chdir(2)` (as we have already joined the container namespace, it is incorrectly assumed there is no way to `chdir` outside the container after `pivot_root(2)`).\r\n\r\n**Note:** This attack requires a privileged user to be tricked into running a malicious container image. It should be noted that when using higher-level runtimes (such as Docker or Kubernetes), this exploit can be considered critical as it can be done remotely by anyone with the rights to start a container image (and can be exploited from within Dockerfiles using `ONBUILD` in the case of Docker).\r\n\r\n**Attack 2: runc exec container breakout** (This is a modification of attack 1, constructed to allow for a process inside a container to break out.)\r\n\r\nThe same fd leak and lack of verification of the working directory in attack 1 also apply to `runc exec`. If a malicious process inside the container knows that some administrative process will call `runc exec` with the `--cwd` argument and a given path, in most cases they can replace that path with a symlink to `/proc/self/fd/7/`. Once the container process has executed the container binary, `PR_SET_DUMPABLE` protections no longer apply and the attacker can open `/proc/$exec_pid/cwd` to get access to the host filesystem.\r\n\r\n`runc exec` defaults to a cwd of `/` (which cannot be replaced with a symlink), so this attack depends on the attacker getting a user (or some administrative process) to use `--cwd` and figuring out what path the target working directory is. Note that if the target working directory is a parent of the program binary being executed, the attacker might be unable to replace the path with a symlink (the `execve` will fail in most cases, unless the host filesystem layout specifically matches the container layout in specific ways and the attacker knows which binary the `runc exec` is executing).\r\n\r\n**Attacks 3a and 3b: process.args host binary overwrite attack** (These are modifications of attacks 1 and 2, constructed to overwrite a host binary by using `execve` to bring a magic-link reference into the container.)\r\n\r\nAttacks 1 and 2 can be adapted to overwrite a host binary by using a path like `/proc/self/fd/7/../../../bin/bash` as the `process.args` binary argument, causing a host binary to be executed by a container process. The `/proc/$pid/exe` handle can then be used to overwrite the host binary, as seen in [CVE-2019-5736](https://security.snyk.io/vuln/SNYK-GOLANG-GITHUBCOMOPENCONTAINERSRUNCLIBCONTAINER-6186508) (note that the same `#!` trick can be used to avoid detection as an attacker). As the overwritten binary could be something like `/bin/bash`, as soon as a privileged user executes the target binary on the host, the attacker can pivot to gain full access to the host.\r\n\r\n**Notes:** \r\n\r\n- Attack 3a is attack 1 but adapted to overwrite a host binary, where a malicious image is set up to execute `/proc/self/fd/7/../../../bin/bash` and run a shell script that overwrites `/proc/self/exe`, overwriting the host copy of `/bin/bash`. \r\n\r\n- Attack 3b is attack 2 but adapted to overwrite a host binary, where the malicious container process overwrites all of the possible `runc exec` target binaries inside the container (such as `/bin/bash`) such that a host target binary is executed and then the container process opens `/proc/$pid/exe` to get access to the host binary and overwrite it. \r\n\r\n- As mentioned above, 3b is more dangerous than 3a in practice as it doesn't require a user to run a malicious image.\r\n\r\n## Workarounds\r\n\r\n- For attacks 1 and 2, only permit containers (and `runc exec`) to use a `process.cwd` of `/`. It is not possible for `/` to be replaced with a symlink (the path is resolved from within the container's mount namespace, and you cannot change the root of a mount namespace or an fs root to a symlink).\r\n\r\n- For attacks 1 and 3a, only permit users to run trusted images.\r\n\r\n- For attack 3b, there is no practical workaround other than never using `runc exec` because any binary executed with `runc exec` could end up being a malicious binary target.\r\n\r\n*This vulnerability was discovered and responsibly disclosed as part of the [Leaky Vessels](https://snyk.io/blog/leaky-vessels-docker-runc-container-breakout-vulnerabilities/) project.*\r\n\r\n**ChangeLog:** 2024-02-05 - `1.0.0-rc93` was added as a lower bound to the `github.com/opencontainers/runc` components.\n## Remediation\nUpgrade `github.com/containerd/containerd` to version 1.6.28, 1.7.13 or higher.\n## References\n- [AWS Security Advisory](https://aws.amazon.com/security/security-bulletins/AWS-2024-001/)\n- [GCP Security Advisory](https://cloud.google.com/support/bulletins#gcp-2024-005)\n- [GitHub Commit (containerd)](https://github.com/containerd/containerd/commit/b20b9f86b583b11a7fac34e6c682bc7633c74237)\n- [GitHub Commit (docker)](https://github.com/moby/moby/commit/7a920fd27536ed5c547eddd9a71068b71a4ace6e)\n- [GitHub Commit (runc)](https://github.com/opencontainers/runc/commit/02120488a4c0fc487d1ed2867e901eeed7ce8ecf)\n- [GitHub Commit (Talos Linux)](https://github.com/siderolabs/talos/commit/1e5913806ffa70722a4b72501536bb1a8dc9ae8a)\n- [Github Release (youki)](https://github.com/containers/youki/releases/tag/v0.3.2)\n- [Openwall Advisory](https://www.openwall.com/lists/oss-security/2024/01/31/6)\n- [Snyk Blog Post](https://snyk.io/blog/cve-2024-21626-runc-process-cwd-container-breakout/)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-270",
                  "gomodules"
                ],
                "cvssv3_baseScore": 8.6,
                "security-severity": "8.6"
              }
            },
            {
              "id": "SNYK-GOLANG-GITHUBCOMHASHICORPGOGETTER-6663928",
              "shortDescription": {
                "text": "High severity - Argument Injection vulnerability in github.com/hashicorp/go-getter"
              },
              "fullDescription": {
                "text": "(CVE-2024-3817) github.com/hashicorp/go-getter@v1.7.3"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[github.com/hashicorp/go-getter](https://pkg.go.dev/github.com/hashicorp/go-getter/v2) is a Package for downloading things from a string URL using a variety of protocols.\n\nAffected versions of this package are vulnerable to Argument Injection when the library is performing a Git operation, it will try to clone the given repository. If a Git reference is not passed along with the Git url, go-getter will then try to check the remote repositoryâ€™s HEAD reference of its default branch by passing arguments to the Git binary on the host it is executing on. An attacker may format a Git URL in order to inject additional Git arguments to the Git call.\r\n\r\n**Note:**\r\nThis vulnerability does not affect the go-getter/v2 branch and package.\n## Remediation\nUpgrade `github.com/hashicorp/go-getter` to version 1.7.4 or higher.\n## References\n- [GitHub Commit](https://github.com/hashicorp/go-getter/commit/268c11cae8cf0d9374783e06572679796abe9ce9)\n- [HashiCorp Discuss](https://discuss.hashicorp.com/t/hcsec-2024-09-hashicorp-go-getter-vulnerable-to-argument-injection-when-fetching-remote-default-git-branches/66040)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-88",
                  "gomodules"
                ],
                "cvssv3_baseScore": 7.3,
                "security-severity": "7.3"
              }
            },
            {
              "id": "SNYK-GOLANG-GOLANGORGXNETHTTP2-6531285",
              "shortDescription": {
                "text": "High severity - Allocation of Resources Without Limits or Throttling vulnerability in golang.org/x/net/http2"
              },
              "fullDescription": {
                "text": "(CVE-2023-45288) golang.org/x/net/http2@v0.19.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[golang.org/x/net/http2](https://pkg.go.dev/golang.org/x/net/http2) is a work-in-progress HTTP/2 implementation for Go.\n\nAffected versions of this package are vulnerable to Allocation of Resources Without Limits or Throttling when reading header data from `CONTINUATION` frames. As part of the HPACK flow, all incoming `HEADERS` and `CONTINUATION` frames are read even if their payloads exceed `MaxHeaderBytes` and will be discarded. An attacker can send excessive data over a connection to render it unresponsive.\n## Remediation\nUpgrade `golang.org/x/net/http2` to version 0.23.0 or higher.\n## References\n- [Github Commit](https://github.com/traefik/traefik/commit/099c7e9444a5d56918b8221672fc8d6a09a5d389)\n- [GitHub Commit](https://github.com/golang/net/commit/ba872109ef2dc8f1da778651bd1fd3792d0e4587)\n- [GitHub Issue](https://github.com/golang/go/issues/65051)\n- [Go Advisory](https://pkg.go.dev/vuln/GO-2024-2687)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-770",
                  "gomodules"
                ],
                "cvssv3_baseScore": 7.5,
                "security-severity": "7.5"
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "SNYK-GOLANG-GITHUBCOMCONTAINERDCONTAINERD-6219724",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable github.com/containerd/containerd package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/local/bin/k9s"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "github.com/containerd/containerd@v1.7.12"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-GOLANG-GITHUBCOMHASHICORPGOGETTER-6663928",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable github.com/hashicorp/go-getter package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/local/bin/k9s"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "github.com/hashicorp/go-getter@v1.7.3"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-GOLANG-GOLANGORGXNETHTTP2-6531285",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable golang.org/x/net/http2 package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/local/bin/k9s"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "golang.org/x/net/http2@v0.19.0"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Snyk Container",
          "properties": {
            "artifactsScanned": 230
          },
          "rules": [
            {
              "id": "SNYK-GOLANG-GOLANGORGXNETHTML-5816820",
              "shortDescription": {
                "text": "Medium severity - Cross-site Scripting (XSS) vulnerability in golang.org/x/net/html"
              },
              "fullDescription": {
                "text": "(CVE-2023-3978) golang.org/x/net/html@v0.8.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[golang.org/x/net/html](https://pkg.go.dev/golang.org/x/net/html) is a package that implements an HTML5-compliant tokenizer and parser.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS) in the `render1()` function in `render.go`. Text nodes not in the HTML namespace are incorrectly literally rendered, causing text which should be escaped to not be.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browserâ€™s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if theyâ€™ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the userâ€™s browser.| \n|**DOM-based**|Client|The attacker forces the userâ€™s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `golang.org/x/net/html` to version 0.13.0 or higher.\n## References\n- [GitHub Commit](https://github.com/golang/net/commit/8ffa475fbdb33da97e8bf79cc5791ee8751fca5e)\n- [GitHub Issue](https://go.dev/issue/61615)\n- [Golang PR](https://go.dev/cl/514896)\n- [Vulnerability Advisory](https://pkg.go.dev/vuln/GO-2023-1988)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-79",
                  "gomodules"
                ],
                "cvssv3_baseScore": 6.1,
                "security-severity": "6.1"
              }
            },
            {
              "id": "SNYK-GOLANG-GOLANGORGXNETHTTP2-5953327",
              "shortDescription": {
                "text": "High severity - Denial of Service (DoS) vulnerability in golang.org/x/net/http2"
              },
              "fullDescription": {
                "text": "(CVE-2023-44487) golang.org/x/net/http2@v0.8.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[golang.org/x/net/http2](https://pkg.go.dev/golang.org/x/net/http2) is a work-in-progress HTTP/2 implementation for Go.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) in the implementation of the HTTP/2 protocol. An attacker can cause a denial of service (including via DDoS) by rapidly resetting many streams through request cancellation.\n## Remediation\nUpgrade `golang.org/x/net/http2` to version 0.17.0 or higher.\n## References\n- [Github Commit](https://github.com/helidon-io/helidon/commit/58f43670086e530750c7cb74b0bec92bf5189c79)\n- [Github Commit](https://github.com/pgjones/hypercorn/commit/7c39c68b61012a3c30979176080861c8b00fb229)\n- [GitHub Commit](https://github.com/akka/akka-http/commit/1f29fe6a8567c57dfe848a21ae883304cce5646d)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/76bb4bfbfeae827dce896f650655bbf6e251ed49)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/9cdfe25bad707f34b3e5da2994f3f1952a163c3e)\n- [GitHub Commit](https://github.com/eclipse/jetty.project/commit/dbb94514dc9d3fb21fe92080f57c314e7e06a148)\n- [GitHub Commit](https://github.com/gravitational/teleport/commit/15f34f927a45130408eb16ed09af5620270d4d1f)\n- [GitHub Commit](https://github.com/kubernetes/apimachinery/commit/be9188050914374ee8128239e5a2e5998d7897f5)\n- [GitHub Commit](https://github.com/netty/netty/commit/58f75f665aa81a8cbcf6ffa74820042a285c5e61)\n- [GitHub Commit](https://github.com/nghttp2/nghttp2/commit/72b4af6143681f528f1d237b21a9a7aee1738832)\n- [GitHub Commit](https://github.com/operator-framework/operator-lifecycle-manager/commit/9ec03f07f942dc9cef736957fa152e39157d6e13)\n- [Snyk Blog](https://snyk.io/blog/find-fix-http-2-rapid-reset-zero-day-vulnerability-cve-2023-44487/)\n- [Vulnerability Discovery](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/)\n- [Vulnerability Explanation](https://cloud.google.com/blog/products/identity-security/how-it-works-the-novel-http2-rapid-reset-ddos-attack)\n- [CISA - Known Exploited Vulnerabilities](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "gomodules"
                ],
                "cvssv3_baseScore": 7.5,
                "security-severity": "7.5"
              }
            },
            {
              "id": "SNYK-GOLANG-GOLANGORGXNETHTTP2-5958903",
              "shortDescription": {
                "text": "Medium severity - Allocation of Resources Without Limits or Throttling vulnerability in golang.org/x/net/http2"
              },
              "fullDescription": {
                "text": "(CVE-2023-39325) golang.org/x/net/http2@v0.8.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[golang.org/x/net/http2](https://pkg.go.dev/golang.org/x/net/http2) is a work-in-progress HTTP/2 implementation for Go.\n\nAffected versions of this package are vulnerable to Allocation of Resources Without Limits or Throttling when `MaxConcurrentStreams` handler `goroutines` running. A a handler is started until one of the existing handlers exits.\r\n\r\n**Note:**\r\n\r\nThis issue is related to [CVE-2023-44487](https://security.snyk.io/vuln/SNYK-GOLANG-GOLANGORGXNETHTTP2-5953327)\n## Remediation\nUpgrade `golang.org/x/net/http2` to version 0.17.0 or higher.\n## References\n- [GitHub Commit](https://github.com/golang/net/commit/695775ce641b0f80c9cf03e8a796595355422dd3)\n- [GitHub Commit](https://github.com/golang/net/commit/b225e7ca6dde1ef5a5ae5ce922861bda011cfabd)\n- [GitHub PR](https://github.com/containerd/containerd/pull/9387)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-770",
                  "gomodules"
                ],
                "cvssv3_baseScore": 4.3,
                "security-severity": "4.3"
              }
            },
            {
              "id": "SNYK-GOLANG-GOLANGORGXNETHTTP2-6531285",
              "shortDescription": {
                "text": "High severity - Allocation of Resources Without Limits or Throttling vulnerability in golang.org/x/net/http2"
              },
              "fullDescription": {
                "text": "(CVE-2023-45288) golang.org/x/net/http2@v0.8.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[golang.org/x/net/http2](https://pkg.go.dev/golang.org/x/net/http2) is a work-in-progress HTTP/2 implementation for Go.\n\nAffected versions of this package are vulnerable to Allocation of Resources Without Limits or Throttling when reading header data from `CONTINUATION` frames. As part of the HPACK flow, all incoming `HEADERS` and `CONTINUATION` frames are read even if their payloads exceed `MaxHeaderBytes` and will be discarded. An attacker can send excessive data over a connection to render it unresponsive.\n## Remediation\nUpgrade `golang.org/x/net/http2` to version 0.23.0 or higher.\n## References\n- [Github Commit](https://github.com/traefik/traefik/commit/099c7e9444a5d56918b8221672fc8d6a09a5d389)\n- [GitHub Commit](https://github.com/golang/net/commit/ba872109ef2dc8f1da778651bd1fd3792d0e4587)\n- [GitHub Issue](https://github.com/golang/go/issues/65051)\n- [Go Advisory](https://pkg.go.dev/vuln/GO-2024-2687)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-770",
                  "gomodules"
                ],
                "cvssv3_baseScore": 7.5,
                "security-severity": "7.5"
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "SNYK-GOLANG-GOLANGORGXNETHTML-5816820",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable golang.org/x/net/html package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/local/bin/kubectl"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "golang.org/x/net/html@v0.8.0"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-GOLANG-GOLANGORGXNETHTTP2-5953327",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable golang.org/x/net/http2 package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/local/bin/kubectl"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "golang.org/x/net/http2@v0.8.0"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-GOLANG-GOLANGORGXNETHTTP2-5958903",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable golang.org/x/net/http2 package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/local/bin/kubectl"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "golang.org/x/net/http2@v0.8.0"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-GOLANG-GOLANGORGXNETHTTP2-6531285",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable golang.org/x/net/http2 package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/local/bin/kubectl"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "golang.org/x/net/http2@v0.8.0"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Snyk Container",
          "properties": {
            "artifactsScanned": 69
          },
          "rules": []
        }
      },
      "results": []
    },
    {
      "tool": {
        "driver": {
          "name": "Snyk Container",
          "properties": {
            "artifactsScanned": 626
          },
          "rules": [
            {
              "id": "SNYK-GOLANG-GOLANGORGXNETHTTP2-6531285",
              "shortDescription": {
                "text": "High severity - Allocation of Resources Without Limits or Throttling vulnerability in golang.org/x/net/http2"
              },
              "fullDescription": {
                "text": "(CVE-2023-45288) golang.org/x/net/http2@v0.17.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[golang.org/x/net/http2](https://pkg.go.dev/golang.org/x/net/http2) is a work-in-progress HTTP/2 implementation for Go.\n\nAffected versions of this package are vulnerable to Allocation of Resources Without Limits or Throttling when reading header data from `CONTINUATION` frames. As part of the HPACK flow, all incoming `HEADERS` and `CONTINUATION` frames are read even if their payloads exceed `MaxHeaderBytes` and will be discarded. An attacker can send excessive data over a connection to render it unresponsive.\n## Remediation\nUpgrade `golang.org/x/net/http2` to version 0.23.0 or higher.\n## References\n- [Github Commit](https://github.com/traefik/traefik/commit/099c7e9444a5d56918b8221672fc8d6a09a5d389)\n- [GitHub Commit](https://github.com/golang/net/commit/ba872109ef2dc8f1da778651bd1fd3792d0e4587)\n- [GitHub Issue](https://github.com/golang/go/issues/65051)\n- [Go Advisory](https://pkg.go.dev/vuln/GO-2024-2687)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-770",
                  "gomodules"
                ],
                "cvssv3_baseScore": 7.5,
                "security-severity": "7.5"
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "SNYK-GOLANG-GOLANGORGXNETHTTP2-6531285",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable golang.org/x/net/http2 package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/usr/local/bin/helm"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "golang.org/x/net/http2@v0.17.0"
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}
