{
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "informationUri": "https://docs.jfrog-applications.jfrog.io/jfrog-security-features/sca",
          "name": "JFrog Xray SCA",
          "rules": [
            {
              "id": "CVE-2018-20225_pip_24.0",
              "shortDescription": {
                "text": "[CVE-2018-20225] pip 24.0"
              },
              "help": {
                "text": "An issue was discovered in pip (all versions) because it installs the version with the highest version number, even if the user had intended to obtain a private package from a private index. This only affects use of the --extra-index-url option, and exploitation requires that the package does not already exist in the public index (and thus the attacker can put the package there with an arbitrary version number). NOTE: it has been reported that this is intended functionality and the user is responsible for using --extra-index-url securely",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2009-2940_3.19:python3-pycache-pyc0_3.11.9-r0",
              "shortDescription": {
                "text": "[CVE-2009-2940] 3.19:python3-pycache-pyc0 3.11.9-r0"
              },
              "help": {
                "text": "The pygresql module 3.8.1 and 4.0 for Python does not properly support the PQescapeStringConn function, which might allow remote attackers to leverage escaping issues involving multibyte character encodings.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2009-2940_3.19:python3-pyc_3.11.9-r0",
              "shortDescription": {
                "text": "[CVE-2009-2940] 3.19:python3-pyc 3.11.9-r0"
              },
              "help": {
                "text": "The pygresql module 3.8.1 and 4.0 for Python does not properly support the PQescapeStringConn function, which might allow remote attackers to leverage escaping issues involving multibyte character encodings.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2009-2940_3.19:python3_3.11.9-r0",
              "shortDescription": {
                "text": "[CVE-2009-2940] 3.19:python3 3.11.9-r0"
              },
              "help": {
                "text": "The pygresql module 3.8.1 and 4.0 for Python does not properly support the PQescapeStringConn function, which might allow remote attackers to leverage escaping issues involving multibyte character encodings.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-24557_github.com/docker/docker_23.0.11+incompatible",
              "shortDescription": {
                "text": "[CVE-2024-24557] github.com/docker/docker 23.0.11+incompatible"
              },
              "help": {
                "text": "Moby is an open-source project created by Docker to enable software containerization. The classic builder cache system is prone to cache poisoning if the image is built FROM scratch. Also, changes to some instructions (most important being HEALTHCHECK and ONBUILD) would not cause a cache miss. An attacker with the knowledge of the Dockerfile someone is using could poison their cache by making them pull a specially crafted image that would be considered as a valid cache candidate for some build steps. 23.0+ users are only affected if they explicitly opted out of Buildkit (DOCKER_BUILDKIT=0 environment variable) or are using the /build API endpoint. All users on versions older than 23.0 could be impacted. Image build API endpoint (/build) and ImageBuild function from github.com/docker/docker/client is also affected as it the uses classic builder by default. Patches are included in 24.0.9 and 25.0.2 releases.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__20deffb4fac164a566206deef544a64795aafd48e3dc9ea03aa04a19b5d5510d.tar `       | [24.0.9], [25.0.2]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2009-2940_3.19:pyc_3.11.9-r0",
              "shortDescription": {
                "text": "[CVE-2009-2940] 3.19:pyc 3.11.9-r0"
              },
              "help": {
                "text": "The pygresql module 3.8.1 and 4.0 for Python does not properly support the PQescapeStringConn function, which might allow remote attackers to leverage escaping issues involving multibyte character encodings.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-45288_golang.org/x/net_0.19.0",
              "shortDescription": {
                "text": "[CVE-2023-45288] golang.org/x/net 0.19.0"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__20deffb4fac164a566206deef544a64795aafd48e3dc9ea03aa04a19b5d5510d.tar `       | [0.23.0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2024-24786_google.golang.org/protobuf_1.31.0",
              "shortDescription": {
                "text": "[CVE-2024-24786] google.golang.org/protobuf 1.31.0"
              },
              "help": {
                "text": "The protojson.Unmarshal function can enter an infinite loop when unmarshaling certain forms of invalid JSON. This condition can occur when unmarshaling into a message which contains a google.protobuf.Any value, or when the UnmarshalOptions.DiscardUnknown option is set.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__20deffb4fac164a566206deef544a64795aafd48e3dc9ea03aa04a19b5d5510d.tar `       | [1.33.0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-42363_3.19:busybox-binsh_1.36.1-r15",
              "shortDescription": {
                "text": "[CVE-2023-42363] 3.19:busybox-binsh 1.36.1-r15"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in xasprintf function in xfuncs_printf.c:344 in BusyBox v.1.36.1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__b09314aec293bcd9a8ee5e643539437b3846f9e5e55f79e282e5f67e3026de5e.tar `       | [1.36.1-r17]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42364_3.19:ssl_client_1.36.1-r15",
              "shortDescription": {
                "text": "[CVE-2023-42364] 3.19:ssl_client 1.36.1-r15"
              },
              "help": {
                "text": "A use-after-free vulnerability in BusyBox v.1.36.1 allows attackers to cause a denial of service via a crafted awk pattern in the awk.c evaluate function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__b09314aec293bcd9a8ee5e643539437b3846f9e5e55f79e282e5f67e3026de5e.tar `       | [1.36.1-r19]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42366_3.19:busybox-binsh_1.36.1-r15",
              "shortDescription": {
                "text": "[CVE-2023-42366] 3.19:busybox-binsh 1.36.1-r15"
              },
              "help": {
                "text": "A heap-buffer-overflow was discovered in BusyBox v.1.36.1 in the next_token function at awk.c:1159.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__b09314aec293bcd9a8ee5e643539437b3846f9e5e55f79e282e5f67e3026de5e.tar `       | [1.36.1-r16]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42365_3.19:busybox_1.36.1-r15",
              "shortDescription": {
                "text": "[CVE-2023-42365] 3.19:busybox 1.36.1-r15"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in BusyBox v.1.36.1 via a crafted awk pattern in the awk.c copyvar function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__b09314aec293bcd9a8ee5e643539437b3846f9e5e55f79e282e5f67e3026de5e.tar `       | [1.36.1-r19]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2024-0853_3.19:libcurl_8.5.0-r0",
              "shortDescription": {
                "text": "[CVE-2024-0853] 3.19:libcurl 8.5.0-r0"
              },
              "help": {
                "text": "curl inadvertently kept the SSL session ID for connections in its cache even when the verify status (*OCSP stapling*) test failed. A subsequent transfer to\nthe same hostname could then succeed if the session ID cache was still fresh, which then skipped the verify status check.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar `       | [8.6.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-42365_3.19:busybox-binsh_1.36.1-r15",
              "shortDescription": {
                "text": "[CVE-2023-42365] 3.19:busybox-binsh 1.36.1-r15"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in BusyBox v.1.36.1 via a crafted awk pattern in the awk.c copyvar function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__b09314aec293bcd9a8ee5e643539437b3846f9e5e55f79e282e5f67e3026de5e.tar `       | [1.36.1-r19]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42366_3.19:busybox_1.36.1-r15",
              "shortDescription": {
                "text": "[CVE-2023-42366] 3.19:busybox 1.36.1-r15"
              },
              "help": {
                "text": "A heap-buffer-overflow was discovered in BusyBox v.1.36.1 in the next_token function at awk.c:1159.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__b09314aec293bcd9a8ee5e643539437b3846f9e5e55f79e282e5f67e3026de5e.tar `       | [1.36.1-r16]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42364_3.19:busybox_1.36.1-r15",
              "shortDescription": {
                "text": "[CVE-2023-42364] 3.19:busybox 1.36.1-r15"
              },
              "help": {
                "text": "A use-after-free vulnerability in BusyBox v.1.36.1 allows attackers to cause a denial of service via a crafted awk pattern in the awk.c evaluate function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__b09314aec293bcd9a8ee5e643539437b3846f9e5e55f79e282e5f67e3026de5e.tar `       | [1.36.1-r19]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2024-0853_3.19:curl_8.5.0-r0",
              "shortDescription": {
                "text": "[CVE-2024-0853] 3.19:curl 8.5.0-r0"
              },
              "help": {
                "text": "curl inadvertently kept the SSL session ID for connections in its cache even when the verify status (*OCSP stapling*) test failed. A subsequent transfer to\nthe same hostname could then succeed if the session ID cache was still fresh, which then skipped the verify status check.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar `       | [8.6.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-42364_3.19:busybox-binsh_1.36.1-r15",
              "shortDescription": {
                "text": "[CVE-2023-42364] 3.19:busybox-binsh 1.36.1-r15"
              },
              "help": {
                "text": "A use-after-free vulnerability in BusyBox v.1.36.1 allows attackers to cause a denial of service via a crafted awk pattern in the awk.c evaluate function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__b09314aec293bcd9a8ee5e643539437b3846f9e5e55f79e282e5f67e3026de5e.tar `       | [1.36.1-r19]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2024-24786_google.golang.org/protobuf_1.30.0",
              "shortDescription": {
                "text": "[CVE-2024-24786] google.golang.org/protobuf 1.30.0"
              },
              "help": {
                "text": "The protojson.Unmarshal function can enter an infinite loop when unmarshaling certain forms of invalid JSON. This condition can occur when unmarshaling into a message which contains a google.protobuf.Any value, or when the UnmarshalOptions.DiscardUnknown option is set.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__20deffb4fac164a566206deef544a64795aafd48e3dc9ea03aa04a19b5d5510d.tar `       | [1.33.0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-42363_3.19:ssl_client_1.36.1-r15",
              "shortDescription": {
                "text": "[CVE-2023-42363] 3.19:ssl_client 1.36.1-r15"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in xasprintf function in xfuncs_printf.c:344 in BusyBox v.1.36.1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__b09314aec293bcd9a8ee5e643539437b3846f9e5e55f79e282e5f67e3026de5e.tar `       | [1.36.1-r17]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42363_3.19:busybox_1.36.1-r15",
              "shortDescription": {
                "text": "[CVE-2023-42363] 3.19:busybox 1.36.1-r15"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in xasprintf function in xfuncs_printf.c:344 in BusyBox v.1.36.1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__b09314aec293bcd9a8ee5e643539437b3846f9e5e55f79e282e5f67e3026de5e.tar `       | [1.36.1-r17]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42366_3.19:ssl_client_1.36.1-r15",
              "shortDescription": {
                "text": "[CVE-2023-42366] 3.19:ssl_client 1.36.1-r15"
              },
              "help": {
                "text": "A heap-buffer-overflow was discovered in BusyBox v.1.36.1 in the next_token function at awk.c:1159.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__b09314aec293bcd9a8ee5e643539437b3846f9e5e55f79e282e5f67e3026de5e.tar `       | [1.36.1-r16]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42365_3.19:ssl_client_1.36.1-r15",
              "shortDescription": {
                "text": "[CVE-2023-42365] 3.19:ssl_client 1.36.1-r15"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in BusyBox v.1.36.1 via a crafted awk pattern in the awk.c copyvar function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__b09314aec293bcd9a8ee5e643539437b3846f9e5e55f79e282e5f67e3026de5e.tar `       | [1.36.1-r19]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2009-3720_3.19:python3-pyc_3.11.9-r0",
              "shortDescription": {
                "text": "[CVE-2009-3720] 3.19:python3-pyc 3.11.9-r0"
              },
              "help": {
                "text": "The updatePosition function in lib/xmltok_impl.c in libexpat in Expat 2.0.1, as used in Python, PyXML, w3c-libwww, and other software, allows context-dependent attackers to cause a denial of service (application crash) via an XML document with crafted UTF-8 sequences that trigger a buffer over-read, a different vulnerability than CVE-2009-2625.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2009-3720_3.19:python3-pycache-pyc0_3.11.9-r0",
              "shortDescription": {
                "text": "[CVE-2009-3720] 3.19:python3-pycache-pyc0 3.11.9-r0"
              },
              "help": {
                "text": "The updatePosition function in lib/xmltok_impl.c in libexpat in Expat 2.0.1, as used in Python, PyXML, w3c-libwww, and other software, allows context-dependent attackers to cause a denial of service (application crash) via an XML document with crafted UTF-8 sequences that trigger a buffer over-read, a different vulnerability than CVE-2009-2625.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2009-3720_3.19:python3_3.11.9-r0",
              "shortDescription": {
                "text": "[CVE-2009-3720] 3.19:python3 3.11.9-r0"
              },
              "help": {
                "text": "The updatePosition function in lib/xmltok_impl.c in libexpat in Expat 2.0.1, as used in Python, PyXML, w3c-libwww, and other software, allows context-dependent attackers to cause a denial of service (application crash) via an XML document with crafted UTF-8 sequences that trigger a buffer over-read, a different vulnerability than CVE-2009-2625.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2009-3720_3.19:pyc_3.11.9-r0",
              "shortDescription": {
                "text": "[CVE-2009-3720] 3.19:pyc 3.11.9-r0"
              },
              "help": {
                "text": "The updatePosition function in lib/xmltok_impl.c in libexpat in Expat 2.0.1, as used in Python, PyXML, w3c-libwww, and other software, allows context-dependent attackers to cause a denial of service (application crash) via an XML document with crafted UTF-8 sequences that trigger a buffer over-read, a different vulnerability than CVE-2009-2625.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2379_3.19:curl_8.5.0-r0",
              "shortDescription": {
                "text": "[CVE-2024-2379] 3.19:curl 8.5.0-r0"
              },
              "help": {
                "text": "libcurl skips the certificate verification for a QUIC connection under certain conditions, when built to use wolfSSL. If told to use an unknown/bad cipher or curve, the error path accidentally skips the verification and returns OK, thus ignoring any certificate problems.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar `       | [8.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-4603_3.19:libssl3_3.1.4-r6",
              "shortDescription": {
                "text": "[CVE-2024-4603] 3.19:libssl3 3.1.4-r6"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DSA keys or parameters may be very\nslow.\n\nImpact summary: Applications that use the functions EVP_PKEY_param_check()\nor EVP_PKEY_public_check() to check a DSA public key or DSA parameters may\nexperience long delays. Where the key or parameters that are being checked\nhave been obtained from an untrusted source this may lead to a Denial of\nService.\n\nThe functions EVP_PKEY_param_check() or EVP_PKEY_public_check() perform\nvarious checks on DSA parameters. Some of those computations take a long time\nif the modulus (`p` parameter) is too large.\n\nTrying to use a very large modulus is slow and OpenSSL will not allow using\npublic keys with a modulus which is over 10,000 bits in length for signature\nverification. However the key and parameter check functions do not limit\nthe modulus size when performing the checks.\n\nAn application that calls EVP_PKEY_param_check() or EVP_PKEY_public_check()\nand supplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nThese functions are not called by OpenSSL itself on untrusted DSA keys so\nonly applications that directly call these functions may be vulnerable.\n\nAlso vulnerable are the OpenSSL pkey and pkeyparam command line applications\nwhen using the `-check` option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__ad94f85ab68036d011337b8537ae3767e60fbd479ca3562481cc99945d2df58d.tar `       | [3.1.5-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2466_3.19:libcurl_8.5.0-r0",
              "shortDescription": {
                "text": "[CVE-2024-2466] 3.19:libcurl 8.5.0-r0"
              },
              "help": {
                "text": "libcurl did not check the server certificate of TLS connections done to a host specified as an IP address, when built to use mbedTLS.  libcurl would wrongly avoid using the set hostname function when the specified hostname was given as an IP address, therefore completely skipping the certificate check. This affects all uses of TLS protocols (HTTPS, FTPS, IMAPS, POPS3, SMTPS, etc).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar `       | [8.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2004_3.19:libcurl_8.5.0-r0",
              "shortDescription": {
                "text": "[CVE-2024-2004] 3.19:libcurl 8.5.0-r0"
              },
              "help": {
                "text": "When a protocol selection parameter option disables all protocols without adding any then the default set of protocols would remain in the allowed set due to an error in the logic for removing protocols. The below command would perform a request to curl.se with a plaintext protocol which has been explicitly disabled.      curl --proto -all,-http http://curl.se  The flaw is only present if the set of selected protocols disables the entire set of available protocols, in itself a command with no practical use and therefore unlikely to be encountered in real situations. The curl security team has thus assessed this to be low severity bug.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar `       | [8.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2379_3.19:libcurl_8.5.0-r0",
              "shortDescription": {
                "text": "[CVE-2024-2379] 3.19:libcurl 8.5.0-r0"
              },
              "help": {
                "text": "libcurl skips the certificate verification for a QUIC connection under certain conditions, when built to use wolfSSL. If told to use an unknown/bad cipher or curve, the error path accidentally skips the verification and returns OK, thus ignoring any certificate problems.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar `       | [8.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2398_3.19:libcurl_8.5.0-r0",
              "shortDescription": {
                "text": "[CVE-2024-2398] 3.19:libcurl 8.5.0-r0"
              },
              "help": {
                "text": "When an application tells libcurl it wants to allow HTTP/2 server push, and the amount of received headers for the push surpasses the maximum allowed limit (1000), libcurl aborts the server push. When aborting, libcurl inadvertently does not free all the previously allocated headers and instead leaks the memory.  Further, this error condition fails silently and is therefore not easily detected by an application.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar `       | [8.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2004_3.19:curl_8.5.0-r0",
              "shortDescription": {
                "text": "[CVE-2024-2004] 3.19:curl 8.5.0-r0"
              },
              "help": {
                "text": "When a protocol selection parameter option disables all protocols without adding any then the default set of protocols would remain in the allowed set due to an error in the logic for removing protocols. The below command would perform a request to curl.se with a plaintext protocol which has been explicitly disabled.      curl --proto -all,-http http://curl.se  The flaw is only present if the set of selected protocols disables the entire set of available protocols, in itself a command with no practical use and therefore unlikely to be encountered in real situations. The curl security team has thus assessed this to be low severity bug.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar `       | [8.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2398_3.19:curl_8.5.0-r0",
              "shortDescription": {
                "text": "[CVE-2024-2398] 3.19:curl 8.5.0-r0"
              },
              "help": {
                "text": "When an application tells libcurl it wants to allow HTTP/2 server push, and the amount of received headers for the push surpasses the maximum allowed limit (1000), libcurl aborts the server push. When aborting, libcurl inadvertently does not free all the previously allocated headers and instead leaks the memory.  Further, this error condition fails silently and is therefore not easily detected by an application.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar `       | [8.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2466_3.19:curl_8.5.0-r0",
              "shortDescription": {
                "text": "[CVE-2024-2466] 3.19:curl 8.5.0-r0"
              },
              "help": {
                "text": "libcurl did not check the server certificate of TLS connections done to a host specified as an IP address, when built to use mbedTLS.  libcurl would wrongly avoid using the set hostname function when the specified hostname was given as an IP address, therefore completely skipping the certificate check. This affects all uses of TLS protocols (HTTPS, FTPS, IMAPS, POPS3, SMTPS, etc).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar `       | [8.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-4603_3.19:libcrypto3_3.1.4-r6",
              "shortDescription": {
                "text": "[CVE-2024-4603] 3.19:libcrypto3 3.1.4-r6"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DSA keys or parameters may be very\nslow.\n\nImpact summary: Applications that use the functions EVP_PKEY_param_check()\nor EVP_PKEY_public_check() to check a DSA public key or DSA parameters may\nexperience long delays. Where the key or parameters that are being checked\nhave been obtained from an untrusted source this may lead to a Denial of\nService.\n\nThe functions EVP_PKEY_param_check() or EVP_PKEY_public_check() perform\nvarious checks on DSA parameters. Some of those computations take a long time\nif the modulus (`p` parameter) is too large.\n\nTrying to use a very large modulus is slow and OpenSSL will not allow using\npublic keys with a modulus which is over 10,000 bits in length for signature\nverification. However the key and parameter check functions do not limit\nthe modulus size when performing the checks.\n\nAn application that calls EVP_PKEY_param_check() or EVP_PKEY_public_check()\nand supplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nThese functions are not called by OpenSSL itself on untrusted DSA keys so\nonly applications that directly call these functions may be vulnerable.\n\nAlso vulnerable are the OpenSSL pkey and pkeyparam command line applications\nwhen using the `-check` option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__ad94f85ab68036d011337b8537ae3767e60fbd479ca3562481cc99945d2df58d.tar `       | [3.1.5-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-52071_3.19:libcurl_8.5.0-r0",
              "shortDescription": {
                "text": "[CVE-2023-52071] 3.19:libcurl 8.5.0-r0"
              },
              "help": {
                "text": "CVE-2023-52071",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-52071_3.19:curl_8.5.0-r0",
              "shortDescription": {
                "text": "[CVE-2023-52071] 3.19:curl 8.5.0-r0"
              },
              "help": {
                "text": "CVE-2023-52071",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2022-40897_setuptools_65.5.0",
              "shortDescription": {
                "text": "[CVE-2022-40897] setuptools 65.5.0"
              },
              "help": {
                "text": "Python Packaging Authority (PyPA) setuptools before 65.5.1 allows remote attackers to cause a denial of service via HTML in a crafted package or custom PackageIndex page. There is a Regular Expression Denial of Service (ReDoS) in package_index.py.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Applicable       | `sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar `       | [65.5.1]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            }
          ],
          "version": "3.96.1"
        }
      },
      "results": [
        {
          "ruleId": "CVE-2018-20225_pip_24.0",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "[CVE-2018-20225] sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2009-2940_3.19:python3-pycache-pyc0_3.11.9-r0",
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "[CVE-2009-2940] sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2009-2940_3.19:python3-pyc_3.11.9-r0",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "[CVE-2009-2940] sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2009-2940_3.19:python3_3.11.9-r0",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "text": "[CVE-2009-2940] sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24557_github.com/docker/docker_23.0.11+incompatible",
          "ruleIndex": 4,
          "level": "error",
          "message": {
            "text": "[CVE-2024-24557] sha256__20deffb4fac164a566206deef544a64795aafd48e3dc9ea03aa04a19b5d5510d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2009-2940_3.19:pyc_3.11.9-r0",
          "ruleIndex": 5,
          "level": "error",
          "message": {
            "text": "[CVE-2009-2940] sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_golang.org/x/net_0.19.0",
          "ruleIndex": 6,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__20deffb4fac164a566206deef544a64795aafd48e3dc9ea03aa04a19b5d5510d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24786_google.golang.org/protobuf_1.31.0",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-24786] sha256__20deffb4fac164a566206deef544a64795aafd48e3dc9ea03aa04a19b5d5510d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42363_3.19:busybox-binsh_1.36.1-r15",
          "ruleIndex": 8,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42363] sha256__b09314aec293bcd9a8ee5e643539437b3846f9e5e55f79e282e5f67e3026de5e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42364_3.19:ssl_client_1.36.1-r15",
          "ruleIndex": 9,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42364] sha256__b09314aec293bcd9a8ee5e643539437b3846f9e5e55f79e282e5f67e3026de5e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42366_3.19:busybox-binsh_1.36.1-r15",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42366] sha256__b09314aec293bcd9a8ee5e643539437b3846f9e5e55f79e282e5f67e3026de5e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42365_3.19:busybox_1.36.1-r15",
          "ruleIndex": 11,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42365] sha256__b09314aec293bcd9a8ee5e643539437b3846f9e5e55f79e282e5f67e3026de5e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-0853_3.19:libcurl_8.5.0-r0",
          "ruleIndex": 12,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-0853] sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42365_3.19:busybox-binsh_1.36.1-r15",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42365] sha256__b09314aec293bcd9a8ee5e643539437b3846f9e5e55f79e282e5f67e3026de5e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42366_3.19:busybox_1.36.1-r15",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42366] sha256__b09314aec293bcd9a8ee5e643539437b3846f9e5e55f79e282e5f67e3026de5e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42364_3.19:busybox_1.36.1-r15",
          "ruleIndex": 15,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42364] sha256__b09314aec293bcd9a8ee5e643539437b3846f9e5e55f79e282e5f67e3026de5e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-0853_3.19:curl_8.5.0-r0",
          "ruleIndex": 16,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-0853] sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42364_3.19:busybox-binsh_1.36.1-r15",
          "ruleIndex": 17,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42364] sha256__b09314aec293bcd9a8ee5e643539437b3846f9e5e55f79e282e5f67e3026de5e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24786_google.golang.org/protobuf_1.30.0",
          "ruleIndex": 18,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-24786] sha256__20deffb4fac164a566206deef544a64795aafd48e3dc9ea03aa04a19b5d5510d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42363_3.19:ssl_client_1.36.1-r15",
          "ruleIndex": 19,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42363] sha256__b09314aec293bcd9a8ee5e643539437b3846f9e5e55f79e282e5f67e3026de5e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42363_3.19:busybox_1.36.1-r15",
          "ruleIndex": 20,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42363] sha256__b09314aec293bcd9a8ee5e643539437b3846f9e5e55f79e282e5f67e3026de5e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42366_3.19:ssl_client_1.36.1-r15",
          "ruleIndex": 21,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42366] sha256__b09314aec293bcd9a8ee5e643539437b3846f9e5e55f79e282e5f67e3026de5e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42365_3.19:ssl_client_1.36.1-r15",
          "ruleIndex": 22,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42365] sha256__b09314aec293bcd9a8ee5e643539437b3846f9e5e55f79e282e5f67e3026de5e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2009-3720_3.19:python3-pyc_3.11.9-r0",
          "ruleIndex": 23,
          "level": "warning",
          "message": {
            "text": "[CVE-2009-3720] sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2009-3720_3.19:python3-pycache-pyc0_3.11.9-r0",
          "ruleIndex": 24,
          "level": "warning",
          "message": {
            "text": "[CVE-2009-3720] sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2009-3720_3.19:python3_3.11.9-r0",
          "ruleIndex": 25,
          "level": "warning",
          "message": {
            "text": "[CVE-2009-3720] sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2009-3720_3.19:pyc_3.11.9-r0",
          "ruleIndex": 26,
          "level": "warning",
          "message": {
            "text": "[CVE-2009-3720] sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2379_3.19:curl_8.5.0-r0",
          "ruleIndex": 27,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2379] sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-4603_3.19:libssl3_3.1.4-r6",
          "ruleIndex": 28,
          "level": "none",
          "message": {
            "text": "[CVE-2024-4603] sha256__ad94f85ab68036d011337b8537ae3767e60fbd479ca3562481cc99945d2df58d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2466_3.19:libcurl_8.5.0-r0",
          "ruleIndex": 29,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2466] sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2004_3.19:libcurl_8.5.0-r0",
          "ruleIndex": 30,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2004] sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2379_3.19:libcurl_8.5.0-r0",
          "ruleIndex": 31,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2379] sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2398_3.19:libcurl_8.5.0-r0",
          "ruleIndex": 32,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2398] sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2004_3.19:curl_8.5.0-r0",
          "ruleIndex": 33,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2004] sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2398_3.19:curl_8.5.0-r0",
          "ruleIndex": 34,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2398] sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2466_3.19:curl_8.5.0-r0",
          "ruleIndex": 35,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2466] sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-4603_3.19:libcrypto3_3.1.4-r6",
          "ruleIndex": 36,
          "level": "none",
          "message": {
            "text": "[CVE-2024-4603] sha256__ad94f85ab68036d011337b8537ae3767e60fbd479ca3562481cc99945d2df58d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-52071_3.19:libcurl_8.5.0-r0",
          "ruleIndex": 37,
          "level": "none",
          "message": {
            "text": "[CVE-2023-52071] sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-52071_3.19:curl_8.5.0-r0",
          "ruleIndex": 38,
          "level": "none",
          "message": {
            "text": "[CVE-2023-52071] sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-40897_setuptools_65.5.0",
          "ruleIndex": 39,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-40897] sha256__dfe39fe345d03a7ad0cc06119deb7a9d21f7e0f34afabce5fe8823ecc3dec358.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://jfrog.com/help/r/jfrog-security-documentation/jfrog-advanced-security",
          "name": "JFrog Applicability Scanner",
          "rules": [
            {
              "id": "applic_CVE-2022-40897",
              "name": "CVE-2022-40897",
              "shortDescription": {
                "text": "Scanner for CVE-2022-40897"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `find_external_links` is called.\n\nNote that the scanner does not check for an additional vulnerable case in which the `pip` CLI tool is executed with the  `--editable` flag. In this case, the vulnerability will lead to a DoS of a forked command-line utility, which has a minimal security impact.",
                "markdown": "The scanner checks whether the vulnerable function `find_external_links` is called.\n\nNote that the scanner does not check for an additional vulnerable case in which the `pip` CLI tool is executed with the  `--editable` flag. In this case, the vulnerability will lead to a DoS of a forked command-line utility, which has a minimal security impact."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-45288",
              "name": "CVE-2023-45288",
              "shortDescription": {
                "text": "Scanner for CVE-2023-45288"
              },
              "fullDescription": {
                "text": "The scanner checks if any of the following functions are called:\n\n* `net/http/ServeTLS`\n* `x/net/http2/Server/ServeConn`\n* `x/net/http2/ConfigureServer`\n\nAn additional condition (that the scanner currently does not check) should be verified to determine if the CVE is applicable: `crypto/tls/Config/NextProtos` or `net/http/TLSNextProto` are not used to disable `HTTP/2`.",
                "markdown": "The scanner checks if any of the following functions are called:\n\n* `net/http/ServeTLS`\n* `x/net/http2/Server/ServeConn`\n* `x/net/http2/ConfigureServer`\n\nAn additional condition (that the scanner currently does not check) should be verified to determine if the CVE is applicable: `crypto/tls/Config/NextProtos` or `net/http/TLSNextProto` are not used to disable `HTTP/2`."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2009-3720",
              "name": "CVE-2009-3720",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2009-3720"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-52071",
              "name": "CVE-2023-52071",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-52071"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2009-2940",
              "name": "CVE-2009-2940",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2009-2940"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42366",
              "name": "CVE-2023-42366",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42366"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-2466",
              "name": "CVE-2024-2466",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-2466"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-2004",
              "name": "CVE-2024-2004",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-2004"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42365",
              "name": "CVE-2023-42365",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42365"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-2398",
              "name": "CVE-2024-2398",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-2398"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-0853",
              "name": "CVE-2024-0853",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-0853"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42363",
              "name": "CVE-2023-42363",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42363"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42364",
              "name": "CVE-2023-42364",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42364"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-24557",
              "name": "CVE-2024-24557",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-24557"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-24786",
              "name": "CVE-2024-24786",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-24786"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-2379",
              "name": "CVE-2024-2379",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-2379"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-4603",
              "name": "CVE-2024-4603",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-4603"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2018-20225",
              "name": "CVE-2018-20225",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2018-20225"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            }
          ],
          "version": "1.0"
        }
      },
      "invocations": [
        {
          "arguments": [
            "/root/.jfrog/dependencies/analyzerManager/jas_scanner/jas_scanner",
            "scan",
            "/tmp/jfrog.cli.temp.-1718797213-2179072626/config.yaml"
          ],
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "/tmp/jfrog.cli.temp.-1718797171-517450447/image.tar"
          }
        }
      ],
      "results": [
        {
          "ruleId": "applic_CVE-2022-40897",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `find_external_links` is called.\n\nNote that the scanner does not check for an additional vulnerable case in which the `pip` CLI tool is executed with the  `--editable` flag. In this case, the vulnerability will lead to a DoS of a forked command-line utility, which has a minimal security impact."
          }
        },
        {
          "ruleId": "applic_CVE-2023-45288",
          "message": {
            "text": "The vulnerable function ServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/newrelic-infra"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45288",
          "message": {
            "text": "The vulnerable function ServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///var/db/newrelic-infra/newrelic-integrations/bin/nri-prometheus"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://jfrog.com/help/r/jfrog-security-documentation/jfrog-advanced-security",
          "name": "JFrog Secrets scanner",
          "rules": [
            {
              "id": "REQ.SECRET.GENERIC.TEXT",
              "name": "REQ.SECRET.GENERIC.TEXT",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.TEXT"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive"
              }
            },
            {
              "id": "REQ.SECRET.GENERIC.CODE",
              "name": "REQ.SECRET.GENERIC.CODE",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.CODE"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private"
              }
            },
            {
              "id": "REQ.SECRET.GENERIC.URL",
              "name": "REQ.SECRET.GENERIC.URL",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.URL"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive"
              }
            },
            {
              "id": "REQ.SECRET.KEYS",
              "name": "REQ.SECRET.KEYS",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.KEYS"
              },
              "fullDescription": {
                "text": "\nStoring an API key in the image could lead to several risks.\n\nIf the key is associated with a wide scope of privileges, attackers could extract it from a single image or firmware and use it maliciously to attack many targets. For example, if the embedded key allows querying/modifying data for all cloud user accounts, without per-user authentication, the attackers who extract it would gain access to system-wide data.\n\nIf the cloud/SaaS provider bills by key usage - for example, every million queries cost the key's owner a fixed sum of money - attackers could use the keys for their own purposes (or just as a form of vandalism), incurring a large cost to the legitimate user or operator.\n\n## Best practices\n\nUse narrow scopes for stored API keys. As much as possible, API keys should be unique per host and require additional authentication with the user's individual credentials for any sensitive actions.\n\nAvoid placing keys whose use incurs costs directly in the image. Store the key with any software or hardware protection available on the host for key storage (such as operating system key-stores, hardware cryptographic storage mechanisms or cloud-managed secure storage services such as [AWS KMS](https://aws.amazon.com/kms/)).\n\nTokens that were detected as exposed should be revoked and replaced -\n\n* [AWS Key Revocation](https://aws.amazon.com/premiumsupport/knowledge-center/delete-access-key/#:~:text=If%20you%20see%20a%20warning,the%20confirmation%20box%2C%20choose%20Deactivate.)\n* [GCP Key Revocation](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/CloudIAM/delete-api-keys.html)\n* [Azure Key Revocation](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops\u0026tabs=Windows#revoke-a-pat)\n* [GitHub Key Revocation](https://docs.github.com/en/rest/apps/oauth-applications#delete-an-app-authorization)\n",
                "markdown": "\nStoring an API key in the image could lead to several risks.\n\nIf the key is associated with a wide scope of privileges, attackers could extract it from a single image or firmware and use it maliciously to attack many targets. For example, if the embedded key allows querying/modifying data for all cloud user accounts, without per-user authentication, the attackers who extract it would gain access to system-wide data.\n\nIf the cloud/SaaS provider bills by key usage - for example, every million queries cost the key's owner a fixed sum of money - attackers could use the keys for their own purposes (or just as a form of vandalism), incurring a large cost to the legitimate user or operator.\n\n## Best practices\n\nUse narrow scopes for stored API keys. As much as possible, API keys should be unique per host and require additional authentication with the user's individual credentials for any sensitive actions.\n\nAvoid placing keys whose use incurs costs directly in the image. Store the key with any software or hardware protection available on the host for key storage (such as operating system key-stores, hardware cryptographic storage mechanisms or cloud-managed secure storage services such as [AWS KMS](https://aws.amazon.com/kms/)).\n\nTokens that were detected as exposed should be revoked and replaced -\n\n* [AWS Key Revocation](https://aws.amazon.com/premiumsupport/knowledge-center/delete-access-key/#:~:text=If%20you%20see%20a%20warning,the%20confirmation%20box%2C%20choose%20Deactivate.)\n* [GCP Key Revocation](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/CloudIAM/delete-api-keys.html)\n* [Azure Key Revocation](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops\u0026tabs=Windows#revoke-a-pat)\n* [GitHub Key Revocation](https://docs.github.com/en/rest/apps/oauth-applications#delete-an-app-authorization)\n"
              },
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private"
              }
            }
          ],
          "version": "1.0"
        }
      },
      "invocations": [
        {
          "arguments": [
            "/root/.jfrog/dependencies/analyzerManager/jas_scanner/jas_scanner",
            "scan",
            "/tmp/jfrog.cli.temp.-1718797213-2179072626/config.yaml"
          ],
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "/tmp/jfrog.cli.temp.-1718797171-517450447/image.tar"
          }
        }
      ],
      "results": []
    }
  ]
}
