{
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "informationUri": "https://docs.jfrog-applications.jfrog.io/jfrog-security-features/sca",
          "name": "JFrog Xray SCA",
          "rules": [
            {
              "id": "CVE-2022-1471_org.yaml:snakeyaml_1.16",
              "shortDescription": {
                "text": "[CVE-2022-1471] org.yaml:snakeyaml 1.16"
              },
              "help": {
                "text": "SnakeYaml's Constructor() class does not restrict types which can be instantiated during deserialization. Deserializing yaml content provided by an attacker can lead to remote code execution. We recommend using SnakeYaml's SafeConsturctor when parsing untrusted content to restrict deserialization. We recommend upgrading to version 2.0 and beyond.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Applicable       | `sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar `       | [2.0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-21449_org.graalvm.sdk:graal-sdk_21.1.0",
              "shortDescription": {
                "text": "[CVE-2022-21449] org.graalvm.sdk:graal-sdk 21.1.0"
              },
              "help": {
                "text": "Vulnerability in the Oracle Java SE, Oracle GraalVM Enterprise Edition product of Oracle Java SE (component: Libraries). Supported versions that are affected are Oracle Java SE: 17.0.2 and 18; Oracle GraalVM Enterprise Edition: 21.3.1 and 22.0.0.2. Easily exploitable vulnerability allows unauthenticated attacker with network access via multiple protocols to compromise Oracle Java SE, Oracle GraalVM Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to critical data or all Oracle Java SE, Oracle GraalVM Enterprise Edition accessible data. Note: This vulnerability applies to Java deployments, typically in clients running sandboxed Java Web Start applications or sandboxed Java applets, that load and run untrusted code (e.g., code that comes from the internet) and rely on the Java sandbox for security. This vulnerability can also be exploited by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 7.5 (Integrity impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar `       | [21.3.2], [22.1.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2017-18640_org.yaml:snakeyaml_1.16",
              "shortDescription": {
                "text": "[CVE-2017-18640] org.yaml:snakeyaml 1.16"
              },
              "help": {
                "text": "The Alias feature in SnakeYAML before 1.26 allows entity expansion during a load operation, a related issue to CVE-2003-1564.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar `       | [1.26]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-25857_org.yaml:snakeyaml_1.16",
              "shortDescription": {
                "text": "[CVE-2022-25857] org.yaml:snakeyaml 1.16"
              },
              "help": {
                "text": "The package org.yaml:snakeyaml from 0 and before 1.31 are vulnerable to Denial of Service (DoS) due missing to nested depth limitation for collections.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar `       | [1.31]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-43642_org.xerial.snappy:snappy-java_1.1.8.4",
              "shortDescription": {
                "text": "[CVE-2023-43642] org.xerial.snappy:snappy-java 1.1.8.4"
              },
              "help": {
                "text": "snappy-java is a Java port of the snappy, a fast C++ compresser/decompresser developed by Google. The SnappyInputStream was found to be vulnerable to Denial of Service (DoS) attacks when decompressing data with a too large chunk size. Due to missing upper bound check on chunk length, an unrecoverable fatal error can occur. All versions of snappy-java including the latest released version 1.1.10.3 are vulnerable to this issue. A fix has been introduced in commit `9f8c3cf74` which will be included in the 1.1.10.4 release. Users are advised to upgrade. Users unable to upgrade should only accept compressed data from trusted sources.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar `       | [1.1.10.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-34455_org.xerial.snappy:snappy-java_1.1.8.4",
              "shortDescription": {
                "text": "[CVE-2023-34455] org.xerial.snappy:snappy-java 1.1.8.4"
              },
              "help": {
                "text": "snappy-java is a fast compressor/decompressor for Java. Due to use of an unchecked chunk length, an unrecoverable fatal error can occur in versions prior to 1.1.10.1.\n\nThe code in the function hasNextChunk in the fileSnappyInputStream.java checks if a given stream has more chunks to read. It does that by attempting to read 4 bytes. If it wasn’t possible to read the 4 bytes, the function returns false. Otherwise, if 4 bytes were available, the code treats them as the length of the next chunk.\n\nIn the case that the `compressed` variable is null, a byte array is allocated with the size given by the input data. Since the code doesn’t test the legality of the `chunkSize` variable, it is possible to pass a negative number (such as 0xFFFFFFFF which is -1), which will cause the code to raise a `java.lang.NegativeArraySizeException` exception. A worse case would happen when passing a huge positive value (such as 0x7FFFFFFF), which would raise the fatal `java.lang.OutOfMemoryError` error.\n\nVersion 1.1.10.1 contains a patch for this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar `       | [1.1.10.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-5685_org.jboss.xnio:xnio-api_3.8.12.Final",
              "shortDescription": {
                "text": "[CVE-2023-5685] org.jboss.xnio:xnio-api 3.8.12.Final"
              },
              "help": {
                "text": "A flaw was found in XNIO. The XNIO NotifierState that can cause a Stack Overflow Exception when the chain of notifier states becomes problematically large can lead to uncontrolled resource management and a possible denial of service (DoS).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar `       | [3.8.14.Final]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-6236_org.wildfly.security:wildfly-elytron-http-oidc_2.2.3.Final",
              "shortDescription": {
                "text": "[CVE-2023-6236] org.wildfly.security:wildfly-elytron-http-oidc 2.2.3.Final"
              },
              "help": {
                "text": "A flaw was found in Red Hat Enterprise Application Platform 8. When an OIDC app that serves multiple tenants attempts to access the second tenant, it should prompt the user to log in again since the second tenant is secured with a different OIDC configuration. The underlying issue is in OidcSessionTokenStore when determining if a cached token should be used or not. This logic needs to be updated to take into account the new \"provider-url\" option in addition to the \"realm\" option.\n\nEAP-7 does not provide the vulnerable provider-url configuration option in its OIDC implementation and is not affected by this flaw.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.3      | Not Covered       | `sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar `       | [2.2.5.Final]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2022-45868_com.h2database:h2_2.1.214",
              "shortDescription": {
                "text": "[CVE-2022-45868] com.h2database:h2 2.1.214"
              },
              "help": {
                "text": "The web-based admin console in H2 Database Engine before 2.2.220 can be started via the CLI with the argument -webAdminPassword, which allows the user to specify the password in cleartext for the web admin console. Consequently, a local user (or an attacker that has obtained local access through some means) would be able to discover the password by listing processes and their arguments. NOTE: the vendor states \"This is not a vulnerability of H2 Console ... Passwords should never be passed on the command line and every qualified DBA or system administrator is expected to know that.\" Nonetheless, the issue was fixed in 2.2.220.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar `       | [2.2.220]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2024-1233_org.wildfly.security:wildfly-elytron-realm-token_2.2.3.Final",
              "shortDescription": {
                "text": "[CVE-2024-1233] org.wildfly.security:wildfly-elytron-realm-token 2.2.3.Final"
              },
              "help": {
                "text": "A flaw was found in` JwtValidator.resolvePublicKey` in JBoss EAP, where the validator checks jku and sends a HTTP request. During this process, no whitelisting or other filtering behavior is performed on the destination URL address, which may result in a server-side request forgery (SSRF) vulnerability.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.3      | Not Covered       | `sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2022-38750_org.yaml:snakeyaml_1.16",
              "shortDescription": {
                "text": "[CVE-2022-38750] org.yaml:snakeyaml 1.16"
              },
              "help": {
                "text": "Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Applicable       | `sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar `       | [1.31]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2024-28752_org.apache.cxf:cxf-core_4.0.0",
              "shortDescription": {
                "text": "[CVE-2024-28752] org.apache.cxf:cxf-core 4.0.0"
              },
              "help": {
                "text": "A SSRF vulnerability using the Aegis DataBinding in versions of Apache CXF before 4.0.4, 3.6.3 and 3.5.8 allows an attacker to perform SSRF style attacks on webservices that take at least one parameter of any type. Users of other data bindings (including the default databinding) are not impacted.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Applicable       | `sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar `       | [3.5.8], [3.6.3], [4.0.4]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2022-41854_org.yaml:snakeyaml_1.16",
              "shortDescription": {
                "text": "[CVE-2022-41854] org.yaml:snakeyaml 1.16"
              },
              "help": {
                "text": "Those using Snakeyaml to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stack overflow. This effect may support a denial of service attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Applicable       | `sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar `       | [1.32]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-38752_org.yaml:snakeyaml_1.16",
              "shortDescription": {
                "text": "[CVE-2022-38752] org.yaml:snakeyaml 1.16"
              },
              "help": {
                "text": "Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stack-overflow.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Applicable       | `sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar `       | [1.32]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-38749_org.yaml:snakeyaml_1.16",
              "shortDescription": {
                "text": "[CVE-2022-38749] org.yaml:snakeyaml 1.16"
              },
              "help": {
                "text": "Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Applicable       | `sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar `       | [1.31]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-38751_org.yaml:snakeyaml_1.16",
              "shortDescription": {
                "text": "[CVE-2022-38751] org.yaml:snakeyaml 1.16"
              },
              "help": {
                "text": "Using snakeYAML to parse untrusted YAML files may be vulnerable to Denial of Service attacks (DOS). If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Applicable       | `sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar `       | [1.31]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-35116_com.fasterxml.jackson.core:jackson-databind_2.15.2",
              "shortDescription": {
                "text": "[CVE-2023-35116] com.fasterxml.jackson.core:jackson-databind 2.15.2"
              },
              "help": {
                "text": "jackson-databind through 2.15.2 allows attackers to cause a denial of service or other unspecified impact via a crafted object that uses cyclic dependencies. NOTE: the vendor's perspective is that this is not a valid vulnerability report, because the steps of constructing a cyclic data structure and trying to serialize it cannot be achieved by an external attacker.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.7      | Applicable       | `sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "4.7"
              }
            },
            {
              "id": "CVE-2023-42364_3.18:busybox-binsh_1.36.1-r5",
              "shortDescription": {
                "text": "[CVE-2023-42364] 3.18:busybox-binsh 1.36.1-r5"
              },
              "help": {
                "text": "A use-after-free vulnerability in BusyBox v.1.36.1 allows attackers to cause a denial of service via a crafted awk pattern in the awk.c evaluate function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__aedc3bda2944bb9bcb6c3d475bee8b460db9a9b0f3e0b33a6ed2fd1ae0f1d445.tar `       | [1.36.1-r7]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42365_3.18:ssl_client_1.36.1-r5",
              "shortDescription": {
                "text": "[CVE-2023-42365] 3.18:ssl_client 1.36.1-r5"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in BusyBox v.1.36.1 via a crafted awk pattern in the awk.c copyvar function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__aedc3bda2944bb9bcb6c3d475bee8b460db9a9b0f3e0b33a6ed2fd1ae0f1d445.tar `       | [1.36.1-r7]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42365_3.18:busybox_1.36.1-r5",
              "shortDescription": {
                "text": "[CVE-2023-42365] 3.18:busybox 1.36.1-r5"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in BusyBox v.1.36.1 via a crafted awk pattern in the awk.c copyvar function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__aedc3bda2944bb9bcb6c3d475bee8b460db9a9b0f3e0b33a6ed2fd1ae0f1d445.tar `       | [1.36.1-r7]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2024-30172_org.bouncycastle:bcpkix-jdk18on_1.77",
              "shortDescription": {
                "text": "[CVE-2024-30172] org.bouncycastle:bcpkix-jdk18on 1.77"
              },
              "help": {
                "text": "An issue was discovered in Bouncy Castle Java Cryptography APIs before 1.78. An Ed25519 verification code infinite loop can occur via a crafted signature and public key.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar `       | [1.78]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2024-30172_org.bouncycastle:bcprov-jdk18on_1.77",
              "shortDescription": {
                "text": "[CVE-2024-30172] org.bouncycastle:bcprov-jdk18on 1.77"
              },
              "help": {
                "text": "An issue was discovered in Bouncy Castle Java Cryptography APIs before 1.78. An Ed25519 verification code infinite loop can occur via a crafted signature and public key.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar `       | [1.78]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2024-30171_org.bouncycastle:bcpkix-jdk18on_1.77",
              "shortDescription": {
                "text": "[CVE-2024-30171] org.bouncycastle:bcpkix-jdk18on 1.77"
              },
              "help": {
                "text": "An issue was discovered in Bouncy Castle Java TLS API and JSSE Provider before 1.78. Timing-based leakage may occur in RSA based handshakes because of exception processing.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar `       | [1.78]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2024-21742_org.apache.james:apache-mime4j-core_0.8.9",
              "shortDescription": {
                "text": "[CVE-2024-21742] org.apache.james:apache-mime4j-core 0.8.9"
              },
              "help": {
                "text": "Improper input validation allows for header injection in MIME4J library when using MIME4J DOM for composing message.\nThis can be exploited by an attacker to add unintended headers to MIME messages.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar `       | [0.8.10]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-42365_3.18:busybox-binsh_1.36.1-r5",
              "shortDescription": {
                "text": "[CVE-2023-42365] 3.18:busybox-binsh 1.36.1-r5"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in BusyBox v.1.36.1 via a crafted awk pattern in the awk.c copyvar function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__aedc3bda2944bb9bcb6c3d475bee8b460db9a9b0f3e0b33a6ed2fd1ae0f1d445.tar `       | [1.36.1-r7]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2024-1300_io.vertx:vertx-core_4.4.6",
              "shortDescription": {
                "text": "[CVE-2024-1300] io.vertx:vertx-core 4.4.6"
              },
              "help": {
                "text": "A vulnerability in the Eclipse Vert.x toolkit causes a memory leak in TCP servers configured with TLS and SNI support. When processing an unknown SNI server name assigned the default certificate instead of a mapped certificate, the SSL context is erroneously cached in the server name map, leading to memory exhaustion. This flaw allows attackers to send TLS client hello messages with fake server names, triggering a JVM out-of-memory error.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.4      | Not Covered       | `sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar `       | [4.4.8], [4.5.3]   |"
              },
              "properties": {
                "security-severity": "5.4"
              }
            },
            {
              "id": "CVE-2024-29857_org.bouncycastle:bcprov-jdk18on_1.77",
              "shortDescription": {
                "text": "[CVE-2024-29857] org.bouncycastle:bcprov-jdk18on 1.77"
              },
              "help": {
                "text": "An issue was discovered in ECCurve.java and ECCurve.cs in Bouncy Castle Java (BC Java) before 1.78, BC Java LTS before 2.73.6, BC-FJA before 1.0.2.5, and BC C# .Net before 2.3.1. Importing an EC certificate with crafted F2m parameters can lead to excessive CPU consumption during the evaluation of the curve parameters.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar `       | [1.78]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2024-1459_io.undertow:undertow-core_2.3.10.Final",
              "shortDescription": {
                "text": "[CVE-2024-1459] io.undertow:undertow-core 2.3.10.Final"
              },
              "help": {
                "text": "A path traversal vulnerability was found in Undertow. This issue may allow a remote attacker to append a specially-crafted sequence to an HTTP request for an application deployed to JBoss EAP, which may permit access to privileged or restricted files and directories.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar `       | [2.2.31.Final], [2.3.12.Final]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-42366_3.18:ssl_client_1.36.1-r5",
              "shortDescription": {
                "text": "[CVE-2023-42366] 3.18:ssl_client 1.36.1-r5"
              },
              "help": {
                "text": "A heap-buffer-overflow was discovered in BusyBox v.1.36.1 in the next_token function at awk.c:1159.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__aedc3bda2944bb9bcb6c3d475bee8b460db9a9b0f3e0b33a6ed2fd1ae0f1d445.tar `       | [1.36.1-r6]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42364_3.18:busybox_1.36.1-r5",
              "shortDescription": {
                "text": "[CVE-2023-42364] 3.18:busybox 1.36.1-r5"
              },
              "help": {
                "text": "A use-after-free vulnerability in BusyBox v.1.36.1 allows attackers to cause a denial of service via a crafted awk pattern in the awk.c evaluate function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__aedc3bda2944bb9bcb6c3d475bee8b460db9a9b0f3e0b33a6ed2fd1ae0f1d445.tar `       | [1.36.1-r7]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42366_3.18:busybox_1.36.1-r5",
              "shortDescription": {
                "text": "[CVE-2023-42366] 3.18:busybox 1.36.1-r5"
              },
              "help": {
                "text": "A heap-buffer-overflow was discovered in BusyBox v.1.36.1 in the next_token function at awk.c:1159.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__aedc3bda2944bb9bcb6c3d475bee8b460db9a9b0f3e0b33a6ed2fd1ae0f1d445.tar `       | [1.36.1-r6]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-52428_com.nimbusds:nimbus-jose-jwt_9.31",
              "shortDescription": {
                "text": "[CVE-2023-52428] com.nimbusds:nimbus-jose-jwt 9.31"
              },
              "help": {
                "text": "In Connect2id Nimbus JOSE+JWT before 9.37.2, an attacker can cause a denial of service (resource consumption) via a large JWE p2c header value (aka iteration count) for the PasswordBasedDecrypter (PBKDF2) component.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar `       | [9.37.2]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-42364_3.18:ssl_client_1.36.1-r5",
              "shortDescription": {
                "text": "[CVE-2023-42364] 3.18:ssl_client 1.36.1-r5"
              },
              "help": {
                "text": "A use-after-free vulnerability in BusyBox v.1.36.1 allows attackers to cause a denial of service via a crafted awk pattern in the awk.c evaluate function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__aedc3bda2944bb9bcb6c3d475bee8b460db9a9b0f3e0b33a6ed2fd1ae0f1d445.tar `       | [1.36.1-r7]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2024-29857_org.bouncycastle:bcpkix-jdk18on_1.77",
              "shortDescription": {
                "text": "[CVE-2024-29857] org.bouncycastle:bcpkix-jdk18on 1.77"
              },
              "help": {
                "text": "An issue was discovered in ECCurve.java and ECCurve.cs in Bouncy Castle Java (BC Java) before 1.78, BC Java LTS before 2.73.6, BC-FJA before 1.0.2.5, and BC C# .Net before 2.3.1. Importing an EC certificate with crafted F2m parameters can lead to excessive CPU consumption during the evaluation of the curve parameters.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar `       | [1.78]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-42363_3.18:busybox-binsh_1.36.1-r5",
              "shortDescription": {
                "text": "[CVE-2023-42363] 3.18:busybox-binsh 1.36.1-r5"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in xasprintf function in xfuncs_printf.c:344 in BusyBox v.1.36.1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__aedc3bda2944bb9bcb6c3d475bee8b460db9a9b0f3e0b33a6ed2fd1ae0f1d445.tar `       | [1.36.1-r7]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2024-29025_io.netty:netty-codec-http_4.1.104.Final",
              "shortDescription": {
                "text": "[CVE-2024-29025] io.netty:netty-codec-http 4.1.104.Final"
              },
              "help": {
                "text": "Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers \u0026 clients. The `HttpPostRequestDecoder` can be tricked to accumulate data. While the decoder can store items on the disk if configured so, there are no limits to the number of fields the form can have, an attacher can send a chunked post consisting of many small fields that will be accumulated in the `bodyListHttpData` list. The decoder cumulates bytes in the `undecodedChunk` buffer until it can decode a field, this field can cumulate data without limits. This vulnerability is fixed in 4.1.108.Final.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar `       | [4.1.108.Final]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2024-1023_io.vertx:vertx-core_4.4.6",
              "shortDescription": {
                "text": "[CVE-2024-1023] io.vertx:vertx-core 4.4.6"
              },
              "help": {
                "text": "A vulnerability in the Eclipse Vert.x toolkit results in a memory leak due to using Netty FastThreadLocal data structures. Specifically, when the Vert.x HTTP client establishes connections to different hosts, triggering the memory leak. The leak can be accelerated with intimate runtime knowledge, allowing an attacker to exploit this vulnerability. For instance, a server accepting arbitrary internet addresses could serve as an attack vector by connecting to these addresses, thereby accelerating the memory leak.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar `       | [4.4.7], [4.5.2]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-42363_3.18:ssl_client_1.36.1-r5",
              "shortDescription": {
                "text": "[CVE-2023-42363] 3.18:ssl_client 1.36.1-r5"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in xasprintf function in xfuncs_printf.c:344 in BusyBox v.1.36.1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__aedc3bda2944bb9bcb6c3d475bee8b460db9a9b0f3e0b33a6ed2fd1ae0f1d445.tar `       | [1.36.1-r7]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2024-1102_org.jberet:jberet-core_2.2.0.Final",
              "shortDescription": {
                "text": "[CVE-2024-1102] org.jberet:jberet-core 2.2.0.Final"
              },
              "help": {
                "text": "A vulnerability was found in jberet-core logging. An exception in 'dbProperties' might display user credentials such as the username and password for the database-connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar `       | [2.2.1.Final]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2024-30171_org.bouncycastle:bcprov-jdk18on_1.77",
              "shortDescription": {
                "text": "[CVE-2024-30171] org.bouncycastle:bcprov-jdk18on 1.77"
              },
              "help": {
                "text": "An issue was discovered in Bouncy Castle Java TLS API and JSSE Provider before 1.78. Timing-based leakage may occur in RSA based handshakes because of exception processing.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar `       | [1.78]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-42363_3.18:busybox_1.36.1-r5",
              "shortDescription": {
                "text": "[CVE-2023-42363] 3.18:busybox 1.36.1-r5"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in xasprintf function in xfuncs_printf.c:344 in BusyBox v.1.36.1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__aedc3bda2944bb9bcb6c3d475bee8b460db9a9b0f3e0b33a6ed2fd1ae0f1d445.tar `       | [1.36.1-r7]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42366_3.18:busybox-binsh_1.36.1-r5",
              "shortDescription": {
                "text": "[CVE-2023-42366] 3.18:busybox-binsh 1.36.1-r5"
              },
              "help": {
                "text": "A heap-buffer-overflow was discovered in BusyBox v.1.36.1 in the next_token function at awk.c:1159.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__aedc3bda2944bb9bcb6c3d475bee8b460db9a9b0f3e0b33a6ed2fd1ae0f1d445.tar `       | [1.36.1-r6]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2009-3767_3.18:libcrypto3_3.1.4-r5",
              "shortDescription": {
                "text": "[CVE-2009-3767] 3.18:libcrypto3 3.1.4-r5"
              },
              "help": {
                "text": "libraries/libldap/tls_o.c in OpenLDAP 2.2 and 2.4, and possibly other versions, when OpenSSL is used, does not properly handle a '\\0' character in a domain name in the subject's Common Name (CN) field of an X.509 certificate, which allows man-in-the-middle attackers to spoof arbitrary SSL servers via a crafted certificate issued by a legitimate Certification Authority, a related issue to CVE-2009-2408.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__aedc3bda2944bb9bcb6c3d475bee8b460db9a9b0f3e0b33a6ed2fd1ae0f1d445.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2012-5373_3.18:libxslt_1.1.38-r0",
              "shortDescription": {
                "text": "[CVE-2012-5373] 3.18:libxslt 1.1.38-r0"
              },
              "help": {
                "text": "Oracle Java SE 7 and earlier, and OpenJDK 7 and earlier, computes hash values without properly restricting the ability to trigger hash collisions predictably, which allows context-dependent attackers to cause a denial of service (CPU consumption) via crafted input to an application that maintains a hash table, as demonstrated by a universal multicollision attack against the MurmurHash3 algorithm, a different vulnerability than CVE-2012-2739.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__8fab78eaa6096c8fdcd304dd8c6bc5db66d88da9bc2a447563a318999cd87bd8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2012-2739_3.18:libxslt_1.1.38-r0",
              "shortDescription": {
                "text": "[CVE-2012-2739] 3.18:libxslt 1.1.38-r0"
              },
              "help": {
                "text": "Oracle Java SE before 7 Update 6, and OpenJDK 7 before 7u6 build 12 and 8 before build 39, computes hash values without restricting the ability to trigger hash collisions predictably, which allows context-dependent attackers to cause a denial of service (CPU consumption) via crafted input to an application that maintains a hash table.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__8fab78eaa6096c8fdcd304dd8c6bc5db66d88da9bc2a447563a318999cd87bd8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2009-3767_3.18:libssl3_3.1.4-r5",
              "shortDescription": {
                "text": "[CVE-2009-3767] 3.18:libssl3 3.1.4-r5"
              },
              "help": {
                "text": "libraries/libldap/tls_o.c in OpenLDAP 2.2 and 2.4, and possibly other versions, when OpenSSL is used, does not properly handle a '\\0' character in a domain name in the subject's Common Name (CN) field of an X.509 certificate, which allows man-in-the-middle attackers to spoof arbitrary SSL servers via a crafted certificate issued by a legitimate Certification Authority, a related issue to CVE-2009-2408.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__aedc3bda2944bb9bcb6c3d475bee8b460db9a9b0f3e0b33a6ed2fd1ae0f1d445.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-34447_org.bouncycastle:bcprov-jdk18on_1.77",
              "shortDescription": {
                "text": "[CVE-2024-34447] org.bouncycastle:bcprov-jdk18on 1.77"
              },
              "help": {
                "text": "An issue was discovered in Bouncy Castle Java Cryptography APIs before BC 1.78. When endpoint identification is enabled in the BCJSSE and an SSL socket is created without an explicit hostname (as happens with HttpsURLConnection), hostname verification could be performed against a DNS-resolved IP address in some situations, opening up a possibility of DNS poisoning.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar `       | [1.78]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-52071_3.18:curl_8.5.0-r0",
              "shortDescription": {
                "text": "[CVE-2023-52071] 3.18:curl 8.5.0-r0"
              },
              "help": {
                "text": "CVE-2023-52071",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__8fab78eaa6096c8fdcd304dd8c6bc5db66d88da9bc2a447563a318999cd87bd8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-52071_3.18:libcurl_8.5.0-r0",
              "shortDescription": {
                "text": "[CVE-2023-52071] 3.18:libcurl 8.5.0-r0"
              },
              "help": {
                "text": "CVE-2023-52071",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__8fab78eaa6096c8fdcd304dd8c6bc5db66d88da9bc2a447563a318999cd87bd8.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-34453_org.xerial.snappy:snappy-java_1.1.8.4",
              "shortDescription": {
                "text": "[CVE-2023-34453] org.xerial.snappy:snappy-java 1.1.8.4"
              },
              "help": {
                "text": "snappy-java is a fast compressor/decompressor for Java. Due to unchecked multiplications, an integer overflow may occur in versions prior to 1.1.10.1, causing a fatal error.\n\nThe function `shuffle(int[] input)` in the file `BitShuffle.java` receives an array of integers and applies a bit shuffle on it. It does so by multiplying the length by 4 and passing it to the natively compiled shuffle function. Since the length is not tested, the multiplication by four can cause an integer overflow and become a smaller value than the true size, or even zero or negative. In the case of a negative value, a `java.lang.NegativeArraySizeException` exception will raise, which can crash the program. In a case of a value that is zero or too small, the code that afterwards references the shuffled array will assume a bigger size of the array, which might cause exceptions such as `java.lang.ArrayIndexOutOfBoundsException`.\n\nThe same issue exists also when using the `shuffle` functions that receive a double, float, long and short, each using a different multiplier that may cause the same issue.\n\nVersion 1.1.10.1 contains a patch for this vulnerability.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar `       | [1.1.10.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-34454_org.xerial.snappy:snappy-java_1.1.8.4",
              "shortDescription": {
                "text": "[CVE-2023-34454] org.xerial.snappy:snappy-java 1.1.8.4"
              },
              "help": {
                "text": "snappy-java is a fast compressor/decompressor for Java. Due to unchecked multiplications, an integer overflow may occur in versions prior to 1.1.10.1, causing an unrecoverable fatal error.\n\nThe function `compress(char[] input)` in the file `Snappy.java` receives an array of characters and compresses it. It does so by multiplying the length by 2 and passing it to the rawCompress` function.\n\nSince the length is not tested, the multiplication by two can cause an integer overflow and become negative. The rawCompress function then uses the received length and passes it to the natively compiled maxCompressedLength function, using the returned value to allocate a byte array.\n\nSince the maxCompressedLength function treats the length as an unsigned integer, it doesn’t care that it is negative, and it returns a valid value, which is casted to a signed integer by the Java engine. If the result is negative, a `java.lang.NegativeArraySizeException` exception will be raised while trying to allocate the array `buf`. On the other side, if the result is positive, the `buf` array will successfully be allocated, but its size might be too small to use for the compression, causing a fatal Access Violation error.\n\nThe same issue exists also when using the `compress` functions that receive double, float, int, long and short, each using a different multiplier that may cause the same issue. The issue most likely won’t occur when using a byte array, since creating a byte array of size 0x80000000 (or any other negative value) is impossible in the first place.\n\nVersion 1.1.10.1 contains a patch for this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar `       | [1.1.10.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            }
          ],
          "version": "3.96.1"
        }
      },
      "results": [
        {
          "ruleId": "CVE-2022-1471_org.yaml:snakeyaml_1.16",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "[CVE-2022-1471] sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-21449_org.graalvm.sdk:graal-sdk_21.1.0",
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "[CVE-2022-21449] sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2017-18640_org.yaml:snakeyaml_1.16",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "[CVE-2017-18640] sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-25857_org.yaml:snakeyaml_1.16",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "text": "[CVE-2022-25857] sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-43642_org.xerial.snappy:snappy-java_1.1.8.4",
          "ruleIndex": 4,
          "level": "error",
          "message": {
            "text": "[CVE-2023-43642] sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-34455_org.xerial.snappy:snappy-java_1.1.8.4",
          "ruleIndex": 5,
          "level": "error",
          "message": {
            "text": "[CVE-2023-34455] sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5685_org.jboss.xnio:xnio-api_3.8.12.Final",
          "ruleIndex": 6,
          "level": "error",
          "message": {
            "text": "[CVE-2023-5685] sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-6236_org.wildfly.security:wildfly-elytron-http-oidc_2.2.3.Final",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "[CVE-2023-6236] sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-45868_com.h2database:h2_2.1.214",
          "ruleIndex": 8,
          "level": "error",
          "message": {
            "text": "[CVE-2022-45868] sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-1233_org.wildfly.security:wildfly-elytron-realm-token_2.2.3.Final",
          "ruleIndex": 9,
          "level": "error",
          "message": {
            "text": "[CVE-2024-1233] sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-38750_org.yaml:snakeyaml_1.16",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-38750] sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-28752_org.apache.cxf:cxf-core_4.0.0",
          "ruleIndex": 11,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-28752] sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41854_org.yaml:snakeyaml_1.16",
          "ruleIndex": 12,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-41854] sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-38752_org.yaml:snakeyaml_1.16",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-38752] sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-38749_org.yaml:snakeyaml_1.16",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-38749] sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-38751_org.yaml:snakeyaml_1.16",
          "ruleIndex": 15,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-38751] sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-35116_com.fasterxml.jackson.core:jackson-databind_2.15.2",
          "ruleIndex": 16,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-35116] sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42364_3.18:busybox-binsh_1.36.1-r5",
          "ruleIndex": 17,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42364] sha256__aedc3bda2944bb9bcb6c3d475bee8b460db9a9b0f3e0b33a6ed2fd1ae0f1d445.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42365_3.18:ssl_client_1.36.1-r5",
          "ruleIndex": 18,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42365] sha256__aedc3bda2944bb9bcb6c3d475bee8b460db9a9b0f3e0b33a6ed2fd1ae0f1d445.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42365_3.18:busybox_1.36.1-r5",
          "ruleIndex": 19,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42365] sha256__aedc3bda2944bb9bcb6c3d475bee8b460db9a9b0f3e0b33a6ed2fd1ae0f1d445.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-30172_org.bouncycastle:bcpkix-jdk18on_1.77",
          "ruleIndex": 20,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-30172] sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-30172_org.bouncycastle:bcprov-jdk18on_1.77",
          "ruleIndex": 21,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-30172] sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-30171_org.bouncycastle:bcpkix-jdk18on_1.77",
          "ruleIndex": 22,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-30171] sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-21742_org.apache.james:apache-mime4j-core_0.8.9",
          "ruleIndex": 23,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-21742] sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42365_3.18:busybox-binsh_1.36.1-r5",
          "ruleIndex": 24,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42365] sha256__aedc3bda2944bb9bcb6c3d475bee8b460db9a9b0f3e0b33a6ed2fd1ae0f1d445.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-1300_io.vertx:vertx-core_4.4.6",
          "ruleIndex": 25,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-1300] sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-29857_org.bouncycastle:bcprov-jdk18on_1.77",
          "ruleIndex": 26,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-29857] sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-1459_io.undertow:undertow-core_2.3.10.Final",
          "ruleIndex": 27,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-1459] sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42366_3.18:ssl_client_1.36.1-r5",
          "ruleIndex": 28,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42366] sha256__aedc3bda2944bb9bcb6c3d475bee8b460db9a9b0f3e0b33a6ed2fd1ae0f1d445.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42364_3.18:busybox_1.36.1-r5",
          "ruleIndex": 29,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42364] sha256__aedc3bda2944bb9bcb6c3d475bee8b460db9a9b0f3e0b33a6ed2fd1ae0f1d445.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42366_3.18:busybox_1.36.1-r5",
          "ruleIndex": 30,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42366] sha256__aedc3bda2944bb9bcb6c3d475bee8b460db9a9b0f3e0b33a6ed2fd1ae0f1d445.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-52428_com.nimbusds:nimbus-jose-jwt_9.31",
          "ruleIndex": 31,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-52428] sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42364_3.18:ssl_client_1.36.1-r5",
          "ruleIndex": 32,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42364] sha256__aedc3bda2944bb9bcb6c3d475bee8b460db9a9b0f3e0b33a6ed2fd1ae0f1d445.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-29857_org.bouncycastle:bcpkix-jdk18on_1.77",
          "ruleIndex": 33,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-29857] sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42363_3.18:busybox-binsh_1.36.1-r5",
          "ruleIndex": 34,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42363] sha256__aedc3bda2944bb9bcb6c3d475bee8b460db9a9b0f3e0b33a6ed2fd1ae0f1d445.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-29025_io.netty:netty-codec-http_4.1.104.Final",
          "ruleIndex": 35,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-29025] sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-1023_io.vertx:vertx-core_4.4.6",
          "ruleIndex": 36,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-1023] sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42363_3.18:ssl_client_1.36.1-r5",
          "ruleIndex": 37,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42363] sha256__aedc3bda2944bb9bcb6c3d475bee8b460db9a9b0f3e0b33a6ed2fd1ae0f1d445.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-1102_org.jberet:jberet-core_2.2.0.Final",
          "ruleIndex": 38,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-1102] sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-30171_org.bouncycastle:bcprov-jdk18on_1.77",
          "ruleIndex": 39,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-30171] sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42363_3.18:busybox_1.36.1-r5",
          "ruleIndex": 40,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42363] sha256__aedc3bda2944bb9bcb6c3d475bee8b460db9a9b0f3e0b33a6ed2fd1ae0f1d445.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42366_3.18:busybox-binsh_1.36.1-r5",
          "ruleIndex": 41,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42366] sha256__aedc3bda2944bb9bcb6c3d475bee8b460db9a9b0f3e0b33a6ed2fd1ae0f1d445.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2009-3767_3.18:libcrypto3_3.1.4-r5",
          "ruleIndex": 42,
          "level": "warning",
          "message": {
            "text": "[CVE-2009-3767] sha256__aedc3bda2944bb9bcb6c3d475bee8b460db9a9b0f3e0b33a6ed2fd1ae0f1d445.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2012-5373_3.18:libxslt_1.1.38-r0",
          "ruleIndex": 43,
          "level": "warning",
          "message": {
            "text": "[CVE-2012-5373] sha256__8fab78eaa6096c8fdcd304dd8c6bc5db66d88da9bc2a447563a318999cd87bd8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2012-2739_3.18:libxslt_1.1.38-r0",
          "ruleIndex": 44,
          "level": "warning",
          "message": {
            "text": "[CVE-2012-2739] sha256__8fab78eaa6096c8fdcd304dd8c6bc5db66d88da9bc2a447563a318999cd87bd8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2009-3767_3.18:libssl3_3.1.4-r5",
          "ruleIndex": 45,
          "level": "warning",
          "message": {
            "text": "[CVE-2009-3767] sha256__aedc3bda2944bb9bcb6c3d475bee8b460db9a9b0f3e0b33a6ed2fd1ae0f1d445.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-34447_org.bouncycastle:bcprov-jdk18on_1.77",
          "ruleIndex": 46,
          "level": "note",
          "message": {
            "text": "[CVE-2024-34447] sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-52071_3.18:curl_8.5.0-r0",
          "ruleIndex": 47,
          "level": "none",
          "message": {
            "text": "[CVE-2023-52071] sha256__8fab78eaa6096c8fdcd304dd8c6bc5db66d88da9bc2a447563a318999cd87bd8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-52071_3.18:libcurl_8.5.0-r0",
          "ruleIndex": 48,
          "level": "none",
          "message": {
            "text": "[CVE-2023-52071] sha256__8fab78eaa6096c8fdcd304dd8c6bc5db66d88da9bc2a447563a318999cd87bd8.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-34453_org.xerial.snappy:snappy-java_1.1.8.4",
          "ruleIndex": 49,
          "level": "error",
          "message": {
            "text": "[CVE-2023-34453] sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-34454_org.xerial.snappy:snappy-java_1.1.8.4",
          "ruleIndex": 50,
          "level": "error",
          "message": {
            "text": "[CVE-2023-34454] sha256__4d5a4d846b6e2d758e25e9faa08f8e08ee2629e446d96671cc4a5481ee8b1af7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://jfrog.com/help/r/jfrog-security-documentation/jfrog-advanced-security",
          "name": "JFrog Applicability Scanner",
          "rules": [
            {
              "id": "applic_CVE-2022-21449",
              "name": "CVE-2022-21449",
              "shortDescription": {
                "text": "Scanner for CVE-2022-21449"
              },
              "fullDescription": {
                "text": "The scanner checks whether Java uses the vulnerable ECDSA signature functionality by checking whether the function `Signature.getInstance` is called with any of the following values for its 1st (`algorithm`) argument:\n\n* `NONEwithECDSA`\n* `SHA1withECDSA`\n* `SHA224withECDSA`\n* `SHA256withECDSA`\n* `SHA384withECDSA`\n* `SHA512withECDSA`\n* `SHA3-224withECDSA`\n* `SHA3-256withECDSA`\n* `SHA3-384withECDSA`\n* `SHA3-512withECDSA`\n* `NONEwithECDSAinP1363Format`\n* `SHA1withECDSAinP1363Format`\n* `SHA224withECDSAinP1363Format`\n* `SHA256withECDSAinP1363Format`\n* `SHA384withECDSAinP1363Format`\n* `SHA512withECDSAinP1363Format`\n* `SHA3-224withECDSAinP1363Format`\n* `SHA3-256withECDSAinP1363Format`\n* `SHA3-384withECDSAinP1363Format`\n* `SHA3-512withECDSAinP1363Format`",
                "markdown": "The scanner checks whether Java uses the vulnerable ECDSA signature functionality by checking whether the function `Signature.getInstance` is called with any of the following values for its 1st (`algorithm`) argument:\n\n* `NONEwithECDSA`\n* `SHA1withECDSA`\n* `SHA224withECDSA`\n* `SHA256withECDSA`\n* `SHA384withECDSA`\n* `SHA512withECDSA`\n* `SHA3-224withECDSA`\n* `SHA3-256withECDSA`\n* `SHA3-384withECDSA`\n* `SHA3-512withECDSA`\n* `NONEwithECDSAinP1363Format`\n* `SHA1withECDSAinP1363Format`\n* `SHA224withECDSAinP1363Format`\n* `SHA256withECDSAinP1363Format`\n* `SHA384withECDSAinP1363Format`\n* `SHA512withECDSAinP1363Format`\n* `SHA3-224withECDSAinP1363Format`\n* `SHA3-256withECDSAinP1363Format`\n* `SHA3-384withECDSAinP1363Format`\n* `SHA3-512withECDSAinP1363Format`"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-43642",
              "name": "CVE-2023-43642",
              "shortDescription": {
                "text": "Scanner for CVE-2023-43642"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable `org.xerial.snappy.SnappyInputStream` object is being initialized.",
                "markdown": "The scanner checks whether the vulnerable `org.xerial.snappy.SnappyInputStream` object is being initialized."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-34455",
              "name": "CVE-2023-34455",
              "shortDescription": {
                "text": "Scanner for CVE-2023-34455"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable `org.xerial.snappy.SnappyInputStream` object is being initialized.",
                "markdown": "The scanner checks whether the vulnerable `org.xerial.snappy.SnappyInputStream` object is being initialized."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-35116",
              "name": "CVE-2023-35116",
              "shortDescription": {
                "text": "Scanner for CVE-2023-35116"
              },
              "fullDescription": {
                "text": "The scanner checks for calls to the vulnerable functions with external input:\n\n*  `ObjectMapper.writeValue()`\n*  `ObjectMapper.writeValueAsString()`\n*  `ObjectMapper.writeValueAsBytes()`\n*  `ObjectWriter.writeValue()`\n*  `ObjectWriter.writeValueAsString()`\n*  `ObjectWriter.writeValueAsBytes()`\n* `ser.DefaultSerializerProvider.serializeValue()`\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The input argument to those functions is a cyclic object (e.g. a `HashMap` object with a reference to itself).",
                "markdown": "The scanner checks for calls to the vulnerable functions with external input:\n\n*  `ObjectMapper.writeValue()`\n*  `ObjectMapper.writeValueAsString()`\n*  `ObjectMapper.writeValueAsBytes()`\n*  `ObjectWriter.writeValue()`\n*  `ObjectWriter.writeValueAsString()`\n*  `ObjectWriter.writeValueAsBytes()`\n* `ser.DefaultSerializerProvider.serializeValue()`\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The input argument to those functions is a cyclic object (e.g. a `HashMap` object with a reference to itself)."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-38749",
              "name": "CVE-2022-38749",
              "shortDescription": {
                "text": "Scanner for CVE-2022-38749"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable functions are called:\n\n* `org/yaml/snakeyaml/Yaml.load`\n* `org/yaml/snakeyaml/Yaml.loadAs`",
                "markdown": "The scanner checks whether the vulnerable functions are called:\n\n* `org/yaml/snakeyaml/Yaml.load`\n* `org/yaml/snakeyaml/Yaml.loadAs`"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-38750",
              "name": "CVE-2022-38750",
              "shortDescription": {
                "text": "Scanner for CVE-2022-38750"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable functions are called:\n\n* `org/yaml/snakeyaml/Yaml.load`\n* `org/yaml/snakeyaml/Yaml.loadAs`",
                "markdown": "The scanner checks whether the vulnerable functions are called:\n\n* `org/yaml/snakeyaml/Yaml.load`\n* `org/yaml/snakeyaml/Yaml.loadAs`"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-25857",
              "name": "CVE-2022-25857",
              "shortDescription": {
                "text": "Scanner for CVE-2022-25857"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable functions are called:\n\n* `org/yaml/snakeyaml/Yaml.load`\n* `org/yaml/snakeyaml/Yaml.loadAs`",
                "markdown": "The scanner checks whether the vulnerable functions are called:\n\n* `org/yaml/snakeyaml/Yaml.load`\n* `org/yaml/snakeyaml/Yaml.loadAs`"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-38752",
              "name": "CVE-2022-38752",
              "shortDescription": {
                "text": "Scanner for CVE-2022-38752"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable functions are called:\n\n* `org/yaml/snakeyaml/Yaml.load`\n* `org/yaml/snakeyaml/Yaml.loadAs`",
                "markdown": "The scanner checks whether the vulnerable functions are called:\n\n* `org/yaml/snakeyaml/Yaml.load`\n* `org/yaml/snakeyaml/Yaml.loadAs`"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-38751",
              "name": "CVE-2022-38751",
              "shortDescription": {
                "text": "Scanner for CVE-2022-38751"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable functions are called:\n\n* `org/yaml/snakeyaml/Yaml.load`\n* `org/yaml/snakeyaml/Yaml.loadAs`",
                "markdown": "The scanner checks whether the vulnerable functions are called:\n\n* `org/yaml/snakeyaml/Yaml.load`\n* `org/yaml/snakeyaml/Yaml.loadAs`"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41854",
              "name": "CVE-2022-41854",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41854"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable functions are called:\n\n* `org/yaml/snakeyaml/Yaml.load`\n* `org/yaml/snakeyaml/Yaml.loadAs`",
                "markdown": "The scanner checks whether the vulnerable functions are called:\n\n* `org/yaml/snakeyaml/Yaml.load`\n* `org/yaml/snakeyaml/Yaml.loadAs`"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-1471",
              "name": "CVE-2022-1471",
              "shortDescription": {
                "text": "Scanner for CVE-2022-1471"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the vulnerable functions are called -\n\n* `Yaml.load`\n* `Yaml.loadAll`\n* `Load.loadFromString`\n* `Load.loadAllFromString`\n* `Load.loadFromInputStream`\n* `Load.loadAllFromInputStream`\n* `Load.loadFromReader`\n* `Load.loadAllFromReader`\n\n\nIn addition, the scanner also checks whether a mitigation is used (initiating `Yaml` with a `SafeConstructor`).",
                "markdown": "The scanner checks whether any of the vulnerable functions are called -\n\n* `Yaml.load`\n* `Yaml.loadAll`\n* `Load.loadFromString`\n* `Load.loadAllFromString`\n* `Load.loadFromInputStream`\n* `Load.loadAllFromInputStream`\n* `Load.loadFromReader`\n* `Load.loadAllFromReader`\n\n\nIn addition, the scanner also checks whether a mitigation is used (initiating `Yaml` with a `SafeConstructor`)."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2017-18640",
              "name": "CVE-2017-18640",
              "shortDescription": {
                "text": "Scanner for CVE-2017-18640"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable functions are called:\n\n* `org/yaml/snakeyaml/Yaml.load` with external input to its 1st argument.\n* `org/yaml/snakeyaml/Yaml.loadAs` with external input to its 1st argument.\n* `org/yaml/snakeyaml/Yaml.loadAll` with external input to its 1st argument.\n* `SafeConstructor.getSingleData()`\n* `Constructor.getSingleData()`\n* `CustomClassLoaderConstructor.getSingleData()`\n* `org/snakeyaml/engine/v2/api/Load.loadAllFromInputStream()`\n* `org/snakeyaml/engine/v2/api/Load.loadAllFromReader()`\n* `org/snakeyaml/engine/v2/api/Load.loadAllFromString()` with external input to its 1st argument.\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The return value from the vulnerable function must be used as a Map (for example `load_result.toString();`).",
                "markdown": "The scanner checks whether the vulnerable functions are called:\n\n* `org/yaml/snakeyaml/Yaml.load` with external input to its 1st argument.\n* `org/yaml/snakeyaml/Yaml.loadAs` with external input to its 1st argument.\n* `org/yaml/snakeyaml/Yaml.loadAll` with external input to its 1st argument.\n* `SafeConstructor.getSingleData()`\n* `Constructor.getSingleData()`\n* `CustomClassLoaderConstructor.getSingleData()`\n* `org/snakeyaml/engine/v2/api/Load.loadAllFromInputStream()`\n* `org/snakeyaml/engine/v2/api/Load.loadAllFromReader()`\n* `org/snakeyaml/engine/v2/api/Load.loadAllFromString()` with external input to its 1st argument.\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The return value from the vulnerable function must be used as a Map (for example `load_result.toString();`)."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-34453",
              "name": "CVE-2023-34453",
              "shortDescription": {
                "text": "Scanner for CVE-2023-34453"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `BitShuffle.shuffle` is called with external input to its 1st (`input`) argument.",
                "markdown": "The scanner checks whether the vulnerable function `BitShuffle.shuffle` is called with external input to its 1st (`input`) argument."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-34454",
              "name": "CVE-2023-34454",
              "shortDescription": {
                "text": "Scanner for CVE-2023-34454"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `Snappy.compress()` is called with external input to its 1st (`input`) argument.",
                "markdown": "The scanner checks whether the vulnerable function `Snappy.compress()` is called with external input to its 1st (`input`) argument."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2024-28752",
              "name": "CVE-2024-28752",
              "shortDescription": {
                "text": "Scanner for CVE-2024-28752"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `org.apache.cxf.aegis.databinding.AegisDatabinding.AegisDatabinding()` is called.",
                "markdown": "The scanner checks whether the vulnerable function `org.apache.cxf.aegis.databinding.AegisDatabinding.AegisDatabinding()` is called."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-42363",
              "name": "CVE-2023-42363",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42363"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42366",
              "name": "CVE-2023-42366",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42366"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-1459",
              "name": "CVE-2024-1459",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-1459"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-34447",
              "name": "CVE-2024-34447",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-34447"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42364",
              "name": "CVE-2023-42364",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42364"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-1102",
              "name": "CVE-2024-1102",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-1102"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-1233",
              "name": "CVE-2024-1233",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-1233"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-45868",
              "name": "CVE-2022-45868",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-45868"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-6236",
              "name": "CVE-2023-6236",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-6236"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2009-3767",
              "name": "CVE-2009-3767",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2009-3767"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-52428",
              "name": "CVE-2023-52428",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-52428"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42365",
              "name": "CVE-2023-42365",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42365"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-52071",
              "name": "CVE-2023-52071",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-52071"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-30171",
              "name": "CVE-2024-30171",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-30171"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-29025",
              "name": "CVE-2024-29025",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-29025"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-5685",
              "name": "CVE-2023-5685",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-5685"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-21742",
              "name": "CVE-2024-21742",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-21742"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-1300",
              "name": "CVE-2024-1300",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-1300"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2012-5373",
              "name": "CVE-2012-5373",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2012-5373"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-29857",
              "name": "CVE-2024-29857",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-29857"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-1023",
              "name": "CVE-2024-1023",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-1023"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2012-2739",
              "name": "CVE-2012-2739",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2012-2739"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-30172",
              "name": "CVE-2024-30172",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-30172"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            }
          ],
          "version": "1.0"
        }
      },
      "invocations": [
        {
          "arguments": [
            "/root/.jfrog/dependencies/analyzerManager/jas_scanner/jas_scanner",
            "scan",
            "/tmp/jfrog.cli.temp.-1718847230-1228231027/config.yaml"
          ],
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "/tmp/jfrog.cli.temp.-1718847088-787251149/image.tar"
          }
        }
      ],
      "results": [
        {
          "ruleId": "applic_CVE-2022-21449",
          "message": {
            "text": "The vulnerable ECDSA signature functionality is enabled since Signature.getInstance is calledwith an argument containing the 'ECDSA' string"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/bin/client/jboss-client.jar/org/wildfly/security/sasl/entity/EntitySaslClientFactory.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-21449",
          "message": {
            "text": "The vulnerable ECDSA signature functionality is enabled since Signature.getInstance is calledwith an argument containing the 'ECDSA' string"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/bin/client/jboss-client.jar/org/wildfly/security/sasl/entity/EntitySaslServerFactory.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-21449",
          "message": {
            "text": "The vulnerable ECDSA signature functionality is enabled since Signature.getInstance is calledwith an argument containing the 'ECDSA' string"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/modules/system/layers/base/org/wildfly/security/elytron-base/main/wildfly-elytron-sasl-entity-2.2.3.Final.jar/org/wildfly/security/sasl/entity/EntitySaslClientFactory.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-21449",
          "message": {
            "text": "The vulnerable ECDSA signature functionality is enabled since Signature.getInstance is calledwith an argument containing the 'ECDSA' string"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/modules/system/layers/base/org/wildfly/security/elytron-base/main/wildfly-elytron-sasl-entity-2.2.3.Final.jar/org/wildfly/security/sasl/entity/EntitySaslServerFactory.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-43642",
          "message": {
            "text": "The vulnerable class org.xerial.snappy.SnappyInputStream.SnappyInputStream is initiated"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/modules/system/layers/base/org/apache/kafka/client/main/kafka-clients-3.6.0.jar/org/apache/kafka/common/compress/SnappyFactory.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-34455",
          "message": {
            "text": "The vulnerable class org.xerial.snappy.SnappyInputStream.SnappyInputStream is initiated"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/modules/system/layers/base/org/apache/kafka/client/main/kafka-clients-3.6.0.jar/org/apache/kafka/common/compress/SnappyFactory.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-35116",
          "message": {
            "text": "At least one of the vulnerable functions writeValueAsString, writeValueAsBytes, writeValue, serializeValue is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/modules/com/jayway/jsonpath/json-path/main/json-path-2.9.0.jar/com/jayway/jsonpath/spi/json/JacksonJsonProvider.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-35116",
          "message": {
            "text": "At least one of the vulnerable functions writeValueAsString, writeValueAsBytes, writeValue, serializeValue is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/modules/system/layers/base/com/fasterxml/jackson/jakarta/jackson-jakarta-json-provider/main/jackson-jakarta-rs-base-2.15.3.jar/com/fasterxml/jackson/jakarta/rs/base/ProviderBase.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-35116",
          "message": {
            "text": "At least one of the vulnerable functions writeValueAsString, writeValueAsBytes, writeValue, serializeValue is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/modules/system/layers/base/com/github/fge/jackson-coreutils/main/jackson-coreutils-1.8.jar/com/github/fge/jackson/JacksonUtils.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-35116",
          "message": {
            "text": "At least one of the vulnerable functions writeValueAsString, writeValueAsBytes, writeValue, serializeValue is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/modules/system/layers/base/com/github/fge/json-patch/main/json-patch-1.9.jar/com/github/fge/jsonpatch/diff/JsonDiff.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-35116",
          "message": {
            "text": "At least one of the vulnerable functions writeValueAsString, writeValueAsBytes, writeValue, serializeValue is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/modules/system/layers/base/io/smallrye/openapi/main/smallrye-open-api-core-3.7.0.jar/io/smallrye/openapi/runtime/io/OpenApiSerializer.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-35116",
          "message": {
            "text": "At least one of the vulnerable functions writeValueAsString, writeValueAsBytes, writeValue, serializeValue is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/modules/system/layers/base/io/vertx/core/main/vertx-core-4.4.6.jar/io/vertx/core/json/jackson/DatabindCodec.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-35116",
          "message": {
            "text": "At least one of the vulnerable functions writeValueAsString, writeValueAsBytes, writeValue, serializeValue is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/modules/system/layers/base/io/vertx/core/main/vertx-core-4.4.6.jar/io/vertx/core/json/jackson/DatabindCodec.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-35116",
          "message": {
            "text": "At least one of the vulnerable functions writeValueAsString, writeValueAsBytes, writeValue, serializeValue is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/modules/system/layers/base/org/hibernate/main/hibernate-core-6.4.2.Final.jar/org/hibernate/type/format/jackson/JacksonJsonFormatMapper.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-35116",
          "message": {
            "text": "At least one of the vulnerable functions writeValueAsString, writeValueAsBytes, writeValue, serializeValue is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/modules/system/layers/base/org/hibernate/main/hibernate-core-6.4.2.Final.jar/org/hibernate/type/format/jackson/JacksonXmlFormatMapper.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-35116",
          "message": {
            "text": "At least one of the vulnerable functions writeValueAsString, writeValueAsBytes, writeValue, serializeValue is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/modules/system/layers/base/org/jboss/resteasy/resteasy-jackson2-provider/main/resteasy-jackson2-provider-6.2.7.Final.jar/org/jboss/resteasy/plugins/providers/jackson/PatchMethodFilter.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-35116",
          "message": {
            "text": "At least one of the vulnerable functions writeValueAsString, writeValueAsBytes, writeValue, serializeValue is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/modules/system/layers/base/org/jboss/resteasy/resteasy-jackson2-provider/main/resteasy-jackson2-provider-6.2.7.Final.jar/org/jboss/resteasy/plugins/providers/jackson/ResteasyJackson2Provider%244.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-35116",
          "message": {
            "text": "At least one of the vulnerable functions writeValueAsString, writeValueAsBytes, writeValue, serializeValue is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/modules/system/layers/base/org/jboss/resteasy/resteasy-jackson2-provider/main/resteasy-jackson2-provider-6.2.7.Final.jar/org/jboss/resteasy/plugins/providers/jackson/ResteasyJackson2Provider.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-35116",
          "message": {
            "text": "At least one of the vulnerable functions writeValueAsString, writeValueAsBytes, writeValue, serializeValue is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/modules/system/layers/base/org/jboss/resteasy/resteasy-jackson2-provider/main/resteasy-jackson2-provider-6.2.7.Final.jar/org/jboss/resteasy/tracing/providers/jackson2/Jackson2JsonFormatRESTEasyTracingInfo.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-35116",
          "message": {
            "text": "At least one of the vulnerable functions writeValueAsString, writeValueAsBytes, writeValue, serializeValue is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/modules/system/layers/base/org/wildfly/security/elytron-jose-util/main/wildfly-elytron-jose-util-2.2.3.Final.jar/org/wildfly/security/jose/util/JsonSerialization.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-35116",
          "message": {
            "text": "At least one of the vulnerable functions writeValueAsString, writeValueAsBytes, writeValue, serializeValue is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/modules/system/layers/base/org/wildfly/security/elytron-jose-util/main/wildfly-elytron-jose-util-2.2.3.Final.jar/org/wildfly/security/jose/util/JsonSerialization.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-35116",
          "message": {
            "text": "At least one of the vulnerable functions writeValueAsString, writeValueAsBytes, writeValue, serializeValue is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/modules/system/layers/base/org/wildfly/security/elytron-jose-util/main/wildfly-elytron-jose-util-2.2.3.Final.jar/org/wildfly/security/jose/util/JsonSerialization.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-35116",
          "message": {
            "text": "At least one of the vulnerable functions writeValueAsString, writeValueAsBytes, writeValue, serializeValue is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/modules/system/layers/base/org/wildfly/security/elytron-jose-util/main/wildfly-elytron-jose-util-2.2.3.Final.jar/org/wildfly/security/jose/util/JsonSerialization.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-35116",
          "message": {
            "text": "At least one of the vulnerable functions writeValueAsString, writeValueAsBytes, writeValue, serializeValue is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/modules/system/layers/base/org/wildfly/security/elytron-jose-util/main/wildfly-elytron-jose-util-2.2.3.Final.jar/org/wildfly/security/jose/util/JsonSerialization.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-35116",
          "message": {
            "text": "At least one of the vulnerable functions writeValueAsString, writeValueAsBytes, writeValue, serializeValue is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/standalone/deployments/camunda-engine-rest-jakarta-7.22.0-SNAPSHOT.war/WEB-INF/lib/camunda-engine-rest-core-jakarta-7.22.0-SNAPSHOT.jar/org/camunda/bpm/engine/rest/security/auth/ProcessEngineAuthenticationFilter.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-35116",
          "message": {
            "text": "At least one of the vulnerable functions writeValueAsString, writeValueAsBytes, writeValue, serializeValue is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/standalone/deployments/camunda-engine-rest-jakarta-7.22.0-SNAPSHOT.war/WEB-INF/lib/jackson-jakarta-rs-base-2.15.2.jar/com/fasterxml/jackson/jakarta/rs/base/ProviderBase.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-35116",
          "message": {
            "text": "At least one of the vulnerable functions writeValueAsString, writeValueAsBytes, writeValue, serializeValue is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/standalone/deployments/camunda-webapp-wildfly-7.22.0-SNAPSHOT.war/WEB-INF/lib/camunda-engine-rest-core-jakarta-7.22.0-SNAPSHOT.jar/org/camunda/bpm/engine/rest/security/auth/ProcessEngineAuthenticationFilter.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-35116",
          "message": {
            "text": "At least one of the vulnerable functions writeValueAsString, writeValueAsBytes, writeValue, serializeValue is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/standalone/deployments/camunda-webapp-wildfly-7.22.0-SNAPSHOT.war/WEB-INF/lib/jackson-jakarta-rs-base-2.15.2.jar/com/fasterxml/jackson/jakarta/rs/base/ProviderBase.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-38749",
          "message": {
            "text": "The vulnerable function Yaml.load/loadAs/loadAll is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/modules/system/layers/base/org/jboss/as/controller/main/wildfly-controller-23.0.1.Final.jar/org/jboss/as/controller/persistence/yaml/YamlConfigurationExtension.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-38750",
          "message": {
            "text": "The vulnerable function Yaml.load/loadAs/loadAll is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/modules/system/layers/base/org/jboss/as/controller/main/wildfly-controller-23.0.1.Final.jar/org/jboss/as/controller/persistence/yaml/YamlConfigurationExtension.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-25857",
          "message": {
            "text": "The vulnerable function Yaml.load/loadAs/loadAll is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/modules/system/layers/base/org/jboss/as/controller/main/wildfly-controller-23.0.1.Final.jar/org/jboss/as/controller/persistence/yaml/YamlConfigurationExtension.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-38752",
          "message": {
            "text": "The vulnerable function Yaml.load/loadAs/loadAll is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/modules/system/layers/base/org/jboss/as/controller/main/wildfly-controller-23.0.1.Final.jar/org/jboss/as/controller/persistence/yaml/YamlConfigurationExtension.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-38751",
          "message": {
            "text": "The vulnerable function Yaml.load/loadAs/loadAll is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/modules/system/layers/base/org/jboss/as/controller/main/wildfly-controller-23.0.1.Final.jar/org/jboss/as/controller/persistence/yaml/YamlConfigurationExtension.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41854",
          "message": {
            "text": "The vulnerable function Yaml.load/loadAs/loadAll is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/modules/system/layers/base/org/jboss/as/controller/main/wildfly-controller-23.0.1.Final.jar/org/jboss/as/controller/persistence/yaml/YamlConfigurationExtension.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-1471",
          "message": {
            "text": "A SnakeYAML constructor class is not instantiated safely"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/modules/system/layers/base/org/jboss/as/controller/main/wildfly-controller-23.0.1.Final.jar/org/jboss/as/controller/persistence/yaml/YamlConfigurationExtension.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-1471",
          "message": {
            "text": "The vulnerable function Yaml.load/loadAll is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/modules/system/layers/base/org/jboss/as/controller/main/wildfly-controller-23.0.1.Final.jar/org/jboss/as/controller/persistence/yaml/YamlConfigurationExtension.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2017-18640",
          "message": {
            "text": "The vulnerable function Yaml.load/loadAs/loadAll is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/modules/system/layers/base/org/jboss/as/controller/main/wildfly-controller-23.0.1.Final.jar/org/jboss/as/controller/persistence/yaml/YamlConfigurationExtension.class"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-34453",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `BitShuffle.shuffle` is called with external input to its 1st (`input`) argument."
          }
        },
        {
          "ruleId": "applic_CVE-2023-34454",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `Snappy.compress()` is called with external input to its 1st (`input`) argument."
          }
        },
        {
          "ruleId": "applic_CVE-2024-28752",
          "message": {
            "text": "The vulnerable class AegisDatabinding is instantiated"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///camunda/modules/system/layers/base/org/apache/cxf/impl/main/cxf-tools-java2ws-4.0.0.jar/org/apache/cxf/tools/java2wsdl/processor/internal/DefaultServiceBuilderFactory.class"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://jfrog.com/help/r/jfrog-security-documentation/jfrog-advanced-security",
          "name": "JFrog Secrets scanner",
          "rules": [
            {
              "id": "REQ.SECRET.GENERIC.TEXT",
              "name": "REQ.SECRET.GENERIC.TEXT",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.TEXT"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "REQ.SECRET.GENERIC.CODE",
              "name": "REQ.SECRET.GENERIC.CODE",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.CODE"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive"
              }
            },
            {
              "id": "REQ.SECRET.GENERIC.URL",
              "name": "REQ.SECRET.GENERIC.URL",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.URL"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive"
              }
            },
            {
              "id": "REQ.SECRET.KEYS",
              "name": "REQ.SECRET.KEYS",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.KEYS"
              },
              "fullDescription": {
                "text": "\nStoring an API key in the image could lead to several risks.\n\nIf the key is associated with a wide scope of privileges, attackers could extract it from a single image or firmware and use it maliciously to attack many targets. For example, if the embedded key allows querying/modifying data for all cloud user accounts, without per-user authentication, the attackers who extract it would gain access to system-wide data.\n\nIf the cloud/SaaS provider bills by key usage - for example, every million queries cost the key's owner a fixed sum of money - attackers could use the keys for their own purposes (or just as a form of vandalism), incurring a large cost to the legitimate user or operator.\n\n## Best practices\n\nUse narrow scopes for stored API keys. As much as possible, API keys should be unique per host and require additional authentication with the user's individual credentials for any sensitive actions.\n\nAvoid placing keys whose use incurs costs directly in the image. Store the key with any software or hardware protection available on the host for key storage (such as operating system key-stores, hardware cryptographic storage mechanisms or cloud-managed secure storage services such as [AWS KMS](https://aws.amazon.com/kms/)).\n\nTokens that were detected as exposed should be revoked and replaced -\n\n* [AWS Key Revocation](https://aws.amazon.com/premiumsupport/knowledge-center/delete-access-key/#:~:text=If%20you%20see%20a%20warning,the%20confirmation%20box%2C%20choose%20Deactivate.)\n* [GCP Key Revocation](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/CloudIAM/delete-api-keys.html)\n* [Azure Key Revocation](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops\u0026tabs=Windows#revoke-a-pat)\n* [GitHub Key Revocation](https://docs.github.com/en/rest/apps/oauth-applications#delete-an-app-authorization)\n",
                "markdown": "\nStoring an API key in the image could lead to several risks.\n\nIf the key is associated with a wide scope of privileges, attackers could extract it from a single image or firmware and use it maliciously to attack many targets. For example, if the embedded key allows querying/modifying data for all cloud user accounts, without per-user authentication, the attackers who extract it would gain access to system-wide data.\n\nIf the cloud/SaaS provider bills by key usage - for example, every million queries cost the key's owner a fixed sum of money - attackers could use the keys for their own purposes (or just as a form of vandalism), incurring a large cost to the legitimate user or operator.\n\n## Best practices\n\nUse narrow scopes for stored API keys. As much as possible, API keys should be unique per host and require additional authentication with the user's individual credentials for any sensitive actions.\n\nAvoid placing keys whose use incurs costs directly in the image. Store the key with any software or hardware protection available on the host for key storage (such as operating system key-stores, hardware cryptographic storage mechanisms or cloud-managed secure storage services such as [AWS KMS](https://aws.amazon.com/kms/)).\n\nTokens that were detected as exposed should be revoked and replaced -\n\n* [AWS Key Revocation](https://aws.amazon.com/premiumsupport/knowledge-center/delete-access-key/#:~:text=If%20you%20see%20a%20warning,the%20confirmation%20box%2C%20choose%20Deactivate.)\n* [GCP Key Revocation](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/CloudIAM/delete-api-keys.html)\n* [Azure Key Revocation](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops\u0026tabs=Windows#revoke-a-pat)\n* [GitHub Key Revocation](https://docs.github.com/en/rest/apps/oauth-applications#delete-an-app-authorization)\n"
              },
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private"
              }
            }
          ],
          "version": "1.0"
        }
      },
      "invocations": [
        {
          "arguments": [
            "/root/.jfrog/dependencies/analyzerManager/jas_scanner/jas_scanner",
            "scan",
            "/tmp/jfrog.cli.temp.-1718847230-1228231027/config.yaml"
          ],
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "/tmp/jfrog.cli.temp.-1718847088-787251149/image.tar"
          }
        }
      ],
      "results": [
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpzkqkzb0i/unpacked/filesystem/blobs/sha256/3b044fd19baf84e9fcb327a4f31777d32ecee8afb89f351c7e2abe03557eebda/camunda/bin/client/jboss-client.jar/auth_krb5.xml"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 21,
                  "endLine": 17,
                  "endColumn": 21,
                  "snippet": {
                    "text": "cli************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpzkqkzb0i/unpacked/filesystem/blobs/sha256/3b044fd19baf84e9fcb327a4f31777d32ecee8afb89f351c7e2abe03557eebda/camunda/bin/client/jboss-client.jar/jg-messages.properties"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 6,
                  "endLine": 168,
                  "endColumn": 6,
                  "snippet": {
                    "text": "ken************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpzkqkzb0i/unpacked/filesystem/blobs/sha256/3b044fd19baf84e9fcb327a4f31777d32ecee8afb89f351c7e2abe03557eebda/camunda/bin/client/jboss-client.jar/jg-messages.properties"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 0,
                  "endLine": 169,
                  "endColumn": 0,
                  "snippet": {
                    "text": "X50************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpzkqkzb0i/unpacked/filesystem/blobs/sha256/3b044fd19baf84e9fcb327a4f31777d32ecee8afb89f351c7e2abe03557eebda/camunda/modules/system/layers/base/jakarta/faces/impl/main/jakarta.faces-4.0.5.jar/com/sun/faces/metadata/taglib/faces.core.taglib.xml"
                },
                "region": {
                  "startLine": 2262,
                  "startColumn": 13,
                  "endLine": 2262,
                  "endColumn": 13,
                  "snippet": {
                    "text": "pas************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpzkqkzb0i/unpacked/filesystem/blobs/sha256/3b044fd19baf84e9fcb327a4f31777d32ecee8afb89f351c7e2abe03557eebda/camunda/modules/system/layers/base/jakarta/faces/impl/main/jakarta.faces-4.0.5.jar/com/sun/faces/metadata/taglib/faces.core.taglib.xml"
                },
                "region": {
                  "startLine": 2274,
                  "startColumn": 13,
                  "endLine": 2274,
                  "endColumn": 13,
                  "snippet": {
                    "text": "pas************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpzkqkzb0i/unpacked/filesystem/blobs/sha256/3b044fd19baf84e9fcb327a4f31777d32ecee8afb89f351c7e2abe03557eebda/camunda/modules/system/layers/base/org/apache/activemq/artemis/main/artemis-dto-2.31.2.jar/META-INF/maven/org.apache.activemq/artemis-dto/pom.xml"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 111,
                  "endLine": 120,
                  "endColumn": 111,
                  "snippet": {
                    "text": "tok************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpzkqkzb0i/unpacked/filesystem/blobs/sha256/3b044fd19baf84e9fcb327a4f31777d32ecee8afb89f351c7e2abe03557eebda/camunda/modules/system/layers/base/org/jgroups/main/jgroups-5.2.19.Final.jar/auth_krb5.xml"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 21,
                  "endLine": 17,
                  "endColumn": 21,
                  "snippet": {
                    "text": "cli************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpzkqkzb0i/unpacked/filesystem/blobs/sha256/3b044fd19baf84e9fcb327a4f31777d32ecee8afb89f351c7e2abe03557eebda/camunda/modules/system/layers/base/org/jgroups/main/jgroups-5.2.19.Final.jar/jg-messages.properties"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 6,
                  "endLine": 168,
                  "endColumn": 6,
                  "snippet": {
                    "text": "ken************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpzkqkzb0i/unpacked/filesystem/blobs/sha256/3b044fd19baf84e9fcb327a4f31777d32ecee8afb89f351c7e2abe03557eebda/camunda/modules/system/layers/base/org/jgroups/main/jgroups-5.2.19.Final.jar/jg-messages.properties"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 0,
                  "endLine": 169,
                  "endColumn": 0,
                  "snippet": {
                    "text": "X50************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpzkqkzb0i/unpacked/filesystem/blobs/sha256/3b044fd19baf84e9fcb327a4f31777d32ecee8afb89f351c7e2abe03557eebda/camunda/modules/system/layers/base/org/wildfly/security/elytron-base/main/wildfly-elytron-realm-token-2.2.3.Final.jar/org/wildfly/security/auth/realm/token/_private/ElytronMessages.i18n.properties"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 0,
                  "endLine": 12,
                  "endColumn": 0,
                  "snippet": {
                    "text": "tok************"
                  }
                }
              }
            }
          ]
        }
      ]
    }
  ]
}
