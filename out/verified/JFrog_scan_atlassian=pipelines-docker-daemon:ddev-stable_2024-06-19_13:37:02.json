{
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "informationUri": "https://docs.jfrog-applications.jfrog.io/jfrog-security-features/sca",
          "name": "JFrog Xray SCA",
          "rules": [
            {
              "id": "CVE-2023-24540_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2023-24540] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Not all valid JavaScript whitespace characters are considered to be whitespace. Templates containing whitespace characters outside of the character set \"\\t\\n\\f\\r\\u0020\\u2028\\u2029\" in JavaScript contexts that also contain actions may not be properly sanitized during execution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Applicable       | `sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `\u003cbr/\u003e`sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-1292_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2022-1292] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "The c_rehash script does not properly sanitise shell metacharacters to prevent command injection. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.3 (Affected 3.0.0,3.0.1,3.0.2). Fixed in OpenSSL 1.1.1o (Affected 1.1.1-1.1.1n). Fixed in OpenSSL 1.0.2ze (Affected 1.0.2-1.0.2zd).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.1.1o-r0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-23806_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2022-23806] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Curve.IsOnCurve in crypto/elliptic in Go before 1.16.14 and 1.17.x before 1.17.7 can incorrectly return true in situations with a big.Int value that is not a valid field element.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.1      | Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.16.14], [1.17.7]   |"
              },
              "properties": {
                "security-severity": "9.1"
              }
            },
            {
              "id": "CVE-2022-2068_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2022-2068] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "In addition to the c_rehash shell command injection identified in CVE-2022-1292, further circumstances where the c_rehash script does not properly sanitise shell metacharacters to prevent command injection were found by code review. When the CVE-2022-1292 was fixed it was not discovered that there are other places in the script where the file names of certificates being hashed were possibly passed to a command executed through the shell. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.4 (Affected 3.0.0,3.0.1,3.0.2,3.0.3). Fixed in OpenSSL 1.1.1p (Affected 1.1.1-1.1.1o). Fixed in OpenSSL 1.0.2zf (Affected 1.0.2-1.0.2ze).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Applicable       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [1.1.1p-r0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-24538_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2023-24538] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Templates do not properly consider backticks (`) as Javascript string delimiters, and do not escape them as expected. Backticks are used, since ES6, for JS template literals. If a template contains a Go template action within a Javascript template literal, the contents of the action can be used to terminate the literal, injecting arbitrary Javascript code into the Go template. As ES6 template literals are rather complex, and themselves can do string interpolation, the decision was made to simply disallow Go template actions from being used inside of them (e.g. \"var a = {{.}}\"), since there is no obviously safe way to allow this behavior. This takes the same approach as github.com/google/safehtml. With fix, Template.Parse returns an Error when it encounters templates like this, with an ErrorCode of value 12. This ErrorCode is currently unexported, but will be exported in the release of Go 1.21. Users who rely on the previous behavior can re-enable it using the GODEBUG flag jstmpllitinterp=1, with the caveat that backticks will now be escaped. This should be used with caution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-1292_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2022-1292] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "The c_rehash script does not properly sanitise shell metacharacters to prevent command injection. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.3 (Affected 3.0.0,3.0.1,3.0.2). Fixed in OpenSSL 1.1.1o (Affected 1.1.1-1.1.1n). Fixed in OpenSSL 1.0.2ze (Affected 1.0.2-1.0.2zd).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Applicable       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [1.1.1o-r0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-1292_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2022-1292] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "The c_rehash script does not properly sanitise shell metacharacters to prevent command injection. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.3 (Affected 3.0.0,3.0.1,3.0.2). Fixed in OpenSSL 1.1.1o (Affected 1.1.1-1.1.1n). Fixed in OpenSSL 1.0.2ze (Affected 1.0.2-1.0.2zd).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.1.1o-r0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-2068_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2022-2068] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "In addition to the c_rehash shell command injection identified in CVE-2022-1292, further circumstances where the c_rehash script does not properly sanitise shell metacharacters to prevent command injection were found by code review. When the CVE-2022-1292 was fixed it was not discovered that there are other places in the script where the file names of certificates being hashed were possibly passed to a command executed through the shell. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.4 (Affected 3.0.0,3.0.1,3.0.2,3.0.3). Fixed in OpenSSL 1.1.1p (Affected 1.1.1-1.1.1o). Fixed in OpenSSL 1.0.2zf (Affected 1.0.2-1.0.2ze).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.1.1p-r0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-2068_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2022-2068] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "In addition to the c_rehash shell command injection identified in CVE-2022-1292, further circumstances where the c_rehash script does not properly sanitise shell metacharacters to prevent command injection were found by code review. When the CVE-2022-1292 was fixed it was not discovered that there are other places in the script where the file names of certificates being hashed were possibly passed to a command executed through the shell. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.4 (Affected 3.0.0,3.0.1,3.0.2,3.0.3). Fixed in OpenSSL 1.1.1p (Affected 1.1.1-1.1.1o). Fixed in OpenSSL 1.0.2zf (Affected 1.0.2-1.0.2ze).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.1.1p-r0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-38408_3.13:openssh-keygen_8.4_p1-r2",
              "shortDescription": {
                "text": "[CVE-2023-38408] 3.13:openssh-keygen 8.4_p1-r2"
              },
              "help": {
                "text": "The PKCS#11 feature in ssh-agent in OpenSSH before 9.3p2 has an insufficiently trustworthy search path, leading to remote code execution if an agent is forwarded to an attacker-controlled system. (Code in /usr/lib is not necessarily safe for loading into ssh-agent.) NOTE: this issue exists because of an incomplete fix for CVE-2016-10009.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Undetermined       | `sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar `       | [9.1_p1-r4]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-38408_3.13:openssh-client_8.4_p1-r2",
              "shortDescription": {
                "text": "[CVE-2023-38408] 3.13:openssh-client 8.4_p1-r2"
              },
              "help": {
                "text": "The PKCS#11 feature in ssh-agent in OpenSSH before 9.3p2 has an insufficiently trustworthy search path, leading to remote code execution if an agent is forwarded to an attacker-controlled system. (Code in /usr/lib is not necessarily safe for loading into ssh-agent.) NOTE: this issue exists because of an incomplete fix for CVE-2016-10009.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Undetermined       | `sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar `       | [9.1_p1-r4]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2021-22945_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2021-22945] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "When sending data to an MQTT server, libcurl \u003c= 7.73.0 and 7.78.0 could in some circumstances erroneously keep a pointer to an already freed memory area and both use that again in a subsequent call to send data and also free it *again*.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.1      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.79.0-r0]   |"
              },
              "properties": {
                "security-severity": "9.1"
              }
            },
            {
              "id": "CVE-2022-48174_3.13:ssl_client_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2022-48174] 3.13:ssl_client 1.32.1-r3"
              },
              "help": {
                "text": "There is a stack overflow vulnerability in ash.c:6030 in busybox before 1.35. In the environment of Internet of Vehicles, this vulnerability can be executed from command to arbitrary code execution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.36.1-r2]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-48174_3.13:busybox_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2022-48174] 3.13:busybox 1.32.1-r3"
              },
              "help": {
                "text": "There is a stack overflow vulnerability in ash.c:6030 in busybox before 1.35. In the environment of Internet of Vehicles, this vulnerability can be executed from command to arbitrary code execution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.36.1-r2]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-32207_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-32207] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "When curl \u003c 7.84.0 saves cookies, alt-svc and hsts data to local files, it makes the operation atomic by finalizing the operation with a rename from a temporary name to the final target file name.In that rename operation, it might accidentally *widen* the permissions for the target file, leaving the updated file accessible to more users than intended.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.79.1-r2]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2021-36159_3.13:apk-tools_2.12.1-r0",
              "shortDescription": {
                "text": "[CVE-2021-36159] 3.13:apk-tools 2.12.1-r0"
              },
              "help": {
                "text": "libfetch before 2021-07-26, as used in apk-tools, xbps, and other products, mishandles numeric strings for the FTP and HTTP protocols. The FTP passive mode implementation allows an out-of-bounds read because strtol is used to parse the relevant numbers into address bytes. It does not check if the line ends prematurely. If it does, the for-loop condition checks for the '\\0' terminator one byte too late.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.1      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [2.12.6-r0]   |"
              },
              "properties": {
                "security-severity": "9.1"
              }
            },
            {
              "id": "CVE-2022-32207_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-32207] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "When curl \u003c 7.84.0 saves cookies, alt-svc and hsts data to local files, it makes the operation atomic by finalizing the operation with a rename from a temporary name to the final target file name.In that rename operation, it might accidentally *widen* the permissions for the target file, leaving the updated file accessible to more users than intended.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.79.1-r2]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2021-22945_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2021-22945] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "When sending data to an MQTT server, libcurl \u003c= 7.73.0 and 7.78.0 could in some circumstances erroneously keep a pointer to an already freed memory area and both use that again in a subsequent call to send data and also free it *again*.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.1      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.79.0-r0]   |"
              },
              "properties": {
                "security-severity": "9.1"
              }
            },
            {
              "id": "CVE-2022-32189_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2022-32189] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "A too-short encoded message can cause a panic in Float.GobDecode and Rat GobDecode in math/big in Go before 1.17.13 and 1.18.5, potentially allowing a denial of service.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.17.13], [1.18.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41725_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2022-41725] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "A denial of service is possible from excessive resource consumption in net/http and mime/multipart. Multipart form parsing with mime/multipart.Reader.ReadForm can consume largely unlimited amounts of memory and disk files. This also affects form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. ReadForm takes a maxMemory parameter, and is documented as storing \"up to maxMemory bytes +10MB (reserved for non-file parts) in memory\". File parts which cannot be stored in memory are stored on disk in temporary files. The unconfigurable 10MB reserved for non-file parts is excessively large and can potentially open a denial of service vector on its own. However, ReadForm did not properly account for all memory consumed by a parsed form, such as map entry overhead, part names, and MIME headers, permitting a maliciously crafted form to consume well over 10MB. In addition, ReadForm contained no limit on the number of disk files created, permitting a relatively small request body to create a large number of disk temporary files. With fix, ReadForm now properly accounts for various forms of memory overhead, and should now stay within its documented limit of 10MB + maxMemory bytes of memory consumption. Users should still be aware that this limit is high and may still be hazardous. In addition, ReadForm now creates at most one on-disk temporary file, combining multiple form parts into a single temporary file. The mime/multipart.File interface type's documentation states, \"If stored on disk, the File's underlying concrete type will be an *os.File.\". This is no longer the case when a form contains more than one file part, due to this coalescing of parts into a single file. The previous behavior of using distinct files for each form part may be reenabled with the environment variable GODEBUG=multipartfiles=distinct. Users should be aware that multipart.ReadForm and the http.Request methods that call it do not limit the amount of disk consumed by temporary ...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24534_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2023-24534] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "HTTP and MIME header parsing can allocate large amounts of memory, even when parsing small inputs, potentially leading to a denial of service. Certain unusual patterns of input data can cause the common function used to parse HTTP and MIME headers to allocate substantially more memory than required to hold the parsed headers. An attacker can exploit this behavior to cause an HTTP server to allocate large amounts of memory from a small request, potentially leading to memory exhaustion and a denial of service. With fix, header parsing now correctly allocates only the memory required to hold parsed headers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-39325_golang.org/x/net_0.0.0-20201224014010-6772e930b67b",
              "shortDescription": {
                "text": "[CVE-2023-39325] golang.org/x/net 0.0.0-20201224014010-6772e930b67b"
              },
              "help": {
                "text": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing. With the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection. This issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2. The default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-3602_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2022-3602] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "A buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed the malicious certificate or for the application to continue certificate verification despite failure to construct a path to a trusted issuer. An attacker can craft a malicious email address to overflow four attacker-controlled bytes on the stack. This buffer overflow could result in a crash (causing a denial of service) or potentially remote code execution. Many platforms implement stack overflow protections which would mitigate against the risk of remote code execution. The risk may be further mitigated based on stack layout for any given platform/compiler. Pre-announcements of CVE-2022-3602 described this issue as CRITICAL. Further analysis based on some of the mitigating factors described above have led this to be downgraded to HIGH. Users are still encouraged to upgrade to a new version as soon as possible. In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects. Fixed in OpenSSL 3.0.7 (Affected 3.0.0,3.0.1,3.0.2,3.0.3,3.0.4,3.0.5,3.0.6).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.0.7-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30632_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2022-30632] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Uncontrolled recursion in Glob in path/filepath before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a path containing a large number of path separators.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-28131_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2022-28131] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Uncontrolled recursion in Decoder.Skip in encoding/xml before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a deeply nested XML document.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-51767_3.13:openssh-keygen_8.4_p1-r2",
              "shortDescription": {
                "text": "[CVE-2023-51767] 3.13:openssh-keygen 8.4_p1-r2"
              },
              "help": {
                "text": "OpenSSH through 9.6, when common types of DRAM are used, might allow row hammer attacks (for authentication bypass) because the integer value of authenticated in mm_answer_authpassword does not resist flips of a single bit. NOTE: this is applicable to a certain threat model of attacker-victim co-location in which the attacker has user privileges.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.0      | Applicable       | `sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.0"
              }
            },
            {
              "id": "CVE-2022-24675_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2022-24675] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "encoding/pem in Go before 1.17.9 and 1.18.x before 1.18.1 has a Decode stack overflow via a large amount of PEM data.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.17.9], [1.18.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-33195_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2021-33195] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Go before 1.15.13 and 1.16.x before 1.16.5 has functions for DNS lookups that do not validate replies from DNS servers, and thus a return value may contain an unsafe injection (e.g., XSS) that does not conform to the RFC1035 format.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.3      | Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.15.13], [1.16.5]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2023-51767_3.13:openssh-client_8.4_p1-r2",
              "shortDescription": {
                "text": "[CVE-2023-51767] 3.13:openssh-client 8.4_p1-r2"
              },
              "help": {
                "text": "OpenSSH through 9.6, when common types of DRAM are used, might allow row hammer attacks (for authentication bypass) because the integer value of authenticated in mm_answer_authpassword does not resist flips of a single bit. NOTE: this is applicable to a certain threat model of attacker-victim co-location in which the attacker has user privileges.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.0      | Applicable       | `sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.0"
              }
            },
            {
              "id": "CVE-2021-39293_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2021-39293] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "In archive/zip in Go before 1.16.8 and 1.17.x before 1.17.1, a crafted archive header (falsely designating that many files are present) can cause a NewReader or OpenReader panic. NOTE: this issue exists because of an incomplete fix for CVE-2021-33196.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.16.8], [1.17.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-3602_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2022-3602] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "A buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed the malicious certificate or for the application to continue certificate verification despite failure to construct a path to a trusted issuer. An attacker can craft a malicious email address to overflow four attacker-controlled bytes on the stack. This buffer overflow could result in a crash (causing a denial of service) or potentially remote code execution. Many platforms implement stack overflow protections which would mitigate against the risk of remote code execution. The risk may be further mitigated based on stack layout for any given platform/compiler. Pre-announcements of CVE-2022-3602 described this issue as CRITICAL. Further analysis based on some of the mitigating factors described above have led this to be downgraded to HIGH. Users are still encouraged to upgrade to a new version as soon as possible. In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects. Fixed in OpenSSL 3.0.7 (Affected 3.0.0,3.0.1,3.0.2,3.0.3,3.0.4,3.0.5,3.0.6).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [3.0.7-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30635_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2022-30635] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Uncontrolled recursion in Decoder.Decode in encoding/gob before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a message which contains deeply nested structures.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `\u003cbr/\u003e`sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45287_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2023-45287] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Before Go 1.20, the RSA based TLS key exchanges used the math/big library, which is not constant time. RSA blinding was applied to prevent timing attacks, but analysis shows this may not have been fully effective. In particular it appears as if the removal of PKCS#1 padding may leak timing information, which in turn could be used to recover session key bits. In Go 1.20, the crypto/tls library switched to a fully constant time RSA implementation, which we do not believe exhibits any timing side channels.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.20.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-44487_3.13:nghttp2-libs_1.42.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-44487] 3.13:nghttp2-libs 1.42.0-r1"
              },
              "help": {
                "text": "The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [1.57.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-3786_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2022-3786] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "A buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed a malicious certificate or for an application to continue certificate verification despite failure to construct a path to a trusted issuer. An attacker can craft a malicious email address in a certificate to overflow an arbitrary number of bytes containing the `.' character (decimal 46) on the stack. This buffer overflow could result in a crash (causing a denial of service). In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.0.7-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-27664_golang.org/x/net_0.0.0-20201224014010-6772e930b67b",
              "shortDescription": {
                "text": "[CVE-2022-27664] golang.org/x/net 0.0.0-20201224014010-6772e930b67b"
              },
              "help": {
                "text": "In net/http in Go before 1.18.6 and 1.19.x before 1.19.1, attackers can cause a denial of service because an HTTP/2 connection can hang during closing if shutdown were preempted by a fatal error.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [0.0.0-20220906165146-f3363e06e74c]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-24921_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2022-24921] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "regexp.Compile in Go before 1.16.15 and 1.17.x before 1.17.8 allows stack exhaustion via a deeply nested expression.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.16.15], [1.17.8]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-33198_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2021-33198] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "In Go before 1.15.13 and 1.16.x before 1.16.5, there can be a panic for a large exponent to the math/big.Rat SetString or UnmarshalText method.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.15.13], [1.16.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-2879_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2022-2879] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Reader.Read does not set a limit on the maximum size of file headers. A maliciously crafted archive could cause Read to allocate unbounded amounts of memory, potentially causing resource exhaustion or panics. After fix, Reader.Read limits the maximum size of header blocks to 1 MiB.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.18.7], [1.19.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-33196_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2021-33196] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "In archive/zip in Go before 1.15.13 and 1.16.x before 1.16.5, a crafted file count (in an archive's header) can cause a NewReader or OpenReader panic.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.15.13], [1.16.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-44487_golang.org/x/net_0.0.0-20201224014010-6772e930b67b",
              "shortDescription": {
                "text": "[CVE-2023-44487] golang.org/x/net 0.0.0-20201224014010-6772e930b67b"
              },
              "help": {
                "text": "The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-23772_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2022-23772] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Rat.SetString in math/big in Go before 1.16.14 and 1.17.x before 1.17.7 has an overflow that can lead to Uncontrolled Memory Consumption.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.16.14], [1.17.7]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-29400_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2023-29400] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Templates containing actions in unquoted HTML attributes (e.g. \"attr={{.}}\") executed with empty input can result in output with unexpected results when parsed due to HTML normalization rules. This may allow injection of arbitrary attributes into tags.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.3      | Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2022-3786_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2022-3786] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "A buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed a malicious certificate or for an application to continue certificate verification despite failure to construct a path to a trusted issuer. An attacker can craft a malicious email address in a certificate to overflow an arbitrary number of bytes containing the `.' character (decimal 46) on the stack. This buffer overflow could result in a crash (causing a denial of service). In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.0.7-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30631_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2022-30631] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Uncontrolled recursion in Reader.Read in compress/gzip before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via an archive containing a large number of concatenated 0-length compressed files.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2024-21626_github.com/opencontainers/runc_1.0.0-rc93",
              "shortDescription": {
                "text": "[CVE-2024-21626] github.com/opencontainers/runc 1.0.0-rc93"
              },
              "help": {
                "text": "runc is a CLI tool for spawning and running containers on Linux according to the OCI specification. In runc 1.1.11 and earlier, due to an internal file descriptor leak, an attacker could cause a newly-spawned container process (from runc exec) to have a working directory in the host filesystem namespace, allowing for a container escape by giving access to the host filesystem (\"attack 2\"). The same attack could be used by a malicious image to allow a container process to gain access to the host filesystem through runc run (\"attack 1\"). Variants of attacks 1 and 2 could be also be used to overwrite semi-arbitrary host binaries, allowing for complete container escapes (\"attack 3a\" and \"attack 3b\"). runc 1.1.12 includes patches for this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.6      | Applicable       | `sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.1.12]   |"
              },
              "properties": {
                "security-severity": "8.6"
              }
            },
            {
              "id": "CVE-2022-30633_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2022-30633] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Uncontrolled recursion in Unmarshal in encoding/xml before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via unmarshalling an XML document into a Go struct which has a nested field that uses the 'any' field tag.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24539_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2023-24539] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Angle brackets (\u003c\u003e) are not considered dangerous characters when inserted into CSS contexts. Templates containing multiple actions separated by a '/' character can result in unexpectedly closing the CSS context and allowing for injection of unexpected HTML, if executed with untrusted input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.3      | Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2022-3602_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2022-3602] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "A buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed the malicious certificate or for the application to continue certificate verification despite failure to construct a path to a trusted issuer. An attacker can craft a malicious email address to overflow four attacker-controlled bytes on the stack. This buffer overflow could result in a crash (causing a denial of service) or potentially remote code execution. Many platforms implement stack overflow protections which would mitigate against the risk of remote code execution. The risk may be further mitigated based on stack layout for any given platform/compiler. Pre-announcements of CVE-2022-3602 described this issue as CRITICAL. Further analysis based on some of the mitigating factors described above have led this to be downgraded to HIGH. Users are still encouraged to upgrade to a new version as soon as possible. In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects. Fixed in OpenSSL 3.0.7 (Affected 3.0.0,3.0.1,3.0.2,3.0.3,3.0.4,3.0.5,3.0.6).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.0.7-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-27918_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2021-27918] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "encoding/xml in Go before 1.15.9 and 1.16.x before 1.16.1 has an infinite loop if a custom TokenReader (for xml.NewTokenDecoder) returns EOF in the middle of an element. This can occur in the Decode, DecodeElement, or Skip method.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.15.9], [1.16.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24536_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2023-24536] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Multipart form parsing can consume large amounts of CPU and memory when processing form inputs containing very large numbers of parts. This stems from several causes: 1. mime/multipart.Reader.ReadForm limits the total memory a parsed multipart form can consume. ReadForm can undercount the amount of memory consumed, leading it to accept larger inputs than intended. 2. Limiting total memory does not account for increased pressure on the garbage collector from large numbers of small allocations in forms with many parts. 3. ReadForm can allocate a large number of short-lived buffers, further increasing pressure on the garbage collector. The combination of these factors can permit an attacker to cause an program that parses multipart forms to consume large amounts of CPU and memory, potentially resulting in a denial of service. This affects programs that use mime/multipart.Reader.ReadForm, as well as form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. With fix, ReadForm now does a better job of estimating the memory consumption of parsed forms, and performs many fewer short-lived allocations. In addition, the fixed mime/multipart.Reader imposes the following limits on the size of parsed forms: 1. Forms parsed with ReadForm may contain no more than 1000 parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxparts=. 2. Form parts parsed with NextPart and NextRawPart may contain no more than 10,000 header fields. In addition, forms parsed with ReadForm may contain no more than 10,000 header fields across all parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxheaders=.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-28327_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2022-28327] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "The generic P-256 feature in crypto/elliptic in Go before 1.17.9 and 1.18.x before 1.18.1 allows a panic via long scalar input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.17.9], [1.18.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-3786_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2022-3786] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "A buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed a malicious certificate or for an application to continue certificate verification despite failure to construct a path to a trusted issuer. An attacker can craft a malicious email address in a certificate to overflow an arbitrary number of bytes containing the `.' character (decimal 46) on the stack. This buffer overflow could result in a crash (causing a denial of service). In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [3.0.7-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-27534_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-27534] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "A path traversal vulnerability exists in curl \u003c8.0.0 SFTP implementation causes the tilde (~) character to be wrongly replaced when used as a prefix in the first path element, in addition to its intended use as the first element to indicate a path relative to the user's home directory. Attackers can exploit this flaw to bypass filtering or execute arbitrary code by crafting a path like /~2/foo while accessing a server with a specific user.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.8      | Undetermined       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.0.0-r0]   |"
              },
              "properties": {
                "security-severity": "8.8"
              }
            },
            {
              "id": "CVE-2023-27534_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-27534] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "A path traversal vulnerability exists in curl \u003c8.0.0 SFTP implementation causes the tilde (~) character to be wrongly replaced when used as a prefix in the first path element, in addition to its intended use as the first element to indicate a path relative to the user's home directory. Attackers can exploit this flaw to bypass filtering or execute arbitrary code by crafting a path like /~2/foo while accessing a server with a specific user.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.8      | Undetermined       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.0.0-r0]   |"
              },
              "properties": {
                "security-severity": "8.8"
              }
            },
            {
              "id": "CVE-2006-5794_3.13:openssh-keygen_8.4_p1-r2",
              "shortDescription": {
                "text": "[CVE-2006-5794] 3.13:openssh-keygen 8.4_p1-r2"
              },
              "help": {
                "text": "Unspecified vulnerability in the sshd Privilege Separation Monitor in OpenSSH before 4.5 causes weaker verification that authentication has been successful, which might allow attackers to bypass authentication. NOTE: as of 20061108, it is believed that this issue is only exploitable by leveraging vulnerabilities in the unprivileged process, which are not known to exist.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2021-42386_3.13:busybox_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2021-42386] 3.13:busybox 1.32.1-r3"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the nvalloc function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.32.1-r7]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-42386_3.13:ssl_client_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2021-42386] 3.13:ssl_client 1.32.1-r3"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the nvalloc function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.32.1-r7]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2024-24557_github.com/docker/docker_20.10.4+incompatible",
              "shortDescription": {
                "text": "[CVE-2024-24557] github.com/docker/docker 20.10.4+incompatible"
              },
              "help": {
                "text": "Moby is an open-source project created by Docker to enable software containerization. The classic builder cache system is prone to cache poisoning if the image is built FROM scratch. Also, changes to some instructions (most important being HEALTHCHECK and ONBUILD) would not cause a cache miss. An attacker with the knowledge of the Dockerfile someone is using could poison their cache by making them pull a specially crafted image that would be considered as a valid cache candidate for some build steps. 23.0+ users are only affected if they explicitly opted out of Buildkit (DOCKER_BUILDKIT=0 environment variable) or are using the /build API endpoint. All users on versions older than 23.0 could be impacted. Image build API endpoint (/build) and ImageBuild function from github.com/docker/docker/client is also affected as it the uses classic builder by default. Patches are included in 24.0.9 and 25.0.2 releases.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [24.0.9], [25.0.2]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2000-1254_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2000-1254] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "crypto/rsa/rsa_gen.c in OpenSSL before 0.9.6 mishandles C bitwise-shift operations that exceed the size of an expression, which makes it easier for remote attackers to defeat cryptographic protection mechanisms by leveraging improper RSA key generation on 64-bit HP-UX platforms.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2003-0682_3.13:openssh-keygen_8.4_p1-r2",
              "shortDescription": {
                "text": "[CVE-2003-0682] 3.13:openssh-keygen 8.4_p1-r2"
              },
              "help": {
                "text": "\"Memory bugs\" in OpenSSH 3.7.1 and earlier, with unknown impact, a different set of vulnerabilities than CVE-2003-0693 and CVE-2003-0695.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2021-36222_3.13:krb5-libs_1.18.3-r1",
              "shortDescription": {
                "text": "[CVE-2021-36222] 3.13:krb5-libs 1.18.3-r1"
              },
              "help": {
                "text": "ec_verify in kdc/kdc_preauth_ec.c in the Key Distribution Center (KDC) in MIT Kerberos 5 (aka krb5) before 1.18.4 and 1.19.x before 1.19.2 allows remote attackers to cause a NULL pointer dereference and daemon crash. This occurs because a return value is not properly managed in a certain situation.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [1.18.4-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2003-0693_3.13:openssh-client_8.4_p1-r2",
              "shortDescription": {
                "text": "[CVE-2003-0693] 3.13:openssh-client 8.4_p1-r2"
              },
              "help": {
                "text": "A \"buffer management error\" in buffer_append_space of buffer.c for OpenSSH before 3.7 may allow remote attackers to execute arbitrary code by causing an incorrect amount of memory to be freed and corrupting the heap, a different vulnerability than CVE-2003-0695.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2013-20001_3.13:zfs_2.0.1-r0",
              "shortDescription": {
                "text": "[CVE-2013-20001] 3.13:zfs 2.0.1-r0"
              },
              "help": {
                "text": "An issue was discovered in OpenZFS through 2.0.3. When an NFS share is exported to IPv6 addresses via the sharenfs feature, there is a silent failure to parse the IPv6 address data, and access is allowed to everyone. IPv6 restrictions from the configuration are not applied.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2000-1254_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2000-1254] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "crypto/rsa/rsa_gen.c in OpenSSL before 0.9.6 mishandles C bitwise-shift operations that exceed the size of an expression, which makes it easier for remote attackers to defeat cryptographic protection mechanisms by leveraging improper RSA key generation on 64-bit HP-UX platforms.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-1304_3.13:e2fsprogs_1.45.7-r0",
              "shortDescription": {
                "text": "[CVE-2022-1304] 3.13:e2fsprogs 1.45.7-r0"
              },
              "help": {
                "text": "An out-of-bounds read/write vulnerability was found in e2fsprogs 1.46.5. This issue leads to a segmentation fault and possibly arbitrary code execution via a specially crafted filesystem.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [1.46.6-r0]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2022-42915_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-42915] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "curl before 7.86.0 has a double free. If curl is told to use an HTTP proxy for a transfer with a non-HTTP(S) URL, it sets up the connection to the remote server by issuing a CONNECT request to the proxy, and then tunnels the rest of the protocol through. An HTTP proxy might refuse this request (HTTP proxies often only allow outgoing connections to specific port numbers, like 443 for HTTPS) and instead return a non-200 status code to the client. Due to flaws in the error/cleanup handling, this could trigger a double free in curl if one of the following schemes were used in the URL for the transfer: dict, gopher, gophers, ldap, ldaps, rtmp, rtmps, or telnet. The earliest affected version is 7.77.0.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.86.0-r0]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2022-1304_3.13:libcom_err_1.45.7-r0",
              "shortDescription": {
                "text": "[CVE-2022-1304] 3.13:libcom_err 1.45.7-r0"
              },
              "help": {
                "text": "An out-of-bounds read/write vulnerability was found in e2fsprogs 1.46.5. This issue leads to a segmentation fault and possibly arbitrary code execution via a specially crafted filesystem.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [1.46.6-r0]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2003-0695_3.13:openssh-client_8.4_p1-r2",
              "shortDescription": {
                "text": "[CVE-2003-0695] 3.13:openssh-client 8.4_p1-r2"
              },
              "help": {
                "text": "Multiple \"buffer management errors\" in OpenSSH before 3.7.1 may allow attackers to cause a denial of service or execute arbitrary code using (1) buffer_init in buffer.c, (2) buffer_free in buffer.c, or (3) a separate function in channels.c, a different vulnerability than CVE-2003-0693.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2006-5051_3.13:openssh-client_8.4_p1-r2",
              "shortDescription": {
                "text": "[CVE-2006-5051] 3.13:openssh-client 8.4_p1-r2"
              },
              "help": {
                "text": "Signal handler race condition in OpenSSH before 4.4 allows remote attackers to cause a denial of service (crash), and possibly execute arbitrary code if GSSAPI authentication is enabled, via unspecified vectors that lead to a double-free.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Covered       | `sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2022-1304_3.13:e2fsprogs-libs_1.45.7-r0",
              "shortDescription": {
                "text": "[CVE-2022-1304] 3.13:e2fsprogs-libs 1.45.7-r0"
              },
              "help": {
                "text": "An out-of-bounds read/write vulnerability was found in e2fsprogs 1.46.5. This issue leads to a segmentation fault and possibly arbitrary code execution via a specially crafted filesystem.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [1.46.6-r0]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2022-29162_github.com/opencontainers/runc_1.0.0-rc93",
              "shortDescription": {
                "text": "[CVE-2022-29162] github.com/opencontainers/runc 1.0.0-rc93"
              },
              "help": {
                "text": "runc is a CLI tool for spawning and running containers on Linux according to the OCI specification. A bug was found in runc prior to version 1.1.2 where `runc exec --cap` created processes with non-empty inheritable Linux process capabilities, creating an atypical Linux environment and enabling programs with inheritable file capabilities to elevate those capabilities to the permitted set during execve(2). This bug did not affect the container security sandbox as the inheritable set never contained more capabilities than were included in the container's bounding set. This bug has been fixed in runc 1.1.2. This fix changes `runc exec --cap` behavior such that the additional capabilities granted to the process being executed (as specified via `--cap` arguments) do not include inheritable capabilities. In addition, `runc spec` is changed to not set any inheritable capabilities in the created example OCI spec (`config.json`) file.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.1.2]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2022-27775_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-27775] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "An information disclosure vulnerability exists in curl 7.65.0 to 7.82.0 are vulnerable that by using an IPv6 address that was in the connection pool but with a different zone id it could reuse a connection instead.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.79.1-r1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-22901_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2021-22901] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "curl 7.75.0 through 7.76.1 suffers from a use-after-free vulnerability resulting in already freed memory being used when a TLS 1.3 session ticket arrives over a connection. A malicious server can use this in rare unfortunate circumstances to potentially reach remote code execution in the client. When libcurl at run-time sets up support for TLS 1.3 session tickets on a connection using OpenSSL, it stores pointers to the transfer in-memory object for later retrieval when a session ticket arrives. If the connection is used by multiple transfers (like with a reused HTTP/1.1 connection or multiplexed HTTP/2 connection) that first transfer object might be freed before the new session is established on that connection and then the function will access a memory buffer that might be freed. When using that memory, libcurl might even call a function pointer in the object, making it possible for a remote code execution if the server could somehow manage to get crafted memory content into the correct place in memory.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.77.0-r0]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2021-3450_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2021-3450] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "The X509_V_FLAG_X509_STRICT flag enables additional security checks of the certificates present in a certificate chain. It is not set by default. Starting from OpenSSL version 1.1.1h a check to disallow certificates in the chain that have explicitly encoded elliptic curve parameters was added as an additional strict check. An error in the implementation of this check meant that the result of a previous check to confirm that certificates in the chain are valid CA certificates was overwritten. This effectively bypasses the check that non-CA certificates must not be able to issue other certificates. If a \"purpose\" has been configured then there is a subsequent opportunity for checks that the certificate is a valid CA. All of the named \"purpose\" values implemented in libcrypto perform this check. Therefore, where a purpose is set the certificate chain will still be rejected even when the strict flag has been used. A purpose is set by default in libssl client and server certificate verification routines, but it can be overridden or removed by an application. In order to be affected, an application must explicitly set the X509_V_FLAG_X509_STRICT verification flag and either not set a purpose for the certificate verification or, in the case of TLS client or server applications, override the default purpose. OpenSSL versions 1.1.1h and newer are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1k. OpenSSL 1.0.2 is not impacted by this issue. Fixed in OpenSSL 1.1.1k (Affected 1.1.1h-1.1.1j).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.4      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.1.1k-r0]   |"
              },
              "properties": {
                "security-severity": "7.4"
              }
            },
            {
              "id": "CVE-2003-0682_3.13:openssh-client_8.4_p1-r2",
              "shortDescription": {
                "text": "[CVE-2003-0682] 3.13:openssh-client 8.4_p1-r2"
              },
              "help": {
                "text": "\"Memory bugs\" in OpenSSH 3.7.1 and earlier, with unknown impact, a different set of vulnerabilities than CVE-2003-0693 and CVE-2003-0695.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2022-1304_3.13:e2fsprogs-extra_1.45.7-r0",
              "shortDescription": {
                "text": "[CVE-2022-1304] 3.13:e2fsprogs-extra 1.45.7-r0"
              },
              "help": {
                "text": "An out-of-bounds read/write vulnerability was found in e2fsprogs 1.46.5. This issue leads to a segmentation fault and possibly arbitrary code execution via a specially crafted filesystem.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [1.46.6-r0]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2022-30065_3.13:ssl_client_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2022-30065] 3.13:ssl_client 1.32.1-r3"
              },
              "help": {
                "text": "A use-after-free in Busybox 1.35-x's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the copyvar function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.32.1-r9]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2023-42915_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-42915] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "Multiple issues were addressed by updating to curl version 8.4.0. This issue is fixed in macOS Ventura 13.6.4, macOS Sonoma 14.2, macOS Monterey 12.7.3, iOS 16.7.5 and iPadOS 16.7.5. Multiple issues in curl.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2006-5794_3.13:openssh-client_8.4_p1-r2",
              "shortDescription": {
                "text": "[CVE-2006-5794] 3.13:openssh-client 8.4_p1-r2"
              },
              "help": {
                "text": "Unspecified vulnerability in the sshd Privilege Separation Monitor in OpenSSH before 4.5 causes weaker verification that authentication has been successful, which might allow attackers to bypass authentication. NOTE: as of 20061108, it is believed that this issue is only exploitable by leveraging vulnerabilities in the unprivileged process, which are not known to exist.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2022-1271_3.13:xz_5.2.5-r0",
              "shortDescription": {
                "text": "[CVE-2022-1271] 3.13:xz 5.2.5-r0"
              },
              "help": {
                "text": "An arbitrary file write vulnerability was found in GNU gzip's zgrep utility. When zgrep is applied on the attacker's chosen file name (for example, a crafted file name), this can overwrite an attacker's content to an arbitrary attacker-selected file. This flaw occurs due to insufficient validation when processing filenames with two or more newlines where selected content and the target file names are embedded in crafted multi-line file names. This flaw allows a remote, low privileged attacker to force zgrep to write arbitrary files on the system.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.8      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [5.2.5-r1]   |"
              },
              "properties": {
                "security-severity": "8.8"
              }
            },
            {
              "id": "CVE-2022-29458_3.13:ncurses-libs_6.2_p20210109-r0",
              "shortDescription": {
                "text": "[CVE-2022-29458] 3.13:ncurses-libs 6.2_p20210109-r0"
              },
              "help": {
                "text": "ncurses 6.3 before patch 20220416 has an out-of-bounds read and segmentation violation in convert_strings in tinfo/read_entry.c in the terminfo library.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.1      | Not Covered       | `sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar `       | [6.2_p20210109-r1]   |"
              },
              "properties": {
                "security-severity": "7.1"
              }
            },
            {
              "id": "CVE-2023-49298_3.13:zfs_2.0.1-r0",
              "shortDescription": {
                "text": "[CVE-2023-49298] 3.13:zfs 2.0.1-r0"
              },
              "help": {
                "text": "OpenZFS through 2.1.13 and 2.2.x through 2.2.1, in certain scenarios involving applications that try to rely on efficient copying of file data, can replace file contents with zero-valued bytes and thus potentially disable security mechanisms. NOTE: this issue is not always security related, but can be security related in realistic situations. A possible example is cp, from a recent GNU Core Utilities (coreutils) version, when attempting to preserve a rule set for denying unauthorized access. (One might use cp when configuring access control, such as with the /etc/hosts.deny file specified in the IBM Support reference.) NOTE: this issue occurs less often in version 2.2.1, and in versions before 2.1.4, because of the default configuration in those versions.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [2.2.1-r1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-27775_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-27775] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "An information disclosure vulnerability exists in curl 7.65.0 to 7.82.0 are vulnerable that by using an IPv6 address that was in the connection pool but with a different zone id it could reuse a connection instead.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.79.1-r1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-0778_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2022-0778] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "The BN_mod_sqrt() function, which computes a modular square root, contains a bug that can cause it to loop forever for non-prime moduli. Internally this function is used when parsing certificates that contain elliptic curve public keys in compressed form or explicit elliptic curve parameters with a base point encoded in compressed form. It is possible to trigger the infinite loop by crafting a certificate that has invalid explicit curve parameters. Since certificate parsing happens prior to verification of the certificate signature, any process that parses an externally supplied certificate may thus be subject to a denial of service attack. The infinite loop can also be reached when parsing crafted private keys as they can contain explicit elliptic curve parameters. Thus vulnerable situations include: - TLS clients consuming server certificates - TLS servers consuming client certificates - Hosting providers taking certificates or private keys from customers - Certificate authorities parsing certification requests from subscribers - Anything else which parses ASN.1 elliptic curve parameters Also any other applications that use the BN_mod_sqrt() where the attacker can control the parameter values are vulnerable to this DoS issue. In the OpenSSL 1.0.2 version the public key is not parsed during initial parsing of the certificate which makes it slightly harder to trigger the infinite loop. However any operation which requires the public key from the certificate will trigger the infinite loop. In particular the attacker can use a self-signed certificate to trigger the loop during verification of the certificate signature. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0. It was addressed in the releases of 1.1.1n and 3.0.2 on the 15th March 2022. Fixed in OpenSSL 3.0.2 (Affected 3.0.0,3.0.1). Fixed in OpenSSL 1.1.1n (Affected 1.1.1-1.1.1m). Fixed in OpenSSL 1.0.2zd (Affected 1.0.2-1.0.2zc).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.1.1n-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-42915_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-42915] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "Multiple issues were addressed by updating to curl version 8.4.0. This issue is fixed in macOS Ventura 13.6.4, macOS Sonoma 14.2, macOS Monterey 12.7.3, iOS 16.7.5 and iPadOS 16.7.5. Multiple issues in curl.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2021-42383_3.13:ssl_client_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2021-42383] 3.13:ssl_client 1.32.1-r3"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the evaluate function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.32.1-r7]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2013-20001_3.13:zfs-libs_2.0.1-r0",
              "shortDescription": {
                "text": "[CVE-2013-20001] 3.13:zfs-libs 2.0.1-r0"
              },
              "help": {
                "text": "An issue was discovered in OpenZFS through 2.0.3. When an NFS share is exported to IPv6 addresses via the sharenfs feature, there is a silent failure to parse the IPv6 address data, and access is allowed to everyone. IPv6 restrictions from the configuration are not applied.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2006-5051_3.13:openssh-keygen_8.4_p1-r2",
              "shortDescription": {
                "text": "[CVE-2006-5051] 3.13:openssh-keygen 8.4_p1-r2"
              },
              "help": {
                "text": "Signal handler race condition in OpenSSH before 4.4 allows remote attackers to cause a denial of service (crash), and possibly execute arbitrary code if GSSAPI authentication is enabled, via unspecified vectors that lead to a double-free.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Covered       | `sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2022-42915_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-42915] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "curl before 7.86.0 has a double free. If curl is told to use an HTTP proxy for a transfer with a non-HTTP(S) URL, it sets up the connection to the remote server by issuing a CONNECT request to the proxy, and then tunnels the rest of the protocol through. An HTTP proxy might refuse this request (HTTP proxies often only allow outgoing connections to specific port numbers, like 443 for HTTPS) and instead return a non-200 status code to the client. Due to flaws in the error/cleanup handling, this could trigger a double free in curl if one of the following schemes were used in the URL for the transfer: dict, gopher, gophers, ldap, ldaps, rtmp, rtmps, or telnet. The earliest affected version is 7.77.0.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.86.0-r0]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2000-1254_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2000-1254] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "crypto/rsa/rsa_gen.c in OpenSSL before 0.9.6 mishandles C bitwise-shift operations that exceed the size of an expression, which makes it easier for remote attackers to defeat cryptographic protection mechanisms by leveraging improper RSA key generation on 64-bit HP-UX platforms.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2003-0693_3.13:openssh-keygen_8.4_p1-r2",
              "shortDescription": {
                "text": "[CVE-2003-0693] 3.13:openssh-keygen 8.4_p1-r2"
              },
              "help": {
                "text": "A \"buffer management error\" in buffer_append_space of buffer.c for OpenSSH before 3.7 may allow remote attackers to execute arbitrary code by causing an incorrect amount of memory to be freed and corrupting the heap, a different vulnerability than CVE-2003-0695.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2021-42384_3.13:busybox_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2021-42384] 3.13:busybox 1.32.1-r3"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the handle_special function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.32.1-r7]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-42379_3.13:busybox_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2021-42379] 3.13:busybox 1.32.1-r3"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the next_input_file function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.32.1-r7]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-30139_3.13:apk-tools_2.12.1-r0",
              "shortDescription": {
                "text": "[CVE-2021-30139] 3.13:apk-tools 2.12.1-r0"
              },
              "help": {
                "text": "In Alpine Linux apk-tools before 2.12.5, the tarball parser allows a buffer overflow and crash.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [2.12.5-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-42385_3.13:ssl_client_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2021-42385] 3.13:ssl_client 1.32.1-r3"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the evaluate function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.32.1-r7]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2023-28642_github.com/opencontainers/runc_1.0.0-rc93",
              "shortDescription": {
                "text": "[CVE-2023-28642] github.com/opencontainers/runc 1.0.0-rc93"
              },
              "help": {
                "text": "runc is a CLI tool for spawning and running containers according to the OCI specification. It was found that AppArmor can be bypassed when `/proc` inside the container is symlinked with a specific mount configuration. This issue has been fixed in runc version 1.1.5, by prohibiting symlinked `/proc`. See PR #3785 for details. users are advised to upgrade. Users unable to upgrade should avoid using an untrusted container image.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.1.5]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2022-27780_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-27780] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "The curl URL parser wrongly accepts percent-encoded URL separators like '/'when decoding the host name part of a URL, making it a *different* URL usingthe wrong host name when it is later retrieved.For example, a URL like `http://example.com%2F127.0.0.1/`, would be allowed bythe parser and get transposed into `http://example.com/127.0.0.1/`. This flawcan be used to circumvent filters, checks and more.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.83.1-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-28319_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-28319] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "A use after free vulnerability exists in curl \u003cv8.1.0 in the way libcurl offers a feature to verify an SSH server's public key using a SHA 256 hash. When this check fails, libcurl would free the memory for the fingerprint before it returns an error message containing the (now freed) hash. This flaw risks inserting sensitive heap-based data into the error message that might be shown to users or otherwise get leaked and revealed.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.1.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-42384_3.13:ssl_client_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2021-42384] 3.13:ssl_client 1.32.1-r3"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the handle_special function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.32.1-r7]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-42380_3.13:ssl_client_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2021-42380] 3.13:ssl_client 1.32.1-r3"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the clrvar function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.32.1-r7]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2023-28319_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-28319] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "A use after free vulnerability exists in curl \u003cv8.1.0 in the way libcurl offers a feature to verify an SSH server's public key using a SHA 256 hash. When this check fails, libcurl would free the memory for the fingerprint before it returns an error message containing the (now freed) hash. This flaw risks inserting sensitive heap-based data into the error message that might be shown to users or otherwise get leaked and revealed.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.1.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-42383_3.13:busybox_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2021-42383] 3.13:busybox 1.32.1-r3"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the evaluate function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.32.1-r7]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-22901_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2021-22901] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "curl 7.75.0 through 7.76.1 suffers from a use-after-free vulnerability resulting in already freed memory being used when a TLS 1.3 session ticket arrives over a connection. A malicious server can use this in rare unfortunate circumstances to potentially reach remote code execution in the client. When libcurl at run-time sets up support for TLS 1.3 session tickets on a connection using OpenSSL, it stores pointers to the transfer in-memory object for later retrieval when a session ticket arrives. If the connection is used by multiple transfers (like with a reused HTTP/1.1 connection or multiplexed HTTP/2 connection) that first transfer object might be freed before the new session is established on that connection and then the function will access a memory buffer that might be freed. When using that memory, libcurl might even call a function pointer in the object, making it possible for a remote code execution if the server could somehow manage to get crafted memory content into the correct place in memory.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.77.0-r0]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2021-42382_3.13:busybox_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2021-42382] 3.13:busybox 1.32.1-r3"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the getvar_s function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.32.1-r7]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-46828_3.13:libtirpc_1.3.1-r0",
              "shortDescription": {
                "text": "[CVE-2021-46828] 3.13:libtirpc 1.3.1-r0"
              },
              "help": {
                "text": "In libtirpc before 1.3.3rc1, remote attackers could exhaust the file descriptors of a process that uses libtirpc because idle TCP connections are mishandled. This can, in turn, lead to an svc_run infinite loop without accepting new connections.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [1.3.1-r1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-27780_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-27780] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "The curl URL parser wrongly accepts percent-encoded URL separators like '/'when decoding the host name part of a URL, making it a *different* URL usingthe wrong host name when it is later retrieved.For example, a URL like `http://example.com%2F127.0.0.1/`, would be allowed bythe parser and get transposed into `http://example.com/127.0.0.1/`. This flawcan be used to circumvent filters, checks and more.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.83.1-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-28391_3.13:busybox_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2022-28391] 3.13:busybox 1.32.1-r3"
              },
              "help": {
                "text": "BusyBox through 1.35.0 allows remote attackers to execute arbitrary code if netstat is used to print a DNS PTR record's value to a VT compatible terminal. Alternatively, the attacker could choose to change the terminal's colors.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.8      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.32.1-r8]   |"
              },
              "properties": {
                "security-severity": "8.8"
              }
            },
            {
              "id": "CVE-2021-42378_3.13:ssl_client_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2021-42378] 3.13:ssl_client 1.32.1-r3"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the getvar_i function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.32.1-r7]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2020-28366_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2020-28366] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Code injection in the go command with cgo before Go 1.14.12 and Go 1.15.5 allows arbitrary code execution at build time via a malicious unquoted symbol name in a linked object file.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.14.12], [1.15.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-42380_3.13:busybox_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2021-42380] 3.13:busybox 1.32.1-r3"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the clrvar function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.32.1-r7]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2023-38039_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-38039] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "When curl retrieves an HTTP response, it stores the incoming headers so that\nthey can be accessed later via the libcurl headers API.\n\nHowever, curl did not have a limit in how many or how large headers it would\naccept in a response, allowing a malicious server to stream an endless series\nof headers and eventually cause curl to run out of heap memory.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.3.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-42378_3.13:busybox_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2021-42378] 3.13:busybox 1.32.1-r3"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the getvar_i function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.32.1-r7]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-28831_3.13:ssl_client_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2021-28831] 3.13:ssl_client 1.32.1-r3"
              },
              "help": {
                "text": "decompress_gunzip.c in BusyBox through 1.32.1 mishandles the error bit on the huft_build result pointer, with a resultant invalid free or segmentation fault, via malformed gzip data.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.32.1-r4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-49298_3.13:zfs-libs_2.0.1-r0",
              "shortDescription": {
                "text": "[CVE-2023-49298] 3.13:zfs-libs 2.0.1-r0"
              },
              "help": {
                "text": "OpenZFS through 2.1.13 and 2.2.x through 2.2.1, in certain scenarios involving applications that try to rely on efficient copying of file data, can replace file contents with zero-valued bytes and thus potentially disable security mechanisms. NOTE: this issue is not always security related, but can be security related in realistic situations. A possible example is cp, from a recent GNU Core Utilities (coreutils) version, when attempting to preserve a rule set for denying unauthorized access. (One might use cp when configuring access control, such as with the /etc/hosts.deny file specified in the IBM Support reference.) NOTE: this issue occurs less often in version 2.2.1, and in versions before 2.1.4, because of the default configuration in those versions.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [2.2.1-r1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2020-28367_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2020-28367] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Code injection in the go command with cgo before Go 1.14.12 and Go 1.15.5 allows arbitrary code execution at build time via malicious gcc flags specified via a #cgo directive.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.14.12], [1.15.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-29458_3.13:ncurses-terminfo-base_6.2_p20210109-r0",
              "shortDescription": {
                "text": "[CVE-2022-29458] 3.13:ncurses-terminfo-base 6.2_p20210109-r0"
              },
              "help": {
                "text": "ncurses 6.3 before patch 20220416 has an out-of-bounds read and segmentation violation in convert_strings in tinfo/read_entry.c in the terminfo library.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.1      | Not Covered       | `sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar `       | [6.2_p20210109-r1]   |"
              },
              "properties": {
                "security-severity": "7.1"
              }
            },
            {
              "id": "CVE-2021-46828_3.13:libtirpc-conf_1.3.1-r0",
              "shortDescription": {
                "text": "[CVE-2021-46828] 3.13:libtirpc-conf 1.3.1-r0"
              },
              "help": {
                "text": "In libtirpc before 1.3.3rc1, remote attackers could exhaust the file descriptors of a process that uses libtirpc because idle TCP connections are mishandled. This can, in turn, lead to an svc_run infinite loop without accepting new connections.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [1.3.1-r1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-38039_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-38039] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "When curl retrieves an HTTP response, it stores the incoming headers so that\nthey can be accessed later via the libcurl headers API.\n\nHowever, curl did not have a limit in how many or how large headers it would\naccept in a response, allowing a malicious server to stream an endless series\nof headers and eventually cause curl to run out of heap memory.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.3.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-42385_3.13:busybox_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2021-42385] 3.13:busybox 1.32.1-r3"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the evaluate function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.32.1-r7]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-42379_3.13:ssl_client_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2021-42379] 3.13:ssl_client 1.32.1-r3"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the next_input_file function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.32.1-r7]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2022-28391_3.13:ssl_client_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2022-28391] 3.13:ssl_client 1.32.1-r3"
              },
              "help": {
                "text": "BusyBox through 1.35.0 allows remote attackers to execute arbitrary code if netstat is used to print a DNS PTR record's value to a VT compatible terminal. Alternatively, the attacker could choose to change the terminal's colors.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.8      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.32.1-r8]   |"
              },
              "properties": {
                "security-severity": "8.8"
              }
            },
            {
              "id": "CVE-2021-3450_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2021-3450] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "The X509_V_FLAG_X509_STRICT flag enables additional security checks of the certificates present in a certificate chain. It is not set by default. Starting from OpenSSL version 1.1.1h a check to disallow certificates in the chain that have explicitly encoded elliptic curve parameters was added as an additional strict check. An error in the implementation of this check meant that the result of a previous check to confirm that certificates in the chain are valid CA certificates was overwritten. This effectively bypasses the check that non-CA certificates must not be able to issue other certificates. If a \"purpose\" has been configured then there is a subsequent opportunity for checks that the certificate is a valid CA. All of the named \"purpose\" values implemented in libcrypto perform this check. Therefore, where a purpose is set the certificate chain will still be rejected even when the strict flag has been used. A purpose is set by default in libssl client and server certificate verification routines, but it can be overridden or removed by an application. In order to be affected, an application must explicitly set the X509_V_FLAG_X509_STRICT verification flag and either not set a purpose for the certificate verification or, in the case of TLS client or server applications, override the default purpose. OpenSSL versions 1.1.1h and newer are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1k. OpenSSL 1.0.2 is not impacted by this issue. Fixed in OpenSSL 1.1.1k (Affected 1.1.1h-1.1.1j).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.4      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [1.1.1k-r0]   |"
              },
              "properties": {
                "security-severity": "7.4"
              }
            },
            {
              "id": "CVE-2022-0778_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2022-0778] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "The BN_mod_sqrt() function, which computes a modular square root, contains a bug that can cause it to loop forever for non-prime moduli. Internally this function is used when parsing certificates that contain elliptic curve public keys in compressed form or explicit elliptic curve parameters with a base point encoded in compressed form. It is possible to trigger the infinite loop by crafting a certificate that has invalid explicit curve parameters. Since certificate parsing happens prior to verification of the certificate signature, any process that parses an externally supplied certificate may thus be subject to a denial of service attack. The infinite loop can also be reached when parsing crafted private keys as they can contain explicit elliptic curve parameters. Thus vulnerable situations include: - TLS clients consuming server certificates - TLS servers consuming client certificates - Hosting providers taking certificates or private keys from customers - Certificate authorities parsing certification requests from subscribers - Anything else which parses ASN.1 elliptic curve parameters Also any other applications that use the BN_mod_sqrt() where the attacker can control the parameter values are vulnerable to this DoS issue. In the OpenSSL 1.0.2 version the public key is not parsed during initial parsing of the certificate which makes it slightly harder to trigger the infinite loop. However any operation which requires the public key from the certificate will trigger the infinite loop. In particular the attacker can use a self-signed certificate to trigger the loop during verification of the certificate signature. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0. It was addressed in the releases of 1.1.1n and 3.0.2 on the 15th March 2022. Fixed in OpenSSL 3.0.2 (Affected 3.0.0,3.0.1). Fixed in OpenSSL 1.1.1n (Affected 1.1.1-1.1.1m). Fixed in OpenSSL 1.0.2zd (Affected 1.0.2-1.0.2zc).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [1.1.1n-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-28840_github.com/docker/docker_20.10.4+incompatible",
              "shortDescription": {
                "text": "[CVE-2023-28840] github.com/docker/docker 20.10.4+incompatible"
              },
              "help": {
                "text": "Moby is an open source container framework developed by Docker Inc. that is distributed as Docker, Mirantis Container Runtime, and various other downstream projects/products. The Moby daemon component (`dockerd`), which is developed as moby/moby, is commonly referred to as *Docker*.\n\nSwarm Mode, which is compiled in and delivered by default in dockerd and is thus present in most major Moby downstreams, is a simple, built-in container orchestrator that is implemented through a combination of SwarmKit and supporting network code.\n\nThe overlay network driver is a core feature of Swarm Mode, providing isolated virtual LANs that allow communication between containers and services across the cluster. This driver is an implementation/user of VXLAN, which encapsulates link-layer (Ethernet) frames in UDP datagrams that tag the frame with a VXLAN Network ID (VNI) that identifies the originating overlay network. In addition, the overlay network driver supports an optional, off-by-default encrypted mode, which is especially useful when VXLAN packets traverses an untrusted network between nodes.\n\nEncrypted overlay networks function by encapsulating the VXLAN datagrams through the use of the IPsec Encapsulating Security Payload protocol in Transport mode. By deploying IPSec encapsulation, encrypted overlay networks gain the additional properties of source authentication through cryptographic proof, data integrity through check-summing, and confidentiality through encryption.\n\nWhen setting an endpoint up on an encrypted overlay network, Moby installs three iptables (Linux kernel firewall) rules that enforce both incoming and outgoing IPSec. These rules rely on the u32 iptables extension provided by the xt_u32 kernel module to directly filter on a VXLAN packet's VNI field, so that IPSec guarantees can be enforced on encrypted overlay networks without interfering with other overlay networks or other users of VXLAN.\n\nTwo iptables rules serve to filter incoming VXLAN datagrams with a VNI that corresponds to an encrypted net...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.7      | Not Covered       | `sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [20.10.24], [23.0.3]   |"
              },
              "properties": {
                "security-severity": "8.7"
              }
            },
            {
              "id": "CVE-2021-42381_3.13:ssl_client_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2021-42381] 3.13:ssl_client 1.32.1-r3"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the hash_init function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.32.1-r7]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2003-0695_3.13:openssh-keygen_8.4_p1-r2",
              "shortDescription": {
                "text": "[CVE-2003-0695] 3.13:openssh-keygen 8.4_p1-r2"
              },
              "help": {
                "text": "Multiple \"buffer management errors\" in OpenSSH before 3.7.1 may allow attackers to cause a denial of service or execute arbitrary code using (1) buffer_init in buffer.c, (2) buffer_free in buffer.c, or (3) a separate function in channels.c, a different vulnerability than CVE-2003-0693.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2021-3450_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2021-3450] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "The X509_V_FLAG_X509_STRICT flag enables additional security checks of the certificates present in a certificate chain. It is not set by default. Starting from OpenSSL version 1.1.1h a check to disallow certificates in the chain that have explicitly encoded elliptic curve parameters was added as an additional strict check. An error in the implementation of this check meant that the result of a previous check to confirm that certificates in the chain are valid CA certificates was overwritten. This effectively bypasses the check that non-CA certificates must not be able to issue other certificates. If a \"purpose\" has been configured then there is a subsequent opportunity for checks that the certificate is a valid CA. All of the named \"purpose\" values implemented in libcrypto perform this check. Therefore, where a purpose is set the certificate chain will still be rejected even when the strict flag has been used. A purpose is set by default in libssl client and server certificate verification routines, but it can be overridden or removed by an application. In order to be affected, an application must explicitly set the X509_V_FLAG_X509_STRICT verification flag and either not set a purpose for the certificate verification or, in the case of TLS client or server applications, override the default purpose. OpenSSL versions 1.1.1h and newer are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1k. OpenSSL 1.0.2 is not impacted by this issue. Fixed in OpenSSL 1.1.1k (Affected 1.1.1h-1.1.1j).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.4      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.1.1k-r0]   |"
              },
              "properties": {
                "security-severity": "7.4"
              }
            },
            {
              "id": "CVE-2021-42381_3.13:busybox_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2021-42381] 3.13:busybox 1.32.1-r3"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the hash_init function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.32.1-r7]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2022-0778_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2022-0778] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "The BN_mod_sqrt() function, which computes a modular square root, contains a bug that can cause it to loop forever for non-prime moduli. Internally this function is used when parsing certificates that contain elliptic curve public keys in compressed form or explicit elliptic curve parameters with a base point encoded in compressed form. It is possible to trigger the infinite loop by crafting a certificate that has invalid explicit curve parameters. Since certificate parsing happens prior to verification of the certificate signature, any process that parses an externally supplied certificate may thus be subject to a denial of service attack. The infinite loop can also be reached when parsing crafted private keys as they can contain explicit elliptic curve parameters. Thus vulnerable situations include: - TLS clients consuming server certificates - TLS servers consuming client certificates - Hosting providers taking certificates or private keys from customers - Certificate authorities parsing certification requests from subscribers - Anything else which parses ASN.1 elliptic curve parameters Also any other applications that use the BN_mod_sqrt() where the attacker can control the parameter values are vulnerable to this DoS issue. In the OpenSSL 1.0.2 version the public key is not parsed during initial parsing of the certificate which makes it slightly harder to trigger the infinite loop. However any operation which requires the public key from the certificate will trigger the infinite loop. In particular the attacker can use a self-signed certificate to trigger the loop during verification of the certificate signature. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0. It was addressed in the releases of 1.1.1n and 3.0.2 on the 15th March 2022. Fixed in OpenSSL 3.0.2 (Affected 3.0.0,3.0.1). Fixed in OpenSSL 1.1.1n (Affected 1.1.1-1.1.1m). Fixed in OpenSSL 1.0.2zd (Affected 1.0.2-1.0.2zc).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.1.1n-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-42382_3.13:ssl_client_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2021-42382] 3.13:ssl_client 1.32.1-r3"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the getvar_s function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.32.1-r7]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2022-30065_3.13:busybox_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2022-30065] 3.13:busybox 1.32.1-r3"
              },
              "help": {
                "text": "A use-after-free in Busybox 1.35-x's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the copyvar function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.32.1-r9]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2022-1271_3.13:xz-libs_5.2.5-r0",
              "shortDescription": {
                "text": "[CVE-2022-1271] 3.13:xz-libs 5.2.5-r0"
              },
              "help": {
                "text": "An arbitrary file write vulnerability was found in GNU gzip's zgrep utility. When zgrep is applied on the attacker's chosen file name (for example, a crafted file name), this can overwrite an attacker's content to an arbitrary attacker-selected file. This flaw occurs due to insufficient validation when processing filenames with two or more newlines where selected content and the target file names are embedded in crafted multi-line file names. This flaw allows a remote, low privileged attacker to force zgrep to write arbitrary files on the system.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.8      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [5.2.5-r1]   |"
              },
              "properties": {
                "security-severity": "8.8"
              }
            },
            {
              "id": "CVE-2021-30465_github.com/opencontainers/runc_1.0.0-rc93",
              "shortDescription": {
                "text": "[CVE-2021-30465] github.com/opencontainers/runc 1.0.0-rc93"
              },
              "help": {
                "text": "runc before 1.0.0-rc95 allows a Container Filesystem Breakout via Directory Traversal. To exploit the vulnerability, an attacker must be able to create multiple containers with a fairly specific mount configuration. The problem occurs via a symlink-exchange attack that relies on a race condition.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.5      | Not Covered       | `sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.0.0-rc95]   |"
              },
              "properties": {
                "security-severity": "8.5"
              }
            },
            {
              "id": "CVE-2021-28831_3.13:busybox_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2021-28831] 3.13:busybox 1.32.1-r3"
              },
              "help": {
                "text": "decompress_gunzip.c in BusyBox through 1.32.1 mishandles the error bit on the huft_build result pointer, with a resultant invalid free or segmentation fault, via malformed gzip data.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.32.1-r4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-48795_3.13:openssh-client_8.4_p1-r2",
              "shortDescription": {
                "text": "[CVE-2023-48795] 3.13:openssh-client 8.4_p1-r2"
              },
              "help": {
                "text": "The SSH transport protocol with certain OpenSSH extensions, found in OpenSSH before 9.6 and other products, allows remote attackers to bypass integrity checks such that some packets are omitted (from the extension negotiation message), and a client and server may consequently end up with a connection for which some security features have been downgraded or disabled, aka a Terrapin attack. This occurs because the SSH Binary Packet Protocol (BPP), implemented by these extensions, mishandles the handshake phase and mishandles use of sequence numbers. For example, there is an effective attack against SSH's use of ChaCha20-Poly1305 (and CBC with Encrypt-then-MAC). The bypass occurs in chacha20-poly1305@openssh.com and (if CBC is used) the -etm@openssh.com MAC algorithms. This also affects Maverick Synergy Java SSH API before 3.1.0-SNAPSHOT, Dropbear through 2022.83, Ssh before 5.1.1 in Erlang/OTP, PuTTY before 0.80, AsyncSSH before 2.14.2, golang.org/x/crypto before 0.17.0, libssh before 0.10.6, libssh2 through 1.11.0, Thorn Tech SFTP Gateway before 3.4.6, Tera Term before 5.1, Paramiko before 3.4.0, jsch before 0.2.15, SFTPGo before 2.5.6, Netgate pfSense Plus through 23.09.1, Netgate pfSense CE through 2.7.2, HPN-SSH through 18.2.0, ProFTPD before 1.3.8b (and before 1.3.9rc2), ORYX CycloneSSH before 2.3.4, NetSarang XShell 7 before Build 0144, CrushFTP before 10.6.0, ConnectBot SSH library before 2.2.22, Apache MINA sshd through 2.11.0, sshj through 0.37.0, TinySSH through 20230101, trilead-ssh2 6401, LANCOM LCOS and LANconfig, FileZilla before 3.66.4, Nova before 11.8, PKIX-SSH before 14.4, SecureCRT before 9.4.3, Transmit5 before 5.10.4, Win32-OpenSSH before 9.5.0.0p1-Beta, WinSCP before 6.2.2, Bitvise SSH Server before 9.32, Bitvise SSH Client before 9.33, KiTTY through 0.76.1.13, the net-ssh gem 7.2.0 for Ruby, the mscdex ssh2 module before 1.15.0 for Node.js, the thrussh library before 0.35.1 for Rust, and the Russh crate before 0.40.2 for Rust.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Applicable       | `sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar `       | [9.6_p1-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2021-44717_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2021-44717] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Go before 1.16.12 and 1.17.x before 1.17.5 on UNIX allows write operations to an unintended file or unintended network connection as a consequence of erroneous closing of file descriptor 0 after file-descriptor exhaustion.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.8      | Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.16.12], [1.17.5]   |"
              },
              "properties": {
                "security-severity": "4.8"
              }
            },
            {
              "id": "CVE-2023-48795_3.13:openssh-keygen_8.4_p1-r2",
              "shortDescription": {
                "text": "[CVE-2023-48795] 3.13:openssh-keygen 8.4_p1-r2"
              },
              "help": {
                "text": "The SSH transport protocol with certain OpenSSH extensions, found in OpenSSH before 9.6 and other products, allows remote attackers to bypass integrity checks such that some packets are omitted (from the extension negotiation message), and a client and server may consequently end up with a connection for which some security features have been downgraded or disabled, aka a Terrapin attack. This occurs because the SSH Binary Packet Protocol (BPP), implemented by these extensions, mishandles the handshake phase and mishandles use of sequence numbers. For example, there is an effective attack against SSH's use of ChaCha20-Poly1305 (and CBC with Encrypt-then-MAC). The bypass occurs in chacha20-poly1305@openssh.com and (if CBC is used) the -etm@openssh.com MAC algorithms. This also affects Maverick Synergy Java SSH API before 3.1.0-SNAPSHOT, Dropbear through 2022.83, Ssh before 5.1.1 in Erlang/OTP, PuTTY before 0.80, AsyncSSH before 2.14.2, golang.org/x/crypto before 0.17.0, libssh before 0.10.6, libssh2 through 1.11.0, Thorn Tech SFTP Gateway before 3.4.6, Tera Term before 5.1, Paramiko before 3.4.0, jsch before 0.2.15, SFTPGo before 2.5.6, Netgate pfSense Plus through 23.09.1, Netgate pfSense CE through 2.7.2, HPN-SSH through 18.2.0, ProFTPD before 1.3.8b (and before 1.3.9rc2), ORYX CycloneSSH before 2.3.4, NetSarang XShell 7 before Build 0144, CrushFTP before 10.6.0, ConnectBot SSH library before 2.2.22, Apache MINA sshd through 2.11.0, sshj through 0.37.0, TinySSH through 20230101, trilead-ssh2 6401, LANCOM LCOS and LANconfig, FileZilla before 3.66.4, Nova before 11.8, PKIX-SSH before 14.4, SecureCRT before 9.4.3, Transmit5 before 5.10.4, Win32-OpenSSH before 9.5.0.0p1-Beta, WinSCP before 6.2.2, Bitvise SSH Server before 9.32, Bitvise SSH Client before 9.33, KiTTY through 0.76.1.13, the net-ssh gem 7.2.0 for Ruby, the mscdex ssh2 module before 1.15.0 for Node.js, the thrussh library before 0.35.1 for Rust, and the Russh crate before 0.40.2 for Rust.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Applicable       | `sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar `       | [9.6_p1-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2021-31525_golang.org/x/net_0.0.0-20201224014010-6772e930b67b",
              "shortDescription": {
                "text": "[CVE-2021-31525] golang.org/x/net 0.0.0-20201224014010-6772e930b67b"
              },
              "help": {
                "text": "net/http in Go before 1.15.12 and 1.16.x before 1.16.4 allows remote attackers to cause a denial of service (panic) via a large header to ReadRequest or ReadResponse. Server, Transport, and Client can each be affected in some configurations.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Applicable       | `sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [0.0.0-20210428140749-89ef3d95e781]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-28321_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-28321] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "An improper certificate validation vulnerability exists in curl \u003cv8.1.0 in the way it supports matching of wildcard patterns when listed as \"Subject Alternative Name\" in TLS server certificates. curl can be built to use its own name matching function for TLS rather than one provided by a TLS library. This private wildcard matching function would match IDN (International Domain Name) hosts incorrectly and could as a result accept patterns that otherwise should mismatch. IDN hostnames are converted to puny code before used for certificate checks. Puny coded names always start with `xn--` and should not be allowed to pattern match, but the wildcard check in curl could still check for `x*`, which would match even though the IDN name most likely contained nothing even resembling an `x`.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Applicable       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.1.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2022-41717_golang.org/x/net_0.0.0-20201224014010-6772e930b67b",
              "shortDescription": {
                "text": "[CVE-2022-41717] golang.org/x/net 0.0.0-20201224014010-6772e930b67b"
              },
              "help": {
                "text": "An attacker can cause excessive memory growth in a Go server accepting HTTP/2 requests. HTTP/2 server connections contain a cache of HTTP header keys sent by the client. While the total number of entries in this cache is capped, an attacker sending very large keys can cause the server to allocate approximately 64 MiB per open connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [0.4.0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-29409_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2023-29409] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Extremely large RSA keys in certificate chains can cause a client/server to expend significant CPU time verifying signatures. With fix, the size of RSA keys transmitted during handshakes is restricted to \u003c= 8192 bits. Based on a survey of publicly trusted RSA keys, there are currently only three certificates in circulation with keys larger than this, and all three appear to be test certificates that are not actively deployed. It is possible there are larger keys in use in private PKIs, but we target the web PKI, so causing breakage here in the interests of increasing the default safety of users of crypto/tls seems reasonable.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.19.12], [1.20.7], [1.21.0-rc.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-45288_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2023-45288] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.21.9], [1.22.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-29406_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2023-29406] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "The HTTP/1 client does not fully validate the contents of the Host header. A maliciously crafted Host header can inject additional headers or entire requests. With fix, the HTTP/1 client now refuses to send requests containing an invalid Request.Host or Request.URL.Host value.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Applicable       | `sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `\u003cbr/\u003e`sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `       | [1.19.11], [1.20.6]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2021-43784_github.com/opencontainers/runc_1.0.0-rc93",
              "shortDescription": {
                "text": "[CVE-2021-43784] github.com/opencontainers/runc 1.0.0-rc93"
              },
              "help": {
                "text": "runc is a CLI tool for spawning and running containers on Linux according to the OCI specification. In runc, netlink is used internally as a serialization system for specifying the relevant container configuration to the `C` portion of the code (responsible for the based namespace setup of containers). In all versions of runc prior to 1.0.3, the encoder did not handle the possibility of an integer overflow in the 16-bit length field for the byte array attribute type, meaning that a large enough malicious byte array attribute could result in the length overflowing and the attribute contents being parsed as netlink messages for container configuration. This vulnerability requires the attacker to have some control over the configuration of the container and would allow the attacker to bypass the namespace restrictions of the container by simply adding their own netlink payload which disables all namespaces. The main users impacted are those who allow untrusted images with untrusted configurations to run on their machines (such as with shared cloud infrastructure). runc version 1.0.3 contains a fix for this bug. As a workaround, one may try disallowing untrusted namespace paths from your container. It should be noted that untrusted namespace paths would allow the attacker to disable namespace protections entirely even in the absence of this bug.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.0      | Applicable       | `sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.0.3]   |"
              },
              "properties": {
                "security-severity": "5.0"
              }
            },
            {
              "id": "CVE-2023-45288_golang.org/x/net_0.0.0-20201224014010-6772e930b67b",
              "shortDescription": {
                "text": "[CVE-2023-45288] golang.org/x/net 0.0.0-20201224014010-6772e930b67b"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [0.23.0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-32148_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2022-32148] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Improper exposure of client IP addresses in net/http before Go 1.17.12 and Go 1.18.4 can be triggered by calling httputil.ReverseProxy.ServeHTTP with a Request.Header map containing a nil value for the X-Forwarded-For header, which causes ReverseProxy to set the client IP as the value of the X-Forwarded-For header.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Applicable       | `sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `\u003cbr/\u003e`sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-28321_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-28321] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "An improper certificate validation vulnerability exists in curl \u003cv8.1.0 in the way it supports matching of wildcard patterns when listed as \"Subject Alternative Name\" in TLS server certificates. curl can be built to use its own name matching function for TLS rather than one provided by a TLS library. This private wildcard matching function would match IDN (International Domain Name) hosts incorrectly and could as a result accept patterns that otherwise should mismatch. IDN hostnames are converted to puny code before used for certificate checks. Puny coded names always start with `xn--` and should not be allowed to pattern match, but the wildcard check in curl could still check for `x*`, which would match even though the IDN name most likely contained nothing even resembling an `x`.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Applicable       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.1.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-6129_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-6129] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "Issue summary: The POLY1305 MAC (message authentication code) implementation\ncontains a bug that might corrupt the internal state of applications running\non PowerPC CPU based platforms if the CPU provides vector instructions.\n\nImpact summary: If an attacker can influence whether the POLY1305 MAC\nalgorithm is used, the application state might be corrupted with various\napplication dependent consequences.\n\nThe POLY1305 MAC (message authentication code) implementation in OpenSSL for\nPowerPC CPUs restores the contents of vector registers in a different order\nthan they are saved. Thus the contents of some of these vector registers\nare corrupted when returning to the caller. The vulnerable code is used only\non newer PowerPC processors supporting the PowerISA 2.07 instructions.\n\nThe consequences of this kind of internal application state corruption can\nbe various - from no consequences, if the calling application does not\ndepend on the contents of non-volatile XMM registers at all, to the worst\nconsequences, where the attacker could get complete control of the application\nprocess. However unless the compiler uses the vector registers for storing\npointers, the most likely consequence, if any, would be an incorrect result\nof some application dependent calculations or a crash leading to a denial of\nservice.\n\nThe POLY1305 MAC algorithm is most frequently used as part of the\nCHACHA20-POLY1305 AEAD (authenticated encryption with associated data)\nalgorithm. The most common usage of this AEAD cipher is with TLS protocol\nversions 1.2 and 1.3. If this cipher is enabled on the server a malicious\nclient can influence whether this AEAD cipher is used. This implies that\nTLS server applications using OpenSSL can be potentially impacted. However\nwe are currently not aware of any concrete application that would be affected\nby this issue therefore we consider this a Low severity security issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.1.4-r3]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2024-0727_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2024-0727] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "Issue summary: Processing a maliciously formatted PKCS12 file may lead OpenSSL\nto crash leading to a potential Denial of Service attack\n\nImpact summary: Applications loading files in the PKCS12 format from untrusted\nsources might terminate abruptly.\n\nA file in PKCS12 format can contain certificates and keys and may come from an\nuntrusted source. The PKCS12 specification allows certain fields to be NULL, but\nOpenSSL does not correctly check for this case. This can lead to a NULL pointer\ndereference that results in OpenSSL crashing. If an application processes PKCS12\nfiles from an untrusted source using the OpenSSL APIs then that application will\nbe vulnerable to this issue.\n\nOpenSSL APIs that are vulnerable to this are: PKCS12_parse(),\nPKCS12_unpack_p7data(), PKCS12_unpack_p7encdata(), PKCS12_unpack_authsafes()\nand PKCS12_newpass().\n\nWe have also fixed a similar issue in SMIME_write_PKCS7(). However since this\nfunction is related to writing data we do not consider it security significant.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.1.4-r5]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2022-27776_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-27776] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "A insufficiently protected credentials vulnerability in fixed in curl 7.83.0 might leak authentication or cookie header data on HTTP redirects to the same host but another port number.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.79.1-r1]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2021-42374_3.13:busybox_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2021-42374] 3.13:busybox 1.32.1-r3"
              },
              "help": {
                "text": "An out-of-bounds heap read in Busybox's unlzma applet leads to information leak and denial of service when crafted LZMA-compressed input is decompressed. This can be triggered by any applet/format that",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.32.1-r7]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-37600_3.13:libmount_2.36.1-r1",
              "shortDescription": {
                "text": "[CVE-2021-37600] 3.13:libmount 2.36.1-r1"
              },
              "help": {
                "text": "An integer overflow in util-linux through 2.37.1 can potentially cause a buffer overflow if an attacker were able to use system resources in a way that leads to a large number in the /proc/sysvipc/sem file. NOTE: this is unexploitable in GNU C Library environments, and possibly in all realistic environments.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [2.37.2-r0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2022-35260_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-35260] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "curl can be told to parse a `.netrc` file for credentials. If that file endsin a line with 4095 consecutive non-white space letters and no newline, curlwould first read past the end of the stack-based buffer, and if the readworks, write a zero byte beyond its boundary.This will in most cases cause a segfault or similar, but circumstances might also cause different outcomes.If a malicious user can provide a custom netrc file to an application or otherwise affect its contents, this flaw could be used as denial-of-service.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.86.0-r0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2021-3996_3.13:libmount_2.36.1-r1",
              "shortDescription": {
                "text": "[CVE-2021-3996] 3.13:libmount 2.36.1-r1"
              },
              "help": {
                "text": "A logic error was found in the libmount library of util-linux in the function that allows an unprivileged user to unmount a FUSE filesystem. This flaw allows a local user on a vulnerable system to unmount other users' filesystems that are either world-writable themselves (like /tmp) or mounted in a world-writable directory. An attacker may use this flaw to cause a denial of service to applications that use the affected filesystems.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [2.37.3-r0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2021-22876_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2021-22876] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "curl 7.1.1 to and including 7.75.0 is vulnerable to an \"Exposure of Private Personal Information to an Unauthorized Actor\" by leaking credentials in the HTTP Referer: header. libcurl does not strip off user credentials from the URL when automatically populating the Referer: HTTP request header field in outgoing HTTP requests, and therefore risks leaking sensitive data to the server that is the target of the second HTTP request.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.76.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-42366_3.13:ssl_client_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2023-42366] 3.13:ssl_client 1.32.1-r3"
              },
              "help": {
                "text": "A heap-buffer-overflow was discovered in BusyBox v.1.36.1 in the next_token function at awk.c:1159.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.36.1-r25]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-39319_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2023-39319] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "The html/template package does not apply the proper rules for handling occurrences of \"\u003cscript\", \"\u003c!--\", and \"\u003c/script\" within JS literals in \u003cscript\u003e contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2024-0853_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2024-0853] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "curl inadvertently kept the SSL session ID for connections in its cache even when the verify status (*OCSP stapling*) test failed. A subsequent transfer to\nthe same hostname could then succeed if the session ID cache was still fresh, which then skipped the verify status check.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.6.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-3995_3.13:libuuid_2.36.1-r1",
              "shortDescription": {
                "text": "[CVE-2021-3995] 3.13:libuuid 2.36.1-r1"
              },
              "help": {
                "text": "A logic error was found in the libmount library of util-linux in the function that allows an unprivileged user to unmount a FUSE filesystem. This flaw allows an unprivileged local attacker to unmount FUSE filesystems that belong to certain other users who have a UID that is a prefix of the UID of the attacker in its string form. An attacker may use this flaw to cause a denial of service to applications that use the affected filesystems.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [2.37.3-r0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2022-23471_github.com/containerd/containerd_1.5.0-beta.1",
              "shortDescription": {
                "text": "[CVE-2022-23471] github.com/containerd/containerd 1.5.0-beta.1"
              },
              "help": {
                "text": "containerd is an open source container runtime. A bug was found in containerd's CRI implementation where a user can exhaust memory on the host. In the CRI stream server, a goroutine is launched to handle terminal resize events if a TTY is requested. If the user's process fails to launch due to, for example, a faulty command, the goroutine will be stuck waiting to send without a receiver, resulting in a memory leak. Kubernetes and crictl can both be configured to use containerd's CRI implementation and the stream server is used for handling container IO. This bug has been fixed in containerd 1.6.12 and 1.5.16.  Users should update to these versions to resolve the issue. Users unable to upgrade should ensure that only trusted images and commands are used and that only trusted users have permissions to execute commands in running containers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.5.16], [1.6.12]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2021-41089_github.com/docker/docker_20.10.4+incompatible",
              "shortDescription": {
                "text": "[CVE-2021-41089] github.com/docker/docker 20.10.4+incompatible"
              },
              "help": {
                "text": "Moby is an open-source project created by Docker to enable software containerization. A bug was found in Moby (Docker Engine) where attempting to copy files using `docker cp` into a specially-crafted container can result in Unix file permission changes for existing files in the host’s filesystem, widening access to others. This bug does not directly allow files to be read, modified, or executed without an additional cooperating process. This bug has been fixed in Moby (Docker Engine) 20.10.9. Users should update to this version as soon as possible. Running containers do not need to be restarted.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.3      | Not Covered       | `sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [20.10.9]   |"
              },
              "properties": {
                "security-severity": "6.3"
              }
            },
            {
              "id": "CVE-2023-42363_3.13:ssl_client_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2023-42363] 3.13:ssl_client 1.32.1-r3"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in xasprintf function in xfuncs_printf.c:344 in BusyBox v.1.36.1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.36.1-r27]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2021-37600_3.13:libblkid_2.36.1-r1",
              "shortDescription": {
                "text": "[CVE-2021-37600] 3.13:libblkid 2.36.1-r1"
              },
              "help": {
                "text": "An integer overflow in util-linux through 2.37.1 can potentially cause a buffer overflow if an attacker were able to use system resources in a way that leads to a large number in the /proc/sysvipc/sem file. NOTE: this is unexploitable in GNU C Library environments, and possibly in all realistic environments.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [2.37.2-r0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42364_3.13:busybox_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2023-42364] 3.13:busybox 1.32.1-r3"
              },
              "help": {
                "text": "A use-after-free vulnerability in BusyBox v.1.36.1 allows attackers to cause a denial of service via a crafted awk pattern in the awk.c evaluate function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2022-31030_github.com/containerd/containerd_1.5.0-beta.1",
              "shortDescription": {
                "text": "[CVE-2022-31030] github.com/containerd/containerd 1.5.0-beta.1"
              },
              "help": {
                "text": "containerd is an open source container runtime. A bug was found in the containerd's CRI implementation where programs inside a container can cause the containerd daemon to consume memory without bound during invocation of the `ExecSync` API. This can cause containerd to consume all available memory on the computer, denying service to other legitimate workloads. Kubernetes and crictl can both be configured to use containerd's CRI implementation; `ExecSync` may be used when running probes or when executing processes via an \"exec\" facility. This bug has been fixed in containerd 1.6.6 and 1.5.13. Users should update to these versions to resolve the issue. Users unable to upgrade should ensure that only trusted images and commands are used.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.5.13], [1.6.6]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2021-3995_3.13:libblkid_2.36.1-r1",
              "shortDescription": {
                "text": "[CVE-2021-3995] 3.13:libblkid 2.36.1-r1"
              },
              "help": {
                "text": "A logic error was found in the libmount library of util-linux in the function that allows an unprivileged user to unmount a FUSE filesystem. This flaw allows an unprivileged local attacker to unmount FUSE filesystems that belong to certain other users who have a UID that is a prefix of the UID of the attacker in its string form. An attacker may use this flaw to cause a denial of service to applications that use the affected filesystems.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [2.37.3-r0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-3446_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-3446] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. One of those\nchecks confirms that the modulus ('p' parameter) is not too large. Trying to use\na very large modulus is slow and OpenSSL will not normally use a modulus which\nis over 10,000 bits in length.\n\nHowever the DH_check() function checks numerous aspects of the key or parameters\nthat have been supplied. Some of those checks use the supplied modulus value\neven if it has already been found to be too large.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulernable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the '-check' option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.1.1-r3]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-27537_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-27537] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "A double free vulnerability exists in libcurl \u003c8.0.0 when sharing HSTS data between separate \"handles\". This sharing was introduced without considerations for do this sharing across separate threads but there was no indication of this fact in the documentation. Due to missing mutexes or thread locks, two threads sharing the same HSTS data could end up doing a double-free or use-after-free.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.0.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2020-29510_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2020-29510] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "The encoding/xml package in Go versions 1.15 and earlier does not correctly preserve the semantics of directives during tokenization round-trips, which allows an attacker to craft inputs that behave in conflicting ways during different stages of processing in affected downstream applications.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.6      | Not Covered       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.15.6]   |"
              },
              "properties": {
                "security-severity": "5.6"
              }
            },
            {
              "id": "CVE-2021-37750_3.13:krb5-libs_1.18.3-r1",
              "shortDescription": {
                "text": "[CVE-2021-37750] 3.13:krb5-libs 1.18.3-r1"
              },
              "help": {
                "text": "The Key Distribution Center (KDC) in MIT Kerberos 5 (aka krb5) before 1.18.5 and 1.19.x before 1.19.3 has a NULL pointer dereference in kdc/do_tgs_req.c via a FAST inner body that lacks a server field.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [1.18.5-r0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-5678_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-5678] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "Issue summary: Generating excessively long X9.42 DH keys or checking\nexcessively long X9.42 DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_generate_key() to\ngenerate an X9.42 DH key may experience long delays.  Likewise, applications\nthat use DH_check_pub_key(), DH_check_pub_key_ex() or EVP_PKEY_public_check()\nto check an X9.42 DH key or X9.42 DH parameters may experience long delays.\nWhere the key or parameters that are being checked have been obtained from\nan untrusted source this may lead to a Denial of Service.\n\nWhile DH_check() performs all the necessary checks (as of CVE-2023-3817),\nDH_check_pub_key() doesn't make any of these checks, and is therefore\nvulnerable for excessively large P and Q parameters.\n\nLikewise, while DH_generate_key() performs a check for an excessively large\nP, it doesn't check for an excessively large Q.\n\nAn application that calls DH_generate_key() or DH_check_pub_key() and\nsupplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nDH_generate_key() and DH_check_pub_key() are also called by a number of\nother OpenSSL functions.  An application calling any of those other\nfunctions may similarly be affected.  The other functions affected by this\nare DH_check_pub_key_ex(), EVP_PKEY_public_check(), and EVP_PKEY_generate().\n\nAlso vulnerable are the OpenSSL pkey command line application when using the\n\"-pubcheck\" option, as well as the OpenSSL genpkey command line application.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.1.4-r1]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-27535_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-27535] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "An authentication bypass vulnerability exists in libcurl \u003c8.0.0 in the FTP connection reuse feature that can result in wrong credentials being used during subsequent transfers. Previously created connections are kept in a connection pool for reuse if they match the current setup. However, certain FTP settings such as CURLOPT_FTP_ACCOUNT, CURLOPT_FTP_ALTERNATIVE_TO_USER, CURLOPT_FTP_SSL_CCC, and CURLOPT_USE_SSL were not included in the configuration match checks, causing them to match too easily. This could lead to libcurl using the wrong credentials when performing a transfer, potentially allowing unauthorized access to sensitive information.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.0.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2021-22947_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2021-22947] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "When curl \u003e= 7.20.0 and \u003c= 7.78.0 connects to an IMAP or POP3 server to retrieve data using STARTTLS to upgrade to TLS security, the server can respond and send back multiple responses at once that curl caches. curl would then upgrade to TLS but not flush the in-queue of cached responses but instead continue using and trustingthe responses it got *before* the TLS handshake as if they were authenticated.Using this flaw, it allows a Man-In-The-Middle attacker to first inject the fake responses, then pass-through the TLS traffic from the legitimate server and trick curl into sending data back to the user thinking the attacker's injected data comes from the TLS-protected server.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.79.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-23916_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-23916] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "An allocation of resources without limits or throttling vulnerability exists in curl \u003cv7.88.0 based on the \"chained\" HTTP compression algorithms, meaning that a server response can be compressed multiple times and potentially with differentalgorithms. The number of acceptable \"links\" in this \"decompression chain\" wascapped, but the cap was implemented on a per-header basis allowing a maliciousserver to insert a virtually unlimited number of compression steps simply byusing many headers. The use of such a decompression chain could result in a \"malloc bomb\", making curl end up spending enormous amounts of allocated heap memory, or trying to and returning out of memory errors.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.88.0-r0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-6129_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-6129] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "Issue summary: The POLY1305 MAC (message authentication code) implementation\ncontains a bug that might corrupt the internal state of applications running\non PowerPC CPU based platforms if the CPU provides vector instructions.\n\nImpact summary: If an attacker can influence whether the POLY1305 MAC\nalgorithm is used, the application state might be corrupted with various\napplication dependent consequences.\n\nThe POLY1305 MAC (message authentication code) implementation in OpenSSL for\nPowerPC CPUs restores the contents of vector registers in a different order\nthan they are saved. Thus the contents of some of these vector registers\nare corrupted when returning to the caller. The vulnerable code is used only\non newer PowerPC processors supporting the PowerISA 2.07 instructions.\n\nThe consequences of this kind of internal application state corruption can\nbe various - from no consequences, if the calling application does not\ndepend on the contents of non-volatile XMM registers at all, to the worst\nconsequences, where the attacker could get complete control of the application\nprocess. However unless the compiler uses the vector registers for storing\npointers, the most likely consequence, if any, would be an incorrect result\nof some application dependent calculations or a crash leading to a denial of\nservice.\n\nThe POLY1305 MAC algorithm is most frequently used as part of the\nCHACHA20-POLY1305 AEAD (authenticated encryption with associated data)\nalgorithm. The most common usage of this AEAD cipher is with TLS protocol\nversions 1.2 and 1.3. If this cipher is enabled on the server a malicious\nclient can influence whether this AEAD cipher is used. This implies that\nTLS server applications using OpenSSL can be potentially impacted. However\nwe are currently not aware of any concrete application that would be affected\nby this issue therefore we consider this a Low severity security issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.1.4-r3]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-6129_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-6129] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "Issue summary: The POLY1305 MAC (message authentication code) implementation\ncontains a bug that might corrupt the internal state of applications running\non PowerPC CPU based platforms if the CPU provides vector instructions.\n\nImpact summary: If an attacker can influence whether the POLY1305 MAC\nalgorithm is used, the application state might be corrupted with various\napplication dependent consequences.\n\nThe POLY1305 MAC (message authentication code) implementation in OpenSSL for\nPowerPC CPUs restores the contents of vector registers in a different order\nthan they are saved. Thus the contents of some of these vector registers\nare corrupted when returning to the caller. The vulnerable code is used only\non newer PowerPC processors supporting the PowerISA 2.07 instructions.\n\nThe consequences of this kind of internal application state corruption can\nbe various - from no consequences, if the calling application does not\ndepend on the contents of non-volatile XMM registers at all, to the worst\nconsequences, where the attacker could get complete control of the application\nprocess. However unless the compiler uses the vector registers for storing\npointers, the most likely consequence, if any, would be an incorrect result\nof some application dependent calculations or a crash leading to a denial of\nservice.\n\nThe POLY1305 MAC algorithm is most frequently used as part of the\nCHACHA20-POLY1305 AEAD (authenticated encryption with associated data)\nalgorithm. The most common usage of this AEAD cipher is with TLS protocol\nversions 1.2 and 1.3. If this cipher is enabled on the server a malicious\nclient can influence whether this AEAD cipher is used. This implies that\nTLS server applications using OpenSSL can be potentially impacted. However\nwe are currently not aware of any concrete application that would be affected\nby this issue therefore we consider this a Low severity security issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [3.1.4-r3]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-27779_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-27779] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "libcurl wrongly allows cookies to be set for Top Level Domains (TLDs) if thehost name is provided with a trailing dot.curl can be told to receive and send cookies. curl's \"cookie engine\" can bebuilt with or without [Public Suffix List](https://publicsuffix.org/)awareness. If PSL support not provided, a more rudimentary check exists to atleast prevent cookies from being set on TLDs. This check was broken if thehost name in the URL uses a trailing dot.This can allow arbitrary sites to set cookies that then would get sent to adifferent and unrelated site or domain.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.83.1-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-46218_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-46218] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "This flaw allows a malicious HTTP server to set \"super cookies\" in curl that\nare then passed back to more origins than what is otherwise allowed or\npossible. This allows a site to set cookies that then would get sent to\ndifferent and unrelated sites and domains.\n\nIt could do this by exploiting a mixed case flaw in curl's function that\nverifies a given cookie domain against the Public Suffix List (PSL). For\nexample a cookie could be set with `domain=co.UK` when the URL used a lower\ncase hostname `curl.co.uk`, even though `co.uk` is listed as a PSL domain.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.5.0-r0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2021-22925_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2021-22925] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "curl supports the `-t` command line option, known as `CURLOPT_TELNETOPTIONS`in libcurl. This rarely used option is used to send variable=content pairs toTELNET servers.Due to flaw in the option parser for sending `NEW_ENV` variables, libcurlcould be made to pass on uninitialized data from a stack based buffer to theserver. Therefore potentially revealing sensitive internal information to theserver using a clear-text network protocol.This could happen because curl did not call and use sscanf() correctly whenparsing the string provided by the application.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.78.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-28320_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-28320] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "A denial of service vulnerability exists in curl \u003cv8.1.0 in the way libcurl provides several different backends for resolving host names, selected at build time. If it is built to use the synchronous resolver, it allows name resolves to time-out slow operations using `alarm()` and `siglongjmp()`. When doing this, libcurl used a global buffer that was not mutex protected and a multi-threaded application might therefore crash or otherwise misbehave.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.1.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-42365_3.13:busybox_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2023-42365] 3.13:busybox 1.32.1-r3"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in BusyBox v.1.36.1 via a crafted awk pattern in the awk.c copyvar function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2022-43552_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-43552] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "A use after free vulnerability exists in curl \u003c7.87.0. Curl can be asked to *tunnel* virtually all protocols it supports through an HTTP proxy. HTTP proxies can (and often do) deny such tunnel operations. When getting denied to tunnel the specific protocols SMB or TELNET, curl would use a heap-allocated struct after it had been freed, in its transfer shutdown code path.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.87.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2022-30115_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-30115] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "Using its HSTS support, curl can be instructed to use HTTPS directly insteadof using an insecure clear-text HTTP step even when HTTP is provided in theURL. This mechanism could be bypassed if the host name in the given URL used atrailing dot while not using one when it built the HSTS cache. Or the otherway around - by having the trailing dot in the HSTS cache and *not* using thetrailing dot in the URL.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.3      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.83.1-r0]   |"
              },
              "properties": {
                "security-severity": "4.3"
              }
            },
            {
              "id": "CVE-2021-4160_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2021-4160] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "There is a carry propagation bug in the MIPS32 and MIPS64 squaring procedure. Many EC algorithms are affected, including some of the TLS 1.3 default curves. Impact was not analyzed in detail, because the pre-requisites for attack are considered unlikely and include reusing private keys. Analysis suggests that attacks against RSA and DSA as a result of this defect would be very difficult to perform and are not believed likely. Attacks against DH are considered just feasible (although very difficult) because most of the work necessary to deduce information about a private key may be performed offline. The amount of resources required for such an attack would be significant. However, for an attack on TLS to be meaningful, the server would have to share the DH private key among multiple clients, which is no longer an option since CVE-2016-0701. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0.0. It was addressed in the releases of 1.1.1m and 3.0.1 on the 15th of December 2021. For the 1.0.2 release it is addressed in git commit 6fc1aaaf3 that is available to premium support customers only. It will be made available in 1.0.2zc when it is released. The issue only affects OpenSSL on MIPS platforms. Fixed in OpenSSL 3.0.1 (Affected 3.0.0). Fixed in OpenSSL 1.1.1m (Affected 1.1.1-1.1.1l). Fixed in OpenSSL 1.0.2zc-dev (Affected 1.0.2-1.0.2zb).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.1.1n-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-27537_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-27537] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "A double free vulnerability exists in libcurl \u003c8.0.0 when sharing HSTS data between separate \"handles\". This sharing was introduced without considerations for do this sharing across separate threads but there was no indication of this fact in the documentation. Due to missing mutexes or thread locks, two threads sharing the same HSTS data could end up doing a double-free or use-after-free.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.0.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-39326_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2023-39326] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "A malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body. A malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request. Chunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-27538_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-27538] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "An authentication bypass vulnerability exists in libcurl prior to v8.0.0 where it reuses a previously established SSH connection despite the fact that an SSH option was modified, which should have prevented reuse. libcurl maintains a pool of previously used connections to reuse them for subsequent transfers if the configurations match. However, two SSH settings were omitted from the configuration check, allowing them to match easily, potentially leading to the reuse of an inappropriate connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.0.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-51384_3.13:openssh-client_8.4_p1-r2",
              "shortDescription": {
                "text": "[CVE-2023-51384] 3.13:openssh-client 8.4_p1-r2"
              },
              "help": {
                "text": "In ssh-agent in OpenSSH before 9.6, certain destination constraints can be incompletely applied. When destination constraints are specified during addition of PKCS#11-hosted private keys, these constraints are only applied to the first key, even if a PKCS#11 token returns multiple keys.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar `       | [9.1_p1-r5]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-25809_github.com/opencontainers/runc_1.0.0-rc93",
              "shortDescription": {
                "text": "[CVE-2023-25809] github.com/opencontainers/runc 1.0.0-rc93"
              },
              "help": {
                "text": "runc is a CLI tool for spawning and running containers according to the OCI specification. In affected versions it was found that rootless runc makes `/sys/fs/cgroup` writable in following conditons: 1. when runc is executed inside the user namespace, and the `config.json` does not specify the cgroup namespace to be unshared (e.g.., `(docker|podman|nerdctl) run --cgroupns=host`, with Rootless Docker/Podman/nerdctl) or 2. when runc is executed outside the user namespace, and `/sys` is mounted with `rbind, ro` (e.g., `runc spec --rootless`; this condition is very rare). A container may gain the write access to user-owned cgroup hierarchy `/sys/fs/cgroup/user.slice/...` on the host . Other users's cgroup hierarchies are not affected. Users are advised to upgrade to version 1.1.5. Users unable to upgrade may unshare the cgroup namespace (`(docker|podman|nerdctl) run --cgroupns=private)`. This is the default behavior of Docker/Podman/nerdctl on cgroup v2 hosts. or add `/sys/fs/cgroup` to `maskedPaths`.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.3      | Not Covered       | `sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.1.5]   |"
              },
              "properties": {
                "security-severity": "6.3"
              }
            },
            {
              "id": "CVE-2023-1255_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-1255] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "Issue summary: The AES-XTS cipher decryption implementation for 64 bit ARM\nplatform contains a bug that could cause it to read past the input buffer,\nleading to a crash.\n\nImpact summary: Applications that use the AES-XTS algorithm on the 64 bit ARM\nplatform can crash in rare circumstances. The AES-XTS algorithm is usually\nused for disk encryption.\n\nThe AES-XTS cipher decryption implementation for 64 bit ARM platform will read\npast the end of the ciphertext buffer if the ciphertext size is 4 mod 5 in 16\nbyte blocks, e.g. 144 bytes or 1024 bytes. If the memory after the ciphertext\nbuffer is unmapped, this will trigger a crash which results in a denial of\nservice.\n\nIf an attacker can control the size and location of the ciphertext buffer\nbeing decrypted by an application using AES-XTS on 64 bit ARM, the\napplication is affected. This is fairly unlikely making this issue\na Low severity one.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.1.0-r4]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-39318_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2023-39318] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "The html/template package does not properly handle HTML-like \"\" comment tokens, nor hashbang \"#!\" comment tokens, in \u003cscript\u003e contexts. This may cause the template parser to improperly interpret the contents of \u003cscript\u003e contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2024-0853_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2024-0853] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "curl inadvertently kept the SSL session ID for connections in its cache even when the verify status (*OCSP stapling*) test failed. A subsequent transfer to\nthe same hostname could then succeed if the session ID cache was still fresh, which then skipped the verify status check.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.6.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-28320_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-28320] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "A denial of service vulnerability exists in curl \u003cv8.1.0 in the way libcurl provides several different backends for resolving host names, selected at build time. If it is built to use the synchronous resolver, it allows name resolves to time-out slow operations using `alarm()` and `siglongjmp()`. When doing this, libcurl used a global buffer that was not mutex protected and a multi-threaded application might therefore crash or otherwise misbehave.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.1.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2021-22925_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2021-22925] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "curl supports the `-t` command line option, known as `CURLOPT_TELNETOPTIONS`in libcurl. This rarely used option is used to send variable=content pairs toTELNET servers.Due to flaw in the option parser for sending `NEW_ENV` variables, libcurlcould be made to pass on uninitialized data from a stack based buffer to theserver. Therefore potentially revealing sensitive internal information to theserver using a clear-text network protocol.This could happen because curl did not call and use sscanf() correctly whenparsing the string provided by the application.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.78.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-46219_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-46219] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "When saving HSTS data to an excessively long file name, curl could end up\nremoving all contents, making subsequent requests using that file unaware of\nthe HSTS status they should otherwise use.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.5.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-24532_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2023-24532] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "The ScalarMult and ScalarBaseMult methods of the P256 Curve may return an incorrect result if called with some specific unreduced scalars (a scalar larger than the order of the curve). This does not impact usages of crypto/ecdsa or crypto/ecdh.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.19.7], [1.20.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-3817_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-3817] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. After fixing\nCVE-2023-3446 it was discovered that a large q parameter value can also trigger\nan overly long computation during some of these checks. A correct q value,\nif present, cannot be larger than the modulus p parameter, thus it is\nunnecessary to perform these checks if q is larger than p.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulnerable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the \"-check\" option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.1.2-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-4304_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2022-4304] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "A timing based side channel exists in the OpenSSL RSA Decryption implementation\nwhich could be sufficient to recover a plaintext across a network in a\nBleichenbacher style attack. To achieve a successful decryption an attacker\nwould have to be able to send a very large number of trial messages for\ndecryption. The vulnerability affects all RSA padding modes: PKCS#1 v1.5,\nRSA-OEAP and RSASVE.\n\nFor example, in a TLS connection, RSA is commonly used by a client to send an\nencrypted pre-master secret to the server. An attacker that had observed a\ngenuine connection between a client and a server could use this flaw to send\ntrial messages to the server and record the time taken to process them. After a\nsufficiently large number of messages the attacker could recover the pre-master\nsecret used for the original connection and thus be able to decrypt the\napplication data sent over that connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-42365_3.13:ssl_client_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2023-42365] 3.13:ssl_client 1.32.1-r3"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in BusyBox v.1.36.1 via a crafted awk pattern in the awk.c copyvar function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42366_3.13:busybox_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2023-42366] 3.13:busybox 1.32.1-r3"
              },
              "help": {
                "text": "A heap-buffer-overflow was discovered in BusyBox v.1.36.1 in the next_token function at awk.c:1159.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.36.1-r25]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-2975_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-2975] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "Issue summary: The AES-SIV cipher implementation contains a bug that causes\nit to ignore empty associated data entries which are unauthenticated as\na consequence.\n\nImpact summary: Applications that use the AES-SIV algorithm and want to\nauthenticate empty data entries as associated data can be mislead by removing\nadding or reordering such empty entries as these are ignored by the OpenSSL\nimplementation. We are currently unaware of any such applications.\n\nThe AES-SIV algorithm allows for authentication of multiple associated\ndata entries along with the encryption. To authenticate empty data the\napplication has to call EVP_EncryptUpdate() (or EVP_CipherUpdate()) with\nNULL pointer as the output buffer and 0 as the input buffer length.\nThe AES-SIV implementation in OpenSSL just returns success for such a call\ninstead of performing the associated data authentication operation.\nThe empty data thus will not be authenticated.\n\nAs this issue does not affect non-empty associated data authentication and\nwe expect it to be rare for an application to use empty associated data\nentries this is qualified as Low severity issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.1.1-r2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-3996_3.13:libblkid_2.36.1-r1",
              "shortDescription": {
                "text": "[CVE-2021-3996] 3.13:libblkid 2.36.1-r1"
              },
              "help": {
                "text": "A logic error was found in the libmount library of util-linux in the function that allows an unprivileged user to unmount a FUSE filesystem. This flaw allows a local user on a vulnerable system to unmount other users' filesystems that are either world-writable themselves (like /tmp) or mounted in a world-writable directory. An attacker may use this flaw to cause a denial of service to applications that use the affected filesystems.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [2.37.3-r0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-5678_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-5678] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "Issue summary: Generating excessively long X9.42 DH keys or checking\nexcessively long X9.42 DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_generate_key() to\ngenerate an X9.42 DH key may experience long delays.  Likewise, applications\nthat use DH_check_pub_key(), DH_check_pub_key_ex() or EVP_PKEY_public_check()\nto check an X9.42 DH key or X9.42 DH parameters may experience long delays.\nWhere the key or parameters that are being checked have been obtained from\nan untrusted source this may lead to a Denial of Service.\n\nWhile DH_check() performs all the necessary checks (as of CVE-2023-3817),\nDH_check_pub_key() doesn't make any of these checks, and is therefore\nvulnerable for excessively large P and Q parameters.\n\nLikewise, while DH_generate_key() performs a check for an excessively large\nP, it doesn't check for an excessively large Q.\n\nAn application that calls DH_generate_key() or DH_check_pub_key() and\nsupplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nDH_generate_key() and DH_check_pub_key() are also called by a number of\nother OpenSSL functions.  An application calling any of those other\nfunctions may similarly be affected.  The other functions affected by this\nare DH_check_pub_key_ex(), EVP_PKEY_public_check(), and EVP_PKEY_generate().\n\nAlso vulnerable are the OpenSSL pkey command line application when using the\n\"-pubcheck\" option, as well as the OpenSSL genpkey command line application.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [3.1.4-r1]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-1255_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-1255] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "Issue summary: The AES-XTS cipher decryption implementation for 64 bit ARM\nplatform contains a bug that could cause it to read past the input buffer,\nleading to a crash.\n\nImpact summary: Applications that use the AES-XTS algorithm on the 64 bit ARM\nplatform can crash in rare circumstances. The AES-XTS algorithm is usually\nused for disk encryption.\n\nThe AES-XTS cipher decryption implementation for 64 bit ARM platform will read\npast the end of the ciphertext buffer if the ciphertext size is 4 mod 5 in 16\nbyte blocks, e.g. 144 bytes or 1024 bytes. If the memory after the ciphertext\nbuffer is unmapped, this will trigger a crash which results in a denial of\nservice.\n\nIf an attacker can control the size and location of the ciphertext buffer\nbeing decrypted by an application using AES-XTS on 64 bit ARM, the\napplication is affected. This is fairly unlikely making this issue\na Low severity one.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.1.0-r4]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2024-0727_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2024-0727] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "Issue summary: Processing a maliciously formatted PKCS12 file may lead OpenSSL\nto crash leading to a potential Denial of Service attack\n\nImpact summary: Applications loading files in the PKCS12 format from untrusted\nsources might terminate abruptly.\n\nA file in PKCS12 format can contain certificates and keys and may come from an\nuntrusted source. The PKCS12 specification allows certain fields to be NULL, but\nOpenSSL does not correctly check for this case. This can lead to a NULL pointer\ndereference that results in OpenSSL crashing. If an application processes PKCS12\nfiles from an untrusted source using the OpenSSL APIs then that application will\nbe vulnerable to this issue.\n\nOpenSSL APIs that are vulnerable to this are: PKCS12_parse(),\nPKCS12_unpack_p7data(), PKCS12_unpack_p7encdata(), PKCS12_unpack_authsafes()\nand PKCS12_newpass().\n\nWe have also fixed a similar issue in SMIME_write_PKCS7(). However since this\nfunction is related to writing data we do not consider it security significant.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.1.4-r5]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-28841_github.com/docker/docker_20.10.4+incompatible",
              "shortDescription": {
                "text": "[CVE-2023-28841] github.com/docker/docker 20.10.4+incompatible"
              },
              "help": {
                "text": "Moby is an open source container framework developed by Docker Inc. that is distributed as Docker, Mirantis Container Runtime, and various other downstream projects/products. The Moby daemon component (`dockerd`), which is developed as moby/moby is commonly referred to as *Docker*.\n\nSwarm Mode, which is compiled in and delivered by default in `dockerd` and is thus present in most major Moby downstreams, is a simple, built-in container orchestrator that is implemented through a combination of SwarmKit and supporting network code.\n\nThe `overlay` network driver is a core feature of Swarm Mode, providing isolated virtual LANs that allow communication between containers and services across the cluster. This driver is an implementation/user of VXLAN, which encapsulates link-layer (Ethernet) frames in UDP datagrams that tag the frame with the VXLAN metadata, including a VXLAN Network ID (VNI) that identifies the originating overlay network. In addition, the overlay network driver supports an optional, off-by-default encrypted mode, which is especially useful when VXLAN packets traverses an untrusted network between nodes.\n\nEncrypted overlay networks function by encapsulating the VXLAN datagrams through the use of the IPsec Encapsulating Security Payload protocol in Transport mode. By deploying IPSec encapsulation, encrypted overlay networks gain the additional properties of source authentication through cryptographic proof, data integrity through check-summing, and confidentiality through encryption.\n\nWhen setting an endpoint up on an encrypted overlay network, Moby installs three iptables (Linux kernel firewall) rules that enforce both incoming and outgoing IPSec. These rules rely on the `u32` iptables extension provided by the `xt_u32` kernel module to directly filter on a VXLAN packet's VNI field, so that IPSec guarantees can be enforced on encrypted overlay networks without interfering with other overlay networks or other users of VXLAN.\n\nAn iptables rule designates outgoing VXLAN datagrams with a VNI that c...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.8      | Not Covered       | `sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [20.10.24], [23.0.3]   |"
              },
              "properties": {
                "security-severity": "6.8"
              }
            },
            {
              "id": "CVE-2021-42374_3.13:ssl_client_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2021-42374] 3.13:ssl_client 1.32.1-r3"
              },
              "help": {
                "text": "An out-of-bounds heap read in Busybox's unlzma applet leads to information leak and denial of service when crafted LZMA-compressed input is decompressed. This can be triggered by any applet/format that",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.32.1-r7]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-23915_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-23915] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "A cleartext transmission of sensitive information vulnerability exists in curl \u003cv7.88.0 that could cause HSTS functionality to behave incorrectly when multiple URLs are requested in parallel. Using its HSTS support, curl can be instructed to use HTTPS instead of using an insecure clear-text HTTP step even when HTTP is provided in the URL. This HSTS mechanism would however surprisingly fail when multiple transfers are done in parallel as the HSTS cache file gets overwritten by the most recentlycompleted transfer. A later HTTP-only transfer to the earlier host name would then *not* get upgraded properly to HSTS.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.88.0-r0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-27535_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-27535] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "An authentication bypass vulnerability exists in libcurl \u003c8.0.0 in the FTP connection reuse feature that can result in wrong credentials being used during subsequent transfers. Previously created connections are kept in a connection pool for reuse if they match the current setup. However, certain FTP settings such as CURLOPT_FTP_ACCOUNT, CURLOPT_FTP_ALTERNATIVE_TO_USER, CURLOPT_FTP_SSL_CCC, and CURLOPT_USE_SSL were not included in the configuration match checks, causing them to match too easily. This could lead to libcurl using the wrong credentials when performing a transfer, potentially allowing unauthorized access to sensitive information.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.0.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2020-24553_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2020-24553] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Go before 1.14.8 and 1.15.x before 1.15.1 allows XSS because text/html is the default for CGI/FCGI handlers that lack a Content-Type header.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.14.8], [1.15.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2021-4160_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2021-4160] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "There is a carry propagation bug in the MIPS32 and MIPS64 squaring procedure. Many EC algorithms are affected, including some of the TLS 1.3 default curves. Impact was not analyzed in detail, because the pre-requisites for attack are considered unlikely and include reusing private keys. Analysis suggests that attacks against RSA and DSA as a result of this defect would be very difficult to perform and are not believed likely. Attacks against DH are considered just feasible (although very difficult) because most of the work necessary to deduce information about a private key may be performed offline. The amount of resources required for such an attack would be significant. However, for an attack on TLS to be meaningful, the server would have to share the DH private key among multiple clients, which is no longer an option since CVE-2016-0701. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0.0. It was addressed in the releases of 1.1.1m and 3.0.1 on the 15th of December 2021. For the 1.0.2 release it is addressed in git commit 6fc1aaaf3 that is available to premium support customers only. It will be made available in 1.0.2zc when it is released. The issue only affects OpenSSL on MIPS platforms. Fixed in OpenSSL 3.0.1 (Affected 3.0.0). Fixed in OpenSSL 1.1.1m (Affected 1.1.1-1.1.1l). Fixed in OpenSSL 1.0.2zc-dev (Affected 1.0.2-1.0.2zb).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.1.1n-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2022-35260_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-35260] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "curl can be told to parse a `.netrc` file for credentials. If that file endsin a line with 4095 consecutive non-white space letters and no newline, curlwould first read past the end of the stack-based buffer, and if the readworks, write a zero byte beyond its boundary.This will in most cases cause a segfault or similar, but circumstances might also cause different outcomes.If a malicious user can provide a custom netrc file to an application or otherwise affect its contents, this flaw could be used as denial-of-service.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.86.0-r0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-3446_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-3446] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. One of those\nchecks confirms that the modulus ('p' parameter) is not too large. Trying to use\na very large modulus is slow and OpenSSL will not normally use a modulus which\nis over 10,000 bits in length.\n\nHowever the DH_check() function checks numerous aspects of the key or parameters\nthat have been supplied. Some of those checks use the supplied modulus value\neven if it has already been found to be too large.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulernable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the '-check' option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.1.1-r3]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-5678_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-5678] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "Issue summary: Generating excessively long X9.42 DH keys or checking\nexcessively long X9.42 DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_generate_key() to\ngenerate an X9.42 DH key may experience long delays.  Likewise, applications\nthat use DH_check_pub_key(), DH_check_pub_key_ex() or EVP_PKEY_public_check()\nto check an X9.42 DH key or X9.42 DH parameters may experience long delays.\nWhere the key or parameters that are being checked have been obtained from\nan untrusted source this may lead to a Denial of Service.\n\nWhile DH_check() performs all the necessary checks (as of CVE-2023-3817),\nDH_check_pub_key() doesn't make any of these checks, and is therefore\nvulnerable for excessively large P and Q parameters.\n\nLikewise, while DH_generate_key() performs a check for an excessively large\nP, it doesn't check for an excessively large Q.\n\nAn application that calls DH_generate_key() or DH_check_pub_key() and\nsupplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nDH_generate_key() and DH_check_pub_key() are also called by a number of\nother OpenSSL functions.  An application calling any of those other\nfunctions may similarly be affected.  The other functions affected by this\nare DH_check_pub_key_ex(), EVP_PKEY_public_check(), and EVP_PKEY_generate().\n\nAlso vulnerable are the OpenSSL pkey command line application when using the\n\"-pubcheck\" option, as well as the OpenSSL genpkey command line application.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.1.4-r1]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-32208_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-32208] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "When curl \u003c 7.84.0 does FTP transfers secured by krb5, it handles message verification failures wrongly. This flaw makes it possible for a Man-In-The-Middle attack to go unnoticed and even allows it to inject data to the client.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.79.1-r2]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2022-27774_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-27774] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "An insufficiently protected credentials vulnerability exists in curl 4.9 to and include curl 7.82.0 are affected that could allow an attacker to extract credentials when follows HTTP(S) redirects is used with authentication could leak credentials to other services that exist on different protocols or port numbers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.7      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.79.1-r1]   |"
              },
              "properties": {
                "security-severity": "5.7"
              }
            },
            {
              "id": "CVE-2021-22876_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2021-22876] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "curl 7.1.1 to and including 7.75.0 is vulnerable to an \"Exposure of Private Personal Information to an Unauthorized Actor\" by leaking credentials in the HTTP Referer: header. libcurl does not strip off user credentials from the URL when automatically populating the Referer: HTTP request header field in outgoing HTTP requests, and therefore risks leaking sensitive data to the server that is the target of the second HTTP request.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.76.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-3995_3.13:libmount_2.36.1-r1",
              "shortDescription": {
                "text": "[CVE-2021-3995] 3.13:libmount 2.36.1-r1"
              },
              "help": {
                "text": "A logic error was found in the libmount library of util-linux in the function that allows an unprivileged user to unmount a FUSE filesystem. This flaw allows an unprivileged local attacker to unmount FUSE filesystems that belong to certain other users who have a UID that is a prefix of the UID of the attacker in its string form. An attacker may use this flaw to cause a denial of service to applications that use the affected filesystems.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [2.37.3-r0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2021-22947_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2021-22947] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "When curl \u003e= 7.20.0 and \u003c= 7.78.0 connects to an IMAP or POP3 server to retrieve data using STARTTLS to upgrade to TLS security, the server can respond and send back multiple responses at once that curl caches. curl would then upgrade to TLS but not flush the in-queue of cached responses but instead continue using and trustingthe responses it got *before* the TLS handshake as if they were authenticated.Using this flaw, it allows a Man-In-The-Middle attacker to first inject the fake responses, then pass-through the TLS traffic from the legitimate server and trick curl into sending data back to the user thinking the attacker's injected data comes from the TLS-protected server.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.79.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2022-4203_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2022-4203] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "A read buffer overrun can be triggered in X.509 certificate verification,\nspecifically in name constraint checking. Note that this occurs\nafter certificate chain signature verification and requires either a\nCA to have signed the malicious certificate or for the application to\ncontinue certificate verification despite failure to construct a path\nto a trusted issuer.\n\nThe read buffer overrun might result in a crash which could lead to\na denial of service attack. In theory it could also result in the disclosure\nof private memory contents (such as private keys, or sensitive plaintext)\nalthough we are not aware of any working exploit leading to memory\ncontents disclosure as of the time of release of this advisory.\n\nIn a TLS client, this can be triggered by connecting to a malicious\nserver. In a TLS server, this can be triggered if the server requests\nclient authentication and a malicious client connects.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.9      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "4.9"
              }
            },
            {
              "id": "CVE-2022-4304_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2022-4304] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "A timing based side channel exists in the OpenSSL RSA Decryption implementation\nwhich could be sufficient to recover a plaintext across a network in a\nBleichenbacher style attack. To achieve a successful decryption an attacker\nwould have to be able to send a very large number of trial messages for\ndecryption. The vulnerability affects all RSA padding modes: PKCS#1 v1.5,\nRSA-OEAP and RSASVE.\n\nFor example, in a TLS connection, RSA is commonly used by a client to send an\nencrypted pre-master secret to the server. An attacker that had observed a\ngenuine connection between a client and a server could use this flaw to send\ntrial messages to the server and record the time taken to process them. After a\nsufficiently large number of messages the attacker could recover the pre-master\nsecret used for the original connection and thus be able to decrypt the\napplication data sent over that connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-2975_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-2975] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "Issue summary: The AES-SIV cipher implementation contains a bug that causes\nit to ignore empty associated data entries which are unauthenticated as\na consequence.\n\nImpact summary: Applications that use the AES-SIV algorithm and want to\nauthenticate empty data entries as associated data can be mislead by removing\nadding or reordering such empty entries as these are ignored by the OpenSSL\nimplementation. We are currently unaware of any such applications.\n\nThe AES-SIV algorithm allows for authentication of multiple associated\ndata entries along with the encryption. To authenticate empty data the\napplication has to call EVP_EncryptUpdate() (or EVP_CipherUpdate()) with\nNULL pointer as the output buffer and 0 as the input buffer length.\nThe AES-SIV implementation in OpenSSL just returns success for such a call\ninstead of performing the associated data authentication operation.\nThe empty data thus will not be authenticated.\n\nAs this issue does not affect non-empty associated data authentication and\nwe expect it to be rare for an application to use empty associated data\nentries this is qualified as Low severity issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.1.1-r2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-4203_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2022-4203] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "A read buffer overrun can be triggered in X.509 certificate verification,\nspecifically in name constraint checking. Note that this occurs\nafter certificate chain signature verification and requires either a\nCA to have signed the malicious certificate or for the application to\ncontinue certificate verification despite failure to construct a path\nto a trusted issuer.\n\nThe read buffer overrun might result in a crash which could lead to\na denial of service attack. In theory it could also result in the disclosure\nof private memory contents (such as private keys, or sensitive plaintext)\nalthough we are not aware of any working exploit leading to memory\ncontents disclosure as of the time of release of this advisory.\n\nIn a TLS client, this can be triggered by connecting to a malicious\nserver. In a TLS server, this can be triggered if the server requests\nclient authentication and a malicious client connects.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.9      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "4.9"
              }
            },
            {
              "id": "CVE-2022-32208_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-32208] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "When curl \u003c 7.84.0 does FTP transfers secured by krb5, it handles message verification failures wrongly. This flaw makes it possible for a Man-In-The-Middle attack to go unnoticed and even allows it to inject data to the client.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.79.1-r2]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2022-27779_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-27779] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "libcurl wrongly allows cookies to be set for Top Level Domains (TLDs) if thehost name is provided with a trailing dot.curl can be told to receive and send cookies. curl's \"cookie engine\" can bebuilt with or without [Public Suffix List](https://publicsuffix.org/)awareness. If PSL support not provided, a more rudimentary check exists to atleast prevent cookies from being set on TLDs. This check was broken if thehost name in the URL uses a trailing dot.This can allow arbitrary sites to set cookies that then would get sent to adifferent and unrelated site or domain.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.83.1-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2020-29511_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2020-29511] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "The encoding/xml package in Go (all versions) does not correctly preserve the semantics of element namespace prefixes during tokenization round-trips, which allows an attacker to craft inputs that behave in conflicting ways during different stages of processing in affected downstream applications.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.6      | Not Covered       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.15.6]   |"
              },
              "properties": {
                "security-severity": "5.6"
              }
            },
            {
              "id": "CVE-2021-24032_3.13:zstd-libs_1.4.5-r3",
              "shortDescription": {
                "text": "[CVE-2021-24032] 3.13:zstd-libs 1.4.5-r3"
              },
              "help": {
                "text": "Beginning in v1.4.1 and prior to v1.4.9, due to an incomplete fix for CVE-2021-24031, the Zstandard command-line utility created output files with default permissions and restricted those permissions immediately afterwards. Output files could therefore momentarily be readable or writable to unintended parties.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.7      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [1.4.9-r0]   |"
              },
              "properties": {
                "security-severity": "4.7"
              }
            },
            {
              "id": "CVE-2022-30115_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-30115] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "Using its HSTS support, curl can be instructed to use HTTPS directly insteadof using an insecure clear-text HTTP step even when HTTP is provided in theURL. This mechanism could be bypassed if the host name in the given URL used atrailing dot while not using one when it built the HSTS cache. Or the otherway around - by having the trailing dot in the HSTS cache and *not* using thetrailing dot in the URL.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.3      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.83.1-r0]   |"
              },
              "properties": {
                "security-severity": "4.3"
              }
            },
            {
              "id": "CVE-2023-42364_3.13:ssl_client_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2023-42364] 3.13:ssl_client 1.32.1-r3"
              },
              "help": {
                "text": "A use-after-free vulnerability in BusyBox v.1.36.1 allows attackers to cause a denial of service via a crafted awk pattern in the awk.c evaluate function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-23915_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-23915] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "A cleartext transmission of sensitive information vulnerability exists in curl \u003cv7.88.0 that could cause HSTS functionality to behave incorrectly when multiple URLs are requested in parallel. Using its HSTS support, curl can be instructed to use HTTPS instead of using an insecure clear-text HTTP step even when HTTP is provided in the URL. This HSTS mechanism would however surprisingly fail when multiple transfers are done in parallel as the HSTS cache file gets overwritten by the most recentlycompleted transfer. A later HTTP-only transfer to the earlier host name would then *not* get upgraded properly to HSTS.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.88.0-r0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-1705_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2022-1705] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Acceptance of some invalid Transfer-Encoding headers in the HTTP/1 client in net/http before Go 1.17.12 and Go 1.18.4 allows HTTP request smuggling if combined with an intermediate server that also improperly fails to reject the header as invalid.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-27776_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-27776] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "A insufficiently protected credentials vulnerability in fixed in curl 7.83.0 might leak authentication or cookie header data on HTTP redirects to the same host but another port number.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.79.1-r1]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-43552_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-43552] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "A use after free vulnerability exists in curl \u003c7.87.0. Curl can be asked to *tunnel* virtually all protocols it supports through an HTTP proxy. HTTP proxies can (and often do) deny such tunnel operations. When getting denied to tunnel the specific protocols SMB or TELNET, curl would use a heap-allocated struct after it had been freed, in its transfer shutdown code path.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.87.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2021-34558_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2021-34558] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "The crypto/tls package of Go through 1.16.5 does not properly assert that the type of public key in an X.509 certificate matches the expected type when doing a RSA based key exchange, allowing a malicious TLS server to cause a TLS client to panic.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.15.14], [1.16.6]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2021-3996_3.13:libuuid_2.36.1-r1",
              "shortDescription": {
                "text": "[CVE-2021-3996] 3.13:libuuid 2.36.1-r1"
              },
              "help": {
                "text": "A logic error was found in the libmount library of util-linux in the function that allows an unprivileged user to unmount a FUSE filesystem. This flaw allows a local user on a vulnerable system to unmount other users' filesystems that are either world-writable themselves (like /tmp) or mounted in a world-writable directory. An attacker may use this flaw to cause a denial of service to applications that use the affected filesystems.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [2.37.3-r0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2021-42375_3.13:busybox_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2021-42375] 3.13:busybox 1.32.1-r3"
              },
              "help": {
                "text": "An incorrect handling of a special element in Busybox's ash applet leads to denial of service when processing a crafted shell command, due to the shell mistaking specific characters for reserved characters. This may be used for DoS under rare conditions of filtered command input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.32.1-r7]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-45284_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2023-45284] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "On Windows, The IsLocal function does not correctly detect reserved device names in some cases. Reserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local. With fix, IsLocal now correctly reports these names as non-local.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.20.11], [1.21.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-27774_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-27774] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "An insufficiently protected credentials vulnerability exists in curl 4.9 to and include curl 7.82.0 are affected that could allow an attacker to extract credentials when follows HTTP(S) redirects is used with authentication could leak credentials to other services that exist on different protocols or port numbers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.7      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.79.1-r1]   |"
              },
              "properties": {
                "security-severity": "5.7"
              }
            },
            {
              "id": "CVE-2022-24769_github.com/docker/docker_20.10.4+incompatible",
              "shortDescription": {
                "text": "[CVE-2022-24769] github.com/docker/docker 20.10.4+incompatible"
              },
              "help": {
                "text": "Moby is an open-source project created by Docker to enable and accelerate software containerization. A bug was found in Moby (Docker Engine) prior to version 20.10.14 where containers were incorrectly started with non-empty inheritable Linux process capabilities, creating an atypical Linux environment and enabling programs with inheritable file capabilities to elevate those capabilities to the permitted set during `execve(2)`. Normally, when executable programs have specified permitted file capabilities, otherwise unprivileged users and processes can execute those programs and gain the specified file capabilities up to the bounding set. Due to this bug, containers which included executable programs with inheritable file capabilities allowed otherwise unprivileged users and processes to additionally gain these inheritable file capabilities up to the container's bounding set. Containers which use Linux users and groups to perform privilege separation inside the container are most directly impacted. This bug did not affect the container security sandbox as the inheritable set never contained more capabilities than were included in the container's bounding set. This bug has been fixed in Moby (Docker Engine) 20.10.14. Running containers should be stopped, deleted, and recreated for the inheritable capabilities to be reset. This fix changes Moby (Docker Engine) behavior such that containers are started with a more typical Linux environment. As a workaround, the entry point of a container can be modified to use a utility like `capsh(1)` to drop inheritable capabilities prior to the primary process starting.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [20.10.14]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-23916_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-23916] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "An allocation of resources without limits or throttling vulnerability exists in curl \u003cv7.88.0 based on the \"chained\" HTTP compression algorithms, meaning that a server response can be compressed multiple times and potentially with differentalgorithms. The number of acceptable \"links\" in this \"decompression chain\" wascapped, but the cap was implemented on a per-header basis allowing a maliciousserver to insert a virtually unlimited number of compression steps simply byusing many headers. The use of such a decompression chain could result in a \"malloc bomb\", making curl end up spending enormous amounts of allocated heap memory, or trying to and returning out of memory errors.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.88.0-r0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-32205_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-32205] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "A malicious server can serve excessive amounts of `Set-Cookie:` headers in a HTTP response to curl and curl \u003c 7.84.0 stores all of them. A sufficiently large amount of (big) cookies make subsequent HTTP requests to this, or other servers to which the cookies match, create requests that become larger than the threshold that curl uses internally to avoid sending crazy large requests (1048576 bytes) and instead returns an error.This denial state might remain for as long as the same cookies are kept, match and haven't expired. Due to cookie matching rules, a server on `foo.example.com` can set cookies that also would match for `bar.example.com`, making it it possible for a \"sister server\" to effectively cause a denial of service for a sibling site on the same second level domain using this method.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.3      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.79.1-r2]   |"
              },
              "properties": {
                "security-severity": "4.3"
              }
            },
            {
              "id": "CVE-2023-28842_github.com/docker/docker_20.10.4+incompatible",
              "shortDescription": {
                "text": "[CVE-2023-28842] github.com/docker/docker 20.10.4+incompatible"
              },
              "help": {
                "text": "Moby) is an open source container framework developed by Docker Inc. that is distributed as Docker, Mirantis Container Runtime, and various other downstream projects/products. The Moby daemon component (`dockerd`), which is developed as moby/moby is commonly referred to as *Docker*.\n\nSwarm Mode, which is compiled in and delivered by default in `dockerd` and is thus present in most major Moby downstreams, is a simple, built-in container orchestrator that is implemented through a combination of SwarmKit and supporting network code.\n\nThe `overlay` network driver is a core feature of Swarm Mode, providing isolated virtual LANs that allow communication between containers and services across the cluster. This driver is an implementation/user of VXLAN, which encapsulates link-layer (Ethernet) frames in UDP datagrams that tag the frame with the VXLAN metadata, including a VXLAN Network ID (VNI) that identifies the originating overlay network. In addition, the overlay network driver supports an optional, off-by-default encrypted mode, which is especially useful when VXLAN packets traverses an untrusted network between nodes.\n\nEncrypted overlay networks function by encapsulating the VXLAN datagrams through the use of the IPsec Encapsulating Security Payload protocol in Transport mode. By deploying IPSec encapsulation, encrypted overlay networks gain the additional properties of source authentication through cryptographic proof, data integrity through check-summing, and confidentiality through encryption.\n\nWhen setting an endpoint up on an encrypted overlay network, Moby installs three iptables (Linux kernel firewall) rules that enforce both incoming and outgoing IPSec. These rules rely on the `u32` iptables extension provided by the `xt_u32` kernel module to directly filter on a VXLAN packet's VNI field, so that IPSec guarantees can be enforced on encrypted overlay networks without interfering with other overlay networks or other users of VXLAN.\n\nThe `overlay` driver dynamically and lazily defines the kernel config...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.8      | Not Covered       | `sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [20.10.24], [23.0.3]   |"
              },
              "properties": {
                "security-severity": "6.8"
              }
            },
            {
              "id": "CVE-2021-41091_github.com/docker/docker_20.10.4+incompatible",
              "shortDescription": {
                "text": "[CVE-2021-41091] github.com/docker/docker 20.10.4+incompatible"
              },
              "help": {
                "text": "Moby is an open-source project created by Docker to enable software containerization. A bug was found in Moby (Docker Engine) where the data directory (typically `/var/lib/docker`) contained subdirectories with insufficiently restricted permissions, allowing otherwise unprivileged Linux users to traverse directory contents and execute programs. When containers included executable programs with extended permission bits (such as `setuid`), unprivileged Linux users could discover and execute those programs. When the UID of an unprivileged Linux user on the host collided with the file owner or group inside a container, the unprivileged Linux user on the host could discover, read, and modify those files. This bug has been fixed in Moby (Docker Engine) 20.10.9. Users should update to this version as soon as possible. Running containers should be stopped and restarted for the permissions to be fixed. For users unable to upgrade limit access to the host to trusted users. Limit access to host volumes to trusted containers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.3      | Not Covered       | `sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [20.10.9]   |"
              },
              "properties": {
                "security-severity": "6.3"
              }
            },
            {
              "id": "CVE-2022-32206_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-32206] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "curl \u003c 7.84.0 supports \"chained\" HTTP compression algorithms, meaning that a serverresponse can be compressed multiple times and potentially with different algorithms. The number of acceptable \"links\" in this \"decompression chain\" was unbounded, allowing a malicious server to insert a virtually unlimited number of compression steps.The use of such a decompression chain could result in a \"malloc bomb\", makingcurl end up spending enormous amounts of allocated heap memory, or trying toand returning out of memory errors.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.79.1-r2]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2021-4160_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2021-4160] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "There is a carry propagation bug in the MIPS32 and MIPS64 squaring procedure. Many EC algorithms are affected, including some of the TLS 1.3 default curves. Impact was not analyzed in detail, because the pre-requisites for attack are considered unlikely and include reusing private keys. Analysis suggests that attacks against RSA and DSA as a result of this defect would be very difficult to perform and are not believed likely. Attacks against DH are considered just feasible (although very difficult) because most of the work necessary to deduce information about a private key may be performed offline. The amount of resources required for such an attack would be significant. However, for an attack on TLS to be meaningful, the server would have to share the DH private key among multiple clients, which is no longer an option since CVE-2016-0701. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0.0. It was addressed in the releases of 1.1.1m and 3.0.1 on the 15th of December 2021. For the 1.0.2 release it is addressed in git commit 6fc1aaaf3 that is available to premium support customers only. It will be made available in 1.0.2zc when it is released. The issue only affects OpenSSL on MIPS platforms. Fixed in OpenSSL 3.0.1 (Affected 3.0.0). Fixed in OpenSSL 1.1.1m (Affected 1.1.1-1.1.1l). Fixed in OpenSSL 1.0.2zc-dev (Affected 1.0.2-1.0.2zb).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [1.1.1n-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2024-29018_github.com/docker/docker_20.10.4+incompatible",
              "shortDescription": {
                "text": "[CVE-2024-29018] github.com/docker/docker 20.10.4+incompatible"
              },
              "help": {
                "text": "Moby is an open source container framework that is a key component of Docker Engine, Docker Desktop, and other distributions of container tooling or runtimes. Moby's networking implementation allows for many networks, each with their own IP address range and gateway, to be defined. This feature is frequently referred to as custom networks, as each network can have a different driver, set of parameters and thus behaviors. When creating a network, the `--internal` flag is used to designate a network as _internal_. The `internal` attribute in a docker-compose.yml file may also be used to mark a network _internal_, and other API clients may specify the `internal` parameter as well.\n\nWhen containers with networking are created, they are assigned unique network interfaces and IP addresses. The host serves as a router for non-internal networks, with a gateway IP that provides SNAT/DNAT to/from container IPs.\n\nContainers on an internal network may communicate between each other, but are precluded from communicating with any networks the host has access to (LAN or WAN) as no default route is configured, and firewall rules are set up to drop all outgoing traffic. Communication with the gateway IP address (and thus appropriately configured host services) is possible, and the host may communicate with any container IP directly.\n\nIn addition to configuring the Linux kernel's various networking features to enable container networking, `dockerd` directly provides some services to container networks. Principal among these is serving as a resolver, enabling service discovery, and resolution of names from an upstream resolver.\n\nWhen a DNS request for a name that does not correspond to a container is received, the request is forwarded to the configured upstream resolver. This request is made from the container's network namespace: the level of access and routing of traffic is the same as if the request was made by the container itself.\n\nAs a consequence of this design, containers solely attached to an internal network will ...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [23.0.11], [25.0.5], [26.0.0-rc3]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2022-32206_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-32206] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "curl \u003c 7.84.0 supports \"chained\" HTTP compression algorithms, meaning that a serverresponse can be compressed multiple times and potentially with different algorithms. The number of acceptable \"links\" in this \"decompression chain\" was unbounded, allowing a malicious server to insert a virtually unlimited number of compression steps.The use of such a decompression chain could result in a \"malloc bomb\", makingcurl end up spending enormous amounts of allocated heap memory, or trying toand returning out of memory errors.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.79.1-r2]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-27538_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-27538] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "An authentication bypass vulnerability exists in libcurl prior to v8.0.0 where it reuses a previously established SSH connection despite the fact that an SSH option was modified, which should have prevented reuse. libcurl maintains a pool of previously used connections to reuse them for subsequent transfers if the configurations match. However, two SSH settings were omitted from the configuration check, allowing them to match easily, potentially leading to the reuse of an inappropriate connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.0.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-46219_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-46219] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "When saving HSTS data to an excessively long file name, curl could end up\nremoving all contents, making subsequent requests using that file unaware of\nthe HSTS status they should otherwise use.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.5.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-37600_3.13:libuuid_2.36.1-r1",
              "shortDescription": {
                "text": "[CVE-2021-37600] 3.13:libuuid 2.36.1-r1"
              },
              "help": {
                "text": "An integer overflow in util-linux through 2.37.1 can potentially cause a buffer overflow if an attacker were able to use system resources in a way that leads to a large number in the /proc/sysvipc/sem file. NOTE: this is unexploitable in GNU C Library environments, and possibly in all realistic environments.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [2.37.2-r0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-3446_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-3446] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. One of those\nchecks confirms that the modulus ('p' parameter) is not too large. Trying to use\na very large modulus is slow and OpenSSL will not normally use a modulus which\nis over 10,000 bits in length.\n\nHowever the DH_check() function checks numerous aspects of the key or parameters\nthat have been supplied. Some of those checks use the supplied modulus value\neven if it has already been found to be too large.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulernable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the '-check' option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [3.1.1-r3]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-2975_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-2975] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "Issue summary: The AES-SIV cipher implementation contains a bug that causes\nit to ignore empty associated data entries which are unauthenticated as\na consequence.\n\nImpact summary: Applications that use the AES-SIV algorithm and want to\nauthenticate empty data entries as associated data can be mislead by removing\nadding or reordering such empty entries as these are ignored by the OpenSSL\nimplementation. We are currently unaware of any such applications.\n\nThe AES-SIV algorithm allows for authentication of multiple associated\ndata entries along with the encryption. To authenticate empty data the\napplication has to call EVP_EncryptUpdate() (or EVP_CipherUpdate()) with\nNULL pointer as the output buffer and 0 as the input buffer length.\nThe AES-SIV implementation in OpenSSL just returns success for such a call\ninstead of performing the associated data authentication operation.\nThe empty data thus will not be authenticated.\n\nAs this issue does not affect non-empty associated data authentication and\nwe expect it to be rare for an application to use empty associated data\nentries this is qualified as Low severity issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [3.1.1-r2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-3817_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-3817] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. After fixing\nCVE-2023-3446 it was discovered that a large q parameter value can also trigger\nan overly long computation during some of these checks. A correct q value,\nif present, cannot be larger than the modulus p parameter, thus it is\nunnecessary to perform these checks if q is larger than p.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulnerable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the \"-check\" option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [3.1.2-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-42375_3.13:ssl_client_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2021-42375] 3.13:ssl_client 1.32.1-r3"
              },
              "help": {
                "text": "An incorrect handling of a special element in Busybox's ash applet leads to denial of service when processing a crafted shell command, due to the shell mistaking specific characters for reserved characters. This may be used for DoS under rare conditions of filtered command input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.32.1-r7]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-46218_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-46218] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "This flaw allows a malicious HTTP server to set \"super cookies\" in curl that\nare then passed back to more origins than what is otherwise allowed or\npossible. This allows a site to set cookies that then would get sent to\ndifferent and unrelated sites and domains.\n\nIt could do this by exploiting a mixed case flaw in curl's function that\nverifies a given cookie domain against the Public Suffix List (PSL). For\nexample a cookie could be set with `domain=co.UK` when the URL used a lower\ncase hostname `curl.co.uk`, even though `co.uk` is listed as a PSL domain.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.5.0-r0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-32205_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-32205] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "A malicious server can serve excessive amounts of `Set-Cookie:` headers in a HTTP response to curl and curl \u003c 7.84.0 stores all of them. A sufficiently large amount of (big) cookies make subsequent HTTP requests to this, or other servers to which the cookies match, create requests that become larger than the threshold that curl uses internally to avoid sending crazy large requests (1048576 bytes) and instead returns an error.This denial state might remain for as long as the same cookies are kept, match and haven't expired. Due to cookie matching rules, a server on `foo.example.com` can set cookies that also would match for `bar.example.com`, making it it possible for a \"sister server\" to effectively cause a denial of service for a sibling site on the same second level domain using this method.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.3      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.79.1-r2]   |"
              },
              "properties": {
                "security-severity": "4.3"
              }
            },
            {
              "id": "CVE-2023-51384_3.13:openssh-keygen_8.4_p1-r2",
              "shortDescription": {
                "text": "[CVE-2023-51384] 3.13:openssh-keygen 8.4_p1-r2"
              },
              "help": {
                "text": "In ssh-agent in OpenSSH before 9.6, certain destination constraints can be incompletely applied. When destination constraints are specified during addition of PKCS#11-hosted private keys, these constraints are only applied to the first key, even if a PKCS#11 token returns multiple keys.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar `       | [9.1_p1-r5]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2021-41190_github.com/opencontainers/image-spec_1.0.1",
              "shortDescription": {
                "text": "[CVE-2021-41190] github.com/opencontainers/image-spec 1.0.1"
              },
              "help": {
                "text": "The OCI Distribution Spec project defines an API protocol to facilitate and standardize the distribution of content. In the OCI Distribution Specification version 1.0.0 and prior, the Content-Type header alone was used to determine the type of document during push and pull operations. Documents that contain both “manifests” and “layers” fields could be interpreted as either a manifest or an index in the absence of an accompanying Content-Type header. If a Content-Type header changed between two pulls of the same digest, a client may interpret the resulting content differently. The OCI Distribution Specification has been updated to require that a mediaType value present in a manifest or index match the Content-Type header used during the push and pull operations. Clients pulling from a registry may distrust the Content-Type header and reject an ambiguous document that contains both “manifests” and “layers” fields or “manifests” and “config” fields if they are unable to update to version 1.0.1 of the spec.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.0      | Not Covered       | `sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.0.2]   |"
              },
              "properties": {
                "security-severity": "5.0"
              }
            },
            {
              "id": "CVE-2024-0727_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2024-0727] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "Issue summary: Processing a maliciously formatted PKCS12 file may lead OpenSSL\nto crash leading to a potential Denial of Service attack\n\nImpact summary: Applications loading files in the PKCS12 format from untrusted\nsources might terminate abruptly.\n\nA file in PKCS12 format can contain certificates and keys and may come from an\nuntrusted source. The PKCS12 specification allows certain fields to be NULL, but\nOpenSSL does not correctly check for this case. This can lead to a NULL pointer\ndereference that results in OpenSSL crashing. If an application processes PKCS12\nfiles from an untrusted source using the OpenSSL APIs then that application will\nbe vulnerable to this issue.\n\nOpenSSL APIs that are vulnerable to this are: PKCS12_parse(),\nPKCS12_unpack_p7data(), PKCS12_unpack_p7encdata(), PKCS12_unpack_authsafes()\nand PKCS12_newpass().\n\nWe have also fixed a similar issue in SMIME_write_PKCS7(). However since this\nfunction is related to writing data we do not consider it security significant.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [3.1.4-r5]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2021-3114_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2021-3114] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "In Go before 1.14.14 and 1.15.x before 1.15.7, crypto/elliptic/p224.go can generate incorrect outputs, related to an underflow of the lowest limb during the final complete reduction in the P-224 field.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.14.14], [1.15.7]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-1255_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-1255] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "Issue summary: The AES-XTS cipher decryption implementation for 64 bit ARM\nplatform contains a bug that could cause it to read past the input buffer,\nleading to a crash.\n\nImpact summary: Applications that use the AES-XTS algorithm on the 64 bit ARM\nplatform can crash in rare circumstances. The AES-XTS algorithm is usually\nused for disk encryption.\n\nThe AES-XTS cipher decryption implementation for 64 bit ARM platform will read\npast the end of the ciphertext buffer if the ciphertext size is 4 mod 5 in 16\nbyte blocks, e.g. 144 bytes or 1024 bytes. If the memory after the ciphertext\nbuffer is unmapped, this will trigger a crash which results in a denial of\nservice.\n\nIf an attacker can control the size and location of the ciphertext buffer\nbeing decrypted by an application using AES-XTS on 64 bit ARM, the\napplication is affected. This is fairly unlikely making this issue\na Low severity one.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [3.1.0-r4]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-3817_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-3817] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. After fixing\nCVE-2023-3446 it was discovered that a large q parameter value can also trigger\nan overly long computation during some of these checks. A correct q value,\nif present, cannot be larger than the modulus p parameter, thus it is\nunnecessary to perform these checks if q is larger than p.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulnerable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the \"-check\" option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.1.2-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-4203_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2022-4203] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "A read buffer overrun can be triggered in X.509 certificate verification,\nspecifically in name constraint checking. Note that this occurs\nafter certificate chain signature verification and requires either a\nCA to have signed the malicious certificate or for the application to\ncontinue certificate verification despite failure to construct a path\nto a trusted issuer.\n\nThe read buffer overrun might result in a crash which could lead to\na denial of service attack. In theory it could also result in the disclosure\nof private memory contents (such as private keys, or sensitive plaintext)\nalthough we are not aware of any working exploit leading to memory\ncontents disclosure as of the time of release of this advisory.\n\nIn a TLS client, this can be triggered by connecting to a malicious\nserver. In a TLS server, this can be triggered if the server requests\nclient authentication and a malicious client connects.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.9      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "4.9"
              }
            },
            {
              "id": "CVE-2023-42363_3.13:busybox_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2023-42363] 3.13:busybox 1.32.1-r3"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in xasprintf function in xfuncs_printf.c:344 in BusyBox v.1.36.1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.36.1-r27]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2022-4304_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2022-4304] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "A timing based side channel exists in the OpenSSL RSA Decryption implementation\nwhich could be sufficient to recover a plaintext across a network in a\nBleichenbacher style attack. To achieve a successful decryption an attacker\nwould have to be able to send a very large number of trial messages for\ndecryption. The vulnerability affects all RSA padding modes: PKCS#1 v1.5,\nRSA-OEAP and RSASVE.\n\nFor example, in a TLS connection, RSA is commonly used by a client to send an\nencrypted pre-master secret to the server. An attacker that had observed a\ngenuine connection between a client and a server could use this flaw to send\ntrial messages to the server and record the time taken to process them. After a\nsufficiently large number of messages the attacker could recover the pre-master\nsecret used for the original connection and thus be able to decrypt the\napplication data sent over that connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2021-22897_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2021-22897] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "curl 7.61.0 through 7.76.1 suffers from exposure of data element to wrong session due to a mistake in the code for CURLOPT_SSL_CIPHER_LIST when libcurl is built to use the Schannel TLS library. The selected cipher set was stored in a single \"static\" variable in the library, which has the surprising side-effect that if an application sets up multiple concurrent transfers, the last one that sets the ciphers will accidentally control the set used by all transfers. In a worst-case scenario, this weakens transport security significantly.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2009-3767_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2009-3767] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "libraries/libldap/tls_o.c in OpenLDAP 2.2 and 2.4, and possibly other versions, when OpenSSL is used, does not properly handle a '\\0' character in a domain name in the subject's Common Name (CN) field of an X.509 certificate, which allows man-in-the-middle attackers to spoof arbitrary SSL servers via a crafted certificate issued by a legitimate Certification Authority, a related issue to CVE-2009-2408.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2021-42376_3.13:busybox_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2021-42376] 3.13:busybox 1.32.1-r3"
              },
              "help": {
                "text": "A NULL pointer dereference in Busybox's hush applet leads to denial of service when processing a crafted shell command, due to missing validation after a \\x03 delimiter character. This may be used for DoS under very rare conditions of filtered command input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2020-22916_3.13:xz-libs_5.2.5-r0",
              "shortDescription": {
                "text": "[CVE-2020-22916] 3.13:xz-libs 5.2.5-r0"
              },
              "help": {
                "text": "An issue discovered in XZ 5.2.5 allows attackers to cause a denial of service via decompression of a crafted file. NOTE: the vendor disputes the claims of \"endless output\" and \"denial of service\" because decompression of the 17,486 bytes always results in 114,881,179 bytes, which is often a reasonable size increase.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2009-3767_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2009-3767] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "libraries/libldap/tls_o.c in OpenLDAP 2.2 and 2.4, and possibly other versions, when OpenSSL is used, does not properly handle a '\\0' character in a domain name in the subject's Common Name (CN) field of an X.509 certificate, which allows man-in-the-middle attackers to spoof arbitrary SSL servers via a crafted certificate issued by a legitimate Certification Authority, a related issue to CVE-2009-2408.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2021-22897_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2021-22897] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "curl 7.61.0 through 7.76.1 suffers from exposure of data element to wrong session due to a mistake in the code for CURLOPT_SSL_CIPHER_LIST when libcurl is built to use the Schannel TLS library. The selected cipher set was stored in a single \"static\" variable in the library, which has the surprising side-effect that if an application sets up multiple concurrent transfers, the last one that sets the ciphers will accidentally control the set used by all transfers. In a worst-case scenario, this weakens transport security significantly.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2007-2768_3.13:openssh-client_8.4_p1-r2",
              "shortDescription": {
                "text": "[CVE-2007-2768] 3.13:openssh-client 8.4_p1-r2"
              },
              "help": {
                "text": "OpenSSH, when using OPIE (One-Time Passwords in Everything) for PAM, allows remote attackers to determine the existence of certain user accounts, which displays a different response if the user account exists and is configured to use one-time passwords (OTP), a similar issue to CVE-2007-2243.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2016-20012_3.13:openssh-client_8.4_p1-r2",
              "shortDescription": {
                "text": "[CVE-2016-20012] 3.13:openssh-client 8.4_p1-r2"
              },
              "help": {
                "text": "OpenSSH through 8.7 allows remote attackers, who have a suspicion that a certain combination of username and public key is known to an SSH server, to test whether this suspicion is correct. This occurs because a challenge is sent only when that combination could be valid for a login session. NOTE: the vendor does not recognize user enumeration as a vulnerability for this product",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-42376_3.13:ssl_client_1.32.1-r3",
              "shortDescription": {
                "text": "[CVE-2021-42376] 3.13:ssl_client 1.32.1-r3"
              },
              "help": {
                "text": "A NULL pointer dereference in Busybox's hush applet leads to denial of service when processing a crafted shell command, due to missing validation after a \\x03 delimiter character. This may be used for DoS under very rare conditions of filtered command input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2009-3767_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2009-3767] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "libraries/libldap/tls_o.c in OpenLDAP 2.2 and 2.4, and possibly other versions, when OpenSSL is used, does not properly handle a '\\0' character in a domain name in the subject's Common Name (CN) field of an X.509 certificate, which allows man-in-the-middle attackers to spoof arbitrary SSL servers via a crafted certificate issued by a legitimate Certification Authority, a related issue to CVE-2009-2408.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2020-22916_3.13:xz_5.2.5-r0",
              "shortDescription": {
                "text": "[CVE-2020-22916] 3.13:xz 5.2.5-r0"
              },
              "help": {
                "text": "An issue discovered in XZ 5.2.5 allows attackers to cause a denial of service via decompression of a crafted file. NOTE: the vendor disputes the claims of \"endless output\" and \"denial of service\" because decompression of the 17,486 bytes always results in 114,881,179 bytes, which is often a reasonable size increase.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2007-2768_3.13:openssh-keygen_8.4_p1-r2",
              "shortDescription": {
                "text": "[CVE-2007-2768] 3.13:openssh-keygen 8.4_p1-r2"
              },
              "help": {
                "text": "OpenSSH, when using OPIE (One-Time Passwords in Everything) for PAM, allows remote attackers to determine the existence of certain user accounts, which displays a different response if the user account exists and is configured to use one-time passwords (OTP), a similar issue to CVE-2007-2243.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2016-20012_3.13:openssh-keygen_8.4_p1-r2",
              "shortDescription": {
                "text": "[CVE-2016-20012] 3.13:openssh-keygen 8.4_p1-r2"
              },
              "help": {
                "text": "OpenSSH through 8.7 allows remote attackers, who have a suspicion that a certain combination of username and public key is known to an SSH server, to test whether this suspicion is correct. This occurs because a challenge is sent only when that combination could be valid for a login session. NOTE: the vendor does not recognize user enumeration as a vulnerability for this product",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-22890_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2021-22890] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "curl 7.63.0 to and including 7.75.0 includes vulnerability that allows a malicious HTTPS proxy to MITM a connection due to bad handling of TLS 1.3 session tickets. When using a HTTPS proxy and TLS 1.3, libcurl can confuse session tickets arriving from the HTTPS proxy but work as if they arrived from the remote server and then wrongly \"short-cut\" the host handshake. When confusing the tickets, a HTTPS proxy can trick libcurl to use the wrong session ticket resume for the host and thereby circumvent the server TLS certificate check and make a MITM attack to be possible to perform unnoticed. Note that such a malicious HTTPS proxy needs to provide a certificate that curl will accept for the MITMed server for an attack to work - unless curl has been told to ignore the server certificate check.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.7      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.76.0-r0]   |"
              },
              "properties": {
                "security-severity": "3.7"
              }
            },
            {
              "id": "CVE-2021-22924_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2021-22924] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "libcurl keeps previously used connections in a connection pool for subsequenttransfers to reuse, if one of them matches the setup.Due to errors in the logic, the config matching function did not take 'issuercert' into account and it compared the involved paths *case insensitively*,which could lead to libcurl reusing wrong connections.File paths are, or can be, case sensitive on many systems but not all, and caneven vary depending on used file systems.The comparison also didn't include the 'issuer cert' which a transfer can setto qualify how to verify the server certificate.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.7      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.78.0-r0]   |"
              },
              "properties": {
                "security-severity": "3.7"
              }
            },
            {
              "id": "CVE-2023-29383_3.13:shadow-uidmap_4.8.1-r0",
              "shortDescription": {
                "text": "[CVE-2023-29383] 3.13:shadow-uidmap 4.8.1-r0"
              },
              "help": {
                "text": "In Shadow 4.13, it is possible to inject control characters into fields provided to the SUID program chfn (change finger). Although it is not possible to exploit this directly (e.g., adding a new user fails because \\n is in the block list), it is possible to misrepresent the /etc/passwd file when viewed. Use of \\r manipulations and Unicode characters to work around blocking of the : character make it possible to give the impression that a new user has been added. In other words, an adversary may be able to convince a system administrator to take the system offline (an indirect, social-engineered denial of service) by demonstrating that \"cat /etc/passwd\" shows a rogue user account.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.3      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [4.13-r4]   |"
              },
              "properties": {
                "security-severity": "3.3"
              }
            },
            {
              "id": "CVE-2022-35252_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-35252] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "When curl is used to retrieve and parse cookies from a HTTP(S) server, itaccepts cookies using control codes that when later are sent back to a HTTPserver might make the server return 400 responses. Effectively allowing a\"sister site\" to deny service to all siblings.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.7      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.79.1-r3]   |"
              },
              "properties": {
                "security-severity": "3.7"
              }
            },
            {
              "id": "CVE-2023-38546_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-38546] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "This flaw allows an attacker to insert cookies at will into a running program\nusing libcurl, if the specific series of conditions are met.\n\nlibcurl performs transfers. In its API, an application creates \"easy handles\"\nthat are the individual handles for single transfers.\n\nlibcurl provides a function call that duplicates en easy handle called\n[curl_easy_duphandle](https://curl.se/libcurl/c/curl_easy_duphandle.html).\n\nIf a transfer has cookies enabled when the handle is duplicated, the\ncookie-enable state is also cloned - but without cloning the actual\ncookies. If the source handle did not read any cookies from a specific file on\ndisk, the cloned version of the handle would instead store the file name as\n`none` (using the four ASCII letters, no quotes).\n\nSubsequent use of the cloned handle that does not explicitly set a source to\nload cookies from would then inadvertently load cookies from a file named\n`none` - if such a file exists and is readable in the current directory of the\nprogram using libcurl. And if using the correct file format of course.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.7      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.4.0-r0]   |"
              },
              "properties": {
                "security-severity": "3.7"
              }
            },
            {
              "id": "CVE-2021-22898_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2021-22898] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "curl 7.7 through 7.76.1 suffers from an information disclosure when the `-t` command line option, known as `CURLOPT_TELNETOPTIONS` in libcurl, is used to send variable=content pairs to TELNET servers. Due to a flaw in the option parser for sending NEW_ENV variables, libcurl could be made to pass on uninitialized data from a stack based buffer to the server, resulting in potentially revealing sensitive internal information to the server using a clear-text network protocol.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.1      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.77.0-r0]   |"
              },
              "properties": {
                "security-severity": "3.1"
              }
            },
            {
              "id": "CVE-2022-30629_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2022-30629] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Non-random values for ticket_age_add in session tickets in crypto/tls before Go 1.17.11 and Go 1.18.3 allow an attacker that can observe TLS handshakes to correlate successive connections by comparing ticket ages during session resumption.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.1      | Not Covered       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "3.1"
              }
            },
            {
              "id": "CVE-2023-38546_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-38546] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "This flaw allows an attacker to insert cookies at will into a running program\nusing libcurl, if the specific series of conditions are met.\n\nlibcurl performs transfers. In its API, an application creates \"easy handles\"\nthat are the individual handles for single transfers.\n\nlibcurl provides a function call that duplicates en easy handle called\n[curl_easy_duphandle](https://curl.se/libcurl/c/curl_easy_duphandle.html).\n\nIf a transfer has cookies enabled when the handle is duplicated, the\ncookie-enable state is also cloned - but without cloning the actual\ncookies. If the source handle did not read any cookies from a specific file on\ndisk, the cloned version of the handle would instead store the file name as\n`none` (using the four ASCII letters, no quotes).\n\nSubsequent use of the cloned handle that does not explicitly set a source to\nload cookies from would then inadvertently load cookies from a file named\n`none` - if such a file exists and is readable in the current directory of the\nprogram using libcurl. And if using the correct file format of course.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.7      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.4.0-r0]   |"
              },
              "properties": {
                "security-severity": "3.7"
              }
            },
            {
              "id": "CVE-2021-22924_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2021-22924] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "libcurl keeps previously used connections in a connection pool for subsequenttransfers to reuse, if one of them matches the setup.Due to errors in the logic, the config matching function did not take 'issuercert' into account and it compared the involved paths *case insensitively*,which could lead to libcurl reusing wrong connections.File paths are, or can be, case sensitive on many systems but not all, and caneven vary depending on used file systems.The comparison also didn't include the 'issuer cert' which a transfer can setto qualify how to verify the server certificate.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.7      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.78.0-r0]   |"
              },
              "properties": {
                "security-severity": "3.7"
              }
            },
            {
              "id": "CVE-2021-22898_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2021-22898] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "curl 7.7 through 7.76.1 suffers from an information disclosure when the `-t` command line option, known as `CURLOPT_TELNETOPTIONS` in libcurl, is used to send variable=content pairs to TELNET servers. Due to a flaw in the option parser for sending NEW_ENV variables, libcurl could be made to pass on uninitialized data from a stack based buffer to the server, resulting in potentially revealing sensitive internal information to the server using a clear-text network protocol.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.1      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.77.0-r0]   |"
              },
              "properties": {
                "security-severity": "3.1"
              }
            },
            {
              "id": "CVE-2021-22890_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2021-22890] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "curl 7.63.0 to and including 7.75.0 includes vulnerability that allows a malicious HTTPS proxy to MITM a connection due to bad handling of TLS 1.3 session tickets. When using a HTTPS proxy and TLS 1.3, libcurl can confuse session tickets arriving from the HTTPS proxy but work as if they arrived from the remote server and then wrongly \"short-cut\" the host handshake. When confusing the tickets, a HTTPS proxy can trick libcurl to use the wrong session ticket resume for the host and thereby circumvent the server TLS certificate check and make a MITM attack to be possible to perform unnoticed. Note that such a malicious HTTPS proxy needs to provide a certificate that curl will accept for the MITMed server for an attack to work - unless curl has been told to ignore the server certificate check.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.7      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.76.0-r0]   |"
              },
              "properties": {
                "security-severity": "3.7"
              }
            },
            {
              "id": "CVE-2022-35252_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-35252] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "When curl is used to retrieve and parse cookies from a HTTP(S) server, itaccepts cookies using control codes that when later are sent back to a HTTPserver might make the server return 400 responses. Effectively allowing a\"sister site\" to deny service to all siblings.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.7      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.79.1-r3]   |"
              },
              "properties": {
                "security-severity": "3.7"
              }
            },
            {
              "id": "CVE-2021-36368_3.13:openssh-keygen_8.4_p1-r2",
              "shortDescription": {
                "text": "[CVE-2021-36368] 3.13:openssh-keygen 8.4_p1-r2"
              },
              "help": {
                "text": "An issue was discovered in OpenSSH before 8.9. If a client is using public-key authentication with agent forwarding but without -oLogLevel=verbose, and an attacker has silently modified the server to support the None authentication option, then the user cannot determine whether FIDO authentication is going to confirm that the user wishes to connect to that server, or that the user wishes to allow that server to connect to a different server on the user's behalf. NOTE: the vendor's position is \"this is not an authentication bypass, since nothing is being bypassed.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.7      | Not Covered       | `sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "3.7"
              }
            },
            {
              "id": "CVE-2021-36368_3.13:openssh-client_8.4_p1-r2",
              "shortDescription": {
                "text": "[CVE-2021-36368] 3.13:openssh-client 8.4_p1-r2"
              },
              "help": {
                "text": "An issue was discovered in OpenSSH before 8.9. If a client is using public-key authentication with agent forwarding but without -oLogLevel=verbose, and an attacker has silently modified the server to support the None authentication option, then the user cannot determine whether FIDO authentication is going to confirm that the user wishes to connect to that server, or that the user wishes to allow that server to connect to a different server on the user's behalf. NOTE: the vendor's position is \"this is not an authentication bypass, since nothing is being bypassed.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.7      | Not Covered       | `sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "3.7"
              }
            },
            {
              "id": "CVE-2024-2466_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2024-2466] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "libcurl did not check the server certificate of TLS connections done to a host specified as an IP address, when built to use mbedTLS.  libcurl would wrongly avoid using the set hostname function when the specified hostname was given as an IP address, therefore completely skipping the certificate check. This affects all uses of TLS protocols (HTTPS, FTPS, IMAPS, POPS3, SMTPS, etc).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-6237_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-6237] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "Issue summary: Checking excessively long invalid RSA public keys may take\na long time.\n\nImpact summary: Applications that use the function EVP_PKEY_public_check()\nto check RSA public keys may experience long delays. Where the key that\nis being checked has been obtained from an untrusted source this may lead\nto a Denial of Service.\n\nWhen function EVP_PKEY_public_check() is called on RSA public keys,\na computation is done to confirm that the RSA modulus, n, is composite.\nFor valid RSA keys, n is a product of two or more large primes and this\ncomputation completes quickly. However, if n is an overly large prime,\nthen this computation would take a long time.\n\nAn application that calls EVP_PKEY_public_check() and supplies an RSA key\nobtained from an untrusted source could be vulnerable to a Denial of Service\nattack.\n\nThe function EVP_PKEY_public_check() is not called from other OpenSSL\nfunctions however it is called from the OpenSSL pkey command line\napplication. For that reason that application is also vulnerable if used\nwith the '-pubin' and '-check' options on untrusted data.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.1.4-r4]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2004_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2024-2004] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "When a protocol selection parameter option disables all protocols without adding any then the default set of protocols would remain in the allowed set due to an error in the logic for removing protocols. The below command would perform a request to curl.se with a plaintext protocol which has been explicitly disabled.      curl --proto -all,-http http://curl.se  The flaw is only present if the set of selected protocols disables the entire set of available protocols, in itself a command with no practical use and therefore unlikely to be encountered in real situations. The curl security team has thus assessed this to be low severity bug.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-28085_3.13:libblkid_2.36.1-r1",
              "shortDescription": {
                "text": "[CVE-2024-28085] 3.13:libblkid 2.36.1-r1"
              },
              "help": {
                "text": "wall in util-linux through 2.40, often installed with setgid tty permissions, allows escape sequences to be sent to other users' terminals through argv. (Specifically, escape sequences received from stdin are blocked, but escape sequences received from argv are not blocked.) There may be plausible scenarios where this leads to account takeover.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [2.40-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2004_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2024-2004] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "When a protocol selection parameter option disables all protocols without adding any then the default set of protocols would remain in the allowed set due to an error in the logic for removing protocols. The below command would perform a request to curl.se with a plaintext protocol which has been explicitly disabled.      curl --proto -all,-http http://curl.se  The flaw is only present if the set of selected protocols disables the entire set of available protocols, in itself a command with no practical use and therefore unlikely to be encountered in real situations. The curl security team has thus assessed this to be low severity bug.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2379_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2024-2379] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "libcurl skips the certificate verification for a QUIC connection under certain conditions, when built to use wolfSSL. If told to use an unknown/bad cipher or curve, the error path accidentally skips the verification and returns OK, thus ignoring any certificate problems.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-4603_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2024-4603] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DSA keys or parameters may be very\nslow.\n\nImpact summary: Applications that use the functions EVP_PKEY_param_check()\nor EVP_PKEY_public_check() to check a DSA public key or DSA parameters may\nexperience long delays. Where the key or parameters that are being checked\nhave been obtained from an untrusted source this may lead to a Denial of\nService.\n\nThe functions EVP_PKEY_param_check() or EVP_PKEY_public_check() perform\nvarious checks on DSA parameters. Some of those computations take a long time\nif the modulus (`p` parameter) is too large.\n\nTrying to use a very large modulus is slow and OpenSSL will not allow using\npublic keys with a modulus which is over 10,000 bits in length for signature\nverification. However the key and parameter check functions do not limit\nthe modulus size when performing the checks.\n\nAn application that calls EVP_PKEY_param_check() or EVP_PKEY_public_check()\nand supplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nThese functions are not called by OpenSSL itself on untrusted DSA keys so\nonly applications that directly call these functions may be vulnerable.\n\nAlso vulnerable are the OpenSSL pkey and pkeyparam command line applications\nwhen using the `-check` option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.3.0-r2]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-4603_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2024-4603] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DSA keys or parameters may be very\nslow.\n\nImpact summary: Applications that use the functions EVP_PKEY_param_check()\nor EVP_PKEY_public_check() to check a DSA public key or DSA parameters may\nexperience long delays. Where the key or parameters that are being checked\nhave been obtained from an untrusted source this may lead to a Denial of\nService.\n\nThe functions EVP_PKEY_param_check() or EVP_PKEY_public_check() perform\nvarious checks on DSA parameters. Some of those computations take a long time\nif the modulus (`p` parameter) is too large.\n\nTrying to use a very large modulus is slow and OpenSSL will not allow using\npublic keys with a modulus which is over 10,000 bits in length for signature\nverification. However the key and parameter check functions do not limit\nthe modulus size when performing the checks.\n\nAn application that calls EVP_PKEY_param_check() or EVP_PKEY_public_check()\nand supplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nThese functions are not called by OpenSSL itself on untrusted DSA keys so\nonly applications that directly call these functions may be vulnerable.\n\nAlso vulnerable are the OpenSSL pkey and pkeyparam command line applications\nwhen using the `-check` option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.3.0-r2]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2466_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2024-2466] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "libcurl did not check the server certificate of TLS connections done to a host specified as an IP address, when built to use mbedTLS.  libcurl would wrongly avoid using the set hostname function when the specified hostname was given as an IP address, therefore completely skipping the certificate check. This affects all uses of TLS protocols (HTTPS, FTPS, IMAPS, POPS3, SMTPS, etc).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-6237_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-6237] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "Issue summary: Checking excessively long invalid RSA public keys may take\na long time.\n\nImpact summary: Applications that use the function EVP_PKEY_public_check()\nto check RSA public keys may experience long delays. Where the key that\nis being checked has been obtained from an untrusted source this may lead\nto a Denial of Service.\n\nWhen function EVP_PKEY_public_check() is called on RSA public keys,\na computation is done to confirm that the RSA modulus, n, is composite.\nFor valid RSA keys, n is a product of two or more large primes and this\ncomputation completes quickly. However, if n is an overly large prime,\nthen this computation would take a long time.\n\nAn application that calls EVP_PKEY_public_check() and supplies an RSA key\nobtained from an untrusted source could be vulnerable to a Denial of Service\nattack.\n\nThe function EVP_PKEY_public_check() is not called from other OpenSSL\nfunctions however it is called from the OpenSSL pkey command line\napplication. For that reason that application is also vulnerable if used\nwith the '-pubin' and '-check' options on untrusted data.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [3.1.4-r4]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2511_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2024-2511] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "Issue summary: Some non-default TLS server configurations can cause unbounded\nmemory growth when processing TLSv1.3 sessions\n\nImpact summary: An attacker may exploit certain server configurations to trigger\nunbounded memory growth that would lead to a Denial of Service\n\nThis problem can occur in TLSv1.3 if the non-default SSL_OP_NO_TICKET option is\nbeing used (but not if early_data support is also configured and the default\nanti-replay protection is in use). In this case, under certain conditions, the\nsession cache can get into an incorrect state and it will fail to flush properly\nas it fills. The session cache will continue to grow in an unbounded manner. A\nmalicious client could deliberately create the scenario for this failure to\nforce a Denial of Service. It may also happen by accident in normal operation.\n\nThis issue only affects TLS servers supporting TLSv1.3. It does not affect TLS\nclients.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue. OpenSSL\n1.0.2 is also not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.2.1-r2]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-28085_3.13:libuuid_2.36.1-r1",
              "shortDescription": {
                "text": "[CVE-2024-28085] 3.13:libuuid 2.36.1-r1"
              },
              "help": {
                "text": "wall in util-linux through 2.40, often installed with setgid tty permissions, allows escape sequences to be sent to other users' terminals through argv. (Specifically, escape sequences received from stdin are blocked, but escape sequences received from argv are not blocked.) There may be plausible scenarios where this leads to account takeover.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [2.40-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2398_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2024-2398] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "When an application tells libcurl it wants to allow HTTP/2 server push, and the amount of received headers for the push surpasses the maximum allowed limit (1000), libcurl aborts the server push. When aborting, libcurl inadvertently does not free all the previously allocated headers and instead leaks the memory.  Further, this error condition fails silently and is therefore not easily detected by an application.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2398_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2024-2398] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "When an application tells libcurl it wants to allow HTTP/2 server push, and the amount of received headers for the push surpasses the maximum allowed limit (1000), libcurl aborts the server push. When aborting, libcurl inadvertently does not free all the previously allocated headers and instead leaks the memory.  Further, this error condition fails silently and is therefore not easily detected by an application.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2511_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2024-2511] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "Issue summary: Some non-default TLS server configurations can cause unbounded\nmemory growth when processing TLSv1.3 sessions\n\nImpact summary: An attacker may exploit certain server configurations to trigger\nunbounded memory growth that would lead to a Denial of Service\n\nThis problem can occur in TLSv1.3 if the non-default SSL_OP_NO_TICKET option is\nbeing used (but not if early_data support is also configured and the default\nanti-replay protection is in use). In this case, under certain conditions, the\nsession cache can get into an incorrect state and it will fail to flush properly\nas it fills. The session cache will continue to grow in an unbounded manner. A\nmalicious client could deliberately create the scenario for this failure to\nforce a Denial of Service. It may also happen by accident in normal operation.\n\nThis issue only affects TLS servers supporting TLSv1.3. It does not affect TLS\nclients.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue. OpenSSL\n1.0.2 is also not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [3.2.1-r2]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-6237_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-6237] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "Issue summary: Checking excessively long invalid RSA public keys may take\na long time.\n\nImpact summary: Applications that use the function EVP_PKEY_public_check()\nto check RSA public keys may experience long delays. Where the key that\nis being checked has been obtained from an untrusted source this may lead\nto a Denial of Service.\n\nWhen function EVP_PKEY_public_check() is called on RSA public keys,\na computation is done to confirm that the RSA modulus, n, is composite.\nFor valid RSA keys, n is a product of two or more large primes and this\ncomputation completes quickly. However, if n is an overly large prime,\nthen this computation would take a long time.\n\nAn application that calls EVP_PKEY_public_check() and supplies an RSA key\nobtained from an untrusted source could be vulnerable to a Denial of Service\nattack.\n\nThe function EVP_PKEY_public_check() is not called from other OpenSSL\nfunctions however it is called from the OpenSSL pkey command line\napplication. For that reason that application is also vulnerable if used\nwith the '-pubin' and '-check' options on untrusted data.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.1.4-r4]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-4603_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2024-4603] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DSA keys or parameters may be very\nslow.\n\nImpact summary: Applications that use the functions EVP_PKEY_param_check()\nor EVP_PKEY_public_check() to check a DSA public key or DSA parameters may\nexperience long delays. Where the key or parameters that are being checked\nhave been obtained from an untrusted source this may lead to a Denial of\nService.\n\nThe functions EVP_PKEY_param_check() or EVP_PKEY_public_check() perform\nvarious checks on DSA parameters. Some of those computations take a long time\nif the modulus (`p` parameter) is too large.\n\nTrying to use a very large modulus is slow and OpenSSL will not allow using\npublic keys with a modulus which is over 10,000 bits in length for signature\nverification. However the key and parameter check functions do not limit\nthe modulus size when performing the checks.\n\nAn application that calls EVP_PKEY_param_check() or EVP_PKEY_public_check()\nand supplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nThese functions are not called by OpenSSL itself on untrusted DSA keys so\nonly applications that directly call these functions may be vulnerable.\n\nAlso vulnerable are the OpenSSL pkey and pkeyparam command line applications\nwhen using the `-check` option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [3.3.0-r2]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2511_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2024-2511] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "Issue summary: Some non-default TLS server configurations can cause unbounded\nmemory growth when processing TLSv1.3 sessions\n\nImpact summary: An attacker may exploit certain server configurations to trigger\nunbounded memory growth that would lead to a Denial of Service\n\nThis problem can occur in TLSv1.3 if the non-default SSL_OP_NO_TICKET option is\nbeing used (but not if early_data support is also configured and the default\nanti-replay protection is in use). In this case, under certain conditions, the\nsession cache can get into an incorrect state and it will fail to flush properly\nas it fills. The session cache will continue to grow in an unbounded manner. A\nmalicious client could deliberately create the scenario for this failure to\nforce a Denial of Service. It may also happen by accident in normal operation.\n\nThis issue only affects TLS servers supporting TLSv1.3. It does not affect TLS\nclients.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue. OpenSSL\n1.0.2 is also not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.2.1-r2]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-28085_3.13:libmount_2.36.1-r1",
              "shortDescription": {
                "text": "[CVE-2024-28085] 3.13:libmount 2.36.1-r1"
              },
              "help": {
                "text": "wall in util-linux through 2.40, often installed with setgid tty permissions, allows escape sequences to be sent to other users' terminals through argv. (Specifically, escape sequences received from stdin are blocked, but escape sequences received from argv are not blocked.) There may be plausible scenarios where this leads to account takeover.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [2.40-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-2379_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2024-2379] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "libcurl skips the certificate verification for a QUIC connection under certain conditions, when built to use wolfSSL. If told to use an unknown/bad cipher or curve, the error path accidentally skips the verification and returns OK, thus ignoring any certificate problems.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.7.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-1394_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2024-1394] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "A memory leak flaw was found in Golang in the RSA encrypting/decrypting code, which might lead to a resource exhaustion vulnerability using attacker-controlled inputs​. The memory leak happens in github.com/golang-fips/openssl/openssl/rsa.go#L113. The objects leaked are pkey​ and ctx​. That function uses named return parameters to free pkey​ and ctx​ if there is an error initializing the context or setting the different properties. All return statements related to error cases follow the \"return nil, nil, fail(...)\" pattern, meaning that pkey​ and ctx​ will be nil inside the deferred function that should free them.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-1394_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2024-1394] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "A memory leak flaw was found in Golang in the RSA encrypting/decrypting code, which might lead to a resource exhaustion vulnerability using attacker-controlled inputs​. The memory leak happens in github.com/golang-fips/openssl/openssl/rsa.go#L113. The objects leaked are pkey​ and ctx​. That function uses named return parameters to free pkey​ and ctx​ if there is an error initializing the context or setting the different properties. All return statements related to error cases follow the \"return nil, nil, fail(...)\" pattern, meaning that pkey​ and ctx​ will be nil inside the deferred function that should free them.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-1394_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2024-1394] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "A memory leak flaw was found in Golang in the RSA encrypting/decrypting code, which might lead to a resource exhaustion vulnerability using attacker-controlled inputs​. The memory leak happens in github.com/golang-fips/openssl/openssl/rsa.go#L113. The objects leaked are pkey​ and ctx​. That function uses named return parameters to free pkey​ and ctx​ if there is an error initializing the context or setting the different properties. All return statements related to error cases follow the \"return nil, nil, fail(...)\" pattern, meaning that pkey​ and ctx​ will be nil inside the deferred function that should free them.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2021-3711_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2021-3711] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "In order to decrypt SM2 encrypted data an application is expected to call the API function EVP_PKEY_decrypt(). Typically an application will call this function twice. The first time, on entry, the \"out\" parameter can be NULL and, on exit, the \"outlen\" parameter is populated with the buffer size required to hold the decrypted plaintext. The application can then allocate a sufficiently sized buffer and call EVP_PKEY_decrypt() again, but this time passing a non-NULL value for the \"out\" parameter. A bug in the implementation of the SM2 decryption code means that the calculation of the buffer size required to hold the plaintext returned by the first call to EVP_PKEY_decrypt() can be smaller than the actual size required by the second call. This can lead to a buffer overflow when EVP_PKEY_decrypt() is called by the application a second time with a buffer that is too small. A malicious attacker who is able present SM2 content for decryption to an application could cause attacker chosen data to overflow the buffer by up to a maximum of 62 bytes altering the contents of other data held after the buffer, possibly changing application behaviour or causing the application to crash. The location of the buffer is application dependent but is typically heap allocated. Fixed in OpenSSL 1.1.1l (Affected 1.1.1-1.1.1k).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.1.1l-r0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-28531_3.13:openssh-client_8.4_p1-r2",
              "shortDescription": {
                "text": "[CVE-2023-28531] 3.13:openssh-client 8.4_p1-r2"
              },
              "help": {
                "text": "ssh-add in OpenSSH before 9.3 adds smartcard keys to ssh-agent without the intended per-hop destination constraints. The earliest affected version is 8.9.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar `       | [9.1_p1-r3]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-38545_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-38545] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "This flaw makes curl overflow a heap based buffer in the SOCKS5 proxy\nhandshake.\n\nWhen curl is asked to pass along the host name to the SOCKS5 proxy to allow\nthat to resolve the address instead of it getting done by curl itself, the\nmaximum length that host name can be is 255 bytes.\n\nIf the host name is detected to be longer, curl switches to local name\nresolving and instead passes on the resolved address only. Due to this bug,\nthe local variable that means \"let the host resolve the name\" could get the\nwrong value during a slow SOCKS5 handshake, and contrary to the intention,\ncopy the too long host name to the target buffer instead of copying just the\nresolved address there.\n\nThe target buffer being a heap based buffer, and the host name coming from the\nURL that curl has been told to operate with.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.4.0-r0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-32221_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-32221] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "When doing HTTP(S) transfers, libcurl might erroneously use the read callback (`CURLOPT_READFUNCTION`) to ask for data to send, even when the `CURLOPT_POSTFIELDS` option has been set, if the same handle previously was used to issue a `PUT` request which used that callback. This flaw may surprise the application and cause it to misbehave and either send off the wrong data or use memory after free or similar in the subsequent `POST` request. The problem exists in the logic for a reused handle when it is changed from a PUT to a POST.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.86.0-r0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-23914_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-23914] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "A cleartext transmission of sensitive information vulnerability exists in curl \u003cv7.88.0 that could cause HSTS functionality fail when multiple URLs are requested serially. Using its HSTS support, curl can be instructed to use HTTPS instead of usingan insecure clear-text HTTP step even when HTTP is provided in the URL. ThisHSTS mechanism would however surprisingly be ignored by subsequent transferswhen done on the same command line because the state would not be properlycarried on.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.1      | Not Applicable       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.88.0-r0]   |"
              },
              "properties": {
                "security-severity": "9.1"
              }
            },
            {
              "id": "CVE-2022-37434_3.13:zlib_1.2.11-r3",
              "shortDescription": {
                "text": "[CVE-2022-37434] 3.13:zlib 1.2.11-r3"
              },
              "help": {
                "text": "zlib through 1.2.12 has a heap-based buffer over-read or buffer overflow in inflate in inflate.c via a large gzip header extra field. NOTE: only applications that call inflateGetHeader are affected. Some common applications bundle the affected zlib source code but may be unable to call inflateGetHeader (e.g., see the nodejs/node reference).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.2.12-r2]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-38545_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-38545] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "This flaw makes curl overflow a heap based buffer in the SOCKS5 proxy\nhandshake.\n\nWhen curl is asked to pass along the host name to the SOCKS5 proxy to allow\nthat to resolve the address instead of it getting done by curl itself, the\nmaximum length that host name can be is 255 bytes.\n\nIf the host name is detected to be longer, curl switches to local name\nresolving and instead passes on the resolved address only. Due to this bug,\nthe local variable that means \"let the host resolve the name\" could get the\nwrong value during a slow SOCKS5 handshake, and contrary to the intention,\ncopy the too long host name to the target buffer instead of copying just the\nresolved address there.\n\nThe target buffer being a heap based buffer, and the host name coming from the\nURL that curl has been told to operate with.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.4.0-r0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2021-3711_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2021-3711] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "In order to decrypt SM2 encrypted data an application is expected to call the API function EVP_PKEY_decrypt(). Typically an application will call this function twice. The first time, on entry, the \"out\" parameter can be NULL and, on exit, the \"outlen\" parameter is populated with the buffer size required to hold the decrypted plaintext. The application can then allocate a sufficiently sized buffer and call EVP_PKEY_decrypt() again, but this time passing a non-NULL value for the \"out\" parameter. A bug in the implementation of the SM2 decryption code means that the calculation of the buffer size required to hold the plaintext returned by the first call to EVP_PKEY_decrypt() can be smaller than the actual size required by the second call. This can lead to a buffer overflow when EVP_PKEY_decrypt() is called by the application a second time with a buffer that is too small. A malicious attacker who is able present SM2 content for decryption to an application could cause attacker chosen data to overflow the buffer by up to a maximum of 62 bytes altering the contents of other data held after the buffer, possibly changing application behaviour or causing the application to crash. The location of the buffer is application dependent but is typically heap allocated. Fixed in OpenSSL 1.1.1l (Affected 1.1.1-1.1.1k).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [1.1.1l-r0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2021-38297_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2021-38297] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Go before 1.16.9 and 1.17.x before 1.17.2 has a Buffer Overflow via large arguments in a function invocation from a WASM module, when GOARCH=wasm GOOS=js is used.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.16.9], [1.17.2]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29405_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2023-29405] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. Flags containing embedded spaces are mishandled, allowing disallowed flags to be smuggled through the LDFLAGS sanitization by including them in the argument of another flag. This only affects usage of the gccgo compiler.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2021-3711_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2021-3711] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "In order to decrypt SM2 encrypted data an application is expected to call the API function EVP_PKEY_decrypt(). Typically an application will call this function twice. The first time, on entry, the \"out\" parameter can be NULL and, on exit, the \"outlen\" parameter is populated with the buffer size required to hold the decrypted plaintext. The application can then allocate a sufficiently sized buffer and call EVP_PKEY_decrypt() again, but this time passing a non-NULL value for the \"out\" parameter. A bug in the implementation of the SM2 decryption code means that the calculation of the buffer size required to hold the plaintext returned by the first call to EVP_PKEY_decrypt() can be smaller than the actual size required by the second call. This can lead to a buffer overflow when EVP_PKEY_decrypt() is called by the application a second time with a buffer that is too small. A malicious attacker who is able present SM2 content for decryption to an application could cause attacker chosen data to overflow the buffer by up to a maximum of 62 bytes altering the contents of other data held after the buffer, possibly changing application behaviour or causing the application to crash. The location of the buffer is application dependent but is typically heap allocated. Fixed in OpenSSL 1.1.1l (Affected 1.1.1-1.1.1k).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.1.1l-r0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-32221_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-32221] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "When doing HTTP(S) transfers, libcurl might erroneously use the read callback (`CURLOPT_READFUNCTION`) to ask for data to send, even when the `CURLOPT_POSTFIELDS` option has been set, if the same handle previously was used to issue a `PUT` request which used that callback. This flaw may surprise the application and cause it to misbehave and either send off the wrong data or use memory after free or similar in the subsequent `POST` request. The problem exists in the logic for a reused handle when it is changed from a PUT to a POST.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.86.0-r0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29404_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2023-29404] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. The arguments for a number of flags which are non-optional are incorrectly considered optional, allowing disallowed flags to be smuggled through the LDFLAGS sanitization. This affects usage of both the gc and gccgo compilers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-28531_3.13:openssh-keygen_8.4_p1-r2",
              "shortDescription": {
                "text": "[CVE-2023-28531] 3.13:openssh-keygen 8.4_p1-r2"
              },
              "help": {
                "text": "ssh-add in OpenSSH before 9.3 adds smartcard keys to ssh-agent without the intended per-hop destination constraints. The earliest affected version is 8.9.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar `       | [9.1_p1-r3]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-23914_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-23914] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "A cleartext transmission of sensitive information vulnerability exists in curl \u003cv7.88.0 that could cause HSTS functionality fail when multiple URLs are requested serially. Using its HSTS support, curl can be instructed to use HTTPS instead of usingan insecure clear-text HTTP step even when HTTP is provided in the URL. ThisHSTS mechanism would however surprisingly be ignored by subsequent transferswhen done on the same command line because the state would not be properlycarried on.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.1      | Not Applicable       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.88.0-r0]   |"
              },
              "properties": {
                "security-severity": "9.1"
              }
            },
            {
              "id": "CVE-2023-29402_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2023-29402] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "The go command may generate unexpected code at build time when using cgo. This may result in unexpected behavior when running a go program which uses cgo. This may occur when running an untrusted module which contains directories with newline characters in their names. Modules which are retrieved using the go command, i.e. via \"go get\", are not affected (modules retrieved using GOPATH-mode, i.e. GO111MODULE=off, may be affected).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-49210_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-49210] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "The openssl (aka node-openssl) NPM package through 2.0.0 was characterized as \"a nonsense wrapper with no real purpose\" by its author, and accepts an opts argument that contains a verb field (used for command execution). NOTE: This vulnerability only affects products that are no longer supported by the maintainer.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-49210_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-49210] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "The openssl (aka node-openssl) NPM package through 2.0.0 was characterized as \"a nonsense wrapper with no real purpose\" by its author, and accepts an opts argument that contains a verb field (used for command execution). NOTE: This vulnerability only affects products that are no longer supported by the maintainer.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-0286_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-0286] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "There is a type confusion vulnerability relating to X.400 address processing\ninside an X.509 GeneralName. X.400 addresses were parsed as an ASN1_STRING but\nthe public structure definition for GENERAL_NAME incorrectly specified the type\nof the x400Address field as ASN1_TYPE. This field is subsequently interpreted by\nthe OpenSSL function GENERAL_NAME_cmp as an ASN1_TYPE rather than an\nASN1_STRING.\n\nWhen CRL checking is enabled (i.e. the application sets the\nX509_V_FLAG_CRL_CHECK flag), this vulnerability may allow an attacker to pass\narbitrary pointers to a memcmp call, enabling them to read memory contents or\nenact a denial of service. In most cases, the attack requires the attacker to\nprovide both the certificate chain and CRL, neither of which need to have a\nvalid signature. If the attacker only controls one of these inputs, the other\ninput must already contain an X.400 address as a CRL distribution point, which\nis uncommon. As such, this vulnerability is most likely to only affect\napplications which have implemented their own functionality for retrieving CRLs\nover a network.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.4      | Not Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.4"
              }
            },
            {
              "id": "CVE-2023-0464_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-0464] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "A security vulnerability has been identified in all supported versions\n\nof OpenSSL related to the verification of X.509 certificate chains\nthat include policy constraints.  Attackers may be able to exploit this\nvulnerability by creating a malicious certificate chain that triggers\nexponential use of computational resources, leading to a denial-of-service\n(DoS) attack on affected systems.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.1.0-r1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0215_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-0215] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "The public API function BIO_new_NDEF is a helper function used for streaming\nASN.1 data via a BIO. It is primarily used internally to OpenSSL to support the\nSMIME, CMS and PKCS7 streaming capabilities, but may also be called directly by\nend user applications.\n\nThe function receives a BIO from the caller, prepends a new BIO_f_asn1 filter\nBIO onto the front of it to form a BIO chain, and then returns the new head of\nthe BIO chain to the caller. Under certain conditions, for example if a CMS\nrecipient public key is invalid, the new filter BIO is freed and the function\nreturns a NULL result indicating a failure. However, in this case, the BIO chain\nis not properly cleaned up and the BIO passed by the caller still retains\ninternal pointers to the previously freed filter BIO. If the caller then goes on\nto call BIO_pop() on the BIO then a use-after-free will occur. This will most\nlikely result in a crash.\n\n\n\nThis scenario occurs directly in the internal function B64_write_ASN1() which\nmay cause BIO_new_NDEF() to be called and will subsequently call BIO_pop() on\nthe BIO. This internal function is in turn called by the public API functions\nPEM_write_bio_ASN1_stream, PEM_write_bio_CMS_stream, PEM_write_bio_PKCS7_stream,\nSMIME_write_ASN1, SMIME_write_CMS and SMIME_write_PKCS7.\n\nOther public API functions that may be impacted by this include\ni2d_ASN1_bio_stream, BIO_new_CMS, BIO_new_PKCS7, i2d_CMS_bio_stream and\ni2d_PKCS7_bio_stream.\n\nThe OpenSSL cms and smime command line applications are similarly affected.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-29491_3.13:ncurses-libs_6.2_p20210109-r0",
              "shortDescription": {
                "text": "[CVE-2023-29491] 3.13:ncurses-libs 6.2_p20210109-r0"
              },
              "help": {
                "text": "ncurses before 6.4 20230408, when used by a setuid application, allows local users to trigger security-relevant memory corruption via malformed data in a terminfo database file that is found in $HOME/.terminfo or reached via the TERMINFO or TERM environment variable.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Applicable       | `sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar `       | [6.4_p20230424-r0]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2023-0401_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-0401] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "A NULL pointer can be dereferenced when signatures are being\nverified on PKCS7 signed or signedAndEnveloped data. In case the hash\nalgorithm used for the signature is known to the OpenSSL library but\nthe implementation of the hash algorithm is not available the digest\ninitialization will fail. There is a missing check for the return\nvalue from the initialization function which later leads to invalid\nusage of the digest API most likely leading to a crash.\n\nThe unavailability of an algorithm can be caused by using FIPS\nenabled configuration of providers or more commonly by not loading\nthe legacy provider.\n\nPKCS7 data is processed by the SMIME library calls and also by the\ntime stamp (TS) library calls. The TLS implementation in OpenSSL does\nnot call these functions however third party applications would be\naffected if they call these functions to verify signatures on untrusted\ndata.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41723_golang.org/x/net_0.0.0-20201224014010-6772e930b67b",
              "shortDescription": {
                "text": "[CVE-2022-41723] golang.org/x/net 0.0.0-20201224014010-6772e930b67b"
              },
              "help": {
                "text": "A maliciously crafted HTTP/2 stream could cause excessive CPU consumption in the HPACK decoder, sufficient to cause a denial of service from a small number of small requests.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [0.7.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-5363_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-5363] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "Issue summary: A bug has been identified in the processing of key and\ninitialisation vector (IV) lengths.  This can lead to potential truncation\nor overruns during the initialisation of some symmetric ciphers.\n\nImpact summary: A truncation in the IV can result in non-uniqueness,\nwhich could result in loss of confidentiality for some cipher modes.\n\nWhen calling EVP_EncryptInit_ex2(), EVP_DecryptInit_ex2() or\nEVP_CipherInit_ex2() the provided OSSL_PARAM array is processed after\nthe key and IV have been established.  Any alterations to the key length,\nvia the \"keylen\" parameter or the IV length, via the \"ivlen\" parameter,\nwithin the OSSL_PARAM array will not take effect as intended, potentially\ncausing truncation or overreading of these values.  The following ciphers\nand cipher modes are impacted: RC2, RC4, RC5, CCM, GCM and OCB.\n\nFor the CCM, GCM and OCB cipher modes, truncation of the IV can result in\nloss of confidentiality.  For example, when following NIST's SP 800-38D\nsection 8.2.1 guidance for constructing a deterministic IV for AES in\nGCM mode, truncation of the counter portion could lead to IV reuse.\n\nBoth truncations and overruns of the key and overruns of the IV will\nproduce incorrect results and could, in some cases, trigger a memory\nexception.  However, these issues are not currently assessed as security\ncritical.\n\nChanging the key and/or IV lengths is not considered to be a common operation\nand the vulnerable API was recently introduced. Furthermore it is likely that\napplication developers will have spotted this problem during testing since\ndecryption would fail unless both peers in the communication were similarly\nvulnerable. For these reasons we expect the probability of an application being\nvulnerable to this to be quite low. However if an application is vulnerable then\nthis issue is considered very serious. For these reasons we have assessed this\nissue as Moderate severity overall.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [3.1.4-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-39323_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2023-39323] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Line directives (\"//line\") can be used to bypass the restrictions on \"//go:cgo_\" directives, allowing blocked linker and compiler flags to be passed during compilation. This can result in unexpected execution of arbitrary code when running \"go build\". The line directive requires the absolute path of the file in which the directive lives, which makes exploiting this issue significantly more complex.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.20.9], [1.21.2]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2023-5363_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-5363] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "Issue summary: A bug has been identified in the processing of key and\ninitialisation vector (IV) lengths.  This can lead to potential truncation\nor overruns during the initialisation of some symmetric ciphers.\n\nImpact summary: A truncation in the IV can result in non-uniqueness,\nwhich could result in loss of confidentiality for some cipher modes.\n\nWhen calling EVP_EncryptInit_ex2(), EVP_DecryptInit_ex2() or\nEVP_CipherInit_ex2() the provided OSSL_PARAM array is processed after\nthe key and IV have been established.  Any alterations to the key length,\nvia the \"keylen\" parameter or the IV length, via the \"ivlen\" parameter,\nwithin the OSSL_PARAM array will not take effect as intended, potentially\ncausing truncation or overreading of these values.  The following ciphers\nand cipher modes are impacted: RC2, RC4, RC5, CCM, GCM and OCB.\n\nFor the CCM, GCM and OCB cipher modes, truncation of the IV can result in\nloss of confidentiality.  For example, when following NIST's SP 800-38D\nsection 8.2.1 guidance for constructing a deterministic IV for AES in\nGCM mode, truncation of the counter portion could lead to IV reuse.\n\nBoth truncations and overruns of the key and overruns of the IV will\nproduce incorrect results and could, in some cases, trigger a memory\nexception.  However, these issues are not currently assessed as security\ncritical.\n\nChanging the key and/or IV lengths is not considered to be a common operation\nand the vulnerable API was recently introduced. Furthermore it is likely that\napplication developers will have spotted this problem during testing since\ndecryption would fail unless both peers in the communication were similarly\nvulnerable. For these reasons we expect the probability of an application being\nvulnerable to this to be quite low. However if an application is vulnerable then\nthis issue is considered very serious. For these reasons we have assessed this\nissue as Moderate severity overall.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.1.4-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0217_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-0217] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "An invalid pointer dereference on read can be triggered when an\napplication tries to check a malformed DSA public key by the\nEVP_PKEY_public_check() function. This will most likely lead\nto an application crash. This function can be called on public\nkeys supplied from untrusted sources which could allow an attacker\nto cause a denial of service attack.\n\nThe TLS implementation in OpenSSL does not call this function\nbut applications might call the function if there are additional\nsecurity requirements imposed by standards such as FIPS 140-3.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-27781_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-27781] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "libcurl provides the `CURLOPT_CERTINFO` option to allow applications torequest details to be returned about a server's certificate chain.Due to an erroneous function, a malicious server could make libcurl built withNSS get stuck in a never-ending busy-loop when trying to retrieve thatinformation.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.79.1-r2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-41771_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2021-41771] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "ImportedSymbols in debug/macho (for Open or OpenFat) in Go before 1.16.10 and 1.17.x before 1.17.3 Accesses a Memory Location After the End of a Buffer, aka an out-of-bounds slice situation.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.16.10], [1.17.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0217_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-0217] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "An invalid pointer dereference on read can be triggered when an\napplication tries to check a malformed DSA public key by the\nEVP_PKEY_public_check() function. This will most likely lead\nto an application crash. This function can be called on public\nkeys supplied from untrusted sources which could allow an attacker\nto cause a denial of service attack.\n\nThe TLS implementation in OpenSSL does not call this function\nbut applications might call the function if there are additional\nsecurity requirements imposed by standards such as FIPS 140-3.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30630_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2022-30630] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Uncontrolled recursion in Glob in io/fs before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a path which contains a large number of path separators.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-4450_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2022-4450] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "The function PEM_read_bio_ex() reads a PEM file from a BIO and parses and\ndecodes the \"name\" (e.g. \"CERTIFICATE\"), any header data and the payload data.\nIf the function succeeds then the \"name_out\", \"header\" and \"data\" arguments are\npopulated with pointers to buffers containing the relevant decoded data. The\ncaller is responsible for freeing those buffers. It is possible to construct a\nPEM file that results in 0 bytes of payload data. In this case PEM_read_bio_ex()\nwill return a failure code but will populate the header argument with a pointer\nto a buffer that has already been freed. If the caller also frees this buffer\nthen a double free will occur. This will most likely lead to a crash. This\ncould be exploited by an attacker who has the ability to supply malicious PEM\nfiles for parsing to achieve a denial of service attack.\n\nThe functions PEM_read_bio() and PEM_read() are simple wrappers around\nPEM_read_bio_ex() and therefore these functions are also directly affected.\n\nThese functions are also called indirectly by a number of other OpenSSL\nfunctions including PEM_X509_INFO_read_bio_ex() and\nSSL_CTX_use_serverinfo_file() which are also vulnerable. Some OpenSSL internal\nuses of these functions are not vulnerable because the caller does not free the\nheader argument if PEM_read_bio_ex() returns a failure code. These locations\ninclude the PEM_read_bio_TYPE() functions as well as the decoders introduced in\nOpenSSL 3.0.\n\nThe OpenSSL asn1parse command line application is also impacted by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-27781_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-27781] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "libcurl provides the `CURLOPT_CERTINFO` option to allow applications torequest details to be returned about a server's certificate chain.Due to an erroneous function, a malicious server could make libcurl built withNSS get stuck in a never-ending busy-loop when trying to retrieve thatinformation.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.79.1-r2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-27782_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-27782] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "libcurl would reuse a previously created connection even when a TLS or SSHrelated option had been changed that should have prohibited reuse.libcurl keeps previously used connections in a connection pool for subsequenttransfers to reuse if one of them matches the setup. However, several TLS andSSH settings were left out from the configuration match checks, making themmatch too easily.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.79.1-r2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-27533_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-27533] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "A vulnerability in input validation exists in curl \u003c8.0 during communication using the TELNET protocol may allow an attacker to pass on maliciously crafted user name and \"telnet options\" during server negotiation. The lack of proper input scrubbing allows an attacker to send content or perform option negotiation without the application's intent. This vulnerability could be exploited if an application allows user input, thereby enabling attackers to execute arbitrary code on the system.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.8      | Not Applicable       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.0.0-r0]   |"
              },
              "properties": {
                "security-severity": "8.8"
              }
            },
            {
              "id": "CVE-2023-0286_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-0286] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "There is a type confusion vulnerability relating to X.400 address processing\ninside an X.509 GeneralName. X.400 addresses were parsed as an ASN1_STRING but\nthe public structure definition for GENERAL_NAME incorrectly specified the type\nof the x400Address field as ASN1_TYPE. This field is subsequently interpreted by\nthe OpenSSL function GENERAL_NAME_cmp as an ASN1_TYPE rather than an\nASN1_STRING.\n\nWhen CRL checking is enabled (i.e. the application sets the\nX509_V_FLAG_CRL_CHECK flag), this vulnerability may allow an attacker to pass\narbitrary pointers to a memcmp call, enabling them to read memory contents or\nenact a denial of service. In most cases, the attack requires the attacker to\nprovide both the certificate chain and CRL, neither of which need to have a\nvalid signature. If the attacker only controls one of these inputs, the other\ninput must already contain an X.400 address as a CRL distribution point, which\nis uncommon. As such, this vulnerability is most likely to only affect\napplications which have implemented their own functionality for retrieving CRLs\nover a network.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.4      | Not Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.4"
              }
            },
            {
              "id": "CVE-2022-30634_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2022-30634] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Infinite loop in Read in crypto/rand before Go 1.17.11 and Go 1.18.3 on Windows allows attacker to cause an indefinite hang by passing a buffer larger than 1 \u003c\u003c 32 - 1 bytes.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0215_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-0215] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "The public API function BIO_new_NDEF is a helper function used for streaming\nASN.1 data via a BIO. It is primarily used internally to OpenSSL to support the\nSMIME, CMS and PKCS7 streaming capabilities, but may also be called directly by\nend user applications.\n\nThe function receives a BIO from the caller, prepends a new BIO_f_asn1 filter\nBIO onto the front of it to form a BIO chain, and then returns the new head of\nthe BIO chain to the caller. Under certain conditions, for example if a CMS\nrecipient public key is invalid, the new filter BIO is freed and the function\nreturns a NULL result indicating a failure. However, in this case, the BIO chain\nis not properly cleaned up and the BIO passed by the caller still retains\ninternal pointers to the previously freed filter BIO. If the caller then goes on\nto call BIO_pop() on the BIO then a use-after-free will occur. This will most\nlikely result in a crash.\n\n\n\nThis scenario occurs directly in the internal function B64_write_ASN1() which\nmay cause BIO_new_NDEF() to be called and will subsequently call BIO_pop() on\nthe BIO. This internal function is in turn called by the public API functions\nPEM_write_bio_ASN1_stream, PEM_write_bio_CMS_stream, PEM_write_bio_PKCS7_stream,\nSMIME_write_ASN1, SMIME_write_CMS and SMIME_write_PKCS7.\n\nOther public API functions that may be impacted by this include\ni2d_ASN1_bio_stream, BIO_new_CMS, BIO_new_PKCS7, i2d_CMS_bio_stream and\ni2d_PKCS7_bio_stream.\n\nThe OpenSSL cms and smime command line applications are similarly affected.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2018-25032_3.13:zlib_1.2.11-r3",
              "shortDescription": {
                "text": "[CVE-2018-25032] 3.13:zlib 1.2.11-r3"
              },
              "help": {
                "text": "zlib before 1.2.12 allows memory corruption when deflating (i.e., when compressing) if the input has many distant matches.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.2.12-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-3712_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2021-3712] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "ASN.1 strings are represented internally within OpenSSL as an ASN1_STRING structure which contains a buffer holding the string data and a field holding the buffer length. This contrasts with normal C strings which are repesented as a buffer for the string data which is terminated with a NUL (0) byte. Although not a strict requirement, ASN.1 strings that are parsed using OpenSSL's own \"d2i\" functions (and other similar parsing functions) as well as any string whose value has been set with the ASN1_STRING_set() function will additionally NUL terminate the byte array in the ASN1_STRING structure. However, it is possible for applications to directly construct valid ASN1_STRING structures which do not NUL terminate the byte array by directly setting the \"data\" and \"length\" fields in the ASN1_STRING array. This can also happen by using the ASN1_STRING_set0() function. Numerous OpenSSL functions that print ASN.1 data have been found to assume that the ASN1_STRING byte array will be NUL terminated, even though this is not guaranteed for strings that have been directly constructed. Where an application requests an ASN.1 structure to be printed, and where that ASN.1 structure contains ASN1_STRINGs that have been directly constructed by the application without NUL terminating the \"data\" field, then a read buffer overrun can occur. The same thing can also occur during name constraints processing of certificates (for example if a certificate has been directly constructed by the application instead of loading it via the OpenSSL parsing functions, and the certificate contains non NUL terminated ASN1_STRING structures). It can also occur in the X509_get1_email(), X509_REQ_get1_email() and X509_get1_ocsp() functions. If a malicious actor can cause an application to directly construct an ASN1_STRING and then process it through one of the affected OpenSSL functions then this issue could be hit. This might result in a crash (causing a Denial of Service attack). It could also result in the disclosure of private memory content...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.4      | Not Applicable       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [1.1.1l-r0]   |"
              },
              "properties": {
                "security-severity": "7.4"
              }
            },
            {
              "id": "CVE-2023-0216_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-0216] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "An invalid pointer dereference on read can be triggered when an\napplication tries to load malformed PKCS7 data with the\nd2i_PKCS7(), d2i_PKCS7_bio() or d2i_PKCS7_fp() functions.\n\nThe result of the dereference is an application crash which could\nlead to a denial of service attack. The TLS implementation in OpenSSL\ndoes not call this function however third party applications might\ncall these functions on untrusted data.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41715_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2022-41715] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Programs which compile regular expressions from untrusted sources may be vulnerable to memory exhaustion or denial of service. The parsed regexp representation is linear in the size of the input, but in some cases the constant factor can be as high as 40,000, making relatively small regexps consume much larger amounts of memory. After fix, each regexp being parsed is limited to a 256 MB memory footprint. Regular expressions whose representation would use more space than that are rejected. Normal use of regular expressions is unaffected.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.18.7], [1.19.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0464_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-0464] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "A security vulnerability has been identified in all supported versions\n\nof OpenSSL related to the verification of X.509 certificate chains\nthat include policy constraints.  Attackers may be able to exploit this\nvulnerability by creating a malicious certificate chain that triggers\nexponential use of computational resources, leading to a denial-of-service\n(DoS) attack on affected systems.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.1.0-r1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-29804_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2022-29804] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Incorrect conversion of certain invalid paths to valid, absolute paths in Clean in path/filepath before Go 1.17.11 and Go 1.18.3 on Windows allows potential directory traversal attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-22946_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2021-22946] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "A user can tell curl \u003e= 7.20.0 and \u003c= 7.78.0 to require a successful upgrade to TLS when speaking to an IMAP, POP3 or FTP server (`--ssl-reqd` on the command line or`CURLOPT_USE_SSL` set to `CURLUSESSL_CONTROL` or `CURLUSESSL_ALL` withlibcurl). This requirement could be bypassed if the server would return a properly crafted but perfectly legitimate response.This flaw would then make curl silently continue its operations **withoutTLS** contrary to the instructions and expectations, exposing possibly sensitive data in clear text over the network.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.79.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-4450_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2022-4450] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "The function PEM_read_bio_ex() reads a PEM file from a BIO and parses and\ndecodes the \"name\" (e.g. \"CERTIFICATE\"), any header data and the payload data.\nIf the function succeeds then the \"name_out\", \"header\" and \"data\" arguments are\npopulated with pointers to buffers containing the relevant decoded data. The\ncaller is responsible for freeing those buffers. It is possible to construct a\nPEM file that results in 0 bytes of payload data. In this case PEM_read_bio_ex()\nwill return a failure code but will populate the header argument with a pointer\nto a buffer that has already been freed. If the caller also frees this buffer\nthen a double free will occur. This will most likely lead to a crash. This\ncould be exploited by an attacker who has the ability to supply malicious PEM\nfiles for parsing to achieve a denial of service attack.\n\nThe functions PEM_read_bio() and PEM_read() are simple wrappers around\nPEM_read_bio_ex() and therefore these functions are also directly affected.\n\nThese functions are also called indirectly by a number of other OpenSSL\nfunctions including PEM_X509_INFO_read_bio_ex() and\nSSL_CTX_use_serverinfo_file() which are also vulnerable. Some OpenSSL internal\nuses of these functions are not vulnerable because the caller does not free the\nheader argument if PEM_read_bio_ex() returns a failure code. These locations\ninclude the PEM_read_bio_TYPE() functions as well as the decoders introduced in\nOpenSSL 3.0.\n\nThe OpenSSL asn1parse command line application is also impacted by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-5363_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-5363] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "Issue summary: A bug has been identified in the processing of key and\ninitialisation vector (IV) lengths.  This can lead to potential truncation\nor overruns during the initialisation of some symmetric ciphers.\n\nImpact summary: A truncation in the IV can result in non-uniqueness,\nwhich could result in loss of confidentiality for some cipher modes.\n\nWhen calling EVP_EncryptInit_ex2(), EVP_DecryptInit_ex2() or\nEVP_CipherInit_ex2() the provided OSSL_PARAM array is processed after\nthe key and IV have been established.  Any alterations to the key length,\nvia the \"keylen\" parameter or the IV length, via the \"ivlen\" parameter,\nwithin the OSSL_PARAM array will not take effect as intended, potentially\ncausing truncation or overreading of these values.  The following ciphers\nand cipher modes are impacted: RC2, RC4, RC5, CCM, GCM and OCB.\n\nFor the CCM, GCM and OCB cipher modes, truncation of the IV can result in\nloss of confidentiality.  For example, when following NIST's SP 800-38D\nsection 8.2.1 guidance for constructing a deterministic IV for AES in\nGCM mode, truncation of the counter portion could lead to IV reuse.\n\nBoth truncations and overruns of the key and overruns of the IV will\nproduce incorrect results and could, in some cases, trigger a memory\nexception.  However, these issues are not currently assessed as security\ncritical.\n\nChanging the key and/or IV lengths is not considered to be a common operation\nand the vulnerable API was recently introduced. Furthermore it is likely that\napplication developers will have spotted this problem during testing since\ndecryption would fail unless both peers in the communication were similarly\nvulnerable. For these reasons we expect the probability of an application being\nvulnerable to this to be quite low. However if an application is vulnerable then\nthis issue is considered very serious. For these reasons we have assessed this\nissue as Moderate severity overall.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.1.4-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41722_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2022-41722] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "A path traversal vulnerability exists in filepath.Clean on Windows. On Windows, the filepath.Clean function could transform an invalid path such as \"a/../c:/b\" into the valid path \"c:\\b\". This transformation of a relative (if invalid) path into an absolute path could enable a directory traversal attack. After fix, the filepath.Clean function transforms this path into the relative (but still invalid) path \".\\c:\\b\".",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-3712_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2021-3712] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "ASN.1 strings are represented internally within OpenSSL as an ASN1_STRING structure which contains a buffer holding the string data and a field holding the buffer length. This contrasts with normal C strings which are repesented as a buffer for the string data which is terminated with a NUL (0) byte. Although not a strict requirement, ASN.1 strings that are parsed using OpenSSL's own \"d2i\" functions (and other similar parsing functions) as well as any string whose value has been set with the ASN1_STRING_set() function will additionally NUL terminate the byte array in the ASN1_STRING structure. However, it is possible for applications to directly construct valid ASN1_STRING structures which do not NUL terminate the byte array by directly setting the \"data\" and \"length\" fields in the ASN1_STRING array. This can also happen by using the ASN1_STRING_set0() function. Numerous OpenSSL functions that print ASN.1 data have been found to assume that the ASN1_STRING byte array will be NUL terminated, even though this is not guaranteed for strings that have been directly constructed. Where an application requests an ASN.1 structure to be printed, and where that ASN.1 structure contains ASN1_STRINGs that have been directly constructed by the application without NUL terminating the \"data\" field, then a read buffer overrun can occur. The same thing can also occur during name constraints processing of certificates (for example if a certificate has been directly constructed by the application instead of loading it via the OpenSSL parsing functions, and the certificate contains non NUL terminated ASN1_STRING structures). It can also occur in the X509_get1_email(), X509_REQ_get1_email() and X509_get1_ocsp() functions. If a malicious actor can cause an application to directly construct an ASN1_STRING and then process it through one of the affected OpenSSL functions then this issue could be hit. This might result in a crash (causing a Denial of Service attack). It could also result in the disclosure of private memory content...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.4      | Not Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.1.1l-r0]   |"
              },
              "properties": {
                "security-severity": "7.4"
              }
            },
            {
              "id": "CVE-2022-27782_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-27782] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "libcurl would reuse a previously created connection even when a TLS or SSHrelated option had been changed that should have prohibited reuse.libcurl keeps previously used connections in a connection pool for subsequenttransfers to reuse if one of them matches the setup. However, several TLS andSSH settings were left out from the configuration match checks, making themmatch too easily.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.79.1-r2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-41617_3.13:openssh-client_8.4_p1-r2",
              "shortDescription": {
                "text": "[CVE-2021-41617] 3.13:openssh-client 8.4_p1-r2"
              },
              "help": {
                "text": "sshd in OpenSSH 6.2 through 8.x before 8.8, when certain non-default configurations are used, allows privilege escalation because supplemental groups are not initialized as expected. Helper programs for AuthorizedKeysCommand and AuthorizedPrincipalsCommand may run with privileges associated with group memberships of the sshd process, if the configuration specifies running the command as a different user.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.0      | Not Applicable       | `sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar `       | [8.4_p1-r4]   |"
              },
              "properties": {
                "security-severity": "7.0"
              }
            },
            {
              "id": "CVE-2023-0215_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-0215] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "The public API function BIO_new_NDEF is a helper function used for streaming\nASN.1 data via a BIO. It is primarily used internally to OpenSSL to support the\nSMIME, CMS and PKCS7 streaming capabilities, but may also be called directly by\nend user applications.\n\nThe function receives a BIO from the caller, prepends a new BIO_f_asn1 filter\nBIO onto the front of it to form a BIO chain, and then returns the new head of\nthe BIO chain to the caller. Under certain conditions, for example if a CMS\nrecipient public key is invalid, the new filter BIO is freed and the function\nreturns a NULL result indicating a failure. However, in this case, the BIO chain\nis not properly cleaned up and the BIO passed by the caller still retains\ninternal pointers to the previously freed filter BIO. If the caller then goes on\nto call BIO_pop() on the BIO then a use-after-free will occur. This will most\nlikely result in a crash.\n\n\n\nThis scenario occurs directly in the internal function B64_write_ASN1() which\nmay cause BIO_new_NDEF() to be called and will subsequently call BIO_pop() on\nthe BIO. This internal function is in turn called by the public API functions\nPEM_write_bio_ASN1_stream, PEM_write_bio_CMS_stream, PEM_write_bio_PKCS7_stream,\nSMIME_write_ASN1, SMIME_write_CMS and SMIME_write_PKCS7.\n\nOther public API functions that may be impacted by this include\ni2d_ASN1_bio_stream, BIO_new_CMS, BIO_new_PKCS7, i2d_CMS_bio_stream and\ni2d_PKCS7_bio_stream.\n\nThe OpenSSL cms and smime command line applications are similarly affected.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0217_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-0217] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "An invalid pointer dereference on read can be triggered when an\napplication tries to check a malformed DSA public key by the\nEVP_PKEY_public_check() function. This will most likely lead\nto an application crash. This function can be called on public\nkeys supplied from untrusted sources which could allow an attacker\nto cause a denial of service attack.\n\nThe TLS implementation in OpenSSL does not call this function\nbut applications might call the function if there are additional\nsecurity requirements imposed by standards such as FIPS 140-3.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-29491_3.13:ncurses-terminfo-base_6.2_p20210109-r0",
              "shortDescription": {
                "text": "[CVE-2023-29491] 3.13:ncurses-terminfo-base 6.2_p20210109-r0"
              },
              "help": {
                "text": "ncurses before 6.4 20230408, when used by a setuid application, allows local users to trigger security-relevant memory corruption via malformed data in a terminfo database file that is found in $HOME/.terminfo or reached via the TERMINFO or TERM environment variable.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Applicable       | `sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar `       | [6.4_p20230424-r0]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2021-41772_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2021-41772] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Go before 1.16.10 and 1.17.x before 1.17.3 allows an archive/zip Reader.Open panic via a crafted ZIP archive containing an invalid name or an empty filename field.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.16.10], [1.17.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41720_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2022-41720] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "On Windows, restricted files can be accessed via os.DirFS and http.Dir. The os.DirFS function and http.Dir type provide access to a tree of files rooted at a given directory. These functions permit access to Windows device files under that root. For example, os.DirFS(\"C:/tmp\").Open(\"COM1\") opens the COM1 device. Both os.DirFS and http.Dir only provide read-only filesystem access. In addition, on Windows, an os.DirFS for the directory (the root of the current drive) can permit a maliciously crafted path to escape from the drive and access any path on the system. With fix applied, the behavior of os.DirFS(\"\") has changed. Previously, an empty root was treated equivalently to \"/\", so os.DirFS(\"\").Open(\"tmp\") would open the path \"/tmp\". This now returns an error.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.18.9], [1.19.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-27533_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-27533] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "A vulnerability in input validation exists in curl \u003c8.0 during communication using the TELNET protocol may allow an attacker to pass on maliciously crafted user name and \"telnet options\" during server negotiation. The lack of proper input scrubbing allows an attacker to send content or perform option negotiation without the application's intent. This vulnerability could be exploited if an application allows user input, thereby enabling attackers to execute arbitrary code on the system.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.8      | Not Applicable       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.0.0-r0]   |"
              },
              "properties": {
                "security-severity": "8.8"
              }
            },
            {
              "id": "CVE-2022-41716_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2022-41716] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Due to unsanitized NUL values, attackers may be able to maliciously set environment variables on Windows. In syscall.StartProcess and os/exec.Cmd, invalid environment variable values containing NUL values are not properly checked for. A malicious environment variable value can exploit this behavior to set a value for a different environment variable. For example, the environment variable string \"A=B\\x00C=D\" sets the variables \"A=B\" and \"C=D\".",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.18.8], [1.19.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-42898_3.13:krb5-libs_1.18.3-r1",
              "shortDescription": {
                "text": "[CVE-2022-42898] 3.13:krb5-libs 1.18.3-r1"
              },
              "help": {
                "text": "PAC parsing in MIT Kerberos 5 (aka krb5) before 1.19.4 and 1.20.x before 1.20.1 has integer overflows that may lead to remote code execution (in KDC, kadmind, or a GSS or Kerberos application server) on 32-bit platforms (which have a resultant heap-based buffer overflow), and cause a denial of service on other platforms. This occurs in krb5_pac_parse in lib/krb5/krb/pac.c. Heimdal before 7.7.1 has \"a similar bug.\"",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.8      | Not Applicable       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [1.20.1-r0]   |"
              },
              "properties": {
                "security-severity": "8.8"
              }
            },
            {
              "id": "CVE-2023-0464_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-0464] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "A security vulnerability has been identified in all supported versions\n\nof OpenSSL related to the verification of X.509 certificate chains\nthat include policy constraints.  Attackers may be able to exploit this\nvulnerability by creating a malicious certificate chain that triggers\nexponential use of computational resources, leading to a denial-of-service\n(DoS) attack on affected systems.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [3.1.0-r1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-25173_github.com/containerd/containerd_1.5.0-beta.1",
              "shortDescription": {
                "text": "[CVE-2023-25173] github.com/containerd/containerd 1.5.0-beta.1"
              },
              "help": {
                "text": "containerd is an open source container runtime. A bug was found in containerd prior to versions 1.6.18 and 1.5.18 where supplementary groups are not set up properly inside a container. If an attacker has direct access to a container and manipulates their supplementary group access, they may be able to use supplementary group access to bypass primary group restrictions in some cases, potentially gaining access to sensitive information or gaining the ability to execute code in that container. Downstream applications that use the containerd client library may be affected as well.\n\nThis bug has been fixed in containerd v1.6.18 and v.1.5.18. Users should update to these versions and recreate containers to resolve this issue. Users who rely on a downstream application that uses containerd's client library should check that application for a separate advisory and instructions. As a workaround, ensure that the `\"USER $USERNAME\"` Dockerfile instruction is not used. Instead, set the container entrypoint to a value similar to `ENTRYPOINT [\"su\", \"-\", \"user\"]` to allow `su` to properly set up supplementary groups.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Applicable       | `sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.5.18], [1.6.18]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2022-43551_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-43551] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "A vulnerability exists in curl \u003c7.87.0 HSTS check that could be bypassed to trick it to keep using HTTP. Using its HSTS support, curl can be instructed to use HTTPS instead of using an insecure clear-text HTTP step even when HTTP is provided in the URL. However, the HSTS mechanism could be bypassed if the host name in the given URL first uses IDN characters that get replaced to ASCII counterparts as part of the IDN conversion. Like using the character UTF-8 U+3002 (IDEOGRAPHIC FULL STOP) instead of the common ASCII full stop (U+002E) `.`. Then in a subsequent request, it does not detect the HSTS state and makes a clear text transfer. Because it would store the info IDN encoded but look for it IDN decoded.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.87.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0216_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-0216] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "An invalid pointer dereference on read can be triggered when an\napplication tries to load malformed PKCS7 data with the\nd2i_PKCS7(), d2i_PKCS7_bio() or d2i_PKCS7_fp() functions.\n\nThe result of the dereference is an application crash which could\nlead to a denial of service attack. The TLS implementation in OpenSSL\ndoes not call this function however third party applications might\ncall these functions on untrusted data.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-42916_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-42916] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "In curl before 7.86.0, the HSTS check could be bypassed to trick it into staying with HTTP. Using its HSTS support, curl can be instructed to use HTTPS directly (instead of using an insecure cleartext HTTP step) even when HTTP is provided in the URL. This mechanism could be bypassed if the host name in the given URL uses IDN characters that get replaced with ASCII counterparts as part of the IDN conversion, e.g., using the character UTF-8 U+3002 (IDEOGRAPHIC FULL STOP) instead of the common ASCII full stop of U+002E (.). The earliest affected version is 7.77.0 2021-05-26.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.86.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0401_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-0401] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "A NULL pointer can be dereferenced when signatures are being\nverified on PKCS7 signed or signedAndEnveloped data. In case the hash\nalgorithm used for the signature is known to the OpenSSL library but\nthe implementation of the hash algorithm is not available the digest\ninitialization will fail. There is a missing check for the return\nvalue from the initialization function which later leads to invalid\nusage of the digest API most likely leading to a crash.\n\nThe unavailability of an algorithm can be caused by using FIPS\nenabled configuration of providers or more commonly by not loading\nthe legacy provider.\n\nPKCS7 data is processed by the SMIME library calls and also by the\ntime stamp (TS) library calls. The TLS implementation in OpenSSL does\nnot call these functions however third party applications would be\naffected if they call these functions to verify signatures on untrusted\ndata.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-3115_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2021-3115] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Go before 1.14.14 and 1.15.x before 1.15.7 on Windows is vulnerable to Command Injection and remote code execution when using the \"go get\" command to fetch modules that make use of cgo (for example, cgo can execute a gcc program from an untrusted download).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.14.14], [1.15.7]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-35945_3.13:nghttp2-libs_1.42.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-35945] 3.13:nghttp2-libs 1.42.0-r1"
              },
              "help": {
                "text": "Envoy is a cloud-native high-performance edge/middle/service proxy. Envoy’s HTTP/2 codec may leak a header map and bookkeeping structures upon receiving `RST_STREAM` immediately followed by the `GOAWAY` frames from an upstream server. In nghttp2, cleanup of pending requests due to receipt of the `GOAWAY` frame skips de-allocation of the bookkeeping structure and pending compressed header. The error return [code path] is taken if connection is already marked for not sending more requests due to `GOAWAY` frame. The clean-up code is right after the return statement, causing memory leak. Denial of service through memory exhaustion. This vulnerability was patched in versions(s) 1.26.3, 1.25.8, 1.24.9, 1.23.11.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [1.51.0-r1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30580_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2022-30580] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Code injection in Cmd.Start in os/exec before Go 1.17.11 and Go 1.18.3 allows execution of any binaries in the working directory named either \"..com\" or \"..exe\" by calling Cmd.Run, Cmd.Start, Cmd.Output, or Cmd.CombinedOutput when Cmd.Path is unset.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2021-33194_golang.org/x/net_0.0.0-20201224014010-6772e930b67b",
              "shortDescription": {
                "text": "[CVE-2021-33194] golang.org/x/net 0.0.0-20201224014010-6772e930b67b"
              },
              "help": {
                "text": "golang.org/x/net before v0.0.0-20210520170846-37e1c6afe023 allows attackers to cause a denial of service (infinite loop) via crafted ParseFragment input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [0.0.0-20210520170846-37e1c6afe023]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-42916_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-42916] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "In curl before 7.86.0, the HSTS check could be bypassed to trick it into staying with HTTP. Using its HSTS support, curl can be instructed to use HTTPS directly (instead of using an insecure cleartext HTTP step) even when HTTP is provided in the URL. This mechanism could be bypassed if the host name in the given URL uses IDN characters that get replaced with ASCII counterparts as part of the IDN conversion, e.g., using the character UTF-8 U+3002 (IDEOGRAPHIC FULL STOP) instead of the common ASCII full stop of U+002E (.). The earliest affected version is 7.77.0 2021-05-26.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.86.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-41617_3.13:openssh-keygen_8.4_p1-r2",
              "shortDescription": {
                "text": "[CVE-2021-41617] 3.13:openssh-keygen 8.4_p1-r2"
              },
              "help": {
                "text": "sshd in OpenSSH 6.2 through 8.x before 8.8, when certain non-default configurations are used, allows privilege escalation because supplemental groups are not initialized as expected. Helper programs for AuthorizedKeysCommand and AuthorizedPrincipalsCommand may run with privileges associated with group memberships of the sshd process, if the configuration specifies running the command as a different user.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.0      | Not Applicable       | `sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar `       | [8.4_p1-r4]   |"
              },
              "properties": {
                "security-severity": "7.0"
              }
            },
            {
              "id": "CVE-2021-22946_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2021-22946] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "A user can tell curl \u003e= 7.20.0 and \u003c= 7.78.0 to require a successful upgrade to TLS when speaking to an IMAP, POP3 or FTP server (`--ssl-reqd` on the command line or`CURLOPT_USE_SSL` set to `CURLUSESSL_CONTROL` or `CURLUSESSL_ALL` withlibcurl). This requirement could be bypassed if the server would return a properly crafted but perfectly legitimate response.This flaw would then make curl silently continue its operations **withoutTLS** contrary to the instructions and expectations, exposing possibly sensitive data in clear text over the network.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.79.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24537_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2023-24537] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Calling any of the Parse functions on Go source code which contains //line directives with very large line numbers can cause an infinite loop due to integer overflow.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0216_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-0216] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "An invalid pointer dereference on read can be triggered when an\napplication tries to load malformed PKCS7 data with the\nd2i_PKCS7(), d2i_PKCS7_bio() or d2i_PKCS7_fp() functions.\n\nThe result of the dereference is an application crash which could\nlead to a denial of service attack. The TLS implementation in OpenSSL\ndoes not call this function however third party applications might\ncall these functions on untrusted data.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45283_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2023-45283] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "The filepath package does not recognize paths with a \\??\\ prefix as special. On Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x. Before fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b. Similarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b. In addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name. UPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.20.11], [1.20.12], [1.21.4], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0401_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-0401] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "A NULL pointer can be dereferenced when signatures are being\nverified on PKCS7 signed or signedAndEnveloped data. In case the hash\nalgorithm used for the signature is known to the OpenSSL library but\nthe implementation of the hash algorithm is not available the digest\ninitialization will fail. There is a missing check for the return\nvalue from the initialization function which later leads to invalid\nusage of the digest API most likely leading to a crash.\n\nThe unavailability of an algorithm can be caused by using FIPS\nenabled configuration of providers or more commonly by not loading\nthe legacy provider.\n\nPKCS7 data is processed by the SMIME library calls and also by the\ntime stamp (TS) library calls. The TLS implementation in OpenSSL does\nnot call these functions however third party applications would be\naffected if they call these functions to verify signatures on untrusted\ndata.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-23773_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2022-23773] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "cmd/go in Go before 1.16.14 and 1.17.x before 1.17.7 can misinterpret branch names that falsely appear to be version tags. This can lead to incorrect access control if an actor is supposed to be able to create branches but not tags.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.16.14], [1.17.7]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-22576_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-22576] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "An improper authentication vulnerability exists in curl 7.33.0 to and including 7.82.0 which might allow reuse OAUTH2-authenticated connections without properly making sure that the connection was authenticated with the same credentials as set for this transfer. This affects SASL-enabled protocols: SMPTP(S), IMAP(S), POP3(S) and LDAP(S) (openldap only).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Applicable       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.79.1-r1]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2021-3712_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2021-3712] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "ASN.1 strings are represented internally within OpenSSL as an ASN1_STRING structure which contains a buffer holding the string data and a field holding the buffer length. This contrasts with normal C strings which are repesented as a buffer for the string data which is terminated with a NUL (0) byte. Although not a strict requirement, ASN.1 strings that are parsed using OpenSSL's own \"d2i\" functions (and other similar parsing functions) as well as any string whose value has been set with the ASN1_STRING_set() function will additionally NUL terminate the byte array in the ASN1_STRING structure. However, it is possible for applications to directly construct valid ASN1_STRING structures which do not NUL terminate the byte array by directly setting the \"data\" and \"length\" fields in the ASN1_STRING array. This can also happen by using the ASN1_STRING_set0() function. Numerous OpenSSL functions that print ASN.1 data have been found to assume that the ASN1_STRING byte array will be NUL terminated, even though this is not guaranteed for strings that have been directly constructed. Where an application requests an ASN.1 structure to be printed, and where that ASN.1 structure contains ASN1_STRINGs that have been directly constructed by the application without NUL terminating the \"data\" field, then a read buffer overrun can occur. The same thing can also occur during name constraints processing of certificates (for example if a certificate has been directly constructed by the application instead of loading it via the OpenSSL parsing functions, and the certificate contains non NUL terminated ASN1_STRING structures). It can also occur in the X509_get1_email(), X509_REQ_get1_email() and X509_get1_ocsp() functions. If a malicious actor can cause an application to directly construct an ASN1_STRING and then process it through one of the affected OpenSSL functions then this issue could be hit. This might result in a crash (causing a Denial of Service attack). It could also result in the disclosure of private memory content...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.4      | Not Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.1.1l-r0]   |"
              },
              "properties": {
                "security-severity": "7.4"
              }
            },
            {
              "id": "CVE-2022-43551_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-43551] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "A vulnerability exists in curl \u003c7.87.0 HSTS check that could be bypassed to trick it to keep using HTTP. Using its HSTS support, curl can be instructed to use HTTPS instead of using an insecure clear-text HTTP step even when HTTP is provided in the URL. However, the HSTS mechanism could be bypassed if the host name in the given URL first uses IDN characters that get replaced to ASCII counterparts as part of the IDN conversion. Like using the character UTF-8 U+3002 (IDEOGRAPHIC FULL STOP) instead of the common ASCII full stop (U+002E) `.`. Then in a subsequent request, it does not detect the HSTS state and makes a clear text transfer. Because it would store the info IDN encoded but look for it IDN decoded.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.87.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45285_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2023-45285] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Using go get to fetch a module with the \".git\" suffix may unexpectedly fallback to the insecure \"git://\" protocol if the module is unavailable via the secure \"https://\" and \"git+ssh://\" protocols, even if GOINSECURE is not set for said module. This only affects users who are not using the module proxy and are fetching modules directly (i.e. GOPROXY=off).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-22576_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2022-22576] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "An improper authentication vulnerability exists in curl 7.33.0 to and including 7.82.0 which might allow reuse OAUTH2-authenticated connections without properly making sure that the connection was authenticated with the same credentials as set for this transfer. This affects SASL-enabled protocols: SMPTP(S), IMAP(S), POP3(S) and LDAP(S) (openldap only).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Applicable       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.79.1-r1]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2023-0286_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-0286] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "There is a type confusion vulnerability relating to X.400 address processing\ninside an X.509 GeneralName. X.400 addresses were parsed as an ASN1_STRING but\nthe public structure definition for GENERAL_NAME incorrectly specified the type\nof the x400Address field as ASN1_TYPE. This field is subsequently interpreted by\nthe OpenSSL function GENERAL_NAME_cmp as an ASN1_TYPE rather than an\nASN1_STRING.\n\nWhen CRL checking is enabled (i.e. the application sets the\nX509_V_FLAG_CRL_CHECK flag), this vulnerability may allow an attacker to pass\narbitrary pointers to a memcmp call, enabling them to read memory contents or\nenact a denial of service. In most cases, the attack requires the attacker to\nprovide both the certificate chain and CRL, neither of which need to have a\nvalid signature. If the attacker only controls one of these inputs, the other\ninput must already contain an X.400 address as a CRL distribution point, which\nis uncommon. As such, this vulnerability is most likely to only affect\napplications which have implemented their own functionality for retrieving CRLs\nover a network.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.4      | Not Applicable       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.4"
              }
            },
            {
              "id": "CVE-2022-41724_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2022-41724] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Large handshake records may cause panics in crypto/tls. Both clients and servers may send large TLS handshake records which cause servers and clients, respectively, to panic when attempting to construct responses. This affects all TLS 1.3 clients, TLS 1.2 clients which explicitly enable session resumption (by setting Config.ClientSessionCache to a non-nil value), and TLS 1.3 servers which request client certificates (by setting Config.ClientAuth \u003e= RequestClientCert).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-29403_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2023-29403] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "On Unix platforms, the Go runtime does not behave differently when a binary is run with the setuid/setgid bits. This can be dangerous in certain cases, such as when dumping memory state, or assuming the status of standard i/o file descriptors. If a setuid/setgid binary is executed with standard I/O file descriptors closed, opening any files can result in unexpected content being read or written with elevated privileges. Similarly, if a setuid/setgid program is terminated, either via panic or signal, it may leak the contents of its registers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2022-2880_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2022-2880] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Requests forwarded by ReverseProxy include the raw query parameters from the inbound request, including unparsable parameters rejected by net/http. This could permit query parameter smuggling when a Go proxy forwards a parameter with an unparsable value. After fix, ReverseProxy sanitizes the query parameters in the forwarded query when the outbound request's Form field is set after the ReverseProxy. Director function returns, indicating that the proxy has parsed the query parameters. Proxies which do not parse query parameters continue to forward the original query parameters unchanged.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.18.7], [1.19.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-4450_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2022-4450] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "The function PEM_read_bio_ex() reads a PEM file from a BIO and parses and\ndecodes the \"name\" (e.g. \"CERTIFICATE\"), any header data and the payload data.\nIf the function succeeds then the \"name_out\", \"header\" and \"data\" arguments are\npopulated with pointers to buffers containing the relevant decoded data. The\ncaller is responsible for freeing those buffers. It is possible to construct a\nPEM file that results in 0 bytes of payload data. In this case PEM_read_bio_ex()\nwill return a failure code but will populate the header argument with a pointer\nto a buffer that has already been freed. If the caller also frees this buffer\nthen a double free will occur. This will most likely lead to a crash. This\ncould be exploited by an attacker who has the ability to supply malicious PEM\nfiles for parsing to achieve a denial of service attack.\n\nThe functions PEM_read_bio() and PEM_read() are simple wrappers around\nPEM_read_bio_ex() and therefore these functions are also directly affected.\n\nThese functions are also called indirectly by a number of other OpenSSL\nfunctions including PEM_X509_INFO_read_bio_ex() and\nSSL_CTX_use_serverinfo_file() which are also vulnerable. Some OpenSSL internal\nuses of these functions are not vulnerable because the caller does not free the\nheader argument if PEM_read_bio_ex() returns a failure code. These locations\ninclude the PEM_read_bio_TYPE() functions as well as the decoders introduced in\nOpenSSL 3.0.\n\nThe OpenSSL asn1parse command line application is also impacted by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.0.8-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2016-7798_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2016-7798] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "The openssl gem for Ruby uses the same initialization vector (IV) in GCM Mode (aes-*-gcm) when the IV is set before the key, which makes it easier for context-dependent attackers to bypass the encryption protection mechanism.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2016-7798_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2016-7798] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "The openssl gem for Ruby uses the same initialization vector (IV) in GCM Mode (aes-*-gcm) when the IV is set before the key, which makes it easier for context-dependent attackers to bypass the encryption protection mechanism.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2016-7798_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2016-7798] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "The openssl gem for Ruby uses the same initialization vector (IV) in GCM Mode (aes-*-gcm) when the IV is set before the key, which makes it easier for context-dependent attackers to bypass the encryption protection mechanism.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-0563_3.13:libmount_2.36.1-r1",
              "shortDescription": {
                "text": "[CVE-2022-0563] 3.13:libmount 2.36.1-r1"
              },
              "help": {
                "text": "A flaw was found in the util-linux chfn and chsh utilities when compiled with Readline support. The Readline library uses an \"INPUTRC\" environment variable to get a path to the library config file. When the library cannot parse the specified file, it prints an error message containing data from the file. This flaw allows an unprivileged user to read root-owned files, potentially leading to privilege escalation. This flaw affects util-linux versions prior to 2.37.4.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Applicable       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [2.37.4-r0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-25153_github.com/containerd/containerd_1.5.0-beta.1",
              "shortDescription": {
                "text": "[CVE-2023-25153] github.com/containerd/containerd 1.5.0-beta.1"
              },
              "help": {
                "text": "containerd is an open source container runtime. Before versions 1.6.18 and 1.5.18, when importing an OCI image, there was no limit on the number of bytes read for certain files. A maliciously crafted image with a large file where a limit was not applied could cause a denial of service. This bug has been fixed in containerd 1.6.18 and 1.5.18.  Users should update to these versions to resolve the issue. As a workaround, ensure that only trusted images are used and that only trusted users have permissions to import images.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Applicable       | `sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.5.18], [1.6.18]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-3978_golang.org/x/net_0.0.0-20201224014010-6772e930b67b",
              "shortDescription": {
                "text": "[CVE-2023-3978] golang.org/x/net 0.0.0-20201224014010-6772e930b67b"
              },
              "help": {
                "text": "Text nodes not in the HTML namespace are incorrectly literally rendered, causing text which should be escaped to not be. This could lead to an XSS attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Applicable       | `sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [0.13.0]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2021-3449_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2021-3449] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "An OpenSSL TLS server may crash if sent a maliciously crafted renegotiation ClientHello message from a client. If a TLSv1.2 renegotiation ClientHello omits the signature_algorithms extension (where it was present in the initial ClientHello), but includes a signature_algorithms_cert extension then a NULL pointer dereference will result, leading to a crash and a denial of service attack. A server is only vulnerable if it has TLSv1.2 and renegotiation enabled (which is the default configuration). OpenSSL TLS clients are not impacted by this issue. All OpenSSL 1.1.1 versions are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1k. OpenSSL 1.0.2 is not impacted by this issue. Fixed in OpenSSL 1.1.1k (Affected 1.1.1-1.1.1j).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Applicable       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [1.1.1k-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2022-2097_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2022-2097] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "AES OCB mode for 32-bit x86 platforms using the AES-NI assembly optimised implementation will not encrypt the entirety of the data under some circumstances. This could reveal sixteen bytes of data that was preexisting in the memory that wasn't written. In the special case of \"in place\" encryption, sixteen bytes of the plaintext would be revealed. Since OpenSSL does not support OCB based cipher suites for TLS and DTLS, they are both unaffected. Fixed in OpenSSL 3.0.5 (Affected 3.0.0-3.0.4). Fixed in OpenSSL 1.1.1q (Affected 1.1.1-1.1.1p).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [1.1.1q-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-27536_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-27536] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "An authentication bypass vulnerability exists libcurl \u003c8.0.0 in the connection reuse feature which can reuse previously established connections with incorrect user permissions due to a failure to check for changes in the CURLOPT_GSSAPI_DELEGATION option. This vulnerability affects krb5/kerberos/negotiate/GSSAPI transfers and could potentially result in unauthorized access to sensitive information. The safest option is to not reuse connections if the CURLOPT_GSSAPI_DELEGATION option has been changed.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Applicable       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.0.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-0465_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-0465] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "Applications that use a non-default option when verifying certificates may be\nvulnerable to an attack from a malicious CA to circumvent certain checks.\n\nInvalid certificate policies in leaf certificates are silently ignored by\nOpenSSL and other certificate policy checks are skipped for that certificate.\nA malicious CA could use this to deliberately assert invalid certificate policies\nin order to circumvent policy checking on the certificate altogether.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [3.1.0-r2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-2650_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-2650] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "Issue summary: Processing some specially crafted ASN.1 object identifiers or\ndata containing them may be very slow.\n\nImpact summary: Applications that use OBJ_obj2txt() directly, or use any of\nthe OpenSSL subsystems OCSP, PKCS7/SMIME, CMS, CMP/CRMF or TS with no message\nsize limit may experience notable to very long delays when processing those\nmessages, which may lead to a Denial of Service.\n\nAn OBJECT IDENTIFIER is composed of a series of numbers - sub-identifiers -\nmost of which have no size limit.  OBJ_obj2txt() may be used to translate\nan ASN.1 OBJECT IDENTIFIER given in DER encoding form (using the OpenSSL\ntype ASN1_OBJECT) to its canonical numeric text form, which are the\nsub-identifiers of the OBJECT IDENTIFIER in decimal form, separated by\nperiods.\n\nWhen one of the sub-identifiers in the OBJECT IDENTIFIER is very large\n(these are sizes that are seen as absurdly large, taking up tens or hundreds\nof KiBs), the translation to a decimal number in text may take a very long\ntime.  The time complexity is O(n^2) with 'n' being the size of the\nsub-identifiers in bytes (*).\n\nWith OpenSSL 3.0, support to fetch cryptographic algorithms using names /\nidentifiers in string form was introduced.  This includes using OBJECT\nIDENTIFIERs in canonical numeric text form as identifiers for fetching\nalgorithms.\n\nSuch OBJECT IDENTIFIERs may be received through the ASN.1 structure\nAlgorithmIdentifier, which is commonly used in multiple protocols to specify\nwhat cryptographic algorithm should be used to sign or verify, encrypt or\ndecrypt, or digest passed data.\n\nApplications that call OBJ_obj2txt() directly with untrusted data are\naffected, with any version of OpenSSL.  If the use is for the mere purpose\nof display, the severity is considered low.\n\nIn OpenSSL 3.0 and newer, this affects the subsystems OCSP, PKCS7/SMIME,\nCMS, CMP/CRMF or TS.  It also impacts anything that processes X.509\ncertificates, including simple things like verifying its signature.\n\nThe impact on TLS is relatively low, because all versions of OpenSSL...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Applicable       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [3.1.1-r0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-0466_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-0466] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "The function X509_VERIFY_PARAM_add0_policy() is documented to\nimplicitly enable the certificate policy check when doing certificate\nverification. However the implementation of the function does not\nenable the check which allows certificates with invalid or incorrect\npolicies to pass the certificate verification.\n\nAs suddenly enabling the policy check could break existing deployments it was\ndecided to keep the existing behavior of the X509_VERIFY_PARAM_add0_policy()\nfunction.\n\nInstead the applications that require OpenSSL to perform certificate\npolicy check need to use X509_VERIFY_PARAM_set1_policies() or explicitly\nenable the policy check by calling X509_VERIFY_PARAM_set_flags() with\nthe X509_V_FLAG_POLICY_CHECK flag argument.\n\nCertificate policy checks are disabled by default in OpenSSL and are not\ncommonly used by applications.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.0.8-r3]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-33197_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2021-33197] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "In Go before 1.15.13 and 1.16.x before 1.16.5, some configurations of ReverseProxy (from net/http/httputil) result in a situation where an attacker is able to drop arbitrary headers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.15.13], [1.16.5]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-0563_3.13:libblkid_2.36.1-r1",
              "shortDescription": {
                "text": "[CVE-2022-0563] 3.13:libblkid 2.36.1-r1"
              },
              "help": {
                "text": "A flaw was found in the util-linux chfn and chsh utilities when compiled with Readline support. The Readline library uses an \"INPUTRC\" environment variable to get a path to the library config file. When the library cannot parse the specified file, it prints an error message containing data from the file. This flaw allows an unprivileged user to read root-owned files, potentially leading to privilege escalation. This flaw affects util-linux versions prior to 2.37.4.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Applicable       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [2.37.4-r0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2022-0563_3.13:libuuid_2.36.1-r1",
              "shortDescription": {
                "text": "[CVE-2022-0563] 3.13:libuuid 2.36.1-r1"
              },
              "help": {
                "text": "A flaw was found in the util-linux chfn and chsh utilities when compiled with Readline support. The Readline library uses an \"INPUTRC\" environment variable to get a path to the library config file. When the library cannot parse the specified file, it prints an error message containing data from the file. This flaw allows an unprivileged user to read root-owned files, potentially leading to privilege escalation. This flaw affects util-linux versions prior to 2.37.4.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Applicable       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [2.37.4-r0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-2650_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-2650] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "Issue summary: Processing some specially crafted ASN.1 object identifiers or\ndata containing them may be very slow.\n\nImpact summary: Applications that use OBJ_obj2txt() directly, or use any of\nthe OpenSSL subsystems OCSP, PKCS7/SMIME, CMS, CMP/CRMF or TS with no message\nsize limit may experience notable to very long delays when processing those\nmessages, which may lead to a Denial of Service.\n\nAn OBJECT IDENTIFIER is composed of a series of numbers - sub-identifiers -\nmost of which have no size limit.  OBJ_obj2txt() may be used to translate\nan ASN.1 OBJECT IDENTIFIER given in DER encoding form (using the OpenSSL\ntype ASN1_OBJECT) to its canonical numeric text form, which are the\nsub-identifiers of the OBJECT IDENTIFIER in decimal form, separated by\nperiods.\n\nWhen one of the sub-identifiers in the OBJECT IDENTIFIER is very large\n(these are sizes that are seen as absurdly large, taking up tens or hundreds\nof KiBs), the translation to a decimal number in text may take a very long\ntime.  The time complexity is O(n^2) with 'n' being the size of the\nsub-identifiers in bytes (*).\n\nWith OpenSSL 3.0, support to fetch cryptographic algorithms using names /\nidentifiers in string form was introduced.  This includes using OBJECT\nIDENTIFIERs in canonical numeric text form as identifiers for fetching\nalgorithms.\n\nSuch OBJECT IDENTIFIERs may be received through the ASN.1 structure\nAlgorithmIdentifier, which is commonly used in multiple protocols to specify\nwhat cryptographic algorithm should be used to sign or verify, encrypt or\ndecrypt, or digest passed data.\n\nApplications that call OBJ_obj2txt() directly with untrusted data are\naffected, with any version of OpenSSL.  If the use is for the mere purpose\nof display, the severity is considered low.\n\nIn OpenSSL 3.0 and newer, this affects the subsystems OCSP, PKCS7/SMIME,\nCMS, CMP/CRMF or TS.  It also impacts anything that processes X.509\ncertificates, including simple things like verifying its signature.\n\nThe impact on TLS is relatively low, because all versions of OpenSSL...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.1.1-r0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-0465_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-0465] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "Applications that use a non-default option when verifying certificates may be\nvulnerable to an attack from a malicious CA to circumvent certain checks.\n\nInvalid certificate policies in leaf certificates are silently ignored by\nOpenSSL and other certificate policy checks are skipped for that certificate.\nA malicious CA could use this to deliberately assert invalid certificate policies\nin order to circumvent policy checking on the certificate altogether.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.1.0-r2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-22922_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2021-22922] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "When curl is instructed to download content using the metalink feature, thecontents is verified against a hash provided in the metalink XML file.The metalink XML file points out to the client how to get the same contentfrom a set of different URLs, potentially hosted by different servers and theclient can then download the file from one or several of them. In a serial orparallel manner.If one of the servers hosting the contents has been breached and the contentsof the specific file on that server is replaced with a modified payload, curlshould detect this when the hash of the file mismatches after a completeddownload. It should remove the contents and instead try getting the contentsfrom another URL. This is not done, and instead such a hash mismatch is onlymentioned in text and the potentially malicious content is kept in the file ondisk.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Applicable       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.78.0-r0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2021-22922_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2021-22922] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "When curl is instructed to download content using the metalink feature, thecontents is verified against a hash provided in the metalink XML file.The metalink XML file points out to the client how to get the same contentfrom a set of different URLs, potentially hosted by different servers and theclient can then download the file from one or several of them. In a serial orparallel manner.If one of the servers hosting the contents has been breached and the contentsof the specific file on that server is replaced with a modified payload, curlshould detect this when the hash of the file mismatches after a completeddownload. It should remove the contents and instead try getting the contentsfrom another URL. This is not done, and instead such a hash mismatch is onlymentioned in text and the potentially malicious content is kept in the file ondisk.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Applicable       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.78.0-r0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-2650_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-2650] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "Issue summary: Processing some specially crafted ASN.1 object identifiers or\ndata containing them may be very slow.\n\nImpact summary: Applications that use OBJ_obj2txt() directly, or use any of\nthe OpenSSL subsystems OCSP, PKCS7/SMIME, CMS, CMP/CRMF or TS with no message\nsize limit may experience notable to very long delays when processing those\nmessages, which may lead to a Denial of Service.\n\nAn OBJECT IDENTIFIER is composed of a series of numbers - sub-identifiers -\nmost of which have no size limit.  OBJ_obj2txt() may be used to translate\nan ASN.1 OBJECT IDENTIFIER given in DER encoding form (using the OpenSSL\ntype ASN1_OBJECT) to its canonical numeric text form, which are the\nsub-identifiers of the OBJECT IDENTIFIER in decimal form, separated by\nperiods.\n\nWhen one of the sub-identifiers in the OBJECT IDENTIFIER is very large\n(these are sizes that are seen as absurdly large, taking up tens or hundreds\nof KiBs), the translation to a decimal number in text may take a very long\ntime.  The time complexity is O(n^2) with 'n' being the size of the\nsub-identifiers in bytes (*).\n\nWith OpenSSL 3.0, support to fetch cryptographic algorithms using names /\nidentifiers in string form was introduced.  This includes using OBJECT\nIDENTIFIERs in canonical numeric text form as identifiers for fetching\nalgorithms.\n\nSuch OBJECT IDENTIFIERs may be received through the ASN.1 structure\nAlgorithmIdentifier, which is commonly used in multiple protocols to specify\nwhat cryptographic algorithm should be used to sign or verify, encrypt or\ndecrypt, or digest passed data.\n\nApplications that call OBJ_obj2txt() directly with untrusted data are\naffected, with any version of OpenSSL.  If the use is for the mere purpose\nof display, the severity is considered low.\n\nIn OpenSSL 3.0 and newer, this affects the subsystems OCSP, PKCS7/SMIME,\nCMS, CMP/CRMF or TS.  It also impacts anything that processes X.509\ncertificates, including simple things like verifying its signature.\n\nThe impact on TLS is relatively low, because all versions of OpenSSL...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.1.1-r0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-2097_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2022-2097] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "AES OCB mode for 32-bit x86 platforms using the AES-NI assembly optimised implementation will not encrypt the entirety of the data under some circumstances. This could reveal sixteen bytes of data that was preexisting in the memory that wasn't written. In the special case of \"in place\" encryption, sixteen bytes of the plaintext would be revealed. Since OpenSSL does not support OCB based cipher suites for TLS and DTLS, they are both unaffected. Fixed in OpenSSL 3.0.5 (Affected 3.0.0-3.0.4). Fixed in OpenSSL 1.1.1q (Affected 1.1.1-1.1.1p).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.1.1q-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-22923_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2021-22923] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "When curl is instructed to get content using the metalink feature, and a user name and password are used to download the metalink XML file, those same credentials are then subsequently passed on to each of the servers from which curl will download or try to download the contents from. Often contrary to the user's expectations and intentions and without telling the user it happened.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.78.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-0466_3.13:openssl_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-0466] 3.13:openssl 1.1.1j-r0"
              },
              "help": {
                "text": "The function X509_VERIFY_PARAM_add0_policy() is documented to\nimplicitly enable the certificate policy check when doing certificate\nverification. However the implementation of the function does not\nenable the check which allows certificates with invalid or incorrect\npolicies to pass the certificate verification.\n\nAs suddenly enabling the policy check could break existing deployments it was\ndecided to keep the existing behavior of the X509_VERIFY_PARAM_add0_policy()\nfunction.\n\nInstead the applications that require OpenSSL to perform certificate\npolicy check need to use X509_VERIFY_PARAM_set1_policies() or explicitly\nenable the policy check by calling X509_VERIFY_PARAM_set_flags() with\nthe X509_V_FLAG_POLICY_CHECK flag argument.\n\nCertificate policy checks are disabled by default in OpenSSL and are not\ncommonly used by applications.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar `       | [3.0.8-r3]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-51385_3.13:openssh-client_8.4_p1-r2",
              "shortDescription": {
                "text": "[CVE-2023-51385] 3.13:openssh-client 8.4_p1-r2"
              },
              "help": {
                "text": "In ssh in OpenSSH before 9.6, OS command injection might occur if a user name or host name has shell metacharacters, and this name is referenced by an expansion token in certain situations. For example, an untrusted Git repository can have a submodule with shell metacharacters in a user name or host name.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Applicable       | `sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar `       | [9.1_p1-r5]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-29526_golang.org/x/sys_0.0.0-20210303074136-134d130e1a04",
              "shortDescription": {
                "text": "[CVE-2022-29526] golang.org/x/sys 0.0.0-20210303074136-134d130e1a04"
              },
              "help": {
                "text": "Go before 1.17.10 and 1.18.x before 1.18.2 has Incorrect Privilege Assignment. When called with a non-zero flags parameter, the Faccessat function could incorrectly report that a file is accessible.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [0.0.0-20220412211240-33da011f77ad]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-0465_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-0465] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "Applications that use a non-default option when verifying certificates may be\nvulnerable to an attack from a malicious CA to circumvent certain checks.\n\nInvalid certificate policies in leaf certificates are silently ignored by\nOpenSSL and other certificate policy checks are skipped for that certificate.\nA malicious CA could use this to deliberately assert invalid certificate policies\nin order to circumvent policy checking on the certificate altogether.\n\nPolicy processing is disabled by default but can be enabled by passing\nthe `-policy' argument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.1.0-r2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-22923_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2021-22923] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "When curl is instructed to get content using the metalink feature, and a user name and password are used to download the metalink XML file, those same credentials are then subsequently passed on to each of the servers from which curl will download or try to download the contents from. Often contrary to the user's expectations and intentions and without telling the user it happened.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [7.78.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-1962_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2022-1962] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Uncontrolled recursion in the Parse functions in go/parser before Go 1.17.12 and Go 1.18.4 allow an attacker to cause a panic due to stack exhaustion via deeply nested types or declarations.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-27536_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-27536] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "An authentication bypass vulnerability exists libcurl \u003c8.0.0 in the connection reuse feature which can reuse previously established connections with incorrect user permissions due to a failure to check for changes in the CURLOPT_GSSAPI_DELEGATION option. This vulnerability affects krb5/kerberos/negotiate/GSSAPI transfers and could potentially result in unauthorized access to sensitive information. The safest option is to not reuse connections if the CURLOPT_GSSAPI_DELEGATION option has been changed.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Applicable       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.0.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2021-3449_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2021-3449] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "An OpenSSL TLS server may crash if sent a maliciously crafted renegotiation ClientHello message from a client. If a TLSv1.2 renegotiation ClientHello omits the signature_algorithms extension (where it was present in the initial ClientHello), but includes a signature_algorithms_cert extension then a NULL pointer dereference will result, leading to a crash and a denial of service attack. A server is only vulnerable if it has TLSv1.2 and renegotiation enabled (which is the default configuration). OpenSSL TLS clients are not impacted by this issue. All OpenSSL 1.1.1 versions are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1k. OpenSSL 1.0.2 is not impacted by this issue. Fixed in OpenSSL 1.1.1k (Affected 1.1.1-1.1.1j).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.1.1k-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-0466_3.13:libcrypto1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2023-0466] 3.13:libcrypto1.1 1.1.1j-r0"
              },
              "help": {
                "text": "The function X509_VERIFY_PARAM_add0_policy() is documented to\nimplicitly enable the certificate policy check when doing certificate\nverification. However the implementation of the function does not\nenable the check which allows certificates with invalid or incorrect\npolicies to pass the certificate verification.\n\nAs suddenly enabling the policy check could break existing deployments it was\ndecided to keep the existing behavior of the X509_VERIFY_PARAM_add0_policy()\nfunction.\n\nInstead the applications that require OpenSSL to perform certificate\npolicy check need to use X509_VERIFY_PARAM_set1_policies() or explicitly\nenable the policy check by calling X509_VERIFY_PARAM_set_flags() with\nthe X509_V_FLAG_POLICY_CHECK flag argument.\n\nCertificate policy checks are disabled by default in OpenSSL and are not\ncommonly used by applications.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [3.0.8-r3]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-51385_3.13:openssh-keygen_8.4_p1-r2",
              "shortDescription": {
                "text": "[CVE-2023-51385] 3.13:openssh-keygen 8.4_p1-r2"
              },
              "help": {
                "text": "In ssh in OpenSSH before 9.6, OS command injection might occur if a user name or host name has shell metacharacters, and this name is referenced by an expansion token in certain situations. For example, an untrusted Git repository can have a submodule with shell metacharacters in a user name or host name.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Applicable       | `sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar `       | [9.1_p1-r5]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2021-36221_github.com/golang/go_1.13.15",
              "shortDescription": {
                "text": "[CVE-2021-36221] github.com/golang/go 1.13.15"
              },
              "help": {
                "text": "Go before 1.15.15 and 1.16.x before 1.16.7 has a race condition that can lead to a net/http/httputil ReverseProxy panic upon an ErrAbortHandler abort.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Applicable       | `sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar `\u003cbr/\u003e`sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar `       | [1.15.15], [1.16.7]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2022-2097_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2022-2097] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "AES OCB mode for 32-bit x86 platforms using the AES-NI assembly optimised implementation will not encrypt the entirety of the data under some circumstances. This could reveal sixteen bytes of data that was preexisting in the memory that wasn't written. In the special case of \"in place\" encryption, sixteen bytes of the plaintext would be revealed. Since OpenSSL does not support OCB based cipher suites for TLS and DTLS, they are both unaffected. Fixed in OpenSSL 3.0.5 (Affected 3.0.0-3.0.4). Fixed in OpenSSL 1.1.1q (Affected 1.1.1-1.1.1p).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.1.1q-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-3449_3.13:libssl1.1_1.1.1j-r0",
              "shortDescription": {
                "text": "[CVE-2021-3449] 3.13:libssl1.1 1.1.1j-r0"
              },
              "help": {
                "text": "An OpenSSL TLS server may crash if sent a maliciously crafted renegotiation ClientHello message from a client. If a TLSv1.2 renegotiation ClientHello omits the signature_algorithms extension (where it was present in the initial ClientHello), but includes a signature_algorithms_cert extension then a NULL pointer dereference will result, leading to a crash and a denial of service attack. A server is only vulnerable if it has TLSv1.2 and renegotiation enabled (which is the default configuration). OpenSSL TLS clients are not impacted by this issue. All OpenSSL 1.1.1 versions are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1k. OpenSSL 1.0.2 is not impacted by this issue. Fixed in OpenSSL 1.1.1k (Affected 1.1.1-1.1.1j).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Applicable       | `sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar `       | [1.1.1k-r0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-28322_3.13:curl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-28322] 3.13:curl 7.74.0-r1"
              },
              "help": {
                "text": "An information disclosure vulnerability exists in curl \u003cv8.1.0 when doing HTTP(S) transfers, libcurl might erroneously use the read callback (`CURLOPT_READFUNCTION`) to ask for data to send, even when the `CURLOPT_POSTFIELDS` option has been set, if the same handle previously wasused to issue a `PUT` request which used that callback. This flaw may surprise the application and cause it to misbehave and either send off the wrong data or use memory after free or similar in the second transfer. The problem exists in the logic for a reused handle when it is (expected to be) changed from a PUT to a POST.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.7      | Not Applicable       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.1.0-r0]   |"
              },
              "properties": {
                "security-severity": "3.7"
              }
            },
            {
              "id": "CVE-2023-28322_3.13:libcurl_7.74.0-r1",
              "shortDescription": {
                "text": "[CVE-2023-28322] 3.13:libcurl 7.74.0-r1"
              },
              "help": {
                "text": "An information disclosure vulnerability exists in curl \u003cv8.1.0 when doing HTTP(S) transfers, libcurl might erroneously use the read callback (`CURLOPT_READFUNCTION`) to ask for data to send, even when the `CURLOPT_POSTFIELDS` option has been set, if the same handle previously wasused to issue a `PUT` request which used that callback. This flaw may surprise the application and cause it to misbehave and either send off the wrong data or use memory after free or similar in the second transfer. The problem exists in the logic for a reused handle when it is (expected to be) changed from a PUT to a POST.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.7      | Not Applicable       | `sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar `       | [8.1.0-r0]   |"
              },
              "properties": {
                "security-severity": "3.7"
              }
            }
          ],
          "version": "3.96.1"
        }
      },
      "results": [
        {
          "ruleId": "CVE-2023-24540_github.com/golang/go_1.13.15",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24540] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24540_github.com/golang/go_1.13.15",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24540] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1292_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "[CVE-2022-1292] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23806_github.com/golang/go_1.13.15",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "[CVE-2022-23806] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23806_github.com/golang/go_1.13.15",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "[CVE-2022-23806] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2068_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "text": "[CVE-2022-2068] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24538_github.com/golang/go_1.13.15",
          "ruleIndex": 4,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24538] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24538_github.com/golang/go_1.13.15",
          "ruleIndex": 4,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24538] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1292_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 5,
          "level": "error",
          "message": {
            "text": "[CVE-2022-1292] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1292_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 6,
          "level": "error",
          "message": {
            "text": "[CVE-2022-1292] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2068_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "[CVE-2022-2068] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2068_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 8,
          "level": "error",
          "message": {
            "text": "[CVE-2022-2068] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-38408_3.13:openssh-keygen_8.4_p1-r2",
          "ruleIndex": 9,
          "level": "error",
          "message": {
            "text": "[CVE-2023-38408] sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-38408_3.13:openssh-client_8.4_p1-r2",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "[CVE-2023-38408] sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-22945_3.13:curl_7.74.0-r1",
          "ruleIndex": 11,
          "level": "error",
          "message": {
            "text": "[CVE-2021-22945] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-48174_3.13:ssl_client_1.32.1-r3",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "[CVE-2022-48174] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-48174_3.13:busybox_1.32.1-r3",
          "ruleIndex": 13,
          "level": "error",
          "message": {
            "text": "[CVE-2022-48174] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32207_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 14,
          "level": "error",
          "message": {
            "text": "[CVE-2022-32207] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-36159_3.13:apk-tools_2.12.1-r0",
          "ruleIndex": 15,
          "level": "error",
          "message": {
            "text": "[CVE-2021-36159] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32207_3.13:curl_7.74.0-r1",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "[CVE-2022-32207] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-22945_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 17,
          "level": "error",
          "message": {
            "text": "[CVE-2021-22945] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32189_github.com/golang/go_1.13.15",
          "ruleIndex": 18,
          "level": "error",
          "message": {
            "text": "[CVE-2022-32189] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32189_github.com/golang/go_1.13.15",
          "ruleIndex": 18,
          "level": "error",
          "message": {
            "text": "[CVE-2022-32189] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41725_github.com/golang/go_1.13.15",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41725] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41725_github.com/golang/go_1.13.15",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41725] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24534_github.com/golang/go_1.13.15",
          "ruleIndex": 20,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24534] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24534_github.com/golang/go_1.13.15",
          "ruleIndex": 20,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24534] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39325_golang.org/x/net_0.0.0-20201224014010-6772e930b67b",
          "ruleIndex": 21,
          "level": "error",
          "message": {
            "text": "[CVE-2023-39325] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-3602_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 22,
          "level": "error",
          "message": {
            "text": "[CVE-2022-3602] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30632_github.com/golang/go_1.13.15",
          "ruleIndex": 23,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30632] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30632_github.com/golang/go_1.13.15",
          "ruleIndex": 23,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30632] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-28131_github.com/golang/go_1.13.15",
          "ruleIndex": 24,
          "level": "error",
          "message": {
            "text": "[CVE-2022-28131] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-28131_github.com/golang/go_1.13.15",
          "ruleIndex": 24,
          "level": "error",
          "message": {
            "text": "[CVE-2022-28131] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-51767_3.13:openssh-keygen_8.4_p1-r2",
          "ruleIndex": 25,
          "level": "error",
          "message": {
            "text": "[CVE-2023-51767] sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24675_github.com/golang/go_1.13.15",
          "ruleIndex": 26,
          "level": "error",
          "message": {
            "text": "[CVE-2022-24675] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24675_github.com/golang/go_1.13.15",
          "ruleIndex": 26,
          "level": "error",
          "message": {
            "text": "[CVE-2022-24675] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-33195_github.com/golang/go_1.13.15",
          "ruleIndex": 27,
          "level": "error",
          "message": {
            "text": "[CVE-2021-33195] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-33195_github.com/golang/go_1.13.15",
          "ruleIndex": 27,
          "level": "error",
          "message": {
            "text": "[CVE-2021-33195] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-51767_3.13:openssh-client_8.4_p1-r2",
          "ruleIndex": 28,
          "level": "error",
          "message": {
            "text": "[CVE-2023-51767] sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-39293_github.com/golang/go_1.13.15",
          "ruleIndex": 29,
          "level": "error",
          "message": {
            "text": "[CVE-2021-39293] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-39293_github.com/golang/go_1.13.15",
          "ruleIndex": 29,
          "level": "error",
          "message": {
            "text": "[CVE-2021-39293] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-3602_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 30,
          "level": "error",
          "message": {
            "text": "[CVE-2022-3602] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30635_github.com/golang/go_1.13.15",
          "ruleIndex": 31,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30635] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30635_github.com/golang/go_1.13.15",
          "ruleIndex": 31,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30635] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45287_github.com/golang/go_1.13.15",
          "ruleIndex": 32,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45287] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45287_github.com/golang/go_1.13.15",
          "ruleIndex": 32,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45287] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-44487_3.13:nghttp2-libs_1.42.0-r1",
          "ruleIndex": 33,
          "level": "error",
          "message": {
            "text": "[CVE-2023-44487] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-3786_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 34,
          "level": "error",
          "message": {
            "text": "[CVE-2022-3786] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27664_golang.org/x/net_0.0.0-20201224014010-6772e930b67b",
          "ruleIndex": 35,
          "level": "error",
          "message": {
            "text": "[CVE-2022-27664] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24921_github.com/golang/go_1.13.15",
          "ruleIndex": 36,
          "level": "error",
          "message": {
            "text": "[CVE-2022-24921] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24921_github.com/golang/go_1.13.15",
          "ruleIndex": 36,
          "level": "error",
          "message": {
            "text": "[CVE-2022-24921] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-33198_github.com/golang/go_1.13.15",
          "ruleIndex": 37,
          "level": "error",
          "message": {
            "text": "[CVE-2021-33198] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-33198_github.com/golang/go_1.13.15",
          "ruleIndex": 37,
          "level": "error",
          "message": {
            "text": "[CVE-2021-33198] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2879_github.com/golang/go_1.13.15",
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "[CVE-2022-2879] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2879_github.com/golang/go_1.13.15",
          "ruleIndex": 38,
          "level": "error",
          "message": {
            "text": "[CVE-2022-2879] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-33196_github.com/golang/go_1.13.15",
          "ruleIndex": 39,
          "level": "error",
          "message": {
            "text": "[CVE-2021-33196] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-33196_github.com/golang/go_1.13.15",
          "ruleIndex": 39,
          "level": "error",
          "message": {
            "text": "[CVE-2021-33196] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-44487_golang.org/x/net_0.0.0-20201224014010-6772e930b67b",
          "ruleIndex": 40,
          "level": "error",
          "message": {
            "text": "[CVE-2023-44487] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23772_github.com/golang/go_1.13.15",
          "ruleIndex": 41,
          "level": "error",
          "message": {
            "text": "[CVE-2022-23772] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23772_github.com/golang/go_1.13.15",
          "ruleIndex": 41,
          "level": "error",
          "message": {
            "text": "[CVE-2022-23772] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29400_github.com/golang/go_1.13.15",
          "ruleIndex": 42,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29400] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29400_github.com/golang/go_1.13.15",
          "ruleIndex": 42,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29400] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-3786_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 43,
          "level": "error",
          "message": {
            "text": "[CVE-2022-3786] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30631_github.com/golang/go_1.13.15",
          "ruleIndex": 44,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30631] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30631_github.com/golang/go_1.13.15",
          "ruleIndex": 44,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30631] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-21626_github.com/opencontainers/runc_1.0.0-rc93",
          "ruleIndex": 45,
          "level": "error",
          "message": {
            "text": "[CVE-2024-21626] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30633_github.com/golang/go_1.13.15",
          "ruleIndex": 46,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30633] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30633_github.com/golang/go_1.13.15",
          "ruleIndex": 46,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30633] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24539_github.com/golang/go_1.13.15",
          "ruleIndex": 47,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24539] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24539_github.com/golang/go_1.13.15",
          "ruleIndex": 47,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24539] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-3602_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 48,
          "level": "error",
          "message": {
            "text": "[CVE-2022-3602] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-27918_github.com/golang/go_1.13.15",
          "ruleIndex": 49,
          "level": "error",
          "message": {
            "text": "[CVE-2021-27918] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-27918_github.com/golang/go_1.13.15",
          "ruleIndex": 49,
          "level": "error",
          "message": {
            "text": "[CVE-2021-27918] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24536_github.com/golang/go_1.13.15",
          "ruleIndex": 50,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24536] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24536_github.com/golang/go_1.13.15",
          "ruleIndex": 50,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24536] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-28327_github.com/golang/go_1.13.15",
          "ruleIndex": 51,
          "level": "error",
          "message": {
            "text": "[CVE-2022-28327] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-28327_github.com/golang/go_1.13.15",
          "ruleIndex": 51,
          "level": "error",
          "message": {
            "text": "[CVE-2022-28327] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-3786_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 52,
          "level": "error",
          "message": {
            "text": "[CVE-2022-3786] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-27534_3.13:curl_7.74.0-r1",
          "ruleIndex": 53,
          "level": "error",
          "message": {
            "text": "[CVE-2023-27534] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-27534_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 54,
          "level": "error",
          "message": {
            "text": "[CVE-2023-27534] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2006-5794_3.13:openssh-keygen_8.4_p1-r2",
          "ruleIndex": 55,
          "level": "error",
          "message": {
            "text": "[CVE-2006-5794] sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42386_3.13:busybox_1.32.1-r3",
          "ruleIndex": 56,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42386] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42386_3.13:ssl_client_1.32.1-r3",
          "ruleIndex": 57,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42386] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24557_github.com/docker/docker_20.10.4+incompatible",
          "ruleIndex": 58,
          "level": "error",
          "message": {
            "text": "[CVE-2024-24557] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2000-1254_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 59,
          "level": "error",
          "message": {
            "text": "[CVE-2000-1254] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2003-0682_3.13:openssh-keygen_8.4_p1-r2",
          "ruleIndex": 60,
          "level": "error",
          "message": {
            "text": "[CVE-2003-0682] sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-36222_3.13:krb5-libs_1.18.3-r1",
          "ruleIndex": 61,
          "level": "error",
          "message": {
            "text": "[CVE-2021-36222] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2003-0693_3.13:openssh-client_8.4_p1-r2",
          "ruleIndex": 62,
          "level": "error",
          "message": {
            "text": "[CVE-2003-0693] sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2013-20001_3.13:zfs_2.0.1-r0",
          "ruleIndex": 63,
          "level": "error",
          "message": {
            "text": "[CVE-2013-20001] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2000-1254_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 64,
          "level": "error",
          "message": {
            "text": "[CVE-2000-1254] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1304_3.13:e2fsprogs_1.45.7-r0",
          "ruleIndex": 65,
          "level": "error",
          "message": {
            "text": "[CVE-2022-1304] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-42915_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 66,
          "level": "error",
          "message": {
            "text": "[CVE-2022-42915] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1304_3.13:libcom_err_1.45.7-r0",
          "ruleIndex": 67,
          "level": "error",
          "message": {
            "text": "[CVE-2022-1304] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2003-0695_3.13:openssh-client_8.4_p1-r2",
          "ruleIndex": 68,
          "level": "error",
          "message": {
            "text": "[CVE-2003-0695] sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2006-5051_3.13:openssh-client_8.4_p1-r2",
          "ruleIndex": 69,
          "level": "error",
          "message": {
            "text": "[CVE-2006-5051] sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1304_3.13:e2fsprogs-libs_1.45.7-r0",
          "ruleIndex": 70,
          "level": "error",
          "message": {
            "text": "[CVE-2022-1304] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-29162_github.com/opencontainers/runc_1.0.0-rc93",
          "ruleIndex": 71,
          "level": "error",
          "message": {
            "text": "[CVE-2022-29162] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27775_3.13:curl_7.74.0-r1",
          "ruleIndex": 72,
          "level": "error",
          "message": {
            "text": "[CVE-2022-27775] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-22901_3.13:curl_7.74.0-r1",
          "ruleIndex": 73,
          "level": "error",
          "message": {
            "text": "[CVE-2021-22901] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3450_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 74,
          "level": "error",
          "message": {
            "text": "[CVE-2021-3450] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2003-0682_3.13:openssh-client_8.4_p1-r2",
          "ruleIndex": 75,
          "level": "error",
          "message": {
            "text": "[CVE-2003-0682] sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1304_3.13:e2fsprogs-extra_1.45.7-r0",
          "ruleIndex": 76,
          "level": "error",
          "message": {
            "text": "[CVE-2022-1304] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30065_3.13:ssl_client_1.32.1-r3",
          "ruleIndex": 77,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30065] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42915_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 78,
          "level": "error",
          "message": {
            "text": "[CVE-2023-42915] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2006-5794_3.13:openssh-client_8.4_p1-r2",
          "ruleIndex": 79,
          "level": "error",
          "message": {
            "text": "[CVE-2006-5794] sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1271_3.13:xz_5.2.5-r0",
          "ruleIndex": 80,
          "level": "error",
          "message": {
            "text": "[CVE-2022-1271] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-29458_3.13:ncurses-libs_6.2_p20210109-r0",
          "ruleIndex": 81,
          "level": "error",
          "message": {
            "text": "[CVE-2022-29458] sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-49298_3.13:zfs_2.0.1-r0",
          "ruleIndex": 82,
          "level": "error",
          "message": {
            "text": "[CVE-2023-49298] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27775_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 83,
          "level": "error",
          "message": {
            "text": "[CVE-2022-27775] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-0778_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 84,
          "level": "error",
          "message": {
            "text": "[CVE-2022-0778] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42915_3.13:curl_7.74.0-r1",
          "ruleIndex": 85,
          "level": "error",
          "message": {
            "text": "[CVE-2023-42915] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42383_3.13:ssl_client_1.32.1-r3",
          "ruleIndex": 86,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42383] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2013-20001_3.13:zfs-libs_2.0.1-r0",
          "ruleIndex": 87,
          "level": "error",
          "message": {
            "text": "[CVE-2013-20001] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2006-5051_3.13:openssh-keygen_8.4_p1-r2",
          "ruleIndex": 88,
          "level": "error",
          "message": {
            "text": "[CVE-2006-5051] sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-42915_3.13:curl_7.74.0-r1",
          "ruleIndex": 89,
          "level": "error",
          "message": {
            "text": "[CVE-2022-42915] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2000-1254_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 90,
          "level": "error",
          "message": {
            "text": "[CVE-2000-1254] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2003-0693_3.13:openssh-keygen_8.4_p1-r2",
          "ruleIndex": 91,
          "level": "error",
          "message": {
            "text": "[CVE-2003-0693] sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42384_3.13:busybox_1.32.1-r3",
          "ruleIndex": 92,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42384] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42379_3.13:busybox_1.32.1-r3",
          "ruleIndex": 93,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42379] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-30139_3.13:apk-tools_2.12.1-r0",
          "ruleIndex": 94,
          "level": "error",
          "message": {
            "text": "[CVE-2021-30139] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42385_3.13:ssl_client_1.32.1-r3",
          "ruleIndex": 95,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42385] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-28642_github.com/opencontainers/runc_1.0.0-rc93",
          "ruleIndex": 96,
          "level": "error",
          "message": {
            "text": "[CVE-2023-28642] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27780_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 97,
          "level": "error",
          "message": {
            "text": "[CVE-2022-27780] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-28319_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 98,
          "level": "error",
          "message": {
            "text": "[CVE-2023-28319] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42384_3.13:ssl_client_1.32.1-r3",
          "ruleIndex": 99,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42384] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42380_3.13:ssl_client_1.32.1-r3",
          "ruleIndex": 100,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42380] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-28319_3.13:curl_7.74.0-r1",
          "ruleIndex": 101,
          "level": "error",
          "message": {
            "text": "[CVE-2023-28319] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42383_3.13:busybox_1.32.1-r3",
          "ruleIndex": 102,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42383] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-22901_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 103,
          "level": "error",
          "message": {
            "text": "[CVE-2021-22901] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42382_3.13:busybox_1.32.1-r3",
          "ruleIndex": 104,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42382] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-46828_3.13:libtirpc_1.3.1-r0",
          "ruleIndex": 105,
          "level": "error",
          "message": {
            "text": "[CVE-2021-46828] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27780_3.13:curl_7.74.0-r1",
          "ruleIndex": 106,
          "level": "error",
          "message": {
            "text": "[CVE-2022-27780] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-28391_3.13:busybox_1.32.1-r3",
          "ruleIndex": 107,
          "level": "error",
          "message": {
            "text": "[CVE-2022-28391] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42378_3.13:ssl_client_1.32.1-r3",
          "ruleIndex": 108,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42378] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-28366_github.com/golang/go_1.13.15",
          "ruleIndex": 109,
          "level": "error",
          "message": {
            "text": "[CVE-2020-28366] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-28366_github.com/golang/go_1.13.15",
          "ruleIndex": 109,
          "level": "error",
          "message": {
            "text": "[CVE-2020-28366] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42380_3.13:busybox_1.32.1-r3",
          "ruleIndex": 110,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42380] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-38039_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 111,
          "level": "error",
          "message": {
            "text": "[CVE-2023-38039] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42378_3.13:busybox_1.32.1-r3",
          "ruleIndex": 112,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42378] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-28831_3.13:ssl_client_1.32.1-r3",
          "ruleIndex": 113,
          "level": "error",
          "message": {
            "text": "[CVE-2021-28831] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-49298_3.13:zfs-libs_2.0.1-r0",
          "ruleIndex": 114,
          "level": "error",
          "message": {
            "text": "[CVE-2023-49298] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-28367_github.com/golang/go_1.13.15",
          "ruleIndex": 115,
          "level": "error",
          "message": {
            "text": "[CVE-2020-28367] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-28367_github.com/golang/go_1.13.15",
          "ruleIndex": 115,
          "level": "error",
          "message": {
            "text": "[CVE-2020-28367] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-29458_3.13:ncurses-terminfo-base_6.2_p20210109-r0",
          "ruleIndex": 116,
          "level": "error",
          "message": {
            "text": "[CVE-2022-29458] sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-46828_3.13:libtirpc-conf_1.3.1-r0",
          "ruleIndex": 117,
          "level": "error",
          "message": {
            "text": "[CVE-2021-46828] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-38039_3.13:curl_7.74.0-r1",
          "ruleIndex": 118,
          "level": "error",
          "message": {
            "text": "[CVE-2023-38039] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42385_3.13:busybox_1.32.1-r3",
          "ruleIndex": 119,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42385] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42379_3.13:ssl_client_1.32.1-r3",
          "ruleIndex": 120,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42379] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-28391_3.13:ssl_client_1.32.1-r3",
          "ruleIndex": 121,
          "level": "error",
          "message": {
            "text": "[CVE-2022-28391] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3450_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 122,
          "level": "error",
          "message": {
            "text": "[CVE-2021-3450] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-0778_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 123,
          "level": "error",
          "message": {
            "text": "[CVE-2022-0778] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-28840_github.com/docker/docker_20.10.4+incompatible",
          "ruleIndex": 124,
          "level": "error",
          "message": {
            "text": "[CVE-2023-28840] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42381_3.13:ssl_client_1.32.1-r3",
          "ruleIndex": 125,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42381] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2003-0695_3.13:openssh-keygen_8.4_p1-r2",
          "ruleIndex": 126,
          "level": "error",
          "message": {
            "text": "[CVE-2003-0695] sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3450_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 127,
          "level": "error",
          "message": {
            "text": "[CVE-2021-3450] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42381_3.13:busybox_1.32.1-r3",
          "ruleIndex": 128,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42381] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-0778_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 129,
          "level": "error",
          "message": {
            "text": "[CVE-2022-0778] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42382_3.13:ssl_client_1.32.1-r3",
          "ruleIndex": 130,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42382] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30065_3.13:busybox_1.32.1-r3",
          "ruleIndex": 131,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30065] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1271_3.13:xz-libs_5.2.5-r0",
          "ruleIndex": 132,
          "level": "error",
          "message": {
            "text": "[CVE-2022-1271] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-30465_github.com/opencontainers/runc_1.0.0-rc93",
          "ruleIndex": 133,
          "level": "error",
          "message": {
            "text": "[CVE-2021-30465] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-28831_3.13:busybox_1.32.1-r3",
          "ruleIndex": 134,
          "level": "error",
          "message": {
            "text": "[CVE-2021-28831] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-48795_3.13:openssh-client_8.4_p1-r2",
          "ruleIndex": 135,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-48795] sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-44717_github.com/golang/go_1.13.15",
          "ruleIndex": 136,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-44717] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-44717_github.com/golang/go_1.13.15",
          "ruleIndex": 136,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-44717] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-48795_3.13:openssh-keygen_8.4_p1-r2",
          "ruleIndex": 137,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-48795] sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-31525_golang.org/x/net_0.0.0-20201224014010-6772e930b67b",
          "ruleIndex": 138,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-31525] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-28321_3.13:curl_7.74.0-r1",
          "ruleIndex": 139,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-28321] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41717_golang.org/x/net_0.0.0-20201224014010-6772e930b67b",
          "ruleIndex": 140,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-41717] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29409_github.com/golang/go_1.13.15",
          "ruleIndex": 141,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29409] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29409_github.com/golang/go_1.13.15",
          "ruleIndex": 141,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29409] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_github.com/golang/go_1.13.15",
          "ruleIndex": 142,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_github.com/golang/go_1.13.15",
          "ruleIndex": 142,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29406_github.com/golang/go_1.13.15",
          "ruleIndex": 143,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29406] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29406_github.com/golang/go_1.13.15",
          "ruleIndex": 143,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29406] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-43784_github.com/opencontainers/runc_1.0.0-rc93",
          "ruleIndex": 144,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-43784] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_golang.org/x/net_0.0.0-20201224014010-6772e930b67b",
          "ruleIndex": 145,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32148_github.com/golang/go_1.13.15",
          "ruleIndex": 146,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-32148] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32148_github.com/golang/go_1.13.15",
          "ruleIndex": 146,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-32148] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-28321_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 147,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-28321] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-6129_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 148,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-6129] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-0727_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 149,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-0727] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27776_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 150,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-27776] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42374_3.13:busybox_1.32.1-r3",
          "ruleIndex": 151,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-42374] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-37600_3.13:libmount_2.36.1-r1",
          "ruleIndex": 152,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-37600] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-35260_3.13:curl_7.74.0-r1",
          "ruleIndex": 153,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-35260] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3996_3.13:libmount_2.36.1-r1",
          "ruleIndex": 154,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-3996] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-22876_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 155,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-22876] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42366_3.13:ssl_client_1.32.1-r3",
          "ruleIndex": 156,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42366] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39319_github.com/golang/go_1.13.15",
          "ruleIndex": 157,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39319] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39319_github.com/golang/go_1.13.15",
          "ruleIndex": 157,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39319] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-0853_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 158,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-0853] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3995_3.13:libuuid_2.36.1-r1",
          "ruleIndex": 159,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-3995] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23471_github.com/containerd/containerd_1.5.0-beta.1",
          "ruleIndex": 160,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-23471] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-41089_github.com/docker/docker_20.10.4+incompatible",
          "ruleIndex": 161,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-41089] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42363_3.13:ssl_client_1.32.1-r3",
          "ruleIndex": 162,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42363] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-37600_3.13:libblkid_2.36.1-r1",
          "ruleIndex": 163,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-37600] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42364_3.13:busybox_1.32.1-r3",
          "ruleIndex": 164,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42364] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-31030_github.com/containerd/containerd_1.5.0-beta.1",
          "ruleIndex": 165,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-31030] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3995_3.13:libblkid_2.36.1-r1",
          "ruleIndex": 166,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-3995] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3446_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 167,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3446] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-27537_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 168,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-27537] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-29510_github.com/golang/go_1.13.15",
          "ruleIndex": 169,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-29510] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-29510_github.com/golang/go_1.13.15",
          "ruleIndex": 169,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-29510] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-37750_3.13:krb5-libs_1.18.3-r1",
          "ruleIndex": 170,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-37750] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5678_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 171,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-5678] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-27535_3.13:curl_7.74.0-r1",
          "ruleIndex": 172,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-27535] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-22947_3.13:curl_7.74.0-r1",
          "ruleIndex": 173,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-22947] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-23916_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 174,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-23916] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-6129_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 175,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-6129] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-6129_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 176,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-6129] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27779_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 177,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-27779] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-46218_3.13:curl_7.74.0-r1",
          "ruleIndex": 178,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-46218] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-22925_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 179,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-22925] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-28320_3.13:curl_7.74.0-r1",
          "ruleIndex": 180,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-28320] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42365_3.13:busybox_1.32.1-r3",
          "ruleIndex": 181,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42365] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-43552_3.13:curl_7.74.0-r1",
          "ruleIndex": 182,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-43552] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30115_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 183,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-30115] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-4160_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 184,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-4160] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-27537_3.13:curl_7.74.0-r1",
          "ruleIndex": 185,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-27537] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39326_github.com/golang/go_1.13.15",
          "ruleIndex": 186,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39326] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39326_github.com/golang/go_1.13.15",
          "ruleIndex": 186,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39326] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-27538_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 187,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-27538] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-51384_3.13:openssh-client_8.4_p1-r2",
          "ruleIndex": 188,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-51384] sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-25809_github.com/opencontainers/runc_1.0.0-rc93",
          "ruleIndex": 189,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-25809] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-1255_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 190,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-1255] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39318_github.com/golang/go_1.13.15",
          "ruleIndex": 191,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39318] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39318_github.com/golang/go_1.13.15",
          "ruleIndex": 191,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39318] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-0853_3.13:curl_7.74.0-r1",
          "ruleIndex": 192,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-0853] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-28320_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 193,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-28320] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-22925_3.13:curl_7.74.0-r1",
          "ruleIndex": 194,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-22925] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-46219_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 195,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-46219] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24532_github.com/golang/go_1.13.15",
          "ruleIndex": 196,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-24532] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24532_github.com/golang/go_1.13.15",
          "ruleIndex": 196,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-24532] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3817_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 197,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3817] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4304_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 198,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-4304] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42365_3.13:ssl_client_1.32.1-r3",
          "ruleIndex": 199,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42365] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42366_3.13:busybox_1.32.1-r3",
          "ruleIndex": 200,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42366] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-2975_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 201,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-2975] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3996_3.13:libblkid_2.36.1-r1",
          "ruleIndex": 202,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-3996] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5678_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 203,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-5678] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-1255_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 204,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-1255] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-0727_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 205,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-0727] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-28841_github.com/docker/docker_20.10.4+incompatible",
          "ruleIndex": 206,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-28841] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42374_3.13:ssl_client_1.32.1-r3",
          "ruleIndex": 207,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-42374] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-23915_3.13:curl_7.74.0-r1",
          "ruleIndex": 208,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-23915] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-27535_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 209,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-27535] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-24553_github.com/golang/go_1.13.15",
          "ruleIndex": 210,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-24553] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-24553_github.com/golang/go_1.13.15",
          "ruleIndex": 210,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-24553] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-4160_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 211,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-4160] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-35260_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 212,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-35260] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3446_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 213,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3446] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5678_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 214,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-5678] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32208_3.13:curl_7.74.0-r1",
          "ruleIndex": 215,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-32208] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27774_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 216,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-27774] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-22876_3.13:curl_7.74.0-r1",
          "ruleIndex": 217,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-22876] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3995_3.13:libmount_2.36.1-r1",
          "ruleIndex": 218,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-3995] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-22947_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 219,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-22947] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4203_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 220,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-4203] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4304_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 221,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-4304] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-2975_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 222,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-2975] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4203_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 223,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-4203] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32208_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 224,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-32208] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27779_3.13:curl_7.74.0-r1",
          "ruleIndex": 225,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-27779] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-29511_github.com/golang/go_1.13.15",
          "ruleIndex": 226,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-29511] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-29511_github.com/golang/go_1.13.15",
          "ruleIndex": 226,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-29511] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-24032_3.13:zstd-libs_1.4.5-r3",
          "ruleIndex": 227,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-24032] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30115_3.13:curl_7.74.0-r1",
          "ruleIndex": 228,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-30115] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42364_3.13:ssl_client_1.32.1-r3",
          "ruleIndex": 229,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42364] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-23915_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 230,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-23915] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1705_github.com/golang/go_1.13.15",
          "ruleIndex": 231,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-1705] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1705_github.com/golang/go_1.13.15",
          "ruleIndex": 231,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-1705] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27776_3.13:curl_7.74.0-r1",
          "ruleIndex": 232,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-27776] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-43552_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 233,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-43552] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-34558_github.com/golang/go_1.13.15",
          "ruleIndex": 234,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-34558] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-34558_github.com/golang/go_1.13.15",
          "ruleIndex": 234,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-34558] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3996_3.13:libuuid_2.36.1-r1",
          "ruleIndex": 235,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-3996] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42375_3.13:busybox_1.32.1-r3",
          "ruleIndex": 236,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-42375] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45284_github.com/golang/go_1.13.15",
          "ruleIndex": 237,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45284] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45284_github.com/golang/go_1.13.15",
          "ruleIndex": 237,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45284] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27774_3.13:curl_7.74.0-r1",
          "ruleIndex": 238,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-27774] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24769_github.com/docker/docker_20.10.4+incompatible",
          "ruleIndex": 239,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-24769] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-23916_3.13:curl_7.74.0-r1",
          "ruleIndex": 240,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-23916] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32205_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 241,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-32205] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-28842_github.com/docker/docker_20.10.4+incompatible",
          "ruleIndex": 242,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-28842] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-41091_github.com/docker/docker_20.10.4+incompatible",
          "ruleIndex": 243,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-41091] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32206_3.13:curl_7.74.0-r1",
          "ruleIndex": 244,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-32206] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-4160_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 245,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-4160] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-29018_github.com/docker/docker_20.10.4+incompatible",
          "ruleIndex": 246,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-29018] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32206_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 247,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-32206] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-27538_3.13:curl_7.74.0-r1",
          "ruleIndex": 248,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-27538] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-46219_3.13:curl_7.74.0-r1",
          "ruleIndex": 249,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-46219] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-37600_3.13:libuuid_2.36.1-r1",
          "ruleIndex": 250,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-37600] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3446_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 251,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3446] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-2975_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 252,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-2975] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3817_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 253,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3817] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42375_3.13:ssl_client_1.32.1-r3",
          "ruleIndex": 254,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-42375] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-46218_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 255,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-46218] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32205_3.13:curl_7.74.0-r1",
          "ruleIndex": 256,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-32205] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-51384_3.13:openssh-keygen_8.4_p1-r2",
          "ruleIndex": 257,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-51384] sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-41190_github.com/opencontainers/image-spec_1.0.1",
          "ruleIndex": 258,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-41190] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-0727_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 259,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-0727] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3114_github.com/golang/go_1.13.15",
          "ruleIndex": 260,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-3114] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3114_github.com/golang/go_1.13.15",
          "ruleIndex": 260,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-3114] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-1255_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 261,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-1255] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3817_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 262,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3817] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4203_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 263,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-4203] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42363_3.13:busybox_1.32.1-r3",
          "ruleIndex": 264,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42363] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4304_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 265,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-4304] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-22897_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 266,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-22897] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2009-3767_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 267,
          "level": "warning",
          "message": {
            "text": "[CVE-2009-3767] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42376_3.13:busybox_1.32.1-r3",
          "ruleIndex": 268,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-42376] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-22916_3.13:xz-libs_5.2.5-r0",
          "ruleIndex": 269,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-22916] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2009-3767_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 270,
          "level": "warning",
          "message": {
            "text": "[CVE-2009-3767] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-22897_3.13:curl_7.74.0-r1",
          "ruleIndex": 271,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-22897] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2007-2768_3.13:openssh-client_8.4_p1-r2",
          "ruleIndex": 272,
          "level": "warning",
          "message": {
            "text": "[CVE-2007-2768] sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2016-20012_3.13:openssh-client_8.4_p1-r2",
          "ruleIndex": 273,
          "level": "warning",
          "message": {
            "text": "[CVE-2016-20012] sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42376_3.13:ssl_client_1.32.1-r3",
          "ruleIndex": 274,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-42376] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2009-3767_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 275,
          "level": "warning",
          "message": {
            "text": "[CVE-2009-3767] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-22916_3.13:xz_5.2.5-r0",
          "ruleIndex": 276,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-22916] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2007-2768_3.13:openssh-keygen_8.4_p1-r2",
          "ruleIndex": 277,
          "level": "warning",
          "message": {
            "text": "[CVE-2007-2768] sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2016-20012_3.13:openssh-keygen_8.4_p1-r2",
          "ruleIndex": 278,
          "level": "warning",
          "message": {
            "text": "[CVE-2016-20012] sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-22890_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 279,
          "level": "note",
          "message": {
            "text": "[CVE-2021-22890] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-22924_3.13:curl_7.74.0-r1",
          "ruleIndex": 280,
          "level": "note",
          "message": {
            "text": "[CVE-2021-22924] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29383_3.13:shadow-uidmap_4.8.1-r0",
          "ruleIndex": 281,
          "level": "note",
          "message": {
            "text": "[CVE-2023-29383] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-35252_3.13:curl_7.74.0-r1",
          "ruleIndex": 282,
          "level": "note",
          "message": {
            "text": "[CVE-2022-35252] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-38546_3.13:curl_7.74.0-r1",
          "ruleIndex": 283,
          "level": "note",
          "message": {
            "text": "[CVE-2023-38546] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-22898_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 284,
          "level": "note",
          "message": {
            "text": "[CVE-2021-22898] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30629_github.com/golang/go_1.13.15",
          "ruleIndex": 285,
          "level": "note",
          "message": {
            "text": "[CVE-2022-30629] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30629_github.com/golang/go_1.13.15",
          "ruleIndex": 285,
          "level": "note",
          "message": {
            "text": "[CVE-2022-30629] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-38546_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 286,
          "level": "note",
          "message": {
            "text": "[CVE-2023-38546] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-22924_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 287,
          "level": "note",
          "message": {
            "text": "[CVE-2021-22924] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-22898_3.13:curl_7.74.0-r1",
          "ruleIndex": 288,
          "level": "note",
          "message": {
            "text": "[CVE-2021-22898] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-22890_3.13:curl_7.74.0-r1",
          "ruleIndex": 289,
          "level": "note",
          "message": {
            "text": "[CVE-2021-22890] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-35252_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 290,
          "level": "note",
          "message": {
            "text": "[CVE-2022-35252] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-36368_3.13:openssh-keygen_8.4_p1-r2",
          "ruleIndex": 291,
          "level": "note",
          "message": {
            "text": "[CVE-2021-36368] sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-36368_3.13:openssh-client_8.4_p1-r2",
          "ruleIndex": 292,
          "level": "note",
          "message": {
            "text": "[CVE-2021-36368] sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2466_3.13:curl_7.74.0-r1",
          "ruleIndex": 293,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2466] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-6237_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 294,
          "level": "none",
          "message": {
            "text": "[CVE-2023-6237] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2004_3.13:curl_7.74.0-r1",
          "ruleIndex": 295,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2004] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-28085_3.13:libblkid_2.36.1-r1",
          "ruleIndex": 296,
          "level": "none",
          "message": {
            "text": "[CVE-2024-28085] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2004_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 297,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2004] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2379_3.13:curl_7.74.0-r1",
          "ruleIndex": 298,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2379] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-4603_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 299,
          "level": "none",
          "message": {
            "text": "[CVE-2024-4603] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-4603_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 300,
          "level": "none",
          "message": {
            "text": "[CVE-2024-4603] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2466_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 301,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2466] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-6237_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 302,
          "level": "none",
          "message": {
            "text": "[CVE-2023-6237] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2511_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 303,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2511] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-28085_3.13:libuuid_2.36.1-r1",
          "ruleIndex": 304,
          "level": "none",
          "message": {
            "text": "[CVE-2024-28085] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2398_3.13:curl_7.74.0-r1",
          "ruleIndex": 305,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2398] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2398_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 306,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2398] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2511_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 307,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2511] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-6237_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 308,
          "level": "none",
          "message": {
            "text": "[CVE-2023-6237] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-4603_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 309,
          "level": "none",
          "message": {
            "text": "[CVE-2024-4603] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2511_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 310,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2511] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-28085_3.13:libmount_2.36.1-r1",
          "ruleIndex": 311,
          "level": "none",
          "message": {
            "text": "[CVE-2024-28085] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2379_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 312,
          "level": "none",
          "message": {
            "text": "[CVE-2024-2379] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-1394_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 313,
          "level": "none",
          "message": {
            "text": "[CVE-2024-1394] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-1394_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 314,
          "level": "none",
          "message": {
            "text": "[CVE-2024-1394] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-1394_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 315,
          "level": "none",
          "message": {
            "text": "[CVE-2024-1394] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3711_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 316,
          "level": "error",
          "message": {
            "text": "[CVE-2021-3711] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-28531_3.13:openssh-client_8.4_p1-r2",
          "ruleIndex": 317,
          "level": "error",
          "message": {
            "text": "[CVE-2023-28531] sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-38545_3.13:curl_7.74.0-r1",
          "ruleIndex": 318,
          "level": "error",
          "message": {
            "text": "[CVE-2023-38545] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32221_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 319,
          "level": "error",
          "message": {
            "text": "[CVE-2022-32221] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-23914_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 320,
          "level": "error",
          "message": {
            "text": "[CVE-2023-23914] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-37434_3.13:zlib_1.2.11-r3",
          "ruleIndex": 321,
          "level": "error",
          "message": {
            "text": "[CVE-2022-37434] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-38545_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 322,
          "level": "error",
          "message": {
            "text": "[CVE-2023-38545] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3711_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 323,
          "level": "error",
          "message": {
            "text": "[CVE-2021-3711] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-38297_github.com/golang/go_1.13.15",
          "ruleIndex": 324,
          "level": "error",
          "message": {
            "text": "[CVE-2021-38297] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-38297_github.com/golang/go_1.13.15",
          "ruleIndex": 324,
          "level": "error",
          "message": {
            "text": "[CVE-2021-38297] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29405_github.com/golang/go_1.13.15",
          "ruleIndex": 325,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29405] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29405_github.com/golang/go_1.13.15",
          "ruleIndex": 325,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29405] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3711_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 326,
          "level": "error",
          "message": {
            "text": "[CVE-2021-3711] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32221_3.13:curl_7.74.0-r1",
          "ruleIndex": 327,
          "level": "error",
          "message": {
            "text": "[CVE-2022-32221] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29404_github.com/golang/go_1.13.15",
          "ruleIndex": 328,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29404] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29404_github.com/golang/go_1.13.15",
          "ruleIndex": 328,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29404] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-28531_3.13:openssh-keygen_8.4_p1-r2",
          "ruleIndex": 329,
          "level": "error",
          "message": {
            "text": "[CVE-2023-28531] sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-23914_3.13:curl_7.74.0-r1",
          "ruleIndex": 330,
          "level": "error",
          "message": {
            "text": "[CVE-2023-23914] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29402_github.com/golang/go_1.13.15",
          "ruleIndex": 331,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29402] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29402_github.com/golang/go_1.13.15",
          "ruleIndex": 331,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29402] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-49210_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 332,
          "level": "error",
          "message": {
            "text": "[CVE-2023-49210] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-49210_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 333,
          "level": "error",
          "message": {
            "text": "[CVE-2023-49210] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0286_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 334,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0286] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0464_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 335,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0464] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0215_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 336,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0215] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29491_3.13:ncurses-libs_6.2_p20210109-r0",
          "ruleIndex": 337,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29491] sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0401_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 338,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0401] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41723_golang.org/x/net_0.0.0-20201224014010-6772e930b67b",
          "ruleIndex": 339,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41723] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5363_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 340,
          "level": "error",
          "message": {
            "text": "[CVE-2023-5363] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39323_github.com/golang/go_1.13.15",
          "ruleIndex": 341,
          "level": "error",
          "message": {
            "text": "[CVE-2023-39323] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39323_github.com/golang/go_1.13.15",
          "ruleIndex": 341,
          "level": "error",
          "message": {
            "text": "[CVE-2023-39323] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5363_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 342,
          "level": "error",
          "message": {
            "text": "[CVE-2023-5363] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0217_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 343,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0217] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27781_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 344,
          "level": "error",
          "message": {
            "text": "[CVE-2022-27781] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-41771_github.com/golang/go_1.13.15",
          "ruleIndex": 345,
          "level": "error",
          "message": {
            "text": "[CVE-2021-41771] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-41771_github.com/golang/go_1.13.15",
          "ruleIndex": 345,
          "level": "error",
          "message": {
            "text": "[CVE-2021-41771] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0217_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 346,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0217] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30630_github.com/golang/go_1.13.15",
          "ruleIndex": 347,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30630] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30630_github.com/golang/go_1.13.15",
          "ruleIndex": 347,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30630] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4450_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 348,
          "level": "error",
          "message": {
            "text": "[CVE-2022-4450] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27781_3.13:curl_7.74.0-r1",
          "ruleIndex": 349,
          "level": "error",
          "message": {
            "text": "[CVE-2022-27781] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27782_3.13:curl_7.74.0-r1",
          "ruleIndex": 350,
          "level": "error",
          "message": {
            "text": "[CVE-2022-27782] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-27533_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 351,
          "level": "error",
          "message": {
            "text": "[CVE-2023-27533] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0286_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 352,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0286] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30634_github.com/golang/go_1.13.15",
          "ruleIndex": 353,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30634] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30634_github.com/golang/go_1.13.15",
          "ruleIndex": 353,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30634] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0215_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 354,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0215] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-25032_3.13:zlib_1.2.11-r3",
          "ruleIndex": 355,
          "level": "error",
          "message": {
            "text": "[CVE-2018-25032] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3712_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 356,
          "level": "error",
          "message": {
            "text": "[CVE-2021-3712] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0216_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 357,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0216] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41715_github.com/golang/go_1.13.15",
          "ruleIndex": 358,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41715] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41715_github.com/golang/go_1.13.15",
          "ruleIndex": 358,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41715] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0464_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 359,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0464] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-29804_github.com/golang/go_1.13.15",
          "ruleIndex": 360,
          "level": "error",
          "message": {
            "text": "[CVE-2022-29804] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-29804_github.com/golang/go_1.13.15",
          "ruleIndex": 360,
          "level": "error",
          "message": {
            "text": "[CVE-2022-29804] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-22946_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 361,
          "level": "error",
          "message": {
            "text": "[CVE-2021-22946] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4450_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 362,
          "level": "error",
          "message": {
            "text": "[CVE-2022-4450] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5363_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 363,
          "level": "error",
          "message": {
            "text": "[CVE-2023-5363] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41722_github.com/golang/go_1.13.15",
          "ruleIndex": 364,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41722] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41722_github.com/golang/go_1.13.15",
          "ruleIndex": 364,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41722] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3712_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 365,
          "level": "error",
          "message": {
            "text": "[CVE-2021-3712] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27782_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 366,
          "level": "error",
          "message": {
            "text": "[CVE-2022-27782] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-41617_3.13:openssh-client_8.4_p1-r2",
          "ruleIndex": 367,
          "level": "error",
          "message": {
            "text": "[CVE-2021-41617] sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0215_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 368,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0215] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0217_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 369,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0217] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29491_3.13:ncurses-terminfo-base_6.2_p20210109-r0",
          "ruleIndex": 370,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29491] sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-41772_github.com/golang/go_1.13.15",
          "ruleIndex": 371,
          "level": "error",
          "message": {
            "text": "[CVE-2021-41772] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-41772_github.com/golang/go_1.13.15",
          "ruleIndex": 371,
          "level": "error",
          "message": {
            "text": "[CVE-2021-41772] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41720_github.com/golang/go_1.13.15",
          "ruleIndex": 372,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41720] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41720_github.com/golang/go_1.13.15",
          "ruleIndex": 372,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41720] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-27533_3.13:curl_7.74.0-r1",
          "ruleIndex": 373,
          "level": "error",
          "message": {
            "text": "[CVE-2023-27533] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41716_github.com/golang/go_1.13.15",
          "ruleIndex": 374,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41716] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41716_github.com/golang/go_1.13.15",
          "ruleIndex": 374,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41716] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-42898_3.13:krb5-libs_1.18.3-r1",
          "ruleIndex": 375,
          "level": "error",
          "message": {
            "text": "[CVE-2022-42898] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0464_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 376,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0464] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-25173_github.com/containerd/containerd_1.5.0-beta.1",
          "ruleIndex": 377,
          "level": "error",
          "message": {
            "text": "[CVE-2023-25173] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-43551_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 378,
          "level": "error",
          "message": {
            "text": "[CVE-2022-43551] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0216_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 379,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0216] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-42916_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 380,
          "level": "error",
          "message": {
            "text": "[CVE-2022-42916] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0401_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 381,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0401] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3115_github.com/golang/go_1.13.15",
          "ruleIndex": 382,
          "level": "error",
          "message": {
            "text": "[CVE-2021-3115] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3115_github.com/golang/go_1.13.15",
          "ruleIndex": 382,
          "level": "error",
          "message": {
            "text": "[CVE-2021-3115] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-35945_3.13:nghttp2-libs_1.42.0-r1",
          "ruleIndex": 383,
          "level": "error",
          "message": {
            "text": "[CVE-2023-35945] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30580_github.com/golang/go_1.13.15",
          "ruleIndex": 384,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30580] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30580_github.com/golang/go_1.13.15",
          "ruleIndex": 384,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30580] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-33194_golang.org/x/net_0.0.0-20201224014010-6772e930b67b",
          "ruleIndex": 385,
          "level": "error",
          "message": {
            "text": "[CVE-2021-33194] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-42916_3.13:curl_7.74.0-r1",
          "ruleIndex": 386,
          "level": "error",
          "message": {
            "text": "[CVE-2022-42916] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-41617_3.13:openssh-keygen_8.4_p1-r2",
          "ruleIndex": 387,
          "level": "error",
          "message": {
            "text": "[CVE-2021-41617] sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-22946_3.13:curl_7.74.0-r1",
          "ruleIndex": 388,
          "level": "error",
          "message": {
            "text": "[CVE-2021-22946] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24537_github.com/golang/go_1.13.15",
          "ruleIndex": 389,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24537] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24537_github.com/golang/go_1.13.15",
          "ruleIndex": 389,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24537] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0216_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 390,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0216] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45283_github.com/golang/go_1.13.15",
          "ruleIndex": 391,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45283] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45283_github.com/golang/go_1.13.15",
          "ruleIndex": 391,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45283] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0401_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 392,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0401] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23773_github.com/golang/go_1.13.15",
          "ruleIndex": 393,
          "level": "error",
          "message": {
            "text": "[CVE-2022-23773] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23773_github.com/golang/go_1.13.15",
          "ruleIndex": 393,
          "level": "error",
          "message": {
            "text": "[CVE-2022-23773] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-22576_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 394,
          "level": "error",
          "message": {
            "text": "[CVE-2022-22576] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3712_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 395,
          "level": "error",
          "message": {
            "text": "[CVE-2021-3712] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-43551_3.13:curl_7.74.0-r1",
          "ruleIndex": 396,
          "level": "error",
          "message": {
            "text": "[CVE-2022-43551] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45285_github.com/golang/go_1.13.15",
          "ruleIndex": 397,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45285] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45285_github.com/golang/go_1.13.15",
          "ruleIndex": 397,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45285] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-22576_3.13:curl_7.74.0-r1",
          "ruleIndex": 398,
          "level": "error",
          "message": {
            "text": "[CVE-2022-22576] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0286_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 399,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0286] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41724_github.com/golang/go_1.13.15",
          "ruleIndex": 400,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41724] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41724_github.com/golang/go_1.13.15",
          "ruleIndex": 400,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41724] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29403_github.com/golang/go_1.13.15",
          "ruleIndex": 401,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29403] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29403_github.com/golang/go_1.13.15",
          "ruleIndex": 401,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29403] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2880_github.com/golang/go_1.13.15",
          "ruleIndex": 402,
          "level": "error",
          "message": {
            "text": "[CVE-2022-2880] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2880_github.com/golang/go_1.13.15",
          "ruleIndex": 402,
          "level": "error",
          "message": {
            "text": "[CVE-2022-2880] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4450_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 403,
          "level": "error",
          "message": {
            "text": "[CVE-2022-4450] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2016-7798_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 404,
          "level": "error",
          "message": {
            "text": "[CVE-2016-7798] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2016-7798_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 405,
          "level": "error",
          "message": {
            "text": "[CVE-2016-7798] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2016-7798_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 406,
          "level": "error",
          "message": {
            "text": "[CVE-2016-7798] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-0563_3.13:libmount_2.36.1-r1",
          "ruleIndex": 407,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-0563] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-25153_github.com/containerd/containerd_1.5.0-beta.1",
          "ruleIndex": 408,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-25153] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3978_golang.org/x/net_0.0.0-20201224014010-6772e930b67b",
          "ruleIndex": 409,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3978] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3449_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 410,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-3449] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2097_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 411,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-2097] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-27536_3.13:curl_7.74.0-r1",
          "ruleIndex": 412,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-27536] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0465_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 413,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-0465] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-2650_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 414,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-2650] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0466_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 415,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-0466] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-33197_github.com/golang/go_1.13.15",
          "ruleIndex": 416,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-33197] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-33197_github.com/golang/go_1.13.15",
          "ruleIndex": 416,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-33197] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-0563_3.13:libblkid_2.36.1-r1",
          "ruleIndex": 417,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-0563] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-0563_3.13:libuuid_2.36.1-r1",
          "ruleIndex": 418,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-0563] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-2650_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 419,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-2650] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0465_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 420,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-0465] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-22922_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 421,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-22922] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-22922_3.13:curl_7.74.0-r1",
          "ruleIndex": 422,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-22922] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-2650_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 423,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-2650] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2097_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 424,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-2097] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-22923_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 425,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-22923] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0466_3.13:openssl_1.1.1j-r0",
          "ruleIndex": 426,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-0466] sha256__df1c0bd59cf2b9893b324ec9a68addf26e1d4c772954bd50efe551793099a668.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-51385_3.13:openssh-client_8.4_p1-r2",
          "ruleIndex": 427,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-51385] sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-29526_golang.org/x/sys_0.0.0-20210303074136-134d130e1a04",
          "ruleIndex": 428,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-29526] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0465_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 429,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-0465] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-22923_3.13:curl_7.74.0-r1",
          "ruleIndex": 430,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-22923] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1962_github.com/golang/go_1.13.15",
          "ruleIndex": 431,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-1962] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1962_github.com/golang/go_1.13.15",
          "ruleIndex": 431,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-1962] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-27536_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 432,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-27536] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3449_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 433,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-3449] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0466_3.13:libcrypto1.1_1.1.1j-r0",
          "ruleIndex": 434,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-0466] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-51385_3.13:openssh-keygen_8.4_p1-r2",
          "ruleIndex": 435,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-51385] sha256__cbf35813f9ad6bb34ac5db3283468b2773963c8e23d41f0abe600eea25ae0abd.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-36221_github.com/golang/go_1.13.15",
          "ruleIndex": 436,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-36221] sha256__c24daf37d4b1c5561573f8e30c57f179375521a35d9a5c7ea4dc13a4a1d02c09.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-36221_github.com/golang/go_1.13.15",
          "ruleIndex": 436,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-36221] sha256__96b73b7aa56317a4be507e3e8a410d9530a7d8f7f088b634ad9e44b4b9d12f1e.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2097_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 437,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-2097] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3449_3.13:libssl1.1_1.1.1j-r0",
          "ruleIndex": 438,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-3449] sha256__cb381a32b2296e4eb5af3f84092a2e6685e88adbc54ee0768a1a1010ce6376c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-28322_3.13:curl_7.74.0-r1",
          "ruleIndex": 439,
          "level": "note",
          "message": {
            "text": "[CVE-2023-28322] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-28322_3.13:libcurl_7.74.0-r1",
          "ruleIndex": 440,
          "level": "note",
          "message": {
            "text": "[CVE-2023-28322] sha256__7b1240ece6dc837a37662050bbdc424e0497e3fda954311f4079c12313e306b9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://jfrog.com/help/r/jfrog-security-documentation/jfrog-advanced-security",
          "name": "JFrog Applicability Scanner",
          "rules": [
            {
              "id": "applic_CVE-2022-30580",
              "name": "CVE-2022-30580",
              "shortDescription": {
                "text": "Scanner for CVE-2022-30580"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-3115",
              "name": "CVE-2021-3115",
              "shortDescription": {
                "text": "Scanner for CVE-2021-3115"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-38297",
              "name": "CVE-2021-38297",
              "shortDescription": {
                "text": "Scanner for CVE-2021-38297"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41722",
              "name": "CVE-2022-41722",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41722"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41720",
              "name": "CVE-2022-41720",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41720"
              },
              "fullDescription": {
                "text": "The scanner checks whether one of the vulnerable functions `os.dirFS.Open` or  `net/http.Dir.Open` is called.",
                "markdown": "The scanner checks whether one of the vulnerable functions `os.dirFS.Open` or  `net/http.Dir.Open` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41716",
              "name": "CVE-2022-41716",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41716"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-30634",
              "name": "CVE-2022-30634",
              "shortDescription": {
                "text": "Scanner for CVE-2022-30634"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-29804",
              "name": "CVE-2022-29804",
              "shortDescription": {
                "text": "Scanner for CVE-2022-29804"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2018-25032",
              "name": "CVE-2018-25032",
              "shortDescription": {
                "text": "Scanner for CVE-2018-25032"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `deflateInit2` is called.",
                "markdown": "The scanner checks whether the vulnerable function `deflateInit2` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-28321",
              "name": "CVE-2023-28321",
              "shortDescription": {
                "text": "Scanner for CVE-2023-28321"
              },
              "fullDescription": {
                "text": "The CVE is applicable in all possible configurations of cURL",
                "markdown": "The CVE is applicable in all possible configurations of cURL"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative"
              }
            },
            {
              "id": "applic_CVE-2023-45283",
              "name": "CVE-2023-45283",
              "shortDescription": {
                "text": "Scanner for CVE-2023-45283"
              },
              "fullDescription": {
                "text": "The vulnerability is only exploitable when running under the Windows OS.\nSince currently only Linux containers are supported, the scanner will always conclude that this vulnerability is not applicable.",
                "markdown": "The vulnerability is only exploitable when running under the Windows OS.\nSince currently only Linux containers are supported, the scanner will always conclude that this vulnerability is not applicable."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-22922",
              "name": "CVE-2021-22922",
              "shortDescription": {
                "text": "Scanner for CVE-2021-22922"
              },
              "fullDescription": {
                "text": "The scanner checks whether `curl` supports the vulnerable file download functionality, by checking whether the vulnerable flag `--metalink` is used.",
                "markdown": "The scanner checks whether `curl` supports the vulnerable file download functionality, by checking whether the vulnerable flag `--metalink` is used."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-22923",
              "name": "CVE-2021-22923",
              "shortDescription": {
                "text": "Scanner for CVE-2021-22923"
              },
              "fullDescription": {
                "text": "The scanner checks whether `curl` supports the vulnerable file download functionality, by checking whether the vulnerable flag `--metalink` is used.",
                "markdown": "The scanner checks whether `curl` supports the vulnerable file download functionality, by checking whether the vulnerable flag `--metalink` is used."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-22946",
              "name": "CVE-2021-22946",
              "shortDescription": {
                "text": "Scanner for CVE-2021-22946"
              },
              "fullDescription": {
                "text": "The scanner checks whether `curl` supports the vulnerable functionality, by checking whether any of the following vulnerable flags are used:\n\n- `--ssl-reqd`\n- `--ftp-ssl-reqd`",
                "markdown": "The scanner checks whether `curl` supports the vulnerable functionality, by checking whether any of the following vulnerable flags are used:\n\n- `--ssl-reqd`\n- `--ftp-ssl-reqd`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-27918",
              "name": "CVE-2021-27918",
              "shortDescription": {
                "text": "Scanner for CVE-2021-27918"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-31525",
              "name": "CVE-2021-31525",
              "shortDescription": {
                "text": "Scanner for CVE-2021-31525"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-33194",
              "name": "CVE-2021-33194",
              "shortDescription": {
                "text": "Scanner for CVE-2021-33194"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-33195",
              "name": "CVE-2021-33195",
              "shortDescription": {
                "text": "Scanner for CVE-2021-33195"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-33196",
              "name": "CVE-2021-33196",
              "shortDescription": {
                "text": "Scanner for CVE-2021-33196"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `zip.OpenReader`\n\t\n* `zip.NewReader`",
                "markdown": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `zip.OpenReader`\n\t\n* `zip.NewReader`"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-2880",
              "name": "CVE-2022-2880",
              "shortDescription": {
                "text": "Scanner for CVE-2022-2880"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-36221",
              "name": "CVE-2021-36221",
              "shortDescription": {
                "text": "Scanner for CVE-2021-36221"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-33197",
              "name": "CVE-2021-33197",
              "shortDescription": {
                "text": "Scanner for CVE-2021-33197"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-33198",
              "name": "CVE-2021-33198",
              "shortDescription": {
                "text": "Scanner for CVE-2021-33198"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-39293",
              "name": "CVE-2021-39293",
              "shortDescription": {
                "text": "Scanner for CVE-2021-39293"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-41771",
              "name": "CVE-2021-41771",
              "shortDescription": {
                "text": "Scanner for CVE-2021-41771"
              },
              "fullDescription": {
                "text": "The scanner checks whether the functions `macho.NewFile()`, `macho.OpenFat()` or `macho.Open()` are called with external input.",
                "markdown": "The scanner checks whether the functions `macho.NewFile()`, `macho.OpenFat()` or `macho.Open()` are called with external input."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-41772",
              "name": "CVE-2021-41772",
              "shortDescription": {
                "text": "Scanner for CVE-2021-41772"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `archive/zip.(*Reader).Open` is used.",
                "markdown": "The scanner checks whether the vulnerable function `archive/zip.(*Reader).Open` is used."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-43784",
              "name": "CVE-2021-43784",
              "shortDescription": {
                "text": "Scanner for CVE-2021-43784"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-44717",
              "name": "CVE-2021-44717",
              "shortDescription": {
                "text": "Scanner for CVE-2021-44717"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-0563",
              "name": "CVE-2022-0563",
              "shortDescription": {
                "text": "Scanner for CVE-2022-0563"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `chfs` and `chfn` CLI utilities are compiled with the vulnerable `readline` library.",
                "markdown": "The scanner checks whether the `chfs` and `chfn` CLI utilities are compiled with the vulnerable `readline` library."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-1962",
              "name": "CVE-2022-1962",
              "shortDescription": {
                "text": "Scanner for CVE-2022-1962"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-2097",
              "name": "CVE-2022-2097",
              "shortDescription": {
                "text": "Scanner for CVE-2022-2097"
              },
              "fullDescription": {
                "text": "The scanner checks if the vulnerable function `EVP_EncryptInit_ex` is called.\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: the system's architecture is 32bit / x86.",
                "markdown": "The scanner checks if the vulnerable function `EVP_EncryptInit_ex` is called.\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: the system's architecture is 32bit / x86."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-23772",
              "name": "CVE-2022-23772",
              "shortDescription": {
                "text": "Scanner for CVE-2022-23772"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `Rat.SetString` is called.",
                "markdown": "The scanner checks whether the vulnerable function `Rat.SetString` is called."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-23806",
              "name": "CVE-2022-23806",
              "shortDescription": {
                "text": "Scanner for CVE-2022-23806"
              },
              "fullDescription": {
                "text": "The scanner checks if at least one of the following vulnerable functions is called with external output - \n```\ncrypto/elliptic.(*CurveParams).IsOnCurve()\ncrypto/elliptic.p224Curve.IsOnCurve()\ncrypto/elliptic.p521Curve.IsOnCurve()\ncrypto/elliptic.Curve.IsOnCurve()\ncrypto/elliptic.p256Curve.IsOnCurve()\ncrypto/elliptic.(*p224Curve).IsOnCurve()\ncrypto/elliptic.(*p256Curve).IsOnCurve()\ncrypto/elliptic.(*p521Curve).IsOnCurve()\n```",
                "markdown": "The scanner checks if at least one of the following vulnerable functions is called with external output - \n```\ncrypto/elliptic.(*CurveParams).IsOnCurve()\ncrypto/elliptic.p224Curve.IsOnCurve()\ncrypto/elliptic.p521Curve.IsOnCurve()\ncrypto/elliptic.Curve.IsOnCurve()\ncrypto/elliptic.p256Curve.IsOnCurve()\ncrypto/elliptic.(*p224Curve).IsOnCurve()\ncrypto/elliptic.(*p256Curve).IsOnCurve()\ncrypto/elliptic.(*p521Curve).IsOnCurve()\n```"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-24675",
              "name": "CVE-2022-24675",
              "shortDescription": {
                "text": "Scanner for CVE-2022-24675"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `pem.Decode` is called.",
                "markdown": "The scanner checks whether the vulnerable function `pem.Decode` is called."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-24921",
              "name": "CVE-2022-24921",
              "shortDescription": {
                "text": "Scanner for CVE-2022-24921"
              },
              "fullDescription": {
                "text": "The scanner checks whether at least one of the vulnerable functions is called : \n```\nregexp.Match\nregexp.MatchReader \nregexp.MatchString\nregexp.Compile\nregexp.CompilePOSIX \nregexp.MustCompile\nregexp.MustCompilePOSIX\n```",
                "markdown": "The scanner checks whether at least one of the vulnerable functions is called : \n```\nregexp.Match\nregexp.MatchReader \nregexp.MatchString\nregexp.Compile\nregexp.CompilePOSIX \nregexp.MustCompile\nregexp.MustCompilePOSIX\n```"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-27664",
              "name": "CVE-2022-27664",
              "shortDescription": {
                "text": "Scanner for CVE-2022-27664"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `net/http.ListenAndServeTLS` is called.",
                "markdown": "The scanner checks whether the vulnerable function `net/http.ListenAndServeTLS` is called."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-28131",
              "name": "CVE-2022-28131",
              "shortDescription": {
                "text": "Scanner for CVE-2022-28131"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `Decoder.Skip` is called.",
                "markdown": "The scanner checks whether the vulnerable function `Decoder.Skip` is called."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-28327",
              "name": "CVE-2022-28327",
              "shortDescription": {
                "text": "Scanner for CVE-2022-28327"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-2879",
              "name": "CVE-2022-2879",
              "shortDescription": {
                "text": "Scanner for CVE-2022-2879"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `archive/tar.(*Reader).Next` is called.",
                "markdown": "The scanner checks whether the vulnerable function `archive/tar.(*Reader).Next` is called."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-29526",
              "name": "CVE-2022-29526",
              "shortDescription": {
                "text": "Scanner for CVE-2022-29526"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-30630",
              "name": "CVE-2022-30630",
              "shortDescription": {
                "text": "Scanner for CVE-2022-30630"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `fs.Glob` is called.",
                "markdown": "The scanner checks whether the vulnerable function `fs.Glob` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-30631",
              "name": "CVE-2022-30631",
              "shortDescription": {
                "text": "Scanner for CVE-2022-30631"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `Reader.Read` is called.",
                "markdown": "The scanner checks whether the vulnerable function `Reader.Read` is called."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-30632",
              "name": "CVE-2022-30632",
              "shortDescription": {
                "text": "Scanner for CVE-2022-30632"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `filepath.Glob` is called.",
                "markdown": "The scanner checks whether the vulnerable function `filepath.Glob` is called."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-30633",
              "name": "CVE-2022-30633",
              "shortDescription": {
                "text": "Scanner for CVE-2022-30633"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-32148",
              "name": "CVE-2022-32148",
              "shortDescription": {
                "text": "Scanner for CVE-2022-32148"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-32189",
              "name": "CVE-2022-32189",
              "shortDescription": {
                "text": "Scanner for CVE-2022-32189"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable functions `Float.GobDecode()` or `Rat.GobDecode()` are called.",
                "markdown": "The scanner checks whether the vulnerable functions `Float.GobDecode()` or `Rat.GobDecode()` are called."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-3786",
              "name": "CVE-2022-3786",
              "shortDescription": {
                "text": "Scanner for CVE-2022-3786"
              },
              "fullDescription": {
                "text": "The scanner checks if at least one of the vulnerable functions is called:\n```\nSSL_connect\nBIO_new_ssl_connect\nBIO_do_handshake\nBIO_do_connect\nBIO_new_connect\nSSL_accept\nSSL_set_verify\nSSL_CTX_set_verify\nX509_verify_cert\n```\nThen, if the application is a server, the client authentication option should be checked manually. \nIt is a client, it is applicable as described in the description.",
                "markdown": "The scanner checks if at least one of the vulnerable functions is called:\n```\nSSL_connect\nBIO_new_ssl_connect\nBIO_do_handshake\nBIO_do_connect\nBIO_new_connect\nSSL_accept\nSSL_set_verify\nSSL_CTX_set_verify\nX509_verify_cert\n```\nThen, if the application is a server, the client authentication option should be checked manually. \nIt is a client, it is applicable as described in the description."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-3602",
              "name": "CVE-2022-3602",
              "shortDescription": {
                "text": "Scanner for CVE-2022-3602"
              },
              "fullDescription": {
                "text": "The scanner checks if at least one of the vulnerable functions is called:\n```\nSSL_connect\nBIO_new_ssl_connect\nBIO_do_handshake\nBIO_do_connect\nBIO_new_connect\nSSL_accept\nSSL_set_verify\nSSL_CTX_set_verify\nX509_verify_cert\n```\nThen, if the application is a server, the client authentication option should be checked manually. \nIt is a client, it is applicable as described in the description.",
                "markdown": "The scanner checks if at least one of the vulnerable functions is called:\n```\nSSL_connect\nBIO_new_ssl_connect\nBIO_do_handshake\nBIO_do_connect\nBIO_new_connect\nSSL_accept\nSSL_set_verify\nSSL_CTX_set_verify\nX509_verify_cert\n```\nThen, if the application is a server, the client authentication option should be checked manually. \nIt is a client, it is applicable as described in the description."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-37434",
              "name": "CVE-2022-37434",
              "shortDescription": {
                "text": "Scanner for CVE-2022-37434"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `inflateGetHeader()` is called.",
                "markdown": "The scanner checks whether the vulnerable function `inflateGetHeader()` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41715",
              "name": "CVE-2022-41715",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41715"
              },
              "fullDescription": {
                "text": "The scanner checks whether any function eventually calls the vulnerable function `regexp/syntax.parse`.",
                "markdown": "The scanner checks whether any function eventually calls the vulnerable function `regexp/syntax.parse`."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41717",
              "name": "CVE-2022-41717",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41717"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41723",
              "name": "CVE-2022-41723",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41723"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `Decoder.DecodeFull` is called",
                "markdown": "The scanner checks whether the vulnerable function `Decoder.DecodeFull` is called"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41724",
              "name": "CVE-2022-41724",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41724"
              },
              "fullDescription": {
                "text": "The CVE is never applicable. A closer inspection of the issue shows there are no potential user-controllable paths that allow creating a panic (see also original commit message - https://go.dev/cl/468125)",
                "markdown": "The CVE is never applicable. A closer inspection of the issue shows there are no potential user-controllable paths that allow creating a panic (see also original commit message - https://go.dev/cl/468125)"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41725",
              "name": "CVE-2022-41725",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41725"
              },
              "fullDescription": {
                "text": "The scanner checks whether one of the following vulnerable functions is called:\n- `mime/multipart Reader.ReadForm`\n- `net/http Request.FormFile`\n- `net/http Request.FormValue`\n- `net/http Request.ParseMultipartForm`\n- `net/http Request.PostFormValue`",
                "markdown": "The scanner checks whether one of the following vulnerable functions is called:\n- `mime/multipart Reader.ReadForm`\n- `net/http Request.FormFile`\n- `net/http Request.FormValue`\n- `net/http Request.ParseMultipartForm`\n- `net/http Request.PostFormValue`"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-24536",
              "name": "CVE-2023-24536",
              "shortDescription": {
                "text": "Scanner for CVE-2023-24536"
              },
              "fullDescription": {
                "text": "The scanner checks whether one of the following vulnerable functions is called:\n- `mime/multipart Reader.ReadForm`\n- `net/http Request.FormFile`\n- `net/http Request.FormValue`\n- `net/http Request.ParseMultipartForm`\n- `net/http Request.PostFormValue`",
                "markdown": "The scanner checks whether one of the following vulnerable functions is called:\n- `mime/multipart Reader.ReadForm`\n- `net/http Request.FormFile`\n- `net/http Request.FormValue`\n- `net/http Request.ParseMultipartForm`\n- `net/http Request.PostFormValue`"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-43551",
              "name": "CVE-2022-43551",
              "shortDescription": {
                "text": "Scanner for CVE-2022-43551"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `curl` command-line tool is invoked with the `--hsts` option.",
                "markdown": "The scanner checks whether the `curl` command-line tool is invoked with the `--hsts` option."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-42916",
              "name": "CVE-2022-42916",
              "shortDescription": {
                "text": "Scanner for CVE-2022-42916"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `curl` command-line tool is invoked with the `--hsts` option.",
                "markdown": "The scanner checks whether the `curl` command-line tool is invoked with the `--hsts` option."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-23914",
              "name": "CVE-2023-23914",
              "shortDescription": {
                "text": "Scanner for CVE-2023-23914"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `curl` command-line tool is invoked with the `--hsts` option.",
                "markdown": "The scanner checks whether the `curl` command-line tool is invoked with the `--hsts` option."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-4450",
              "name": "CVE-2022-4450",
              "shortDescription": {
                "text": "Scanner for CVE-2022-4450"
              },
              "fullDescription": {
                "text": "The scanner checks if at least one of the vulnerable functions is called:\n```\nPEM_read_bio_ex()\nPEM_read_bio()\nPEM_read()\nPEM_read_DHparams()\nPEM_read_PrivateKey()\nPEM_read_bio_PrivateKey()\nPEM_read_RSA_PUBKEY()\nPEM_read_bio_RSA_PUBKEY()\nPEM_read_RSAPrivateKey()\nPEM_read_bio_RSAPrivateKey()\nPEM_read_PKCS7()\nPEM_read_bio_PKCS7()\nPEM_read_X509()\nPEM_read_bio_X509()\nPEM_read_X509_AUX()\nPEM_read_bio_X509_AUX()\nPEM_read_X509_CRL()\nPEM_read_bio_X509_CRL()\nPEM_read_bio_X509_REQ()\nPEM_read_bio_ECPrivateKey()\nPEM_read_bio_PKCS8()\n\nPEM_X509_INFO_read_bio_ex()\nSSL_CTX_use_serverinfo_file()\nSSL_use_cert_and_key() \nSSL_CTX_use_certificate_chain_file()\nSSL_CTX_load_verify_locations()\nSSL_CTX_set1_verify_file()\nSSL_CTX_set1_verify_path()\nX509_LOOKUP_load_file()\n\nSSL_load_client_CA_file_ex()\nSSL_load_client_CA_file()\nSSL_add_file_cert_subjects_to_stack()\nSSL_add_dir_cert_subjects_to_stack()\nSSL_add_store_cert_subjects_to_stack()\n\nuse_certificate_chain_file\nSSL_use_certificate_file\nSSL_CTX_use_certificate_file\nSSL_use_PrivateKey_file\nSSL_CTX_use_PrivateKey_file\nSSL_CTX_use_serverinfo_file\n\nSSL_use_RSAPrivateKey_file\nSSL_CTX_use_RSAPrivateKey_file\n```\n\nNote that while the vulnerability is also exploitable through the use of the command line tool `openssl asn1parse`, the vulnerability's DoS impact in this case does not pose a threat, since the DoS will crash the forked `openssl` tool process only",
                "markdown": "The scanner checks if at least one of the vulnerable functions is called:\n```\nPEM_read_bio_ex()\nPEM_read_bio()\nPEM_read()\nPEM_read_DHparams()\nPEM_read_PrivateKey()\nPEM_read_bio_PrivateKey()\nPEM_read_RSA_PUBKEY()\nPEM_read_bio_RSA_PUBKEY()\nPEM_read_RSAPrivateKey()\nPEM_read_bio_RSAPrivateKey()\nPEM_read_PKCS7()\nPEM_read_bio_PKCS7()\nPEM_read_X509()\nPEM_read_bio_X509()\nPEM_read_X509_AUX()\nPEM_read_bio_X509_AUX()\nPEM_read_X509_CRL()\nPEM_read_bio_X509_CRL()\nPEM_read_bio_X509_REQ()\nPEM_read_bio_ECPrivateKey()\nPEM_read_bio_PKCS8()\n\nPEM_X509_INFO_read_bio_ex()\nSSL_CTX_use_serverinfo_file()\nSSL_use_cert_and_key() \nSSL_CTX_use_certificate_chain_file()\nSSL_CTX_load_verify_locations()\nSSL_CTX_set1_verify_file()\nSSL_CTX_set1_verify_path()\nX509_LOOKUP_load_file()\n\nSSL_load_client_CA_file_ex()\nSSL_load_client_CA_file()\nSSL_add_file_cert_subjects_to_stack()\nSSL_add_dir_cert_subjects_to_stack()\nSSL_add_store_cert_subjects_to_stack()\n\nuse_certificate_chain_file\nSSL_use_certificate_file\nSSL_CTX_use_certificate_file\nSSL_use_PrivateKey_file\nSSL_CTX_use_PrivateKey_file\nSSL_CTX_use_serverinfo_file\n\nSSL_use_RSAPrivateKey_file\nSSL_CTX_use_RSAPrivateKey_file\n```\n\nNote that while the vulnerability is also exploitable through the use of the command line tool `openssl asn1parse`, the vulnerability's DoS impact in this case does not pose a threat, since the DoS will crash the forked `openssl` tool process only"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0215",
              "name": "CVE-2023-0215",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0215"
              },
              "fullDescription": {
                "text": "The scanner checks if at least one of the vulnerable functions is called:\n```\nPEM_write_bio_ASN1_stream()\nPEM_write_bio_CMS_stream()\nPEM_write_bio_PKCS7_stream()\nSMIME_write_ASN1()\nSMIME_write_CMS()\nSMIME_write_PKCS7()\nBIO_new_CMS()\nBIO_new_PKCS7()\ni2d_CMS_bio_stream()\ni2d_PKCS7_bio_stream()\ni2d_ASN1_bio_stream()\nBIO_new_NDEF()\n```",
                "markdown": "The scanner checks if at least one of the vulnerable functions is called:\n```\nPEM_write_bio_ASN1_stream()\nPEM_write_bio_CMS_stream()\nPEM_write_bio_PKCS7_stream()\nSMIME_write_ASN1()\nSMIME_write_CMS()\nSMIME_write_PKCS7()\nBIO_new_CMS()\nBIO_new_PKCS7()\ni2d_CMS_bio_stream()\ni2d_PKCS7_bio_stream()\ni2d_ASN1_bio_stream()\nBIO_new_NDEF()\n```"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0217",
              "name": "CVE-2023-0217",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0217"
              },
              "fullDescription": {
                "text": "When checking ELF files, the scanner checks whether the vulnerable `EVP_PKEY_public_check()` function is called.\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked",
                "markdown": "When checking ELF files, the scanner checks whether the vulnerable `EVP_PKEY_public_check()` function is called.\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0286",
              "name": "CVE-2023-0286",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0286"
              },
              "fullDescription": {
                "text": "The scanner checks if at least one of the vulnerable API calls is called:\n\n* `X509_STORE_CTX_get_check_revocation`\n* `X509_STORE_get_check_revocation`\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The CRL checking option must also be enabled.",
                "markdown": "The scanner checks if at least one of the vulnerable API calls is called:\n\n* `X509_STORE_CTX_get_check_revocation`\n* `X509_STORE_get_check_revocation`\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The CRL checking option must also be enabled."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0401",
              "name": "CVE-2023-0401",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0401"
              },
              "fullDescription": {
                "text": "When checking ELF files, the scanner checks whether at least one of the vulnerable API calls is called:\n\n* `PKCS7_decrypt`\n* `PKCS7_dataInit`\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked",
                "markdown": "When checking ELF files, the scanner checks whether at least one of the vulnerable API calls is called:\n\n* `PKCS7_decrypt`\n* `PKCS7_dataInit`\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0464",
              "name": "CVE-2023-0464",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0464"
              },
              "fullDescription": {
                "text": "The scanner checks whether OpenSSL supports the vulnerable policy constraints parsing functionality, by checking whether the `X509_VERIFY_PARAM_set1_policies` function is called (the functionality is disabled by default)\n\nNote that the scanner does not check for an additional vulnerable case in which the vulnerable policy constraints parsing functionality is enabled via the command line flag `-policy`. For example, by running `openssl ca -policy match`. However - in this case, the vulnerability will lead to a DoS of a forked command-line utility, which has a minimal impact on security.",
                "markdown": "The scanner checks whether OpenSSL supports the vulnerable policy constraints parsing functionality, by checking whether the `X509_VERIFY_PARAM_set1_policies` function is called (the functionality is disabled by default)\n\nNote that the scanner does not check for an additional vulnerable case in which the vulnerable policy constraints parsing functionality is enabled via the command line flag `-policy`. For example, by running `openssl ca -policy match`. However - in this case, the vulnerability will lead to a DoS of a forked command-line utility, which has a minimal impact on security."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0465",
              "name": "CVE-2023-0465",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0465"
              },
              "fullDescription": {
                "text": "The scanner checks whether OpenSSL supports the vulnerable policy constraints parsing functionality, by checking whether the `X509_VERIFY_PARAM_set1_policies` function is called (the functionality is disabled by default)\n\nNote that the scanner does not check for an additional vulnerable case in which the vulnerable policy constraints parsing functionality is enabled via the command line flag `-policy`. For example, by running `openssl ca -policy match`. However - in this case, the vulnerability will lead to a DoS of a forked command-line utility, which has a minimal impact on security.",
                "markdown": "The scanner checks whether OpenSSL supports the vulnerable policy constraints parsing functionality, by checking whether the `X509_VERIFY_PARAM_set1_policies` function is called (the functionality is disabled by default)\n\nNote that the scanner does not check for an additional vulnerable case in which the vulnerable policy constraints parsing functionality is enabled via the command line flag `-policy`. For example, by running `openssl ca -policy match`. However - in this case, the vulnerability will lead to a DoS of a forked command-line utility, which has a minimal impact on security."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-24534",
              "name": "CVE-2023-24534",
              "shortDescription": {
                "text": "Scanner for CVE-2023-24534"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-24537",
              "name": "CVE-2023-24537",
              "shortDescription": {
                "text": "Scanner for CVE-2023-24537"
              },
              "fullDescription": {
                "text": "The scanner checks whether one of the following vulnerable functions is called:\n\n- `scanner.Scanner.Scan`\n- `parser.ParseDir`\n- `parser.ParseExpr`\n- `parser.ExprFrom`\n- `parser.ParseFile`\n\nNote that the scanner does not check for the invocation of command-line utilities (such as `go build`) that can indirectly trigger this vulnerability",
                "markdown": "The scanner checks whether one of the following vulnerable functions is called:\n\n- `scanner.Scanner.Scan`\n- `parser.ParseDir`\n- `parser.ParseExpr`\n- `parser.ExprFrom`\n- `parser.ParseFile`\n\nNote that the scanner does not check for the invocation of command-line utilities (such as `go build`) that can indirectly trigger this vulnerability"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-24538",
              "name": "CVE-2023-24538",
              "shortDescription": {
                "text": "Scanner for CVE-2023-24538"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `Template.Execute`\n\t\n* `Template.ExecuteTemplate`",
                "markdown": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `Template.Execute`\n\t\n* `Template.ExecuteTemplate`"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-24539",
              "name": "CVE-2023-24539",
              "shortDescription": {
                "text": "Scanner for CVE-2023-24539"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-24540",
              "name": "CVE-2023-24540",
              "shortDescription": {
                "text": "Scanner for CVE-2023-24540"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-25153",
              "name": "CVE-2023-25153",
              "shortDescription": {
                "text": "Scanner for CVE-2023-25153"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-25173",
              "name": "CVE-2023-25173",
              "shortDescription": {
                "text": "Scanner for CVE-2023-25173"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-27533",
              "name": "CVE-2023-27533",
              "shortDescription": {
                "text": "Scanner for CVE-2023-27533"
              },
              "fullDescription": {
                "text": "The scanner checks whether curl is executed with the vulnerable `--telnet-option` flag, and the flag references one of the following vulnerable options -\n\n- `TTYPE`\n- `XDISPLOC`\n- `NEW_ENV`",
                "markdown": "The scanner checks whether curl is executed with the vulnerable `--telnet-option` flag, and the flag references one of the following vulnerable options -\n\n- `TTYPE`\n- `XDISPLOC`\n- `NEW_ENV`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-27536",
              "name": "CVE-2023-27536",
              "shortDescription": {
                "text": "Scanner for CVE-2023-27536"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `curl` command-line tool is invoked with the `--delegation` option.",
                "markdown": "The scanner checks whether the `curl` command-line tool is invoked with the `--delegation` option."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-32221",
              "name": "CVE-2022-32221",
              "shortDescription": {
                "text": "Scanner for CVE-2022-32221"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `curl_easy_setopt()` is called.\n\nTo determine the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified. The condition is that both CURLOPT_READFUNCTION and CURLOPT_POSTFIELDS options are set through `curl_easy_setopt()` on the same handler.",
                "markdown": "The scanner checks whether the `curl_easy_setopt()` is called.\n\nTo determine the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified. The condition is that both CURLOPT_READFUNCTION and CURLOPT_POSTFIELDS options are set through `curl_easy_setopt()` on the same handler."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-28322",
              "name": "CVE-2023-28322",
              "shortDescription": {
                "text": "Scanner for CVE-2023-28322"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `curl_easy_setopt` is called (this flaw cannot be triggered with the command line tool).\n\nNote that the scanner currently does not check for the specific arguments that must be passed to `curl_easy_setopt` (over multiple calls) for the vulnerability to be applicable -\n\n* `CURLOPT_READFUNCTION` - to set up a read callback that supplies data to the following PUT request\n\n* `CURLOPT_PUT / CURLOPT_UPLOAD` - to perform a PUT request\n\n* `CURLOPT_POSTFIELDS` - to (attempt to) supply data for the following POST request\n\n* `CURLOPT_POST` - to perform a POST request (which will erroneously use the read callback previously set)",
                "markdown": "The scanner checks whether the vulnerable function `curl_easy_setopt` is called (this flaw cannot be triggered with the command line tool).\n\nNote that the scanner currently does not check for the specific arguments that must be passed to `curl_easy_setopt` (over multiple calls) for the vulnerability to be applicable -\n\n* `CURLOPT_READFUNCTION` - to set up a read callback that supplies data to the following PUT request\n\n* `CURLOPT_PUT / CURLOPT_UPLOAD` - to perform a PUT request\n\n* `CURLOPT_POSTFIELDS` - to (attempt to) supply data for the following POST request\n\n* `CURLOPT_POST` - to perform a POST request (which will erroneously use the read callback previously set)"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29400",
              "name": "CVE-2023-29400",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29400"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29402",
              "name": "CVE-2023-29402",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29402"
              },
              "fullDescription": {
                "text": "The scanner looks for Go program binaries that were built with \"cgo\" support (C language bindings)",
                "markdown": "The scanner looks for Go program binaries that were built with \"cgo\" support (C language bindings)"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29403",
              "name": "CVE-2023-29403",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29403"
              },
              "fullDescription": {
                "text": "The scanner checks whether any Go binaries exist in the image, that have the SETUID or SETGID flags enabled",
                "markdown": "The scanner checks whether any Go binaries exist in the image, that have the SETUID or SETGID flags enabled"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29406",
              "name": "CVE-2023-29406",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29406"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29491",
              "name": "CVE-2023-29491",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29491"
              },
              "fullDescription": {
                "text": "The scanner checks whether a **setuid** binary calls any of the following vulnerable functions -\n- `initscr` \n- `setupterm`\n- `restartterm`\n- `_nc_read_file_entry`",
                "markdown": "The scanner checks whether a **setuid** binary calls any of the following vulnerable functions -\n- `initscr` \n- `setupterm`\n- `restartterm`\n- `_nc_read_file_entry`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29409",
              "name": "CVE-2023-29409",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29409"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-3978",
              "name": "CVE-2023-3978",
              "shortDescription": {
                "text": "Scanner for CVE-2023-3978"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-39323",
              "name": "CVE-2023-39323",
              "shortDescription": {
                "text": "Scanner for CVE-2023-39323"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information).",
                "markdown": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information)."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29404",
              "name": "CVE-2023-29404",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29404"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information).",
                "markdown": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information)."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-45285",
              "name": "CVE-2023-45285",
              "shortDescription": {
                "text": "Scanner for CVE-2023-45285"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue is only exploitable via user interaction.",
                "markdown": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue is only exploitable via user interaction."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-23773",
              "name": "CVE-2022-23773",
              "shortDescription": {
                "text": "Scanner for CVE-2022-23773"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable, since exploitation depends on the structure of the organization's Git repositories (see extended information).",
                "markdown": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable, since exploitation depends on the structure of the organization's Git repositories (see extended information)."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29405",
              "name": "CVE-2023-29405",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29405"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information).",
                "markdown": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information)."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-3711",
              "name": "CVE-2021-3711",
              "shortDescription": {
                "text": "Scanner for CVE-2021-3711"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `EVP_PKEY_decrypt` is called.",
                "markdown": "The scanner checks whether the vulnerable function `EVP_PKEY_decrypt` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0216",
              "name": "CVE-2023-0216",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0216"
              },
              "fullDescription": {
                "text": "When checking ELF files, the scanner checks if at least one of the vulnerable functions is called:\n\n* `d2i_PKCS7()`\n* `d2i_PKCS7_bio()`\n* `d2i_PKCS7_fp()`\n\nWhen checking Python files, the scanner checks if at least one of the vulnerable functions is called with external input to its 1st (`bytes`) argument:\n\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_der_pkcs7_certificates`\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_pem_pkcs7_certificates`",
                "markdown": "When checking ELF files, the scanner checks if at least one of the vulnerable functions is called:\n\n* `d2i_PKCS7()`\n* `d2i_PKCS7_bio()`\n* `d2i_PKCS7_fp()`\n\nWhen checking Python files, the scanner checks if at least one of the vulnerable functions is called with external input to its 1st (`bytes`) argument:\n\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_der_pkcs7_certificates`\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_pem_pkcs7_certificates`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-2650",
              "name": "CVE-2023-2650",
              "shortDescription": {
                "text": "Scanner for CVE-2023-2650"
              },
              "fullDescription": {
                "text": "When checking ELF files, the scanner checks whether one of the following function is called with an external input:\n\n* Direct call to `OBJ_obj2txt()` function (for OpenSSL 1.x and OpenSSL 3.x)\n\n**Only for OpenSSL 3.x:**\n\n* OCSP: `OCSP_basic_verify()`\n\n* PKCS7/SMIME:\n`PKCS7_decrypt()`\n`PKCS7_sign()`\n`PKCS7_verify()`\n\n* CMS:\n`CMS_EncryptedData_decrypt()`\n`CMS_EncryptedData_encrypt()`\n`CMS_EnvelopedData_decrypt()`\n`CMS_final()`\n`CMS_decrypt_set1_password()`\n`CMS_RecipientInfo_decrypt()`\n`CMS_decrypt()`\n`CMS_decrypt_set1_pkey()`\n`CMS_decrypt_set1_pkey_and_peer()`\n`CMS_SignedData_verify()`\n`CMS_verify()`\n`CMS_SignerInfo_verify()`\n`CMS_compress()`\n`CMS_data_create()`\n`CMS_data_create_ex()`\n`CMS_digest_create()`\n`CMS_digest_create_ex()`\n`CMS_digest_verify()`\n`CMS_encrypt()`\n`CMS_encrypt_ex()`\n`CMS_final_digest()`\n`CMS_sign()`\n`CMS_sign_ex()`\n`CMS_add1_signer()`\n`CMS_sign_receipt()`\n`CMS_uncompress()`\n`CMS_verify_receipt()`\n\n* CMP/CRMF:\n`OSSL_CMP_get_caCerts()`\n`OSSL_CRMF_ENCRYPTEDVALUE_get1_encCert()`\n`OSSL_CRMF_pbm_new()`\n\n* TS:\n`TS_REQ_print_bio()`\n`TS_OBJ_print_bio()`\n`TS_RESP_create_response()`\n`TS_RESP_print_bio()`\n`TS_RESP_verify_response()`\n`TS_RESP_verify_token()`\n\n* ASN1:\n`ASN1_parse()`\n`X509_NAME_print_ex()`\n`X509_NAME_print_ex_fp()`\n`d2i_AutoPrivateKey()`\n`d2i_PrivateKey()`\n`X509_STORE_CTX_print_verify_cb()`\n`x509_pubkey_ex_d2i_ex()`\n\n* EVP:\n`EVP_PKCS82PKEY()`\n`EVP_PKCS82PKEY_ex()`\n`PKCS5_v2_PBE_keyivgen()`\n`PKCS5_v2_PBE_keyivgen_ex()`\n\n* ESS:\n`OSSL_ESS_check_signing_certs()`\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked",
                "markdown": "When checking ELF files, the scanner checks whether one of the following function is called with an external input:\n\n* Direct call to `OBJ_obj2txt()` function (for OpenSSL 1.x and OpenSSL 3.x)\n\n**Only for OpenSSL 3.x:**\n\n* OCSP: `OCSP_basic_verify()`\n\n* PKCS7/SMIME:\n`PKCS7_decrypt()`\n`PKCS7_sign()`\n`PKCS7_verify()`\n\n* CMS:\n`CMS_EncryptedData_decrypt()`\n`CMS_EncryptedData_encrypt()`\n`CMS_EnvelopedData_decrypt()`\n`CMS_final()`\n`CMS_decrypt_set1_password()`\n`CMS_RecipientInfo_decrypt()`\n`CMS_decrypt()`\n`CMS_decrypt_set1_pkey()`\n`CMS_decrypt_set1_pkey_and_peer()`\n`CMS_SignedData_verify()`\n`CMS_verify()`\n`CMS_SignerInfo_verify()`\n`CMS_compress()`\n`CMS_data_create()`\n`CMS_data_create_ex()`\n`CMS_digest_create()`\n`CMS_digest_create_ex()`\n`CMS_digest_verify()`\n`CMS_encrypt()`\n`CMS_encrypt_ex()`\n`CMS_final_digest()`\n`CMS_sign()`\n`CMS_sign_ex()`\n`CMS_add1_signer()`\n`CMS_sign_receipt()`\n`CMS_uncompress()`\n`CMS_verify_receipt()`\n\n* CMP/CRMF:\n`OSSL_CMP_get_caCerts()`\n`OSSL_CRMF_ENCRYPTEDVALUE_get1_encCert()`\n`OSSL_CRMF_pbm_new()`\n\n* TS:\n`TS_REQ_print_bio()`\n`TS_OBJ_print_bio()`\n`TS_RESP_create_response()`\n`TS_RESP_print_bio()`\n`TS_RESP_verify_response()`\n`TS_RESP_verify_token()`\n\n* ASN1:\n`ASN1_parse()`\n`X509_NAME_print_ex()`\n`X509_NAME_print_ex_fp()`\n`d2i_AutoPrivateKey()`\n`d2i_PrivateKey()`\n`X509_STORE_CTX_print_verify_cb()`\n`x509_pubkey_ex_d2i_ex()`\n\n* EVP:\n`EVP_PKCS82PKEY()`\n`EVP_PKCS82PKEY_ex()`\n`PKCS5_v2_PBE_keyivgen()`\n`PKCS5_v2_PBE_keyivgen_ex()`\n\n* ESS:\n`OSSL_ESS_check_signing_certs()`\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-38545",
              "name": "CVE-2023-38545",
              "shortDescription": {
                "text": "Scanner for CVE-2023-38545"
              },
              "fullDescription": {
                "text": "The scanner checks for any of the vulnerable conditions:\n1. Whether the `curl` CLI tool is called with the vulnerable argument `--socks5-hostname`.\n2. Whether the vulnerable scheme `socks5h://` is referenced anywhere. This includes (but not limited to) command line arguments, environment variables and shell scripts.\n3. Whether the function `curl_easy_setopt` is called when using `libcurl`.\n\nIn the case of the last condition, for fully determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: `curl_easy_setopt` must be called with any of the following arguments:\n\n* `curl_easy_setopt(handle, CURLOPT_PROXYTYPE, CURLPROXY_SOCKS5_HOSTNAME)`\n* `curl_easy_setopt(handle, CURLOPT_PROXY, \"socks5h://...\")`\n* `curl_easy_setopt(handle, CURLOPT_PRE_PROXY, \"socks5h://...\")`",
                "markdown": "The scanner checks for any of the vulnerable conditions:\n1. Whether the `curl` CLI tool is called with the vulnerable argument `--socks5-hostname`.\n2. Whether the vulnerable scheme `socks5h://` is referenced anywhere. This includes (but not limited to) command line arguments, environment variables and shell scripts.\n3. Whether the function `curl_easy_setopt` is called when using `libcurl`.\n\nIn the case of the last condition, for fully determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: `curl_easy_setopt` must be called with any of the following arguments:\n\n* `curl_easy_setopt(handle, CURLOPT_PROXYTYPE, CURLPROXY_SOCKS5_HOSTNAME)`\n* `curl_easy_setopt(handle, CURLOPT_PROXY, \"socks5h://...\")`\n* `curl_easy_setopt(handle, CURLOPT_PRE_PROXY, \"socks5h://...\")`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-2068",
              "name": "CVE-2022-2068",
              "shortDescription": {
                "text": "Scanner for CVE-2022-2068"
              },
              "fullDescription": {
                "text": "The scanner checks for the execution of the vulnerable `c_rehash` by searching the artifact for the vulnerable command.",
                "markdown": "The scanner checks for the execution of the vulnerable `c_rehash` by searching the artifact for the vulnerable command."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-1292",
              "name": "CVE-2022-1292",
              "shortDescription": {
                "text": "Scanner for CVE-2022-1292"
              },
              "fullDescription": {
                "text": "The scanner checks for the execution of the vulnerable `c_rehash` by searching the artifact for the vulnerable command.",
                "markdown": "The scanner checks for the execution of the vulnerable `c_rehash` by searching the artifact for the vulnerable command."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-5363",
              "name": "CVE-2023-5363",
              "shortDescription": {
                "text": "Scanner for CVE-2023-5363"
              },
              "fullDescription": {
                "text": "The scanner checks if any of the following vulnerable functions are called:\n\n- `EVP_EncryptInit_ex2`\n- `EVP_DecryptInit_ex2`\n- `EVP_CipherInit_ex2`",
                "markdown": "The scanner checks if any of the following vulnerable functions are called:\n\n- `EVP_EncryptInit_ex2`\n- `EVP_DecryptInit_ex2`\n- `EVP_CipherInit_ex2`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-39325",
              "name": "CVE-2023-39325",
              "shortDescription": {
                "text": "Scanner for CVE-2023-39325"
              },
              "fullDescription": {
                "text": "The scanner should check whether one of the functions is used:\n\n* net/http\n\n    - ListenAndServe\n    - ListenAndServeTLS\n    - Serve\n    - ServeTLS\n    - Server.ListenAndServe\n    - Server.ListenAndServeTLS\n    - Server.Serve\n    - Server.ServeTLS\n    - http2serverConn.serve\n    - http2serverConn.processHeaders\n    - http2serverConn.upgradeRequest\n    - http2serverConn.runHandler\n        \n* golang.org/x/net/http2\n\n    - Server.ServeConn\n    - serverConn.serve\n    - serverConn.processHeaders\n    - serverConn.upgradeRequest\n    - serverConn.runHandler",
                "markdown": "The scanner should check whether one of the functions is used:\n\n* net/http\n\n    - ListenAndServe\n    - ListenAndServeTLS\n    - Serve\n    - ServeTLS\n    - Server.ListenAndServe\n    - Server.ListenAndServeTLS\n    - Server.Serve\n    - Server.ServeTLS\n    - http2serverConn.serve\n    - http2serverConn.processHeaders\n    - http2serverConn.upgradeRequest\n    - http2serverConn.runHandler\n        \n* golang.org/x/net/http2\n\n    - Server.ServeConn\n    - serverConn.serve\n    - serverConn.processHeaders\n    - serverConn.upgradeRequest\n    - serverConn.runHandler"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-42898",
              "name": "CVE-2022-42898",
              "shortDescription": {
                "text": "Scanner for CVE-2022-42898"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable Kerberos KDC service binary - `krb5kdc` (32-bit variant) exists in the artifact",
                "markdown": "The scanner checks whether the vulnerable Kerberos KDC service binary - `krb5kdc` (32-bit variant) exists in the artifact"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-35945",
              "name": "CVE-2023-35945",
              "shortDescription": {
                "text": "Scanner for CVE-2023-35945"
              },
              "fullDescription": {
                "text": "The scanner checks whether the Envoy YAML or JSON configuration contains a definition for an upstream cluster.\nFor example -\n```yaml\nstatic_resources:\n\tclusters:\n\t- name: ...\t\n```",
                "markdown": "The scanner checks whether the Envoy YAML or JSON configuration contains a definition for an upstream cluster.\nFor example -\n```yaml\nstatic_resources:\n\tclusters:\n\t- name: ...\t\n```"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-45287",
              "name": "CVE-2023-45287",
              "shortDescription": {
                "text": "Scanner for CVE-2023-45287"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following functions are called:\n\n* `Conn.Handshake()`\n\n* `Conn.HandshakeContext()`\n\n* `Conn.Read()`\n\n* `Conn.Write()`\n\n* `Dial()`\n\n* `DialWithDialer()`\n\n* `Dialer.Dial()`\n\n* `Dialer.DialContext()`",
                "markdown": "The scanner checks whether any of the following functions are called:\n\n* `Conn.Handshake()`\n\n* `Conn.HandshakeContext()`\n\n* `Conn.Read()`\n\n* `Conn.Write()`\n\n* `Dial()`\n\n* `DialWithDialer()`\n\n* `Dialer.Dial()`\n\n* `Dialer.DialContext()`"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-48795",
              "name": "CVE-2023-48795",
              "shortDescription": {
                "text": "Scanner for CVE-2023-48795"
              },
              "fullDescription": {
                "text": "The scanner looks for the OpenSSH/libssh server and client configurations in the following locations:\n\n* `/etc/ssh/sshd_config`\n* `/etc/ssh/ssh_config`\n* `~/.ssh/config`\n* `/root/.ssh/config`\n\nAnd checks if all of the following steps were taken to mitigate the vulnerability:\n\n1. Disabling/overriding the vulnerable `chacha20-poly1305` cipher, which is enabled by default.\n\n2. Turning off `AES-CBC`, unless you combine it with case 3.\n\n3. Disabling/overriding the vulnerable Message Authentication Code (MAC) algorithms, some of which are enabled by default. This is only relevant when `AES-CBC` is enabled.\n\nThe scanner currently only checks for libssh and OpenSSH attack prerequisites, even though other SSH programs may be vulnerable with different prerequisites. Therefore - the scanner either returns an Applicable result (libssh or OpenSSH are applicable) or an Undetermined result (libssh or OpenSSH are not applicable, other SSH programs may be applicable).",
                "markdown": "The scanner looks for the OpenSSH/libssh server and client configurations in the following locations:\n\n* `/etc/ssh/sshd_config`\n* `/etc/ssh/ssh_config`\n* `~/.ssh/config`\n* `/root/.ssh/config`\n\nAnd checks if all of the following steps were taken to mitigate the vulnerability:\n\n1. Disabling/overriding the vulnerable `chacha20-poly1305` cipher, which is enabled by default.\n\n2. Turning off `AES-CBC`, unless you combine it with case 3.\n\n3. Disabling/overriding the vulnerable Message Authentication Code (MAC) algorithms, some of which are enabled by default. This is only relevant when `AES-CBC` is enabled.\n\nThe scanner currently only checks for libssh and OpenSSH attack prerequisites, even though other SSH programs may be vulnerable with different prerequisites. Therefore - the scanner either returns an Applicable result (libssh or OpenSSH are applicable) or an Undetermined result (libssh or OpenSSH are not applicable, other SSH programs may be applicable)."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative"
              }
            },
            {
              "id": "applic_CVE-2023-28531",
              "name": "CVE-2023-28531",
              "shortDescription": {
                "text": "Scanner for CVE-2023-28531"
              },
              "fullDescription": {
                "text": "The scanner checks whether OpenSSH is configured to use the vulnerable PKCS #11 public-key standard, by checking for the `PKCS11Provider` directive in the OpenSSH configuration file.\nThe scanner does not check whether a PKCS #11 public-key has already been added to the SSH agent.\n\nAffected configuration example:\n`PKCS11Provider /usr/lib/x86_64-linux-gnu/opensc-pkcs11.so`",
                "markdown": "The scanner checks whether OpenSSH is configured to use the vulnerable PKCS #11 public-key standard, by checking for the `PKCS11Provider` directive in the OpenSSH configuration file.\nThe scanner does not check whether a PKCS #11 public-key has already been added to the SSH agent.\n\nAffected configuration example:\n`PKCS11Provider /usr/lib/x86_64-linux-gnu/opensc-pkcs11.so`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0466",
              "name": "CVE-2023-0466",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0466"
              },
              "fullDescription": {
                "text": "The scanner checks whether `X509_VERIFY_PARAM_add0_policy()` is called.\n\nNote that calling `X509_VERIFY_PARAM_set_flags()` with the parameter `X509_V_FLAG_POLICY_CHECK` mitigates this vulnerability. The scanner currently does not check for that mitigation.",
                "markdown": "The scanner checks whether `X509_VERIFY_PARAM_add0_policy()` is called.\n\nNote that calling `X509_VERIFY_PARAM_set_flags()` with the parameter `X509_V_FLAG_POLICY_CHECK` mitigates this vulnerability. The scanner currently does not check for that mitigation."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-51385",
              "name": "CVE-2023-51385",
              "shortDescription": {
                "text": "Scanner for CVE-2023-51385"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `ProxyCommand` configuration is uncommented and set with the tokens `%h` or `%r` in the OpenSSH configuration files: `/etc/ssh/ssh_config` or `~/.ssh/config`.",
                "markdown": "The scanner checks whether the `ProxyCommand` configuration is uncommented and set with the tokens `%h` or `%r` in the OpenSSH configuration files: `/etc/ssh/ssh_config` or `~/.ssh/config`."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-27534",
              "name": "CVE-2023-27534",
              "shortDescription": {
                "text": "Scanner for CVE-2023-27534"
              },
              "fullDescription": {
                "text": "The scanner checks if any of the following conditions are met:\n\n- The vulnerable `libcurl` function `curl_easy_setopt()` is called.\n- A connection to an SFTP server is made using Curl.\n\nIf any of the conditions are not met, the scanner will return an inconclusive result because Curl may be executed dynamically with user-provided SFTP address.",
                "markdown": "The scanner checks if any of the following conditions are met:\n\n- The vulnerable `libcurl` function `curl_easy_setopt()` is called.\n- A connection to an SFTP server is made using Curl.\n\nIf any of the conditions are not met, the scanner will return an inconclusive result because Curl may be executed dynamically with user-provided SFTP address."
              },
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private"
              }
            },
            {
              "id": "applic_CVE-2023-51767",
              "name": "CVE-2023-51767",
              "shortDescription": {
                "text": "Scanner for CVE-2023-51767"
              },
              "fullDescription": {
                "text": "The CVE is always applicable.\n\nNote - The vulnerability is hardware-dependent.",
                "markdown": "The CVE is always applicable.\n\nNote - The vulnerability is hardware-dependent."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative"
              }
            },
            {
              "id": "applic_CVE-2024-21626",
              "name": "CVE-2024-21626",
              "shortDescription": {
                "text": "Scanner for CVE-2024-21626"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the vulnerable binaries exist in the image, namely -\n1. `docker`\n2. `runc`",
                "markdown": "The scanner checks whether any of the vulnerable binaries exist in the image, namely -\n1. `docker`\n2. `runc`"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-49210",
              "name": "CVE-2023-49210",
              "shortDescription": {
                "text": "Scanner for CVE-2023-49210"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable `openssl` function is used with external input.",
                "markdown": "The scanner checks whether the vulnerable `openssl` function is used with external input."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-45288",
              "name": "CVE-2023-45288",
              "shortDescription": {
                "text": "Scanner for CVE-2023-45288"
              },
              "fullDescription": {
                "text": "The scanner checks if any of the following functions are called:\n\n* `net/http/ServeTLS`\n* `x/net/http2/Server/ServeConn`\n* `x/net/http2/ConfigureServer`\n\nAn additional condition (that the scanner currently does not check) should be verified to determine if the CVE is applicable: `crypto/tls/Config/NextProtos` or `net/http/TLSNextProto` are not used to disable `HTTP/2`.",
                "markdown": "The scanner checks if any of the following functions are called:\n\n* `net/http/ServeTLS`\n* `x/net/http2/Server/ServeConn`\n* `x/net/http2/ConfigureServer`\n\nAn additional condition (that the scanner currently does not check) should be verified to determine if the CVE is applicable: `crypto/tls/Config/NextProtos` or `net/http/TLSNextProto` are not used to disable `HTTP/2`."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2016-7798",
              "name": "CVE-2016-7798",
              "shortDescription": {
                "text": "Scanner for CVE-2016-7798"
              },
              "fullDescription": {
                "text": "The scanner checks if the function `OpenSSL::Cipher.new()` is called with AES gcm is as the encryption type. \nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The AES IV initialization happens before the key initialization.",
                "markdown": "The scanner checks if the function `OpenSSL::Cipher.new()` is called with AES gcm is as the encryption type. \nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The AES IV initialization happens before the key initialization."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-27782",
              "name": "CVE-2022-27782",
              "shortDescription": {
                "text": "Scanner for CVE-2022-27782"
              },
              "fullDescription": {
                "text": "The scanner checks for any of the vulnerable conditions:\n1. Whether the `curl` CLI tool is used with the vulnerable argument `--crlfile` or `--proxy-crlfile`.\n2. Whether the function `curl_easy_setopt` is called when using `libcurl`.\n\nIn the case of the last condition, to fully determine the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: `curl_easy_setopt` must be called with any of the following arguments:\n\n**TLS options**\n\n* `CURLOPT_SSL_OPTIONS`\n* `CURLOPT_CRLFILE`\n* `CURLOPT_TLSAUTH_USERNAME`\n* `CURLOPT_TLSAUTH_PASSWORD`\n* `CURLOPT_PROXY_SSL_OPTIONS`\n* `CURLOPT_PROXY_CRLFILE`\n* `CURLOPT_PROXY_TLSAUTH_USERNAME`\n* `CURLOPT_PROXY_TLSAUTH_PASSWORD`\n\n**SSH options**\n\n* `CURLOPT_SSH_PUBLIC_KEYFILE`\n* `CURLOPT_SSH_PRIVATE_KEYFILE`",
                "markdown": "The scanner checks for any of the vulnerable conditions:\n1. Whether the `curl` CLI tool is used with the vulnerable argument `--crlfile` or `--proxy-crlfile`.\n2. Whether the function `curl_easy_setopt` is called when using `libcurl`.\n\nIn the case of the last condition, to fully determine the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: `curl_easy_setopt` must be called with any of the following arguments:\n\n**TLS options**\n\n* `CURLOPT_SSL_OPTIONS`\n* `CURLOPT_CRLFILE`\n* `CURLOPT_TLSAUTH_USERNAME`\n* `CURLOPT_TLSAUTH_PASSWORD`\n* `CURLOPT_PROXY_SSL_OPTIONS`\n* `CURLOPT_PROXY_CRLFILE`\n* `CURLOPT_PROXY_TLSAUTH_USERNAME`\n* `CURLOPT_PROXY_TLSAUTH_PASSWORD`\n\n**SSH options**\n\n* `CURLOPT_SSH_PUBLIC_KEYFILE`\n* `CURLOPT_SSH_PRIVATE_KEYFILE`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-41617",
              "name": "CVE-2021-41617",
              "shortDescription": {
                "text": "Scanner for CVE-2021-41617"
              },
              "fullDescription": {
                "text": "The scanner checks if any of the vulnerable configurations are enabled in the sshd config file:\n\n* `AuthorizedKeysCommand`\n* `AuthorizedPrincipalsCommand`",
                "markdown": "The scanner checks if any of the vulnerable configurations are enabled in the sshd config file:\n\n* `AuthorizedKeysCommand`\n* `AuthorizedPrincipalsCommand`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-27781",
              "name": "CVE-2022-27781",
              "shortDescription": {
                "text": "Scanner for CVE-2022-27781"
              },
              "fullDescription": {
                "text": "The scanner checks if both of the following conditions are met:\n\n* The vulnerable `libcurl` function `curl_easy_setopt()` is called.\n* The library `libnss3` is linked with the `curl`.\n\nFor fully determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: `curl_easy_setopt` must be called with the argument `CURLOPT_CERTINFO`.",
                "markdown": "The scanner checks if both of the following conditions are met:\n\n* The vulnerable `libcurl` function `curl_easy_setopt()` is called.\n* The library `libnss3` is linked with the `curl`.\n\nFor fully determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: `curl_easy_setopt` must be called with the argument `CURLOPT_CERTINFO`."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-22576",
              "name": "CVE-2022-22576",
              "shortDescription": {
                "text": "Scanner for CVE-2022-22576"
              },
              "fullDescription": {
                "text": "The scanner checks whether `curl` uses the vulnerable configuration, by checking whether the vulnerable flag `--oauth2-bearer` is used.",
                "markdown": "The scanner checks whether `curl` uses the vulnerable configuration, by checking whether the vulnerable flag `--oauth2-bearer` is used."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-44487",
              "name": "CVE-2023-44487",
              "shortDescription": {
                "text": "Scanner for CVE-2023-44487"
              },
              "fullDescription": {
                "text": "The scanner checks for each vendor listed here:\n\n* Tomcat: configuration enables HTTP/2 either through the XML file or Java's `addUpgradeProtocol()` method.\n* Jetty: HTTP/2 enabled through `HTTP2CServerConnectionFactory`/`HTTP2ServerConnectionFactory` class initialization. Note: it also checks whether `jenkins` enables http/2 through its configuration.\n* Nginx: check whether one of the HTTP configurations is enabling http/2.\nNote: the following parameters should be configured properly to make the vulnerability not applicable:\n`keepalive_requests` should be kept at the default setting of 1000 requests\n`http2_max_concurrent_streams` should be kept at the default setting of 128 streams\n`limit_conn and limit_req` should be set `with a reasonable setting balancing application performance and security`. \n* Netty: check whether the `http2` codec classes are used in a java class\n* NodeJS: check whether the `http2.createSecureServer()` is used\n* NGHttp2: check whether a web server is instantiated through one of the symbols `nghttp2_session_server_new` or `listen_and_serve`.\n* Go: check whether a server is instantiated through the `net/http` or `net/http2` packages",
                "markdown": "The scanner checks for each vendor listed here:\n\n* Tomcat: configuration enables HTTP/2 either through the XML file or Java's `addUpgradeProtocol()` method.\n* Jetty: HTTP/2 enabled through `HTTP2CServerConnectionFactory`/`HTTP2ServerConnectionFactory` class initialization. Note: it also checks whether `jenkins` enables http/2 through its configuration.\n* Nginx: check whether one of the HTTP configurations is enabling http/2.\nNote: the following parameters should be configured properly to make the vulnerability not applicable:\n`keepalive_requests` should be kept at the default setting of 1000 requests\n`http2_max_concurrent_streams` should be kept at the default setting of 128 streams\n`limit_conn and limit_req` should be set `with a reasonable setting balancing application performance and security`. \n* Netty: check whether the `http2` codec classes are used in a java class\n* NodeJS: check whether the `http2.createSecureServer()` is used\n* NGHttp2: check whether a web server is instantiated through one of the symbols `nghttp2_session_server_new` or `listen_and_serve`.\n* Go: check whether a server is instantiated through the `net/http` or `net/http2` packages"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-3712",
              "name": "CVE-2021-3712",
              "shortDescription": {
                "text": "Scanner for CVE-2021-3712"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `ASN1_STRING` structure is created by searching for the existence of all the functions that create the `ASN1_STRING` structure or other structures that are based on the `ASN1_STRING` structure:\n\n* ASN1_STRING_new()\nASN1_STRING_type_new()\nASN1_OCTET_STRING_new()\nASN1_BIT_STRING_new()\nASN1_INTEGER_new()\nASN1_ENUMERATED_new()\nASN1_UTF8STRING_new()\nASN1_IA5STRING_new()\nASN1_UNIVERSALSTRING_new()\nASN1_BMPSTRING_new()\nASN1_GENERALSTRING_new()\nASN1_T61STRING_new()\nASN1_VISIBLESTRING_new()\nASN1_PRINTABLESTRING_new()\nASN1_PRINTABLE_new()\nDIRECTORYSTRING_new()\nDISPLAYTEXT_new()  \nASN1_GENERALIZEDTIME_new()\nASN1_UTCTIME_new()\nASN1_TIME_new()",
                "markdown": "The scanner checks whether the `ASN1_STRING` structure is created by searching for the existence of all the functions that create the `ASN1_STRING` structure or other structures that are based on the `ASN1_STRING` structure:\n\n* ASN1_STRING_new()\nASN1_STRING_type_new()\nASN1_OCTET_STRING_new()\nASN1_BIT_STRING_new()\nASN1_INTEGER_new()\nASN1_ENUMERATED_new()\nASN1_UTF8STRING_new()\nASN1_IA5STRING_new()\nASN1_UNIVERSALSTRING_new()\nASN1_BMPSTRING_new()\nASN1_GENERALSTRING_new()\nASN1_T61STRING_new()\nASN1_VISIBLESTRING_new()\nASN1_PRINTABLESTRING_new()\nASN1_PRINTABLE_new()\nDIRECTORYSTRING_new()\nDISPLAYTEXT_new()  \nASN1_GENERALIZEDTIME_new()\nASN1_UTCTIME_new()\nASN1_TIME_new()"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-30635",
              "name": "CVE-2022-30635",
              "shortDescription": {
                "text": "Scanner for CVE-2022-30635"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function Decoder.Decode of encoding/gob is called.",
                "markdown": "The scanner checks whether the vulnerable function Decoder.Decode of encoding/gob is called."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-3449",
              "name": "CVE-2021-3449",
              "shortDescription": {
                "text": "Scanner for CVE-2021-3449"
              },
              "fullDescription": {
                "text": "The scanner checks whether the server is configured with both:\n\n* TLSv1.2\n* Renegotiation is enabled\n\n\nThis CVE is applicable in ELF files under additional conditions (that the scanner currently does not check), which should be verified. The conditions are:\n\n1. The server code explicity sets the minimum and maximum versions of TLS to support TLSv1.2 (TLSv1.3 support 1.2 as well)\n\nFor example:\n```\nSSL_CTX_set_min_proto_version(ctx, TLS1_2_VERSION);\nSSL_CTX_set_max_proto_version(ctx, TLS1_3_VERSION);\n```\n\n2. The server code *does not* explicity disables renegotiation by `SSL_CTX_set_options(ctx, SSL_OP_NO_RENEGOTIATION)`.",
                "markdown": "The scanner checks whether the server is configured with both:\n\n* TLSv1.2\n* Renegotiation is enabled\n\n\nThis CVE is applicable in ELF files under additional conditions (that the scanner currently does not check), which should be verified. The conditions are:\n\n1. The server code explicity sets the minimum and maximum versions of TLS to support TLSv1.2 (TLSv1.3 support 1.2 as well)\n\nFor example:\n```\nSSL_CTX_set_min_proto_version(ctx, TLS1_2_VERSION);\nSSL_CTX_set_max_proto_version(ctx, TLS1_3_VERSION);\n```\n\n2. The server code *does not* explicity disables renegotiation by `SSL_CTX_set_options(ctx, SSL_OP_NO_RENEGOTIATION)`."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-38408",
              "name": "CVE-2023-38408",
              "shortDescription": {
                "text": "Scanner for CVE-2023-38408"
              },
              "fullDescription": {
                "text": "The scanner checks whether the libraries used by the current public exploits are present in the file system.",
                "markdown": "The scanner checks whether the libraries used by the current public exploits are present in the file system."
              },
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private"
              }
            },
            {
              "id": "applic_CVE-2022-30629",
              "name": "CVE-2022-30629",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-30629"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-22898",
              "name": "CVE-2021-22898",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-22898"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-35252",
              "name": "CVE-2022-35252",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-35252"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-1705",
              "name": "CVE-2022-1705",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-1705"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42378",
              "name": "CVE-2021-42378",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42378"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-27776",
              "name": "CVE-2022-27776",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-27776"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42915",
              "name": "CVE-2023-42915",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42915"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-30115",
              "name": "CVE-2022-30115",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-30115"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-28840",
              "name": "CVE-2023-28840",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-28840"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42375",
              "name": "CVE-2021-42375",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42375"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-29383",
              "name": "CVE-2023-29383",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-29383"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-4603",
              "name": "CVE-2024-4603",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-4603"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-45284",
              "name": "CVE-2023-45284",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-45284"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-3446",
              "name": "CVE-2023-3446",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-3446"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-22876",
              "name": "CVE-2021-22876",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-22876"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-28320",
              "name": "CVE-2023-28320",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-28320"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-51384",
              "name": "CVE-2023-51384",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-51384"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-39318",
              "name": "CVE-2023-39318",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-39318"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-22916",
              "name": "CVE-2020-22916",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-22916"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-27538",
              "name": "CVE-2023-27538",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-27538"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-6237",
              "name": "CVE-2023-6237",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-6237"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-38039",
              "name": "CVE-2023-38039",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-38039"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2006-5051",
              "name": "CVE-2006-5051",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2006-5051"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-29018",
              "name": "CVE-2024-29018",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-29018"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-1255",
              "name": "CVE-2023-1255",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-1255"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-4160",
              "name": "CVE-2021-4160",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-4160"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-28085",
              "name": "CVE-2024-28085",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-28085"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-29458",
              "name": "CVE-2022-29458",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-29458"
              },
              "fullDescription": {
                "text": "The scanner searches for execution evidence of the vulnerable tool  `tic`.",
                "markdown": "The scanner searches for execution evidence of the vulnerable tool  `tic`."
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-38546",
              "name": "CVE-2023-38546",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-38546"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-28841",
              "name": "CVE-2023-28841",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-28841"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-42915",
              "name": "CVE-2022-42915",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-42915"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-49298",
              "name": "CVE-2023-49298",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-49298"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-28642",
              "name": "CVE-2023-28642",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-28642"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-22901",
              "name": "CVE-2021-22901",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-22901"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42382",
              "name": "CVE-2021-42382",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42382"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-2379",
              "name": "CVE-2024-2379",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-2379"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-0853",
              "name": "CVE-2024-0853",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-0853"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42366",
              "name": "CVE-2023-42366",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42366"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42385",
              "name": "CVE-2021-42385",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42385"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2009-3767",
              "name": "CVE-2009-3767",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2009-3767"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-41089",
              "name": "CVE-2021-41089",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-41089"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-22890",
              "name": "CVE-2021-22890",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-22890"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-30139",
              "name": "CVE-2021-30139",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-30139"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-4203",
              "name": "CVE-2022-4203",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-4203"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `SSL_CTX_set_verify()` or `SSL_set_verify()` functions are called.\nA call with the `SSL_VERIFY_PEER` mode is enabling client authentication and makes this vulnerability possible.",
                "markdown": "The scanner checks whether the `SSL_CTX_set_verify()` or `SSL_set_verify()` functions are called.\nA call with the `SSL_VERIFY_PEER` mode is enabling client authentication and makes this vulnerability possible."
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-39319",
              "name": "CVE-2023-39319",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-39319"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-32207",
              "name": "CVE-2022-32207",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-32207"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-2004",
              "name": "CVE-2024-2004",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-2004"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-28319",
              "name": "CVE-2023-28319",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-28319"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2003-0695",
              "name": "CVE-2003-0695",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2003-0695"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42374",
              "name": "CVE-2021-42374",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42374"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-3817",
              "name": "CVE-2023-3817",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-3817"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-27779",
              "name": "CVE-2022-27779",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-27779"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-32206",
              "name": "CVE-2022-32206",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-32206"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42384",
              "name": "CVE-2021-42384",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42384"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-5678",
              "name": "CVE-2023-5678",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-5678"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-29511",
              "name": "CVE-2020-29511",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-29511"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-22925",
              "name": "CVE-2021-22925",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-22925"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42364",
              "name": "CVE-2023-42364",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42364"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-23915",
              "name": "CVE-2023-23915",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-23915"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42376",
              "name": "CVE-2021-42376",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42376"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-3114",
              "name": "CVE-2021-3114",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-3114"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-43552",
              "name": "CVE-2022-43552",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-43552"
              },
              "fullDescription": {
                "text": "The scanner checks whether the function `curl_easy_setopt()` is called to define `curl` options. The scanner does not check which options are passed to the function. \nA manual check is required to check if the `CURLOPT_PROXY` is defined along with a `CURLOPT_URL`  starting by `smb:` or `telnet:`.",
                "markdown": "The scanner checks whether the function `curl_easy_setopt()` is called to define `curl` options. The scanner does not check which options are passed to the function. \nA manual check is required to check if the `CURLOPT_PROXY` is defined along with a `CURLOPT_URL`  starting by `smb:` or `telnet:`."
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2006-5794",
              "name": "CVE-2006-5794",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2006-5794"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-24532",
              "name": "CVE-2023-24532",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-24532"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-3996",
              "name": "CVE-2021-3996",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-3996"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-27780",
              "name": "CVE-2022-27780",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-27780"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-24557",
              "name": "CVE-2024-24557",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-24557"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-23916",
              "name": "CVE-2023-23916",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-23916"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-46218",
              "name": "CVE-2023-46218",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-46218"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-30065",
              "name": "CVE-2022-30065",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-30065"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-34558",
              "name": "CVE-2021-34558",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-34558"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-36159",
              "name": "CVE-2021-36159",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-36159"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2016-20012",
              "name": "CVE-2016-20012",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2016-20012"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-24553",
              "name": "CVE-2020-24553",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-24553"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-30465",
              "name": "CVE-2021-30465",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-30465"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-22897",
              "name": "CVE-2021-22897",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-22897"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42383",
              "name": "CVE-2021-42383",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42383"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-36368",
              "name": "CVE-2021-36368",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-36368"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-32208",
              "name": "CVE-2022-32208",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-32208"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-48174",
              "name": "CVE-2022-48174",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-48174"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-28391",
              "name": "CVE-2022-28391",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-28391"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-1304",
              "name": "CVE-2022-1304",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-1304"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-32205",
              "name": "CVE-2022-32205",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-32205"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2003-0682",
              "name": "CVE-2003-0682",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2003-0682"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42363",
              "name": "CVE-2023-42363",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42363"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-28367",
              "name": "CVE-2020-28367",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-28367"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-0778",
              "name": "CVE-2022-0778",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-0778"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-37600",
              "name": "CVE-2021-37600",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-37600"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-28831",
              "name": "CVE-2021-28831",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-28831"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-35260",
              "name": "CVE-2022-35260",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-35260"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-41091",
              "name": "CVE-2021-41091",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-41091"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-27774",
              "name": "CVE-2022-27774",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-27774"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42365",
              "name": "CVE-2023-42365",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42365"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-29162",
              "name": "CVE-2022-29162",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-29162"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-6129",
              "name": "CVE-2023-6129",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-6129"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42386",
              "name": "CVE-2021-42386",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42386"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-2398",
              "name": "CVE-2024-2398",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-2398"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-31030",
              "name": "CVE-2022-31030",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-31030"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42379",
              "name": "CVE-2021-42379",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42379"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-22924",
              "name": "CVE-2021-22924",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-22924"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-3450",
              "name": "CVE-2021-3450",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-3450"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-3995",
              "name": "CVE-2021-3995",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-3995"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-0727",
              "name": "CVE-2024-0727",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-0727"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-2975",
              "name": "CVE-2023-2975",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-2975"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-1271",
              "name": "CVE-2022-1271",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-1271"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `xz-utils` or`xzgrep` or `zutils` or `zgrep` tools are present in the system.\nNote that even if `xzgrep` or `zgrep` executables are present, the issue may still not be exploitable, since exploitation depends on the tools to handle attacker-supplied filenames (see extended information).",
                "markdown": "The scanner checks whether the `xz-utils` or`xzgrep` or `zutils` or `zgrep` tools are present in the system.\nNote that even if `xzgrep` or `zgrep` executables are present, the issue may still not be exploitable, since exploitation depends on the tools to handle attacker-supplied filenames (see extended information)."
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-39326",
              "name": "CVE-2023-39326",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-39326"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-29510",
              "name": "CVE-2020-29510",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-29510"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-1394",
              "name": "CVE-2024-1394",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-1394"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-2466",
              "name": "CVE-2024-2466",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-2466"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2000-1254",
              "name": "CVE-2000-1254",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2000-1254"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-28842",
              "name": "CVE-2023-28842",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-28842"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-23471",
              "name": "CVE-2022-23471",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-23471"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-4304",
              "name": "CVE-2022-4304",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-4304"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2013-20001",
              "name": "CVE-2013-20001",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2013-20001"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-46219",
              "name": "CVE-2023-46219",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-46219"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-27537",
              "name": "CVE-2023-27537",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-27537"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-37750",
              "name": "CVE-2021-37750",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-37750"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2003-0693",
              "name": "CVE-2003-0693",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2003-0693"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-41190",
              "name": "CVE-2021-41190",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-41190"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-25809",
              "name": "CVE-2023-25809",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-25809"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42381",
              "name": "CVE-2021-42381",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42381"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-27775",
              "name": "CVE-2022-27775",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-27775"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-22947",
              "name": "CVE-2021-22947",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-22947"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-46828",
              "name": "CVE-2021-46828",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-46828"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-36222",
              "name": "CVE-2021-36222",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-36222"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-27535",
              "name": "CVE-2023-27535",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-27535"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42380",
              "name": "CVE-2021-42380",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42380"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2007-2768",
              "name": "CVE-2007-2768",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2007-2768"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-24769",
              "name": "CVE-2022-24769",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-24769"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-22945",
              "name": "CVE-2021-22945",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-22945"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-28366",
              "name": "CVE-2020-28366",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-28366"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-2511",
              "name": "CVE-2024-2511",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-2511"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-24032",
              "name": "CVE-2021-24032",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-24032"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            }
          ],
          "version": "1.0"
        }
      },
      "invocations": [
        {
          "arguments": [
            "/root/.jfrog/dependencies/analyzerManager/jas_scanner/jas_scanner",
            "scan",
            "/tmp/jfrog.cli.temp.-1718804270-2790634171/config.yaml"
          ],
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "/tmp/jfrog.cli.temp.-1718804222-284297614/image.tar"
          }
        }
      ],
      "results": [
        {
          "ruleId": "applic_CVE-2022-30580",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2021-3115",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2021-38297",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-41722",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-41720",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether one of the vulnerable functions `os.dirFS.Open` or  `net/http.Dir.Open` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2022-41716",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-30634",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-29804",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2018-25032",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `deflateInit2` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2023-45283",
          "kind": "pass",
          "message": {
            "text": "The vulnerability is only exploitable when running under the Windows OS.\nSince currently only Linux containers are supported, the scanner will always conclude that this vulnerability is not applicable."
          }
        },
        {
          "ruleId": "applic_CVE-2021-22922",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether `curl` supports the vulnerable file download functionality, by checking whether the vulnerable flag `--metalink` is used."
          }
        },
        {
          "ruleId": "applic_CVE-2021-22923",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether `curl` supports the vulnerable file download functionality, by checking whether the vulnerable flag `--metalink` is used."
          }
        },
        {
          "ruleId": "applic_CVE-2021-22946",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether `curl` supports the vulnerable functionality, by checking whether any of the following vulnerable flags are used:\n\n- `--ssl-reqd`\n- `--ftp-ssl-reqd`"
          }
        },
        {
          "ruleId": "applic_CVE-2021-27918",
          "message": {
            "text": "The vulnerable function Decoder.Token is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-31525",
          "message": {
            "text": "The vulnerable function shouldClose is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-31525",
          "message": {
            "text": "The vulnerable function shouldClose is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-31525",
          "message": {
            "text": "The vulnerable function shouldClose is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33194",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupCNAME is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/containerd-shim"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupSRV is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/containerd-shim"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupMX is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/containerd-shim"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupNS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/containerd-shim"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupAddr is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/containerd-shim"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupCNAME is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/containerd-shim-runc-v2"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupSRV is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/containerd-shim-runc-v2"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupMX is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/containerd-shim-runc-v2"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupNS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/containerd-shim-runc-v2"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupAddr is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/containerd-shim-runc-v2"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupCNAME is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupSRV is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupMX is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupNS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupAddr is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupCNAME is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupSRV is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupMX is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupNS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupAddr is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupCNAME is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupSRV is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupMX is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupNS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupAddr is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupCNAME is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/runc"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupSRV is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/runc"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupMX is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/runc"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupNS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/runc"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33195",
          "message": {
            "text": "The vulnerable function Resolver.lookupAddr is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/runc"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33196",
          "message": {
            "text": "The vulnerable function zip.NewReader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-2880",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2021-36221",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2021-33197",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2021-33198",
          "message": {
            "text": "The vulnerable function Rat.SetString is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/containerd-shim-runc-v2"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33198",
          "message": {
            "text": "The vulnerable function Rat.SetString is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33198",
          "message": {
            "text": "The vulnerable function Rat.SetString is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33198",
          "message": {
            "text": "The vulnerable function Rat.SetString is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-33198",
          "message": {
            "text": "The vulnerable function Rat.SetString is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/runc"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-39293",
          "message": {
            "text": "The vulnerable function NewReader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-41771",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the functions `macho.NewFile()`, `macho.OpenFat()` or `macho.Open()` are called with external input."
          }
        },
        {
          "ruleId": "applic_CVE-2021-41772",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `archive/zip.(*Reader).Open` is used."
          }
        },
        {
          "ruleId": "applic_CVE-2021-43784",
          "message": {
            "text": "The vulnerable function linuxContainer.Start is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/runc"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-43784",
          "message": {
            "text": "The vulnerable function linuxContainer.Run is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/runc"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-43784",
          "message": {
            "text": "The vulnerable function LinuxFactory.StartInitialization is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/runc"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-43784",
          "message": {
            "text": "The vulnerable function Bytemsg.Serialize is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/runc"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-43784",
          "message": {
            "text": "The vulnerable function linuxStandardInit.Init is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/runc"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-44717",
          "message": {
            "text": "The vulnerable function forkExec is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/containerd-shim"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-44717",
          "message": {
            "text": "The vulnerable function forkExec is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/containerd-shim-runc-v2"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-44717",
          "message": {
            "text": "The vulnerable function forkExec is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-44717",
          "message": {
            "text": "The vulnerable function forkExec is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-44717",
          "message": {
            "text": "The vulnerable function forkExec is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/runc"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-0563",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `chfs` and `chfn` CLI utilities are compiled with the vulnerable `readline` library."
          }
        },
        {
          "ruleId": "applic_CVE-2022-1962",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-2097",
          "kind": "pass",
          "message": {
            "text": "The scanner checks if the vulnerable function `EVP_EncryptInit_ex` is called.\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: the system's architecture is 32bit / x86."
          }
        },
        {
          "ruleId": "applic_CVE-2022-23772",
          "message": {
            "text": "The vulnerable function Rat.SetString is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/containerd-shim-runc-v2"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23772",
          "message": {
            "text": "The vulnerable function Rat.SetString is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23772",
          "message": {
            "text": "The vulnerable function Rat.SetString is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23772",
          "message": {
            "text": "The vulnerable function Rat.SetString is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23772",
          "message": {
            "text": "The vulnerable function Rat.SetString is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/runc"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "message": {
            "text": "At least one of the vulnerable functions (*CurveParams).IsOnCurve, p224Curve.IsOnCurve,\n p521Curve.IsOnCurve, Curve.IsOnCurve, (*p224Curve).IsOnCurve, (*p521Curve).IsOnCurve,\n p256Curve.IsOnCurve, (*p256Curve).IsOnCurve is called with external input"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24675",
          "message": {
            "text": "The vulnerable function pem.Decode is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24675",
          "message": {
            "text": "The vulnerable function pem.Decode is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24675",
          "message": {
            "text": "The vulnerable function pem.Decode is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.Compile is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/containerd-shim"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.MustCompile is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/containerd-shim"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.Compile is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/containerd-shim-runc-v2"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.MustCompile is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/containerd-shim-runc-v2"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.Compile is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.MustCompile is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.MatchString is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.Compile is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.MustCompile is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.MatchString is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.Compile is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.MustCompile is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.MatchString is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.Compile is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/runc"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "message": {
            "text": "The vulnerable function regexp.MustCompile is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/runc"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-27664",
          "message": {
            "text": "The vulnerable function net/http.ListenAndServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-27664",
          "message": {
            "text": "The vulnerable function net/http.ListenAndServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-27664",
          "message": {
            "text": "The vulnerable function net/http.ListenAndServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28131",
          "message": {
            "text": "The vulnerable function xml.Decoder.Skip is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function CurveParams.ScalarMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function CurveParams.ScalarBaseMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256GetScalar is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.CombinedMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.ScalarBaseMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.ScalarMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.CombinedMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.ScalarBaseMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.ScalarMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function CurveParams.ScalarMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function CurveParams.ScalarBaseMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256GetScalar is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.CombinedMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.ScalarBaseMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.ScalarMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.CombinedMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.ScalarBaseMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.ScalarMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function CurveParams.ScalarMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function CurveParams.ScalarBaseMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256GetScalar is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.CombinedMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.ScalarBaseMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.ScalarMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.CombinedMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.ScalarBaseMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "message": {
            "text": "The vulnerable function p256Curve.ScalarMult is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-2879",
          "message": {
            "text": "The vulnerable function archive/tar.Reader.Next is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-29526",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-30630",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `fs.Glob` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2022-30631",
          "message": {
            "text": "The vulnerable function gzip.Reader.Read is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-30631",
          "message": {
            "text": "The vulnerable function gzip.Reader.Read is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-30631",
          "message": {
            "text": "The vulnerable function gzip.Reader.Read is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-30631",
          "message": {
            "text": "The vulnerable function gzip.Reader.Read is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/runc"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-30632",
          "message": {
            "text": "The vulnerable function filepath.Glob is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-30632",
          "message": {
            "text": "The vulnerable function filepath.Glob is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-30632",
          "message": {
            "text": "The vulnerable function filepath.Glob is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/runc"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-30633",
          "message": {
            "text": "The vulnerable function Decoder.DecodeElement is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-30633",
          "message": {
            "text": "The vulnerable function Decoder.unmarshal is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-30633",
          "message": {
            "text": "The vulnerable function Decoder.unmarshalPath is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-32148",
          "message": {
            "text": "The vulnerable function Header.Clone is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-32148",
          "message": {
            "text": "The vulnerable function Header.Clone is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-32148",
          "message": {
            "text": "The vulnerable function Header.Clone is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-32148",
          "message": {
            "text": "The vulnerable function Header.Clone is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-32148",
          "message": {
            "text": "The vulnerable function Header.Clone is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-32148",
          "message": {
            "text": "The vulnerable function Header.Clone is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-32189",
          "message": {
            "text": "The vulnerable function math/big.Rat.GobDecode\\math/big.Float.GobDecode is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/containerd-shim-runc-v2"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-32189",
          "message": {
            "text": "The vulnerable function math/big.Rat.GobDecode\\math/big.Float.GobDecode is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/containerd-shim-runc-v2"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-32189",
          "message": {
            "text": "The vulnerable function math/big.Rat.GobDecode\\math/big.Float.GobDecode is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-32189",
          "message": {
            "text": "The vulnerable function math/big.Rat.GobDecode\\math/big.Float.GobDecode is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-32189",
          "message": {
            "text": "The vulnerable function math/big.Rat.GobDecode\\math/big.Float.GobDecode is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-32189",
          "message": {
            "text": "The vulnerable function math/big.Rat.GobDecode\\math/big.Float.GobDecode is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-32189",
          "message": {
            "text": "The vulnerable function math/big.Rat.GobDecode\\math/big.Float.GobDecode is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-32189",
          "message": {
            "text": "The vulnerable function math/big.Rat.GobDecode\\math/big.Float.GobDecode is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-32189",
          "message": {
            "text": "The vulnerable function math/big.Rat.GobDecode\\math/big.Float.GobDecode is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/runc"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-32189",
          "message": {
            "text": "The vulnerable function math/big.Rat.GobDecode\\math/big.Float.GobDecode is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/runc"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///lib/libapk.so.3.12.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///lib/libapk.so.3.12.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/krb5/plugins/tls/k5tls.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/krb5/plugins/tls/k5tls.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libcurl.so.4.7.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libcurl.so.4.7.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libcurl.so.4.7.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libtls-standalone.so.1.0.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libtls-standalone.so.1.0.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libtls-standalone.so.1.0.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libtls-standalone.so.1.0.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_accept is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libtls-standalone.so.1.0.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3786",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libtls-standalone.so.1.0.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///lib/libapk.so.3.12.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///lib/libapk.so.3.12.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/krb5/plugins/tls/k5tls.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/krb5/plugins/tls/k5tls.so"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libcurl.so.4.7.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libcurl.so.4.7.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libcurl.so.4.7.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libtls-standalone.so.1.0.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libtls-standalone.so.1.0.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_connect is called, indicating a TLS client that may accept crafted server certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libtls-standalone.so.1.0.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function X509_verify_cert is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libtls-standalone.so.1.0.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_accept is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libtls-standalone.so.1.0.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-3602",
          "message": {
            "text": "The vulnerable function SSL_CTX_set_verify is called, may indicate a TLS server that may accept crafted client certificates"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/lib/libtls-standalone.so.1.0.0"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-37434",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `inflateGetHeader()` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2022-41715",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any function eventually calls the vulnerable function `regexp/syntax.parse`."
          }
        },
        {
          "ruleId": "applic_CVE-2022-41717",
          "message": {
            "text": "The vulnerable function http2Server.ServeConn is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41717",
          "message": {
            "text": "The vulnerable function http2serverConn.canonicalHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41717",
          "message": {
            "text": "The vulnerable function Server.ListenAndServe is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41717",
          "message": {
            "text": "The vulnerable function Server.Serve is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41717",
          "message": {
            "text": "The vulnerable function Server.ServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41717",
          "message": {
            "text": "The vulnerable function Server.ListenAndServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41717",
          "message": {
            "text": "The vulnerable function http2Server.ServeConn is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41717",
          "message": {
            "text": "The vulnerable function http2serverConn.canonicalHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41717",
          "message": {
            "text": "The vulnerable function Server.ListenAndServe is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41717",
          "message": {
            "text": "The vulnerable function Server.Serve is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41717",
          "message": {
            "text": "The vulnerable function Server.ServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41717",
          "message": {
            "text": "The vulnerable function Server.ListenAndServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41717",
          "message": {
            "text": "The vulnerable function http2Server.ServeConn is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41717",
          "message": {
            "text": "The vulnerable function http2serverConn.canonicalHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41717",
          "message": {
            "text": "The vulnerable function Server.ListenAndServe is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41717",
          "message": {
            "text": "The vulnerable function Server.Serve is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41717",
          "message": {
            "text": "The vulnerable function Server.ServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41717",
          "message": {
            "text": "The vulnerable function Server.ListenAndServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41723",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `Decoder.DecodeFull` is called"
          }
        },
        {
          "ruleId": "applic_CVE-2022-41724",
          "kind": "pass",
          "message": {
            "text": "The CVE is never applicable. A closer inspection of the issue shows there are no potential user-controllable paths that allow creating a panic (see also original commit message - https://go.dev/cl/468125)"
          }
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.ReadMIMEHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.ReadForm is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.readForm is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function newPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Part.populateHeaders is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.NextPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.ReadMIMEHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.ReadForm is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.readForm is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function newPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Part.populateHeaders is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.NextPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.ReadMIMEHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.ReadForm is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.readForm is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function newPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Part.populateHeaders is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "message": {
            "text": "The vulnerable function Reader.NextPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.ReadMIMEHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.ReadForm is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.readForm is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function newPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Part.populateHeaders is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.NextPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.ReadMIMEHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.ReadForm is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.readForm is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function newPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Part.populateHeaders is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.NextPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.ReadMIMEHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.ReadForm is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.readForm is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function newPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Part.populateHeaders is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "message": {
            "text": "The vulnerable function Reader.NextPart is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-43551",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `curl` command-line tool is invoked with the `--hsts` option."
          }
        },
        {
          "ruleId": "applic_CVE-2022-42916",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `curl` command-line tool is invoked with the `--hsts` option."
          }
        },
        {
          "ruleId": "applic_CVE-2023-23914",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `curl` command-line tool is invoked with the `--hsts` option."
          }
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "kind": "pass",
          "message": {
            "text": "The scanner checks if at least one of the vulnerable functions is called:\n```\nPEM_read_bio_ex()\nPEM_read_bio()\nPEM_read()\nPEM_read_DHparams()\nPEM_read_PrivateKey()\nPEM_read_bio_PrivateKey()\nPEM_read_RSA_PUBKEY()\nPEM_read_bio_RSA_PUBKEY()\nPEM_read_RSAPrivateKey()\nPEM_read_bio_RSAPrivateKey()\nPEM_read_PKCS7()\nPEM_read_bio_PKCS7()\nPEM_read_X509()\nPEM_read_bio_X509()\nPEM_read_X509_AUX()\nPEM_read_bio_X509_AUX()\nPEM_read_X509_CRL()\nPEM_read_bio_X509_CRL()\nPEM_read_bio_X509_REQ()\nPEM_read_bio_ECPrivateKey()\nPEM_read_bio_PKCS8()\n\nPEM_X509_INFO_read_bio_ex()\nSSL_CTX_use_serverinfo_file()\nSSL_use_cert_and_key() \nSSL_CTX_use_certificate_chain_file()\nSSL_CTX_load_verify_locations()\nSSL_CTX_set1_verify_file()\nSSL_CTX_set1_verify_path()\nX509_LOOKUP_load_file()\n\nSSL_load_client_CA_file_ex()\nSSL_load_client_CA_file()\nSSL_add_file_cert_subjects_to_stack()\nSSL_add_dir_cert_subjects_to_stack()\nSSL_add_store_cert_subjects_to_stack()\n\nuse_certificate_chain_file\nSSL_use_certificate_file\nSSL_CTX_use_certificate_file\nSSL_use_PrivateKey_file\nSSL_CTX_use_PrivateKey_file\nSSL_CTX_use_serverinfo_file\n\nSSL_use_RSAPrivateKey_file\nSSL_CTX_use_RSAPrivateKey_file\n```\n\nNote that while the vulnerability is also exploitable through the use of the command line tool `openssl asn1parse`, the vulnerability's DoS impact in this case does not pose a threat, since the DoS will crash the forked `openssl` tool process only"
          }
        },
        {
          "ruleId": "applic_CVE-2023-0215",
          "kind": "pass",
          "message": {
            "text": "The scanner checks if at least one of the vulnerable functions is called:\n```\nPEM_write_bio_ASN1_stream()\nPEM_write_bio_CMS_stream()\nPEM_write_bio_PKCS7_stream()\nSMIME_write_ASN1()\nSMIME_write_CMS()\nSMIME_write_PKCS7()\nBIO_new_CMS()\nBIO_new_PKCS7()\ni2d_CMS_bio_stream()\ni2d_PKCS7_bio_stream()\ni2d_ASN1_bio_stream()\nBIO_new_NDEF()\n```"
          }
        },
        {
          "ruleId": "applic_CVE-2023-0217",
          "kind": "pass",
          "message": {
            "text": "When checking ELF files, the scanner checks whether the vulnerable `EVP_PKEY_public_check()` function is called.\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked"
          }
        },
        {
          "ruleId": "applic_CVE-2023-0286",
          "kind": "pass",
          "message": {
            "text": "The scanner checks if at least one of the vulnerable API calls is called:\n\n* `X509_STORE_CTX_get_check_revocation`\n* `X509_STORE_get_check_revocation`\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The CRL checking option must also be enabled."
          }
        },
        {
          "ruleId": "applic_CVE-2023-0401",
          "kind": "pass",
          "message": {
            "text": "When checking ELF files, the scanner checks whether at least one of the vulnerable API calls is called:\n\n* `PKCS7_decrypt`\n* `PKCS7_dataInit`\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked"
          }
        },
        {
          "ruleId": "applic_CVE-2023-0464",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether OpenSSL supports the vulnerable policy constraints parsing functionality, by checking whether the `X509_VERIFY_PARAM_set1_policies` function is called (the functionality is disabled by default)\n\nNote that the scanner does not check for an additional vulnerable case in which the vulnerable policy constraints parsing functionality is enabled via the command line flag `-policy`. For example, by running `openssl ca -policy match`. However - in this case, the vulnerability will lead to a DoS of a forked command-line utility, which has a minimal impact on security."
          }
        },
        {
          "ruleId": "applic_CVE-2023-0465",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether OpenSSL supports the vulnerable policy constraints parsing functionality, by checking whether the `X509_VERIFY_PARAM_set1_policies` function is called (the functionality is disabled by default)\n\nNote that the scanner does not check for an additional vulnerable case in which the vulnerable policy constraints parsing functionality is enabled via the command line flag `-policy`. For example, by running `openssl ca -policy match`. However - in this case, the vulnerability will lead to a DoS of a forked command-line utility, which has a minimal impact on security."
          }
        },
        {
          "ruleId": "applic_CVE-2023-24534",
          "message": {
            "text": "The vulnerable function Reader.ReadMIMEHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24534",
          "message": {
            "text": "The vulnerable function Reader.upcomingHeaderNewlines is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24534",
          "message": {
            "text": "The vulnerable function Reader.ReadMIMEHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24534",
          "message": {
            "text": "The vulnerable function Reader.upcomingHeaderNewlines is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24534",
          "message": {
            "text": "The vulnerable function Reader.ReadMIMEHeader is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24534",
          "message": {
            "text": "The vulnerable function Reader.upcomingHeaderNewlines is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24537",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether one of the following vulnerable functions is called:\n\n- `scanner.Scanner.Scan`\n- `parser.ParseDir`\n- `parser.ParseExpr`\n- `parser.ExprFrom`\n- `parser.ParseFile`\n\nNote that the scanner does not check for the invocation of command-line utilities (such as `go build`) that can indirectly trigger this vulnerability"
          }
        },
        {
          "ruleId": "applic_CVE-2023-24538",
          "message": {
            "text": "The vulnerable function Template.Execute is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24538",
          "message": {
            "text": "The vulnerable function Template.ExecuteTemplate is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24538",
          "message": {
            "text": "The vulnerable function Template.Execute is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24538",
          "message": {
            "text": "The vulnerable function Template.ExecuteTemplate is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24539",
          "message": {
            "text": "The vulnerable function cssValueFilter is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24539",
          "message": {
            "text": "The vulnerable function escaper.commit is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24539",
          "message": {
            "text": "The vulnerable function Template.Execute is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24539",
          "message": {
            "text": "The vulnerable function Template.ExecuteTemplate is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24539",
          "message": {
            "text": "The vulnerable function cssValueFilter is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24539",
          "message": {
            "text": "The vulnerable function escaper.commit is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24539",
          "message": {
            "text": "The vulnerable function Template.Execute is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24539",
          "message": {
            "text": "The vulnerable function Template.ExecuteTemplate is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24540",
          "message": {
            "text": "The vulnerable function nextJSCtx is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24540",
          "message": {
            "text": "The vulnerable function Template.Execute is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24540",
          "message": {
            "text": "The vulnerable function Template.ExecuteTemplate is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24540",
          "message": {
            "text": "The vulnerable function nextJSCtx is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24540",
          "message": {
            "text": "The vulnerable function Template.Execute is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-24540",
          "message": {
            "text": "The vulnerable function Template.ExecuteTemplate is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-25153",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2023-25173",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2023-27533",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether curl is executed with the vulnerable `--telnet-option` flag, and the flag references one of the following vulnerable options -\n\n- `TTYPE`\n- `XDISPLOC`\n- `NEW_ENV`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-27536",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `curl` command-line tool is invoked with the `--delegation` option."
          }
        },
        {
          "ruleId": "applic_CVE-2022-32221",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `curl_easy_setopt()` is called.\n\nTo determine the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified. The condition is that both CURLOPT_READFUNCTION and CURLOPT_POSTFIELDS options are set through `curl_easy_setopt()` on the same handler."
          }
        },
        {
          "ruleId": "applic_CVE-2023-28322",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `curl_easy_setopt` is called (this flaw cannot be triggered with the command line tool).\n\nNote that the scanner currently does not check for the specific arguments that must be passed to `curl_easy_setopt` (over multiple calls) for the vulnerability to be applicable -\n\n* `CURLOPT_READFUNCTION` - to set up a read callback that supplies data to the following PUT request\n\n* `CURLOPT_PUT / CURLOPT_UPLOAD` - to perform a PUT request\n\n* `CURLOPT_POSTFIELDS` - to (attempt to) supply data for the following POST request\n\n* `CURLOPT_POST` - to perform a POST request (which will erroneously use the read callback previously set)"
          }
        },
        {
          "ruleId": "applic_CVE-2023-29400",
          "message": {
            "text": "The vulnerable function htmlNospaceEscaper is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29400",
          "message": {
            "text": "The vulnerable function Template.Execute is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29400",
          "message": {
            "text": "The vulnerable function Template.ExecuteTemplate is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29400",
          "message": {
            "text": "The vulnerable function htmlNospaceEscaper is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29400",
          "message": {
            "text": "The vulnerable function Template.Execute is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29400",
          "message": {
            "text": "The vulnerable function Template.ExecuteTemplate is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29402",
          "kind": "pass",
          "message": {
            "text": "The scanner looks for Go program binaries that were built with \"cgo\" support (C language bindings)"
          }
        },
        {
          "ruleId": "applic_CVE-2023-29403",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any Go binaries exist in the image, that have the SETUID or SETGID flags enabled"
          }
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Client.Get is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Client.Do is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Client.Post is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Client.PostForm is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Client.Head is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Client.CloseIdleConnections is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Request.Write is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Request.WriteProxy is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Request.write is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Transport.RoundTrip is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Transport.CloseIdleConnections is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Transport.CancelRequest is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Client.Get is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Client.Do is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Client.Post is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Client.PostForm is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Client.Head is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Client.CloseIdleConnections is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Request.Write is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Request.WriteProxy is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Request.write is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Transport.RoundTrip is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Transport.CloseIdleConnections is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Transport.CancelRequest is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Request.Write is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Request.WriteProxy is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Request.write is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Transport.RoundTrip is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Transport.CloseIdleConnections is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "message": {
            "text": "The vulnerable function Transport.CancelRequest is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29491",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether a **setuid** binary calls any of the following vulnerable functions -\n- `initscr` \n- `setupterm`\n- `restartterm`\n- `_nc_read_file_entry`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.Write is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.Read is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.Handshake is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.verifyServerCertificate is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.processCertsFromClient is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function DialWithDialer is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.Write is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.Read is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.Handshake is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.verifyServerCertificate is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.processCertsFromClient is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function DialWithDialer is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.Write is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.Read is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.Handshake is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.verifyServerCertificate is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function Conn.processCertsFromClient is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "message": {
            "text": "The vulnerable function DialWithDialer is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-3978",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2023-39323",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information)."
          }
        },
        {
          "ruleId": "applic_CVE-2023-29404",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information)."
          }
        },
        {
          "ruleId": "applic_CVE-2023-45285",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue is only exploitable via user interaction."
          }
        },
        {
          "ruleId": "applic_CVE-2022-23773",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable, since exploitation depends on the structure of the organization's Git repositories (see extended information)."
          }
        },
        {
          "ruleId": "applic_CVE-2023-29405",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information)."
          }
        },
        {
          "ruleId": "applic_CVE-2021-3711",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `EVP_PKEY_decrypt` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2023-0216",
          "kind": "pass",
          "message": {
            "text": "When checking ELF files, the scanner checks if at least one of the vulnerable functions is called:\n\n* `d2i_PKCS7()`\n* `d2i_PKCS7_bio()`\n* `d2i_PKCS7_fp()`\n\nWhen checking Python files, the scanner checks if at least one of the vulnerable functions is called with external input to its 1st (`bytes`) argument:\n\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_der_pkcs7_certificates`\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_pem_pkcs7_certificates`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "kind": "pass",
          "message": {
            "text": "When checking ELF files, the scanner checks whether one of the following function is called with an external input:\n\n* Direct call to `OBJ_obj2txt()` function (for OpenSSL 1.x and OpenSSL 3.x)\n\n**Only for OpenSSL 3.x:**\n\n* OCSP: `OCSP_basic_verify()`\n\n* PKCS7/SMIME:\n`PKCS7_decrypt()`\n`PKCS7_sign()`\n`PKCS7_verify()`\n\n* CMS:\n`CMS_EncryptedData_decrypt()`\n`CMS_EncryptedData_encrypt()`\n`CMS_EnvelopedData_decrypt()`\n`CMS_final()`\n`CMS_decrypt_set1_password()`\n`CMS_RecipientInfo_decrypt()`\n`CMS_decrypt()`\n`CMS_decrypt_set1_pkey()`\n`CMS_decrypt_set1_pkey_and_peer()`\n`CMS_SignedData_verify()`\n`CMS_verify()`\n`CMS_SignerInfo_verify()`\n`CMS_compress()`\n`CMS_data_create()`\n`CMS_data_create_ex()`\n`CMS_digest_create()`\n`CMS_digest_create_ex()`\n`CMS_digest_verify()`\n`CMS_encrypt()`\n`CMS_encrypt_ex()`\n`CMS_final_digest()`\n`CMS_sign()`\n`CMS_sign_ex()`\n`CMS_add1_signer()`\n`CMS_sign_receipt()`\n`CMS_uncompress()`\n`CMS_verify_receipt()`\n\n* CMP/CRMF:\n`OSSL_CMP_get_caCerts()`\n`OSSL_CRMF_ENCRYPTEDVALUE_get1_encCert()`\n`OSSL_CRMF_pbm_new()`\n\n* TS:\n`TS_REQ_print_bio()`\n`TS_OBJ_print_bio()`\n`TS_RESP_create_response()`\n`TS_RESP_print_bio()`\n`TS_RESP_verify_response()`\n`TS_RESP_verify_token()`\n\n* ASN1:\n`ASN1_parse()`\n`X509_NAME_print_ex()`\n`X509_NAME_print_ex_fp()`\n`d2i_AutoPrivateKey()`\n`d2i_PrivateKey()`\n`X509_STORE_CTX_print_verify_cb()`\n`x509_pubkey_ex_d2i_ex()`\n\n* EVP:\n`EVP_PKCS82PKEY()`\n`EVP_PKCS82PKEY_ex()`\n`PKCS5_v2_PBE_keyivgen()`\n`PKCS5_v2_PBE_keyivgen_ex()`\n\n* ESS:\n`OSSL_ESS_check_signing_certs()`\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked"
          }
        },
        {
          "ruleId": "applic_CVE-2023-38545",
          "kind": "pass",
          "message": {
            "text": "The scanner checks for any of the vulnerable conditions:\n1. Whether the `curl` CLI tool is called with the vulnerable argument `--socks5-hostname`.\n2. Whether the vulnerable scheme `socks5h://` is referenced anywhere. This includes (but not limited to) command line arguments, environment variables and shell scripts.\n3. Whether the function `curl_easy_setopt` is called when using `libcurl`.\n\nIn the case of the last condition, for fully determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: `curl_easy_setopt` must be called with any of the following arguments:\n\n* `curl_easy_setopt(handle, CURLOPT_PROXYTYPE, CURLPROXY_SOCKS5_HOSTNAME)`\n* `curl_easy_setopt(handle, CURLOPT_PROXY, \"socks5h://...\")`\n* `curl_easy_setopt(handle, CURLOPT_PRE_PROXY, \"socks5h://...\")`"
          }
        },
        {
          "ruleId": "applic_CVE-2022-2068",
          "message": {
            "text": "The vulnerable string 'c_rehash' was found in the image"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///etc/ca-certificates/update.d/certhash"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-1292",
          "message": {
            "text": "The vulnerable string 'c_rehash' was found in the image"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///etc/ca-certificates/update.d/certhash"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-5363",
          "kind": "pass",
          "message": {
            "text": "The scanner checks if any of the following vulnerable functions are called:\n\n- `EVP_EncryptInit_ex2`\n- `EVP_DecryptInit_ex2`\n- `EVP_CipherInit_ex2`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function http2Server.ServeConn is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function http2serverConn.serve is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function http2serverConn.processHeaders is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function http2serverConn.runHandler is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function Server.ListenAndServe is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function Server.Serve is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function Server.ServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function Server.ListenAndServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function http2Server.ServeConn is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function http2serverConn.serve is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function http2serverConn.processHeaders is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function http2serverConn.runHandler is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function Server.ListenAndServe is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function Server.Serve is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function Server.ServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function Server.ListenAndServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function http2Server.ServeConn is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function http2serverConn.serve is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function http2serverConn.processHeaders is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function http2serverConn.runHandler is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function Server.ListenAndServe is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function Server.Serve is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function Server.ServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "message": {
            "text": "The vulnerable function Server.ListenAndServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-42898",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable Kerberos KDC service binary - `krb5kdc` (32-bit variant) exists in the artifact"
          }
        },
        {
          "ruleId": "applic_CVE-2023-35945",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the Envoy YAML or JSON configuration contains a definition for an upstream cluster.\nFor example -\n```yaml\nstatic_resources:\n\tclusters:\n\t- name: ...\t\n```"
          }
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/containerd-shim"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/containerd-shim"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/containerd-shim-runc-v2"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/containerd-shim-runc-v2"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/runc"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/runc"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-28531",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether OpenSSH is configured to use the vulnerable PKCS #11 public-key standard, by checking for the `PKCS11Provider` directive in the OpenSSH configuration file.\nThe scanner does not check whether a PKCS #11 public-key has already been added to the SSH agent.\n\nAffected configuration example:\n`PKCS11Provider /usr/lib/x86_64-linux-gnu/opensc-pkcs11.so`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-0466",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether `X509_VERIFY_PARAM_add0_policy()` is called.\n\nNote that calling `X509_VERIFY_PARAM_set_flags()` with the parameter `X509_V_FLAG_POLICY_CHECK` mitigates this vulnerability. The scanner currently does not check for that mitigation."
          }
        },
        {
          "ruleId": "applic_CVE-2023-51385",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `ProxyCommand` configuration is uncommented and set with the tokens `%h` or `%r` in the OpenSSH configuration files: `/etc/ssh/ssh_config` or `~/.ssh/config`."
          }
        },
        {
          "ruleId": "applic_CVE-2024-21626",
          "message": {
            "text": "The vulnerable executable was found in the filesystem"
          }
        },
        {
          "ruleId": "applic_CVE-2024-21626",
          "message": {
            "text": "The vulnerable executable was found in the filesystem"
          }
        },
        {
          "ruleId": "applic_CVE-2023-49210",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable `openssl` function is used with external input."
          }
        },
        {
          "ruleId": "applic_CVE-2023-45288",
          "message": {
            "text": "The vulnerable function ServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45288",
          "message": {
            "text": "The vulnerable function ServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-45288",
          "message": {
            "text": "The vulnerable function ServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2016-7798",
          "kind": "pass",
          "message": {
            "text": "The scanner checks if the function `OpenSSL::Cipher.new()` is called with AES gcm is as the encryption type. \nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The AES IV initialization happens before the key initialization."
          }
        },
        {
          "ruleId": "applic_CVE-2022-27782",
          "kind": "pass",
          "message": {
            "text": "The scanner checks for any of the vulnerable conditions:\n1. Whether the `curl` CLI tool is used with the vulnerable argument `--crlfile` or `--proxy-crlfile`.\n2. Whether the function `curl_easy_setopt` is called when using `libcurl`.\n\nIn the case of the last condition, to fully determine the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: `curl_easy_setopt` must be called with any of the following arguments:\n\n**TLS options**\n\n* `CURLOPT_SSL_OPTIONS`\n* `CURLOPT_CRLFILE`\n* `CURLOPT_TLSAUTH_USERNAME`\n* `CURLOPT_TLSAUTH_PASSWORD`\n* `CURLOPT_PROXY_SSL_OPTIONS`\n* `CURLOPT_PROXY_CRLFILE`\n* `CURLOPT_PROXY_TLSAUTH_USERNAME`\n* `CURLOPT_PROXY_TLSAUTH_PASSWORD`\n\n**SSH options**\n\n* `CURLOPT_SSH_PUBLIC_KEYFILE`\n* `CURLOPT_SSH_PRIVATE_KEYFILE`"
          }
        },
        {
          "ruleId": "applic_CVE-2021-41617",
          "kind": "pass",
          "message": {
            "text": "The scanner checks if any of the vulnerable configurations are enabled in the sshd config file:\n\n* `AuthorizedKeysCommand`\n* `AuthorizedPrincipalsCommand`"
          }
        },
        {
          "ruleId": "applic_CVE-2022-27781",
          "kind": "pass",
          "message": {
            "text": "The scanner checks if both of the following conditions are met:\n\n* The vulnerable `libcurl` function `curl_easy_setopt()` is called.\n* The library `libnss3` is linked with the `curl`.\n\nFor fully determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: `curl_easy_setopt` must be called with the argument `CURLOPT_CERTINFO`."
          }
        },
        {
          "ruleId": "applic_CVE-2022-22576",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether `curl` uses the vulnerable configuration, by checking whether the vulnerable flag `--oauth2-bearer` is used."
          }
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function http2Server.ServeConn is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function http2serverConn.serve is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function http2serverConn.processHeaders is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function http2serverConn.runHandler is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function Server.ListenAndServe is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function Server.Serve is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function Server.ServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function Server.ListenAndServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/docker"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function http2Server.ServeConn is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function http2serverConn.serve is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function http2serverConn.processHeaders is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function http2serverConn.runHandler is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function Server.ListenAndServe is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function Server.Serve is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function Server.ServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function Server.ListenAndServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function http2Server.ServeConn is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function http2serverConn.serve is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function http2serverConn.processHeaders is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function http2serverConn.runHandler is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function Server.ListenAndServe is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function Server.Serve is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function Server.ServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "message": {
            "text": "The vulnerable function Server.ListenAndServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/pipelines"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-3712",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `ASN1_STRING` structure is created by searching for the existence of all the functions that create the `ASN1_STRING` structure or other structures that are based on the `ASN1_STRING` structure:\n\n* ASN1_STRING_new()\nASN1_STRING_type_new()\nASN1_OCTET_STRING_new()\nASN1_BIT_STRING_new()\nASN1_INTEGER_new()\nASN1_ENUMERATED_new()\nASN1_UTF8STRING_new()\nASN1_IA5STRING_new()\nASN1_UNIVERSALSTRING_new()\nASN1_BMPSTRING_new()\nASN1_GENERALSTRING_new()\nASN1_T61STRING_new()\nASN1_VISIBLESTRING_new()\nASN1_PRINTABLESTRING_new()\nASN1_PRINTABLE_new()\nDIRECTORYSTRING_new()\nDISPLAYTEXT_new()  \nASN1_GENERALIZEDTIME_new()\nASN1_UTCTIME_new()\nASN1_TIME_new()"
          }
        },
        {
          "ruleId": "applic_CVE-2022-30635",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/local/bin/dockerd"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2021-3449",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the server is configured with both:\n\n* TLSv1.2\n* Renegotiation is enabled\n\n\nThis CVE is applicable in ELF files under additional conditions (that the scanner currently does not check), which should be verified. The conditions are:\n\n1. The server code explicity sets the minimum and maximum versions of TLS to support TLSv1.2 (TLSv1.3 support 1.2 as well)\n\nFor example:\n```\nSSL_CTX_set_min_proto_version(ctx, TLS1_2_VERSION);\nSSL_CTX_set_max_proto_version(ctx, TLS1_3_VERSION);\n```\n\n2. The server code *does not* explicity disables renegotiation by `SSL_CTX_set_options(ctx, SSL_OP_NO_RENEGOTIATION)`."
          }
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://jfrog.com/help/r/jfrog-security-documentation/jfrog-advanced-security",
          "name": "JFrog Secrets scanner",
          "rules": [
            {
              "id": "REQ.SECRET.GENERIC.TEXT",
              "name": "REQ.SECRET.GENERIC.TEXT",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.TEXT"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive"
              }
            },
            {
              "id": "REQ.SECRET.GENERIC.CODE",
              "name": "REQ.SECRET.GENERIC.CODE",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.CODE"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private"
              }
            },
            {
              "id": "REQ.SECRET.GENERIC.URL",
              "name": "REQ.SECRET.GENERIC.URL",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.URL"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive"
              }
            },
            {
              "id": "REQ.SECRET.KEYS",
              "name": "REQ.SECRET.KEYS",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.KEYS"
              },
              "fullDescription": {
                "text": "\nStoring an API key in the image could lead to several risks.\n\nIf the key is associated with a wide scope of privileges, attackers could extract it from a single image or firmware and use it maliciously to attack many targets. For example, if the embedded key allows querying/modifying data for all cloud user accounts, without per-user authentication, the attackers who extract it would gain access to system-wide data.\n\nIf the cloud/SaaS provider bills by key usage - for example, every million queries cost the key's owner a fixed sum of money - attackers could use the keys for their own purposes (or just as a form of vandalism), incurring a large cost to the legitimate user or operator.\n\n## Best practices\n\nUse narrow scopes for stored API keys. As much as possible, API keys should be unique per host and require additional authentication with the user's individual credentials for any sensitive actions.\n\nAvoid placing keys whose use incurs costs directly in the image. Store the key with any software or hardware protection available on the host for key storage (such as operating system key-stores, hardware cryptographic storage mechanisms or cloud-managed secure storage services such as [AWS KMS](https://aws.amazon.com/kms/)).\n\nTokens that were detected as exposed should be revoked and replaced -\n\n* [AWS Key Revocation](https://aws.amazon.com/premiumsupport/knowledge-center/delete-access-key/#:~:text=If%20you%20see%20a%20warning,the%20confirmation%20box%2C%20choose%20Deactivate.)\n* [GCP Key Revocation](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/CloudIAM/delete-api-keys.html)\n* [Azure Key Revocation](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops\u0026tabs=Windows#revoke-a-pat)\n* [GitHub Key Revocation](https://docs.github.com/en/rest/apps/oauth-applications#delete-an-app-authorization)\n",
                "markdown": "\nStoring an API key in the image could lead to several risks.\n\nIf the key is associated with a wide scope of privileges, attackers could extract it from a single image or firmware and use it maliciously to attack many targets. For example, if the embedded key allows querying/modifying data for all cloud user accounts, without per-user authentication, the attackers who extract it would gain access to system-wide data.\n\nIf the cloud/SaaS provider bills by key usage - for example, every million queries cost the key's owner a fixed sum of money - attackers could use the keys for their own purposes (or just as a form of vandalism), incurring a large cost to the legitimate user or operator.\n\n## Best practices\n\nUse narrow scopes for stored API keys. As much as possible, API keys should be unique per host and require additional authentication with the user's individual credentials for any sensitive actions.\n\nAvoid placing keys whose use incurs costs directly in the image. Store the key with any software or hardware protection available on the host for key storage (such as operating system key-stores, hardware cryptographic storage mechanisms or cloud-managed secure storage services such as [AWS KMS](https://aws.amazon.com/kms/)).\n\nTokens that were detected as exposed should be revoked and replaced -\n\n* [AWS Key Revocation](https://aws.amazon.com/premiumsupport/knowledge-center/delete-access-key/#:~:text=If%20you%20see%20a%20warning,the%20confirmation%20box%2C%20choose%20Deactivate.)\n* [GCP Key Revocation](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/CloudIAM/delete-api-keys.html)\n* [Azure Key Revocation](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops\u0026tabs=Windows#revoke-a-pat)\n* [GitHub Key Revocation](https://docs.github.com/en/rest/apps/oauth-applications#delete-an-app-authorization)\n"
              },
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private"
              }
            }
          ],
          "version": "1.0"
        }
      },
      "invocations": [
        {
          "arguments": [
            "/root/.jfrog/dependencies/analyzerManager/jas_scanner/jas_scanner",
            "scan",
            "/tmp/jfrog.cli.temp.-1718804270-2790634171/config.yaml"
          ],
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "/tmp/jfrog.cli.temp.-1718804222-284297614/image.tar"
          }
        }
      ],
      "results": []
    }
  ]
}
