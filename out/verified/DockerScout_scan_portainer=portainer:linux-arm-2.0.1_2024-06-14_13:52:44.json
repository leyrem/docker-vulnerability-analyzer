{
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "fullName": "Docker Scout",
          "informationUri": "https://docker.com/products/docker-scout",
          "name": "docker scout",
          "rules": [
            {
              "id": "CVE-2023-45288",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-45288"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-45288?s=golang&n=stdlib&t=golang&vr=%3C1.21.9",
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames.\n\nMaintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed.\n\nThis permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send.\n\nThe fix sets a limit on the amount of excess header frames we will process before closing a connection.\n",
                "markdown": "> An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames.\n\nMaintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed.\n\nThis permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send.\n\nThe fix sets a limit on the amount of excess header frames we will process before closing a connection.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.21.9                  |\n| Fixed version  | 1.21.9                   |\n"
              },
              "properties": {
                "affected_version": "<1.21.9",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "1.21.9",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "3.1",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "CVE-2023-45289",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-45289"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-45289?s=golang&n=stdlib&t=golang&vr=%3C1.21.8",
              "help": {
                "text": "When following an HTTP redirect to a domain which is not a subdomain match or exact match of the initial domain, an http.Client does not forward sensitive headers such as \"Authorization\" or \"Cookie\". For example, a redirect from foo.com to www.foo.com will forward the Authorization header, but a redirect to bar.com will not.\n\nA maliciously crafted HTTP redirect could cause sensitive headers to be unexpectedly forwarded.\n",
                "markdown": "> When following an HTTP redirect to a domain which is not a subdomain match or exact match of the initial domain, an http.Client does not forward sensitive headers such as \"Authorization\" or \"Cookie\". For example, a redirect from foo.com to www.foo.com will forward the Authorization header, but a redirect to bar.com will not.\n\nA maliciously crafted HTTP redirect could cause sensitive headers to be unexpectedly forwarded.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.21.8                  |\n| Fixed version  | 1.21.8                   |\n"
              },
              "properties": {
                "affected_version": "<1.21.8",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "1.21.8",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "3.1",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "CVE-2023-45290",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-45290"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-45290?s=golang&n=stdlib&t=golang&vr=%3C1.21.8",
              "help": {
                "text": "When parsing a multipart form (either explicitly with Request.ParseMultipartForm or implicitly with Request.FormValue, Request.PostFormValue, or Request.FormFile), limits on the total size of the parsed form were not applied to the memory consumed while reading a single form line. This permits a maliciously crafted input containing very long lines to cause allocation of arbitrarily large amounts of memory, potentially leading to memory exhaustion.\n\nWith fix, the ParseMultipartForm function now correctly limits the maximum size of form lines.\n",
                "markdown": "> When parsing a multipart form (either explicitly with Request.ParseMultipartForm or implicitly with Request.FormValue, Request.PostFormValue, or Request.FormFile), limits on the total size of the parsed form were not applied to the memory consumed while reading a single form line. This permits a maliciously crafted input containing very long lines to cause allocation of arbitrarily large amounts of memory, potentially leading to memory exhaustion.\n\nWith fix, the ParseMultipartForm function now correctly limits the maximum size of form lines.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.21.8                  |\n| Fixed version  | 1.21.8                   |\n"
              },
              "properties": {
                "affected_version": "<1.21.8",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "1.21.8",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "3.1",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "CVE-2024-24783",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2024-24783"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2024-24783?s=golang&n=stdlib&t=golang&vr=%3C1.21.8",
              "help": {
                "text": "Verifying a certificate chain which contains a certificate with an unknown public key algorithm will cause Certificate.Verify to panic.\n\nThis affects all crypto/tls clients, and servers that set Config.ClientAuth to VerifyClientCertIfGiven or RequireAndVerifyClientCert. The default behavior is for TLS servers to not verify client certificates.\n",
                "markdown": "> Verifying a certificate chain which contains a certificate with an unknown public key algorithm will cause Certificate.Verify to panic.\n\nThis affects all crypto/tls clients, and servers that set Config.ClientAuth to VerifyClientCertIfGiven or RequireAndVerifyClientCert. The default behavior is for TLS servers to not verify client certificates.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.21.8                  |\n| Fixed version  | 1.21.8                   |\n"
              },
              "properties": {
                "affected_version": "<1.21.8",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "1.21.8",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "3.1",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "CVE-2024-24784",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2024-24784"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2024-24784?s=golang&n=stdlib&t=golang&vr=%3C1.21.8",
              "help": {
                "text": "The ParseAddressList function incorrectly handles comments (text within parentheses) within display names. Since this is a misalignment with conforming address parsers, it can result in different trust decisions being made by programs using different parsers.\n",
                "markdown": "> The ParseAddressList function incorrectly handles comments (text within parentheses) within display names. Since this is a misalignment with conforming address parsers, it can result in different trust decisions being made by programs using different parsers.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.21.8                  |\n| Fixed version  | 1.21.8                   |\n"
              },
              "properties": {
                "affected_version": "<1.21.8",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "1.21.8",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "3.1",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "CVE-2024-24785",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2024-24785"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2024-24785?s=golang&n=stdlib&t=golang&vr=%3C1.21.8",
              "help": {
                "text": "If errors returned from MarshalJSON methods contain user controlled data, they may be used to break the contextual auto-escaping behavior of the html/template package, allowing for subsequent actions to inject unexpected content into templates.\n",
                "markdown": "> If errors returned from MarshalJSON methods contain user controlled data, they may be used to break the contextual auto-escaping behavior of the html/template package, allowing for subsequent actions to inject unexpected content into templates.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.21.8                  |\n| Fixed version  | 1.21.8                   |\n"
              },
              "properties": {
                "affected_version": "<1.21.8",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "1.21.8",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "3.1",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "CVE-2024-24789",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2024-24789"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2024-24789?s=golang&n=stdlib&t=golang&vr=%3C1.21.11",
              "help": {
                "text": "The archive/zip package's handling of certain types of invalid zip files differs from the behavior of most zip implementations. This misalignment could be exploited to create an zip file with contents that vary depending on the implementation reading the file. The archive/zip package now rejects files containing these errors.\n",
                "markdown": "> The archive/zip package's handling of certain types of invalid zip files differs from the behavior of most zip implementations. This misalignment could be exploited to create an zip file with contents that vary depending on the implementation reading the file. The archive/zip package now rejects files containing these errors.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.21.11                 |\n| Fixed version  | 1.21.11                  |\n"
              },
              "properties": {
                "affected_version": "<1.21.11",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "1.21.11",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "3.1",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "CVE-2024-24790",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2024-24790"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2024-24790?s=golang&n=stdlib&t=golang&vr=%3C1.21.11",
              "help": {
                "text": "The various Is methods (IsPrivate, IsLoopback, etc) did not work as expected for IPv4-mapped IPv6 addresses, returning false for addresses which would return true in their traditional IPv4 forms.\n",
                "markdown": "> The various Is methods (IsPrivate, IsLoopback, etc) did not work as expected for IPv4-mapped IPv6 addresses, returning false for addresses which would return true in their traditional IPv4 forms.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.21.11                 |\n| Fixed version  | 1.21.11                  |\n"
              },
              "properties": {
                "affected_version": "<1.21.11",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "1.21.11",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "3.1",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "GMS-2021-101",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "GMS-2021-101: OWASP Top Ten 2017 Category A9 - Using Components with Known Vulnerabilities"
              },
              "helpUri": "https://scout.docker.com/v/GMS-2021-101?s=gitlab&n=image-spec&ns=github.com%2Fopencontainers&t=golang&vr=%3C0.0.0-20211109170610-67d2d5658fe0",
              "help": {
                "text": "### Impact\nIn the OCI Image Specification version 1.0.1 and prior, manifest and index documents are not self-describing and documents with a single digest could be interpreted as either a manifest or an index.\n\n### Patches\nThe Image Specification will be updated to recommend that both manifest and index documents contain a `mediaType` field to identify the type of document.\n",
                "markdown": "> ### Impact\nIn the OCI Image Specification version 1.0.1 and prior, manifest and index documents are not self-describing and documents with a single digest could be interpreted as either a manifest or an index.\n\n### Patches\nThe Image Specification will be updated to recommend that both manifest and index documents contain a `mediaType` field to identify the type of document.\n\n|                |                                                                                   |\n|----------------|-----------------------------------------------------------------------------------|\n| Package        | pkg:golang/github.com/opencontainers/image-spec@0.0.0-20170515205857-f03dbe35d449 |\n| Affected range | <0.0.0-20211109170610-67d2d5658fe0                                                |\n| Fixed version  | 0.0.0-20211109170610-67d2d5658fe0                                                 |\n"
              },
              "properties": {
                "affected_version": "<0.0.0-20211109170610-67d2d5658fe0",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "0.0.0-20211109170610-67d2d5658fe0",
                "purls": [
                  "pkg:golang/github.com/opencontainers/image-spec@0.0.0-20170515205857-f03dbe35d449"
                ],
                "security-severity": "3.1",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "GMS-2021-175",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "GMS-2021-175: OWASP Top Ten 2017 Category A9 - Using Components with Known Vulnerabilities"
              },
              "helpUri": "https://scout.docker.com/v/GMS-2021-175?s=gitlab&n=containerd&ns=github.com%2Fcontainerd&t=golang&vr=%3C1.4.12",
              "help": {
                "text": "In the OCI Distribution Specification version 1.0.0 and prior and in the OCI Image Specification version 1.0.1 and prior, manifest and index documents are ambiguous without an accompanying Content-Type HTTP header.\n",
                "markdown": "> In the OCI Distribution Specification version 1.0.0 and prior and in the OCI Image Specification version 1.0.1 and prior, manifest and index documents are ambiguous without an accompanying Content-Type HTTP header.\n\n|                |                                                   |\n|----------------|---------------------------------------------------|\n| Package        | pkg:golang/github.com/containerd/containerd@1.3.1 |\n| Affected range | <1.4.12                                           |\n| Fixed version  | 1.4.12, 1.5.8                                     |\n"
              },
              "properties": {
                "affected_version": "<1.4.12",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "1.4.12, 1.5.8",
                "purls": [
                  "pkg:golang/github.com/containerd/containerd@1.3.1"
                ],
                "security-severity": "3.1",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "GMS-2021-177",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "GMS-2021-177: OWASP Top Ten 2017 Category A9 - Using Components with Known Vulnerabilities"
              },
              "helpUri": "https://scout.docker.com/v/GMS-2021-177?s=gitlab&n=runc&ns=github.com%2Fopencontainers&t=golang&vr=%3C0.0.0-20200630152430-24a3cf88a7ae",
              "help": {
                "text": "Contrary to the  OCI runtime specification `runc`'s implementation of the `linux.resources.devices` list was a black-list by default. This means that users who created their own `config.json` objects and didn't prefix a deny-all rule (`{\"allow\": false, \"permissions\": \"rwm\"}` or equivalent) were not provided protection by the `devices` cgroup.\n",
                "markdown": "> Contrary to the  OCI runtime specification `runc`'s implementation of the `linux.resources.devices` list was a black-list by default. This means that users who created their own `config.json` objects and didn't prefix a deny-all rule (`{\"allow\": false, \"permissions\": \"rwm\"}` or equivalent) were not provided protection by the `devices` cgroup.\n\n|                |                                                                             |\n|----------------|-----------------------------------------------------------------------------|\n| Package        | pkg:golang/github.com/opencontainers/runc@0.0.0-20161109192122-51371867a01c |\n| Affected range | <0.0.0-20200630152430-24a3cf88a7ae                                          |\n| Fixed version  | 0.0.0-20200630152430-24a3cf88a7ae                                           |\n"
              },
              "properties": {
                "affected_version": "<0.0.0-20200630152430-24a3cf88a7ae",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "0.0.0-20200630152430-24a3cf88a7ae",
                "purls": [
                  "pkg:golang/github.com/opencontainers/runc@0.0.0-20161109192122-51371867a01c"
                ],
                "security-severity": "3.1",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "GMS-2022-20",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "GMS-2022-20: OWASP Top Ten 2017 Category A9 - Using Components with Known Vulnerabilities"
              },
              "helpUri": "https://scout.docker.com/v/GMS-2022-20?s=gitlab&n=distribution&ns=github.com%2Fdocker&t=golang&vr=%3Cv2.8.0",
              "help": {
                "text": "### Impact\n\nSystems that rely on digest equivalence for image attestations may be vulnerable to type confusion.\n",
                "markdown": "> ### Impact\n\nSystems that rely on digest equivalence for image attestations may be vulnerable to type confusion.\n\n|                |                                                                         |\n|----------------|-------------------------------------------------------------------------|\n| Package        | pkg:golang/github.com/docker/distribution@2.7.1%!B(MISSING)incompatible |\n| Affected range | <v2.8.0                                                                 |\n| Fixed version  | v2.8.0                                                                  |\n"
              },
              "properties": {
                "affected_version": "<v2.8.0",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "v2.8.0",
                "purls": [
                  "pkg:golang/github.com/docker/distribution@2.7.1%2Bincompatible"
                ],
                "security-severity": "3.1",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "GMS-2023-3788",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "GMS-2023-3788: OWASP Top Ten 2017 Category A9 - Using Components with Known Vulnerabilities"
              },
              "helpUri": "https://scout.docker.com/v/GMS-2023-3788?s=gitlab&n=grpc&ns=google.golang.org&t=golang&vr=%3C1.56.3",
              "help": {
                "text": "### Impact\nIn affected releases of gRPC-Go, it is possible for an attacker to send HTTP/2 requests, cancel them, and send subsequent requests, which is valid by the HTTP/2 protocol, but would cause the gRPC-Go server to launch more concurrent method handlers than the configured maximum stream limit.\n\n### Patches\nThis vulnerability was addressed by #6703 and has been included in patch releases: 1.56.3, 1.57.1, 1.58.3. It is also included in the latest release, 1.59.0.\n\nAlong with applying the patch, users should also ensure they are using the `grpc.MaxConcurrentStreams` server option to apply a limit to the server's resources used for any single connection.\n\n### Workarounds\nNone.\n\n### References\n#6703\n\n",
                "markdown": "> ### Impact\nIn affected releases of gRPC-Go, it is possible for an attacker to send HTTP/2 requests, cancel them, and send subsequent requests, which is valid by the HTTP/2 protocol, but would cause the gRPC-Go server to launch more concurrent method handlers than the configured maximum stream limit.\n\n### Patches\nThis vulnerability was addressed by #6703 and has been included in patch releases: 1.56.3, 1.57.1, 1.58.3. It is also included in the latest release, 1.59.0.\n\nAlong with applying the patch, users should also ensure they are using the `grpc.MaxConcurrentStreams` server option to apply a limit to the server's resources used for any single connection.\n\n### Workarounds\nNone.\n\n### References\n#6703\n\n\n|                |                                          |\n|----------------|------------------------------------------|\n| Package        | pkg:golang/google.golang.org/grpc@1.22.1 |\n| Affected range | <1.56.3                                  |\n| Fixed version  | 1.56.3, 1.57.1, 1.58.3                   |\n"
              },
              "properties": {
                "affected_version": "<1.56.3",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "1.56.3, 1.57.1, 1.58.3",
                "purls": [
                  "pkg:golang/google.golang.org/grpc@1.22.1"
                ],
                "security-severity": "3.1",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "GMS-2023-6564",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "GMS-2023-6564: OWASP Top Ten 2017 Category A9 - Using Components with Known Vulnerabilities"
              },
              "helpUri": "https://scout.docker.com/v/GMS-2023-6564?s=gitlab&n=containerd&ns=github.com%2Fcontainerd&t=golang&vr=%3C%3D1.6.25",
              "help": {
                "text": "# /sys/devices/virtual/powercap accessible by default to containers\n\nIntel's RAPL (Running Average Power Limit) feature, introduced by the Sandy Bridge microarchitecture, provides software insights into hardware energy consumption. To facilitate this, Intel introduced the powercap framework in Linux kernel 3.13, which reads values via relevant MSRs (model specific registers) and provides unprivileged userspace access via `sysfs`. As RAPL is an interface to access a hardware feature, it is only available when running on bare metal with the module compiled into the kernel.\n\nBy 2019, it was realized that in some cases unprivileged access to RAPL readings could be exploited as a power-based side-channel against security features including AES-NI (potentially inside a SGX enclave) and KASLR (kernel address space layout randomization). Also known as the [PLATYPUS attack](https://platypusattack.com/), Intel assigned [CVE-2020-8694](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8694) and [CVE-2020-8695](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8695), and AMD assigned [CVE-2020-12912](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-12912).\n\nSeveral mitigations were applied; Intel reduced the sampling resolution via a microcode update, and the Linux kernel [prevents access by non-root users](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=949dd0104c496fa7c14991a23c03c62e44637e71) since 5.10. However, this kernel-based mitigation does not apply to many container-based scenarios:\n* Unless using user namespaces, root inside a container has the same level of privilege as root outside the container, but with a slightly more narrow view of the system\n* `sysfs` is mounted inside containers read-only; however only read access is needed to carry out this attack on an unpatched CPU\n\nWhile this is not a direct vulnerability in container runtimes, defense in depth and safe defaults are valuable and preferred, especially as this poses a risk to multi-tenant container environments. This is provided by masking `/sys/devices/virtual/powercap` in the default mount configuration, and adding an additional set of rules to deny it in the default AppArmor profile.\n\nWhile `sysfs` is not the only way to read from the RAPL subsystem, other ways of accessing it require additional capabilities such as `CAP_SYS_RAWIO` which is not available to containers by default, or `perf` paranoia level less than 1, which is a non-default kernel tunable.\n\n## References\n\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8694\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8695\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-12912\n* https://platypusattack.com/\n* https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=949dd0104c496fa7c14991a23c03c62e44637e71\n* https://web.eece.maine.edu/~vweaver/projects/rapl/\n",
                "markdown": "> # /sys/devices/virtual/powercap accessible by default to containers\n\nIntel's RAPL (Running Average Power Limit) feature, introduced by the Sandy Bridge microarchitecture, provides software insights into hardware energy consumption. To facilitate this, Intel introduced the powercap framework in Linux kernel 3.13, which reads values via relevant MSRs (model specific registers) and provides unprivileged userspace access via `sysfs`. As RAPL is an interface to access a hardware feature, it is only available when running on bare metal with the module compiled into the kernel.\n\nBy 2019, it was realized that in some cases unprivileged access to RAPL readings could be exploited as a power-based side-channel against security features including AES-NI (potentially inside a SGX enclave) and KASLR (kernel address space layout randomization). Also known as the [PLATYPUS attack](https://platypusattack.com/), Intel assigned [CVE-2020-8694](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8694) and [CVE-2020-8695](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8695), and AMD assigned [CVE-2020-12912](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-12912).\n\nSeveral mitigations were applied; Intel reduced the sampling resolution via a microcode update, and the Linux kernel [prevents access by non-root users](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=949dd0104c496fa7c14991a23c03c62e44637e71) since 5.10. However, this kernel-based mitigation does not apply to many container-based scenarios:\n* Unless using user namespaces, root inside a container has the same level of privilege as root outside the container, but with a slightly more narrow view of the system\n* `sysfs` is mounted inside containers read-only; however only read access is needed to carry out this attack on an unpatched CPU\n\nWhile this is not a direct vulnerability in container runtimes, defense in depth and safe defaults are valuable and preferred, especially as this poses a risk to multi-tenant container environments. This is provided by masking `/sys/devices/virtual/powercap` in the default mount configuration, and adding an additional set of rules to deny it in the default AppArmor profile.\n\nWhile `sysfs` is not the only way to read from the RAPL subsystem, other ways of accessing it require additional capabilities such as `CAP_SYS_RAWIO` which is not available to containers by default, or `perf` paranoia level less than 1, which is a non-default kernel tunable.\n\n## References\n\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8694\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8695\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-12912\n* https://platypusattack.com/\n* https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=949dd0104c496fa7c14991a23c03c62e44637e71\n* https://web.eece.maine.edu/~vweaver/projects/rapl/\n\n|                |                                                   |\n|----------------|---------------------------------------------------|\n| Package        | pkg:golang/github.com/containerd/containerd@1.3.1 |\n| Affected range | <=1.6.25                                          |\n| Fixed version  | 1.6.26, 1.7.11                                    |\n"
              },
              "properties": {
                "affected_version": "<=1.6.25",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "1.6.26, 1.7.11",
                "purls": [
                  "pkg:golang/github.com/containerd/containerd@1.3.1"
                ],
                "security-severity": "3.1",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "GHSA-c9cp-9c75-9v8c",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "GHSA-c9cp-9c75-9v8c"
              },
              "helpUri": "https://scout.docker.com/v/GHSA-c9cp-9c75-9v8c?s=github&n=containerd&ns=github.com%2Fcontainerd&t=golang&vr=%3C1.5.11",
              "help": {
                "text": "### Impact\n\nA bug was found in containerd where containers were incorrectly started with non-empty inheritable Linux process capabilities, creating an atypical Linux environment and enabling programs with inheritable file capabilities to elevate those capabilities to the permitted set during `execve(2)`.  Normally, when executable programs have specified permitted file capabilities, otherwise unprivileged users and processes can execute those programs and gain the specified file capabilities up to the bounding set.  Due to this bug, containers which included executable programs with inheritable file capabilities allowed otherwise unprivileged users and processes to additionally gain these inheritable file capabilities up to the container's bounding set.  Containers which use Linux users and groups to perform privilege separation inside the container are most directly impacted.\n\nThis bug did not affect the container security sandbox as the inheritable set never contained more capabilities than were included in the container's bounding set.\n\n\n### Patches\n\nThis bug has been fixed in containerd 1.5.11 and 1.6.2.  Users should update to these versions as soon as possible.  Running containers should be stopped, deleted, and recreated for the inheritable capabilities to be reset.\n\nThis fix changes containerd behavior such that containers are started with a more typical Linux environment.  Refer to `capabilities(7)` for a description of how capabilities work.  Note that permitted file capabilities continue to allow for privileges to be raised up to the container's bounding set and that processes may add capabilities to their own inheritable set up to the container's bounding set per the rules described in the manual page.  In all cases the container's bounding set provides an upper bound on the capabilities that can be assumed and provides for the container security sandbox.\n\n### Workarounds\n\nThe entrypoint of a container can be modified to use a utility like `capsh(1)` to drop inheritable capabilities prior to the primary process starting.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* [Open an issue](https://github.com/containerd/containerd/issues/new)\n* Email us at [security@containerd.io](mailto:security@containerd.io) if you think you’ve found a security bug\n",
                "markdown": "> ### Impact\n\nA bug was found in containerd where containers were incorrectly started with non-empty inheritable Linux process capabilities, creating an atypical Linux environment and enabling programs with inheritable file capabilities to elevate those capabilities to the permitted set during `execve(2)`.  Normally, when executable programs have specified permitted file capabilities, otherwise unprivileged users and processes can execute those programs and gain the specified file capabilities up to the bounding set.  Due to this bug, containers which included executable programs with inheritable file capabilities allowed otherwise unprivileged users and processes to additionally gain these inheritable file capabilities up to the container's bounding set.  Containers which use Linux users and groups to perform privilege separation inside the container are most directly impacted.\n\nThis bug did not affect the container security sandbox as the inheritable set never contained more capabilities than were included in the container's bounding set.\n\n\n### Patches\n\nThis bug has been fixed in containerd 1.5.11 and 1.6.2.  Users should update to these versions as soon as possible.  Running containers should be stopped, deleted, and recreated for the inheritable capabilities to be reset.\n\nThis fix changes containerd behavior such that containers are started with a more typical Linux environment.  Refer to `capabilities(7)` for a description of how capabilities work.  Note that permitted file capabilities continue to allow for privileges to be raised up to the container's bounding set and that processes may add capabilities to their own inheritable set up to the container's bounding set per the rules described in the manual page.  In all cases the container's bounding set provides an upper bound on the capabilities that can be assumed and provides for the container security sandbox.\n\n### Workarounds\n\nThe entrypoint of a container can be modified to use a utility like `capsh(1)` to drop inheritable capabilities prior to the primary process starting.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* [Open an issue](https://github.com/containerd/containerd/issues/new)\n* Email us at [security@containerd.io](mailto:security@containerd.io) if you think you’ve found a security bug\n\n|                |                                                   |\n|----------------|---------------------------------------------------|\n| Package        | pkg:golang/github.com/containerd/containerd@1.3.1 |\n| Affected range | <1.5.11                                           |\n| Fixed version  | 1.5.11                                            |\n"
              },
              "properties": {
                "affected_version": "<1.5.11",
                "cvssV3_severity": "LOW",
                "fixed_version": "1.5.11",
                "purls": [
                  "pkg:golang/github.com/containerd/containerd@1.3.1"
                ],
                "security-severity": "3.1",
                "tags": [
                  "LOW"
                ]
              }
            },
            {
              "id": "GHSA-g54h-m393-cpwq",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "GHSA-g54h-m393-cpwq"
              },
              "helpUri": "https://scout.docker.com/v/GHSA-g54h-m393-cpwq?s=github&n=runc&ns=github.com%2Fopencontainers&t=golang&vr=%3C0.0.0-20200630152430-24a3cf88a7ae",
              "help": {
                "text": "### Impact\nContrary to the [OCI runtime specification](https://github.com/opencontainers/runtime-spec/blob/v1.0.2/config-linux.md#device-whitelist), `runc`'s implementation of the `linux.resources.devices` list was a black-list by default. This means that users who created their own `config.json` objects and didn't prefix a deny-all rule (`{\"allow\": false, \"permissions\": \"rwm\"}` or equivalent) were not provided protection by the `devices` cgroup. This would allow malicious containers (with sufficient privileges) to create arbitrary device inodes (assuming they have `CAP_MKNOD`) and operate on any device inodes they may have access to (assuming they have regular Unix DAC permissions).\n\nHowever, most (if not all) programs that make use of `runc` include this deny-all rule. This was most likely added before the specification mandated a white-list of devices, and the fact that all programs wrote their own deny-all rule obscured the existence of this bug for several years. In fact, even the specification's examples include a default deny-all rule! We therefore believe that while this is a security bug (and has been fixed as such), it was almost certainly not exploitable in the wild due to the inclusion of default deny-all rules by all known users of `runc` -- hence why this advisory has low severity.\n\n### Patches\nThis issue has been fixed in [a patch that was part of a larger rework of the devices cgroup code in runc](https://github.com/opencontainers/runc/pull/2391) -- which lead to the discovery of this security bug. Users should upgrade to 1.0.0-rc91 as soon as it is released, or wait for your distribution to backport the relevant fixes.\n\n### Workarounds\nIf you are using `runc` directly, ensure that there is a deny-all entry at the beginning of `linux.resources.devices` -- such an entry would look like `{\"allow\": false, \"permissions\": \"rwm\"}` (all other fields are ignored, though `type` must be set to `\"a\"` or `null` if it is present).\n\nUsers which consume `runc` through another program should check whether their containers are operating under a white-list -- this can be done by reading `/sys/fs/cgroup/devices/devices.list` inside the container. If the file contains only the entry `a *:* rwm` (meaning the cgroup is in black-list mode, which likely means \"allow all device access\") then your containers are vulnerable to this issue.\n\nAs always, we recommend **in the strongest possible terms** that all of our users enable user namespaces on all of their workloads (or pressure their vendors to do so). User namespaces are one of the most significant defense-in-depth protections you can enable for containers, and have prevented many container-related vulnerabilities (both kernel 0days as well as bugs in container runtimes, such as this one).\n\n### References\n* https://www.kernel.org/doc/html/latest/admin-guide/cgroup-v1/devices.html\n* [opencontainers/runtime-spec/config-linux.md#device-whitelist](https://github.com/opencontainers/runtime-spec/blob/v1.0.2/config-linux.md#device-whitelist)\n* https://github.com/opencontainers/runc/pull/2391\n\n### For more information\nIf you have any questions or comments about this advisory:\n* [Open an issue in this repo](https://github.com/opencontainers/runc/issues/new).\n* Email us at <security@opencontainers.org>.\n",
                "markdown": "> ### Impact\nContrary to the [OCI runtime specification](https://github.com/opencontainers/runtime-spec/blob/v1.0.2/config-linux.md#device-whitelist), `runc`'s implementation of the `linux.resources.devices` list was a black-list by default. This means that users who created their own `config.json` objects and didn't prefix a deny-all rule (`{\"allow\": false, \"permissions\": \"rwm\"}` or equivalent) were not provided protection by the `devices` cgroup. This would allow malicious containers (with sufficient privileges) to create arbitrary device inodes (assuming they have `CAP_MKNOD`) and operate on any device inodes they may have access to (assuming they have regular Unix DAC permissions).\n\nHowever, most (if not all) programs that make use of `runc` include this deny-all rule. This was most likely added before the specification mandated a white-list of devices, and the fact that all programs wrote their own deny-all rule obscured the existence of this bug for several years. In fact, even the specification's examples include a default deny-all rule! We therefore believe that while this is a security bug (and has been fixed as such), it was almost certainly not exploitable in the wild due to the inclusion of default deny-all rules by all known users of `runc` -- hence why this advisory has low severity.\n\n### Patches\nThis issue has been fixed in [a patch that was part of a larger rework of the devices cgroup code in runc](https://github.com/opencontainers/runc/pull/2391) -- which lead to the discovery of this security bug. Users should upgrade to 1.0.0-rc91 as soon as it is released, or wait for your distribution to backport the relevant fixes.\n\n### Workarounds\nIf you are using `runc` directly, ensure that there is a deny-all entry at the beginning of `linux.resources.devices` -- such an entry would look like `{\"allow\": false, \"permissions\": \"rwm\"}` (all other fields are ignored, though `type` must be set to `\"a\"` or `null` if it is present).\n\nUsers which consume `runc` through another program should check whether their containers are operating under a white-list -- this can be done by reading `/sys/fs/cgroup/devices/devices.list` inside the container. If the file contains only the entry `a *:* rwm` (meaning the cgroup is in black-list mode, which likely means \"allow all device access\") then your containers are vulnerable to this issue.\n\nAs always, we recommend **in the strongest possible terms** that all of our users enable user namespaces on all of their workloads (or pressure their vendors to do so). User namespaces are one of the most significant defense-in-depth protections you can enable for containers, and have prevented many container-related vulnerabilities (both kernel 0days as well as bugs in container runtimes, such as this one).\n\n### References\n* https://www.kernel.org/doc/html/latest/admin-guide/cgroup-v1/devices.html\n* [opencontainers/runtime-spec/config-linux.md#device-whitelist](https://github.com/opencontainers/runtime-spec/blob/v1.0.2/config-linux.md#device-whitelist)\n* https://github.com/opencontainers/runc/pull/2391\n\n### For more information\nIf you have any questions or comments about this advisory:\n* [Open an issue in this repo](https://github.com/opencontainers/runc/issues/new).\n* Email us at <security@opencontainers.org>.\n\n|                |                                                                             |\n|----------------|-----------------------------------------------------------------------------|\n| Package        | pkg:golang/github.com/opencontainers/runc@0.0.0-20161109192122-51371867a01c |\n| Affected range | <0.0.0-20200630152430-24a3cf88a7ae                                          |\n| Fixed version  | 0.0.0-20200630152430-24a3cf88a7ae                                           |\n"
              },
              "properties": {
                "affected_version": "<0.0.0-20200630152430-24a3cf88a7ae",
                "cvssV3_severity": "LOW",
                "fixed_version": "0.0.0-20200630152430-24a3cf88a7ae",
                "purls": [
                  "pkg:golang/github.com/opencontainers/runc@0.0.0-20161109192122-51371867a01c"
                ],
                "security-severity": "3.1",
                "tags": [
                  "LOW"
                ]
              }
            },
            {
              "id": "CVE-2023-25809",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-25809: Improper Preservation of Permissions"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-25809?s=github&n=runc&ns=github.com%2Fopencontainers&t=golang&vr=%3C0.0.0-20230329064553-f19387a6bec4",
              "help": {
                "text": "### Impact\nIt was found that rootless runc makes `/sys/fs/cgroup` writable in following conditons:\n1. when runc is executed inside the user namespace, and the `config.json` does not specify the cgroup namespace to be unshared (e.g.., `(docker|podman|nerdctl) run --cgroupns=host`, with Rootless Docker/Podman/nerdctl)\n2. or, when runc is executed outside the user namespace, and `/sys` is mounted with `rbind, ro` (e.g., `runc spec --rootless`; this condition is very rare)\n\nA container may gain the write access to user-owned cgroup hierarchy `/sys/fs/cgroup/user.slice/...` on the host .\nOther users's cgroup hierarchies are not affected.\n\n### Patches\nv1.1.5 (planned)\n\n### Workarounds\n- Condition 1: Unshare the cgroup namespace (`(docker|podman|nerdctl) run --cgroupns=private)`. This is the default behavior of Docker/Podman/nerdctl on cgroup v2 hosts.\n- Condition 2 (very rare): add `/sys/fs/cgroup` to `maskedPaths`\n\n",
                "markdown": "> ### Impact\nIt was found that rootless runc makes `/sys/fs/cgroup` writable in following conditons:\n1. when runc is executed inside the user namespace, and the `config.json` does not specify the cgroup namespace to be unshared (e.g.., `(docker|podman|nerdctl) run --cgroupns=host`, with Rootless Docker/Podman/nerdctl)\n2. or, when runc is executed outside the user namespace, and `/sys` is mounted with `rbind, ro` (e.g., `runc spec --rootless`; this condition is very rare)\n\nA container may gain the write access to user-owned cgroup hierarchy `/sys/fs/cgroup/user.slice/...` on the host .\nOther users's cgroup hierarchies are not affected.\n\n### Patches\nv1.1.5 (planned)\n\n### Workarounds\n- Condition 1: Unshare the cgroup namespace (`(docker|podman|nerdctl) run --cgroupns=private)`. This is the default behavior of Docker/Podman/nerdctl on cgroup v2 hosts.\n- Condition 2 (very rare): add `/sys/fs/cgroup` to `maskedPaths`\n\n\n|                |                                                                             |\n|----------------|-----------------------------------------------------------------------------|\n| Package        | pkg:golang/github.com/opencontainers/runc@0.0.0-20161109192122-51371867a01c |\n| Affected range | <0.0.0-20230329064553-f19387a6bec4                                          |\n| Fixed version  | 0.0.0-20230329064553-f19387a6bec4                                           |\n| CVSS Score     |                                                                         2.5 |\n| CVSS Vector    | CVSS:3.1/AV:L/AC:H/PR:H/UI:N/S:C/C:N/I:N/A:L                                |\n"
              },
              "properties": {
                "affected_version": "<0.0.0-20230329064553-f19387a6bec4",
                "cvssV3": 2.5,
                "cvssV3_severity": "LOW",
                "cvssV3_vector": "CVSS:3.1/AV:L/AC:H/PR:H/UI:N/S:C/C:N/I:N/A:L",
                "fixed_version": "0.0.0-20230329064553-f19387a6bec4",
                "purls": [
                  "pkg:golang/github.com/opencontainers/runc@0.0.0-20161109192122-51371867a01c"
                ],
                "security-severity": "2.5",
                "tags": [
                  "LOW"
                ]
              }
            },
            {
              "id": "GHSA-5j5w-g665-5m35",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "GHSA-5j5w-g665-5m35: Access of Resource Using Incompatible Type ('Type Confusion')"
              },
              "helpUri": "https://scout.docker.com/v/GHSA-5j5w-g665-5m35?s=github&n=containerd&ns=github.com%2Fcontainerd&t=golang&vr=%3C1.4.12",
              "help": {
                "text": "### Impact\n\nIn the OCI Distribution Specification version 1.0.0 and prior and in the OCI Image Specification version 1.0.1 and prior, manifest and index documents are ambiguous without an accompanying Content-Type HTTP header.  Versions of containerd prior to 1.4.12 and 1.5.8 treat the Content-Type header as trusted and deserialize the document according to that header.  If the Content-Type header changed between pulls of the same ambiguous document (with the same digest), the document may be interpreted differently, meaning that the digest alone is insufficient to unambiguously identify the content of the image.\n\n### Patches\n\nThis issue has been fixed in containerd 1.4.12 and 1.5.8.  Image pulls for manifests that contain a “manifests” field or indices which contain a “layers” field are rejected.\n\n### Workarounds\n\nEnsure you only pull images from trusted sources.\n\n### References\n\nhttps://github.com/opencontainers/distribution-spec/security/advisories/GHSA-mc8v-mgrf-8f4m\nhttps://github.com/opencontainers/image-spec/security/advisories/GHSA-77vh-xpmg-72qh\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [containerd](https://github.com/containerd/containerd/issues/new/choose)\n* Email us at [security@containerd.io](mailto:security@containerd.io)\n",
                "markdown": "> ### Impact\n\nIn the OCI Distribution Specification version 1.0.0 and prior and in the OCI Image Specification version 1.0.1 and prior, manifest and index documents are ambiguous without an accompanying Content-Type HTTP header.  Versions of containerd prior to 1.4.12 and 1.5.8 treat the Content-Type header as trusted and deserialize the document according to that header.  If the Content-Type header changed between pulls of the same ambiguous document (with the same digest), the document may be interpreted differently, meaning that the digest alone is insufficient to unambiguously identify the content of the image.\n\n### Patches\n\nThis issue has been fixed in containerd 1.4.12 and 1.5.8.  Image pulls for manifests that contain a “manifests” field or indices which contain a “layers” field are rejected.\n\n### Workarounds\n\nEnsure you only pull images from trusted sources.\n\n### References\n\nhttps://github.com/opencontainers/distribution-spec/security/advisories/GHSA-mc8v-mgrf-8f4m\nhttps://github.com/opencontainers/image-spec/security/advisories/GHSA-77vh-xpmg-72qh\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [containerd](https://github.com/containerd/containerd/issues/new/choose)\n* Email us at [security@containerd.io](mailto:security@containerd.io)\n\n|                |                                                   |\n|----------------|---------------------------------------------------|\n| Package        | pkg:golang/github.com/containerd/containerd@1.3.1 |\n| Affected range | <1.4.12                                           |\n| Fixed version  | 1.4.12                                            |\n| CVSS Score     |                                               3.0 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:N/I:L/A:N      |\n"
              },
              "properties": {
                "affected_version": "<1.4.12",
                "cvssV3": 3,
                "cvssV3_severity": "LOW",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:N/I:L/A:N",
                "fixed_version": "1.4.12",
                "purls": [
                  "pkg:golang/github.com/containerd/containerd@1.3.1"
                ],
                "security-severity": "3.0",
                "tags": [
                  "LOW"
                ]
              }
            },
            {
              "id": "GHSA-77vh-xpmg-72qh",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "GHSA-77vh-xpmg-72qh: Access of Resource Using Incompatible Type ('Type Confusion')"
              },
              "helpUri": "https://scout.docker.com/v/GHSA-77vh-xpmg-72qh?s=github&n=image-spec&ns=github.com%2Fopencontainers&t=golang&vr=%3C0.0.0-20211109170610-67d2d5658fe0",
              "help": {
                "text": "### Impact\nIn the OCI Image Specification version 1.0.1 and prior, manifest and index documents are not self-describing and documents with a single digest could be interpreted as either a manifest or an index.\n\n### Patches\nThe Image Specification will be updated to recommend that both manifest and index documents contain a `mediaType` field to identify the type of document.\nRelease [v1.0.2](https://github.com/opencontainers/image-spec/releases/tag/v1.0.2) includes these updates.\n\n### Workarounds\nSoftware attempting to deserialize an ambiguous document may reject the document if it contains both “manifests” and “layers” fields or “manifests” and “config” fields.\n\n### References\nhttps://github.com/opencontainers/distribution-spec/security/advisories/GHSA-mc8v-mgrf-8f4m\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in https://github.com/opencontainers/image-spec\n* Email us at [security@opencontainers.org](mailto:security@opencontainers.org)\n* https://github.com/opencontainers/image-spec/commits/v1.0.2\n\n",
                "markdown": "> ### Impact\nIn the OCI Image Specification version 1.0.1 and prior, manifest and index documents are not self-describing and documents with a single digest could be interpreted as either a manifest or an index.\n\n### Patches\nThe Image Specification will be updated to recommend that both manifest and index documents contain a `mediaType` field to identify the type of document.\nRelease [v1.0.2](https://github.com/opencontainers/image-spec/releases/tag/v1.0.2) includes these updates.\n\n### Workarounds\nSoftware attempting to deserialize an ambiguous document may reject the document if it contains both “manifests” and “layers” fields or “manifests” and “config” fields.\n\n### References\nhttps://github.com/opencontainers/distribution-spec/security/advisories/GHSA-mc8v-mgrf-8f4m\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in https://github.com/opencontainers/image-spec\n* Email us at [security@opencontainers.org](mailto:security@opencontainers.org)\n* https://github.com/opencontainers/image-spec/commits/v1.0.2\n\n\n|                |                                                                                   |\n|----------------|-----------------------------------------------------------------------------------|\n| Package        | pkg:golang/github.com/opencontainers/image-spec@0.0.0-20170515205857-f03dbe35d449 |\n| Affected range | <0.0.0-20211109170610-67d2d5658fe0                                                |\n| Fixed version  | 0.0.0-20211109170610-67d2d5658fe0                                                 |\n| CVSS Score     |                                                                               3.0 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:N/I:L/A:N                                      |\n"
              },
              "properties": {
                "affected_version": "<0.0.0-20211109170610-67d2d5658fe0",
                "cvssV3": 3,
                "cvssV3_severity": "LOW",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:N/I:L/A:N",
                "fixed_version": "0.0.0-20211109170610-67d2d5658fe0",
                "purls": [
                  "pkg:golang/github.com/opencontainers/image-spec@0.0.0-20170515205857-f03dbe35d449"
                ],
                "security-severity": "3.0",
                "tags": [
                  "LOW"
                ]
              }
            },
            {
              "id": "GHSA-qq97-vm5h-rrhg",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "GHSA-qq97-vm5h-rrhg: Access of Resource Using Incompatible Type ('Type Confusion')"
              },
              "helpUri": "https://scout.docker.com/v/GHSA-qq97-vm5h-rrhg?s=github&n=distribution&ns=github.com%2Fdocker&t=golang&vr=%3C2.8.0",
              "help": {
                "text": "### Impact\n\nSystems that rely on digest equivalence for image attestations may be vulnerable to type confusion.\n\n### Patches\n\nUpgrade to at least `v2.8.0-beta.1`  if you are running `v2.x` release. If you use the code from the `main` branch, update at least to the commit after [b59a6f827947f9e0e67df0cfb571046de4733586](https://github.com/distribution/distribution/commit/b59a6f827947f9e0e67df0cfb571046de4733586).\n\n### Workarounds\n\nThere is no way to work around this issue without patching.\n\n### References\n\nDue to [an oversight in the OCI Image Specification](https://github.com/opencontainers/image-spec/pull/411) that removed the embedded `mediaType` field from manifests, a maliciously crafted OCI Container Image can cause registry clients to parse the same image in two different ways without modifying the image’s digest by modifying the `Content-Type` header returned by a registry. This can invalidate a common pattern of relying on container image digests for equivalence.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in [distribution](https://github.com/distribution/distribution) \n* Open an issue in [distribution-spec](https://github.com/opencontainers/distribution-spec) \n* Email us at [cncf-distribution-security@lists.cncf.io](mailto:cncf-distribution-security@lists.cncf.io)\n\n",
                "markdown": "> ### Impact\n\nSystems that rely on digest equivalence for image attestations may be vulnerable to type confusion.\n\n### Patches\n\nUpgrade to at least `v2.8.0-beta.1`  if you are running `v2.x` release. If you use the code from the `main` branch, update at least to the commit after [b59a6f827947f9e0e67df0cfb571046de4733586](https://github.com/distribution/distribution/commit/b59a6f827947f9e0e67df0cfb571046de4733586).\n\n### Workarounds\n\nThere is no way to work around this issue without patching.\n\n### References\n\nDue to [an oversight in the OCI Image Specification](https://github.com/opencontainers/image-spec/pull/411) that removed the embedded `mediaType` field from manifests, a maliciously crafted OCI Container Image can cause registry clients to parse the same image in two different ways without modifying the image’s digest by modifying the `Content-Type` header returned by a registry. This can invalidate a common pattern of relying on container image digests for equivalence.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in [distribution](https://github.com/distribution/distribution) \n* Open an issue in [distribution-spec](https://github.com/opencontainers/distribution-spec) \n* Email us at [cncf-distribution-security@lists.cncf.io](mailto:cncf-distribution-security@lists.cncf.io)\n\n\n|                |                                                                         |\n|----------------|-------------------------------------------------------------------------|\n| Package        | pkg:golang/github.com/docker/distribution@2.7.1%!B(MISSING)incompatible |\n| Affected range | <2.8.0                                                                  |\n| Fixed version  | 2.8.0                                                                   |\n| CVSS Score     |                                                                     3.0 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:N/I:L/A:N                            |\n"
              },
              "properties": {
                "affected_version": "<2.8.0",
                "cvssV3": 3,
                "cvssV3_severity": "LOW",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:N/I:L/A:N",
                "fixed_version": "2.8.0",
                "purls": [
                  "pkg:golang/github.com/docker/distribution@2.7.1%2Bincompatible"
                ],
                "security-severity": "3.0",
                "tags": [
                  "LOW"
                ]
              }
            },
            {
              "id": "CVE-2022-30629",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-30629"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-30629?s=golang&n=stdlib&t=golang&vr=%3C1.17.11",
              "help": {
                "text": "An attacker can correlate a resumed TLS session with a previous connection.\n\nSession tickets generated by crypto/tls do not contain a randomly generated ticket_age_add, which allows an attacker that can observe TLS handshakes to correlate successive connections by comparing ticket ages during session resumption.\n",
                "markdown": "> An attacker can correlate a resumed TLS session with a previous connection.\n\nSession tickets generated by crypto/tls do not contain a randomly generated ticket_age_add, which allows an attacker that can observe TLS handshakes to correlate successive connections by comparing ticket ages during session resumption.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.17.11                 |\n| Fixed version  | 1.17.11                  |\n"
              },
              "properties": {
                "affected_version": "<1.17.11",
                "cvssV3_severity": "LOW",
                "fixed_version": "1.17.11",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "3.1",
                "tags": [
                  "LOW"
                ]
              }
            },
            {
              "id": "GHSA-7ww5-4wqc-m92c",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "GHSA-7ww5-4wqc-m92c"
              },
              "helpUri": "https://scout.docker.com/v/GHSA-7ww5-4wqc-m92c?s=github&n=containerd&ns=github.com%2Fcontainerd&t=golang&vr=%3C%3D1.6.25",
              "help": {
                "text": "# /sys/devices/virtual/powercap accessible by default to containers\n\nIntel's RAPL (Running Average Power Limit) feature, introduced by the Sandy Bridge microarchitecture, provides software insights into hardware energy consumption. To facilitate this, Intel introduced the powercap framework in Linux kernel 3.13, which reads values via relevant MSRs (model specific registers) and provides unprivileged userspace access via `sysfs`. As RAPL is an interface to access a hardware feature, it is only available when running on bare metal with the module compiled into the kernel.\n\nBy 2019, it was realized that in some cases unprivileged access to RAPL readings could be exploited as a power-based side-channel against security features including AES-NI (potentially inside a SGX enclave) and KASLR (kernel address space layout randomization). Also known as the [PLATYPUS attack](https://platypusattack.com/), Intel assigned [CVE-2020-8694](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8694) and [CVE-2020-8695](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8695), and AMD assigned [CVE-2020-12912](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-12912).\n\nSeveral mitigations were applied; Intel reduced the sampling resolution via a microcode update, and the Linux kernel [prevents access by non-root users](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=949dd0104c496fa7c14991a23c03c62e44637e71) since 5.10. However, this kernel-based mitigation does not apply to many container-based scenarios:\n* Unless using user namespaces, root inside a container has the same level of privilege as root outside the container, but with a slightly more narrow view of the system\n* `sysfs` is mounted inside containers read-only; however only read access is needed to carry out this attack on an unpatched CPU\n\nWhile this is not a direct vulnerability in container runtimes, defense in depth and safe defaults are valuable and preferred, especially as this poses a risk to multi-tenant container environments. This is provided by masking `/sys/devices/virtual/powercap` in the default mount configuration, and adding an additional set of rules to deny it in the default AppArmor profile.\n\nWhile `sysfs` is not the only way to read from the RAPL subsystem, other ways of accessing it require additional capabilities such as `CAP_SYS_RAWIO` which is not available to containers by default, or `perf` paranoia level less than 1, which is a non-default kernel tunable.\n\n## References\n\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8694\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8695\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-12912\n* https://platypusattack.com/\n* https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=949dd0104c496fa7c14991a23c03c62e44637e71\n* https://web.eece.maine.edu/~vweaver/projects/rapl/\n",
                "markdown": "> # /sys/devices/virtual/powercap accessible by default to containers\n\nIntel's RAPL (Running Average Power Limit) feature, introduced by the Sandy Bridge microarchitecture, provides software insights into hardware energy consumption. To facilitate this, Intel introduced the powercap framework in Linux kernel 3.13, which reads values via relevant MSRs (model specific registers) and provides unprivileged userspace access via `sysfs`. As RAPL is an interface to access a hardware feature, it is only available when running on bare metal with the module compiled into the kernel.\n\nBy 2019, it was realized that in some cases unprivileged access to RAPL readings could be exploited as a power-based side-channel against security features including AES-NI (potentially inside a SGX enclave) and KASLR (kernel address space layout randomization). Also known as the [PLATYPUS attack](https://platypusattack.com/), Intel assigned [CVE-2020-8694](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8694) and [CVE-2020-8695](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8695), and AMD assigned [CVE-2020-12912](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-12912).\n\nSeveral mitigations were applied; Intel reduced the sampling resolution via a microcode update, and the Linux kernel [prevents access by non-root users](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=949dd0104c496fa7c14991a23c03c62e44637e71) since 5.10. However, this kernel-based mitigation does not apply to many container-based scenarios:\n* Unless using user namespaces, root inside a container has the same level of privilege as root outside the container, but with a slightly more narrow view of the system\n* `sysfs` is mounted inside containers read-only; however only read access is needed to carry out this attack on an unpatched CPU\n\nWhile this is not a direct vulnerability in container runtimes, defense in depth and safe defaults are valuable and preferred, especially as this poses a risk to multi-tenant container environments. This is provided by masking `/sys/devices/virtual/powercap` in the default mount configuration, and adding an additional set of rules to deny it in the default AppArmor profile.\n\nWhile `sysfs` is not the only way to read from the RAPL subsystem, other ways of accessing it require additional capabilities such as `CAP_SYS_RAWIO` which is not available to containers by default, or `perf` paranoia level less than 1, which is a non-default kernel tunable.\n\n## References\n\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8694\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8695\n* https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-12912\n* https://platypusattack.com/\n* https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=949dd0104c496fa7c14991a23c03c62e44637e71\n* https://web.eece.maine.edu/~vweaver/projects/rapl/\n\n|                |                                                   |\n|----------------|---------------------------------------------------|\n| Package        | pkg:golang/github.com/containerd/containerd@1.3.1 |\n| Affected range | <=1.6.25                                          |\n| Fixed version  | 1.6.26                                            |\n"
              },
              "properties": {
                "affected_version": "<=1.6.25",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.6.26",
                "purls": [
                  "pkg:golang/github.com/containerd/containerd@1.3.1"
                ],
                "security-severity": "4.1",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2020-8565",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-8565: Insertion of Sensitive Information into Log File"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2020-8565?s=github&n=client-go&ns=k8s.io&t=golang&vr=%3C0.17.16",
              "help": {
                "text": "In Kubernetes, if the logging level is set to at least 9, authorization and bearer tokens will be written to log files. This can occur both in API server logs and client tool output like kubectl. This affects <= v1.19.5, <= v1.18.13, <= v1.17.15, < v1.20.0-alpha2.\n",
                "markdown": "> In Kubernetes, if the logging level is set to at least 9, authorization and bearer tokens will be written to log files. This can occur both in API server logs and client tool output like kubectl. This affects <= v1.19.5, <= v1.18.13, <= v1.17.15, < v1.20.0-alpha2.\n\n|                |                                              |\n|----------------|----------------------------------------------|\n| Package        | pkg:golang/k8s.io/client-go@0.17.2           |\n| Affected range | <0.17.16                                     |\n| Fixed version  | 0.20.0-alpha.2                               |\n| CVSS Score     |                                          4.7 |\n| CVSS Vector    | CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:N/A:N |\n"
              },
              "properties": {
                "affected_version": "<0.17.16",
                "cvssV3": 4.7,
                "cvssV3_severity": "MEDIUM",
                "cvssV3_vector": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:N/A:N",
                "fixed_version": "0.20.0-alpha.2",
                "purls": [
                  "pkg:golang/k8s.io/client-go@0.17.2"
                ],
                "security-severity": "4.7",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2021-44717",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-44717"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2021-44717?s=golang&n=stdlib&t=golang&vr=%3C1.16.12",
              "help": {
                "text": "When a Go program running on a Unix system is out of file descriptors and calls syscall.ForkExec (including indirectly by using the os/exec package), syscall.ForkExec can close file descriptor 0 as it fails. If this happens (or can be provoked) repeatedly, it can result in misdirected I/O such as writing network traffic intended for one connection to a different connection, or content intended for one file to a different one.\n\nFor users who cannot immediately update to the new release, the bug can be mitigated by raising the per-process file descriptor limit.\n",
                "markdown": "> When a Go program running on a Unix system is out of file descriptors and calls syscall.ForkExec (including indirectly by using the os/exec package), syscall.ForkExec can close file descriptor 0 as it fails. If this happens (or can be provoked) repeatedly, it can result in misdirected I/O such as writing network traffic intended for one connection to a different connection, or content intended for one file to a different one.\n\nFor users who cannot immediately update to the new release, the bug can be mitigated by raising the per-process file descriptor limit.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.16.12                 |\n| Fixed version  | 1.16.12                  |\n"
              },
              "properties": {
                "affected_version": "<1.16.12",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.16.12",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "4.8",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2021-32760",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-32760: Exposure of Resource to Wrong Sphere"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2021-32760?s=github&n=containerd&ns=github.com%2Fcontainerd&t=golang&vr=%3C1.4.8",
              "help": {
                "text": "## Impact\n\nA bug was found in containerd where pulling and extracting a specially-crafted container image can result in Unix file permission changes for existing files in the host’s filesystem.  Changes to file permissions can deny access to the expected owner of the file, widen access to others, or set extended bits like setuid, setgid, and sticky.  This bug does not directly allow files to be read, modified, or executed without an additional cooperating process.\n\n## Patches\n\nThis bug has been fixed in containerd 1.5.4 and 1.4.8.  Users should update to these versions as soon as they are released.  Running containers do not need to be restarted.\n\n## Workarounds\n\nEnsure you only pull images from trusted sources.\n\nLinux security modules (LSMs) like SELinux and AppArmor can limit the files potentially affected by this bug through policies and profiles that prevent containerd from interacting with unexpected files.\n\n## For more information\n\nIf you have any questions or comments about this advisory:\n\n* [Open an issue](https://github.com/containerd/containerd/issues/new/choose)\n* Email us at security@containerd.io if you think you’ve found a security bug.\n",
                "markdown": "> ## Impact\n\nA bug was found in containerd where pulling and extracting a specially-crafted container image can result in Unix file permission changes for existing files in the host’s filesystem.  Changes to file permissions can deny access to the expected owner of the file, widen access to others, or set extended bits like setuid, setgid, and sticky.  This bug does not directly allow files to be read, modified, or executed without an additional cooperating process.\n\n## Patches\n\nThis bug has been fixed in containerd 1.5.4 and 1.4.8.  Users should update to these versions as soon as they are released.  Running containers do not need to be restarted.\n\n## Workarounds\n\nEnsure you only pull images from trusted sources.\n\nLinux security modules (LSMs) like SELinux and AppArmor can limit the files potentially affected by this bug through policies and profiles that prevent containerd from interacting with unexpected files.\n\n## For more information\n\nIf you have any questions or comments about this advisory:\n\n* [Open an issue](https://github.com/containerd/containerd/issues/new/choose)\n* Email us at security@containerd.io if you think you’ve found a security bug.\n\n|                |                                                   |\n|----------------|---------------------------------------------------|\n| Package        | pkg:golang/github.com/containerd/containerd@1.3.1 |\n| Affected range | <1.4.8                                            |\n| Fixed version  | 1.4.8                                             |\n| CVSS Score     |                                               5.0 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:L/A:L      |\n"
              },
              "properties": {
                "affected_version": "<1.4.8",
                "cvssV3": 5,
                "cvssV3_severity": "MEDIUM",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:L/A:L",
                "fixed_version": "1.4.8",
                "purls": [
                  "pkg:golang/github.com/containerd/containerd@1.3.1"
                ],
                "security-severity": "5.0",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2020-15257",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-15257: Incorrect Resource Transfer Between Spheres"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2020-15257?s=github&n=containerd&ns=github.com%2Fcontainerd&t=golang&vr=%3C1.3.9",
              "help": {
                "text": "## Impact\n\nAccess controls for the shim’s API socket verified that the connecting process had an effective UID of 0, but did not otherwise restrict access to the abstract Unix domain socket. This would allow malicious containers running in the same network namespace as the shim, with an effective UID of 0 but otherwise reduced privileges, to cause new processes to be run with elevated privileges.\n\n### Specific Go Packages Affected\ngithub.com/containerd/containerd/cmd\n\n## Patches\n\nThis vulnerability has been fixed in containerd 1.3.9 and 1.4.3.  Users should update to these versions as soon as they are released.  It should be noted that containers started with an old version of containerd-shim should be stopped and restarted, as running containers will continue to be vulnerable even after an upgrade.\n\n## Workarounds\n\nIf you are not providing the ability for untrusted users to start containers in the same network namespace as the shim (typically the \"host\" network namespace, for example with `docker run --net=host` or `hostNetwork: true` in a Kubernetes pod) and run with an effective UID of 0, you are not vulnerable to this issue.\n\nIf you are running containers with a vulnerable configuration, you can deny access to all abstract sockets with AppArmor by adding a line similar to `deny unix addr=@**,` to your policy.\n\nIt is best practice to run containers with a reduced set of privileges, with a non-zero UID, and with isolated namespaces.  The containerd maintainers strongly advise against sharing namespaces with the host. Reducing the set of isolation mechanisms used for a container necessarily increases that container's privilege, regardless of what container runtime is used for running that container.\n\n## Credits\n\nThe containerd maintainers would like to thank Jeff Dileo of NCC Group for responsibly disclosing this issue in accordance with the [containerd security policy](https://github.com/containerd/project/blob/master/SECURITY.md) and for reviewing the patch.\n\n## For more information\n\nIf you have any questions or comments about this advisory:\n\n\n* [Open an issue](https://github.com/containerd/containerd/issues/new/choose)\n* Email us at security@containerd.io if you think you’ve found a security bug.\n",
                "markdown": "> ## Impact\n\nAccess controls for the shim’s API socket verified that the connecting process had an effective UID of 0, but did not otherwise restrict access to the abstract Unix domain socket. This would allow malicious containers running in the same network namespace as the shim, with an effective UID of 0 but otherwise reduced privileges, to cause new processes to be run with elevated privileges.\n\n### Specific Go Packages Affected\ngithub.com/containerd/containerd/cmd\n\n## Patches\n\nThis vulnerability has been fixed in containerd 1.3.9 and 1.4.3.  Users should update to these versions as soon as they are released.  It should be noted that containers started with an old version of containerd-shim should be stopped and restarted, as running containers will continue to be vulnerable even after an upgrade.\n\n## Workarounds\n\nIf you are not providing the ability for untrusted users to start containers in the same network namespace as the shim (typically the \"host\" network namespace, for example with `docker run --net=host` or `hostNetwork: true` in a Kubernetes pod) and run with an effective UID of 0, you are not vulnerable to this issue.\n\nIf you are running containers with a vulnerable configuration, you can deny access to all abstract sockets with AppArmor by adding a line similar to `deny unix addr=@**,` to your policy.\n\nIt is best practice to run containers with a reduced set of privileges, with a non-zero UID, and with isolated namespaces.  The containerd maintainers strongly advise against sharing namespaces with the host. Reducing the set of isolation mechanisms used for a container necessarily increases that container's privilege, regardless of what container runtime is used for running that container.\n\n## Credits\n\nThe containerd maintainers would like to thank Jeff Dileo of NCC Group for responsibly disclosing this issue in accordance with the [containerd security policy](https://github.com/containerd/project/blob/master/SECURITY.md) and for reviewing the patch.\n\n## For more information\n\nIf you have any questions or comments about this advisory:\n\n\n* [Open an issue](https://github.com/containerd/containerd/issues/new/choose)\n* Email us at security@containerd.io if you think you’ve found a security bug.\n\n|                |                                                   |\n|----------------|---------------------------------------------------|\n| Package        | pkg:golang/github.com/containerd/containerd@1.3.1 |\n| Affected range | <1.3.9                                            |\n| Fixed version  | 1.3.9                                             |\n| CVSS Score     |                                               5.2 |\n| CVSS Vector    | CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:N      |\n"
              },
              "properties": {
                "affected_version": "<1.3.9",
                "cvssV3": 5.2,
                "cvssV3_severity": "MEDIUM",
                "cvssV3_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:N",
                "fixed_version": "1.3.9",
                "purls": [
                  "pkg:golang/github.com/containerd/containerd@1.3.1"
                ],
                "security-severity": "5.2",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2020-14039",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-14039"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2020-14039?s=golang&n=stdlib&t=golang&vr=%3C1.13.13",
              "help": {
                "text": "On Windows, if VerifyOptions.Roots is nil, Certificate.Verify does not check the EKU requirements specified in VerifyOptions.KeyUsages. This may allow a certificate to be used for an unintended purpose.\n",
                "markdown": "> On Windows, if VerifyOptions.Roots is nil, Certificate.Verify does not check the EKU requirements specified in VerifyOptions.KeyUsages. This may allow a certificate to be used for an unintended purpose.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.13.13                 |\n| Fixed version  | 1.13.13                  |\n"
              },
              "properties": {
                "affected_version": "<1.13.13",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.13.13",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "5.3",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2021-33197",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-33197"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2021-33197?s=golang&n=stdlib&t=golang&vr=%3C1.15.13",
              "help": {
                "text": "ReverseProxy can be made to forward certain hop-by-hop headers, including Connection. If the target of the ReverseProxy is itself a reverse proxy, this lets an attacker drop arbitrary headers, including those set by the ReverseProxy.Director.\n",
                "markdown": "> ReverseProxy can be made to forward certain hop-by-hop headers, including Connection. If the target of the ReverseProxy is itself a reverse proxy, this lets an attacker drop arbitrary headers, including those set by the ReverseProxy.Director.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.15.13                 |\n| Fixed version  | 1.15.13                  |\n"
              },
              "properties": {
                "affected_version": "<1.15.13",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.15.13",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "5.3",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2022-29526",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-29526: Improper Privilege Management"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-29526?s=github&n=sys&ns=golang.org%2Fx&t=golang&vr=%3C0.0.0-20220412211240-33da011f77ad",
              "help": {
                "text": "Go before 1.17.10 and 1.18.x before 1.18.2 has Incorrect Privilege Reporting in syscall. When called with a non-zero flags parameter, the Faccessat function could incorrectly report that a file is accessible.\n\n### Specific Go Packages Affected\ngolang.org/x/sys/unix\n",
                "markdown": "> Go before 1.17.10 and 1.18.x before 1.18.2 has Incorrect Privilege Reporting in syscall. When called with a non-zero flags parameter, the Faccessat function could incorrectly report that a file is accessible.\n\n### Specific Go Packages Affected\ngolang.org/x/sys/unix\n\n|                |                                                               |\n|----------------|---------------------------------------------------------------|\n| Package        | pkg:golang/golang.org/x/sys@0.0.0-20190826190057-c7b8b68b1456 |\n| Affected range | <0.0.0-20220412211240-33da011f77ad                            |\n| Fixed version  | 0.0.0-20220412211240-33da011f77ad                             |\n| CVSS Score     |                                                           5.3 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N                  |\n"
              },
              "properties": {
                "affected_version": "<1.17.10",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.17.10",
                "purls": [
                  "pkg:golang/golang.org/x/sys@0.0.0-20190826190057-c7b8b68b1456",
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "5.3",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2022-41717",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41717"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-41717?s=golang&n=stdlib&t=golang&vr=%3C1.18.9",
              "help": {
                "text": "An attacker can cause excessive memory growth in a Go server accepting HTTP/2 requests.\n\nHTTP/2 server connections contain a cache of HTTP header keys sent by the client. While the total number of entries in this cache is capped, an attacker sending very large keys can cause the server to allocate approximately 64 MiB per open connection.\n",
                "markdown": "> An attacker can cause excessive memory growth in a Go server accepting HTTP/2 requests.\n\nHTTP/2 server connections contain a cache of HTTP header keys sent by the client. While the total number of entries in this cache is capped, an attacker sending very large keys can cause the server to allocate approximately 64 MiB per open connection.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.18.9                  |\n| Fixed version  | 1.18.9                   |\n"
              },
              "properties": {
                "affected_version": "<1.18.9",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.18.9",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "5.3",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2023-24532",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-24532"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-24532?s=golang&n=stdlib&t=golang&vr=%3C1.19.7",
              "help": {
                "text": "The ScalarMult and ScalarBaseMult methods of the P256 Curve may return an incorrect result if called with some specific unreduced scalars (a scalar larger than the order of the curve).\n\nThis does not impact usages of crypto/ecdsa or crypto/ecdh.\n",
                "markdown": "> The ScalarMult and ScalarBaseMult methods of the P256 Curve may return an incorrect result if called with some specific unreduced scalars (a scalar larger than the order of the curve).\n\nThis does not impact usages of crypto/ecdsa or crypto/ecdh.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.19.7                  |\n| Fixed version  | 1.19.7                   |\n"
              },
              "properties": {
                "affected_version": "<1.19.7",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.19.7",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "5.3",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2023-25173",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-25173: Improper Privilege Management"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-25173?s=github&n=containerd&ns=github.com%2Fcontainerd&t=golang&vr=%3C1.5.18",
              "help": {
                "text": "### Impact\n\nA bug was found in containerd where supplementary groups are not set up properly inside a container.  If an attacker has direct access to a container and manipulates their supplementary group access, they may be able to use supplementary group access to bypass primary group restrictions in some cases, potentially gaining access to sensitive information or gaining the ability to execute code in that container.\n\nDownstream applications that use the containerd client library may be affected as well.\n\n### Patches\nThis bug has been fixed in containerd v1.6.18 and v.1.5.18.  Users should update to these versions and recreate containers to resolve this issue.  Users who rely on a downstream application that uses containerd's client library should check that application for a separate advisory and instructions.\n\n### Workarounds\n\nEnsure that the `\"USER $USERNAME\"` Dockerfile instruction is not used.  Instead, set the container entrypoint to a value similar to `ENTRYPOINT [\"su\", \"-\", \"user\"]` to allow `su` to properly set up supplementary groups.\n\n### References\n\n- https://www.benthamsgaze.org/2022/08/22/vulnerability-in-linux-containers-investigation-and-mitigation/\n- Docker/Moby: CVE-2022-36109, fixed in Docker 20.10.18\n- CRI-O: CVE-2022-2995, fixed in CRI-O 1.25.0\n- Podman: CVE-2022-2989, fixed in Podman 3.0.1 and 4.2.0\n- Buildah: CVE-2022-2990, fixed in Buildah 1.27.1\n\nNote that CVE IDs apply to a particular implementation, even if an issue is common.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [containerd](https://github.com/containerd/containerd/issues/new/choose)\n* Email us at [security@containerd.io](mailto:security@containerd.io)\n\nTo report a security issue in containerd:\n* [Report a new vulnerability](https://github.com/containerd/containerd/security/advisories/new)\n* Email us at [security@containerd.io](mailto:security@containerd.io)\n",
                "markdown": "> ### Impact\n\nA bug was found in containerd where supplementary groups are not set up properly inside a container.  If an attacker has direct access to a container and manipulates their supplementary group access, they may be able to use supplementary group access to bypass primary group restrictions in some cases, potentially gaining access to sensitive information or gaining the ability to execute code in that container.\n\nDownstream applications that use the containerd client library may be affected as well.\n\n### Patches\nThis bug has been fixed in containerd v1.6.18 and v.1.5.18.  Users should update to these versions and recreate containers to resolve this issue.  Users who rely on a downstream application that uses containerd's client library should check that application for a separate advisory and instructions.\n\n### Workarounds\n\nEnsure that the `\"USER $USERNAME\"` Dockerfile instruction is not used.  Instead, set the container entrypoint to a value similar to `ENTRYPOINT [\"su\", \"-\", \"user\"]` to allow `su` to properly set up supplementary groups.\n\n### References\n\n- https://www.benthamsgaze.org/2022/08/22/vulnerability-in-linux-containers-investigation-and-mitigation/\n- Docker/Moby: CVE-2022-36109, fixed in Docker 20.10.18\n- CRI-O: CVE-2022-2995, fixed in CRI-O 1.25.0\n- Podman: CVE-2022-2989, fixed in Podman 3.0.1 and 4.2.0\n- Buildah: CVE-2022-2990, fixed in Buildah 1.27.1\n\nNote that CVE IDs apply to a particular implementation, even if an issue is common.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [containerd](https://github.com/containerd/containerd/issues/new/choose)\n* Email us at [security@containerd.io](mailto:security@containerd.io)\n\nTo report a security issue in containerd:\n* [Report a new vulnerability](https://github.com/containerd/containerd/security/advisories/new)\n* Email us at [security@containerd.io](mailto:security@containerd.io)\n\n|                |                                                   |\n|----------------|---------------------------------------------------|\n| Package        | pkg:golang/github.com/containerd/containerd@1.3.1 |\n| Affected range | <1.5.18                                           |\n| Fixed version  | 1.5.18                                            |\n| CVSS Score     |                                               5.3 |\n| CVSS Vector    | CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L      |\n"
              },
              "properties": {
                "affected_version": "<1.5.18",
                "cvssV3": 5.3,
                "cvssV3_severity": "MEDIUM",
                "cvssV3_vector": "CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
                "fixed_version": "1.5.18",
                "purls": [
                  "pkg:golang/github.com/containerd/containerd@1.3.1"
                ],
                "security-severity": "5.3",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2023-29409",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-29409"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-29409?s=golang&n=stdlib&t=golang&vr=%3C1.19.12",
              "help": {
                "text": "Extremely large RSA keys in certificate chains can cause a client/server to expend significant CPU time verifying signatures.\n\nWith fix, the size of RSA keys transmitted during handshakes is restricted to <= 8192 bits.\n\nBased on a survey of publicly trusted RSA keys, there are currently only three certificates in circulation with keys larger than this, and all three appear to be test certificates that are not actively deployed. It is possible there are larger keys in use in private PKIs, but we target the web PKI, so causing breakage here in the interests of increasing the default safety of users of crypto/tls seems reasonable.\n",
                "markdown": "> Extremely large RSA keys in certificate chains can cause a client/server to expend significant CPU time verifying signatures.\n\nWith fix, the size of RSA keys transmitted during handshakes is restricted to <= 8192 bits.\n\nBased on a survey of publicly trusted RSA keys, there are currently only three certificates in circulation with keys larger than this, and all three appear to be test certificates that are not actively deployed. It is possible there are larger keys in use in private PKIs, but we target the web PKI, so causing breakage here in the interests of increasing the default safety of users of crypto/tls seems reasonable.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.19.12                 |\n| Fixed version  | 1.19.12                  |\n"
              },
              "properties": {
                "affected_version": "<1.19.12",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.19.12",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "5.3",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2023-39326",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-39326"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-39326?s=golang&n=stdlib&t=golang&vr=%3C1.20.12",
              "help": {
                "text": "A malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body.\n\nA malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request.\n\nChunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small.\n",
                "markdown": "> A malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body.\n\nA malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request.\n\nChunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.20.12                 |\n| Fixed version  | 1.20.12                  |\n"
              },
              "properties": {
                "affected_version": "<1.20.12",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.20.12",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "5.3",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2023-44487",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-44487: Uncontrolled Resource Consumption"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-44487?s=github&n=grpc&ns=google.golang.org&t=golang&vr=%3C1.56.3",
              "help": {
                "text": "## HTTP/2 Rapid reset attack\nThe HTTP/2 protocol allows clients to indicate to the server that a previous stream should be canceled by sending a RST_STREAM frame. The protocol does not require the client and server to coordinate the cancellation in any way, the client may do it unilaterally. The client may also assume that the cancellation will take effect immediately when the server receives the RST_STREAM frame, before any other data from that TCP connection is processed.\n\nAbuse of this feature is called a Rapid Reset attack because it relies on the ability for an endpoint to send a RST_STREAM frame immediately after sending a request frame, which makes the other endpoint start working and then rapidly resets the request. The request is canceled, but leaves the HTTP/2 connection open. \n\nThe HTTP/2 Rapid Reset attack built on this capability is simple: The client opens a large number of streams at once as in the standard HTTP/2 attack, but rather than waiting for a response to each request stream from the server or proxy, the client cancels each request immediately.\n\nThe ability to reset streams immediately allows each connection to have an indefinite number of requests in flight. By explicitly canceling the requests, the attacker never exceeds the limit on the number of concurrent open streams. The number of in-flight requests is no longer dependent on the round-trip time (RTT), but only on the available network bandwidth.\n\nIn a typical HTTP/2 server implementation, the server will still have to do significant amounts of work for canceled requests, such as allocating new stream data structures, parsing the query and doing header decompression, and mapping the URL to a resource. For reverse proxy implementations, the request may be proxied to the backend server before the RST_STREAM frame is processed. The client on the other hand paid almost no costs for sending the requests. This creates an exploitable cost asymmetry between the server and the client.\n\nMultiple software artifacts implementing HTTP/2 are affected. This advisory was originally ingested from the `swift-nio-http2` repo advisory and their original conent follows.\n\n## swift-nio-http2 specific advisory\nswift-nio-http2 is vulnerable to a denial-of-service vulnerability in which a malicious client can create and then reset a large number of HTTP/2 streams in a short period of time. This causes swift-nio-http2 to commit to a large amount of expensive work which it then throws away, including creating entirely new `Channel`s to serve the traffic. This can easily overwhelm an `EventLoop` and prevent it from making forward progress.\n\nswift-nio-http2 1.28 contains a remediation for this issue that applies reset counter using a sliding window. This constrains the number of stream resets that may occur in a given window of time. Clients violating this limit will have their connections torn down. This allows clients to continue to cancel streams for legitimate reasons, while constraining malicious actors.\n",
                "markdown": "> ## HTTP/2 Rapid reset attack\nThe HTTP/2 protocol allows clients to indicate to the server that a previous stream should be canceled by sending a RST_STREAM frame. The protocol does not require the client and server to coordinate the cancellation in any way, the client may do it unilaterally. The client may also assume that the cancellation will take effect immediately when the server receives the RST_STREAM frame, before any other data from that TCP connection is processed.\n\nAbuse of this feature is called a Rapid Reset attack because it relies on the ability for an endpoint to send a RST_STREAM frame immediately after sending a request frame, which makes the other endpoint start working and then rapidly resets the request. The request is canceled, but leaves the HTTP/2 connection open. \n\nThe HTTP/2 Rapid Reset attack built on this capability is simple: The client opens a large number of streams at once as in the standard HTTP/2 attack, but rather than waiting for a response to each request stream from the server or proxy, the client cancels each request immediately.\n\nThe ability to reset streams immediately allows each connection to have an indefinite number of requests in flight. By explicitly canceling the requests, the attacker never exceeds the limit on the number of concurrent open streams. The number of in-flight requests is no longer dependent on the round-trip time (RTT), but only on the available network bandwidth.\n\nIn a typical HTTP/2 server implementation, the server will still have to do significant amounts of work for canceled requests, such as allocating new stream data structures, parsing the query and doing header decompression, and mapping the URL to a resource. For reverse proxy implementations, the request may be proxied to the backend server before the RST_STREAM frame is processed. The client on the other hand paid almost no costs for sending the requests. This creates an exploitable cost asymmetry between the server and the client.\n\nMultiple software artifacts implementing HTTP/2 are affected. This advisory was originally ingested from the `swift-nio-http2` repo advisory and their original conent follows.\n\n## swift-nio-http2 specific advisory\nswift-nio-http2 is vulnerable to a denial-of-service vulnerability in which a malicious client can create and then reset a large number of HTTP/2 streams in a short period of time. This causes swift-nio-http2 to commit to a large amount of expensive work which it then throws away, including creating entirely new `Channel`s to serve the traffic. This can easily overwhelm an `EventLoop` and prevent it from making forward progress.\n\nswift-nio-http2 1.28 contains a remediation for this issue that applies reset counter using a sliding window. This constrains the number of stream resets that may occur in a given window of time. Clients violating this limit will have their connections torn down. This allows clients to continue to cancel streams for legitimate reasons, while constraining malicious actors.\n\n|                |                                              |\n|----------------|----------------------------------------------|\n| Package        | pkg:golang/google.golang.org/grpc@1.22.1     |\n| Affected range | <1.56.3                                      |\n| Fixed version  | 1.56.3                                       |\n| CVSS Score     |                                          5.3 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L |\n"
              },
              "properties": {
                "affected_version": "<1.56.3",
                "cvssV3": 5.3,
                "cvssV3_severity": "MEDIUM",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
                "fixed_version": "1.56.3",
                "purls": [
                  "pkg:golang/google.golang.org/grpc@1.22.1"
                ],
                "security-severity": "5.3",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2023-45284",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-45284"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-45284?s=golang&n=stdlib&t=golang&vr=%3C1.20.11",
              "help": {
                "text": "On Windows, The IsLocal function does not correctly detect reserved device names in some cases.\n\nReserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local.\n\nWith fix, IsLocal now correctly reports these names as non-local.\n",
                "markdown": "> On Windows, The IsLocal function does not correctly detect reserved device names in some cases.\n\nReserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local.\n\nWith fix, IsLocal now correctly reports these names as non-local.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.20.11                 |\n| Fixed version  | 1.20.11                  |\n"
              },
              "properties": {
                "affected_version": "<1.20.11",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.20.11",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "5.3",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2021-41092",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-41092: Exposure of Sensitive Information to an Unauthorized Actor"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2021-41092?s=github&n=cli&ns=github.com%2Fdocker&t=golang&vr=%3C0.0.0-20210923182634-c2ea9bc90bac",
              "help": {
                "text": "## Impact\n\nA bug was found in the Docker CLI where running `docker login my-private-registry.example.com` with a misconfigured configuration file (typically `~/.docker/config.json`) listing a `credsStore` or `credHelpers` that could not be executed would result in any provided credentials being sent to `registry-1.docker.io` rather than the intended private registry.\n\n## Patches\n\nThis bug has been fixed in Docker CLI 20.10.9.  Users should update to this version as soon as possible.\n\n## Workarounds\n\nEnsure that any configured `credsStore` or `credHelpers` entries in the configuration file reference an installed credential helper that is executable and on the `PATH`.\n\n## For more information\n\nIf you have any questions or comments about this advisory:\n\n* [Open an issue](https://github.com/docker/cli/issues/new/choose)\n* Email us at security@docker.com if you think you’ve found a security bug\n",
                "markdown": "> ## Impact\n\nA bug was found in the Docker CLI where running `docker login my-private-registry.example.com` with a misconfigured configuration file (typically `~/.docker/config.json`) listing a `credsStore` or `credHelpers` that could not be executed would result in any provided credentials being sent to `registry-1.docker.io` rather than the intended private registry.\n\n## Patches\n\nThis bug has been fixed in Docker CLI 20.10.9.  Users should update to this version as soon as possible.\n\n## Workarounds\n\nEnsure that any configured `credsStore` or `credHelpers` entries in the configuration file reference an installed credential helper that is executable and on the `PATH`.\n\n## For more information\n\nIf you have any questions or comments about this advisory:\n\n* [Open an issue](https://github.com/docker/cli/issues/new/choose)\n* Email us at security@docker.com if you think you’ve found a security bug\n\n|                |                                                                    |\n|----------------|--------------------------------------------------------------------|\n| Package        | pkg:golang/github.com/docker/cli@0.0.0-20191126203649-54d085b857e9 |\n| Affected range | <0.0.0-20210923182634-c2ea9bc90bac                                 |\n| Fixed version  | 0.0.0-20210923182634-c2ea9bc90bac                                  |\n| CVSS Score     |                                                                5.4 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:H/PR:H/UI:R/S:C/C:H/I:N/A:N                       |\n"
              },
              "properties": {
                "affected_version": "<0.0.0-20210923182634-c2ea9bc90bac",
                "cvssV3": 5.4,
                "cvssV3_severity": "MEDIUM",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:H/PR:H/UI:R/S:C/C:H/I:N/A:N",
                "fixed_version": "0.0.0-20210923182634-c2ea9bc90bac",
                "purls": [
                  "pkg:golang/github.com/docker/cli@0.0.0-20191126203649-54d085b857e9"
                ],
                "security-severity": "5.4",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2022-1962",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-1962"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-1962?s=golang&n=stdlib&t=golang&vr=%3C1.17.12",
              "help": {
                "text": "Calling any of the Parse functions on Go source code which contains deeply nested types or declarations can cause a panic due to stack exhaustion.\n",
                "markdown": "> Calling any of the Parse functions on Go source code which contains deeply nested types or declarations can cause a panic due to stack exhaustion.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.17.12                 |\n| Fixed version  | 1.17.12                  |\n"
              },
              "properties": {
                "affected_version": "<1.17.12",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.17.12",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "5.5",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2022-31030",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-31030: Uncontrolled Resource Consumption"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-31030?s=github&n=containerd&ns=github.com%2Fcontainerd&t=golang&vr=%3C1.5.13",
              "help": {
                "text": "### Impact\n\nA bug was found in containerd's CRI implementation where programs inside a container can cause the containerd daemon to consume memory without bound during invocation of the `ExecSync` API.  This can cause containerd to consume all available memory on the computer, denying service to other legitimate workloads.  Kubernetes and crictl can both be configured to use containerd's CRI implementation; `ExecSync` may be used when running probes or when executing processes via an \"exec\" facility.\n\n### Patches\n\nThis bug has been fixed in containerd 1.6.6 and 1.5.13.  Users should update to these versions to resolve the issue.\n\n### Workarounds\n\nEnsure that only trusted images and commands are used. \n\n### References\n\n* Similar fix in cri-o's CRI implementation https://github.com/cri-o/cri-o/security/advisories/GHSA-fcm2-6c3h-pg6j\n\n### Credits\n\nThe containerd project would like to thank David Korczynski and Adam Korczynski of ADA Logics for responsibly disclosing this issue in accordance with the [containerd security policy](https://github.com/containerd/project/blob/main/SECURITY.md) during a security audit sponsored by CNCF and facilitated by OSTIF.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [containerd](https://github.com/containerd/containerd/issues/new/choose)\n* Email us at [security@containerd.io](mailto:security@containerd.io)\n",
                "markdown": "> ### Impact\n\nA bug was found in containerd's CRI implementation where programs inside a container can cause the containerd daemon to consume memory without bound during invocation of the `ExecSync` API.  This can cause containerd to consume all available memory on the computer, denying service to other legitimate workloads.  Kubernetes and crictl can both be configured to use containerd's CRI implementation; `ExecSync` may be used when running probes or when executing processes via an \"exec\" facility.\n\n### Patches\n\nThis bug has been fixed in containerd 1.6.6 and 1.5.13.  Users should update to these versions to resolve the issue.\n\n### Workarounds\n\nEnsure that only trusted images and commands are used. \n\n### References\n\n* Similar fix in cri-o's CRI implementation https://github.com/cri-o/cri-o/security/advisories/GHSA-fcm2-6c3h-pg6j\n\n### Credits\n\nThe containerd project would like to thank David Korczynski and Adam Korczynski of ADA Logics for responsibly disclosing this issue in accordance with the [containerd security policy](https://github.com/containerd/project/blob/main/SECURITY.md) during a security audit sponsored by CNCF and facilitated by OSTIF.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [containerd](https://github.com/containerd/containerd/issues/new/choose)\n* Email us at [security@containerd.io](mailto:security@containerd.io)\n\n|                |                                                   |\n|----------------|---------------------------------------------------|\n| Package        | pkg:golang/github.com/containerd/containerd@1.3.1 |\n| Affected range | <1.5.13                                           |\n| Fixed version  | 1.5.13                                            |\n| CVSS Score     |                                               5.5 |\n| CVSS Vector    | CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H      |\n"
              },
              "properties": {
                "affected_version": "<1.5.13",
                "cvssV3": 5.5,
                "cvssV3_severity": "MEDIUM",
                "cvssV3_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
                "fixed_version": "1.5.13",
                "purls": [
                  "pkg:golang/github.com/containerd/containerd@1.3.1"
                ],
                "security-severity": "5.5",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2023-25153",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-25153: Uncontrolled Resource Consumption"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-25153?s=github&n=containerd&ns=github.com%2Fcontainerd&t=golang&vr=%3C1.5.18",
              "help": {
                "text": "### Impact\n\nWhen importing an OCI image, there was no limit on the number of bytes read for certain files. A maliciously crafted image with a large file where a limit was not applied could cause a denial of service.\n\n### Patches\n\nThis bug has been fixed in containerd 1.6.18 and 1.5.18.  Users should update to these versions to resolve the issue.\n\n### Workarounds\n\nEnsure that only trusted images are used and that only trusted users have permissions to import images. \n\n### Credits\n\nThe containerd project would like to thank [David Korczynski](https://github.com/DavidKorczynski) and [Adam Korczynski](https://github.com/AdamKorcz) of ADA Logics for responsibly disclosing this issue in accordance with the [containerd security policy](https://github.com/containerd/project/blob/main/SECURITY.md) during a security fuzzing audit sponsored by CNCF.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [containerd](https://github.com/containerd/containerd/issues/new/choose)\n* Email us at [security@containerd.io](mailto:security@containerd.io)\n\nTo report a security issue in containerd:\n* [Report a new vulnerability](https://github.com/containerd/containerd/security/advisories/new)\n* Email us at [security@containerd.io](mailto:security@containerd.io)\n",
                "markdown": "> ### Impact\n\nWhen importing an OCI image, there was no limit on the number of bytes read for certain files. A maliciously crafted image with a large file where a limit was not applied could cause a denial of service.\n\n### Patches\n\nThis bug has been fixed in containerd 1.6.18 and 1.5.18.  Users should update to these versions to resolve the issue.\n\n### Workarounds\n\nEnsure that only trusted images are used and that only trusted users have permissions to import images. \n\n### Credits\n\nThe containerd project would like to thank [David Korczynski](https://github.com/DavidKorczynski) and [Adam Korczynski](https://github.com/AdamKorcz) of ADA Logics for responsibly disclosing this issue in accordance with the [containerd security policy](https://github.com/containerd/project/blob/main/SECURITY.md) during a security fuzzing audit sponsored by CNCF.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [containerd](https://github.com/containerd/containerd/issues/new/choose)\n* Email us at [security@containerd.io](mailto:security@containerd.io)\n\nTo report a security issue in containerd:\n* [Report a new vulnerability](https://github.com/containerd/containerd/security/advisories/new)\n* Email us at [security@containerd.io](mailto:security@containerd.io)\n\n|                |                                                   |\n|----------------|---------------------------------------------------|\n| Package        | pkg:golang/github.com/containerd/containerd@1.3.1 |\n| Affected range | <1.5.18                                           |\n| Fixed version  | 1.5.18                                            |\n| CVSS Score     |                                               5.5 |\n| CVSS Vector    | CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H      |\n"
              },
              "properties": {
                "affected_version": "<1.5.18",
                "cvssV3": 5.5,
                "cvssV3_severity": "MEDIUM",
                "cvssV3_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
                "fixed_version": "1.5.18",
                "purls": [
                  "pkg:golang/github.com/containerd/containerd@1.3.1"
                ],
                "security-severity": "5.5",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2022-23471",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23471: Uncontrolled Resource Consumption"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-23471?s=github&n=containerd&ns=github.com%2Fcontainerd&t=golang&vr=%3C1.5.16",
              "help": {
                "text": "### Impact\n\nA bug was found in containerd's CRI implementation where a user can exhaust memory on the host. In the CRI stream server, a goroutine is launched to handle terminal resize events if a TTY is requested. If the user's process fails to launch due to, for example, a faulty command, the goroutine will be stuck waiting to send without a receiver, resulting in a memory leak. Kubernetes and crictl can both be configured to use containerd's CRI implementation and the stream server is used for handling container IO.\n\n### Patches\n\nThis bug has been fixed in containerd 1.6.12 and 1.5.16.  Users should update to these versions to resolve the issue.\n\n### Workarounds\n\nEnsure that only trusted images and commands are used and that only trusted users have permissions to execute commands in running containers. \n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [containerd](https://github.com/containerd/containerd/issues/new/choose)\n* Email us at [security@containerd.io](mailto:security@containerd.io)\n\nTo report a security issue in containerd:\n* [Report a new vulnerability](https://github.com/containerd/containerd/security/advisories/new)\n* Email us at [security@containerd.io](mailto:security@containerd.io)\n",
                "markdown": "> ### Impact\n\nA bug was found in containerd's CRI implementation where a user can exhaust memory on the host. In the CRI stream server, a goroutine is launched to handle terminal resize events if a TTY is requested. If the user's process fails to launch due to, for example, a faulty command, the goroutine will be stuck waiting to send without a receiver, resulting in a memory leak. Kubernetes and crictl can both be configured to use containerd's CRI implementation and the stream server is used for handling container IO.\n\n### Patches\n\nThis bug has been fixed in containerd 1.6.12 and 1.5.16.  Users should update to these versions to resolve the issue.\n\n### Workarounds\n\nEnsure that only trusted images and commands are used and that only trusted users have permissions to execute commands in running containers. \n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [containerd](https://github.com/containerd/containerd/issues/new/choose)\n* Email us at [security@containerd.io](mailto:security@containerd.io)\n\nTo report a security issue in containerd:\n* [Report a new vulnerability](https://github.com/containerd/containerd/security/advisories/new)\n* Email us at [security@containerd.io](mailto:security@containerd.io)\n\n|                |                                                   |\n|----------------|---------------------------------------------------|\n| Package        | pkg:golang/github.com/containerd/containerd@1.3.1 |\n| Affected range | <1.5.16                                           |\n| Fixed version  | 1.5.16                                            |\n| CVSS Score     |                                               5.7 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:N/A:H      |\n"
              },
              "properties": {
                "affected_version": "<1.5.16",
                "cvssV3": 5.7,
                "cvssV3_severity": "MEDIUM",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:N/A:H",
                "fixed_version": "1.5.16",
                "purls": [
                  "pkg:golang/github.com/containerd/containerd@1.3.1"
                ],
                "security-severity": "5.7",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2020-15586",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-15586"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2020-15586?s=golang&n=stdlib&t=golang&vr=%3C1.13.13",
              "help": {
                "text": "HTTP servers where the Handler concurrently reads the request body and writes a response can encounter a data race and crash. The httputil.ReverseProxy Handler is affected.\n",
                "markdown": "> HTTP servers where the Handler concurrently reads the request body and writes a response can encounter a data race and crash. The httputil.ReverseProxy Handler is affected.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.13.13                 |\n| Fixed version  | 1.13.13                  |\n"
              },
              "properties": {
                "affected_version": "<1.13.13",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.13.13",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "5.9",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2021-31525",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-31525"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2021-31525?s=golang&n=stdlib&t=golang&vr=%3C1.15.12",
              "help": {
                "text": "A malicious HTTP server or client can cause the net/http client or server to panic.\n\nReadRequest and ReadResponse can hit an unrecoverable panic when reading a very large header (over 7MB on 64-bit architectures, or over 4MB on 32-bit ones). Transport and Client are vulnerable and the program can be made to crash by a malicious server. Server is not vulnerable by default, but can be if the default max header of 1MB is overridden by setting Server.MaxHeaderBytes to a higher value, in which case the program can be made to crash by a malicious client.\n\nThis also affects golang.org/x/net/http2/h2c and HeaderValuesContainsToken in golang.org/x/net/http/httpguts.\n",
                "markdown": "> A malicious HTTP server or client can cause the net/http client or server to panic.\n\nReadRequest and ReadResponse can hit an unrecoverable panic when reading a very large header (over 7MB on 64-bit architectures, or over 4MB on 32-bit ones). Transport and Client are vulnerable and the program can be made to crash by a malicious server. Server is not vulnerable by default, but can be if the default max header of 1MB is overridden by setting Server.MaxHeaderBytes to a higher value, in which case the program can be made to crash by a malicious client.\n\nThis also affects golang.org/x/net/http2/h2c and HeaderValuesContainsToken in golang.org/x/net/http/httpguts.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.15.12                 |\n| Fixed version  | 1.15.12                  |\n"
              },
              "properties": {
                "affected_version": "<0.0.0-20210428140749-89ef3d95e781",
                "cvssV3": 5.9,
                "cvssV3_severity": "MEDIUM",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
                "fixed_version": "0.0.0-20210428140749-89ef3d95e781",
                "purls": [
                  "pkg:golang/golang.org/x/net@0.0.0-20191126235420-ef20fe5d7933",
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "5.9",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2021-36221",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-36221"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2021-36221?s=golang&n=stdlib&t=golang&vr=%3C1.15.15",
              "help": {
                "text": "ReverseProxy can panic after encountering a problem copying a proxied response body.\n",
                "markdown": "> ReverseProxy can panic after encountering a problem copying a proxied response body.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.15.15                 |\n| Fixed version  | 1.15.15                  |\n"
              },
              "properties": {
                "affected_version": "<1.15.15",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.15.15",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "5.9",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2021-41103",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-41103: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2021-41103?s=github&n=containerd&ns=github.com%2Fcontainerd&t=golang&vr=%3C1.4.11",
              "help": {
                "text": "### Impact\nA bug was found in containerd where container root directories and some plugins had insufficiently restricted permissions, allowing otherwise unprivileged Linux users to traverse directory contents and execute programs. When containers included executable programs with extended permission bits (such as setuid), unprivileged Linux users could discover and execute those programs. When the UID of an unprivileged Linux user on the host collided with the file owner or group inside a container, the unprivileged Linux user on the host could discover, read, and modify those files.\n\n### Patches\nThis vulnerability has been fixed in containerd 1.4.11 and containerd 1.5.7. Users should update to these version when they are released and may restart containers or update directory permissions to mitigate the vulnerability.\n\n### Workarounds\nLimit access to the host to trusted users. Update directory permission on container bundles directories. \n\n### For more information\nIf you have any questions or comments about this advisory: \n* Open an issue in [github.com/containerd/containerd](https://github.com/containerd/containerd/issues/new/choose)\n* Email us at [security@containerd.io](mailto:security@containerd.io)\n\n",
                "markdown": "> ### Impact\nA bug was found in containerd where container root directories and some plugins had insufficiently restricted permissions, allowing otherwise unprivileged Linux users to traverse directory contents and execute programs. When containers included executable programs with extended permission bits (such as setuid), unprivileged Linux users could discover and execute those programs. When the UID of an unprivileged Linux user on the host collided with the file owner or group inside a container, the unprivileged Linux user on the host could discover, read, and modify those files.\n\n### Patches\nThis vulnerability has been fixed in containerd 1.4.11 and containerd 1.5.7. Users should update to these version when they are released and may restart containers or update directory permissions to mitigate the vulnerability.\n\n### Workarounds\nLimit access to the host to trusted users. Update directory permission on container bundles directories. \n\n### For more information\nIf you have any questions or comments about this advisory: \n* Open an issue in [github.com/containerd/containerd](https://github.com/containerd/containerd/issues/new/choose)\n* Email us at [security@containerd.io](mailto:security@containerd.io)\n\n\n|                |                                                   |\n|----------------|---------------------------------------------------|\n| Package        | pkg:golang/github.com/containerd/containerd@1.3.1 |\n| Affected range | <1.4.11                                           |\n| Fixed version  | 1.4.11                                            |\n| CVSS Score     |                                               5.9 |\n| CVSS Vector    | CVSS:3.0/AV:L/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L      |\n"
              },
              "properties": {
                "affected_version": "<1.4.11",
                "cvssV3": 5.9,
                "cvssV3_severity": "MEDIUM",
                "cvssV3_vector": "CVSS:3.0/AV:L/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
                "fixed_version": "1.4.11",
                "purls": [
                  "pkg:golang/github.com/containerd/containerd@1.3.1"
                ],
                "security-severity": "5.9",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2022-29162",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-29162: Incorrect Default Permissions"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-29162?s=github&n=runc&ns=github.com%2Fopencontainers&t=golang&vr=%3C0.0.0-20220505194949-a916309fff0f",
              "help": {
                "text": "### Impact\n\nA bug was found in runc where `runc exec --cap` executed processes with non-empty inheritable Linux process capabilities, creating an atypical Linux environment and enabling programs with inheritable file capabilities to elevate those capabilities to the permitted set during execve(2).\n\nThis bug did not affect the container security sandbox as the inheritable set never contained more capabilities than were included in the container's bounding set.\n\n### Patches\nThis bug has been fixed in runc 1.1.2. Users should update to this version as soon as possible.\n\nThis fix changes `runc exec --cap` behavior such that the additional capabilities granted to the process being executed (as specified via `--cap` arguments) do not include inheritable capabilities.\n\nIn addition, `runc spec` is changed to not set any inheritable capabilities in the created example OCI spec (`config.json`) file.\n\n### Credits\nThe opencontainers project would like to thank [Andrew G. Morgan](https://github.com/AndrewGMorgan) for responsibly disclosing this issue in accordance with the [opencontainers org security policy](https://github.com/opencontainers/.github/blob/master/SECURITY.md).\n\n### For more information\nIf you have any questions or comments about this advisory:\n\n* [Open an issue](https://github.com/opencontainers/runc/issues/new)\n* Email us at [security@opencontainers.org](mailto:security@opencontainers.org) if you think you’ve found a security bug\n",
                "markdown": "> ### Impact\n\nA bug was found in runc where `runc exec --cap` executed processes with non-empty inheritable Linux process capabilities, creating an atypical Linux environment and enabling programs with inheritable file capabilities to elevate those capabilities to the permitted set during execve(2).\n\nThis bug did not affect the container security sandbox as the inheritable set never contained more capabilities than were included in the container's bounding set.\n\n### Patches\nThis bug has been fixed in runc 1.1.2. Users should update to this version as soon as possible.\n\nThis fix changes `runc exec --cap` behavior such that the additional capabilities granted to the process being executed (as specified via `--cap` arguments) do not include inheritable capabilities.\n\nIn addition, `runc spec` is changed to not set any inheritable capabilities in the created example OCI spec (`config.json`) file.\n\n### Credits\nThe opencontainers project would like to thank [Andrew G. Morgan](https://github.com/AndrewGMorgan) for responsibly disclosing this issue in accordance with the [opencontainers org security policy](https://github.com/opencontainers/.github/blob/master/SECURITY.md).\n\n### For more information\nIf you have any questions or comments about this advisory:\n\n* [Open an issue](https://github.com/opencontainers/runc/issues/new)\n* Email us at [security@opencontainers.org](mailto:security@opencontainers.org) if you think you’ve found a security bug\n\n|                |                                                                             |\n|----------------|-----------------------------------------------------------------------------|\n| Package        | pkg:golang/github.com/opencontainers/runc@0.0.0-20161109192122-51371867a01c |\n| Affected range | <0.0.0-20220505194949-a916309fff0f                                          |\n| Fixed version  | 0.0.0-20220505194949-a916309fff0f                                           |\n| CVSS Score     |                                                                         5.9 |\n| CVSS Vector    | CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L                                |\n"
              },
              "properties": {
                "affected_version": "<0.0.0-20220505194949-a916309fff0f",
                "cvssV3": 5.9,
                "cvssV3_severity": "MEDIUM",
                "cvssV3_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L",
                "fixed_version": "0.0.0-20220505194949-a916309fff0f",
                "purls": [
                  "pkg:golang/github.com/opencontainers/runc@0.0.0-20161109192122-51371867a01c"
                ],
                "security-severity": "5.9",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2021-43784",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-43784: Integer Overflow or Wraparound"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2021-43784?s=github&n=runc&ns=github.com%2Fopencontainers&t=golang&vr=%3C0.0.0-20211203081737-f46b6ba2c931",
              "help": {
                "text": "### Impact\n\nIn runc, [netlink](https://www.man7.org/linux/man-pages/man7/netlink.7.html) is used internally as a serialization system for specifying the relevant container configuration to the C portion of our code (responsible for the based namespace setup of containers). In all versions of runc prior to 1.0.3, the encoder did not handle the possibility of an integer overflow in the 16-bit length field for the byte array attribute type, meaning that a large enough malicious byte array attribute could result in the length overflowing and the attribute contents being parsed as netlink messages for container configuration.\n\nThis vulnerability requires the attacker to have some control over the configuration of the container and would allow the attacker to bypass the namespace restrictions of the container by simply adding their own netlink payload which disables all namespaces.\n\nPrior to 9c444070ec7bb83995dbc0185da68284da71c554, in practice it was fairly difficult to specify an arbitrary-length netlink message with most container runtimes. The only user-controlled byte array was the namespace paths attributes which can be specified in runc's `config.json`, but as far as we can tell no container runtime gives raw access to that configuration setting -- and having raw access to that setting **would allow the attacker to disable namespace protections entirely anyway** (setting them to `/proc/1/ns/...` for instance). In addition, each namespace path is limited to 4096 bytes (with only 7 namespaces supported by runc at the moment) meaning that even with custom namespace paths it appears an attacker still cannot shove enough bytes into the netlink bytemsg in order to overflow the uint16 counter.\n\nHowever, out of an abundance of caution (given how old this bug is) we decided to treat it as a potentially exploitable vulnerability with a low severity. After 9c444070ec7bb83995dbc0185da68284da71c554 (which was not present in any release of runc prior to the discovery of this bug), all mount paths are included as a giant netlink message which means that this bug becomes significantly more exploitable in more reasonable threat scenarios.\n\nThe main users impacted are those who allow untrusted images with untrusted configurations to run on their machines (such as with shared cloud infrastructure), though as mentioned above it appears this bug was not practically exploitable on any released version of runc to date.\n\n### Patches\nThe patch for this is d72d057ba794164c3cce9451a00b72a78b25e1ae and runc 1.0.3 was released with this bug fixed.\n\n### Workarounds\nTo the extent this is exploitable, disallowing untrusted namespace paths in container configuration should eliminate all practical ways of exploiting this bug. It should be noted that untrusted namespace paths would allow the attacker to disable namespace protections entirely even in the absence of this bug.\n\n### References\n* commit d72d057ba794 (\"runc init: avoid netlink message length overflows\")\n* https://bugs.chromium.org/p/project-zero/issues/detail?id=2241\n\n### Credits\nThanks to Felix Wilhelm from Google Project Zero for discovering and reporting this vulnerability. In particular, the fact they found this vulnerability so quickly, before we made a 1.1 release of runc (which would've been vulnerable) was quite impressive.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [our repo](https://github.com/opencontainers/runc)\n\n",
                "markdown": "> ### Impact\n\nIn runc, [netlink](https://www.man7.org/linux/man-pages/man7/netlink.7.html) is used internally as a serialization system for specifying the relevant container configuration to the C portion of our code (responsible for the based namespace setup of containers). In all versions of runc prior to 1.0.3, the encoder did not handle the possibility of an integer overflow in the 16-bit length field for the byte array attribute type, meaning that a large enough malicious byte array attribute could result in the length overflowing and the attribute contents being parsed as netlink messages for container configuration.\n\nThis vulnerability requires the attacker to have some control over the configuration of the container and would allow the attacker to bypass the namespace restrictions of the container by simply adding their own netlink payload which disables all namespaces.\n\nPrior to 9c444070ec7bb83995dbc0185da68284da71c554, in practice it was fairly difficult to specify an arbitrary-length netlink message with most container runtimes. The only user-controlled byte array was the namespace paths attributes which can be specified in runc's `config.json`, but as far as we can tell no container runtime gives raw access to that configuration setting -- and having raw access to that setting **would allow the attacker to disable namespace protections entirely anyway** (setting them to `/proc/1/ns/...` for instance). In addition, each namespace path is limited to 4096 bytes (with only 7 namespaces supported by runc at the moment) meaning that even with custom namespace paths it appears an attacker still cannot shove enough bytes into the netlink bytemsg in order to overflow the uint16 counter.\n\nHowever, out of an abundance of caution (given how old this bug is) we decided to treat it as a potentially exploitable vulnerability with a low severity. After 9c444070ec7bb83995dbc0185da68284da71c554 (which was not present in any release of runc prior to the discovery of this bug), all mount paths are included as a giant netlink message which means that this bug becomes significantly more exploitable in more reasonable threat scenarios.\n\nThe main users impacted are those who allow untrusted images with untrusted configurations to run on their machines (such as with shared cloud infrastructure), though as mentioned above it appears this bug was not practically exploitable on any released version of runc to date.\n\n### Patches\nThe patch for this is d72d057ba794164c3cce9451a00b72a78b25e1ae and runc 1.0.3 was released with this bug fixed.\n\n### Workarounds\nTo the extent this is exploitable, disallowing untrusted namespace paths in container configuration should eliminate all practical ways of exploiting this bug. It should be noted that untrusted namespace paths would allow the attacker to disable namespace protections entirely even in the absence of this bug.\n\n### References\n* commit d72d057ba794 (\"runc init: avoid netlink message length overflows\")\n* https://bugs.chromium.org/p/project-zero/issues/detail?id=2241\n\n### Credits\nThanks to Felix Wilhelm from Google Project Zero for discovering and reporting this vulnerability. In particular, the fact they found this vulnerability so quickly, before we made a 1.1 release of runc (which would've been vulnerable) was quite impressive.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [our repo](https://github.com/opencontainers/runc)\n\n\n|                |                                                                             |\n|----------------|-----------------------------------------------------------------------------|\n| Package        | pkg:golang/github.com/opencontainers/runc@0.0.0-20161109192122-51371867a01c |\n| Affected range | <0.0.0-20211203081737-f46b6ba2c931                                          |\n| Fixed version  | 0.0.0-20211203081737-f46b6ba2c931                                           |\n| CVSS Score     |                                                                         6.0 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:L/I:L/A:L                                |\n"
              },
              "properties": {
                "affected_version": "<0.0.0-20211203081737-f46b6ba2c931",
                "cvssV3": 6,
                "cvssV3_severity": "MEDIUM",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:L/I:L/A:L",
                "fixed_version": "0.0.0-20211203081737-f46b6ba2c931",
                "purls": [
                  "pkg:golang/github.com/opencontainers/runc@0.0.0-20161109192122-51371867a01c"
                ],
                "security-severity": "6.0",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2020-24553",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-24553"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2020-24553?s=golang&n=stdlib&t=golang&vr=%3C1.14.8",
              "help": {
                "text": "When a Handler does not explicitly set the Content-Type header, the the package would default to “text/html”, which could cause a Cross-Site Scripting vulnerability if an attacker can control any part of the contents of a response.\n\nThe Content-Type header is now set based on the contents of the first Write using http.DetectContentType, which is consistent with the behavior of the net/http package.\n\nAlthough this protects some applications that validate the contents of uploaded files, not setting the Content-Type header explicitly on any attacker-controlled file is unsafe and should be avoided.\n",
                "markdown": "> When a Handler does not explicitly set the Content-Type header, the the package would default to “text/html”, which could cause a Cross-Site Scripting vulnerability if an attacker can control any part of the contents of a response.\n\nThe Content-Type header is now set based on the contents of the first Write using http.DetectContentType, which is consistent with the behavior of the net/http package.\n\nAlthough this protects some applications that validate the contents of uploaded files, not setting the Content-Type header explicitly on any attacker-controlled file is unsafe and should be avoided.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.14.8                  |\n| Fixed version  | 1.14.8                   |\n"
              },
              "properties": {
                "affected_version": "<1.14.8",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.14.8",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "6.1",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2023-28642",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-28642: Improper Preservation of Permissions"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-28642?s=github&n=runc&ns=github.com%2Fopencontainers&t=golang&vr=%3C0.0.0-20230329064553-f19387a6bec4",
              "help": {
                "text": "### Impact\nIt was found that AppArmor, and potentially SELinux, can be bypassed when `/proc` inside the container is symlinked with a specific mount configuration.\n\n### Patches\nFixed in runc v1.1.5, by prohibiting symlinked `/proc`: https://github.com/opencontainers/runc/pull/3785\n\nThis PR fixes CVE-2023-27561 as well.\n\n### Workarounds\nAvoid using an untrusted container image.\n\n\n",
                "markdown": "> ### Impact\nIt was found that AppArmor, and potentially SELinux, can be bypassed when `/proc` inside the container is symlinked with a specific mount configuration.\n\n### Patches\nFixed in runc v1.1.5, by prohibiting symlinked `/proc`: https://github.com/opencontainers/runc/pull/3785\n\nThis PR fixes CVE-2023-27561 as well.\n\n### Workarounds\nAvoid using an untrusted container image.\n\n\n\n|                |                                                                             |\n|----------------|-----------------------------------------------------------------------------|\n| Package        | pkg:golang/github.com/opencontainers/runc@0.0.0-20161109192122-51371867a01c |\n| Affected range | <0.0.0-20230329064553-f19387a6bec4                                          |\n| Fixed version  | 0.0.0-20230329064553-f19387a6bec4                                           |\n| CVSS Score     |                                                                         6.1 |\n| CVSS Vector    | CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:L                                |\n"
              },
              "properties": {
                "affected_version": "<0.0.0-20230329064553-f19387a6bec4",
                "cvssV3": 6.1,
                "cvssV3_severity": "MEDIUM",
                "cvssV3_vector": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:L",
                "fixed_version": "0.0.0-20230329064553-f19387a6bec4",
                "purls": [
                  "pkg:golang/github.com/opencontainers/runc@0.0.0-20161109192122-51371867a01c"
                ],
                "security-severity": "6.1",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2023-39318",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-39318"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-39318?s=golang&n=stdlib&t=golang&vr=%3C1.20.8",
              "help": {
                "text": "The html/template package does not properly handle HTML-like \"\" comment tokens, nor hashbang \"#!\" comment tokens, in <script> contexts. This may cause the template parser to improperly interpret the contents of <script> contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack.\n",
                "markdown": "> The html/template package does not properly handle HTML-like \"\" comment tokens, nor hashbang \"#!\" comment tokens, in <script> contexts. This may cause the template parser to improperly interpret the contents of <script> contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.20.8                  |\n| Fixed version  | 1.20.8                   |\n"
              },
              "properties": {
                "affected_version": "<1.20.8",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.20.8",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "6.1",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2023-39319",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-39319"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-39319?s=golang&n=stdlib&t=golang&vr=%3C1.20.8",
              "help": {
                "text": "The html/template package does not apply the proper rules for handling occurrences of \"<script\", \"<!--\", and \"</script\" within JS literals in <script> contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack.\n",
                "markdown": "> The html/template package does not apply the proper rules for handling occurrences of \"<script\", \"<!--\", and \"</script\" within JS literals in <script> contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.20.8                  |\n| Fixed version  | 1.20.8                   |\n"
              },
              "properties": {
                "affected_version": "<1.20.8",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.20.8",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "6.1",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2021-21334",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-21334: Exposure of Sensitive Information to an Unauthorized Actor"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2021-21334?s=github&n=containerd&ns=github.com%2Fcontainerd&t=golang&vr=%3C1.3.10",
              "help": {
                "text": "## Impact\n\nContainers launched through containerd's CRI implementation (through Kubernetes, crictl, or any other pod/container client that uses the containerd CRI service) that share the same image may receive incorrect environment variables, including values that are defined for other containers.  If the affected containers have different security contexts, this may allow sensitive information to be unintentionally shared.\n\nIf you are not using containerd’s CRI implementation (through one of the mechanisms described above), you are not vulnerable to this issue.\n\nIf you are not launching multiple containers or Kubernetes pods from the same image which have different environment variables, you are not vulnerable to this issue.\n\nIf you are not launching multiple containers or Kubernetes pods from the same image in rapid succession, you have reduced likelihood of being vulnerable to this issue\n\n## Patches\n\nThis vulnerability has been fixed in containerd 1.3.10 and containerd 1.4.4.  Users should update to these versions as soon as they are released.\n\n## Workarounds\n\nThere are no known workarounds.\n\n## For more information\n\nIf you have any questions or comments about this advisory:\n\n* [Open an issue](https://github.com/containerd/containerd/issues/new/choose)\n* Email us at security@containerd.io if you think you’ve found a security bug.\n",
                "markdown": "> ## Impact\n\nContainers launched through containerd's CRI implementation (through Kubernetes, crictl, or any other pod/container client that uses the containerd CRI service) that share the same image may receive incorrect environment variables, including values that are defined for other containers.  If the affected containers have different security contexts, this may allow sensitive information to be unintentionally shared.\n\nIf you are not using containerd’s CRI implementation (through one of the mechanisms described above), you are not vulnerable to this issue.\n\nIf you are not launching multiple containers or Kubernetes pods from the same image which have different environment variables, you are not vulnerable to this issue.\n\nIf you are not launching multiple containers or Kubernetes pods from the same image in rapid succession, you have reduced likelihood of being vulnerable to this issue\n\n## Patches\n\nThis vulnerability has been fixed in containerd 1.3.10 and containerd 1.4.4.  Users should update to these versions as soon as they are released.\n\n## Workarounds\n\nThere are no known workarounds.\n\n## For more information\n\nIf you have any questions or comments about this advisory:\n\n* [Open an issue](https://github.com/containerd/containerd/issues/new/choose)\n* Email us at security@containerd.io if you think you’ve found a security bug.\n\n|                |                                                   |\n|----------------|---------------------------------------------------|\n| Package        | pkg:golang/github.com/containerd/containerd@1.3.1 |\n| Affected range | <1.3.10                                           |\n| Fixed version  | 1.3.10                                            |\n| CVSS Score     |                                               6.3 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:N/A:N      |\n"
              },
              "properties": {
                "affected_version": "<1.3.10",
                "cvssV3": 6.3,
                "cvssV3_severity": "MEDIUM",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:N/A:N",
                "fixed_version": "1.3.10",
                "purls": [
                  "pkg:golang/github.com/containerd/containerd@1.3.1"
                ],
                "security-severity": "6.3",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2016-9962",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2016-9962: Exposure of Sensitive Information to an Unauthorized Actor"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2016-9962?s=github&n=runc&ns=github.com%2Fopencontainers&t=golang&vr=%3C0.0.0-20170321022603-75f8da7c889a",
              "help": {
                "text": "RunC allowed additional container processes via 'runc exec' to be ptraced by the pid 1 of the container.  This allows the main processes of the container, if running as root, to gain access to file-descriptors of these new processes during the initialization and can lead to container escapes or modification of runC state before the process is fully placed inside the container.\n",
                "markdown": "> RunC allowed additional container processes via 'runc exec' to be ptraced by the pid 1 of the container.  This allows the main processes of the container, if running as root, to gain access to file-descriptors of these new processes during the initialization and can lead to container escapes or modification of runC state before the process is fully placed inside the container.\n\n|                |                                                                             |\n|----------------|-----------------------------------------------------------------------------|\n| Package        | pkg:golang/github.com/opencontainers/runc@0.0.0-20161109192122-51371867a01c |\n| Affected range | <0.0.0-20170321022603-75f8da7c889a                                          |\n| Fixed version  | 0.0.0-20170321022603-75f8da7c889a                                           |\n| CVSS Score     |                                                                         6.4 |\n| CVSS Vector    | CVSS:3.0/AV:L/AC:H/PR:H/UI:N/S:U/C:H/I:H/A:H                                |\n"
              },
              "properties": {
                "affected_version": "<0.0.0-20170321022603-75f8da7c889a",
                "cvssV3": 6.4,
                "cvssV3_severity": "MEDIUM",
                "cvssV3_vector": "CVSS:3.0/AV:L/AC:H/PR:H/UI:N/S:U/C:H/I:H/A:H",
                "fixed_version": "0.0.0-20170321022603-75f8da7c889a",
                "purls": [
                  "pkg:golang/github.com/opencontainers/runc@0.0.0-20161109192122-51371867a01c"
                ],
                "security-severity": "6.4",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2019-11254",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2019-11254: Excessive Platform Resource Consumption within a Loop"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2019-11254?s=github&n=yaml.v2&ns=gopkg.in&t=golang&vr=%3C2.2.8",
              "help": {
                "text": "The Kubernetes API Server component in versions 1.1-1.14, and versions prior to 1.15.10, 1.16.7 and 1.17.3 allows an authorized user who sends malicious YAML payloads to cause the kube-apiserver to consume excessive CPU cycles while parsing YAML.\n",
                "markdown": "> The Kubernetes API Server component in versions 1.1-1.14, and versions prior to 1.15.10, 1.16.7 and 1.17.3 allows an authorized user who sends malicious YAML payloads to cause the kube-apiserver to consume excessive CPU cycles while parsing YAML.\n\n|                |                                              |\n|----------------|----------------------------------------------|\n| Package        | pkg:golang/gopkg.in/yaml.v2@2.2.4            |\n| Affected range | <2.2.8                                       |\n| Fixed version  | 2.2.8                                        |\n| CVSS Score     |                                          6.5 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H |\n"
              },
              "properties": {
                "affected_version": "<2.2.8",
                "cvssV3": 6.5,
                "cvssV3_severity": "MEDIUM",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
                "fixed_version": "2.2.8",
                "purls": [
                  "pkg:golang/gopkg.in/yaml.v2@2.2.4"
                ],
                "security-severity": "6.5",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2021-3114",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-3114"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2021-3114?s=golang&n=stdlib&t=golang&vr=%3C1.14.14",
              "help": {
                "text": "The P224() Curve implementation can in rare circumstances generate incorrect outputs, including returning invalid points from ScalarMult.\n",
                "markdown": "> The P224() Curve implementation can in rare circumstances generate incorrect outputs, including returning invalid points from ScalarMult.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.14.14                 |\n| Fixed version  | 1.14.14                  |\n"
              },
              "properties": {
                "affected_version": "<1.14.14",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.14.14",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "6.5",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2021-34558",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-34558"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2021-34558?s=golang&n=stdlib&t=golang&vr=%3C1.15.14",
              "help": {
                "text": "crypto/tls clients can panic when provided a certificate of the wrong type for the negotiated parameters. net/http clients performing HTTPS requests are also affected.\n",
                "markdown": "> crypto/tls clients can panic when provided a certificate of the wrong type for the negotiated parameters. net/http clients performing HTTPS requests are also affected.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.15.14                 |\n| Fixed version  | 1.15.14                  |\n"
              },
              "properties": {
                "affected_version": "<1.15.14",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.15.14",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "6.5",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2022-1705",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-1705"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-1705?s=golang&n=stdlib&t=golang&vr=%3C1.17.12",
              "help": {
                "text": "The HTTP/1 client accepted some invalid Transfer-Encoding headers as indicating a \"chunked\" encoding. This could potentially allow for request smuggling, but only if combined with an intermediate server that also improperly failed to reject the header as invalid.\n",
                "markdown": "> The HTTP/1 client accepted some invalid Transfer-Encoding headers as indicating a \"chunked\" encoding. This could potentially allow for request smuggling, but only if combined with an intermediate server that also improperly failed to reject the header as invalid.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.17.12                 |\n| Fixed version  | 1.17.12                  |\n"
              },
              "properties": {
                "affected_version": "<1.17.12",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.17.12",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "6.5",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2022-32148",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-32148"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-32148?s=golang&n=stdlib&t=golang&vr=%3C1.17.12",
              "help": {
                "text": "Client IP adresses may be unintentionally exposed via X-Forwarded-For headers.\n\nWhen httputil.ReverseProxy.ServeHTTP is called with a Request.Header map containing a nil value for the X-Forwarded-For header, ReverseProxy sets the client IP as the value of the X-Forwarded-For header, contrary to its documentation.\n\nIn the more usual case where a Director function sets the X-Forwarded-For header value to nil, ReverseProxy leaves the header unmodified as expected.\n",
                "markdown": "> Client IP adresses may be unintentionally exposed via X-Forwarded-For headers.\n\nWhen httputil.ReverseProxy.ServeHTTP is called with a Request.Header map containing a nil value for the X-Forwarded-For header, ReverseProxy sets the client IP as the value of the X-Forwarded-For header, contrary to its documentation.\n\nIn the more usual case where a Director function sets the X-Forwarded-For header value to nil, ReverseProxy leaves the header unmodified as expected.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.17.12                 |\n| Fixed version  | 1.17.12                  |\n"
              },
              "properties": {
                "affected_version": "<1.17.12",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.17.12",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "6.5",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2023-29406",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-29406"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-29406?s=golang&n=stdlib&t=golang&vr=%3C1.19.11",
              "help": {
                "text": "The HTTP/1 client does not fully validate the contents of the Host header. A maliciously crafted Host header can inject additional headers or entire requests.\n\nWith fix, the HTTP/1 client now refuses to send requests containing an invalid Request.Host or Request.URL.Host value.\n",
                "markdown": "> The HTTP/1 client does not fully validate the contents of the Host header. A maliciously crafted Host header can inject additional headers or entire requests.\n\nWith fix, the HTTP/1 client now refuses to send requests containing an invalid Request.Host or Request.URL.Host value.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.19.11                 |\n| Fixed version  | 1.19.11                  |\n"
              },
              "properties": {
                "affected_version": "<1.19.11",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.19.11",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "6.5",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2020-8559",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-8559: URL Redirection to Untrusted Site ('Open Redirect')"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2020-8559?s=github&n=apimachinery&ns=k8s.io&t=golang&vr=%3E%3D0.17.0%2C%3C0.17.9",
              "help": {
                "text": "The Kubernetes kube-apiserver in versions v1.6-v1.15, and versions prior to v1.16.13, v1.17.9 and v1.18.7 are vulnerable to an unvalidated redirect on proxied upgrade requests that could allow an attacker to escalate privileges from a node compromise to a full cluster compromise.\n",
                "markdown": "> The Kubernetes kube-apiserver in versions v1.6-v1.15, and versions prior to v1.16.13, v1.17.9 and v1.18.7 are vulnerable to an unvalidated redirect on proxied upgrade requests that could allow an attacker to escalate privileges from a node compromise to a full cluster compromise.\n\n|                |                                              |\n|----------------|----------------------------------------------|\n| Package        | pkg:golang/k8s.io/apimachinery@0.17.2        |\n| Affected range | >=0.17.0,<0.17.9                             |\n| Fixed version  | 0.17.9                                       |\n| CVSS Score     |                                          6.8 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:U/C:H/I:H/A:H |\n"
              },
              "properties": {
                "affected_version": ">=0.17.0,<0.17.9",
                "cvssV3": 6.8,
                "cvssV3_severity": "MEDIUM",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:U/C:H/I:H/A:H",
                "fixed_version": "0.17.9",
                "purls": [
                  "pkg:golang/k8s.io/apimachinery@0.17.2"
                ],
                "security-severity": "6.8",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2020-14040",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-14040: Uncontrolled Resource Consumption"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2020-14040?s=github&n=text&ns=golang.org%2Fx&t=golang&vr=%3C0.3.3",
              "help": {
                "text": "Go version v0.3.3 of the x/text package fixes a vulnerability in encoding/unicode that could lead to the UTF-16 decoder entering an infinite loop, causing the program to crash or run out of memory. An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to golang.org/x/text/transform.String.\n\n### Specific Go Packages Affected\ngolang.org/x/text/encoding/unicode\ngolang.org/x/text/transform\n",
                "markdown": "> Go version v0.3.3 of the x/text package fixes a vulnerability in encoding/unicode that could lead to the UTF-16 decoder entering an infinite loop, causing the program to crash or run out of memory. An attacker could provide a single byte to a UTF16 decoder instantiated with UseBOM or ExpectBOM to trigger an infinite loop if the String function on the Decoder is called, or the Decoder is passed to golang.org/x/text/transform.String.\n\n### Specific Go Packages Affected\ngolang.org/x/text/encoding/unicode\ngolang.org/x/text/transform\n\n|                |                                                            |\n|----------------|------------------------------------------------------------|\n| Package        | pkg:golang/golang.org/x/text@0.3.2                         |\n| Affected range | <0.3.3                                                     |\n| Fixed version  | 0.3.3                                                      |\n| CVSS Score     |                                                        7.5 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C |\n"
              },
              "properties": {
                "affected_version": "<0.3.3",
                "cvssV3": 7.5,
                "cvssV3_severity": "MEDIUM",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C",
                "fixed_version": "0.3.3",
                "purls": [
                  "pkg:golang/golang.org/x/text@0.3.2"
                ],
                "security-severity": "7.5",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2024-3154",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2024-3154: OWASP Top Ten 2017 Category A9 - Using Components with Known Vulnerabilities"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2024-3154?s=gitlab&n=runc&ns=github.com%2Fopencontainers&t=golang&vr=%3C0.0.0-20240403104324-275e6d85f78a",
              "help": {
                "text": "On CRI-O, an arbitrary systemd property can be injected via a Pod annotation:\n```\n---\napiVersion: v1\nkind: Pod\nmetadata:\nname: poc-arbitrary-systemd-property-injection\nannotations:\n",
                "markdown": "> On CRI-O, an arbitrary systemd property can be injected via a Pod annotation:\n```\n---\napiVersion: v1\nkind: Pod\nmetadata:\nname: poc-arbitrary-systemd-property-injection\nannotations:\n\n|                |                                                                             |\n|----------------|-----------------------------------------------------------------------------|\n| Package        | pkg:golang/github.com/opencontainers/runc@0.0.0-20161109192122-51371867a01c |\n| Affected range | <0.0.0-20240403104324-275e6d85f78a                                          |\n| Fixed version  | 0.0.0-20240403104324-275e6d85f78a                                           |\n| CVSS Score     |                                                                         7.2 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H                                |\n"
              },
              "properties": {
                "affected_version": "<0.0.0-20240403104324-275e6d85f78a",
                "cvssV3": 7.2,
                "cvssV3_severity": "HIGH",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
                "fixed_version": "0.0.0-20240403104324-275e6d85f78a",
                "purls": [
                  "pkg:golang/github.com/opencontainers/runc@0.0.0-20161109192122-51371867a01c"
                ],
                "security-severity": "7.2",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "GHSA-c5pj-mqfh-rvc3",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "GHSA-c5pj-mqfh-rvc3: OWASP Top Ten 2017 Category A9 - Using Components with Known Vulnerabilities"
              },
              "helpUri": "https://scout.docker.com/v/GHSA-c5pj-mqfh-rvc3?s=gitlab&n=runc&ns=github.com%2Fopencontainers&t=golang&vr=%3C0.0.0-20240403104324-275e6d85f78a",
              "help": {
                "text": "## Withdrawn Advisory\n\nThis advisory has been withdrawn because it was incorrectly attributed to runc. Please see the issue [here](https://github.com/opencontainers/runc/issues/4263) for more information.\n\n## Original Description\n\nA flaw was found in cri-o, where an arbitrary systemd property can be injected via a Pod annotation. Any user who can create a pod with an arbitrary annotation may perform an arbitrary action on the host system. This issue has its root in how runc handles Config Annotations lists.\n",
                "markdown": "> ## Withdrawn Advisory\n\nThis advisory has been withdrawn because it was incorrectly attributed to runc. Please see the issue [here](https://github.com/opencontainers/runc/issues/4263) for more information.\n\n## Original Description\n\nA flaw was found in cri-o, where an arbitrary systemd property can be injected via a Pod annotation. Any user who can create a pod with an arbitrary annotation may perform an arbitrary action on the host system. This issue has its root in how runc handles Config Annotations lists.\n\n|                |                                                                             |\n|----------------|-----------------------------------------------------------------------------|\n| Package        | pkg:golang/github.com/opencontainers/runc@0.0.0-20161109192122-51371867a01c |\n| Affected range | <0.0.0-20240403104324-275e6d85f78a                                          |\n| Fixed version  | 0.0.0-20240403104324-275e6d85f78a                                           |\n| CVSS Score     |                                                                         7.2 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H                                |\n"
              },
              "properties": {
                "affected_version": "<0.0.0-20240403104324-275e6d85f78a",
                "cvssV3": 7.2,
                "cvssV3_severity": "HIGH",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H",
                "fixed_version": "0.0.0-20240403104324-275e6d85f78a",
                "purls": [
                  "pkg:golang/github.com/opencontainers/runc@0.0.0-20161109192122-51371867a01c"
                ],
                "security-severity": "7.2",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2021-33195",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-33195"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2021-33195?s=golang&n=stdlib&t=golang&vr=%3C1.15.13",
              "help": {
                "text": "The LookupCNAME, LookupSRV, LookupMX, LookupNS, and LookupAddr functions and their respective methods on the Resolver type may return arbitrary values retrieved from DNS which do not follow the established RFC 1035 rules for domain names. If these names are used without further sanitization, for instance unsafely included in HTML, they may allow for injection of unexpected content. Note that LookupTXT may still return arbitrary values that could require sanitization before further use.\n",
                "markdown": "> The LookupCNAME, LookupSRV, LookupMX, LookupNS, and LookupAddr functions and their respective methods on the Resolver type may return arbitrary values retrieved from DNS which do not follow the established RFC 1035 rules for domain names. If these names are used without further sanitization, for instance unsafely included in HTML, they may allow for injection of unexpected content. Note that LookupTXT may still return arbitrary values that could require sanitization before further use.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.15.13                 |\n| Fixed version  | 1.15.13                  |\n"
              },
              "properties": {
                "affected_version": "<1.15.13",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.15.13",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.3",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2023-24539",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-24539"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-24539?s=golang&n=stdlib&t=golang&vr=%3C1.19.9",
              "help": {
                "text": "Angle brackets (<>) are not considered dangerous characters when inserted into CSS contexts. Templates containing multiple actions separated by a '/' character can result in unexpectedly closing the CSS context and allowing for injection of unexpected HTML, if executed with untrusted input.\n",
                "markdown": "> Angle brackets (<>) are not considered dangerous characters when inserted into CSS contexts. Templates containing multiple actions separated by a '/' character can result in unexpectedly closing the CSS context and allowing for injection of unexpected HTML, if executed with untrusted input.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.19.9                  |\n| Fixed version  | 1.19.9                   |\n"
              },
              "properties": {
                "affected_version": "<1.19.9",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.19.9",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.3",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2023-29400",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-29400"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-29400?s=golang&n=stdlib&t=golang&vr=%3C1.19.9",
              "help": {
                "text": "Templates containing actions in unquoted HTML attributes (e.g. \"attr={{.}}\") executed with empty input can result in output with unexpected results when parsed due to HTML normalization rules. This may allow injection of arbitrary attributes into tags.\n",
                "markdown": "> Templates containing actions in unquoted HTML attributes (e.g. \"attr={{.}}\") executed with empty input can result in output with unexpected results when parsed due to HTML normalization rules. This may allow injection of arbitrary attributes into tags.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.19.9                  |\n| Fixed version  | 1.19.9                   |\n"
              },
              "properties": {
                "affected_version": "<1.19.9",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.19.9",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.3",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2019-17596",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2019-17596"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2019-17596?s=golang&n=stdlib&t=golang&vr=%3E%3D1.13.0-0%2C%3C1.13.2",
              "help": {
                "text": "Invalid DSA public keys can cause a panic in dsa.Verify. In particular, using crypto/x509.Verify on a crafted X.509 certificate chain can lead to a panic, even if the certificates don't chain to a trusted root. The chain can be delivered via a crypto/tls connection to a client, or to a server that accepts and verifies client certificates. net/http clients can be made to crash by an HTTPS server, while net/http servers that accept client certificates will recover the panic and are unaffected.\n\nMoreover, an application might crash invoking crypto/x509.(*CertificateRequest).CheckSignature on an X.509 certificate request, parsing a golang.org/x/crypto/openpgp Entity, or during a golang.org/x/crypto/otr conversation. Finally, a golang.org/x/crypto/ssh client can panic due to a malformed host key, while a server could panic if either PublicKeyCallback accepts a malformed public key, or if IsUserAuthority accepts a certificate with a malformed public key.\n",
                "markdown": "> Invalid DSA public keys can cause a panic in dsa.Verify. In particular, using crypto/x509.Verify on a crafted X.509 certificate chain can lead to a panic, even if the certificates don't chain to a trusted root. The chain can be delivered via a crypto/tls connection to a client, or to a server that accepts and verifies client certificates. net/http clients can be made to crash by an HTTPS server, while net/http servers that accept client certificates will recover the panic and are unaffected.\n\nMoreover, an application might crash invoking crypto/x509.(*CertificateRequest).CheckSignature on an X.509 certificate request, parsing a golang.org/x/crypto/openpgp Entity, or during a golang.org/x/crypto/otr conversation. Finally, a golang.org/x/crypto/ssh client can panic due to a malformed host key, while a server could panic if either PublicKeyCallback accepts a malformed public key, or if IsUserAuthority accepts a certificate with a malformed public key.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | >=1.13.0-0,<1.13.2       |\n| Fixed version  | 1.13.2                   |\n"
              },
              "properties": {
                "affected_version": ">=1.13.0-0,<1.13.2",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.13.2",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2020-16845",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-16845"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2020-16845?s=golang&n=stdlib&t=golang&vr=%3C1.13.15",
              "help": {
                "text": "ReadUvarint and ReadVarint can read an unlimited number of bytes from invalid inputs.\n\nCertain invalid inputs to ReadUvarint or ReadVarint can cause these functions to read an unlimited number of bytes from the ByteReader parameter before returning an error. This can lead to processing more input than expected when the caller is reading directly from a network and depends on ReadUvarint or ReadVarint only consuming a small, bounded number of bytes, even from invalid inputs.\n",
                "markdown": "> ReadUvarint and ReadVarint can read an unlimited number of bytes from invalid inputs.\n\nCertain invalid inputs to ReadUvarint or ReadVarint can cause these functions to read an unlimited number of bytes from the ByteReader parameter before returning an error. This can lead to processing more input than expected when the caller is reading directly from a network and depends on ReadUvarint or ReadVarint only consuming a small, bounded number of bytes, even from invalid inputs.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.13.15                 |\n| Fixed version  | 1.13.15                  |\n"
              },
              "properties": {
                "affected_version": "<1.13.15",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.13.15",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2020-26160",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-26160: OWASP Top Ten 2017 Category A9 - Using Components with Known Vulnerabilities"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2020-26160?s=gitlab&n=jwt-go&ns=github.com%2Fdgrijalva&t=golang&vr=%3C%3Dv3.2.0",
              "help": {
                "text": "jwt-go allows attackers to bypass intended access restrictions in situations with `[]string{}` for `m[\"aud\"]` (which is allowed by the specification). Because the type assertion fails, \"\" is the value of `aud`. This is a security problem if the JWT token is presented to a service that lacks its own audience check.\n",
                "markdown": "> jwt-go allows attackers to bypass intended access restrictions in situations with `[]string{}` for `m[\"aud\"]` (which is allowed by the specification). Because the type assertion fails, \"\" is the value of `aud`. This is a security problem if the JWT token is presented to a service that lacks its own audience check.\n\n|                |                                                                      |\n|----------------|----------------------------------------------------------------------|\n| Package        | pkg:golang/github.com/dgrijalva/jwt-go@3.2.0%!B(MISSING)incompatible |\n| Affected range | <=v3.2.0                                                             |\n| Fixed version  | not fixed                                                            |\n| CVSS Score     |                                                                  7.5 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N                         |\n"
              },
              "properties": {
                "affected_version": "<=v3.2.0",
                "cvssV3": 7.5,
                "cvssV3_severity": "HIGH",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
                "fixed_version": "not fixed",
                "purls": [
                  "pkg:golang/github.com/dgrijalva/jwt-go@3.2.0%2Bincompatible"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2020-29652",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-29652: NULL Pointer Dereference"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2020-29652?s=github&n=crypto&ns=golang.org%2Fx&t=golang&vr=%3C0.0.0-20201216223049-8b5274cf687f",
              "help": {
                "text": "A nil pointer dereference in the golang.org/x/crypto/ssh component through v0.0.0-20201203163018-be400aefbc4c for Go allows remote attackers to cause a denial of service against SSH servers. An attacker can craft an authentication request message for the `gssapi-with-mic` method which will cause NewServerConn to panic via a nil pointer dereference if ServerConfig.GSSAPIWithMICConfig is nil.\n",
                "markdown": "> A nil pointer dereference in the golang.org/x/crypto/ssh component through v0.0.0-20201203163018-be400aefbc4c for Go allows remote attackers to cause a denial of service against SSH servers. An attacker can craft an authentication request message for the `gssapi-with-mic` method which will cause NewServerConn to panic via a nil pointer dereference if ServerConfig.GSSAPIWithMICConfig is nil.\n\n|                |                                                                  |\n|----------------|------------------------------------------------------------------|\n| Package        | pkg:golang/golang.org/x/crypto@0.0.0-20191128160524-b544559bb6d1 |\n| Affected range | <0.0.0-20201216223049-8b5274cf687f                               |\n| Fixed version  | 0.0.0-20201216223049-8b5274cf687f                                |\n| CVSS Score     |                                                              7.5 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H                     |\n"
              },
              "properties": {
                "affected_version": "<0.0.0-20201216223049-8b5274cf687f",
                "cvssV3": 7.5,
                "cvssV3_severity": "HIGH",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                "fixed_version": "0.0.0-20201216223049-8b5274cf687f",
                "purls": [
                  "pkg:golang/golang.org/x/crypto@0.0.0-20191128160524-b544559bb6d1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2020-7919",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-7919"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2020-7919?s=golang&n=stdlib&t=golang&vr=%3E%3D1.13.0-0%2C%3C1.13.7",
              "help": {
                "text": "On 32-bit architectures, a malformed input to crypto/x509 or the ASN.1 parsing functions of golang.org/x/crypto/cryptobyte can lead to a panic.\n\nThe malformed certificate can be delivered via a crypto/tls connection to a client, or to a server that accepts client certificates. net/http clients can be made to crash by an HTTPS server, while net/http servers that accept client certificates will recover the panic and are unaffected.\n",
                "markdown": "> On 32-bit architectures, a malformed input to crypto/x509 or the ASN.1 parsing functions of golang.org/x/crypto/cryptobyte can lead to a panic.\n\nThe malformed certificate can be delivered via a crypto/tls connection to a client, or to a server that accepts client certificates. net/http clients can be made to crash by an HTTPS server, while net/http servers that accept client certificates will recover the panic and are unaffected.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | >=1.13.0-0,<1.13.7       |\n| Fixed version  | 1.13.7                   |\n"
              },
              "properties": {
                "affected_version": "<0.0.0-20200124225646-8b5121be2f68",
                "cvssV3": 7.5,
                "cvssV3_severity": "HIGH",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                "fixed_version": "0.0.0-20200124225646-8b5121be2f68",
                "purls": [
                  "pkg:golang/golang.org/x/crypto@0.0.0-20191128160524-b544559bb6d1",
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2020-9283",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-9283: Improper Verification of Cryptographic Signature"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2020-9283?s=github&n=crypto&ns=golang.org%2Fx&t=golang&vr=%3C0.0.0-20200220183623-bac4c82f6975",
              "help": {
                "text": "golang.org/x/crypto before v0.0.0-20200220183623-bac4c82f6975 for Go allows a panic during signature verification in the golang.org/x/crypto/ssh package. A client can attack an SSH server that accepts public keys. Also, a server can attack any SSH client.\n",
                "markdown": "> golang.org/x/crypto before v0.0.0-20200220183623-bac4c82f6975 for Go allows a panic during signature verification in the golang.org/x/crypto/ssh package. A client can attack an SSH server that accepts public keys. Also, a server can attack any SSH client.\n\n|                |                                                                  |\n|----------------|------------------------------------------------------------------|\n| Package        | pkg:golang/golang.org/x/crypto@0.0.0-20191128160524-b544559bb6d1 |\n| Affected range | <0.0.0-20200220183623-bac4c82f6975                               |\n| Fixed version  | 0.0.0-20200220183623-bac4c82f6975                                |\n| CVSS Score     |                                                              7.5 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H                     |\n"
              },
              "properties": {
                "affected_version": "<0.0.0-20200220183623-bac4c82f6975",
                "cvssV3": 7.5,
                "cvssV3_severity": "HIGH",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                "fixed_version": "0.0.0-20200220183623-bac4c82f6975",
                "purls": [
                  "pkg:golang/golang.org/x/crypto@0.0.0-20191128160524-b544559bb6d1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2021-27918",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-27918"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2021-27918?s=golang&n=stdlib&t=golang&vr=%3C1.15.9",
              "help": {
                "text": "The Decode, DecodeElement, and Skip methods of an xml.Decoder provided by xml.NewTokenDecoder may enter an infinite loop when operating on a custom xml.TokenReader which returns an EOF in the middle of an open XML element.\n",
                "markdown": "> The Decode, DecodeElement, and Skip methods of an xml.Decoder provided by xml.NewTokenDecoder may enter an infinite loop when operating on a custom xml.TokenReader which returns an EOF in the middle of an open XML element.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.15.9                  |\n| Fixed version  | 1.15.9                   |\n"
              },
              "properties": {
                "affected_version": "<1.15.9",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.15.9",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2021-33194",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-33194: Loop with Unreachable Exit Condition ('Infinite Loop')"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2021-33194?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.0.0-20210520170846-37e1c6afe023",
              "help": {
                "text": "Go through 1.15.12 and 1.16.x through 1.16.4 has a golang.org/x/net/html infinite loop via crafted ParseFragment input.\n",
                "markdown": "> Go through 1.15.12 and 1.16.x through 1.16.4 has a golang.org/x/net/html infinite loop via crafted ParseFragment input.\n\n|                |                                                               |\n|----------------|---------------------------------------------------------------|\n| Package        | pkg:golang/golang.org/x/net@0.0.0-20191126235420-ef20fe5d7933 |\n| Affected range | <0.0.0-20210520170846-37e1c6afe023                            |\n| Fixed version  | 0.0.0-20210520170846-37e1c6afe023                             |\n| CVSS Score     |                                                           7.5 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H                  |\n"
              },
              "properties": {
                "affected_version": "<0.0.0-20210520170846-37e1c6afe023",
                "cvssV3": 7.5,
                "cvssV3_severity": "HIGH",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                "fixed_version": "0.0.0-20210520170846-37e1c6afe023",
                "purls": [
                  "pkg:golang/golang.org/x/net@0.0.0-20191126235420-ef20fe5d7933"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2021-33196",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-33196"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2021-33196?s=golang&n=stdlib&t=golang&vr=%3C1.15.13",
              "help": {
                "text": "NewReader and OpenReader can cause a panic or an unrecoverable fatal error when reading an archive that claims to contain a large number of files, regardless of its actual size.\n",
                "markdown": "> NewReader and OpenReader can cause a panic or an unrecoverable fatal error when reading an archive that claims to contain a large number of files, regardless of its actual size.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.15.13                 |\n| Fixed version  | 1.15.13                  |\n"
              },
              "properties": {
                "affected_version": "<1.15.13",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.15.13",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2021-33198",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-33198"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2021-33198?s=golang&n=stdlib&t=golang&vr=%3C1.15.13",
              "help": {
                "text": "Rat.SetString and Rat.UnmarshalText may cause a panic or an unrecoverable fatal error if passed inputs with very large exponents.\n",
                "markdown": "> Rat.SetString and Rat.UnmarshalText may cause a panic or an unrecoverable fatal error if passed inputs with very large exponents.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.15.13                 |\n| Fixed version  | 1.15.13                  |\n"
              },
              "properties": {
                "affected_version": "<1.15.13",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.15.13",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2021-38561",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-38561: Out-of-bounds Read"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2021-38561?s=github&n=text&ns=golang.org%2Fx&t=golang&vr=%3C0.3.7",
              "help": {
                "text": "golang.org/x/text/language in golang.org/x/text before 0.3.7 can panic with an out-of-bounds read during BCP 47 language tag parsing. Index calculation is mishandled. If parsing untrusted user input, this can be used as a vector for a denial-of-service attack.\n",
                "markdown": "> golang.org/x/text/language in golang.org/x/text before 0.3.7 can panic with an out-of-bounds read during BCP 47 language tag parsing. Index calculation is mishandled. If parsing untrusted user input, this can be used as a vector for a denial-of-service attack.\n\n|                |                                              |\n|----------------|----------------------------------------------|\n| Package        | pkg:golang/golang.org/x/text@0.3.2           |\n| Affected range | <0.3.7                                       |\n| Fixed version  | 0.3.7                                        |\n| CVSS Score     |                                          7.5 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H |\n"
              },
              "properties": {
                "affected_version": "<0.3.7",
                "cvssV3": 7.5,
                "cvssV3_severity": "HIGH",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                "fixed_version": "0.3.7",
                "purls": [
                  "pkg:golang/golang.org/x/text@0.3.2"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2021-39293",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-39293"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2021-39293?s=golang&n=stdlib&t=golang&vr=%3C1.16.8",
              "help": {
                "text": "The NewReader and OpenReader functions in archive/zip can cause a panic or an unrecoverable fatal error when reading an archive that claims to contain a large number of files, regardless of its actual size. This is caused by an incomplete fix for CVE-2021-33196.\n",
                "markdown": "> The NewReader and OpenReader functions in archive/zip can cause a panic or an unrecoverable fatal error when reading an archive that claims to contain a large number of files, regardless of its actual size. This is caused by an incomplete fix for CVE-2021-33196.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.16.8                  |\n| Fixed version  | 1.16.8                   |\n"
              },
              "properties": {
                "affected_version": "<1.16.8",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.16.8",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2021-41771",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-41771"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2021-41771?s=golang&n=stdlib&t=golang&vr=%3C1.16.10",
              "help": {
                "text": "Calling File.ImportedSymbols on a loaded file which contains an invalid dynamic symbol table command can cause a panic, in particular if the encoded number of undefined symbols is larger than the number of symbols in the symbol table.\n",
                "markdown": "> Calling File.ImportedSymbols on a loaded file which contains an invalid dynamic symbol table command can cause a panic, in particular if the encoded number of undefined symbols is larger than the number of symbols in the symbol table.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.16.10                 |\n| Fixed version  | 1.16.10                  |\n"
              },
              "properties": {
                "affected_version": "<1.16.10",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.16.10",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2021-41772",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-41772"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2021-41772?s=golang&n=stdlib&t=golang&vr=%3C1.16.10",
              "help": {
                "text": "Previously, opening a zip with (*Reader).Open could result in a panic if the zip contained a file whose name was exclusively made up of slash characters or \"..\" path elements.\n\nOpen could also panic if passed the empty string directly as an argument.\n\nNow, any files in the zip whose name could not be made valid for fs.FS.Open will be skipped, and no longer added to the fs.FS file list, although they are still accessible through (*Reader).File.\n\nNote that it was already the case that a file could be accessible from (*Reader).Open with a name different from the one in (*Reader).File, as the former is the cleaned name, while the latter is the original one.\n\nFinally, the actual panic site was made robust as a defense-in-depth measure.\n",
                "markdown": "> Previously, opening a zip with (*Reader).Open could result in a panic if the zip contained a file whose name was exclusively made up of slash characters or \"..\" path elements.\n\nOpen could also panic if passed the empty string directly as an argument.\n\nNow, any files in the zip whose name could not be made valid for fs.FS.Open will be skipped, and no longer added to the fs.FS file list, although they are still accessible through (*Reader).File.\n\nNote that it was already the case that a file could be accessible from (*Reader).Open with a name different from the one in (*Reader).File, as the former is the cleaned name, while the latter is the original one.\n\nFinally, the actual panic site was made robust as a defense-in-depth measure.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.16.10                 |\n| Fixed version  | 1.16.10                  |\n"
              },
              "properties": {
                "affected_version": "<1.16.10",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.16.10",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2021-43565",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-43565"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2021-43565?s=github&n=crypto&ns=golang.org%2Fx&t=golang&vr=%3C0.0.0-20211202192323-5770296d904e",
              "help": {
                "text": "The x/crypto/ssh package before 0.0.0-20211202192323-5770296d904e of golang.org/x/crypto allows an unauthenticated attacker to panic an SSH server. When using AES-GCM or ChaCha20Poly1305, consuming a malformed packet which contains an empty plaintext causes a panic.\n",
                "markdown": "> The x/crypto/ssh package before 0.0.0-20211202192323-5770296d904e of golang.org/x/crypto allows an unauthenticated attacker to panic an SSH server. When using AES-GCM or ChaCha20Poly1305, consuming a malformed packet which contains an empty plaintext causes a panic.\n\n|                |                                                                  |\n|----------------|------------------------------------------------------------------|\n| Package        | pkg:golang/golang.org/x/crypto@0.0.0-20191128160524-b544559bb6d1 |\n| Affected range | <0.0.0-20211202192323-5770296d904e                               |\n| Fixed version  | 0.0.0-20211202192323-5770296d904e                                |\n| CVSS Score     |                                                              7.5 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H                     |\n"
              },
              "properties": {
                "affected_version": "<0.0.0-20211202192323-5770296d904e",
                "cvssV3": 7.5,
                "cvssV3_severity": "HIGH",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                "fixed_version": "0.0.0-20211202192323-5770296d904e",
                "purls": [
                  "pkg:golang/golang.org/x/crypto@0.0.0-20191128160524-b544559bb6d1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2021-44716",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-44716"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2021-44716?s=golang&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.0.0-20211209124913-491a49abca63",
              "help": {
                "text": "An attacker can cause unbounded memory growth in servers accepting HTTP/2 requests.\n",
                "markdown": "> An attacker can cause unbounded memory growth in servers accepting HTTP/2 requests.\n\n|                |                                                               |\n|----------------|---------------------------------------------------------------|\n| Package        | pkg:golang/golang.org/x/net@0.0.0-20191126235420-ef20fe5d7933 |\n| Affected range | <0.0.0-20211209124913-491a49abca63                            |\n| Fixed version  | 0.0.0-20211209124913-491a49abca63                             |\n"
              },
              "properties": {
                "affected_version": "<1.16.12",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.16.12",
                "purls": [
                  "pkg:golang/golang.org/x/net@0.0.0-20191126235420-ef20fe5d7933",
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-21698",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-21698: Uncontrolled Resource Consumption"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-21698?s=github&n=client_golang&ns=github.com%2Fprometheus&t=golang&vr=%3C1.11.1",
              "help": {
                "text": "This is the Go client library for Prometheus. It has two separate parts, one for instrumenting application code, and one for creating clients that talk to the Prometheus HTTP API. client_golang is the instrumentation library for Go applications in Prometheus, and the promhttp package in client_golang provides tooling around HTTP servers and clients.\n\n### Impact\n\nHTTP server susceptible to a Denial of Service through unbounded cardinality, and potential memory exhaustion, when handling requests with non-standard HTTP methods.\n\n###  Affected Configuration\n\nIn order to be affected, an instrumented software must\n\n* Use any of `promhttp.InstrumentHandler*` middleware except `RequestsInFlight`.\n* Do not filter any specific methods (e.g GET) before middleware.\n* Pass metric with `method` label name to our middleware.\n* Not have any firewall/LB/proxy that filters away requests with unknown `method`.\n\n### Patches\n\n* https://github.com/prometheus/client_golang/pull/962\n* https://github.com/prometheus/client_golang/pull/987\n\n### Workarounds\n\nIf you cannot upgrade to [v1.11.1 or above](https://github.com/prometheus/client_golang/releases/tag/v1.11.1), in order to stop being affected you can:\n\n* Remove `method` label name from counter/gauge you use in the InstrumentHandler.\n* Turn off affected promhttp handlers.\n* Add custom middleware before promhttp handler that will sanitize the request method given by Go http.Request.\n* Use a reverse proxy or web application firewall, configured to only allow a limited set of methods.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in https://github.com/prometheus/client_golang\n* Email us at `prometheus-team@googlegroups.com`\n\n",
                "markdown": "> This is the Go client library for Prometheus. It has two separate parts, one for instrumenting application code, and one for creating clients that talk to the Prometheus HTTP API. client_golang is the instrumentation library for Go applications in Prometheus, and the promhttp package in client_golang provides tooling around HTTP servers and clients.\n\n### Impact\n\nHTTP server susceptible to a Denial of Service through unbounded cardinality, and potential memory exhaustion, when handling requests with non-standard HTTP methods.\n\n###  Affected Configuration\n\nIn order to be affected, an instrumented software must\n\n* Use any of `promhttp.InstrumentHandler*` middleware except `RequestsInFlight`.\n* Do not filter any specific methods (e.g GET) before middleware.\n* Pass metric with `method` label name to our middleware.\n* Not have any firewall/LB/proxy that filters away requests with unknown `method`.\n\n### Patches\n\n* https://github.com/prometheus/client_golang/pull/962\n* https://github.com/prometheus/client_golang/pull/987\n\n### Workarounds\n\nIf you cannot upgrade to [v1.11.1 or above](https://github.com/prometheus/client_golang/releases/tag/v1.11.1), in order to stop being affected you can:\n\n* Remove `method` label name from counter/gauge you use in the InstrumentHandler.\n* Turn off affected promhttp handlers.\n* Add custom middleware before promhttp handler that will sanitize the request method given by Go http.Request.\n* Use a reverse proxy or web application firewall, configured to only allow a limited set of methods.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in https://github.com/prometheus/client_golang\n* Email us at `prometheus-team@googlegroups.com`\n\n\n|                |                                                      |\n|----------------|------------------------------------------------------|\n| Package        | pkg:golang/github.com/prometheus/client_golang@1.1.0 |\n| Affected range | <1.11.1                                              |\n| Fixed version  | 1.11.1                                               |\n| CVSS Score     |                                                  7.5 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H         |\n"
              },
              "properties": {
                "affected_version": "<1.11.1",
                "cvssV3": 7.5,
                "cvssV3_severity": "HIGH",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                "fixed_version": "1.11.1",
                "purls": [
                  "pkg:golang/github.com/prometheus/client_golang@1.1.0"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-23648",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23648: Exposure of Sensitive Information to an Unauthorized Actor"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-23648?s=github&n=containerd&ns=github.com%2Fcontainerd&t=golang&vr=%3C1.4.13",
              "help": {
                "text": "### Impact\n\nA bug was found in containerd where containers launched through containerd’s CRI implementation with a specially-crafted image configuration could gain access to read-only copies of arbitrary files and directories on the host.  This may bypass any policy-based enforcement on container setup (including a Kubernetes Pod Security Policy) and expose potentially sensitive information.  Kubernetes and crictl can both be configured to use containerd’s CRI implementation.\n\n### Patches\n\nThis bug has been fixed in containerd 1.6.1, 1.5.10 and 1.4.13.  Users should update to these versions to resolve the issue.\n\n### Workarounds\n\nEnsure that only trusted images are used.\n\n### Credits\n\nThe containerd project would like to thank Felix Wilhelm of Google Project Zero for responsibly disclosing this issue in accordance with the [containerd security policy](https://github.com/containerd/project/blob/main/SECURITY.md).\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [containerd](https://github.com/containerd/containerd/issues/new/choose)\n* Email us at [security@containerd.io](mailto:security@containerd.io)\n",
                "markdown": "> ### Impact\n\nA bug was found in containerd where containers launched through containerd’s CRI implementation with a specially-crafted image configuration could gain access to read-only copies of arbitrary files and directories on the host.  This may bypass any policy-based enforcement on container setup (including a Kubernetes Pod Security Policy) and expose potentially sensitive information.  Kubernetes and crictl can both be configured to use containerd’s CRI implementation.\n\n### Patches\n\nThis bug has been fixed in containerd 1.6.1, 1.5.10 and 1.4.13.  Users should update to these versions to resolve the issue.\n\n### Workarounds\n\nEnsure that only trusted images are used.\n\n### Credits\n\nThe containerd project would like to thank Felix Wilhelm of Google Project Zero for responsibly disclosing this issue in accordance with the [containerd security policy](https://github.com/containerd/project/blob/main/SECURITY.md).\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in [containerd](https://github.com/containerd/containerd/issues/new/choose)\n* Email us at [security@containerd.io](mailto:security@containerd.io)\n\n|                |                                                   |\n|----------------|---------------------------------------------------|\n| Package        | pkg:golang/github.com/containerd/containerd@1.3.1 |\n| Affected range | <1.4.13                                           |\n| Fixed version  | 1.4.13                                            |\n| CVSS Score     |                                               7.5 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N      |\n"
              },
              "properties": {
                "affected_version": "<1.4.13",
                "cvssV3": 7.5,
                "cvssV3_severity": "HIGH",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
                "fixed_version": "1.4.13",
                "purls": [
                  "pkg:golang/github.com/containerd/containerd@1.3.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-23772",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23772"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-23772?s=golang&n=stdlib&t=golang&vr=%3C1.16.14",
              "help": {
                "text": "Rat.SetString had an overflow issue that can lead to uncontrolled memory consumption.\n",
                "markdown": "> Rat.SetString had an overflow issue that can lead to uncontrolled memory consumption.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.16.14                 |\n| Fixed version  | 1.16.14                  |\n"
              },
              "properties": {
                "affected_version": "<1.16.14",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.16.14",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-24675",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-24675"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-24675?s=golang&n=stdlib&t=golang&vr=%3C1.17.9",
              "help": {
                "text": "encoding/pem in Go before 1.17.9 and 1.18.x before 1.18.1 has a Decode stack overflow via a large amount of PEM data.\n",
                "markdown": "> encoding/pem in Go before 1.17.9 and 1.18.x before 1.18.1 has a Decode stack overflow via a large amount of PEM data.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.17.9                  |\n| Fixed version  | 1.17.9                   |\n"
              },
              "properties": {
                "affected_version": "<1.17.9",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.17.9",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-24921",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-24921"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-24921?s=golang&n=stdlib&t=golang&vr=%3C1.16.15",
              "help": {
                "text": "On 64-bit platforms, an extremely deeply nested expression can cause regexp.Compile to cause goroutine stack exhaustion, forcing the program to exit. Note this applies to very large expressions, on the order of 2MB.\n",
                "markdown": "> On 64-bit platforms, an extremely deeply nested expression can cause regexp.Compile to cause goroutine stack exhaustion, forcing the program to exit. Note this applies to very large expressions, on the order of 2MB.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.16.15                 |\n| Fixed version  | 1.16.15                  |\n"
              },
              "properties": {
                "affected_version": "<1.16.15",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.16.15",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-27191",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-27191: Use of a Broken or Risky Cryptographic Algorithm"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-27191?s=github&n=crypto&ns=golang.org%2Fx&t=golang&vr=%3C0.0.0-20220314234659-1baeb1ce4c0b",
              "help": {
                "text": "The golang.org/x/crypto/ssh package before 0.0.0-20220314234659-1baeb1ce4c0b for Go allows an attacker to crash a server in certain circumstances involving AddHostKey.\n",
                "markdown": "> The golang.org/x/crypto/ssh package before 0.0.0-20220314234659-1baeb1ce4c0b for Go allows an attacker to crash a server in certain circumstances involving AddHostKey.\n\n|                |                                                                  |\n|----------------|------------------------------------------------------------------|\n| Package        | pkg:golang/golang.org/x/crypto@0.0.0-20191128160524-b544559bb6d1 |\n| Affected range | <0.0.0-20220314234659-1baeb1ce4c0b                               |\n| Fixed version  | 0.0.0-20220314234659-1baeb1ce4c0b                                |\n| CVSS Score     |                                                              7.5 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H                     |\n"
              },
              "properties": {
                "affected_version": "<0.0.0-20220314234659-1baeb1ce4c0b",
                "cvssV3": 7.5,
                "cvssV3_severity": "HIGH",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                "fixed_version": "0.0.0-20220314234659-1baeb1ce4c0b",
                "purls": [
                  "pkg:golang/golang.org/x/crypto@0.0.0-20191128160524-b544559bb6d1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-27664",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-27664"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-27664?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.0.0-20220906165146-f3363e06e74c",
              "help": {
                "text": "In net/http in Go before 1.18.6 and 1.19.x before 1.19.1, attackers can cause a denial of service because an HTTP/2 connection can hang during closing if shutdown were preempted by a fatal error.\n",
                "markdown": "> In net/http in Go before 1.18.6 and 1.19.x before 1.19.1, attackers can cause a denial of service because an HTTP/2 connection can hang during closing if shutdown were preempted by a fatal error.\n\n|                |                                                               |\n|----------------|---------------------------------------------------------------|\n| Package        | pkg:golang/golang.org/x/net@0.0.0-20191126235420-ef20fe5d7933 |\n| Affected range | <0.0.0-20220906165146-f3363e06e74c                            |\n| Fixed version  | 0.0.0-20220906165146-f3363e06e74c                             |\n| CVSS Score     |                                                           7.5 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H                  |\n"
              },
              "properties": {
                "affected_version": "<1.18.6",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.18.6",
                "purls": [
                  "pkg:golang/golang.org/x/net@0.0.0-20191126235420-ef20fe5d7933",
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-28131",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-28131"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-28131?s=golang&n=stdlib&t=golang&vr=%3C1.17.12",
              "help": {
                "text": "Calling Decoder.Skip when parsing a deeply nested XML document can cause a panic due to stack exhaustion.\n",
                "markdown": "> Calling Decoder.Skip when parsing a deeply nested XML document can cause a panic due to stack exhaustion.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.17.12                 |\n| Fixed version  | 1.17.12                  |\n"
              },
              "properties": {
                "affected_version": "<1.17.12",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.17.12",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-28327",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-28327"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-28327?s=golang&n=stdlib&t=golang&vr=%3C1.17.9",
              "help": {
                "text": "A crafted scalar input longer than 32 bytes can cause P256().ScalarMult or P256().ScalarBaseMult to panic. Indirect uses through crypto/ecdsa and crypto/tls are unaffected. amd64, arm64, ppc64le, and s390x are unaffected.\n",
                "markdown": "> A crafted scalar input longer than 32 bytes can cause P256().ScalarMult or P256().ScalarBaseMult to panic. Indirect uses through crypto/ecdsa and crypto/tls are unaffected. amd64, arm64, ppc64le, and s390x are unaffected.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.17.9                  |\n| Fixed version  | 1.17.9                   |\n"
              },
              "properties": {
                "affected_version": "<1.17.9",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.17.9",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-2879",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-2879"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-2879?s=golang&n=stdlib&t=golang&vr=%3C1.18.7",
              "help": {
                "text": "Reader.Read does not set a limit on the maximum size of file headers. A maliciously crafted archive could cause Read to allocate unbounded amounts of memory, potentially causing resource exhaustion or panics. After fix, Reader.Read limits the maximum size of header blocks to 1 MiB.\n",
                "markdown": "> Reader.Read does not set a limit on the maximum size of file headers. A maliciously crafted archive could cause Read to allocate unbounded amounts of memory, potentially causing resource exhaustion or panics. After fix, Reader.Read limits the maximum size of header blocks to 1 MiB.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.18.7                  |\n| Fixed version  | 1.18.7                   |\n"
              },
              "properties": {
                "affected_version": "<1.18.7",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.18.7",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-2880",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-2880"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-2880?s=golang&n=stdlib&t=golang&vr=%3C1.18.7",
              "help": {
                "text": "Requests forwarded by ReverseProxy include the raw query parameters from the inbound request, including unparsable parameters rejected by net/http. This could permit query parameter smuggling when a Go proxy forwards a parameter with an unparsable value.\n\nAfter fix, ReverseProxy sanitizes the query parameters in the forwarded query when the outbound request's Form field is set after the ReverseProxy. Director function returns, indicating that the proxy has parsed the query parameters. Proxies which do not parse query parameters continue to forward the original query parameters unchanged.\n",
                "markdown": "> Requests forwarded by ReverseProxy include the raw query parameters from the inbound request, including unparsable parameters rejected by net/http. This could permit query parameter smuggling when a Go proxy forwards a parameter with an unparsable value.\n\nAfter fix, ReverseProxy sanitizes the query parameters in the forwarded query when the outbound request's Form field is set after the ReverseProxy. Director function returns, indicating that the proxy has parsed the query parameters. Proxies which do not parse query parameters continue to forward the original query parameters unchanged.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.18.7                  |\n| Fixed version  | 1.18.7                   |\n"
              },
              "properties": {
                "affected_version": "<1.18.7",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.18.7",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-29804",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-29804"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-29804?s=golang&n=stdlib&t=golang&vr=%3C1.17.11",
              "help": {
                "text": "On Windows, the filepath.Clean function can convert certain invalid paths to valid, absolute paths, potentially allowing a directory traversal attack.\n\nFor example, Clean(\".\\c:\") returns \"c:\".\n",
                "markdown": "> On Windows, the filepath.Clean function can convert certain invalid paths to valid, absolute paths, potentially allowing a directory traversal attack.\n\nFor example, Clean(\".\\c:\") returns \"c:\".\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.17.11                 |\n| Fixed version  | 1.17.11                  |\n"
              },
              "properties": {
                "affected_version": "<1.17.11",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.17.11",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-30630",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-30630"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-30630?s=golang&n=stdlib&t=golang&vr=%3C1.17.12",
              "help": {
                "text": "Calling Glob on a path which contains a large number of path separators can cause a panic due to stack exhaustion.\n",
                "markdown": "> Calling Glob on a path which contains a large number of path separators can cause a panic due to stack exhaustion.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.17.12                 |\n| Fixed version  | 1.17.12                  |\n"
              },
              "properties": {
                "affected_version": "<1.17.12",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.17.12",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-30631",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-30631"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-30631?s=golang&n=stdlib&t=golang&vr=%3C1.17.12",
              "help": {
                "text": "Calling Reader.Read on an archive containing a large number of concatenated 0-length compressed files can cause a panic due to stack exhaustion.\n",
                "markdown": "> Calling Reader.Read on an archive containing a large number of concatenated 0-length compressed files can cause a panic due to stack exhaustion.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.17.12                 |\n| Fixed version  | 1.17.12                  |\n"
              },
              "properties": {
                "affected_version": "<1.17.12",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.17.12",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-30632",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-30632"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-30632?s=golang&n=stdlib&t=golang&vr=%3C1.17.12",
              "help": {
                "text": "Calling Glob on a path which contains a large number of path separators can cause a panic due to stack exhaustion.\n",
                "markdown": "> Calling Glob on a path which contains a large number of path separators can cause a panic due to stack exhaustion.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.17.12                 |\n| Fixed version  | 1.17.12                  |\n"
              },
              "properties": {
                "affected_version": "<1.17.12",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.17.12",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-30633",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-30633"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-30633?s=golang&n=stdlib&t=golang&vr=%3C1.17.12",
              "help": {
                "text": "Unmarshaling an XML document into a Go struct which has a nested field that uses the 'any' field tag can panic due to stack exhaustion.\n",
                "markdown": "> Unmarshaling an XML document into a Go struct which has a nested field that uses the 'any' field tag can panic due to stack exhaustion.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.17.12                 |\n| Fixed version  | 1.17.12                  |\n"
              },
              "properties": {
                "affected_version": "<1.17.12",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.17.12",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-30634",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-30634"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-30634?s=golang&n=stdlib&t=golang&vr=%3C1.17.11",
              "help": {
                "text": "On Windows, rand.Read will hang indefinitely if passed a buffer larger than 1 << 32 - 1 bytes.\n",
                "markdown": "> On Windows, rand.Read will hang indefinitely if passed a buffer larger than 1 << 32 - 1 bytes.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.17.11                 |\n| Fixed version  | 1.17.11                  |\n"
              },
              "properties": {
                "affected_version": "<1.17.11",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.17.11",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-30635",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-30635"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-30635?s=golang&n=stdlib&t=golang&vr=%3C1.17.12",
              "help": {
                "text": "Calling Decoder.Decode on a message which contains deeply nested structures can cause a panic due to stack exhaustion.\n",
                "markdown": "> Calling Decoder.Decode on a message which contains deeply nested structures can cause a panic due to stack exhaustion.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.17.12                 |\n| Fixed version  | 1.17.12                  |\n"
              },
              "properties": {
                "affected_version": "<1.17.12",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.17.12",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-32149",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-32149: Missing Release of Resource after Effective Lifetime"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-32149?s=github&n=text&ns=golang.org%2Fx&t=golang&vr=%3C0.3.8",
              "help": {
                "text": "The BCP 47 tag parser has quadratic time complexity due to inherent aspects of its design. Since the parser is, by design, exposed to untrusted user input, this can be leveraged to force a program to consume significant time parsing Accept-Language headers. The parser cannot be easily rewritten to fix this behavior for various reasons. Instead the solution implemented in this CL is to limit the total complexity of tags passed into ParseAcceptLanguage by limiting the number of dashes in the string to 1000. This should be more than enough for the majority of real world use cases, where the number of tags being sent is likely to be in the single digits.\n\n### Specific Go Packages Affected\ngolang.org/x/text/language\n",
                "markdown": "> The BCP 47 tag parser has quadratic time complexity due to inherent aspects of its design. Since the parser is, by design, exposed to untrusted user input, this can be leveraged to force a program to consume significant time parsing Accept-Language headers. The parser cannot be easily rewritten to fix this behavior for various reasons. Instead the solution implemented in this CL is to limit the total complexity of tags passed into ParseAcceptLanguage by limiting the number of dashes in the string to 1000. This should be more than enough for the majority of real world use cases, where the number of tags being sent is likely to be in the single digits.\n\n### Specific Go Packages Affected\ngolang.org/x/text/language\n\n|                |                                              |\n|----------------|----------------------------------------------|\n| Package        | pkg:golang/golang.org/x/text@0.3.2           |\n| Affected range | <0.3.8                                       |\n| Fixed version  | 0.3.8                                        |\n| CVSS Score     |                                          7.5 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H |\n"
              },
              "properties": {
                "affected_version": "<0.3.8",
                "cvssV3": 7.5,
                "cvssV3_severity": "HIGH",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                "fixed_version": "0.3.8",
                "purls": [
                  "pkg:golang/golang.org/x/text@0.3.2"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-32189",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-32189"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-32189?s=golang&n=stdlib&t=golang&vr=%3C1.17.13",
              "help": {
                "text": "Decoding big.Float and big.Rat types can panic if the encoded message is too short, potentially allowing a denial of service.\n",
                "markdown": "> Decoding big.Float and big.Rat types can panic if the encoded message is too short, potentially allowing a denial of service.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.17.13                 |\n| Fixed version  | 1.17.13                  |\n"
              },
              "properties": {
                "affected_version": "<1.17.13",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.17.13",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-41715",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41715"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-41715?s=golang&n=stdlib&t=golang&vr=%3C1.18.7",
              "help": {
                "text": "Programs which compile regular expressions from untrusted sources may be vulnerable to memory exhaustion or denial of service.\n\nThe parsed regexp representation is linear in the size of the input, but in some cases the constant factor can be as high as 40,000, making relatively small regexps consume much larger amounts of memory.\n\nAfter fix, each regexp being parsed is limited to a 256 MB memory footprint. Regular expressions whose representation would use more space than that are rejected. Normal use of regular expressions is unaffected.\n",
                "markdown": "> Programs which compile regular expressions from untrusted sources may be vulnerable to memory exhaustion or denial of service.\n\nThe parsed regexp representation is linear in the size of the input, but in some cases the constant factor can be as high as 40,000, making relatively small regexps consume much larger amounts of memory.\n\nAfter fix, each regexp being parsed is limited to a 256 MB memory footprint. Regular expressions whose representation would use more space than that are rejected. Normal use of regular expressions is unaffected.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.18.7                  |\n| Fixed version  | 1.18.7                   |\n"
              },
              "properties": {
                "affected_version": "<1.18.7",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.18.7",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-41716",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41716"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-41716?s=golang&n=stdlib&t=golang&vr=%3C1.18.8",
              "help": {
                "text": "Due to unsanitized NUL values, attackers may be able to maliciously set environment variables on Windows.\n\nIn syscall.StartProcess and os/exec.Cmd, invalid environment variable values containing NUL values are not properly checked for. A malicious environment variable value can exploit this behavior to set a value for a different environment variable. For example, the environment variable string \"A=B\\x00C=D\" sets the variables \"A=B\" and \"C=D\".\n",
                "markdown": "> Due to unsanitized NUL values, attackers may be able to maliciously set environment variables on Windows.\n\nIn syscall.StartProcess and os/exec.Cmd, invalid environment variable values containing NUL values are not properly checked for. A malicious environment variable value can exploit this behavior to set a value for a different environment variable. For example, the environment variable string \"A=B\\x00C=D\" sets the variables \"A=B\" and \"C=D\".\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.18.8                  |\n| Fixed version  | 1.18.8                   |\n"
              },
              "properties": {
                "affected_version": "<1.18.8",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.18.8",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-41720",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41720"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-41720?s=golang&n=stdlib&t=golang&vr=%3C1.18.9",
              "help": {
                "text": "On Windows, restricted files can be accessed via os.DirFS and http.Dir.\n\nThe os.DirFS function and http.Dir type provide access to a tree of files rooted at a given directory. These functions permit access to Windows device files under that root. For example, os.DirFS(\"C:/tmp\").Open(\"COM1\") opens the COM1 device. Both os.DirFS and http.Dir only provide read-only filesystem access.\n\nIn addition, on Windows, an os.DirFS for the directory (the root of the current drive) can permit a maliciously crafted path to escape from the drive and access any path on the system.\n\nWith fix applied, the behavior of os.DirFS(\"\") has changed. Previously, an empty root was treated equivalently to \"/\", so os.DirFS(\"\").Open(\"tmp\") would open the path \"/tmp\". This now returns an error.\n",
                "markdown": "> On Windows, restricted files can be accessed via os.DirFS and http.Dir.\n\nThe os.DirFS function and http.Dir type provide access to a tree of files rooted at a given directory. These functions permit access to Windows device files under that root. For example, os.DirFS(\"C:/tmp\").Open(\"COM1\") opens the COM1 device. Both os.DirFS and http.Dir only provide read-only filesystem access.\n\nIn addition, on Windows, an os.DirFS for the directory (the root of the current drive) can permit a maliciously crafted path to escape from the drive and access any path on the system.\n\nWith fix applied, the behavior of os.DirFS(\"\") has changed. Previously, an empty root was treated equivalently to \"/\", so os.DirFS(\"\").Open(\"tmp\") would open the path \"/tmp\". This now returns an error.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.18.9                  |\n| Fixed version  | 1.18.9                   |\n"
              },
              "properties": {
                "affected_version": "<1.18.9",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.18.9",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-41722",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41722"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-41722?s=golang&n=stdlib&t=golang&vr=%3C1.19.6",
              "help": {
                "text": "A path traversal vulnerability exists in filepath.Clean on Windows.\n\nOn Windows, the filepath.Clean function could transform an invalid path such as \"a/../c:/b\" into the valid path \"c:\\b\". This transformation of a relative (if invalid) path into an absolute path could enable a directory traversal attack.\n\nAfter fix, the filepath.Clean function transforms this path into the relative (but still invalid) path \".\\c:\\b\".\n",
                "markdown": "> A path traversal vulnerability exists in filepath.Clean on Windows.\n\nOn Windows, the filepath.Clean function could transform an invalid path such as \"a/../c:/b\" into the valid path \"c:\\b\". This transformation of a relative (if invalid) path into an absolute path could enable a directory traversal attack.\n\nAfter fix, the filepath.Clean function transforms this path into the relative (but still invalid) path \".\\c:\\b\".\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.19.6                  |\n| Fixed version  | 1.19.6                   |\n"
              },
              "properties": {
                "affected_version": "<1.19.6",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.19.6",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-41723",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41723"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-41723?s=golang&n=stdlib&t=golang&vr=%3C1.19.6",
              "help": {
                "text": "A maliciously crafted HTTP/2 stream could cause excessive CPU consumption in the HPACK decoder, sufficient to cause a denial of service from a small number of small requests.\n",
                "markdown": "> A maliciously crafted HTTP/2 stream could cause excessive CPU consumption in the HPACK decoder, sufficient to cause a denial of service from a small number of small requests.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.19.6                  |\n| Fixed version  | 1.19.6                   |\n"
              },
              "properties": {
                "affected_version": "<1.19.6",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.19.6",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-41724",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41724"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-41724?s=golang&n=stdlib&t=golang&vr=%3C1.19.6",
              "help": {
                "text": "Large handshake records may cause panics in crypto/tls.\n\nBoth clients and servers may send large TLS handshake records which cause servers and clients, respectively, to panic when attempting to construct responses.\n\nThis affects all TLS 1.3 clients, TLS 1.2 clients which explicitly enable session resumption (by setting Config.ClientSessionCache to a non-nil value), and TLS 1.3 servers which request client certificates (by setting Config.ClientAuth >= RequestClientCert).\n",
                "markdown": "> Large handshake records may cause panics in crypto/tls.\n\nBoth clients and servers may send large TLS handshake records which cause servers and clients, respectively, to panic when attempting to construct responses.\n\nThis affects all TLS 1.3 clients, TLS 1.2 clients which explicitly enable session resumption (by setting Config.ClientSessionCache to a non-nil value), and TLS 1.3 servers which request client certificates (by setting Config.ClientAuth >= RequestClientCert).\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.19.6                  |\n| Fixed version  | 1.19.6                   |\n"
              },
              "properties": {
                "affected_version": "<1.19.6",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.19.6",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-41725",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-41725"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-41725?s=golang&n=stdlib&t=golang&vr=%3C1.19.6",
              "help": {
                "text": "A denial of service is possible from excessive resource consumption in net/http and mime/multipart.\n\nMultipart form parsing with mime/multipart.Reader.ReadForm can consume largely unlimited amounts of memory and disk files. This also affects form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue.\n\nReadForm takes a maxMemory parameter, and is documented as storing \"up to maxMemory bytes +10MB (reserved for non-file parts) in memory\". File parts which cannot be stored in memory are stored on disk in temporary files. The unconfigurable 10MB reserved for non-file parts is excessively large and can potentially open a denial of service vector on its own. However, ReadForm did not properly account for all memory consumed by a parsed form, such as map entry overhead, part names, and MIME headers, permitting a maliciously crafted form to consume well over 10MB. In addition, ReadForm contained no limit on the number of disk files created, permitting a relatively small request body to create a large number of disk temporary files.\n\nWith fix, ReadForm now properly accounts for various forms of memory overhead, and should now stay within its documented limit of 10MB + maxMemory bytes of memory consumption. Users should still be aware that this limit is high and may still be hazardous.\n\nIn addition, ReadForm now creates at most one on-disk temporary file, combining multiple form parts into a single temporary file. The mime/multipart.File interface type's documentation states, \"If stored on disk, the File's underlying concrete type will be an *os.File.\". This is no longer the case when a form contains more than one file part, due to this coalescing of parts into a single file. The previous behavior of using distinct files for each form part may be reenabled with the environment variable GODEBUG=multipartfiles=distinct.\n\nUsers should be aware that multipart.ReadForm and the http.Request methods that call it do not limit the amount of disk consumed by temporary files. Callers can limit the size of form data with http.MaxBytesReader.\n",
                "markdown": "> A denial of service is possible from excessive resource consumption in net/http and mime/multipart.\n\nMultipart form parsing with mime/multipart.Reader.ReadForm can consume largely unlimited amounts of memory and disk files. This also affects form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue.\n\nReadForm takes a maxMemory parameter, and is documented as storing \"up to maxMemory bytes +10MB (reserved for non-file parts) in memory\". File parts which cannot be stored in memory are stored on disk in temporary files. The unconfigurable 10MB reserved for non-file parts is excessively large and can potentially open a denial of service vector on its own. However, ReadForm did not properly account for all memory consumed by a parsed form, such as map entry overhead, part names, and MIME headers, permitting a maliciously crafted form to consume well over 10MB. In addition, ReadForm contained no limit on the number of disk files created, permitting a relatively small request body to create a large number of disk temporary files.\n\nWith fix, ReadForm now properly accounts for various forms of memory overhead, and should now stay within its documented limit of 10MB + maxMemory bytes of memory consumption. Users should still be aware that this limit is high and may still be hazardous.\n\nIn addition, ReadForm now creates at most one on-disk temporary file, combining multiple form parts into a single temporary file. The mime/multipart.File interface type's documentation states, \"If stored on disk, the File's underlying concrete type will be an *os.File.\". This is no longer the case when a form contains more than one file part, due to this coalescing of parts into a single file. The previous behavior of using distinct files for each form part may be reenabled with the environment variable GODEBUG=multipartfiles=distinct.\n\nUsers should be aware that multipart.ReadForm and the http.Request methods that call it do not limit the amount of disk consumed by temporary files. Callers can limit the size of form data with http.MaxBytesReader.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.19.6                  |\n| Fixed version  | 1.19.6                   |\n"
              },
              "properties": {
                "affected_version": "<1.19.6",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.19.6",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2023-2253",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-2253: Undefined Behavior for Input to API"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-2253?s=github&n=distribution&ns=github.com%2Fdocker&t=golang&vr=%3C2.8.2-beta.1",
              "help": {
                "text": "### Impact\n\nSystems that run `distribution` built after a specific commit running on memory-restricted environments can suffer from denial of service by a crafted malicious `/v2/_catalog` API endpoint request. \n\n### Patches\n\nUpgrade to at least 2.8.2-beta.1 if you are running `v2.8.x` release. If you use the code from the main branch, update at least to the commit after [f55a6552b006a381d9167e328808565dd2bf77dc](https://github.com/distribution/distribution/commit/f55a6552b006a381d9167e328808565dd2bf77dc).\n\n### Workarounds\n\nThere is no way to work around this issue without patching. Restrict access to the affected API endpoint: see the recommendations section.\n\n### References\n\n`/v2/_catalog` endpoint accepts a parameter to control the maximum amount of records returned (query string: `n`).\n\nWhen not given the default `n=100` is used.  The server trusts that `n` has an acceptable value, however when using a \nmaliciously large value, it allocates an array/slice of `n` of strings before filling the slice with data.\n\nThis behaviour was introduced ~7yrs ago [1].\n\n### Recommendation\n\nThe `/v2/_catalog` endpoint was designed specifically to do registry syncs with search or other API systems. Such an endpoint would create a lot of load on the backend system, due to overfetch required to serve a request in certain implementations.\n\nBecause of this, we strongly recommend keeping this API endpoint behind heightened privilege and avoiding leaving it exposed to the internet.\n\n###  For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in [distribution repository](https://github.com/distribution/distribution)\n* Email us at [cncf-distribution-security@lists.cncf.io](mailto:cncf-distribution-security@lists.cncf.io)\n\n[1] [faulty commit](https://github.com/distribution/distribution/blob/b7e26bac741c76cb792f8e14c41a2163b5dae8df/registry/handlers/catalog.go#L45)\n",
                "markdown": "> ### Impact\n\nSystems that run `distribution` built after a specific commit running on memory-restricted environments can suffer from denial of service by a crafted malicious `/v2/_catalog` API endpoint request. \n\n### Patches\n\nUpgrade to at least 2.8.2-beta.1 if you are running `v2.8.x` release. If you use the code from the main branch, update at least to the commit after [f55a6552b006a381d9167e328808565dd2bf77dc](https://github.com/distribution/distribution/commit/f55a6552b006a381d9167e328808565dd2bf77dc).\n\n### Workarounds\n\nThere is no way to work around this issue without patching. Restrict access to the affected API endpoint: see the recommendations section.\n\n### References\n\n`/v2/_catalog` endpoint accepts a parameter to control the maximum amount of records returned (query string: `n`).\n\nWhen not given the default `n=100` is used.  The server trusts that `n` has an acceptable value, however when using a \nmaliciously large value, it allocates an array/slice of `n` of strings before filling the slice with data.\n\nThis behaviour was introduced ~7yrs ago [1].\n\n### Recommendation\n\nThe `/v2/_catalog` endpoint was designed specifically to do registry syncs with search or other API systems. Such an endpoint would create a lot of load on the backend system, due to overfetch required to serve a request in certain implementations.\n\nBecause of this, we strongly recommend keeping this API endpoint behind heightened privilege and avoiding leaving it exposed to the internet.\n\n###  For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in [distribution repository](https://github.com/distribution/distribution)\n* Email us at [cncf-distribution-security@lists.cncf.io](mailto:cncf-distribution-security@lists.cncf.io)\n\n[1] [faulty commit](https://github.com/distribution/distribution/blob/b7e26bac741c76cb792f8e14c41a2163b5dae8df/registry/handlers/catalog.go#L45)\n\n|                |                                                                         |\n|----------------|-------------------------------------------------------------------------|\n| Package        | pkg:golang/github.com/docker/distribution@2.7.1%!B(MISSING)incompatible |\n| Affected range | <2.8.2-beta.1                                                           |\n| Fixed version  | 2.8.2-beta.1                                                            |\n| CVSS Score     |                                                                     7.5 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H                            |\n"
              },
              "properties": {
                "affected_version": "<2.8.2-beta.1",
                "cvssV3": 7.5,
                "cvssV3_severity": "HIGH",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                "fixed_version": "2.8.2-beta.1",
                "purls": [
                  "pkg:golang/github.com/docker/distribution@2.7.1%2Bincompatible"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2023-24534",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-24534"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-24534?s=golang&n=stdlib&t=golang&vr=%3C1.19.8",
              "help": {
                "text": "HTTP and MIME header parsing can allocate large amounts of memory, even when parsing small inputs, potentially leading to a denial of service.\n\nCertain unusual patterns of input data can cause the common function used to parse HTTP and MIME headers to allocate substantially more memory than required to hold the parsed headers. An attacker can exploit this behavior to cause an HTTP server to allocate large amounts of memory from a small request, potentially leading to memory exhaustion and a denial of service.\n\nWith fix, header parsing now correctly allocates only the memory required to hold parsed headers.\n",
                "markdown": "> HTTP and MIME header parsing can allocate large amounts of memory, even when parsing small inputs, potentially leading to a denial of service.\n\nCertain unusual patterns of input data can cause the common function used to parse HTTP and MIME headers to allocate substantially more memory than required to hold the parsed headers. An attacker can exploit this behavior to cause an HTTP server to allocate large amounts of memory from a small request, potentially leading to memory exhaustion and a denial of service.\n\nWith fix, header parsing now correctly allocates only the memory required to hold parsed headers.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.19.8                  |\n| Fixed version  | 1.19.8                   |\n"
              },
              "properties": {
                "affected_version": "<1.19.8",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.19.8",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2023-24536",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-24536"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-24536?s=golang&n=stdlib&t=golang&vr=%3C1.19.8",
              "help": {
                "text": "Multipart form parsing can consume large amounts of CPU and memory when processing form inputs containing very large numbers of parts.\n\nThis stems from several causes:\n\n1. mime/multipart.Reader.ReadForm limits the total memory a parsed multipart form can consume. ReadForm can undercount the amount of memory consumed, leading it to accept larger inputs than intended.\n2. Limiting total memory does not account for increased pressure on the garbage collector from large numbers of small allocations in forms with many parts.\n3. ReadForm can allocate a large number of short-lived buffers, further increasing pressure on the garbage collector.\n\nThe combination of these factors can permit an attacker to cause an program that parses multipart forms to consume large amounts of CPU and memory, potentially resulting in a denial of service. This affects programs that use mime/multipart.Reader.ReadForm, as well as form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue.\n\nWith fix, ReadForm now does a better job of estimating the memory consumption of parsed forms, and performs many fewer short-lived allocations.\n\nIn addition, the fixed mime/multipart.Reader imposes the following limits on the size of parsed forms:\n\n1. Forms parsed with ReadForm may contain no more than 1000 parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxparts=.\n2. Form parts parsed with NextPart and NextRawPart may contain no more than 10,000 header fields. In addition, forms parsed with ReadForm may contain no more than 10,000 header fields across all parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxheaders=.\n",
                "markdown": "> Multipart form parsing can consume large amounts of CPU and memory when processing form inputs containing very large numbers of parts.\n\nThis stems from several causes:\n\n1. mime/multipart.Reader.ReadForm limits the total memory a parsed multipart form can consume. ReadForm can undercount the amount of memory consumed, leading it to accept larger inputs than intended.\n2. Limiting total memory does not account for increased pressure on the garbage collector from large numbers of small allocations in forms with many parts.\n3. ReadForm can allocate a large number of short-lived buffers, further increasing pressure on the garbage collector.\n\nThe combination of these factors can permit an attacker to cause an program that parses multipart forms to consume large amounts of CPU and memory, potentially resulting in a denial of service. This affects programs that use mime/multipart.Reader.ReadForm, as well as form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue.\n\nWith fix, ReadForm now does a better job of estimating the memory consumption of parsed forms, and performs many fewer short-lived allocations.\n\nIn addition, the fixed mime/multipart.Reader imposes the following limits on the size of parsed forms:\n\n1. Forms parsed with ReadForm may contain no more than 1000 parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxparts=.\n2. Form parts parsed with NextPart and NextRawPart may contain no more than 10,000 header fields. In addition, forms parsed with ReadForm may contain no more than 10,000 header fields across all parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxheaders=.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.19.8                  |\n| Fixed version  | 1.19.8                   |\n"
              },
              "properties": {
                "affected_version": "<1.19.8",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.19.8",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2023-24537",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-24537"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-24537?s=golang&n=stdlib&t=golang&vr=%3C1.19.8",
              "help": {
                "text": "Calling any of the Parse functions on Go source code which contains //line directives with very large line numbers can cause an infinite loop due to integer overflow.\n",
                "markdown": "> Calling any of the Parse functions on Go source code which contains //line directives with very large line numbers can cause an infinite loop due to integer overflow.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.19.8                  |\n| Fixed version  | 1.19.8                   |\n"
              },
              "properties": {
                "affected_version": "<1.19.8",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.19.8",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2023-39325",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-39325"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-39325?s=golang&n=stdlib&t=golang&vr=%3C1.20.10",
              "help": {
                "text": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing.\n\nWith the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection.\n\nThis issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2.\n\nThe default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.\n",
                "markdown": "> A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing.\n\nWith the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection.\n\nThis issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2.\n\nThe default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.20.10                 |\n| Fixed version  | 1.20.10                  |\n"
              },
              "properties": {
                "affected_version": "<1.20.10",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.20.10",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2023-45283",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-45283"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-45283?s=golang&n=stdlib&t=golang&vr=%3C1.20.11",
              "help": {
                "text": "The filepath package does not recognize paths with a \\??\\ prefix as special.\n\nOn Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x.\n\nBefore fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b.\n\nSimilarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b.\n\nIn addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name.\n\nUPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored.\n",
                "markdown": "> The filepath package does not recognize paths with a \\??\\ prefix as special.\n\nOn Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x.\n\nBefore fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b.\n\nSimilarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b.\n\nIn addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name.\n\nUPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.20.11                 |\n| Fixed version  | 1.20.11                  |\n"
              },
              "properties": {
                "affected_version": "<1.20.11",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.20.11",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2023-45287",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-45287"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-45287?s=golang&n=stdlib&t=golang&vr=%3C1.20.0",
              "help": {
                "text": "Before Go 1.20, the RSA based TLS key exchanges used the math/big library, which is not constant time. RSA blinding was applied to prevent timing attacks, but analysis shows this may not have been fully effective. In particular it appears as if the removal of PKCS#1 padding may leak timing information, which in turn could be used to recover session key bits.\n\nIn Go 1.20, the crypto/tls library switched to a fully constant time RSA implementation, which we do not believe exhibits any timing side channels.\n",
                "markdown": "> Before Go 1.20, the RSA based TLS key exchanges used the math/big library, which is not constant time. RSA blinding was applied to prevent timing attacks, but analysis shows this may not have been fully effective. In particular it appears as if the removal of PKCS#1 padding may leak timing information, which in turn could be used to recover session key bits.\n\nIn Go 1.20, the crypto/tls library switched to a fully constant time RSA implementation, which we do not believe exhibits any timing side channels.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.20.0                  |\n| Fixed version  | 1.20.0                   |\n"
              },
              "properties": {
                "affected_version": "<1.20.0",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.20.0",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2023-49568",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-49568: Improper Input Validation"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-49568?s=github&n=go-git.v4&ns=gopkg.in%2Fsrc-d&t=golang&vr=%3E%3D4.7.1",
              "help": {
                "text": "### Impact\nA denial of service (DoS) vulnerability was discovered in go-git versions prior to `v5.11`. This vulnerability allows an attacker to perform denial of service attacks by providing specially crafted responses from a Git server which triggers resource exhaustion in `go-git` clients. \n\nApplications using only the in-memory filesystem supported by `go-git` are not affected by this vulnerability.\nThis is a `go-git` implementation issue and does not affect the upstream `git` cli.\n\n### Patches\nUsers running versions of `go-git` from `v4` and above are recommended to upgrade to `v5.11` in order to mitigate this vulnerability.\n\n### Workarounds\nIn cases where a bump to the latest version of `go-git` is not possible, we recommend limiting its use to only trust-worthy Git servers.\n\n## Credit\nThanks to Ionut Lalu for responsibly disclosing this vulnerability to us.\n\n### References\n- [GHSA-mw99-9chc-xw7r](https://github.com/go-git/go-git/security/advisories/GHSA-mw99-9chc-xw7r)\n\n",
                "markdown": "> ### Impact\nA denial of service (DoS) vulnerability was discovered in go-git versions prior to `v5.11`. This vulnerability allows an attacker to perform denial of service attacks by providing specially crafted responses from a Git server which triggers resource exhaustion in `go-git` clients. \n\nApplications using only the in-memory filesystem supported by `go-git` are not affected by this vulnerability.\nThis is a `go-git` implementation issue and does not affect the upstream `git` cli.\n\n### Patches\nUsers running versions of `go-git` from `v4` and above are recommended to upgrade to `v5.11` in order to mitigate this vulnerability.\n\n### Workarounds\nIn cases where a bump to the latest version of `go-git` is not possible, we recommend limiting its use to only trust-worthy Git servers.\n\n## Credit\nThanks to Ionut Lalu for responsibly disclosing this vulnerability to us.\n\n### References\n- [GHSA-mw99-9chc-xw7r](https://github.com/go-git/go-git/security/advisories/GHSA-mw99-9chc-xw7r)\n\n\n|                |                                              |\n|----------------|----------------------------------------------|\n| Package        | pkg:golang/gopkg.in/src-d/go-git.v4@4.13.1   |\n| Affected range | >=4.7.1                                      |\n| Fixed version  | not fixed                                    |\n| CVSS Score     |                                          7.5 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H |\n"
              },
              "properties": {
                "affected_version": ">=4.7.1",
                "cvssV3": 7.5,
                "cvssV3_severity": "HIGH",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                "fixed_version": "not fixed",
                "purls": [
                  "pkg:golang/gopkg.in/src-d/go-git.v4@4.13.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "GHSA-m425-mq94-257g",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "GHSA-m425-mq94-257g"
              },
              "helpUri": "https://scout.docker.com/v/GHSA-m425-mq94-257g?s=github&n=grpc&ns=google.golang.org&t=golang&vr=%3C1.56.3",
              "help": {
                "text": "### Impact\nIn affected releases of gRPC-Go, it is possible for an attacker to send HTTP/2 requests, cancel them, and send subsequent requests, which is valid by the HTTP/2 protocol, but would cause the gRPC-Go server to launch more concurrent method handlers than the configured maximum stream limit.\n\n### Patches\nThis vulnerability was addressed by #6703 and has been included in patch releases: 1.56.3, 1.57.1, 1.58.3.  It is also included in the latest release, 1.59.0.\n\nAlong with applying the patch, users should also ensure they are using the `grpc.MaxConcurrentStreams` server option to apply a limit to the server's resources used for any single connection.\n\n### Workarounds\nNone.\n\n### References\n#6703\n\n",
                "markdown": "> ### Impact\nIn affected releases of gRPC-Go, it is possible for an attacker to send HTTP/2 requests, cancel them, and send subsequent requests, which is valid by the HTTP/2 protocol, but would cause the gRPC-Go server to launch more concurrent method handlers than the configured maximum stream limit.\n\n### Patches\nThis vulnerability was addressed by #6703 and has been included in patch releases: 1.56.3, 1.57.1, 1.58.3.  It is also included in the latest release, 1.59.0.\n\nAlong with applying the patch, users should also ensure they are using the `grpc.MaxConcurrentStreams` server option to apply a limit to the server's resources used for any single connection.\n\n### Workarounds\nNone.\n\n### References\n#6703\n\n\n|                |                                              |\n|----------------|----------------------------------------------|\n| Package        | pkg:golang/google.golang.org/grpc@1.22.1     |\n| Affected range | <1.56.3                                      |\n| Fixed version  | 1.56.3                                       |\n| CVSS Score     |                                          7.5 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H |\n"
              },
              "properties": {
                "affected_version": "<1.56.3",
                "cvssV3": 7.5,
                "cvssV3_severity": "HIGH",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                "fixed_version": "1.56.3",
                "purls": [
                  "pkg:golang/google.golang.org/grpc@1.22.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2021-30465",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-30465: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2021-30465?s=github&n=runc&ns=github.com%2Fopencontainers&t=golang&vr=%3C0.0.0-20210519065900-b9ee9c631459",
              "help": {
                "text": "### Summary\n\nrunc 1.0.0-rc94 and earlier are vulnerable to a symlink exchange attack whereby\nan attacker can request a seemingly-innocuous container configuration that\nactually results in the host filesystem being bind-mounted into the container\n(allowing for a container escape). CVE-2021-30465 has been assigned for this\nissue.\n\nAn attacker must have the ability to start containers using some kind of custom\nvolume configuration, and while recommended container hardening mechanisms such\nas LSMs (AppArmor/SELinux) and user namespaces will restrict the amount of\ndamage an attacker could do, they do not block this attack outright. We have a\nreproducer using Kubernetes (and the below description mentions\nKubernetes-specific paths), but this is not a Kubernetes-specific issue.\n\nThe now-released [runc v1.0.0-rc95][release] contains a fix for this issue, we\nrecommend users update as soon as possible.\n\n[release]: https://github.com/opencontainers/runc/releases/tag/v1.0.0-rc95\n\n### Details\n\nIn circumstances where a container is being started, and runc is mounting\ninside a volume shared with another container (which is conducting a\nsymlink-exchange attack), runc can be tricked into mounting outside of the\ncontainer rootfs by swapping the target of a mount with a symlink due to a\ntime-of-check-to-time-of-use (TOCTTOU) flaw. This is fairly similar in style to\nprevious TOCTTOU attacks (and is a problem we are working on solving with\nlibpathrs).\n\nHowever, this alone is not useful because this happens inside a mount namespace\nwith `MS_SLAVE` propagation applied to `/` (meaning that the mount doesn't\nappear on the host -- it's only a \"host-side mount\" inside the container's\nnamespace). To exploit this, you must have additional mount entries in the\nconfiguration that use some subpath of the mounted-over host path as a source\nfor a subsequent mount.\n\nHowever, it turns out with some container orchestrators (such as Kubernetes --\nthough it is very likely that other downstream users of runc could have similar\nbehaviour be accessible to untrusted users), the existence of additional volume\nmanagement infrastructure allows this attack to be applied to gain access to\nthe host filesystem without requiring the attacker to have completely arbitrary\ncontrol over container configuration.\n\nIn the case of Kubernetes, this is exploitable by creating a symlink in a\nvolume to the top-level (well-known) directory where volumes are sourced from\n(for instance,\n`/var/lib/kubelet/pods/$MY_POD_UID/volumes/kubernetes.io~empty-dir`), and then\nusing that symlink as the target of a mount. The source of the mount is an\nattacker controlled directory, and thus the source directory from which\nsubsequent mounts will occur is an attacker-controlled directory. Thus the\nattacker can first place a symlink to `/` in their malicious source directory\nwith the name of a volume, and a subsequent mount in the container will\nbind-mount `/` into the container.\n\nApplying this attack requires the attacker to start containers with a slightly\npeculiar volume configuration (though not explicitly malicious-looking such as\nbind-mounting `/` into the container explicitly), and be able to run malicious\ncode in a container that shares volumes with said volume configuration. It\nhelps the attacker if the host paths used for volume management are well known,\nthough this is not a hard requirement.\n\n### Patches\nThis has been patched in runc 1.0.0-rc95, and users should upgrade as soon as\npossible. The patch itself can be found [here](https://github.com/opencontainers/runc/commit/0ca91f44f1664da834bc61115a849b56d22f595f).\n\n### Workarounds\n\nThere are no known workarounds for this issue.\n\nHowever, users who enforce running containers with more confined security\nprofiles (such as reduced capabilities, not running code as root in the\ncontainer, user namespaces, AppArmor/SELinux, and seccomp) will restrict what\nan attacker can do in the case of a container breakout -- we recommend users\nmake use of strict security profiles if possible (most notably user namespaces\n-- which can massively restrict the impact a container breakout can have on the\nhost system).\n\n### References\n* [commit](https://github.com/opencontainers/runc/commit/0ca91f44f1664da834bc61115a849b56d22f595f)\n* [seclists public disclosure](https://www.openwall.com/lists/oss-security/2021/05/19/2)\n\n### Credit\n\nThanks to Etienne Champetier for discovering and disclosing this vulnerability,\nto Noah Meyerhans for writing the first draft of this patch, and to Samuel Karp\nfor testing it.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in [our issue tracker](https://github.com/opencontainers/runc/issues).\n* Email us at <security@opencontainers.org>.\n",
                "markdown": "> ### Summary\n\nrunc 1.0.0-rc94 and earlier are vulnerable to a symlink exchange attack whereby\nan attacker can request a seemingly-innocuous container configuration that\nactually results in the host filesystem being bind-mounted into the container\n(allowing for a container escape). CVE-2021-30465 has been assigned for this\nissue.\n\nAn attacker must have the ability to start containers using some kind of custom\nvolume configuration, and while recommended container hardening mechanisms such\nas LSMs (AppArmor/SELinux) and user namespaces will restrict the amount of\ndamage an attacker could do, they do not block this attack outright. We have a\nreproducer using Kubernetes (and the below description mentions\nKubernetes-specific paths), but this is not a Kubernetes-specific issue.\n\nThe now-released [runc v1.0.0-rc95][release] contains a fix for this issue, we\nrecommend users update as soon as possible.\n\n[release]: https://github.com/opencontainers/runc/releases/tag/v1.0.0-rc95\n\n### Details\n\nIn circumstances where a container is being started, and runc is mounting\ninside a volume shared with another container (which is conducting a\nsymlink-exchange attack), runc can be tricked into mounting outside of the\ncontainer rootfs by swapping the target of a mount with a symlink due to a\ntime-of-check-to-time-of-use (TOCTTOU) flaw. This is fairly similar in style to\nprevious TOCTTOU attacks (and is a problem we are working on solving with\nlibpathrs).\n\nHowever, this alone is not useful because this happens inside a mount namespace\nwith `MS_SLAVE` propagation applied to `/` (meaning that the mount doesn't\nappear on the host -- it's only a \"host-side mount\" inside the container's\nnamespace). To exploit this, you must have additional mount entries in the\nconfiguration that use some subpath of the mounted-over host path as a source\nfor a subsequent mount.\n\nHowever, it turns out with some container orchestrators (such as Kubernetes --\nthough it is very likely that other downstream users of runc could have similar\nbehaviour be accessible to untrusted users), the existence of additional volume\nmanagement infrastructure allows this attack to be applied to gain access to\nthe host filesystem without requiring the attacker to have completely arbitrary\ncontrol over container configuration.\n\nIn the case of Kubernetes, this is exploitable by creating a symlink in a\nvolume to the top-level (well-known) directory where volumes are sourced from\n(for instance,\n`/var/lib/kubelet/pods/$MY_POD_UID/volumes/kubernetes.io~empty-dir`), and then\nusing that symlink as the target of a mount. The source of the mount is an\nattacker controlled directory, and thus the source directory from which\nsubsequent mounts will occur is an attacker-controlled directory. Thus the\nattacker can first place a symlink to `/` in their malicious source directory\nwith the name of a volume, and a subsequent mount in the container will\nbind-mount `/` into the container.\n\nApplying this attack requires the attacker to start containers with a slightly\npeculiar volume configuration (though not explicitly malicious-looking such as\nbind-mounting `/` into the container explicitly), and be able to run malicious\ncode in a container that shares volumes with said volume configuration. It\nhelps the attacker if the host paths used for volume management are well known,\nthough this is not a hard requirement.\n\n### Patches\nThis has been patched in runc 1.0.0-rc95, and users should upgrade as soon as\npossible. The patch itself can be found [here](https://github.com/opencontainers/runc/commit/0ca91f44f1664da834bc61115a849b56d22f595f).\n\n### Workarounds\n\nThere are no known workarounds for this issue.\n\nHowever, users who enforce running containers with more confined security\nprofiles (such as reduced capabilities, not running code as root in the\ncontainer, user namespaces, AppArmor/SELinux, and seccomp) will restrict what\nan attacker can do in the case of a container breakout -- we recommend users\nmake use of strict security profiles if possible (most notably user namespaces\n-- which can massively restrict the impact a container breakout can have on the\nhost system).\n\n### References\n* [commit](https://github.com/opencontainers/runc/commit/0ca91f44f1664da834bc61115a849b56d22f595f)\n* [seclists public disclosure](https://www.openwall.com/lists/oss-security/2021/05/19/2)\n\n### Credit\n\nThanks to Etienne Champetier for discovering and disclosing this vulnerability,\nto Noah Meyerhans for writing the first draft of this patch, and to Samuel Karp\nfor testing it.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n* Open an issue in [our issue tracker](https://github.com/opencontainers/runc/issues).\n* Email us at <security@opencontainers.org>.\n\n|                |                                                                             |\n|----------------|-----------------------------------------------------------------------------|\n| Package        | pkg:golang/github.com/opencontainers/runc@0.0.0-20161109192122-51371867a01c |\n| Affected range | <0.0.0-20210519065900-b9ee9c631459                                          |\n| Fixed version  | 0.0.0-20210519065900-b9ee9c631459                                           |\n| CVSS Score     |                                                                         7.6 |\n| CVSS Vector    | CVSS:3.1/AV:A/AC:L/PR:L/UI:N/S:C/C:H/I:L/A:N                                |\n"
              },
              "properties": {
                "affected_version": "<0.0.0-20210519065900-b9ee9c631459",
                "cvssV3": 7.6,
                "cvssV3_severity": "HIGH",
                "cvssV3_vector": "CVSS:3.1/AV:A/AC:L/PR:L/UI:N/S:C/C:H/I:L/A:N",
                "fixed_version": "0.0.0-20210519065900-b9ee9c631459",
                "purls": [
                  "pkg:golang/github.com/opencontainers/runc@0.0.0-20161109192122-51371867a01c"
                ],
                "security-severity": "7.6",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-30580",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-30580"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-30580?s=golang&n=stdlib&t=golang&vr=%3C1.17.11",
              "help": {
                "text": "On Windows, executing Cmd.Run, Cmd.Start, Cmd.Output, or Cmd.CombinedOutput when Cmd.Path is unset will unintentionally trigger execution of any binaries in the working directory named either \"..com\" or \"..exe\".\n",
                "markdown": "> On Windows, executing Cmd.Run, Cmd.Start, Cmd.Output, or Cmd.CombinedOutput when Cmd.Path is unset will unintentionally trigger execution of any binaries in the working directory named either \"..com\" or \"..exe\".\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.17.11                 |\n| Fixed version  | 1.17.11                  |\n"
              },
              "properties": {
                "affected_version": "<1.17.11",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.17.11",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.8",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2023-29403",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-29403"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-29403?s=golang&n=stdlib&t=golang&vr=%3C1.19.10",
              "help": {
                "text": "On Unix platforms, the Go runtime does not behave differently when a binary is run with the setuid/setgid bits. This can be dangerous in certain cases, such as when dumping memory state, or assuming the status of standard i/o file descriptors.\n\nIf a setuid/setgid binary is executed with standard I/O file descriptors closed, opening any files can result in unexpected content being read or written with elevated privileges. Similarly, if a setuid/setgid program is terminated, either via panic or signal, it may leak the contents of its registers.\n",
                "markdown": "> On Unix platforms, the Go runtime does not behave differently when a binary is run with the setuid/setgid bits. This can be dangerous in certain cases, such as when dumping memory state, or assuming the status of standard i/o file descriptors.\n\nIf a setuid/setgid binary is executed with standard I/O file descriptors closed, opening any files can result in unexpected content being read or written with elevated privileges. Similarly, if a setuid/setgid program is terminated, either via panic or signal, it may leak the contents of its registers.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.19.10                 |\n| Fixed version  | 1.19.10                  |\n"
              },
              "properties": {
                "affected_version": "<1.19.10",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.19.10",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "7.8",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2020-0601",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-0601"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2020-0601?s=golang&n=stdlib&t=golang&vr=%3E%3D1.13.0-0%2C%3C1.13.7",
              "help": {
                "text": "A Windows vulnerability allows attackers to spoof valid certificate chains when the system root store is in use.\n\nA workaround is present in Go 1.12.6+ and Go 1.13.7+, but affected users should additionally install the Windows security update to protect their system.\n\nSee https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2020-0601 for details on the Windows vulnerability.\n",
                "markdown": "> A Windows vulnerability allows attackers to spoof valid certificate chains when the system root store is in use.\n\nA workaround is present in Go 1.12.6+ and Go 1.13.7+, but affected users should additionally install the Windows security update to protect their system.\n\nSee https://msrc.microsoft.com/update-guide/en-US/vulnerability/CVE-2020-0601 for details on the Windows vulnerability.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | >=1.13.0-0,<1.13.7       |\n| Fixed version  | 1.13.7                   |\n"
              },
              "properties": {
                "affected_version": ">=1.13.0-0,<1.13.7",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.13.7",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "8.1",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2021-3121",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-3121: Improper Validation of Array Index"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2021-3121?s=github&n=protobuf&ns=github.com%2Fgogo&t=golang&vr=%3C1.3.2",
              "help": {
                "text": "An issue was discovered in GoGo Protobuf before 1.3.2. plugin/unmarshal/unmarshal.go lacks certain index validation, aka the \"skippy peanut butter\" issue.\n",
                "markdown": "> An issue was discovered in GoGo Protobuf before 1.3.2. plugin/unmarshal/unmarshal.go lacks certain index validation, aka the \"skippy peanut butter\" issue.\n\n|                |                                                                         |\n|----------------|-------------------------------------------------------------------------|\n| Package        | pkg:golang/github.com/gogo/protobuf@1.2.2-0.20190723190241-65acae22fc9d |\n| Affected range | <1.3.2                                                                  |\n| Fixed version  | 1.3.2                                                                   |\n| CVSS Score     |                                                                     8.6 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:H                            |\n"
              },
              "properties": {
                "affected_version": "<1.3.2",
                "cvssV3": 8.6,
                "cvssV3_severity": "HIGH",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:H",
                "fixed_version": "1.3.2",
                "purls": [
                  "pkg:golang/github.com/gogo/protobuf@1.2.2-0.20190723190241-65acae22fc9d"
                ],
                "security-severity": "8.6",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-23806",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-23806"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-23806?s=golang&n=stdlib&t=golang&vr=%3C1.16.14",
              "help": {
                "text": "Some big.Int values that are not valid field elements (negative or overflowing) might cause Curve.IsOnCurve to incorrectly return true. Operating on those values may cause a panic or an invalid curve operation. Note that Unmarshal will never return such values.\n",
                "markdown": "> Some big.Int values that are not valid field elements (negative or overflowing) might cause Curve.IsOnCurve to incorrectly return true. Operating on those values may cause a panic or an invalid curve operation. Note that Unmarshal will never return such values.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.16.14                 |\n| Fixed version  | 1.16.14                  |\n"
              },
              "properties": {
                "affected_version": "<1.16.14",
                "cvssV3_severity": "CRITICAL",
                "fixed_version": "1.16.14",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "9.1",
                "tags": [
                  "CRITICAL"
                ]
              }
            },
            {
              "id": "CVE-2023-24538",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-24538"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-24538?s=golang&n=stdlib&t=golang&vr=%3C1.19.8",
              "help": {
                "text": "Templates do not properly consider backticks (`) as Javascript string delimiters, and do not escape them as expected.\n\nBackticks are used, since ES6, for JS template literals. If a template contains a Go template action within a Javascript template literal, the contents of the action can be used to terminate the literal, injecting arbitrary Javascript code into the Go template.\n\nAs ES6 template literals are rather complex, and themselves can do string interpolation, the decision was made to simply disallow Go template actions from being used inside of them (e.g. \"var a = {{.}}\"), since there is no obviously safe way to allow this behavior. This takes the same approach as github.com/google/safehtml.\n\nWith fix, Template.Parse returns an Error when it encounters templates like this, with an ErrorCode of value 12. This ErrorCode is currently unexported, but will be exported in the release of Go 1.21.\n\nUsers who rely on the previous behavior can re-enable it using the GODEBUG flag jstmpllitinterp=1, with the caveat that backticks will now be escaped. This should be used with caution.\n",
                "markdown": "> Templates do not properly consider backticks (`) as Javascript string delimiters, and do not escape them as expected.\n\nBackticks are used, since ES6, for JS template literals. If a template contains a Go template action within a Javascript template literal, the contents of the action can be used to terminate the literal, injecting arbitrary Javascript code into the Go template.\n\nAs ES6 template literals are rather complex, and themselves can do string interpolation, the decision was made to simply disallow Go template actions from being used inside of them (e.g. \"var a = {{.}}\"), since there is no obviously safe way to allow this behavior. This takes the same approach as github.com/google/safehtml.\n\nWith fix, Template.Parse returns an Error when it encounters templates like this, with an ErrorCode of value 12. This ErrorCode is currently unexported, but will be exported in the release of Go 1.21.\n\nUsers who rely on the previous behavior can re-enable it using the GODEBUG flag jstmpllitinterp=1, with the caveat that backticks will now be escaped. This should be used with caution.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.19.8                  |\n| Fixed version  | 1.19.8                   |\n"
              },
              "properties": {
                "affected_version": "<1.19.8",
                "cvssV3_severity": "CRITICAL",
                "fixed_version": "1.19.8",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "9.8",
                "tags": [
                  "CRITICAL"
                ]
              }
            },
            {
              "id": "CVE-2023-24540",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-24540"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-24540?s=golang&n=stdlib&t=golang&vr=%3C1.19.9",
              "help": {
                "text": "Not all valid JavaScript whitespace characters are considered to be whitespace. Templates containing whitespace characters outside of the character set \"\\t\\n\\f\\r\\u0020\\u2028\\u2029\" in JavaScript contexts that also contain actions may not be properly sanitized during execution.\n",
                "markdown": "> Not all valid JavaScript whitespace characters are considered to be whitespace. Templates containing whitespace characters outside of the character set \"\\t\\n\\f\\r\\u0020\\u2028\\u2029\" in JavaScript contexts that also contain actions may not be properly sanitized during execution.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.13.1 |\n| Affected range | <1.19.9                  |\n| Fixed version  | 1.19.9                   |\n"
              },
              "properties": {
                "affected_version": "<1.19.9",
                "cvssV3_severity": "CRITICAL",
                "fixed_version": "1.19.9",
                "purls": [
                  "pkg:golang/stdlib@1.13.1"
                ],
                "security-severity": "9.8",
                "tags": [
                  "CRITICAL"
                ]
              }
            },
            {
              "id": "CVE-2023-49569",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-49569: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-49569?s=github&n=go-git.v4&ns=gopkg.in%2Fsrc-d&t=golang&vr=%3E%3D4.7.1",
              "help": {
                "text": "### Impact\nA path traversal vulnerability was discovered in go-git versions prior to `v5.11`. This vulnerability allows an attacker to create and amend files across the filesystem. In the worse case scenario, remote code execution could be achieved.\n\nApplications are only affected if they are using the [ChrootOS](https://pkg.go.dev/github.com/go-git/go-billy/v5/osfs#ChrootOS), which is the default when using \"Plain\" versions of Open and Clone funcs (e.g. PlainClone). Applications using [BoundOS](https://pkg.go.dev/github.com/go-git/go-billy/v5/osfs#BoundOS) or in-memory filesystems are not affected by this issue.\nThis is a `go-git` implementation issue and does not affect the upstream `git` cli.\n\n### Patches\nUsers running versions of `go-git` from `v4` and above are recommended to upgrade to `v5.11` in order to mitigate this vulnerability.\n\n### Workarounds\nIn cases where a bump to the latest version of `go-git` is not possible in a timely manner, we recommend limiting its use to only trust-worthy Git servers.\n\n## Credit\nThanks to Ionut Lalu for responsibly disclosing this vulnerability to us.\n",
                "markdown": "> ### Impact\nA path traversal vulnerability was discovered in go-git versions prior to `v5.11`. This vulnerability allows an attacker to create and amend files across the filesystem. In the worse case scenario, remote code execution could be achieved.\n\nApplications are only affected if they are using the [ChrootOS](https://pkg.go.dev/github.com/go-git/go-billy/v5/osfs#ChrootOS), which is the default when using \"Plain\" versions of Open and Clone funcs (e.g. PlainClone). Applications using [BoundOS](https://pkg.go.dev/github.com/go-git/go-billy/v5/osfs#BoundOS) or in-memory filesystems are not affected by this issue.\nThis is a `go-git` implementation issue and does not affect the upstream `git` cli.\n\n### Patches\nUsers running versions of `go-git` from `v4` and above are recommended to upgrade to `v5.11` in order to mitigate this vulnerability.\n\n### Workarounds\nIn cases where a bump to the latest version of `go-git` is not possible in a timely manner, we recommend limiting its use to only trust-worthy Git servers.\n\n## Credit\nThanks to Ionut Lalu for responsibly disclosing this vulnerability to us.\n\n|                |                                              |\n|----------------|----------------------------------------------|\n| Package        | pkg:golang/gopkg.in/src-d/go-git.v4@4.13.1   |\n| Affected range | >=4.7.1                                      |\n| Fixed version  | not fixed                                    |\n| CVSS Score     |                                          9.8 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H |\n"
              },
              "properties": {
                "affected_version": ">=4.7.1",
                "cvssV3": 9.8,
                "cvssV3_severity": "CRITICAL",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
                "fixed_version": "not fixed",
                "purls": [
                  "pkg:golang/gopkg.in/src-d/go-git.v4@4.13.1"
                ],
                "security-severity": "9.8",
                "tags": [
                  "CRITICAL"
                ]
              }
            }
          ],
          "version": "1.9.3"
        }
      },
      "results": [
        {
          "ruleId": "CVE-2023-45288",
          "ruleIndex": 0,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability   : CVE-2023-45288            \n  Severity        : UNSPECIFIED               \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.21.9                   \n  Fixed version   : 1.21.9                    \n  EPSS Score      : 0.000440                  \n  EPSS Percentile : 0.132280                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45289",
          "ruleIndex": 1,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability   : CVE-2023-45289            \n  Severity        : UNSPECIFIED               \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.21.8                   \n  Fixed version   : 1.21.8                    \n  EPSS Score      : 0.000440                  \n  EPSS Percentile : 0.102930                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45290",
          "ruleIndex": 2,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability   : CVE-2023-45290            \n  Severity        : UNSPECIFIED               \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.21.8                   \n  Fixed version   : 1.21.8                    \n  EPSS Score      : 0.000440                  \n  EPSS Percentile : 0.102930                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24783",
          "ruleIndex": 3,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability   : CVE-2024-24783            \n  Severity        : UNSPECIFIED               \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.21.8                   \n  Fixed version   : 1.21.8                    \n  EPSS Score      : 0.000440                  \n  EPSS Percentile : 0.102930                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24784",
          "ruleIndex": 4,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability   : CVE-2024-24784            \n  Severity        : UNSPECIFIED               \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.21.8                   \n  Fixed version   : 1.21.8                    \n  EPSS Score      : 0.000440                  \n  EPSS Percentile : 0.102930                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24785",
          "ruleIndex": 5,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability   : CVE-2024-24785            \n  Severity        : UNSPECIFIED               \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.21.8                   \n  Fixed version   : 1.21.8                    \n  EPSS Score      : 0.000440                  \n  EPSS Percentile : 0.102930                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24789",
          "ruleIndex": 6,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability   : CVE-2024-24789            \n  Severity        : UNSPECIFIED               \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.21.11                  \n  Fixed version   : 1.21.11                   \n  EPSS Score      : 0.000450                  \n  EPSS Percentile : 0.154300                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24790",
          "ruleIndex": 7,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability   : CVE-2024-24790            \n  Severity        : UNSPECIFIED               \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.21.11                  \n  Fixed version   : 1.21.11                   \n  EPSS Score      : 0.000450                  \n  EPSS Percentile : 0.154300                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "GMS-2021-101",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability  : GMS-2021-101                                                                       \n  Severity       : UNSPECIFIED                                                                        \n  Package        : pkg:golang/github.com/opencontainers/image-spec@0.0.0-20170515205857-f03dbe35d449  \n  Affected range : <0.0.0-20211109170610-67d2d5658fe0                                                 \n  Fixed version  : 0.0.0-20211109170610-67d2d5658fe0                                                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "GMS-2021-175",
          "ruleIndex": 9,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability  : GMS-2021-175                                       \n  Severity       : UNSPECIFIED                                        \n  Package        : pkg:golang/github.com/containerd/containerd@1.3.1  \n  Affected range : <1.4.12                                            \n  Fixed version  : 1.4.12, 1.5.8                                      \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "GMS-2021-177",
          "ruleIndex": 10,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability  : GMS-2021-177                                                                 \n  Severity       : UNSPECIFIED                                                                  \n  Package        : pkg:golang/github.com/opencontainers/runc@0.0.0-20161109192122-51371867a01c  \n  Affected range : <0.0.0-20200630152430-24a3cf88a7ae                                           \n  Fixed version  : 0.0.0-20200630152430-24a3cf88a7ae                                            \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "GMS-2022-20",
          "ruleIndex": 11,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability  : GMS-2022-20                                                              \n  Severity       : UNSPECIFIED                                                              \n  Package        : pkg:golang/github.com/docker/distribution@2.7.1%!B(MISSING)incompatible  \n  Affected range : <v2.8.0                                                                  \n  Fixed version  : v2.8.0                                                                   \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "GMS-2023-3788",
          "ruleIndex": 12,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability  : GMS-2023-3788                             \n  Severity       : UNSPECIFIED                               \n  Package        : pkg:golang/google.golang.org/grpc@1.22.1  \n  Affected range : <1.56.3                                   \n  Fixed version  : 1.56.3, 1.57.1, 1.58.3                    \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "GMS-2023-6564",
          "ruleIndex": 13,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability  : GMS-2023-6564                                      \n  Severity       : UNSPECIFIED                                        \n  Package        : pkg:golang/github.com/containerd/containerd@1.3.1  \n  Affected range : <=1.6.25                                           \n  Fixed version  : 1.6.26, 1.7.11                                     \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "GHSA-c9cp-9c75-9v8c",
          "ruleIndex": 14,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "  Vulnerability  : GHSA-c9cp-9c75-9v8c                                \n  Severity       : LOW                                                \n  Package        : pkg:golang/github.com/containerd/containerd@1.3.1  \n  Affected range : <1.5.11                                            \n  Fixed version  : 1.5.11                                             \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "GHSA-g54h-m393-cpwq",
          "ruleIndex": 15,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "  Vulnerability  : GHSA-g54h-m393-cpwq                                                          \n  Severity       : LOW                                                                          \n  Package        : pkg:golang/github.com/opencontainers/runc@0.0.0-20161109192122-51371867a01c  \n  Affected range : <0.0.0-20200630152430-24a3cf88a7ae                                           \n  Fixed version  : 0.0.0-20200630152430-24a3cf88a7ae                                            \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-25809",
          "ruleIndex": 16,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "  Vulnerability   : CVE-2023-25809                                                               \n  Severity        : LOW                                                                          \n  Package         : pkg:golang/github.com/opencontainers/runc@0.0.0-20161109192122-51371867a01c  \n  Affected range  : <0.0.0-20230329064553-f19387a6bec4                                           \n  Fixed version   : 0.0.0-20230329064553-f19387a6bec4                                            \n  CVSS Score      : 2.5                                                                          \n  CVSS Vector     : CVSS:3.1/AV:L/AC:H/PR:H/UI:N/S:C/C:N/I:N/A:L                                 \n  EPSS Score      : 0.000430                                                                     \n  EPSS Percentile : 0.089770                                                                     \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "GHSA-5j5w-g665-5m35",
          "ruleIndex": 17,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "  Vulnerability  : GHSA-5j5w-g665-5m35                                \n  Severity       : LOW                                                \n  Package        : pkg:golang/github.com/containerd/containerd@1.3.1  \n  Affected range : <1.4.12                                            \n  Fixed version  : 1.4.12                                             \n  CVSS Score     : 3.0                                                \n  CVSS Vector    : CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:N/I:L/A:N       \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "GHSA-77vh-xpmg-72qh",
          "ruleIndex": 18,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "  Vulnerability  : GHSA-77vh-xpmg-72qh                                                                \n  Severity       : LOW                                                                                \n  Package        : pkg:golang/github.com/opencontainers/image-spec@0.0.0-20170515205857-f03dbe35d449  \n  Affected range : <0.0.0-20211109170610-67d2d5658fe0                                                 \n  Fixed version  : 0.0.0-20211109170610-67d2d5658fe0                                                  \n  CVSS Score     : 3.0                                                                                \n  CVSS Vector    : CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:N/I:L/A:N                                       \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "GHSA-qq97-vm5h-rrhg",
          "ruleIndex": 19,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "  Vulnerability  : GHSA-qq97-vm5h-rrhg                                                      \n  Severity       : LOW                                                                      \n  Package        : pkg:golang/github.com/docker/distribution@2.7.1%!B(MISSING)incompatible  \n  Affected range : <2.8.0                                                                   \n  Fixed version  : 2.8.0                                                                    \n  CVSS Score     : 3.0                                                                      \n  CVSS Vector    : CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:N/I:L/A:N                             \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30629",
          "ruleIndex": 20,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "  Vulnerability   : CVE-2022-30629            \n  Severity        : LOW                       \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.17.11                  \n  Fixed version   : 1.17.11                   \n  EPSS Score      : 0.001400                  \n  EPSS Percentile : 0.498640                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "GHSA-7ww5-4wqc-m92c",
          "ruleIndex": 21,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability  : GHSA-7ww5-4wqc-m92c                                \n  Severity       : MEDIUM                                             \n  Package        : pkg:golang/github.com/containerd/containerd@1.3.1  \n  Affected range : <=1.6.25                                           \n  Fixed version  : 1.6.26                                             \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-8565",
          "ruleIndex": 22,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2020-8565                                 \n  Severity        : MEDIUM                                        \n  Package         : pkg:golang/k8s.io/client-go@0.17.2            \n  Affected range  : <0.17.16                                      \n  Fixed version   : 0.20.0-alpha.2                                \n  CVSS Score      : 4.7                                           \n  CVSS Vector     : CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:N/A:N  \n  EPSS Score      : 0.000440                                      \n  EPSS Percentile : 0.125940                                      \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-44717",
          "ruleIndex": 23,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2021-44717            \n  Severity        : MEDIUM                    \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.16.12                  \n  Fixed version   : 1.16.12                   \n  EPSS Score      : 0.002810                  \n  EPSS Percentile : 0.685420                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-32760",
          "ruleIndex": 24,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2021-32760                                     \n  Severity        : MEDIUM                                             \n  Package         : pkg:golang/github.com/containerd/containerd@1.3.1  \n  Affected range  : <1.4.8                                             \n  Fixed version   : 1.4.8                                              \n  CVSS Score      : 5.0                                                \n  CVSS Vector     : CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:L/A:L       \n  EPSS Score      : 0.001470                                           \n  EPSS Percentile : 0.508380                                           \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-15257",
          "ruleIndex": 25,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2020-15257                                     \n  Severity        : MEDIUM                                             \n  Package         : pkg:golang/github.com/containerd/containerd@1.3.1  \n  Affected range  : <1.3.9                                             \n  Fixed version   : 1.3.9                                              \n  CVSS Score      : 5.2                                                \n  CVSS Vector     : CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:N       \n  EPSS Score      : 0.000450                                           \n  EPSS Percentile : 0.154320                                           \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-14039",
          "ruleIndex": 26,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2020-14039            \n  Severity        : MEDIUM                    \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.13.13                  \n  Fixed version   : 1.13.13                   \n  EPSS Score      : 0.002180                  \n  EPSS Percentile : 0.599810                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-33197",
          "ruleIndex": 27,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2021-33197            \n  Severity        : MEDIUM                    \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.15.13                  \n  Fixed version   : 1.15.13                   \n  EPSS Score      : 0.001350                  \n  EPSS Percentile : 0.490620                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-29526",
          "ruleIndex": 28,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2022-29526            \n  Severity        : MEDIUM                    \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.17.10                  \n  Fixed version   : 1.17.10                   \n  EPSS Score      : 0.002440                  \n  EPSS Percentile : 0.646400                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-29526",
          "ruleIndex": 28,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2022-29526                                                 \n  Severity        : MEDIUM                                                         \n  Package         : pkg:golang/golang.org/x/sys@0.0.0-20190826190057-c7b8b68b1456  \n  Affected range  : <0.0.0-20220412211240-33da011f77ad                             \n  Fixed version   : 0.0.0-20220412211240-33da011f77ad                              \n  CVSS Score      : 5.3                                                            \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N                   \n  EPSS Score      : 0.002440                                                       \n  EPSS Percentile : 0.646400                                                       \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41717",
          "ruleIndex": 29,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2022-41717            \n  Severity        : MEDIUM                    \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.18.9                   \n  Fixed version   : 1.18.9                    \n  EPSS Score      : 0.002860                  \n  EPSS Percentile : 0.688640                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24532",
          "ruleIndex": 30,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2023-24532            \n  Severity        : MEDIUM                    \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.19.7                   \n  Fixed version   : 1.19.7                    \n  EPSS Score      : 0.000930                  \n  EPSS Percentile : 0.397440                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-25173",
          "ruleIndex": 31,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2023-25173                                     \n  Severity        : MEDIUM                                             \n  Package         : pkg:golang/github.com/containerd/containerd@1.3.1  \n  Affected range  : <1.5.18                                            \n  Fixed version   : 1.5.18                                             \n  CVSS Score      : 5.3                                                \n  CVSS Vector     : CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L       \n  EPSS Score      : 0.000950                                           \n  EPSS Percentile : 0.402270                                           \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29409",
          "ruleIndex": 32,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2023-29409            \n  Severity        : MEDIUM                    \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.19.12                  \n  Fixed version   : 1.19.12                   \n  EPSS Score      : 0.000600                  \n  EPSS Percentile : 0.257210                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39326",
          "ruleIndex": 33,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2023-39326            \n  Severity        : MEDIUM                    \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.20.12                  \n  Fixed version   : 1.20.12                   \n  EPSS Score      : 0.000520                  \n  EPSS Percentile : 0.202910                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-44487",
          "ruleIndex": 34,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2023-44487                                \n  Severity        : MEDIUM                                        \n  Package         : pkg:golang/google.golang.org/grpc@1.22.1      \n  Affected range  : <1.56.3                                       \n  Fixed version   : 1.56.3                                        \n  CVSS Score      : 5.3                                           \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L  \n  EPSS Score      : 0.731850                                      \n  EPSS Percentile : 0.981100                                      \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45284",
          "ruleIndex": 35,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2023-45284            \n  Severity        : MEDIUM                    \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.20.11                  \n  Fixed version   : 1.20.11                   \n  EPSS Score      : 0.000520                  \n  EPSS Percentile : 0.202910                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-41092",
          "ruleIndex": 36,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2021-41092                                                      \n  Severity        : MEDIUM                                                              \n  Package         : pkg:golang/github.com/docker/cli@0.0.0-20191126203649-54d085b857e9  \n  Affected range  : <0.0.0-20210923182634-c2ea9bc90bac                                  \n  Fixed version   : 0.0.0-20210923182634-c2ea9bc90bac                                   \n  CVSS Score      : 5.4                                                                 \n  CVSS Vector     : CVSS:3.1/AV:N/AC:H/PR:H/UI:R/S:C/C:H/I:N/A:N                        \n  EPSS Score      : 0.001170                                                            \n  EPSS Percentile : 0.456710                                                            \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1962",
          "ruleIndex": 37,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2022-1962             \n  Severity        : MEDIUM                    \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.17.12                  \n  Fixed version   : 1.17.12                   \n  EPSS Score      : 0.000630                  \n  EPSS Percentile : 0.269710                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-31030",
          "ruleIndex": 38,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2022-31030                                     \n  Severity        : MEDIUM                                             \n  Package         : pkg:golang/github.com/containerd/containerd@1.3.1  \n  Affected range  : <1.5.13                                            \n  Fixed version   : 1.5.13                                             \n  CVSS Score      : 5.5                                                \n  CVSS Vector     : CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H       \n  EPSS Score      : 0.000450                                           \n  EPSS Percentile : 0.141750                                           \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-25153",
          "ruleIndex": 39,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2023-25153                                     \n  Severity        : MEDIUM                                             \n  Package         : pkg:golang/github.com/containerd/containerd@1.3.1  \n  Affected range  : <1.5.18                                            \n  Fixed version   : 1.5.18                                             \n  CVSS Score      : 5.5                                                \n  CVSS Vector     : CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H       \n  EPSS Score      : 0.000520                                           \n  EPSS Percentile : 0.203650                                           \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23471",
          "ruleIndex": 40,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2022-23471                                     \n  Severity        : MEDIUM                                             \n  Package         : pkg:golang/github.com/containerd/containerd@1.3.1  \n  Affected range  : <1.5.16                                            \n  Fixed version   : 1.5.16                                             \n  CVSS Score      : 5.7                                                \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:N/A:H       \n  EPSS Score      : 0.000790                                           \n  EPSS Percentile : 0.342530                                           \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-15586",
          "ruleIndex": 41,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2020-15586            \n  Severity        : MEDIUM                    \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.13.13                  \n  Fixed version   : 1.13.13                   \n  EPSS Score      : 0.009520                  \n  EPSS Percentile : 0.832540                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-31525",
          "ruleIndex": 42,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2021-31525                                                 \n  Severity        : MEDIUM                                                         \n  Package         : pkg:golang/golang.org/x/net@0.0.0-20191126235420-ef20fe5d7933  \n  Affected range  : <0.0.0-20210428140749-89ef3d95e781                             \n  Fixed version   : 0.0.0-20210428140749-89ef3d95e781                              \n  CVSS Score      : 5.9                                                            \n  CVSS Vector     : CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H                   \n  EPSS Score      : 0.008500                                                       \n  EPSS Percentile : 0.822590                                                       \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-31525",
          "ruleIndex": 42,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2021-31525            \n  Severity        : MEDIUM                    \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.15.12                  \n  Fixed version   : 1.15.12                   \n  EPSS Score      : 0.008500                  \n  EPSS Percentile : 0.822590                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-36221",
          "ruleIndex": 43,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2021-36221            \n  Severity        : MEDIUM                    \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.15.15                  \n  Fixed version   : 1.15.15                   \n  EPSS Score      : 0.007080                  \n  EPSS Percentile : 0.804580                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-41103",
          "ruleIndex": 44,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2021-41103                                     \n  Severity        : MEDIUM                                             \n  Package         : pkg:golang/github.com/containerd/containerd@1.3.1  \n  Affected range  : <1.4.11                                            \n  Fixed version   : 1.4.11                                             \n  CVSS Score      : 5.9                                                \n  CVSS Vector     : CVSS:3.0/AV:L/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L       \n  EPSS Score      : 0.000450                                           \n  EPSS Percentile : 0.141750                                           \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-29162",
          "ruleIndex": 45,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2022-29162                                                               \n  Severity        : MEDIUM                                                                       \n  Package         : pkg:golang/github.com/opencontainers/runc@0.0.0-20161109192122-51371867a01c  \n  Affected range  : <0.0.0-20220505194949-a916309fff0f                                           \n  Fixed version   : 0.0.0-20220505194949-a916309fff0f                                            \n  CVSS Score      : 5.9                                                                          \n  CVSS Vector     : CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L                                 \n  EPSS Score      : 0.000450                                                                     \n  EPSS Percentile : 0.141750                                                                     \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-43784",
          "ruleIndex": 46,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2021-43784                                                               \n  Severity        : MEDIUM                                                                       \n  Package         : pkg:golang/github.com/opencontainers/runc@0.0.0-20161109192122-51371867a01c  \n  Affected range  : <0.0.0-20211203081737-f46b6ba2c931                                           \n  Fixed version   : 0.0.0-20211203081737-f46b6ba2c931                                            \n  CVSS Score      : 6.0                                                                          \n  CVSS Vector     : CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:L/I:L/A:L                                 \n  EPSS Score      : 0.008170                                                                     \n  EPSS Percentile : 0.819040                                                                     \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-24553",
          "ruleIndex": 47,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2020-24553            \n  Severity        : MEDIUM                    \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.14.8                   \n  Fixed version   : 1.14.8                    \n  EPSS Score      : 0.005390                  \n  EPSS Percentile : 0.773250                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-28642",
          "ruleIndex": 48,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2023-28642                                                               \n  Severity        : MEDIUM                                                                       \n  Package         : pkg:golang/github.com/opencontainers/runc@0.0.0-20161109192122-51371867a01c  \n  Affected range  : <0.0.0-20230329064553-f19387a6bec4                                           \n  Fixed version   : 0.0.0-20230329064553-f19387a6bec4                                            \n  CVSS Score      : 6.1                                                                          \n  CVSS Vector     : CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:L                                 \n  EPSS Score      : 0.000430                                                                     \n  EPSS Percentile : 0.089770                                                                     \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39318",
          "ruleIndex": 49,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2023-39318            \n  Severity        : MEDIUM                    \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.20.8                   \n  Fixed version   : 1.20.8                    \n  EPSS Score      : 0.000840                  \n  EPSS Percentile : 0.358960                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39319",
          "ruleIndex": 50,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2023-39319            \n  Severity        : MEDIUM                    \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.20.8                   \n  Fixed version   : 1.20.8                    \n  EPSS Score      : 0.000610                  \n  EPSS Percentile : 0.259730                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-21334",
          "ruleIndex": 51,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2021-21334                                     \n  Severity        : MEDIUM                                             \n  Package         : pkg:golang/github.com/containerd/containerd@1.3.1  \n  Affected range  : <1.3.10                                            \n  Fixed version   : 1.3.10                                             \n  CVSS Score      : 6.3                                                \n  CVSS Vector     : CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:N/A:N       \n  EPSS Score      : 0.001240                                           \n  EPSS Percentile : 0.469840                                           \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2016-9962",
          "ruleIndex": 52,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2016-9962                                                                \n  Severity        : MEDIUM                                                                       \n  Package         : pkg:golang/github.com/opencontainers/runc@0.0.0-20161109192122-51371867a01c  \n  Affected range  : <0.0.0-20170321022603-75f8da7c889a                                           \n  Fixed version   : 0.0.0-20170321022603-75f8da7c889a                                            \n  CVSS Score      : 6.4                                                                          \n  CVSS Vector     : CVSS:3.0/AV:L/AC:H/PR:H/UI:N/S:U/C:H/I:H/A:H                                 \n  EPSS Score      : 0.000650                                                                     \n  EPSS Percentile : 0.285360                                                                     \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-11254",
          "ruleIndex": 53,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2019-11254                                \n  Severity        : MEDIUM                                        \n  Package         : pkg:golang/gopkg.in/yaml.v2@2.2.4             \n  Affected range  : <2.2.8                                        \n  Fixed version   : 2.2.8                                         \n  CVSS Score      : 6.5                                           \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H  \n  EPSS Score      : 0.001040                                      \n  EPSS Percentile : 0.428290                                      \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3114",
          "ruleIndex": 54,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2021-3114             \n  Severity        : MEDIUM                    \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.14.14                  \n  Fixed version   : 1.14.14                   \n  EPSS Score      : 0.014350                  \n  EPSS Percentile : 0.866280                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-34558",
          "ruleIndex": 55,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2021-34558            \n  Severity        : MEDIUM                    \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.15.14                  \n  Fixed version   : 1.15.14                   \n  EPSS Score      : 0.002630                  \n  EPSS Percentile : 0.661650                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1705",
          "ruleIndex": 56,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2022-1705             \n  Severity        : MEDIUM                    \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.17.12                  \n  Fixed version   : 1.17.12                   \n  EPSS Score      : 0.001720                  \n  EPSS Percentile : 0.544360                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32148",
          "ruleIndex": 57,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2022-32148            \n  Severity        : MEDIUM                    \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.17.12                  \n  Fixed version   : 1.17.12                   \n  EPSS Score      : 0.001550                  \n  EPSS Percentile : 0.519190                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29406",
          "ruleIndex": 58,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2023-29406            \n  Severity        : MEDIUM                    \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.19.11                  \n  Fixed version   : 1.19.11                   \n  EPSS Score      : 0.000910                  \n  EPSS Percentile : 0.388510                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-8559",
          "ruleIndex": 59,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2020-8559                                 \n  Severity        : MEDIUM                                        \n  Package         : pkg:golang/k8s.io/apimachinery@0.17.2         \n  Affected range  : >=0.17.0,<0.17.9                              \n  Fixed version   : 0.17.9                                        \n  CVSS Score      : 6.8                                           \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:U/C:H/I:H/A:H  \n  EPSS Score      : 0.003410                                      \n  EPSS Percentile : 0.715110                                      \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-14040",
          "ruleIndex": 60,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2020-14040                                              \n  Severity        : MEDIUM                                                      \n  Package         : pkg:golang/golang.org/x/text@0.3.2                          \n  Affected range  : <0.3.3                                                      \n  Fixed version   : 0.3.3                                                       \n  CVSS Score      : 7.5                                                         \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H/E:P/RL:O/RC:C  \n  EPSS Score      : 0.001160                                                    \n  EPSS Percentile : 0.455960                                                    \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-3154",
          "ruleIndex": 61,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2024-3154                                                                \n  Severity        : HIGH                                                                         \n  Package         : pkg:golang/github.com/opencontainers/runc@0.0.0-20161109192122-51371867a01c  \n  Affected range  : <0.0.0-20240403104324-275e6d85f78a                                           \n  Fixed version   : 0.0.0-20240403104324-275e6d85f78a                                            \n  CVSS Score      : 7.2                                                                          \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H                                 \n  EPSS Score      : 0.000440                                                                     \n  EPSS Percentile : 0.130050                                                                     \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "GHSA-c5pj-mqfh-rvc3",
          "ruleIndex": 62,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability  : GHSA-c5pj-mqfh-rvc3                                                          \n  Severity       : HIGH                                                                         \n  Package        : pkg:golang/github.com/opencontainers/runc@0.0.0-20161109192122-51371867a01c  \n  Affected range : <0.0.0-20240403104324-275e6d85f78a                                           \n  Fixed version  : 0.0.0-20240403104324-275e6d85f78a                                            \n  CVSS Score     : 7.2                                                                          \n  CVSS Vector    : CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H                                 \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-33195",
          "ruleIndex": 63,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2021-33195            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.15.13                  \n  Fixed version   : 1.15.13                   \n  EPSS Score      : 0.005020                  \n  EPSS Percentile : 0.764720                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24539",
          "ruleIndex": 64,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2023-24539            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.19.9                   \n  Fixed version   : 1.19.9                    \n  EPSS Score      : 0.001270                  \n  EPSS Percentile : 0.475850                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29400",
          "ruleIndex": 65,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2023-29400            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.19.9                   \n  Fixed version   : 1.19.9                    \n  EPSS Score      : 0.001270                  \n  EPSS Percentile : 0.475850                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-17596",
          "ruleIndex": 66,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2019-17596            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : >=1.13.0-0,<1.13.2        \n  Fixed version   : 1.13.2                    \n  EPSS Score      : 0.004140                  \n  EPSS Percentile : 0.740450                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-16845",
          "ruleIndex": 67,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2020-16845            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.13.15                  \n  Fixed version   : 1.13.15                   \n  EPSS Score      : 0.043050                  \n  EPSS Percentile : 0.923410                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-26160",
          "ruleIndex": 68,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2020-26160                                                        \n  Severity        : HIGH                                                                  \n  Package         : pkg:golang/github.com/dgrijalva/jwt-go@3.2.0%!B(MISSING)incompatible  \n  Affected range  : <=v3.2.0                                                              \n  Fixed version   : not fixed                                                             \n  CVSS Score      : 7.5                                                                   \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N                          \n  EPSS Score      : 0.001930                                                              \n  EPSS Percentile : 0.569450                                                              \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-29652",
          "ruleIndex": 69,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2020-29652                                                    \n  Severity        : HIGH                                                              \n  Package         : pkg:golang/golang.org/x/crypto@0.0.0-20191128160524-b544559bb6d1  \n  Affected range  : <0.0.0-20201216223049-8b5274cf687f                                \n  Fixed version   : 0.0.0-20201216223049-8b5274cf687f                                 \n  CVSS Score      : 7.5                                                               \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H                      \n  EPSS Score      : 0.005420                                                          \n  EPSS Percentile : 0.773900                                                          \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-7919",
          "ruleIndex": 70,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2020-7919                                                     \n  Severity        : HIGH                                                              \n  Package         : pkg:golang/golang.org/x/crypto@0.0.0-20191128160524-b544559bb6d1  \n  Affected range  : <0.0.0-20200124225646-8b5121be2f68                                \n  Fixed version   : 0.0.0-20200124225646-8b5121be2f68                                 \n  CVSS Score      : 7.5                                                               \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H                      \n  EPSS Score      : 0.019980                                                          \n  EPSS Percentile : 0.888690                                                          \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-7919",
          "ruleIndex": 70,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2020-7919             \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : >=1.13.0-0,<1.13.7        \n  Fixed version   : 1.13.7                    \n  EPSS Score      : 0.019980                  \n  EPSS Percentile : 0.888690                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-9283",
          "ruleIndex": 71,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2020-9283                                                     \n  Severity        : HIGH                                                              \n  Package         : pkg:golang/golang.org/x/crypto@0.0.0-20191128160524-b544559bb6d1  \n  Affected range  : <0.0.0-20200220183623-bac4c82f6975                                \n  Fixed version   : 0.0.0-20200220183623-bac4c82f6975                                 \n  CVSS Score      : 7.5                                                               \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H                      \n  EPSS Score      : 0.243880                                                          \n  EPSS Percentile : 0.966410                                                          \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-27918",
          "ruleIndex": 72,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2021-27918            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.15.9                   \n  Fixed version   : 1.15.9                    \n  EPSS Score      : 0.000940                  \n  EPSS Percentile : 0.400850                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-33194",
          "ruleIndex": 73,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2021-33194                                                 \n  Severity        : HIGH                                                           \n  Package         : pkg:golang/golang.org/x/net@0.0.0-20191126235420-ef20fe5d7933  \n  Affected range  : <0.0.0-20210520170846-37e1c6afe023                             \n  Fixed version   : 0.0.0-20210520170846-37e1c6afe023                              \n  CVSS Score      : 7.5                                                            \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H                   \n  EPSS Score      : 0.001470                                                       \n  EPSS Percentile : 0.508640                                                       \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-33196",
          "ruleIndex": 74,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2021-33196            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.15.13                  \n  Fixed version   : 1.15.13                   \n  EPSS Score      : 0.002590                  \n  EPSS Percentile : 0.656890                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-33198",
          "ruleIndex": 75,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2021-33198            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.15.13                  \n  Fixed version   : 1.15.13                   \n  EPSS Score      : 0.002420                  \n  EPSS Percentile : 0.644380                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-38561",
          "ruleIndex": 76,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2021-38561                                \n  Severity        : HIGH                                          \n  Package         : pkg:golang/golang.org/x/text@0.3.2            \n  Affected range  : <0.3.7                                        \n  Fixed version   : 0.3.7                                         \n  CVSS Score      : 7.5                                           \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H  \n  EPSS Score      : 0.001010                                      \n  EPSS Percentile : 0.417830                                      \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-39293",
          "ruleIndex": 77,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2021-39293            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.16.8                   \n  Fixed version   : 1.16.8                    \n  EPSS Score      : 0.001620                  \n  EPSS Percentile : 0.529590                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-41771",
          "ruleIndex": 78,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2021-41771            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.16.10                  \n  Fixed version   : 1.16.10                   \n  EPSS Score      : 0.004060                  \n  EPSS Percentile : 0.738100                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-41772",
          "ruleIndex": 79,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2021-41772            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.16.10                  \n  Fixed version   : 1.16.10                   \n  EPSS Score      : 0.002580                  \n  EPSS Percentile : 0.656700                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-43565",
          "ruleIndex": 80,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2021-43565                                                    \n  Severity        : HIGH                                                              \n  Package         : pkg:golang/golang.org/x/crypto@0.0.0-20191128160524-b544559bb6d1  \n  Affected range  : <0.0.0-20211202192323-5770296d904e                                \n  Fixed version   : 0.0.0-20211202192323-5770296d904e                                 \n  CVSS Score      : 7.5                                                               \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H                      \n  EPSS Score      : 0.000840                                                          \n  EPSS Percentile : 0.359800                                                          \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-44716",
          "ruleIndex": 81,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2021-44716            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.16.12                  \n  Fixed version   : 1.16.12                   \n  EPSS Score      : 0.002960                  \n  EPSS Percentile : 0.694190                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-44716",
          "ruleIndex": 81,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2021-44716                                                 \n  Severity        : HIGH                                                           \n  Package         : pkg:golang/golang.org/x/net@0.0.0-20191126235420-ef20fe5d7933  \n  Affected range  : <0.0.0-20211209124913-491a49abca63                             \n  Fixed version   : 0.0.0-20211209124913-491a49abca63                              \n  EPSS Score      : 0.002960                                                       \n  EPSS Percentile : 0.694190                                                       \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-21698",
          "ruleIndex": 82,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-21698                                        \n  Severity        : HIGH                                                  \n  Package         : pkg:golang/github.com/prometheus/client_golang@1.1.0  \n  Affected range  : <1.11.1                                               \n  Fixed version   : 1.11.1                                                \n  CVSS Score      : 7.5                                                   \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H          \n  EPSS Score      : 0.004730                                              \n  EPSS Percentile : 0.757480                                              \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23648",
          "ruleIndex": 83,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-23648                                     \n  Severity        : HIGH                                               \n  Package         : pkg:golang/github.com/containerd/containerd@1.3.1  \n  Affected range  : <1.4.13                                            \n  Fixed version   : 1.4.13                                             \n  CVSS Score      : 7.5                                                \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N       \n  EPSS Score      : 0.006820                                           \n  EPSS Percentile : 0.800800                                           \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23772",
          "ruleIndex": 84,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-23772            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.16.14                  \n  Fixed version   : 1.16.14                   \n  EPSS Score      : 0.003680                  \n  EPSS Percentile : 0.726110                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24675",
          "ruleIndex": 85,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-24675            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.17.9                   \n  Fixed version   : 1.17.9                    \n  EPSS Score      : 0.004200                  \n  EPSS Percentile : 0.742380                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24921",
          "ruleIndex": 86,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-24921            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.16.15                  \n  Fixed version   : 1.16.15                   \n  EPSS Score      : 0.001860                  \n  EPSS Percentile : 0.559560                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27191",
          "ruleIndex": 87,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-27191                                                    \n  Severity        : HIGH                                                              \n  Package         : pkg:golang/golang.org/x/crypto@0.0.0-20191128160524-b544559bb6d1  \n  Affected range  : <0.0.0-20220314234659-1baeb1ce4c0b                                \n  Fixed version   : 0.0.0-20220314234659-1baeb1ce4c0b                                 \n  CVSS Score      : 7.5                                                               \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H                      \n  EPSS Score      : 0.002530                                                          \n  EPSS Percentile : 0.652580                                                          \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27664",
          "ruleIndex": 88,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-27664            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.18.6                   \n  Fixed version   : 1.18.6                    \n  EPSS Score      : 0.002390                  \n  EPSS Percentile : 0.620590                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27664",
          "ruleIndex": 88,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-27664                                                 \n  Severity        : HIGH                                                           \n  Package         : pkg:golang/golang.org/x/net@0.0.0-20191126235420-ef20fe5d7933  \n  Affected range  : <0.0.0-20220906165146-f3363e06e74c                             \n  Fixed version   : 0.0.0-20220906165146-f3363e06e74c                              \n  CVSS Score      : 7.5                                                            \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H                   \n  EPSS Score      : 0.002390                                                       \n  EPSS Percentile : 0.620590                                                       \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-28131",
          "ruleIndex": 89,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-28131            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.17.12                  \n  Fixed version   : 1.17.12                   \n  EPSS Score      : 0.001870                  \n  EPSS Percentile : 0.561940                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-28327",
          "ruleIndex": 90,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-28327            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.17.9                   \n  Fixed version   : 1.17.9                    \n  EPSS Score      : 0.003800                  \n  EPSS Percentile : 0.730130                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2879",
          "ruleIndex": 91,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-2879             \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.18.7                   \n  Fixed version   : 1.18.7                    \n  EPSS Score      : 0.002070                  \n  EPSS Percentile : 0.588120                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2880",
          "ruleIndex": 92,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-2880             \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.18.7                   \n  Fixed version   : 1.18.7                    \n  EPSS Score      : 0.001560                  \n  EPSS Percentile : 0.521330                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-29804",
          "ruleIndex": 93,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-29804            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.17.11                  \n  Fixed version   : 1.17.11                   \n  EPSS Score      : 0.001620                  \n  EPSS Percentile : 0.529510                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30630",
          "ruleIndex": 94,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-30630            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.17.12                  \n  Fixed version   : 1.17.12                   \n  EPSS Score      : 0.001850                  \n  EPSS Percentile : 0.558030                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30631",
          "ruleIndex": 95,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-30631            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.17.12                  \n  Fixed version   : 1.17.12                   \n  EPSS Score      : 0.001850                  \n  EPSS Percentile : 0.558030                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30632",
          "ruleIndex": 96,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-30632            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.17.12                  \n  Fixed version   : 1.17.12                   \n  EPSS Score      : 0.001850                  \n  EPSS Percentile : 0.558030                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30633",
          "ruleIndex": 97,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-30633            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.17.12                  \n  Fixed version   : 1.17.12                   \n  EPSS Score      : 0.001850                  \n  EPSS Percentile : 0.558030                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30634",
          "ruleIndex": 98,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-30634            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.17.11                  \n  Fixed version   : 1.17.11                   \n  EPSS Score      : 0.001520                  \n  EPSS Percentile : 0.515730                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30635",
          "ruleIndex": 99,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-30635            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.17.12                  \n  Fixed version   : 1.17.12                   \n  EPSS Score      : 0.001850                  \n  EPSS Percentile : 0.558030                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32149",
          "ruleIndex": 100,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-32149                                \n  Severity        : HIGH                                          \n  Package         : pkg:golang/golang.org/x/text@0.3.2            \n  Affected range  : <0.3.8                                        \n  Fixed version   : 0.3.8                                         \n  CVSS Score      : 7.5                                           \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H  \n  EPSS Score      : 0.002390                                      \n  EPSS Percentile : 0.620600                                      \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32189",
          "ruleIndex": 101,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-32189            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.17.13                  \n  Fixed version   : 1.17.13                   \n  EPSS Score      : 0.001950                  \n  EPSS Percentile : 0.571360                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41715",
          "ruleIndex": 102,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-41715            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.18.7                   \n  Fixed version   : 1.18.7                    \n  EPSS Score      : 0.002190                  \n  EPSS Percentile : 0.600430                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41716",
          "ruleIndex": 103,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-41716            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.18.8                   \n  Fixed version   : 1.18.8                    \n  EPSS Score      : 0.001020                  \n  EPSS Percentile : 0.418960                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41720",
          "ruleIndex": 104,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-41720            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.18.9                   \n  Fixed version   : 1.18.9                    \n  EPSS Score      : 0.001690                  \n  EPSS Percentile : 0.539000                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41722",
          "ruleIndex": 105,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-41722            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.19.6                   \n  Fixed version   : 1.19.6                    \n  EPSS Score      : 0.001110                  \n  EPSS Percentile : 0.445280                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41723",
          "ruleIndex": 106,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-41723            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.19.6                   \n  Fixed version   : 1.19.6                    \n  EPSS Score      : 0.024130                  \n  EPSS Percentile : 0.899570                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41724",
          "ruleIndex": 107,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-41724            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.19.6                   \n  Fixed version   : 1.19.6                    \n  EPSS Score      : 0.001290                  \n  EPSS Percentile : 0.479510                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41725",
          "ruleIndex": 108,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-41725            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.19.6                   \n  Fixed version   : 1.19.6                    \n  EPSS Score      : 0.001320                  \n  EPSS Percentile : 0.484780                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-2253",
          "ruleIndex": 109,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2023-2253                                                            \n  Severity        : HIGH                                                                     \n  Package         : pkg:golang/github.com/docker/distribution@2.7.1%!B(MISSING)incompatible  \n  Affected range  : <2.8.2-beta.1                                                            \n  Fixed version   : 2.8.2-beta.1                                                             \n  CVSS Score      : 7.5                                                                      \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H                             \n  EPSS Score      : 0.000530                                                                 \n  EPSS Percentile : 0.209360                                                                 \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24534",
          "ruleIndex": 110,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2023-24534            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.19.8                   \n  Fixed version   : 1.19.8                    \n  EPSS Score      : 0.002150                  \n  EPSS Percentile : 0.596760                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24536",
          "ruleIndex": 111,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2023-24536            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.19.8                   \n  Fixed version   : 1.19.8                    \n  EPSS Score      : 0.005380                  \n  EPSS Percentile : 0.772930                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24537",
          "ruleIndex": 112,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2023-24537            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.19.8                   \n  Fixed version   : 1.19.8                    \n  EPSS Score      : 0.001040                  \n  EPSS Percentile : 0.424930                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39325",
          "ruleIndex": 113,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2023-39325            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.20.10                  \n  Fixed version   : 1.20.10                   \n  EPSS Score      : 0.002090                  \n  EPSS Percentile : 0.589890                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45283",
          "ruleIndex": 114,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2023-45283            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.20.11                  \n  Fixed version   : 1.20.11                   \n  EPSS Score      : 0.000980                  \n  EPSS Percentile : 0.411420                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45287",
          "ruleIndex": 115,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2023-45287            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.20.0                   \n  Fixed version   : 1.20.0                    \n  EPSS Score      : 0.000710                  \n  EPSS Percentile : 0.306540                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-49568",
          "ruleIndex": 116,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2023-49568                                \n  Severity        : HIGH                                          \n  Package         : pkg:golang/gopkg.in/src-d/go-git.v4@4.13.1    \n  Affected range  : >=4.7.1                                       \n  Fixed version   : not fixed                                     \n  CVSS Score      : 7.5                                           \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H  \n  EPSS Score      : 0.000460                                      \n  EPSS Percentile : 0.168950                                      \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "GHSA-m425-mq94-257g",
          "ruleIndex": 117,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability  : GHSA-m425-mq94-257g                           \n  Severity       : HIGH                                          \n  Package        : pkg:golang/google.golang.org/grpc@1.22.1      \n  Affected range : <1.56.3                                       \n  Fixed version  : 1.56.3                                        \n  CVSS Score     : 7.5                                           \n  CVSS Vector    : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-30465",
          "ruleIndex": 118,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2021-30465                                                               \n  Severity        : HIGH                                                                         \n  Package         : pkg:golang/github.com/opencontainers/runc@0.0.0-20161109192122-51371867a01c  \n  Affected range  : <0.0.0-20210519065900-b9ee9c631459                                           \n  Fixed version   : 0.0.0-20210519065900-b9ee9c631459                                            \n  CVSS Score      : 7.6                                                                          \n  CVSS Vector     : CVSS:3.1/AV:A/AC:L/PR:L/UI:N/S:C/C:H/I:L/A:N                                 \n  EPSS Score      : 0.002070                                                                     \n  EPSS Percentile : 0.588110                                                                     \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30580",
          "ruleIndex": 119,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-30580            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.17.11                  \n  Fixed version   : 1.17.11                   \n  EPSS Score      : 0.000450                  \n  EPSS Percentile : 0.141750                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29403",
          "ruleIndex": 120,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2023-29403            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.19.10                  \n  Fixed version   : 1.19.10                   \n  EPSS Score      : 0.000580                  \n  EPSS Percentile : 0.240800                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-0601",
          "ruleIndex": 121,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2020-0601             \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : >=1.13.0-0,<1.13.7        \n  Fixed version   : 1.13.7                    \n  EPSS Score      : 0.968900                  \n  EPSS Percentile : 0.997140                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3121",
          "ruleIndex": 122,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2021-3121                                                            \n  Severity        : HIGH                                                                     \n  Package         : pkg:golang/github.com/gogo/protobuf@1.2.2-0.20190723190241-65acae22fc9d  \n  Affected range  : <1.3.2                                                                   \n  Fixed version   : 1.3.2                                                                    \n  CVSS Score      : 8.6                                                                      \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:H                             \n  EPSS Score      : 0.008290                                                                 \n  EPSS Percentile : 0.820570                                                                 \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23806",
          "ruleIndex": 123,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-23806            \n  Severity        : CRITICAL                  \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.16.14                  \n  Fixed version   : 1.16.14                   \n  EPSS Score      : 0.003390                  \n  EPSS Percentile : 0.714510                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24538",
          "ruleIndex": 124,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2023-24538            \n  Severity        : CRITICAL                  \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.19.8                   \n  Fixed version   : 1.19.8                    \n  EPSS Score      : 0.003430                  \n  EPSS Percentile : 0.716160                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24540",
          "ruleIndex": 125,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2023-24540            \n  Severity        : CRITICAL                  \n  Package         : pkg:golang/stdlib@1.13.1  \n  Affected range  : <1.19.9                   \n  Fixed version   : 1.19.9                    \n  EPSS Score      : 0.002560                  \n  EPSS Percentile : 0.655600                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-49569",
          "ruleIndex": 126,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2023-49569                                \n  Severity        : CRITICAL                                      \n  Package         : pkg:golang/gopkg.in/src-d/go-git.v4@4.13.1    \n  Affected range  : >=4.7.1                                       \n  Fixed version   : not fixed                                     \n  CVSS Score      : 9.8                                           \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H  \n  EPSS Score      : 0.002310                                      \n  EPSS Percentile : 0.613430                                      \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/portainer"
                }
              }
            }
          ]
        }
      ]
    }
  ]
}
