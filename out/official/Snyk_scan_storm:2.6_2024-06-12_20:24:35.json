{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Snyk Container",
          "properties": {
            "artifactsScanned": 153
          },
          "rules": [
            {
              "id": "SNYK-UBUNTU2204-COREUTILS-2801226",
              "shortDescription": {
                "text": "Low severity - Improper Input Validation vulnerability in coreutils"
              },
              "fullDescription": {
                "text": "(CVE-2016-2781) coreutils@8.32-4.1ubuntu1.2"
              },
              "help": {
                "text": "",
                "markdown": "## NVD Description\n**_Note:_** _Versions mentioned in the description apply only to the upstream `coreutils` package and not the `coreutils` package as distributed by `Ubuntu`._\n_See `How to fix?` for `Ubuntu:22.04` relevant fixed versions and status._\n\nchroot in GNU coreutils, when used with --userspec, allows local users to escape to the parent session via a crafted TIOCSTI ioctl call, which pushes characters to the terminal&#39;s input buffer.\n## Remediation\nThere is no fixed version for `Ubuntu:22.04` `coreutils`.\n## References\n- [http://people.ubuntu.com/~ubuntu-security/cve/CVE-2016-2781](http://people.ubuntu.com/~ubuntu-security/cve/CVE-2016-2781)\n- [https://security-tracker.debian.org/tracker/CVE-2016-2781](https://security-tracker.debian.org/tracker/CVE-2016-2781)\n- [https://lists.apache.org/thread.html/rf9fa47ab66495c78bb4120b0754dd9531ca2ff0430f6685ac9b07772@%3Cdev.mina.apache.org%3E](https://lists.apache.org/thread.html/rf9fa47ab66495c78bb4120b0754dd9531ca2ff0430f6685ac9b07772@%3Cdev.mina.apache.org%3E)\n- [http://www.openwall.com/lists/oss-security/2016/02/28/2](http://www.openwall.com/lists/oss-security/2016/02/28/2)\n- [http://www.openwall.com/lists/oss-security/2016/02/28/3](http://www.openwall.com/lists/oss-security/2016/02/28/3)\n- [https://lists.apache.org/thread.html/rf9fa47ab66495c78bb4120b0754dd9531ca2ff0430f6685ac9b07772%40%3Cdev.mina.apache.org%3E](https://lists.apache.org/thread.html/rf9fa47ab66495c78bb4120b0754dd9531ca2ff0430f6685ac9b07772%40%3Cdev.mina.apache.org%3E)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-20",
                  "deb"
                ],
                "cvssv3_baseScore": 6.5,
                "security-severity": "6.5"
              }
            },
            {
              "id": "SNYK-UBUNTU2204-GCC12-5861847",
              "shortDescription": {
                "text": "Low severity - Uncontrolled Recursion vulnerability in gcc-12"
              },
              "fullDescription": {
                "text": "(CVE-2022-27943) gcc-12/libstdc++6@12.3.0-1ubuntu1~22.04"
              },
              "help": {
                "text": "",
                "markdown": "## NVD Description\n**_Note:_** _Versions mentioned in the description apply only to the upstream `gcc-12` package and not the `gcc-12` package as distributed by `Ubuntu`._\n_See `How to fix?` for `Ubuntu:22.04` relevant fixed versions and status._\n\nlibiberty/rust-demangle.c in GNU GCC 11.2 allows stack consumption in demangle_const, as demonstrated by nm-new.\n## Remediation\nThere is no fixed version for `Ubuntu:22.04` `gcc-12`.\n## References\n- [http://people.ubuntu.com/~ubuntu-security/cve/CVE-2022-27943](http://people.ubuntu.com/~ubuntu-security/cve/CVE-2022-27943)\n- [https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105039](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105039)\n- [https://sourceware.org/bugzilla/show_bug.cgi?id=28995](https://sourceware.org/bugzilla/show_bug.cgi?id=28995)\n- [https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/H424YXGW7OKXS2NCAP35OP6Y4P4AW6VG/](https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/H424YXGW7OKXS2NCAP35OP6Y4P4AW6VG/)\n- [https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/H424YXGW7OKXS2NCAP35OP6Y4P4AW6VG/](https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/H424YXGW7OKXS2NCAP35OP6Y4P4AW6VG/)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-674",
                  "deb"
                ],
                "cvssv3_baseScore": 5.5,
                "security-severity": "5.5"
              }
            },
            {
              "id": "SNYK-UBUNTU2204-GLIBC-2801292",
              "shortDescription": {
                "text": "Low severity - Allocation of Resources Without Limits or Throttling vulnerability in glibc"
              },
              "fullDescription": {
                "text": "(CVE-2016-20013) glibc/libc-bin@2.35-0ubuntu3.8"
              },
              "help": {
                "text": "",
                "markdown": "## NVD Description\n**_Note:_** _Versions mentioned in the description apply only to the upstream `glibc` package and not the `glibc` package as distributed by `Ubuntu`._\n_See `How to fix?` for `Ubuntu:22.04` relevant fixed versions and status._\n\nsha256crypt and sha512crypt through 0.6 allow attackers to cause a denial of service (CPU consumption) because the algorithm&#39;s runtime is proportional to the square of the length of the password.\n## Remediation\nThere is no fixed version for `Ubuntu:22.04` `glibc`.\n## References\n- [http://people.ubuntu.com/~ubuntu-security/cve/CVE-2016-20013](http://people.ubuntu.com/~ubuntu-security/cve/CVE-2016-20013)\n- [https://twitter.com/solardiz/status/795601240151457793](https://twitter.com/solardiz/status/795601240151457793)\n- [https://pthree.org/2018/05/23/do-not-use-sha256crypt-sha512crypt-theyre-dangerous/](https://pthree.org/2018/05/23/do-not-use-sha256crypt-sha512crypt-theyre-dangerous/)\n- [https://akkadia.org/drepper/SHA-crypt.txt](https://akkadia.org/drepper/SHA-crypt.txt)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-770",
                  "deb"
                ],
                "cvssv3_baseScore": 7.5,
                "security-severity": "7.5"
              }
            },
            {
              "id": "SNYK-UBUNTU2204-GNUPG2-3035409",
              "shortDescription": {
                "text": "Low severity - Out-of-bounds Write vulnerability in gnupg2"
              },
              "fullDescription": {
                "text": "(CVE-2022-3219) gnupg2/gpgv@2.2.27-3ubuntu2.1"
              },
              "help": {
                "text": "",
                "markdown": "## NVD Description\n**_Note:_** _Versions mentioned in the description apply only to the upstream `gnupg2` package and not the `gnupg2` package as distributed by `Ubuntu`._\n_See `How to fix?` for `Ubuntu:22.04` relevant fixed versions and status._\n\nGnuPG can be made to spin on a relatively small input by (for example) crafting a public key with thousands of signatures attached, compressed down to just a few KB.\n## Remediation\nThere is no fixed version for `Ubuntu:22.04` `gnupg2`.\n## References\n- [http://people.ubuntu.com/~ubuntu-security/cve/CVE-2022-3219](http://people.ubuntu.com/~ubuntu-security/cve/CVE-2022-3219)\n- [https://access.redhat.com/security/cve/CVE-2022-3219](https://access.redhat.com/security/cve/CVE-2022-3219)\n- [https://bugzilla.redhat.com/show_bug.cgi?id=2127010](https://bugzilla.redhat.com/show_bug.cgi?id=2127010)\n- [https://dev.gnupg.org/D556](https://dev.gnupg.org/D556)\n- [https://dev.gnupg.org/T5993](https://dev.gnupg.org/T5993)\n- [https://marc.info/?l=oss-security&m=165696590211434&w=4](https://marc.info/?l=oss-security&m=165696590211434&w=4)\n- [https://security.netapp.com/advisory/ntap-20230324-0001/](https://security.netapp.com/advisory/ntap-20230324-0001/)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-787",
                  "deb"
                ],
                "cvssv3_baseScore": 3.3,
                "security-severity": "3.3"
              }
            },
            {
              "id": "SNYK-UBUNTU2204-KRB5-2797765",
              "shortDescription": {
                "text": "Low severity - Integer Overflow or Wraparound vulnerability in krb5"
              },
              "fullDescription": {
                "text": "(CVE-2018-5709) krb5/libk5crypto3@1.19.2-2ubuntu0.3"
              },
              "help": {
                "text": "",
                "markdown": "## NVD Description\n**_Note:_** _Versions mentioned in the description apply only to the upstream `krb5` package and not the `krb5` package as distributed by `Ubuntu`._\n_See `How to fix?` for `Ubuntu:22.04` relevant fixed versions and status._\n\nAn issue was discovered in MIT Kerberos 5 (aka krb5) through 1.16. There is a variable &#34;dbentry-&gt;n_key_data&#34; in kadmin/dbutil/dump.c that can store 16-bit data but unknowingly the developer has assigned a &#34;u4&#34; variable to it, which is for 32-bit data. An attacker can use this vulnerability to affect other artifacts of the database as we know that a Kerberos database dump file contains trusted data.\n## Remediation\nThere is no fixed version for `Ubuntu:22.04` `krb5`.\n## References\n- [https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-5709](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-5709)\n- [https://security-tracker.debian.org/tracker/CVE-2018-5709](https://security-tracker.debian.org/tracker/CVE-2018-5709)\n- [https://github.com/poojamnit/Kerberos-V5-1.16-Vulnerabilities/tree/master/Integer%20Overflow](https://github.com/poojamnit/Kerberos-V5-1.16-Vulnerabilities/tree/master/Integer%20Overflow)\n- [https://lists.apache.org/thread.html/rf9fa47ab66495c78bb4120b0754dd9531ca2ff0430f6685ac9b07772@%3Cdev.mina.apache.org%3E](https://lists.apache.org/thread.html/rf9fa47ab66495c78bb4120b0754dd9531ca2ff0430f6685ac9b07772@%3Cdev.mina.apache.org%3E)\n- [http://people.ubuntu.com/~ubuntu-security/cve/CVE-2018-5709](http://people.ubuntu.com/~ubuntu-security/cve/CVE-2018-5709)\n- [https://lists.apache.org/thread.html/rf9fa47ab66495c78bb4120b0754dd9531ca2ff0430f6685ac9b07772%40%3Cdev.mina.apache.org%3E](https://lists.apache.org/thread.html/rf9fa47ab66495c78bb4120b0754dd9531ca2ff0430f6685ac9b07772%40%3Cdev.mina.apache.org%3E)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-190",
                  "deb"
                ],
                "cvssv3_baseScore": 7.5,
                "security-severity": "7.5"
              }
            },
            {
              "id": "SNYK-UBUNTU2204-KRB5-6281067",
              "shortDescription": {
                "text": "Low severity - CVE-2024-26461 vulnerability in krb5"
              },
              "fullDescription": {
                "text": "(CVE-2024-26461) krb5/libk5crypto3@1.19.2-2ubuntu0.3"
              },
              "help": {
                "text": "",
                "markdown": "## NVD Description\n**_Note:_** _Versions mentioned in the description apply only to the upstream `krb5` package and not the `krb5` package as distributed by `Ubuntu`._\n_See `How to fix?` for `Ubuntu:22.04` relevant fixed versions and status._\n\nKerberos 5 (aka krb5) 1.21.2 contains a memory leak vulnerability in /krb5/src/lib/gssapi/krb5/k5sealv3.c.\n## Remediation\nThere is no fixed version for `Ubuntu:22.04` `krb5`.\n## References\n- [http://people.ubuntu.com/~ubuntu-security/cve/CVE-2024-26461](http://people.ubuntu.com/~ubuntu-security/cve/CVE-2024-26461)\n- [https://github.com/LuMingYinDetect/krb5_defects/blob/main/krb5_detect_2.md](https://github.com/LuMingYinDetect/krb5_defects/blob/main/krb5_detect_2.md)\n- [https://security.netapp.com/advisory/ntap-20240415-0011/](https://security.netapp.com/advisory/ntap-20240415-0011/)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "deb"
                ],
                "cvssv3_baseScore": null,
                "security-severity": "null"
              }
            },
            {
              "id": "SNYK-UBUNTU2204-KRB5-6281073",
              "shortDescription": {
                "text": "Medium severity - CVE-2024-26462 vulnerability in krb5"
              },
              "fullDescription": {
                "text": "(CVE-2024-26462) krb5/libk5crypto3@1.19.2-2ubuntu0.3"
              },
              "help": {
                "text": "",
                "markdown": "## NVD Description\n**_Note:_** _Versions mentioned in the description apply only to the upstream `krb5` package and not the `krb5` package as distributed by `Ubuntu`._\n_See `How to fix?` for `Ubuntu:22.04` relevant fixed versions and status._\n\nKerberos 5 (aka krb5) 1.21.2 contains a memory leak vulnerability in /krb5/src/kdc/ndr.c.\n## Remediation\nThere is no fixed version for `Ubuntu:22.04` `krb5`.\n## References\n- [http://people.ubuntu.com/~ubuntu-security/cve/CVE-2024-26462](http://people.ubuntu.com/~ubuntu-security/cve/CVE-2024-26462)\n- [https://github.com/LuMingYinDetect/krb5_defects/blob/main/krb5_detect_3.md](https://github.com/LuMingYinDetect/krb5_defects/blob/main/krb5_detect_3.md)\n- [https://security.netapp.com/advisory/ntap-20240415-0012/](https://security.netapp.com/advisory/ntap-20240415-0012/)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "deb"
                ],
                "cvssv3_baseScore": null,
                "security-severity": "null"
              }
            },
            {
              "id": "SNYK-UBUNTU2204-KRB5-6281079",
              "shortDescription": {
                "text": "Low severity - CVE-2024-26458 vulnerability in krb5"
              },
              "fullDescription": {
                "text": "(CVE-2024-26458) krb5/libk5crypto3@1.19.2-2ubuntu0.3"
              },
              "help": {
                "text": "",
                "markdown": "## NVD Description\n**_Note:_** _Versions mentioned in the description apply only to the upstream `krb5` package and not the `krb5` package as distributed by `Ubuntu`._\n_See `How to fix?` for `Ubuntu:22.04` relevant fixed versions and status._\n\nKerberos 5 (aka krb5) 1.21.2 contains a memory leak in /krb5/src/lib/rpc/pmap_rmt.c.\n## Remediation\nThere is no fixed version for `Ubuntu:22.04` `krb5`.\n## References\n- [http://people.ubuntu.com/~ubuntu-security/cve/CVE-2024-26458](http://people.ubuntu.com/~ubuntu-security/cve/CVE-2024-26458)\n- [https://github.com/LuMingYinDetect/krb5_defects/blob/main/krb5_detect_1.md](https://github.com/LuMingYinDetect/krb5_defects/blob/main/krb5_detect_1.md)\n- [https://security.netapp.com/advisory/ntap-20240415-0010/](https://security.netapp.com/advisory/ntap-20240415-0010/)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "deb"
                ],
                "cvssv3_baseScore": null,
                "security-severity": "null"
              }
            },
            {
              "id": "SNYK-UBUNTU2204-LIBGCRYPT20-6411451",
              "shortDescription": {
                "text": "Medium severity - Information Exposure vulnerability in libgcrypt20"
              },
              "fullDescription": {
                "text": "(CVE-2024-2236) libgcrypt20@1.9.4-3ubuntu3"
              },
              "help": {
                "text": "",
                "markdown": "## NVD Description\n**_Note:_** _Versions mentioned in the description apply only to the upstream `libgcrypt20` package and not the `libgcrypt20` package as distributed by `Ubuntu`._\n_See `How to fix?` for `Ubuntu:22.04` relevant fixed versions and status._\n\nA timing-based side-channel flaw was found in libgcrypt&#39;s RSA implementation. This issue may allow a remote attacker to initiate a Bleichenbacher-style attack, which can lead to the decryption of RSA ciphertexts.\n## Remediation\nThere is no fixed version for `Ubuntu:22.04` `libgcrypt20`.\n## References\n- [http://people.ubuntu.com/~ubuntu-security/cve/CVE-2024-2236](http://people.ubuntu.com/~ubuntu-security/cve/CVE-2024-2236)\n- [https://access.redhat.com/security/cve/CVE-2024-2236](https://access.redhat.com/security/cve/CVE-2024-2236)\n- [https://bugzilla.redhat.com/show_bug.cgi?id=2268268](https://bugzilla.redhat.com/show_bug.cgi?id=2268268)\n- [https://bugzilla.redhat.com/show_bug.cgi?id=2245218](https://bugzilla.redhat.com/show_bug.cgi?id=2245218)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-208",
                  "deb"
                ],
                "cvssv3_baseScore": null,
                "security-severity": "null"
              }
            },
            {
              "id": "SNYK-UBUNTU2204-LIBPNG16-3124883",
              "shortDescription": {
                "text": "Low severity - NULL Pointer Dereference vulnerability in libpng1.6"
              },
              "fullDescription": {
                "text": "(CVE-2022-3857) libpng1.6/libpng16-16@1.6.37-3build5"
              },
              "help": {
                "text": "",
                "markdown": "## NVD Description\n**_Note:_** _Versions mentioned in the description apply only to the upstream `libpng1.6` package and not the `libpng1.6` package as distributed by `Ubuntu`._\n_See `How to fix?` for `Ubuntu:22.04` relevant fixed versions and status._\n\nA flaw was found in libpng 1.6.38. A crafted PNG image can lead to a segmentation fault and denial of service in png_setup_paeth_row() function.\n## Remediation\nThere is no fixed version for `Ubuntu:22.04` `libpng1.6`.\n## References\n- [http://people.ubuntu.com/~ubuntu-security/cve/CVE-2022-3857](http://people.ubuntu.com/~ubuntu-security/cve/CVE-2022-3857)\n- [https://sourceforge.net/p/libpng/bugs/300/](https://sourceforge.net/p/libpng/bugs/300/)\n- [https://security.netapp.com/advisory/ntap-20230406-0004/](https://security.netapp.com/advisory/ntap-20230406-0004/)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-476",
                  "deb"
                ],
                "cvssv3_baseScore": 5.5,
                "security-severity": "5.5"
              }
            },
            {
              "id": "SNYK-UBUNTU2204-LIBZSTD-3368800",
              "shortDescription": {
                "text": "Low severity - Resource Exhaustion vulnerability in libzstd"
              },
              "fullDescription": {
                "text": "(CVE-2022-4899) libzstd/libzstd1@1.4.8+dfsg-3build1"
              },
              "help": {
                "text": "",
                "markdown": "## NVD Description\n**_Note:_** _Versions mentioned in the description apply only to the upstream `libzstd` package and not the `libzstd` package as distributed by `Ubuntu`._\n_See `How to fix?` for `Ubuntu:22.04` relevant fixed versions and status._\n\nA vulnerability was found in zstd v1.4.10, where an attacker can supply empty string as an argument to the command line tool to cause buffer overrun.\n## Remediation\nThere is no fixed version for `Ubuntu:22.04` `libzstd`.\n## References\n- [http://people.ubuntu.com/~ubuntu-security/cve/CVE-2022-4899](http://people.ubuntu.com/~ubuntu-security/cve/CVE-2022-4899)\n- [https://github.com/facebook/zstd/issues/3200](https://github.com/facebook/zstd/issues/3200)\n- [https://security.netapp.com/advisory/ntap-20230725-0005/](https://security.netapp.com/advisory/ntap-20230725-0005/)\n- [https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/C63HAGVLQA6FJNDCHR7CNZZL6VSLILB2/](https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/C63HAGVLQA6FJNDCHR7CNZZL6VSLILB2/)\n- [https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/JEHRBBYYTPA4DETOM5XAKGCP37NUTLOA/](https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/JEHRBBYYTPA4DETOM5XAKGCP37NUTLOA/)\n- [https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/QYLDK6ODVC4LJSDULLX6Q2YHTFOWABCN/](https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/QYLDK6ODVC4LJSDULLX6Q2YHTFOWABCN/)\n- [https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/C63HAGVLQA6FJNDCHR7CNZZL6VSLILB2/](https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/C63HAGVLQA6FJNDCHR7CNZZL6VSLILB2/)\n- [https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/JEHRBBYYTPA4DETOM5XAKGCP37NUTLOA/](https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/JEHRBBYYTPA4DETOM5XAKGCP37NUTLOA/)\n- [https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/QYLDK6ODVC4LJSDULLX6Q2YHTFOWABCN/](https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/QYLDK6ODVC4LJSDULLX6Q2YHTFOWABCN/)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "deb"
                ],
                "cvssv3_baseScore": 7.5,
                "security-severity": "7.5"
              }
            },
            {
              "id": "SNYK-UBUNTU2204-NCURSES-6123867",
              "shortDescription": {
                "text": "Low severity - CVE-2023-50495 vulnerability in ncurses"
              },
              "fullDescription": {
                "text": "(CVE-2023-50495) ncurses/libtinfo6@6.3-2ubuntu0.1"
              },
              "help": {
                "text": "",
                "markdown": "## NVD Description\n**_Note:_** _Versions mentioned in the description apply only to the upstream `ncurses` package and not the `ncurses` package as distributed by `Ubuntu`._\n_See `How to fix?` for `Ubuntu:22.04` relevant fixed versions and status._\n\nNCurse v6.4-20230418 was discovered to contain a segmentation fault via the component _nc_wrap_entry().\n## Remediation\nThere is no fixed version for `Ubuntu:22.04` `ncurses`.\n## References\n- [http://people.ubuntu.com/~ubuntu-security/cve/CVE-2023-50495](http://people.ubuntu.com/~ubuntu-security/cve/CVE-2023-50495)\n- [https://lists.gnu.org/archive/html/bug-ncurses/2023-04/msg00020.html](https://lists.gnu.org/archive/html/bug-ncurses/2023-04/msg00020.html)\n- [https://lists.gnu.org/archive/html/bug-ncurses/2023-04/msg00029.html](https://lists.gnu.org/archive/html/bug-ncurses/2023-04/msg00029.html)\n- [https://security.netapp.com/advisory/ntap-20240119-0008/](https://security.netapp.com/advisory/ntap-20240119-0008/)\n- [https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/LU4MYMKFEZQ5VSCVLRIZGDQOUW3T44GT/](https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/LU4MYMKFEZQ5VSCVLRIZGDQOUW3T44GT/)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "deb"
                ],
                "cvssv3_baseScore": 6.5,
                "security-severity": "6.5"
              }
            },
            {
              "id": "SNYK-UBUNTU2204-NCURSES-6253015",
              "shortDescription": {
                "text": "Low severity - CVE-2023-45918 vulnerability in ncurses"
              },
              "fullDescription": {
                "text": "(CVE-2023-45918) ncurses/libtinfo6@6.3-2ubuntu0.1"
              },
              "help": {
                "text": "",
                "markdown": "## NVD Description\n**_Note:_** _Versions mentioned in the description apply only to the upstream `ncurses` package and not the `ncurses` package as distributed by `Ubuntu`._\n_See `How to fix?` for `Ubuntu:22.04` relevant fixed versions and status._\n\nncurses 6.4-20230610 has a NULL pointer dereference in tgetstr in tinfo/lib_termcap.c.\n## Remediation\nThere is no fixed version for `Ubuntu:22.04` `ncurses`.\n## References\n- [http://people.ubuntu.com/~ubuntu-security/cve/CVE-2023-45918](http://people.ubuntu.com/~ubuntu-security/cve/CVE-2023-45918)\n- [https://lists.gnu.org/archive/html/bug-ncurses/2023-06/msg00005.html](https://lists.gnu.org/archive/html/bug-ncurses/2023-06/msg00005.html)\n- [https://security.netapp.com/advisory/ntap-20240315-0006/](https://security.netapp.com/advisory/ntap-20240315-0006/)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "deb"
                ],
                "cvssv3_baseScore": null,
                "security-severity": "null"
              }
            },
            {
              "id": "SNYK-UBUNTU2204-OPENSSL-5538123",
              "shortDescription": {
                "text": "Medium severity - Resource Exhaustion vulnerability in openssl"
              },
              "fullDescription": {
                "text": "(CVE-2022-40735) openssl/libssl3@3.0.2-0ubuntu1.15"
              },
              "help": {
                "text": "",
                "markdown": "## NVD Description\n**_Note:_** _Versions mentioned in the description apply only to the upstream `openssl` package and not the `openssl` package as distributed by `Ubuntu`._\n_See `How to fix?` for `Ubuntu:22.04` relevant fixed versions and status._\n\nThe Diffie-Hellman Key Agreement Protocol allows use of long exponents that arguably make certain calculations unnecessarily expensive, because the 1996 van Oorschot and Wiener paper found that &#34;(appropriately) short exponents&#34; can be used when there are adequate subgroup constraints, and these short exponents can lead to less expensive calculations than for long exponents. This issue is different from CVE-2002-20001 because it is based on an observation about exponent size, rather than an observation about numbers that are not public keys. The specific situations in which calculation expense would constitute a server-side vulnerability depend on the protocol (e.g., TLS, SSH, or IKE) and the DHE implementation details. In general, there might be an availability concern because of server-side resource consumption from DHE modular-exponentiation calculations. Finally, it is possible for an attacker to exploit this vulnerability and CVE-2002-20001 together.\n## Remediation\nThere is no fixed version for `Ubuntu:22.04` `openssl`.\n## References\n- [http://people.ubuntu.com/~ubuntu-security/cve/CVE-2022-40735](http://people.ubuntu.com/~ubuntu-security/cve/CVE-2022-40735)\n- [https://github.com/mozilla/ssl-config-generator/issues/162](https://github.com/mozilla/ssl-config-generator/issues/162)\n- [https://link.springer.com/content/pdf/10.1007/3-540-68339-9_29.pdf](https://link.springer.com/content/pdf/10.1007/3-540-68339-9_29.pdf)\n- [https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57pt1r5.pdf](https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57pt1r5.pdf)\n- [https://www.researchgate.net/profile/Anton-Stiglic-2/publication/2401745_Security_Issues_in_the_Diffie-Hellman_Key_Agreement_Protocol/links/546c144f0cf20dedafd53e7e/Security-Issues-in-the-Diffie-Hellman-Key-Agreement-Protocol.pdf](https://www.researchgate.net/profile/Anton-Stiglic-2/publication/2401745_Security_Issues_in_the_Diffie-Hellman_Key_Agreement_Protocol/links/546c144f0cf20dedafd53e7e/Security-Issues-in-the-Diffie-Hellman-Key-Agreement-Protocol.pdf)\n- [https://gist.github.com/c0r0n3r/9455ddcab985c50fd1912eabf26e058b](https://gist.github.com/c0r0n3r/9455ddcab985c50fd1912eabf26e058b)\n- [https://www.rfc-editor.org/rfc/rfc4419](https://www.rfc-editor.org/rfc/rfc4419)\n- [https://www.rfc-editor.org/rfc/rfc7919#section-5.2](https://www.rfc-editor.org/rfc/rfc7919#section-5.2)\n- [https://www.rfc-editor.org/rfc/rfc3526](https://www.rfc-editor.org/rfc/rfc3526)\n- [https://raw.githubusercontent.com/CVEProject/cvelist/9d7fbbcabd3f44cfedc9e8807757d31ece85a2c6/2022/40xxx/CVE-2022-40735.json](https://raw.githubusercontent.com/CVEProject/cvelist/9d7fbbcabd3f44cfedc9e8807757d31ece85a2c6/2022/40xxx/CVE-2022-40735.json)\n- [https://www.rfc-editor.org/rfc/rfc5114#section-4](https://www.rfc-editor.org/rfc/rfc5114#section-4)\n- [https://dheatattack.gitlab.io/](https://dheatattack.gitlab.io/)\n- [https://ieeexplore.ieee.org/document/10374117](https://ieeexplore.ieee.org/document/10374117)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "deb"
                ],
                "cvssv3_baseScore": 7.5,
                "security-severity": "7.5"
              }
            },
            {
              "id": "SNYK-UBUNTU2204-OPENSSL-6592113",
              "shortDescription": {
                "text": "Low severity - CVE-2024-2511 vulnerability in openssl"
              },
              "fullDescription": {
                "text": "(CVE-2024-2511) openssl/libssl3@3.0.2-0ubuntu1.15"
              },
              "help": {
                "text": "",
                "markdown": "## NVD Description\n**_Note:_** _Versions mentioned in the description apply only to the upstream `openssl` package and not the `openssl` package as distributed by `Ubuntu`._\n_See `How to fix?` for `Ubuntu:22.04` relevant fixed versions and status._\n\nIssue summary: Some non-default TLS server configurations can cause unbounded\nmemory growth when processing TLSv1.3 sessions\n\nImpact summary: An attacker may exploit certain server configurations to trigger\nunbounded memory growth that would lead to a Denial of Service\n\nThis problem can occur in TLSv1.3 if the non-default SSL_OP_NO_TICKET option is\nbeing used (but not if early_data support is also configured and the default\nanti-replay protection is in use). In this case, under certain conditions, the\nsession cache can get into an incorrect state and it will fail to flush properly\nas it fills. The session cache will continue to grow in an unbounded manner. A\nmalicious client could deliberately create the scenario for this failure to\nforce a Denial of Service. It may also happen by accident in normal operation.\n\nThis issue only affects TLS servers supporting TLSv1.3. It does not affect TLS\nclients.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue. OpenSSL\n1.0.2 is also not affected by this issue.\n## Remediation\nThere is no fixed version for `Ubuntu:22.04` `openssl`.\n## References\n- [http://people.ubuntu.com/~ubuntu-security/cve/CVE-2024-2511](http://people.ubuntu.com/~ubuntu-security/cve/CVE-2024-2511)\n- [https://github.com/openssl/openssl/commit/7e4d731b1c07201ad9374c1cd9ac5263bdf35bce](https://github.com/openssl/openssl/commit/7e4d731b1c07201ad9374c1cd9ac5263bdf35bce)\n- [https://github.com/openssl/openssl/commit/b52867a9f618bb955bed2a3ce3db4d4f97ed8e5d](https://github.com/openssl/openssl/commit/b52867a9f618bb955bed2a3ce3db4d4f97ed8e5d)\n- [https://github.com/openssl/openssl/commit/e9d7083e241670332e0443da0f0d4ffb52829f08](https://github.com/openssl/openssl/commit/e9d7083e241670332e0443da0f0d4ffb52829f08)\n- [https://github.openssl.org/openssl/extended-releases/commit/5f8d25770ae6437db119dfc951e207271a326640](https://github.openssl.org/openssl/extended-releases/commit/5f8d25770ae6437db119dfc951e207271a326640)\n- [https://www.openssl.org/news/secadv/20240408.txt](https://www.openssl.org/news/secadv/20240408.txt)\n- [http://www.openwall.com/lists/oss-security/2024/04/08/5](http://www.openwall.com/lists/oss-security/2024/04/08/5)\n- [https://security.netapp.com/advisory/ntap-20240503-0013/](https://security.netapp.com/advisory/ntap-20240503-0013/)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "deb"
                ],
                "cvssv3_baseScore": null,
                "security-severity": "null"
              }
            },
            {
              "id": "SNYK-UBUNTU2204-OPENSSL-6861899",
              "shortDescription": {
                "text": "Low severity - CVE-2024-4603 vulnerability in openssl"
              },
              "fullDescription": {
                "text": "(CVE-2024-4603) openssl/libssl3@3.0.2-0ubuntu1.15"
              },
              "help": {
                "text": "",
                "markdown": "## NVD Description\n**_Note:_** _Versions mentioned in the description apply only to the upstream `openssl` package and not the `openssl` package as distributed by `Ubuntu`._\n_See `How to fix?` for `Ubuntu:22.04` relevant fixed versions and status._\n\nIssue summary: Checking excessively long DSA keys or parameters may be very\nslow.\n\nImpact summary: Applications that use the functions EVP_PKEY_param_check()\nor EVP_PKEY_public_check() to check a DSA public key or DSA parameters may\nexperience long delays. Where the key or parameters that are being checked\nhave been obtained from an untrusted source this may lead to a Denial of\nService.\n\nThe functions EVP_PKEY_param_check() or EVP_PKEY_public_check() perform\nvarious checks on DSA parameters. Some of those computations take a long time\nif the modulus (`p` parameter) is too large.\n\nTrying to use a very large modulus is slow and OpenSSL will not allow using\npublic keys with a modulus which is over 10,000 bits in length for signature\nverification. However the key and parameter check functions do not limit\nthe modulus size when performing the checks.\n\nAn application that calls EVP_PKEY_param_check() or EVP_PKEY_public_check()\nand supplies a key or parameters obtained from an untrusted source could be\nvulnerable to a Denial of Service attack.\n\nThese functions are not called by OpenSSL itself on untrusted DSA keys so\nonly applications that directly call these functions may be vulnerable.\n\nAlso vulnerable are the OpenSSL pkey and pkeyparam command line applications\nwhen using the `-check` option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\n\nThe OpenSSL 3.0 and 3.1 FIPS providers are affected by this issue.\n## Remediation\nThere is no fixed version for `Ubuntu:22.04` `openssl`.\n## References\n- [http://people.ubuntu.com/~ubuntu-security/cve/CVE-2024-4603](http://people.ubuntu.com/~ubuntu-security/cve/CVE-2024-4603)\n- [https://github.com/openssl/openssl/commit/3559e868e58005d15c6013a0c1fd832e51c73397](https://github.com/openssl/openssl/commit/3559e868e58005d15c6013a0c1fd832e51c73397)\n- [https://github.com/openssl/openssl/commit/53ea06486d296b890d565fb971b2764fcd826e7e](https://github.com/openssl/openssl/commit/53ea06486d296b890d565fb971b2764fcd826e7e)\n- [https://github.com/openssl/openssl/commit/9c39b3858091c152f52513c066ff2c5a47969f0d](https://github.com/openssl/openssl/commit/9c39b3858091c152f52513c066ff2c5a47969f0d)\n- [https://github.com/openssl/openssl/commit/da343d0605c826ef197aceedc67e8e04f065f740](https://github.com/openssl/openssl/commit/da343d0605c826ef197aceedc67e8e04f065f740)\n- [https://www.openssl.org/news/secadv/20240516.txt](https://www.openssl.org/news/secadv/20240516.txt)\n- [http://www.openwall.com/lists/oss-security/2024/05/16/2](http://www.openwall.com/lists/oss-security/2024/05/16/2)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "deb"
                ],
                "cvssv3_baseScore": null,
                "security-severity": "null"
              }
            },
            {
              "id": "SNYK-UBUNTU2204-OPENSSL-7151340",
              "shortDescription": {
                "text": "Low severity - CVE-2024-4741 vulnerability in openssl"
              },
              "fullDescription": {
                "text": "(CVE-2024-4741) openssl/libssl3@3.0.2-0ubuntu1.15"
              },
              "help": {
                "text": "",
                "markdown": "## NVD Description\n_This vulnerability has not been analyzed by NVD yet._\n\n## Remediation\nThere is no fixed version for `Ubuntu:22.04` `openssl`.\n## References\n- [http://people.ubuntu.com/~ubuntu-security/cve/CVE-2024-4741](http://people.ubuntu.com/~ubuntu-security/cve/CVE-2024-4741)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "deb"
                ],
                "cvssv3_baseScore": null,
                "security-severity": "null"
              }
            },
            {
              "id": "SNYK-UBUNTU2204-PCRE3-2799820",
              "shortDescription": {
                "text": "Low severity - Uncontrolled Recursion vulnerability in pcre3"
              },
              "fullDescription": {
                "text": "(CVE-2017-11164) pcre3/libpcre3@2:8.39-13ubuntu0.22.04.1"
              },
              "help": {
                "text": "",
                "markdown": "## NVD Description\n**_Note:_** _Versions mentioned in the description apply only to the upstream `pcre3` package and not the `pcre3` package as distributed by `Ubuntu`._\n_See `How to fix?` for `Ubuntu:22.04` relevant fixed versions and status._\n\nIn PCRE 8.41, the OP_KETRMAX feature in the match function in pcre_exec.c allows stack exhaustion (uncontrolled recursion) when processing a crafted regular expression.\n## Remediation\nThere is no fixed version for `Ubuntu:22.04` `pcre3`.\n## References\n- [http://people.ubuntu.com/~ubuntu-security/cve/CVE-2017-11164](http://people.ubuntu.com/~ubuntu-security/cve/CVE-2017-11164)\n- [https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11164](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11164)\n- [https://security-tracker.debian.org/tracker/CVE-2017-11164](https://security-tracker.debian.org/tracker/CVE-2017-11164)\n- [https://lists.apache.org/thread.html/rf9fa47ab66495c78bb4120b0754dd9531ca2ff0430f6685ac9b07772@%3Cdev.mina.apache.org%3E](https://lists.apache.org/thread.html/rf9fa47ab66495c78bb4120b0754dd9531ca2ff0430f6685ac9b07772@%3Cdev.mina.apache.org%3E)\n- [http://openwall.com/lists/oss-security/2017/07/11/3](http://openwall.com/lists/oss-security/2017/07/11/3)\n- [http://www.securityfocus.com/bid/99575](http://www.securityfocus.com/bid/99575)\n- [http://www.openwall.com/lists/oss-security/2023/04/11/1](http://www.openwall.com/lists/oss-security/2023/04/11/1)\n- [http://www.openwall.com/lists/oss-security/2023/04/12/1](http://www.openwall.com/lists/oss-security/2023/04/12/1)\n- [https://lists.apache.org/thread.html/rf9fa47ab66495c78bb4120b0754dd9531ca2ff0430f6685ac9b07772%40%3Cdev.mina.apache.org%3E](https://lists.apache.org/thread.html/rf9fa47ab66495c78bb4120b0754dd9531ca2ff0430f6685ac9b07772%40%3Cdev.mina.apache.org%3E)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-674",
                  "deb"
                ],
                "cvssv3_baseScore": 7.5,
                "security-severity": "7.5"
              }
            },
            {
              "id": "SNYK-UBUNTU2204-PYTHON310-5438716",
              "shortDescription": {
                "text": "Medium severity - Improper Input Validation vulnerability in python3.10"
              },
              "fullDescription": {
                "text": "(CVE-2023-27043) python3.10/libpython3.10-stdlib@3.10.12-1~22.04.3"
              },
              "help": {
                "text": "",
                "markdown": "## NVD Description\n**_Note:_** _Versions mentioned in the description apply only to the upstream `python3.10` package and not the `python3.10` package as distributed by `Ubuntu`._\n_See `How to fix?` for `Ubuntu:22.04` relevant fixed versions and status._\n\nThe email module of Python through 3.11.3 incorrectly parses e-mail addresses that contain a special character. The wrong portion of an RFC2822 header is identified as the value of the addr-spec. In some applications, an attacker can bypass a protection mechanism in which application access is granted only after verifying receipt of e-mail to a specific domain (e.g., only @company.example.com addresses may be used for signup). This occurs in email/_parseaddr.py in recent versions of Python.\n## Remediation\nThere is no fixed version for `Ubuntu:22.04` `python3.10`.\n## References\n- [http://people.ubuntu.com/~ubuntu-security/cve/CVE-2023-27043](http://people.ubuntu.com/~ubuntu-security/cve/CVE-2023-27043)\n- [http://python.com](http://python.com)\n- [https://github.com/python/cpython/issues/102988](https://github.com/python/cpython/issues/102988)\n- [http://python.org](http://python.org)\n- [https://python-security.readthedocs.io/vuln/email-parseaddr-realname.html](https://python-security.readthedocs.io/vuln/email-parseaddr-realname.html)\n- [https://security.netapp.com/advisory/ntap-20230601-0003/](https://security.netapp.com/advisory/ntap-20230601-0003/)\n- [https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/4ZAEFSFZDNBNJPNOUTLG5COISGQDLMGV/](https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/4ZAEFSFZDNBNJPNOUTLG5COISGQDLMGV/)\n- [https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/ORLXS5YTKN65E2Q2NWKXMFS5FWQHRNZW/](https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/ORLXS5YTKN65E2Q2NWKXMFS5FWQHRNZW/)\n- [https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/PHVGRKQAGANCSGFI3QMYOCIMS4IFOZA5/](https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/PHVGRKQAGANCSGFI3QMYOCIMS4IFOZA5/)\n- [https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/PU6Y2S5CBN5BWCBDAJFTGIBZLK3S2G3J/](https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/PU6Y2S5CBN5BWCBDAJFTGIBZLK3S2G3J/)\n- [https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/SINP4OVYNB2AGDYI2GS37EMW3H3F7XPZ/](https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/SINP4OVYNB2AGDYI2GS37EMW3H3F7XPZ/)\n- [https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/XWMBD4LNHWEXRI6YVFWJMTJQUL5WOFTS/](https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/XWMBD4LNHWEXRI6YVFWJMTJQUL5WOFTS/)\n- [https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/VZXC32CJ7TWDPJO6GY2XIQRO7JZX5FLP/](https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/VZXC32CJ7TWDPJO6GY2XIQRO7JZX5FLP/)\n- [https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/75DTHSTNOFFNAWHXKMDXS7EJWC6W2FUC/](https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/75DTHSTNOFFNAWHXKMDXS7EJWC6W2FUC/)\n- [https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/ARI7VDSNTQVXRQFM6IK5GSSLEIYV4VZH/](https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/ARI7VDSNTQVXRQFM6IK5GSSLEIYV4VZH/)\n- [https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/NEUNZSZ3CVSM2QWVYH3N2XGOCDWNYUA3/](https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/NEUNZSZ3CVSM2QWVYH3N2XGOCDWNYUA3/)\n- [https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/P2W2BZQIHMCKRI5FNBJERFYMS5PK6TAH/](https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/P2W2BZQIHMCKRI5FNBJERFYMS5PK6TAH/)\n- [https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/RDDC2VOX7OQC6OHMYTVD4HLFZIV6PYBC/](https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/RDDC2VOX7OQC6OHMYTVD4HLFZIV6PYBC/)\n- [https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/YQVY5C5REXWJIORJIL2FIL3ALOEJEF72/](https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/YQVY5C5REXWJIORJIL2FIL3ALOEJEF72/)\n- [https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/SOX7BCN6YL7B3RFPEEXPIU5CMTEHJOKR/](https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/SOX7BCN6YL7B3RFPEEXPIU5CMTEHJOKR/)\n- [https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/N6M5I6OQHJABNEYY555HUMMKX3Y4P25Z/](https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/N6M5I6OQHJABNEYY555HUMMKX3Y4P25Z/)\n- [https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/P2MAICLFDDO3QVNHTZ2OCERZQ34R2PIC/](https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/P2MAICLFDDO3QVNHTZ2OCERZQ34R2PIC/)\n- [https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/HXYVPEZUA3465AEFX5JVFVP7KIFZMF3N/](https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/HXYVPEZUA3465AEFX5JVFVP7KIFZMF3N/)\n- [https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/BQAKLUJMHFGVBRDPEY57BJGNCE5UUPHW/](https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/BQAKLUJMHFGVBRDPEY57BJGNCE5UUPHW/)\n- [https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/QDRDDPDN3VFIYXJIYEABY6USX5EU66AG/](https://lists.fedoraproject.org/archives/list/package-announce%40lists.fedoraproject.org/message/QDRDDPDN3VFIYXJIYEABY6USX5EU66AG/)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-20",
                  "deb"
                ],
                "cvssv3_baseScore": 5.3,
                "security-severity": "5.3"
              }
            },
            {
              "id": "SNYK-UBUNTU2204-SHADOW-5425688",
              "shortDescription": {
                "text": "Low severity - Arbitrary Code Injection vulnerability in shadow"
              },
              "fullDescription": {
                "text": "(CVE-2023-29383) shadow/passwd@1:4.8.1-2ubuntu2.2"
              },
              "help": {
                "text": "",
                "markdown": "## NVD Description\n**_Note:_** _Versions mentioned in the description apply only to the upstream `shadow` package and not the `shadow` package as distributed by `Ubuntu`._\n_See `How to fix?` for `Ubuntu:22.04` relevant fixed versions and status._\n\nIn Shadow 4.13, it is possible to inject control characters into fields provided to the SUID program chfn (change finger). Although it is not possible to exploit this directly (e.g., adding a new user fails because \\n is in the block list), it is possible to misrepresent the /etc/passwd file when viewed. Use of \\r manipulations and Unicode characters to work around blocking of the : character make it possible to give the impression that a new user has been added. In other words, an adversary may be able to convince a system administrator to take the system offline (an indirect, social-engineered denial of service) by demonstrating that &#34;cat /etc/passwd&#34; shows a rogue user account.\n## Remediation\nThere is no fixed version for `Ubuntu:22.04` `shadow`.\n## References\n- [http://people.ubuntu.com/~ubuntu-security/cve/CVE-2023-29383](http://people.ubuntu.com/~ubuntu-security/cve/CVE-2023-29383)\n- [https://github.com/shadow-maint/shadow/commit/e5905c4b84d4fb90aefcd96ee618411ebfac663d](https://github.com/shadow-maint/shadow/commit/e5905c4b84d4fb90aefcd96ee618411ebfac663d)\n- [https://github.com/shadow-maint/shadow/pull/687](https://github.com/shadow-maint/shadow/pull/687)\n- [https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/cve-2023-29383-abusing-linux-chfn-to-misrepresent-etc-passwd/](https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/cve-2023-29383-abusing-linux-chfn-to-misrepresent-etc-passwd/)\n- [https://www.trustwave.com/en-us/resources/security-resources/security-advisories/?fid=31797](https://www.trustwave.com/en-us/resources/security-resources/security-advisories/?fid=31797)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-74",
                  "deb"
                ],
                "cvssv3_baseScore": 3.3,
                "security-severity": "3.3"
              }
            },
            {
              "id": "SNYK-UBUNTU2204-SYSTEMD-6137855",
              "shortDescription": {
                "text": "Low severity - CVE-2023-7008 vulnerability in systemd"
              },
              "fullDescription": {
                "text": "(CVE-2023-7008) systemd/libsystemd0@249.11-0ubuntu3.12"
              },
              "help": {
                "text": "",
                "markdown": "## NVD Description\n**_Note:_** _Versions mentioned in the description apply only to the upstream `systemd` package and not the `systemd` package as distributed by `Ubuntu`._\n_See `How to fix?` for `Ubuntu:22.04` relevant fixed versions and status._\n\nA vulnerability was found in systemd-resolved. This issue may allow systemd-resolved to accept records of DNSSEC-signed domains even when they have no signature, allowing man-in-the-middles (or the upstream DNS resolver) to manipulate records.\n## Remediation\nThere is no fixed version for `Ubuntu:22.04` `systemd`.\n## References\n- [http://people.ubuntu.com/~ubuntu-security/cve/CVE-2023-7008](http://people.ubuntu.com/~ubuntu-security/cve/CVE-2023-7008)\n- [https://access.redhat.com/security/cve/CVE-2023-7008](https://access.redhat.com/security/cve/CVE-2023-7008)\n- [https://bugzilla.redhat.com/show_bug.cgi?id=2222261](https://bugzilla.redhat.com/show_bug.cgi?id=2222261)\n- [https://bugzilla.redhat.com/show_bug.cgi?id=2222672](https://bugzilla.redhat.com/show_bug.cgi?id=2222672)\n- [https://github.com/systemd/systemd/issues/25676](https://github.com/systemd/systemd/issues/25676)\n- [https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/QHNBXGKJWISJETTTDTZKTBFIBJUOSLKL/](https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/QHNBXGKJWISJETTTDTZKTBFIBJUOSLKL/)\n- [https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/4GMDEG5PKONWNHOEYSUDRT6JEOISRMN2/](https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/4GMDEG5PKONWNHOEYSUDRT6JEOISRMN2/)\n- [https://access.redhat.com/errata/RHSA-2024:2463](https://access.redhat.com/errata/RHSA-2024:2463)\n- [https://access.redhat.com/errata/RHSA-2024:3203](https://access.redhat.com/errata/RHSA-2024:3203)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "deb"
                ],
                "cvssv3_baseScore": 5.9,
                "security-severity": "5.9"
              }
            },
            {
              "id": "SNYK-UBUNTU2204-WGET-2785488",
              "shortDescription": {
                "text": "Medium severity - Open Redirect vulnerability in wget"
              },
              "fullDescription": {
                "text": "(CVE-2021-31879) wget@1.21.2-2ubuntu1"
              },
              "help": {
                "text": "",
                "markdown": "## NVD Description\n**_Note:_** _Versions mentioned in the description apply only to the upstream `wget` package and not the `wget` package as distributed by `Ubuntu`._\n_See `How to fix?` for `Ubuntu:22.04` relevant fixed versions and status._\n\nGNU Wget through 1.21.1 does not omit the Authorization header upon a redirect to a different origin, a related issue to CVE-2018-1000007.\n## Remediation\nThere is no fixed version for `Ubuntu:22.04` `wget`.\n## References\n- [http://people.ubuntu.com/~ubuntu-security/cve/CVE-2021-31879](http://people.ubuntu.com/~ubuntu-security/cve/CVE-2021-31879)\n- [https://security.netapp.com/advisory/ntap-20210618-0002/](https://security.netapp.com/advisory/ntap-20210618-0002/)\n- [https://mail.gnu.org/archive/html/bug-wget/2021-02/msg00002.html](https://mail.gnu.org/archive/html/bug-wget/2021-02/msg00002.html)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-601",
                  "deb"
                ],
                "cvssv3_baseScore": 6.1,
                "security-severity": "6.1"
              }
            },
            {
              "id": "SNYK-UBUNTU2204-XZUTILS-5854647",
              "shortDescription": {
                "text": "Medium severity - CVE-2020-22916 vulnerability in xz-utils"
              },
              "fullDescription": {
                "text": "(CVE-2020-22916) xz-utils/liblzma5@5.2.5-2ubuntu1"
              },
              "help": {
                "text": "",
                "markdown": "## NVD Description\n**_Note:_** _Versions mentioned in the description apply only to the upstream `xz-utils` package and not the `xz-utils` package as distributed by `Ubuntu`._\n_See `How to fix?` for `Ubuntu:22.04` relevant fixed versions and status._\n\nAn issue discovered in XZ 5.2.5 allows attackers to cause a denial of service via decompression of a crafted file. NOTE: the vendor disputes the claims of &#34;endless output&#34; and &#34;denial of service&#34; because decompression of the 17,486 bytes always results in 114,881,179 bytes, which is often a reasonable size increase.\n## Remediation\nThere is no fixed version for `Ubuntu:22.04` `xz-utils`.\n## References\n- [http://people.ubuntu.com/~ubuntu-security/cve/CVE-2020-22916](http://people.ubuntu.com/~ubuntu-security/cve/CVE-2020-22916)\n- [https://github.com/snappyJack/CVE-request-XZ-5.2.5-has-denial-of-service-vulnerability](https://github.com/snappyJack/CVE-request-XZ-5.2.5-has-denial-of-service-vulnerability)\n- [https://tukaani.org/xz/](https://tukaani.org/xz/)\n- [https://bugzilla.redhat.com/show_bug.cgi?id=2234987](https://bugzilla.redhat.com/show_bug.cgi?id=2234987)\n- [https://bugzilla.suse.com/show_bug.cgi?id=1214590](https://bugzilla.suse.com/show_bug.cgi?id=1214590)\n- [https://github.com/tukaani-project/xz/issues/61](https://github.com/tukaani-project/xz/issues/61)\n- [https://security-tracker.debian.org/tracker/CVE-2020-22916](https://security-tracker.debian.org/tracker/CVE-2020-22916)\n- [http://web.archive.org/web/20230918084612/https://github.com/snappyJack/CVE-request-XZ-5.2.5-has-denial-of-service-vulnerability](http://web.archive.org/web/20230918084612/https://github.com/snappyJack/CVE-request-XZ-5.2.5-has-denial-of-service-vulnerability)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "deb"
                ],
                "cvssv3_baseScore": 5.5,
                "security-severity": "5.5"
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "SNYK-UBUNTU2204-COREUTILS-2801226",
          "level": "note",
          "message": {
            "text": "This file introduces a vulnerable coreutils package with a low severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm_2.6"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "coreutils@8.32-4.1ubuntu1.2"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-UBUNTU2204-GCC12-5861847",
          "level": "note",
          "message": {
            "text": "This file introduces a vulnerable gcc-12 package with a low severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm_2.6"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "gcc-12@12.3.0-1ubuntu1~22.04"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-UBUNTU2204-GLIBC-2801292",
          "level": "note",
          "message": {
            "text": "This file introduces a vulnerable glibc package with a low severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm_2.6"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "glibc@2.35-0ubuntu3.8"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-UBUNTU2204-GNUPG2-3035409",
          "level": "note",
          "message": {
            "text": "This file introduces a vulnerable gnupg2 package with a low severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm_2.6"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "gnupg2@2.2.27-3ubuntu2.1"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-UBUNTU2204-KRB5-2797765",
          "level": "note",
          "message": {
            "text": "This file introduces a vulnerable krb5 package with a low severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm_2.6"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "krb5@1.19.2-2ubuntu0.3"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-UBUNTU2204-KRB5-6281067",
          "level": "note",
          "message": {
            "text": "This file introduces a vulnerable krb5 package with a low severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm_2.6"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "krb5@1.19.2-2ubuntu0.3"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-UBUNTU2204-KRB5-6281073",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable krb5 package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm_2.6"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "krb5@1.19.2-2ubuntu0.3"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-UBUNTU2204-KRB5-6281079",
          "level": "note",
          "message": {
            "text": "This file introduces a vulnerable krb5 package with a low severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm_2.6"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "krb5@1.19.2-2ubuntu0.3"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-UBUNTU2204-LIBGCRYPT20-6411451",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable libgcrypt20 package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm_2.6"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "libgcrypt20@1.9.4-3ubuntu3"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-UBUNTU2204-LIBPNG16-3124883",
          "level": "note",
          "message": {
            "text": "This file introduces a vulnerable libpng1.6 package with a low severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm_2.6"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "libpng1.6@1.6.37-3build5"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-UBUNTU2204-LIBZSTD-3368800",
          "level": "note",
          "message": {
            "text": "This file introduces a vulnerable libzstd package with a low severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm_2.6"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "libzstd@1.4.8+dfsg-3build1"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-UBUNTU2204-NCURSES-6123867",
          "level": "note",
          "message": {
            "text": "This file introduces a vulnerable ncurses package with a low severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm_2.6"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "ncurses@6.3-2ubuntu0.1"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-UBUNTU2204-NCURSES-6253015",
          "level": "note",
          "message": {
            "text": "This file introduces a vulnerable ncurses package with a low severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm_2.6"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "ncurses@6.3-2ubuntu0.1"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-UBUNTU2204-OPENSSL-5538123",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable openssl package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm_2.6"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "openssl@3.0.2-0ubuntu1.15"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-UBUNTU2204-OPENSSL-6592113",
          "level": "note",
          "message": {
            "text": "This file introduces a vulnerable openssl package with a low severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm_2.6"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "openssl@3.0.2-0ubuntu1.15"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-UBUNTU2204-OPENSSL-6861899",
          "level": "note",
          "message": {
            "text": "This file introduces a vulnerable openssl package with a low severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm_2.6"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "openssl@3.0.2-0ubuntu1.15"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-UBUNTU2204-OPENSSL-7151340",
          "level": "note",
          "message": {
            "text": "This file introduces a vulnerable openssl package with a low severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm_2.6"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "openssl@3.0.2-0ubuntu1.15"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-UBUNTU2204-PCRE3-2799820",
          "level": "note",
          "message": {
            "text": "This file introduces a vulnerable pcre3 package with a low severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm_2.6"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "pcre3@2:8.39-13ubuntu0.22.04.1"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-UBUNTU2204-PYTHON310-5438716",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable python3.10 package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm_2.6"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "python3.10@3.10.12-1~22.04.3"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-UBUNTU2204-SHADOW-5425688",
          "level": "note",
          "message": {
            "text": "This file introduces a vulnerable shadow package with a low severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm_2.6"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "shadow@1:4.8.1-2ubuntu2.2"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-UBUNTU2204-SYSTEMD-6137855",
          "level": "note",
          "message": {
            "text": "This file introduces a vulnerable systemd package with a low severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm_2.6"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "systemd@249.11-0ubuntu3.12"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-UBUNTU2204-WGET-2785488",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable wget package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm_2.6"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "wget@1.21.2-2ubuntu1"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-UBUNTU2204-XZUTILS-5854647",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable xz-utils package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "storm_2.6"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "xz-utils@5.2.5-2ubuntu1"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Snyk Container",
          "properties": {
            "artifactsScanned": 332
          },
          "rules": [
            {
              "id": "SNYK-JAVA-COMCEDARSOFTWARE-5710367",
              "shortDescription": {
                "text": "High severity - Denial of Service (DoS) vulnerability in com.cedarsoftware:json-io"
              },
              "fullDescription": {
                "text": "(CVE-2023-34610) com.cedarsoftware:json-io@2.5.1"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). Exploiting this vulnerability is possible via crafted objects that have deeply nested structures, leading to stack exhaustion\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `com.cedarsoftware:json-io` to version 4.14.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jdereg/json-io/commit/7de18108c35638d58b65738ec579f4be58a80ce4)\n- [GitHub Issue](https://github.com/jdereg/json-io/issues/169)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "maven"
                ],
                "cvssv3_baseScore": 7.5,
                "security-severity": "7.5"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1009829",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2020-24750) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It mishandles the interaction between serialization gadgets and typing, related to `com.pastdev.httpcomponents.configuration.JndiConfiguration`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.9.10.6 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2798)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1047324",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2020-10650) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It mishandles the interaction between serialization gadgets and typing, related to the class `ignite-jta`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.9.10.4 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2658)\n- [GitHub PR](https://github.com/FasterXML/jackson-databind/pull/2864#issuecomment-701026600)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1048302",
              "shortDescription": {
                "text": "High severity - XML External Entity (XXE) Injection vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2020-25649) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to XML External Entity (XXE) Injection. A flaw was found in FasterXML Jackson Databind, where it does not have entity expansion secured properly in the `DOMDeserializer` class. The highest threat from this vulnerability is data integrity.\n\n## Details\nXXE Injection is a type of attack against an application that parses XML input.\nXML is a markup language that defines a set of rules for encoding documents in a format that is both human-readable and machine-readable. By default, many XML processors allow specification of an external entity, a URI that is dereferenced and evaluated during XML processing. When an XML document is being parsed, the parser can make a request and include the content at the specified URI inside of the XML document.\n\nAttacks can include disclosing local files, which may contain sensitive data such as passwords or private user data, using file: schemes or relative paths in the system identifier.\n\nFor example, below is a sample XML document, containing an XML element- username.\n\n```\n<xml>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n   <username>John</username>\n</xml>\n```\n\nAn external XML entity - `xxe`, is defined using a system identifier and present within a DOCTYPE header. These entities can access local or remote content. For example the below code contains an external XML entity that would fetch the content of  `/etc/passwd` and display it to the user rendered by `username`.\n\n```\n<xml>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<!DOCTYPE foo [\n   <!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]>\n   <username>&xxe;</username>\n</xml>\n```\n\nOther XXE Injection attacks can access local resources that may not stop returning data, possibly impacting application availability and leading to Denial of Service.\n\n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.9.10.7, 2.10.5.1 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/612f971b78c60202e9cd75a299050c8f2d724a59)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2589)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=1887664)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-611",
                  "maven"
                ],
                "cvssv3_baseScore": 8.2,
                "security-severity": "8.2"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1052449",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2020-35490) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It mishandles the interaction between serialization gadgets and typing, related to `org.apache.commons.dbcp2.datasources.PerUserPoolDataSource`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\n  \nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n  \n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application, an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.8 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2986)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1052450",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2020-35491) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It mishandles the interaction between serialization gadgets and typing, related to `org.apache.commons.dbcp2.datasources.SharedPoolDataSource`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\n  \nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n  \n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application, an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.8 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2986)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1054588",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2020-35728) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It mishandles the interaction between serialization gadgets and typing, related to `com.oracle.wls.shaded.org.apache.xalan.lib.sql.JNDIConnectionPool` (aka embedded Xalan in `org.glassfish.web/javax.servlet.jsp.jstl`).\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.8 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2999)\n- [Medium Post](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n- [PoC](https://github.com/Al1ex/CVE-2020-35728)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056414",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2020-36187) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to `org.apache.tomcat.dbcp.dbcp.datasources.SharedPoolDataSource`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.8 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/3e8fa3beea49ea62109df9e643c9cb678dabdde1)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2997)\n- [Medium Article](https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056416",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2020-36184) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to `org.apache.tomcat.dbcp.dbcp2.datasources.PerUserPoolDataSource`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.8 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2998)\n- [Medium Article](https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n- [PoC](https://github.com/Al1ex/CVE-2020-36184)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056417",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2020-36186) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to `org.apache.tomcat.dbcp.dbcp.datasources.PerUserPoolDataSource`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.8 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2997)\n- [Medium Article](https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056418",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2020-36180) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to `org.apache.commons.dbcp2.cpdsadapter.DriverAdapterCPDS`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.8 or higher.\n## References\n- [Al1ex's Poc](https://github.com/Al1ex/CVE-2020-36179)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/3004)\n- [Medium Article](https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056419",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2020-36183) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to `org.docx4j.org.apache.xalan.lib.sql.JNDIConnectionPool`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.8 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/3003)\n- [Medium Article](https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056420",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2020-36179) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to `oadd.org.apache.commons.dbcp.cpdsadapter.DriverAdapterCPDS`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.8 or higher.\n## References\n- [Al1ex's Poc](https://github.com/Al1ex/CVE-2020-36179)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/3004)\n- [Medium Article](https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056421",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2020-36182) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to `org.apache.tomcat.dbcp.dbcp2.cpdsadapter.DriverAdapterCPDS`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.8 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/3004)\n- [Medium Article](https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n- [PoC](https://github.com/Al1ex/CVE-2020-36179)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056424",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2020-36185) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to `org.apache.tomcat.dbcp.dbcp2.datasources.SharedPoolDataSource`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.8 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2998)\n- [Medium Article](https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056425",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2020-36189) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to `com.newrelic.agent.deps.ch.qos.logback.core.db.DriverManagerConnectionSource`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.8 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2996)\n- [Medium Article](https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056426",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2020-36188) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to `com.newrelic.agent.deps.ch.qos.logback.core.db.JNDIConnectionSource`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.8 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2996)\n- [Medium Article](https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n- [PoC](https://github.com/Al1ex/CVE-2020-36188)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056427",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2020-36181) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to `org.apache.tomcat.dbcp.dbcp.cpdsadapter.DriverAdapterCPDS`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.8 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/3004)\n- [Medium Article](https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n- [Poc](https://github.com/Al1ex/CVE-2020-36179)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1061931",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2021-20190) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. A malicious user could perform a SSRF attack via the `javax.swing` gadget (specifically `javax.swing.JTextPane`).\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\n  \nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n  \n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application, an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.7 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/7dbf51bf78d157098074a20bd9da39bd48c18e4a)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2854)\n- [GitHub Release](https://github.com/FasterXML/jackson-databind/releases/tag/jackson-databind-2.9.10.7)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=1916633)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "CWE-918",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-174736",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2019-12086) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. When Default Typing is enabled for an externally exposed JSON endpoint, the service has the mysql-connector-java jar in the classpath. An attacker can host a crafted MySQL server reachable by the victim and send a crafted JSON message that allows them to read arbitrary local files on the server. This occurs due to missing `com.mysql.cj.jdbc.admin.MiniAdmin` validation.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.9, 2.8.11.4, 2.7.9.6, 2.6.7.3 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/dda513bd7251b4f32b7b60b1c13740e3b5a43024)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2326)\n- [Github Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.9)\n- [PoC](https://github.com/Al1ex/CVE-2019-12086)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-2421244",
              "shortDescription": {
                "text": "High severity - Denial of Service (DoS) vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2020-36518) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) via a large depth of nested objects.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.12.6.1, 2.13.2.1 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/8238ab41d0350fb915797c89d46777b4496b74fd)\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/fcfc4998ec23f0b1f7f8a9521c2b317b6c25892b)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2816)\n- [GitHub PR](https://github.com/FasterXML/jackson-databind/pull/3416)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "maven"
                ],
                "cvssv3_baseScore": 7.5,
                "security-severity": "7.5"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-3038424",
              "shortDescription": {
                "text": "Medium severity - Denial of Service (DoS) vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2022-42004) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) in the `_deserializeFromArray()` function in `BeanDeserializer`, due to resource exhaustion when processing a deeply nested array.\r\n\r\n**NOTE:**\r\nFor this vulnerability to be exploitable the non-default `DeserializationFeature` must be enabled.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.12.7.1, 2.13.4 or higher.\n## References\n- [Chromium Bugs](https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=50490)\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/063183589218fec19a9293ed2f17ec53ea80ba88)\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/cd090979b7ea78c75e4de8a4aed04f7e9fa8deea)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/3582)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "maven"
                ],
                "cvssv3_baseScore": 5.9,
                "security-severity": "5.9"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-3038426",
              "shortDescription": {
                "text": "Medium severity - Denial of Service (DoS) vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2022-42003) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) in the `_deserializeWrappedValue()` function in `StdDeserializer.java`, due to resource exhaustion when processing deeply nested arrays.\r\n\r\n**NOTE:** This vulnerability is only exploitable when the non-default `UNWRAP_SINGLE_VALUE_ARRAYS` feature is enabled.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.12.7.1, 2.13.4.1 or higher.\n## References\n- [Chromium Bugs](https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=51020)\n- [Documentation](https://fasterxml.github.io/jackson-databind/javadoc/2.9/com/fasterxml/jackson/databind/DeserializationFeature.html#UNWRAP_SINGLE_VALUE_ARRAYS)\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/2c4a601c626f7790cad9d3c322d244e182838288)\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/cd090979b7ea78c75e4de8a4aed04f7e9fa8deea)\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/d78d00ee7b5245b93103fef3187f70543d67ca33)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/3590)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "maven"
                ],
                "cvssv3_baseScore": 5.9,
                "security-severity": "5.9"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-32111",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2018-7489) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It allows unauthenticated remote code execution because of an incomplete fix for the CVE-2017-7525 deserialization flaw. This is exploitable by sending maliciously crafted JSON input to the readValue method of the ObjectMapper, bypassing a blacklist that is ineffective if the `c3p0` libraries are available in the classpath.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.5, 2.8.11.1, 2.9.5 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/6799f8f10cc78e9af6d443ed6982d00a13f2e7d2)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/1931)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-450207",
              "shortDescription": {
                "text": "Medium severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2019-12814) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. A Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.x through 2.9.9. When Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint and the service has JDOM 1.x or 2.x jar in the classpath, an attacker can send a specifically crafted JSON message that allows them to read arbitrary local files on the server.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.9.1, 2.8.11.4, 2.7.9.6 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/5f7c69bba07a7155adde130d9dee2e54a54f1fa5)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2341)\n- [PoC Repository](https://github.com/Al1ex/CVE-2019-12814)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 5.9,
                "security-severity": "5.9"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-450917",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2019-12384) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data which allows attackers to have a variety of impacts by leveraging failure to block the `logback-core` class from polymorphic deserialization. Depending on the `classpath` content, remote code execution may be possible.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.9.1, 2.8.11.4, 2.7.9.6 or higher.\n## References\n- [Debian Security Announcement](https://lists.debian.org/debian-lts-announce/2019/06/msg00019.html)\n- [Exploit](https://github.com/jas502n/CVE-2019-12384)\n- [Github Fix](https://github.com/FasterXML/jackson-databind/blob/a6667bcd1f0114f5b004d5203f4139b1e6104a1c/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2334)\n- [Jackson CVEs Don't Panic - Blog](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n- [Release Notes](https://github.com/FasterXML/jackson-databind/blob/a6667bcd1f0114f5b004d5203f4139b1e6104a1c/release-notes/VERSION-2.x)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-455617",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2019-14379) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. `SubTypeValidator.java` mishandles default typing when `ehcache` is used, leading to remote code execution.\n\n\n **NOTE:** This vulnerability has also been identified as: [CVE-2019-14439](https://security.snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-6056407)\n\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.9.2, 2.8.11.4, 2.7.9.6 or higher.\n## References\n- [GitHub Comparison](https://github.com/FasterXML/jackson-databind/compare/jackson-databind-2.9.9.1...jackson-databind-2.9.9.2)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2387)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2389)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2395)\n- [Snyk Blog](https://snyk.io/blog/jackson-deserialization-vulnerability/)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-467014",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2019-16335) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. A Polymorphic Typing issue was discovered as `com.zaxxer.hikari.HikariDataSource` was not blocked.\r\n**Note:** This is a different vulnerability than CVE-2019-14540.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10, 2.8.11.5, 2.6.7.3 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/73c1c2cc76e6cdd7f3a5615cbe3207fe96e4d3db)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2449)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-467015",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2019-14540) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. A Polymorphic Typing issue was discovered as `com.zaxxer.hikari.HikariConfig` was not blocked.\r\n**Note:** This is a different vulnerability than CVE-2019-16335.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10, 2.8.11.5, 2.6.7.3 or higher.\n## References\n- [Exploit](https://github.com/LeadroyaL/cve-2019-14540-exploit)\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/d4983c740fec7d5576b207a8c30a63d3ea7443de)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2410)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-467016",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It mishandles the interaction between serialization gadgets and typing, related to `org.apache.cxf.jaxrs.provider.XSLTJaxbProvider`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10, 2.8.11.5, 2.6.7.3 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/d4983c740fec7d5576b207a8c30a63d3ea7443de)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2420)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-469674",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2019-16942) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. A Polymorphic Typing issue was discovered within `org.apache.commons.dbcp.datasources.SharedPoolDataSource` was not blocked. An attacker could leverage this gadget type  to perform Remote Code Execution attacks through deserialization.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.1, 2.8.11.5, 2.6.7.3 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/9593e16cf5a3d289a9c584f7123639655de9ddac)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2478)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-469676",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2019-16943) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. A Polymorphic Typing issue was discovered as `com.p6spy.engine.spy.P6DataSource` was not blocked. An attacker could leverage this gadget type  to perform Remote Code Execution attacks through deserialization.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.1, 2.8.11.5, 2.6.7.3 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/9593e16cf5a3d289a9c584f7123639655de9ddac)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2478)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-471943",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2019-17267) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. A Polymorphic Typing issue was discovered related to `net.sf.ehcache.hibernate.EhcacheJtaTransactionManagerLookup`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/191a4cdf87b56d2ddddb77edd895ee756b7f75eb)\n- [GitHub Comparison](https://github.com/FasterXML/jackson-databind/compare/jackson-databind-2.9.9.3...jackson-databind-2.9.10)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2460)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-472980",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2019-17531) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. When Default Typing is enabled for an externally exposed JSON endpoint and the service has the apache-log4j-extra (version 1.2.x) jar in the classpath, and an attacker can provide a JNDI service to access, it is possible to make the service execute a malicious payload.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.1 or higher.\n## References\n- [Blog Post](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/b5a304a98590b6bb766134f9261e6566dcbbb6d0)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2498)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-540500",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2019-20330) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. Two additional `net.sf.ehcache` gadgets are not blacklisted.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.2 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/fc4214a883dc087070f25da738ef0d49c2f3387e)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2526)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-548451",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2020-8840) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data due to an incomplete black list (incomplete fix for [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507)). \r\nIt lacks `xbean-reflect/JNDI` blocking, as demonstrated by `org.apache.xbean.propertyeditor.JndiConverter`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.7.9.7, 2.8.11.5, 2.9.10.3 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/914e7c9f2cb8ce66724bf26a72adc7e958992497)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2620)\n- [Jackson PoC](https://github.com/jas502n/jackson-CVE-2020-8840)\n- [PoC](https://github.com/jas502n/CVE-2020-8840)\n- [PoC](https://github.com/Veraxy01/CVE-2020-8840)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-559094",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2020-9546,CVE-2020-9547,CVE-2020-9548) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. Mishandles the interaction between serialization gadgets and typing, related to:\r\n\r\n* `com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig` (aka `ibatis-sqlmap`)\r\n* `br.com.anteros.dbcp.AnterosDBCPConfig` (aka `anteros-core`)\r\n* `org.apache.hadoop.shaded.com.zaxxer.hikari.HikariConfig` (aka shaded `hikari-config`)\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.7.9.7, 2.8.11.6, 2.9.10.4 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/9f4e97019fb0dd836533d0b6198c88787e235ae2)\n- [Github Issue #1](https://github.com/FasterXML/jackson-databind/issues/2634)\n- [GitHub Issue #2](https://github.com/FasterXML/jackson-databind/issues/2631)\n- [GitHub PoC](https://github.com/fairyming/CVE-2020-9548)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-559106",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2019-14892,CVE-2019-14893) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data due to an incomplete black list (incomplete fix for [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507)). \r\nIt doesn't block `common-configuration` JNDI classes `org.apache.commons.configuration.JNDIConfiguration` and `org.apache.commons.configuration2.JNDIConfiguration`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.3, 2.8.11.5, 2.9.10.3 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/41b7f9b90149e9d44a65a8261a8deedc7186f6af)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2462)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2469)\n- [RedHat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2019-14892)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-560762",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2020-10673) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to `com.caucho.config.types.ResourceRef` (aka `caucho-quercus`).\r\n\r\n\r\nNote: This vulnerability does not affect release `2.10.0` onward.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.9.10.4 or higher.\n## References\n- [GitHub Commit (Master)](https://github.com/FasterXML/jackson-databind/commit/1645efbd392989cf015f459a91c999e59c921b15)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2660)\n- [On Jackson CVE's Blog](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n- [PoC](https://github.com/Al1ex/CVE-2020-10673)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-560766",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2020-10672) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to `org.apache.aries.transaction.jms.internal.XaPooledConnectionFactory` (aka `aries.transaction.jms`). \r\n\r\nNote: This vulnerability does not affect release `2.10.0` onward.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.9.10.4 or higher.\n## References\n- [GitHub Commit (Master)](https://github.com/FasterXML/jackson-databind/commit/592872f4235c7f2a3280725278da55544032f72d)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2659)\n- [On Jackson CVEs: Don’t Panic](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-561362",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2020-10969) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to gadget `javax.swing.JEditorPane`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.7.9.7, 2.8.11.6, 2.9.10.4 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2642)\n- [Medium Article](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-561373",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2020-10968) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to gadget `org.aoju.bus.proxy.provider.remoting.RmiProvider` (aka bus-proxy).\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.9.10.4 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2662)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-561585",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2020-11113) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It mishandles the interaction between serialization gadgets and typing, related to gadget `org.apache.openjpa.ee.WASRegistryManagedRuntime` (aka openjpa).\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.9.10.4 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/e2ba12d5d60715d95105e3e790fc234cfb59893d)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2670)\n- [PoC](https://github.com/Al1ex/CVE-2020-11113)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-561586",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2020-11111) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It mishandles the interaction between serialization gadgets and typing, related to gadgets `org.apache.activemq.*` (aka activemq-jms, activemq-core, activemq-pool, and activemq-pool-jms).\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.9.10.4 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/c14c9f99ed030dbd1440129585f03440c8758a99)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2664)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-561587",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2020-11112) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It mishandles the interaction between serialization gadgets and typing, related to gadget  `org.apache.commons.proxy.provider.remoting.RmiProvider` (aka apache/commons-proxy).\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.9.10.4 or higher.\n## References\n- [GItHub Commit](https://github.com/FasterXML/jackson-databind/commit/05d7e0e13f43e12db6a51726df12c8b4d8040676)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2666)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-564887",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2020-11620) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It mishandles the interaction between serialization gadgets and typing, related to `org.apache.commons.jelly.impl.Embedded` (aka `commons-jelly`).\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.9.10.4 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2682)\n- [Medium Post](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-564888",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2020-11619) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It mishandles the interaction between serialization gadgets and typing, related to `org.springframework.aop.config.MethodLocatingFactoryBean` (aka `spring-aop`).\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.9.10.4 or higher.\n## References\n- [GitHub Issues](https://github.com/FasterXML/jackson-databind/issues/2680)\n- [Medium Post](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-570625",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2020-14062) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It is possible to conduct a Deserialization attack using the `com.sun.org.apache.xalan.internal.lib.sql.JNDIConnectionPool`  (`xalan2`) class gadget if polymorphic type handling is enabled and an application using this package allows user input which gets deserialized. \r\n\r\nNote: This vulnerability does not affect release `2.10.0` onward.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.9.10.5 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/840eae2ca81c597a0010b2126f32dce17d384b70)\n- [Github Issue](https://github.com/FasterXML/jackson-databind/issues/2704)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-572300",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2020-14195) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. The package mishandles the interaction between serialization gadgets and typing, related to `org.jsecurity.realm.jndi.JndiRealmFactory`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.9.10.5 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/f6d9c664f6d481703138319f6a0f1fdbddb3a259)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2765)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-572314",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2020-14060) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It is possible to conduct a Deserialization attack using the `oadd.org.apache.xalan.lib.sql.JNDIConnectionPool`  (`apache/drill`) class gadget if polymorphic type handling is enabled and an application using this package allows user input which gets deserialized. \r\n\r\nNote: This vulnerability does not affect release `2.10.0` onward.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.9.10.5 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/d1c67a0396e84c08d0558fbb843b5bd1f26e1921)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2688)\n- [Medium Article](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-572316",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2020-14061) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It is possible to conduct a Deserialization attack using any of the following class gadget available within `weblogic/oracle-aqjms` if polymorphic type handling is enabled and an application using this package allows user input which gets deserialized. \r\n\r\n* oracle.jms.AQjmsQueueConnectionFactory\r\n* oracle.jms.AQjmsXATopicConnectionFactory\r\n* oracle.jms.AQjmsTopicConnectionFactory\r\n* oracle.jms.AQjmsXAQueueConnectionFactory\r\n* oracle.jms.AQjmsXAConnectionFactory\r\n\r\nNote: This vulnerability does not affect release `2.10.0` onward.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.9.10.5 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2698)\n- [Medium Article](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-6056407",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2019-14439) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. `SubTypeValidator.java` mishandles default typing when `ehcache` is used, leading to remote code execution.\n\n\n **NOTE:** This vulnerability has also been identified as: [CVE-2019-14379](https://security.snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-455617)\n\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.9.2, 2.8.11.4, 2.7.9.6 or higher.\n## References\n- [GitHub Comparison](https://github.com/FasterXML/jackson-databind/compare/jackson-databind-2.9.9.1...jackson-databind-2.9.9.2)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2387)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2389)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2395)\n- [Snyk Blog](https://snyk.io/blog/jackson-deserialization-vulnerability/)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-608664",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2020-24616) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It mishandles the interaction between serialization gadgets and typing, related to `br.com.anteros.dbcp.AnterosDBCPDataSource` (aka Anteros-DBCP).\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\n  \nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n  \n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application, an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.4, 2.9.10.6 or higher.\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2814)\n- [Medium Article](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n- [PoC](https://github.com/Kamimuka/cve-2020-24616-poc)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72445",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2018-12022) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. An attacker could perform a Remote Code Execution attack, if the user is handling untrusted content or using the `Default Typing` feature.  an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-12022`) is not identical to `CVE-2018-12018`,`CVE-2018-12019`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14723` and `CVE-2018-11307`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.3, 2.7.9.4, 2.8.11.2, 2.9.6 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/7487cf7eb14be2f65a1eb108e8629c07ef45e0a1)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2052)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72446",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2018-11307) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It may allow content exfiltration (remote access by sending contents over ftp) when untrusted content is deserialized with default typing enabled. This vulnerability is due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-11307`) is not identical to `CVE-2018-12018`,`CVE-2018-12019`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722` and `CVE-2018-14723`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.3, 2.7.9.4, 2.8.11.2, 2.9.5 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/27b4defc270454dea6842bd9279f17387eceb737)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2032)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72447",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2018-12023) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. An attacker could perform a Remote Code Execution attack, if the user is handling untrusted content or using the `Default Typing` feature. This vulnerability is due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-12023`) is not identical to `CVE-2018-12018`, `CVE-2018-12019`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722` and `CVE-2018-11307`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.3, 2.7.9.4, 2.8.11.2, 2.9.6 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/28badf7ef60ac3e7ef151cd8e8ec010b8479226a)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2058)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72448",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2018-14718) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. An attacker could perform a Remote Code Execution attacks via the ` slf4j-ext` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14718`) is not identical to `CVE-2018-12019`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.3, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72449",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2018-14720) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. An attacker could perform an XML External Entity (XXE) Injection via the `JDK` classes due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14720`) is not identical to `CVE-2018-12018`, `CVE-2018-14729`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.3, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72450",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2018-14719) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. An attacker could perform a Remote Code Execution attack via the `blaze-ds-opt` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14719`) is not identical to `CVE-2018-12018`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.3, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\n- [GitHub Release Notes](https://github.com/FasterXML/jackson-databind/blob/a066415d66a6b1a4688ff0ed25695aa3a86ac130/release-notes/VERSION-2.x)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72451",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2018-14721) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. A malicious user could perform a SSRF attack via the `axis2-jaxws` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14721`) is not identical to `CVE-2018-12018`, `CVE-2018-14719`, `CVE-2018-14720`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.3, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72882",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2018-19362) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. An attacker could perform a Remote Code Execution attacks due to not blocking the `jboss-common-core ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19362`) is not identical to `CVE-2018-19360` and `CVE-2018-19361`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.3, 2.7.9.5, 2.8.11.3, 2.9.8 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72883",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2018-19360) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. An attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19360`) is not identical to `CVE-2018-19362` and `CVE-2018-19361`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.3, 2.7.9.5, 2.8.11.3, 2.9.8 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72884",
              "shortDescription": {
                "text": "High severity - Deserialization of Untrusted Data vulnerability in com.fasterxml.jackson.core:jackson-databind"
              },
              "fullDescription": {
                "text": "(CVE-2018-19361) com.fasterxml.jackson.core:jackson-databind@2.9.4"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. An attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19361`) is not identical to `CVE-2018-19362` and `CVE-2018-19360`.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating objects from a  sequence of bytes is called deserialization. _Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)) occurs when an application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, allowing the attacker to control the state or the flow of the execution.\n\n`com.fasterxml.jackson.core:jackson-databind` allows deserialization of JSON input to Java objects. If an application using this dependency has the ability to deserialize a JSON string from an untrusted source, an attacker could leverage this vulnerability to conduct deserialization attacks.\n\nExploitation of unsafe deserialization attacks through `jackson-databind` requires the following prerequisites: \n\n### 1. The target application allowing JSON user input which is processed by jackson-databind\n\nAn application using `jackson-databind` is only vulnerable if a user-provided JSON data is deserialized. \n\n### 2. Polymorphic type handling for properties with nominal type are enabled\n\nPolymorphic type handling refers to the addition of enough type information so that the deserializer can instantiate the appropriate subtype of a value. Use of \"default typing\" is considered dangerous due to the possibility of an untrusted method (gadget) managing to specify a class that is accessible through the class-loader and therefore, exposing a set of methods and/or fields.\n\n### 3. An exploitable gadget class is available for the attacker to leverage \n\nGadget chains are specially crafted method sequences that can be created by an attacker in order to change the flow of code execution. These gadgets are often methods introduced by third-party components which an attacker could utilise in order to attack the target application. Not every gadget out there is supported by `jackson-databind`. The maintainers of `jackson-databind` proactively blacklists possible serialization gadgets in an attempt to ensure that it is not possible for an attacker to chain gadgets during serialization. \n\n### Further reading:\n\n - [On Jackson CVEs: Don’t Panic on Medium](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n - [NCC Group Jackson Deserialization WhitePaper](https://www.nccgroup.com/globalassets/our-research/us/whitepapers/2018/jackson_deserialization.pdf)\n - [Java Security Best Practices](https://snyk.io/blog/10-java-security-best-practices/)\n  \n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.6.7.3, 2.7.9.5, 2.8.11.3, 2.9.8 or higher.\n## References\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-502",
                  "maven"
                ],
                "cvssv3_baseScore": 8.1,
                "security-severity": "8.1"
              }
            },
            {
              "id": "SNYK-JAVA-COMGOOGLEGUAVA-1015415",
              "shortDescription": {
                "text": "Low severity - Information Disclosure vulnerability in com.google.guava:guava"
              },
              "fullDescription": {
                "text": "(CVE-2020-8908) com.google.guava:guava@11.0.2"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\n[com.google.guava:guava](https://github.com/google/guava) is a set of core libraries that includes new collection types (such as multimap and multiset,immutable collections, a graph library, functional types, an in-memory cache and more.\n\n\nAffected versions of this package are vulnerable to Information Disclosure.\nThe file permissions on the file created by `com.google.common.io.Files.createTempDir` allow an attacker running a malicious program co-resident on the same machine to steal secrets stored in this directory. This is because, by default, on unix-like operating systems the /tmp directory is shared between all users, so if the correct file permissions aren't set by the directory/file creator, the file becomes readable by all other users on that system.\r\n\r\n## PoC\r\n```java\r\nFile guavaTempDir = com.google.common.io.Files.createTempDir();\r\nSystem.out.println(\"Guava Temp Dir: \" + guavaTempDir.getName());\r\nrunLS(guavaTempDir.getParentFile(), guavaTempDir); // Prints the file permissions -> drwxr-xr-x\r\nFile child = new File(guavaTempDir, \"guava-child.txt\");\r\nchild.createNewFile();\r\nrunLS(guavaTempDir, child); // Prints the file permissions -> -rw-r--r--\r\n```\r\n\r\nFor Android developers, choosing a temporary directory API provided by Android is recommended, such as `context.getCacheDir()`. For other Java developers, we recommend migrating to the Java 7 API `java.nio.file.Files.createTempDirectory()` which explicitly configures permissions of 700, or configuring the Java runtime's java.io.tmpdir system property to point to a location whose permissions are appropriately configured.\n\n## Remediation\nThere is no fix for `com.google.guava:guava`. However, in version 30.0 and above, the vulnerable functionality has been deprecated. In oder to mitigate this vulnerability, upgrade to version 30.0 or higher and ensure your dependencies don't use the createTempDir or createTempFile methods.\n\n## References\n\n- [GHSA Advisory](https://github.com/advisories/GHSA-5mg8-w23w-74h3)\n\n- [GitHub Commit](https://github.com/google/guava/commit/feb83a1c8fd2e7670b244d5afd23cba5aca43284)\n\n- [GitHub Commit](https://github.com/google/guava/commit/fec0dbc4634006a6162cfd4d0d09c962073ddf40)\n\n- [GitHub Issue](https://github.com/google/guava/issues/4011)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-200",
                  "maven"
                ],
                "cvssv3_baseScore": 3.3,
                "security-severity": "3.3"
              }
            },
            {
              "id": "SNYK-JAVA-COMGOOGLEGUAVA-32236",
              "shortDescription": {
                "text": "Medium severity - Deserialization of Untrusted Data vulnerability in com.google.guava:guava"
              },
              "fullDescription": {
                "text": "(CVE-2018-10237) com.google.guava:guava@11.0.2"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.google.guava:guava](https://github.com/google/guava) is a set of core libraries that includes new collection types (such as multimap and multiset,immutable collections, a graph library, functional types, an in-memory cache and more.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. During deserialization, two Guava classes accept a caller-specified size parameter and eagerly allocate an array of that size:\r\n* `AtomicDoubleArray` (when serialized with Java serialization)\r\n* `CompoundOrdering` (when serialized with GWT serialization)\r\n\r\nAn attacker may be able to send a specially crafted request which with then cause the server to allocate all it's memory, without validation whether the data size is reasonable.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\n  \nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n  \n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application, an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n\n  \n## Remediation\nUpgrade `com.google.guava:guava` to version 24.1.1, 24.1.1-jre or higher.\n## References\n- [GitHub Commit](https://github.com/google/guava/commit/7ec8718f1e6e2814dabaa4b9f96b6b33a813101c)\n- [Google Group Forum](https://groups.google.com/forum/#!topic/guava-announce/xqWALw4W1vs/discussion)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=1573391)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-119",
                  "maven"
                ],
                "cvssv3_baseScore": 5.9,
                "security-severity": "5.9"
              }
            },
            {
              "id": "SNYK-JAVA-COMGOOGLEGUAVA-5710356",
              "shortDescription": {
                "text": "Low severity - Creation of Temporary File in Directory with Insecure Permissions vulnerability in com.google.guava:guava"
              },
              "fullDescription": {
                "text": "(CVE-2023-2976) com.google.guava:guava@11.0.2"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.google.guava:guava](https://github.com/google/guava) is a set of core libraries that includes new collection types (such as multimap and multiset,immutable collections, a graph library, functional types, an in-memory cache and more.\n\nAffected versions of this package are vulnerable to Creation of Temporary File in Directory with Insecure Permissions due to the use of Java's default temporary directory for file creation in `FileBackedOutputStream`. Other users and apps on the machine with access to the default Java temporary directory can access the files created by this class. This more fully addresses the underlying issue described in [CVE-2020-8908](https://security.snyk.io/vuln/SNYK-JAVA-COMGOOGLEGUAVA-1015415), by deprecating the permissive temp file creation behavior.\r\n\r\n**NOTE:** Even though the security vulnerability is fixed in version 32.0.0, the maintainers recommend using version 32.0.1, as version 32.0.0 breaks some functionality under Windows.\n## Remediation\nUpgrade `com.google.guava:guava` to version 32.0.0-android, 32.0.0-jre or higher.\n## References\n- [GitHub Commit](https://github.com/google/guava/commit/feb83a1c8fd2e7670b244d5afd23cba5aca43284)\n- [GitHub Issue](https://github.com/google/guava/issues/2575)\n- [GitHub Issue](https://github.com/google/guava/issues/6532)\n- [GitHub Release](https://github.com/google/guava/releases/tag/v32.0.0)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-379",
                  "maven"
                ],
                "cvssv3_baseScore": 3.3,
                "security-severity": "3.3"
              }
            },
            {
              "id": "SNYK-JAVA-COMGOOGLEPROTOBUF-173761",
              "shortDescription": {
                "text": "High severity - Integer Overflow vulnerability in com.google.protobuf:protobuf-java"
              },
              "fullDescription": {
                "text": "(CVE-2015-5237) com.google.protobuf:protobuf-java@3.3.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.google.protobuf:protobuf-java](https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java) is a Google's language-neutral, platform-neutral, extensible mechanism for serializing structured data.\n\nAffected versions of this package are vulnerable to Integer Overflow by allowing remote authenticated attackers to cause a heap-based buffer overflow in serialisation process.\n## Remediation\nUpgrade `com.google.protobuf:protobuf-java` to version 3.4.0 or higher.\n## References\n- [GitHub Issue](https://github.com/protocolbuffers/protobuf/issues/760)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-119",
                  "maven"
                ],
                "cvssv3_baseScore": 8.8,
                "security-severity": "8.8"
              }
            },
            {
              "id": "SNYK-JAVA-COMGOOGLEPROTOBUF-2331703",
              "shortDescription": {
                "text": "High severity - Denial of Service (DoS) vulnerability in com.google.protobuf:protobuf-java"
              },
              "fullDescription": {
                "text": "(CVE-2021-22569) com.google.protobuf:protobuf-java@3.3.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.google.protobuf:protobuf-java](https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java) is a Google's language-neutral, platform-neutral, extensible mechanism for serializing structured data.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). An issue in protobuf-java allowed the interleaving of `com.google.protobuf.UnknownFieldSet` fields in such a way that would be processed out of order. A small malicious payload can occupy the parser for several minutes by creating large numbers of short-lived objects that cause frequent, repeated pauses.\r\n\r\n**Note:** Protobuf `javalite` users are not affected.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `com.google.protobuf:protobuf-java` to version 3.16.1, 3.18.2, 3.19.2 or higher.\n## References\n- [Chromium Bugs](https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=39330)\n- [GitHub Commit](https://github.com/protocolbuffers/protobuf/commit/36a2fe60090a277e0e740c8498ae715e87f6b9b7)\n- [GitHub Commit](https://github.com/protocolbuffers/protobuf/commit/9638a5e5315bf73f5e7148c16181676372321892)\n- [GitHub Commit](https://github.com/protocolbuffers/protobuf/commit/f554ccaa514967232cc494cf22947e1c73ca747f)\n- [Google Cloud Security Bulletin](https://cloud.google.com/support/bulletins#gcp-2022-001)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-696",
                  "maven"
                ],
                "cvssv3_baseScore": 7.5,
                "security-severity": "7.5"
              }
            },
            {
              "id": "SNYK-JAVA-COMGOOGLEPROTOBUF-3040284",
              "shortDescription": {
                "text": "Medium severity - Denial of Service (DoS) vulnerability in com.google.protobuf:protobuf-java"
              },
              "fullDescription": {
                "text": "(CVE-2022-3171) com.google.protobuf:protobuf-java@3.3.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.google.protobuf:protobuf-java](https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java) is a Google's language-neutral, platform-neutral, extensible mechanism for serializing structured data.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) via the parsing procedure for binary and text format data. Input streams containing multiple instances of non-repeated [embedded messages](http://developers.google.com/protocol-buffers/docs/encoding#embedded) with repeated or unknown fields cause objects to be converted back and forth between mutable and immutable forms, resulting in potentially long garbage collection pauses.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `com.google.protobuf:protobuf-java` to version 3.16.3, 3.19.6, 3.20.3, 3.21.7 or higher.\n## References\n- [Chromium Bugs](https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=48771)\n- [GitHub Commit](https://github.com/protocolbuffers/protobuf/commit/24b65038cfe36191268fda355aca0e43d3ecbcbe)\n- [GitHub PR](https://github.com/protocolbuffers/protobuf/pull/10674)\n- [GitHub Release](https://github.com/protocolbuffers/protobuf/releases/tag/v21.7)\n- [GitHub Release](https://github.com/protocolbuffers/protobuf/releases/tag/v3.16.3)\n- [GitHub Release](https://github.com/protocolbuffers/protobuf/releases/tag/v3.19.6)\n- [GitHub Release](https://github.com/protocolbuffers/protobuf/releases/tag/v3.20.3)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "maven"
                ],
                "cvssv3_baseScore": 5.7,
                "security-severity": "5.7"
              }
            },
            {
              "id": "SNYK-JAVA-COMGOOGLEPROTOBUF-3167772",
              "shortDescription": {
                "text": "High severity - Denial of Service (DoS) vulnerability in com.google.protobuf:protobuf-java"
              },
              "fullDescription": {
                "text": "(CVE-2022-3509) com.google.protobuf:protobuf-java@3.3.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.google.protobuf:protobuf-java](https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java) is a Google's language-neutral, platform-neutral, extensible mechanism for serializing structured data.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) in `MessageReflection.java` due to a text format parsing issue. Inputs containing multiple instances of non-repeated embedded messages with repeated or unknown fields causes objects to be converted back and forth between mutable and immutable forms, resulting in potentially long garbage collection pauses.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `com.google.protobuf:protobuf-java` to version 3.16.3, 3.19.6, 3.20.3, 3.21.7 or higher.\n## References\n- [GitHub Commit](https://github.com/protocolbuffers/protobuf/commit/a3888f53317a8018e7a439bac4abeb8f3425d5e9)\n- [GitHub PR](https://github.com/protocolbuffers/protobuf/pull/10673)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "maven"
                ],
                "cvssv3_baseScore": 7.5,
                "security-severity": "7.5"
              }
            },
            {
              "id": "SNYK-JAVA-COMMONSCODEC-561518",
              "shortDescription": {
                "text": "Low severity - Information Exposure vulnerability in commons-codec:commons-codec"
              },
              "fullDescription": {
                "text": "commons-codec:commons-codec@1.9"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[commons-codec:commons-codec](https://commons.apache.org/proper/commons-codec) is a package that contains simple encoder and decoders for various formats such as Base64 and Hexadecimal.\n\nAffected versions of this package are vulnerable to Information Exposure. When there is no byte array value that can be encoded into a string the Base32 implementation does not reject it, and instead decodes it into an arbitrary value which can be re-encoded again using the same implementation. This allows for information exposure exploits such as tunneling additional information via seemingly valid base 32 strings.\n## Remediation\nUpgrade `commons-codec:commons-codec` to version 1.13 or higher.\n## References\n- [GitHub Commit](https://github.com/apache/commons-codec/commit/48b615756d1d770091ea3322eefc08011ee8b113)\n- [Jira Issue](https://issues.apache.org/jira/browse/CODEC-134)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-200",
                  "maven"
                ],
                "cvssv3_baseScore": 3.7,
                "security-severity": "3.7"
              }
            },
            {
              "id": "SNYK-JAVA-COMNIMBUSDS-6247633",
              "shortDescription": {
                "text": "High severity - Allocation of Resources Without Limits or Throttling vulnerability in com.nimbusds:nimbus-jose-jwt"
              },
              "fullDescription": {
                "text": "(CVE-2023-52428) com.nimbusds:nimbus-jose-jwt@9.8.1"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.nimbusds:nimbus-jose-jwt](https://connect2id.com/products/nimbus-jose-jwt) is a library for JSON Web Tokens (JWT)\n\nAffected versions of this package are vulnerable to Allocation of Resources Without Limits or Throttling due to a large JWE `p2c` header value (AKA iteration count) for the `PasswordBasedDecrypter` (PBKDF2) class. An attacker can cause resource consumption by specifying an excessively large iteration count.\n## Remediation\nUpgrade `com.nimbusds:nimbus-jose-jwt` to version 9.37.2 or higher.\n## References\n- [Bitbucket Commit](https://bitbucket.org/connect2id/nimbus-jose-jwt/commits/3b3b77e)\n- [Bitbucket Issue](https://bitbucket.org/connect2id/nimbus-jose-jwt/issues/526/)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-770",
                  "maven"
                ],
                "cvssv3_baseScore": 7.5,
                "security-severity": "7.5"
              }
            },
            {
              "id": "SNYK-JAVA-IOAIRLIFT-7164637",
              "shortDescription": {
                "text": "High severity - Out-of-bounds Read vulnerability in io.airlift:aircompressor"
              },
              "fullDescription": {
                "text": "(CVE-2024-36114) io.airlift:aircompressor@0.10"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Out-of-bounds Read via the decompression process due to improper input length validation in the functions `SnappyRawDecompressor.readUncompressedLengt`, `SnappyRawDecompressor.uncompressAll`, `ZstdFrameDecompressor.decompress`, `Lz4RawDecompressor.decompress` and `LzoRawDecompressor.decompress`.\r\n\r\nBy exploiting this vulnerability, an attacker can crash the JVM or leak sensitive information by decompressing specially crafted data from untrusted sources.\n## Remediation\nUpgrade `io.airlift:aircompressor` to version 0.27 or higher.\n## References\n- [GitHub Commit](https://github.com/airlift/aircompressor/commit/15e68df9eb0c2bfde7f796231ee7cd1982965071)\n- [GitHub Commit](https://github.com/airlift/aircompressor/commit/2cea90a45534f9aacbb77426fb64e975504dee6e)\n- [GitHub Commit](https://github.com/airlift/aircompressor/commit/cf66151541edb062ea88b6f3baab3f95e48b7b7f)\n- [GitHub Commit](https://github.com/airlift/aircompressor/commit/d01ecb779375a092d00e224abe7869cdf49ddc3e)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-125",
                  "maven"
                ],
                "cvssv3_baseScore": 8.2,
                "security-severity": "8.2"
              }
            },
            {
              "id": "SNYK-JAVA-IONETTY-473694",
              "shortDescription": {
                "text": "Medium severity - HTTP Request Smuggling vulnerability in io.netty:netty"
              },
              "fullDescription": {
                "text": "(CVE-2019-16869) io.netty:netty@3.10.6.Final"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[io.netty:netty](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22netty%22) is a NIO client server framework which enables quick and easy development of network applications such as protocol servers and clients.\n\nAffected versions of this package are vulnerable to HTTP Request Smuggling. Netty mishandles whitespace before the colon in HTTP headers such as a `Transfer-Encoding : chunked` line. This can lead to HTTP request smuggling where an attacker can bypass security controls, gain unauthorized access to sensitive data, and directly compromise other application users.\r\n\r\n**Note:**\r\n\r\n`io.netty:netty` is deprecated. Users should update to `io.netty:netty-all`\n## Remediation\nThere is no fixed version for `io.netty:netty`.\n\n## References\n- [GitHub Commit](https://github.com/netty/netty/commit/017a9658c97ff1a1355c31a6a1f8bd1ea6f21c8d)\n- [GitHub PR](https://github.com/netty/netty/pull/9585)\n- [Http Request Smuggling Demystified - Snyk Blog](https://snyk.io/blog/demystifying-http-request-smuggling/)\n- [POC: GitHub Issue](https://github.com/netty/netty/issues/9571)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-113",
                  "maven"
                ],
                "cvssv3_baseScore": 6.5,
                "security-severity": "6.5"
              }
            },
            {
              "id": "SNYK-JAVA-IONETTY-5953332",
              "shortDescription": {
                "text": "High severity - Denial of Service (DoS) vulnerability in io.netty:netty-codec-http2"
              },
              "fullDescription": {
                "text": "(CVE-2023-44487) io.netty:netty-codec-http2@4.1.97.Final"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[io.netty:netty-codec-http2](http://netty.io/) is a HTTP2 sub package for the netty library, an event-driven asynchronous network application framework.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) in the implementation of the HTTP/2 protocol. An attacker can cause a denial of service (including via DDoS) by rapidly resetting many streams through request cancellation.\n## Remediation\nUpgrade `io.netty:netty-codec-http2` to version 4.1.100.Final or higher.\n## References\n- [Github Commit](https://github.com/helidon-io/helidon/commit/58f43670086e530750c7cb74b0bec92bf5189c79)\n- [Github Commit](https://github.com/pgjones/hypercorn/commit/7c39c68b61012a3c30979176080861c8b00fb229)\n- [GitHub Commit](https://github.com/akka/akka-http/commit/1f29fe6a8567c57dfe848a21ae883304cce5646d)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/76bb4bfbfeae827dce896f650655bbf6e251ed49)\n- [GitHub Commit](https://github.com/apache/tomcat/commit/9cdfe25bad707f34b3e5da2994f3f1952a163c3e)\n- [GitHub Commit](https://github.com/eclipse/jetty.project/commit/dbb94514dc9d3fb21fe92080f57c314e7e06a148)\n- [GitHub Commit](https://github.com/gravitational/teleport/commit/15f34f927a45130408eb16ed09af5620270d4d1f)\n- [GitHub Commit](https://github.com/kubernetes/apimachinery/commit/be9188050914374ee8128239e5a2e5998d7897f5)\n- [GitHub Commit](https://github.com/netty/netty/commit/58f75f665aa81a8cbcf6ffa74820042a285c5e61)\n- [GitHub Commit](https://github.com/nghttp2/nghttp2/commit/72b4af6143681f528f1d237b21a9a7aee1738832)\n- [GitHub Commit](https://github.com/operator-framework/operator-lifecycle-manager/commit/9ec03f07f942dc9cef736957fa152e39157d6e13)\n- [Snyk Blog](https://snyk.io/blog/find-fix-http-2-rapid-reset-zero-day-vulnerability-cve-2023-44487/)\n- [Vulnerability Discovery](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/)\n- [Vulnerability Explanation](https://cloud.google.com/blog/products/identity-security/how-it-works-the-novel-http2-rapid-reset-ddos-attack)\n- [CISA - Known Exploited Vulnerabilities](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "maven"
                ],
                "cvssv3_baseScore": 7.5,
                "security-severity": "7.5"
              }
            },
            {
              "id": "SNYK-JAVA-IONETTY-6483812",
              "shortDescription": {
                "text": "Medium severity - Allocation of Resources Without Limits or Throttling vulnerability in io.netty:netty-codec-http"
              },
              "fullDescription": {
                "text": "(CVE-2024-29025) io.netty:netty-codec-http@4.1.97.Final"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[io.netty:netty-codec-http](https://mvnrepository.com/artifact/io.netty/netty-codec-http) is a network application framework for rapid development of maintainable high performance protocol servers & clients.\n\nAffected versions of this package are vulnerable to Allocation of Resources Without Limits or Throttling due to the accumulation of data in the `HttpPostRequestDecoder`. The decoder cumulates bytes in the `undecodedChunk` buffer until it can decode a field, allowing for data to accumulate without limits.\n\nAn attacker can cause a denial of service by sending a chunked post consisting of many small fields that will be accumulated in the `bodyListHttpData` list.\n## Remediation\nUpgrade `io.netty:netty-codec-http` to version 4.1.108.Final or higher.\n## References\n- [GitHub Commit](https://github.com/netty/netty/commit/0d0c6ed782d13d423586ad0c71737b2c7d02058c)\n- [GitHub Gist](https://gist.github.com/vietj/f558b8ea81ec6505f1e9a6ca283c9ae3)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-770",
                  "maven"
                ],
                "cvssv3_baseScore": 5.3,
                "security-severity": "5.3"
              }
            },
            {
              "id": "SNYK-JAVA-NETMINIDEV-1298655",
              "shortDescription": {
                "text": "Medium severity - Denial of Service (DoS) vulnerability in net.minidev:json-smart"
              },
              "fullDescription": {
                "text": "(CVE-2021-31684) net.minidev:json-smart@1.3.2"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[net.minidev:json-smart](https://github.com/netplex/json-smart-v1) is a Java JSON parser.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) via the `indexOf` function of `JSONParserByteArray` which causes a denial of service (DOS) via a crafted web request.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `net.minidev:json-smart` to version 1.3.3, 2.4.5 or higher.\n## References\n- [GitHub Issue](https://github.com/netplex/json-smart-v1/issues/10)\n- [GitHub Issue](https://github.com/netplex/json-smart-v2/issues/67)\n- [GitHub PR](https://github.com/netplex/json-smart-v1/pull/11)\n- [GitHub PR](https://github.com/netplex/json-smart-v2/pull/68)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "maven"
                ],
                "cvssv3_baseScore": 5.3,
                "security-severity": "5.3"
              }
            },
            {
              "id": "SNYK-JAVA-NETMINIDEV-3369748",
              "shortDescription": {
                "text": "High severity - Denial of Service (DoS) vulnerability in net.minidev:json-smart"
              },
              "fullDescription": {
                "text": "(CVE-2023-1370) net.minidev:json-smart@1.3.2"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[net.minidev:json-smart](https://github.com/netplex/json-smart-v1) is a Java JSON parser.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) due to a `StackOverflowError` when parsing a deeply nested JSON array or object.\r\n\r\n**NOTE:** Although this vulnerability was fixed in version 2.4.9 the maintainer recommends upgrading to 2.4.10, due to a remaining bug.\n## PoC\n```java\r\nStringBuilder s = new StringBuilder();\r\nfor (int i = 0; i < 10000 ; i++) {\r\n  s.append(\"{\\\"a\\\":\");\r\n}\r\ns.append(\"1\");\r\nfor (int i = 0; i < 10000 ; i++) {\r\n  s.append(\"}\");\r\n}\r\nJSONParser p = new JSONParser(JSONParser.MODE_JSON_SIMPLE);\r\np.parse(s.toString());\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `net.minidev:json-smart` to version 2.4.9 or higher.\n## References\n- [GitHub Commit](https://github.com/netplex/json-smart-v2/commit/5b3205d051952d3100aa0db1535f6ba6226bd87a)\n- [GitHub Commit](https://github.com/netplex/json-smart-v2/commit/e2791ae506a57491bc856b439d706c81e45adcf8)\n- [GitHub Issue](https://github.com/netplex/json-smart-v2/issues/137)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "maven"
                ],
                "cvssv3_baseScore": 7.5,
                "security-severity": "7.5"
              }
            },
            {
              "id": "SNYK-JAVA-ORGAPACHEANT-1015405",
              "shortDescription": {
                "text": "Low severity - Arbitrary Code Injection vulnerability in org.apache.ant:ant"
              },
              "fullDescription": {
                "text": "(CVE-2020-11979) org.apache.ant:ant@1.9.1"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[org.apache.ant:ant](https://ant.apache.org) is a software tool for automating software build processes which originated from the Apache Tomcat project in early 2000.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection. As mitigation for CVE-2020-1945 Apache Ant 1.10.8 changed the permissions of temporary files it created so that only the current user was allowed to access them. Unfortunately the fixcrlf task deleted the temporary file and created a new one without said protection, effectively nullifying the effort. This would still allow an attacker to inject modified source files into the build process.\r\n\r\n\r\n## Alternative Mitigation:\r\n\r\nThe best mitigation against CVE-2020-11979 and CVE-2020-1945 still is to make Ant use a directory that is only readable and writable by the current user.\r\n\r\nAnt users of versions 1.10.8 and 1.9.15 can use the Ant property `ant.tmpdir` to point to such a directory, users of versions 1.1 to 1.9.14 and 1.10.0 to 1.10.7 should set the `java.io.tmpdir` system property.\r\nThis mitigation is external to the product.\n## Remediation\nUpgrade `org.apache.ant:ant` to version 1.10.9 or higher.\n## References\n- [Apache Security Advisory](https://lists.apache.org/thread.html/rc3c8ef9724b5b1e171529b47f4b35cb7920edfb6e917fa21eb6c64ea%40%3Cdev.ant.apache.org%3E)\n- [GitHub Commit](https://github.com/apache/ant/commit/87ac51d3c22bcf7cfd0dc07cb0bd04a496e0d428)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-94",
                  "maven"
                ],
                "cvssv3_baseScore": 3.7,
                "security-severity": "3.7"
              }
            },
            {
              "id": "SNYK-JAVA-ORGAPACHEANT-5597835",
              "shortDescription": {
                "text": "Low severity - Denial of Service (DoS) vulnerability in org.apache.ant:ant"
              },
              "fullDescription": {
                "text": "(CVE-2021-36374) org.apache.ant:ant@1.9.1"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\n[org.apache.ant:ant](https://ant.apache.org) is a software tool for automating software build processes which originated from the Apache Tomcat project in early 2000.\n\n\nAffected versions of this package are vulnerable to Denial of Service (DoS).\nWhen reading a specially crafted ZIP archive, or a derived format, an Apache Ant build can be made to allocate large amounts of memory that leads to an out of memory error, even for small inputs. This can be used to disrupt builds using Apache Ant. Commonly used derived formats of ZIP archives include JAR files.\n\n## Remediation\n\nUpgrade `org.apache.ant:ant` to version 1.9.16, 1.10.11 or higher.\n\n\n## References\n\n- [Apache Ant Security Reports](https://ant.apache.org/security.html)\n\n- [Apache Security Advisory](https://lists.apache.org/thread.html/rdd5412a5b9a25aed2a02c3317052d38a97128314d50bc1ed36e81d38%40%3Cuser.ant.apache.org%3E)\n\n- [GitHub Commit](https://github.com/apache/ant/commit/6594a2d66f7f060dafcbbf094dd60676db19a842)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "maven"
                ],
                "cvssv3_baseScore": 3.3,
                "security-severity": "3.3"
              }
            },
            {
              "id": "SNYK-JAVA-ORGAPACHEANT-5597836",
              "shortDescription": {
                "text": "Low severity - Denial of Service (DoS) vulnerability in org.apache.ant:ant"
              },
              "fullDescription": {
                "text": "(CVE-2021-36373) org.apache.ant:ant@1.9.1"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\n[org.apache.ant:ant](https://ant.apache.org) is a software tool for automating software build processes which originated from the Apache Tomcat project in early 2000.\n\n\nAffected versions of this package are vulnerable to Denial of Service (DoS).\nWhen reading a specially crafted TAR archive an Apache Ant build can be made to allocate large amounts of memory that finally leads to an out of memory error, even for small inputs.\n\n## Remediation\n\nUpgrade `org.apache.ant:ant` to version 1.9.16, 1.10.11 or higher.\n\n\n## References\n\n- [Apache Ant Security Reports](https://ant.apache.org/security.html)\n\n- [Apache Security Advisory](https://lists.apache.org/thread.html/r54afdab05e01de970649c2d91a993f68a6b00cd73e6e34e16c832d46%40%3Cuser.ant.apache.org%3E)\n\n- [GitHub Commit](https://github.com/apache/ant/commit/6594a2d66f7f060dafcbbf094dd60676db19a842)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "maven"
                ],
                "cvssv3_baseScore": 3.3,
                "security-severity": "3.3"
              }
            },
            {
              "id": "SNYK-JAVA-ORGAPACHEANT-569130",
              "shortDescription": {
                "text": "Medium severity - Insecure Default vulnerability in org.apache.ant:ant"
              },
              "fullDescription": {
                "text": "(CVE-2020-1945) org.apache.ant:ant@1.9.1"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[org.apache.ant:ant](https://ant.apache.org) is a software tool for automating software build processes which originated from the Apache Tomcat project in early 2000.\n\nAffected versions of this package are vulnerable to Insecure Default. It uses the default temporary directory identified by the Java system property `java.io.tmpdir` for several tasks and may thus leak sensitive information. The `fixcrlf` and `replaceregexp` tasks also copy files from the temporary directory back into the build tree allowing an attacker to inject modified source files into the build process.\n## Remediation\nUpgrade `org.apache.ant:ant` to version 1.9.15, 1.10.8 or higher.\n## References\n- [Apache Mailing List](https://lists.apache.org/thread.html/r8e592bbfc016a5dbe2a8c0e81ff99682b9c78c453621b82c14e7b75e%40%3Cdev.ant.apache.org%3E)\n- [GitHub Commit](https://github.com/apache/ant/commit/a8645a151bc706259fb1789ef587d05482d98612)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-453",
                  "maven"
                ],
                "cvssv3_baseScore": 6.5,
                "security-severity": "6.5"
              }
            },
            {
              "id": "SNYK-JAVA-ORGAPACHEAVRO-5926693",
              "shortDescription": {
                "text": "Low severity - Improper Input Validation vulnerability in org.apache.avro:avro"
              },
              "fullDescription": {
                "text": "(CVE-2023-39410) org.apache.avro:avro@1.8.2"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[org.apache.avro:avro](https://avro.apache.org/) is an Avro core components\n\nAffected versions of this package are vulnerable to Improper Input Validation when deserializing untrusted or corrupted data. An attacker can consume memory beyond the allowed constraints, resulting in the system being out of memory.\n## Remediation\nUpgrade `org.apache.avro:avro` to version 1.11.3 or higher.\n## References\n- [Apache List](https://lists.apache.org/thread/q142wj99cwdd0jo5lvdoxzoymlqyjdds)\n- [GitHub Commit](https://github.com/apache/avro/commit/a12a7e44ddbe060c3dc731863cad5c15f9267828)\n- [OSS Security Advisory](http://www.openwall.com/lists/oss-security/2023/09/29/6)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-20",
                  "maven"
                ],
                "cvssv3_baseScore": 3.7,
                "security-severity": "3.7"
              }
            },
            {
              "id": "SNYK-JAVA-ORGAPACHECALCITEAVATICA-2961770",
              "shortDescription": {
                "text": "High severity - Arbitrary Code Execution vulnerability in org.apache.calcite.avatica:avatica-core"
              },
              "fullDescription": {
                "text": "(CVE-2022-36364) org.apache.calcite.avatica:avatica-core@1.11.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[org.apache.calcite.avatica:avatica-core](https://search.maven.org/artifact/org.apache.calcite.avatica/avatica-core) is a JDBC driver framework\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution when the JDBC driver fails to verify that a given client instance implements a permitted interface. This allows attackers to load arbitrary classes and thereby execute code.\r\n\r\n**Note:** For this vulnerability to be exploited there must be a constructor class in the classpath with a URL parameter and the ability to execute code.\n## Remediation\nUpgrade `org.apache.calcite.avatica:avatica-core` to version 1.22.0 or higher.\n## References\n- [Apache Mailing List](https://lists.apache.org/thread/5csdj8bv4h3hfgw27okm84jh1j2fyw0c)\n- [GitHub Commit](https://github.com/apache/calcite-avatica/commit/0c097b6a685fc1f97f151505a219976f15ed0c4c)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-94",
                  "maven"
                ],
                "cvssv3_baseScore": 7.2,
                "security-severity": "7.2"
              }
            },
            {
              "id": "SNYK-JAVA-ORGAPACHEDERBY-32274",
              "shortDescription": {
                "text": "Medium severity - Security Bypass vulnerability in org.apache.derby:derby"
              },
              "fullDescription": {
                "text": "(CVE-2018-1313) org.apache.derby:derby@10.14.1.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[org.apache.derby:derby](https://github.com/apache/derby) is a subproject of the Apache DB project.\n\nAffected versions of this package are vulnerable to Security Bypass. A specially-crafted network packet can be used to request the Derby Network Server to boot a database whose location and contents are under the user's control.\n\n## Remediation\nUpgrade `org.apache.derby:derby` to version 10.14.2.0 or higher.\n\n## References\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2018-1313)\n- [Security Focus](https://www.securityfocus.com/bid/104140)\n- [MarkMail](https://markmail.org/message/akkappppxcdqrgxk)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-284",
                  "maven"
                ],
                "cvssv3_baseScore": 5.3,
                "security-severity": "5.3"
              }
            },
            {
              "id": "SNYK-JAVA-ORGAPACHEDERBY-6069877",
              "shortDescription": {
                "text": "Medium severity - LDAP Injection vulnerability in org.apache.derby:derby"
              },
              "fullDescription": {
                "text": "(CVE-2022-46337) org.apache.derby:derby@10.14.1.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[org.apache.derby:derby](https://mvnrepository.com/artifact/org.apache.derby/derby) is a database engine by Apache.\n\nAffected versions of this package are vulnerable to LDAP Injection due to improper LDAP authentication checks. An attacker can fill up the disk by creating junk databases and execute malware visible to and executable by the account which booted the server. Additionally, if the databases aren't also protected by SQL GRANT/REVOKE authorization, the attacker can view and corrupt sensitive data, and run sensitive database functions and procedures.\n## Remediation\nUpgrade `org.apache.derby:derby` to version 10.17.1.0 or higher.\n## References\n- [Apache Advisory](https://lists.apache.org/thread/q23kvvtoohgzwybxpwozmvvk17rp0td3)\n- [Jira Issue](https://issues.apache.org/jira/browse/DERBY-7147)\n- [SVN Commit](https://svn.apache.org/viewvc?view=revision&revision=1905550)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-307",
                  "maven"
                ],
                "cvssv3_baseScore": 5.9,
                "security-severity": "5.9"
              }
            },
            {
              "id": "SNYK-JAVA-ORGAPACHEHTTPCOMPONENTS-1048058",
              "shortDescription": {
                "text": "Medium severity - Improper Input Validation vulnerability in org.apache.httpcomponents:httpclient"
              },
              "fullDescription": {
                "text": "(CVE-2020-13956) org.apache.httpcomponents:httpclient@4.5.2"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[org.apache.httpcomponents:httpclient](http://hc.apache.org/) is a HttpClient component of the Apache HttpComponents project.\n\nAffected versions of this package are vulnerable to Improper Input Validation. Apache HttpClient can misinterpret malformed authority component in request URIs passed to the library as `java.net.URI` object and pick the wrong target host for request execution.\n## Remediation\nUpgrade `org.apache.httpcomponents:httpclient` to version 4.5.13 or higher.\n## References\n- [Apache Security Advisory](https://lists.apache.org/thread.html/r6dab7da30f8bf075f79ee189e33b45a197502e2676481bb8787fc0d7%40%3Cdev.hc.apache.org%3E)\n- [GitHub Commit](https://github.com/apache/httpcomponents-client/commit/894234a5aeb9958e7e466c383e4d0ded17a9a813#diff-a169c0c63c537750e3394f7e1407252053ffbc489181450a6c361cd7f8f67a22)\n- [GitHub Commit](https://github.com/apache/httpcomponents-client/commit/e628b4c5c464c2fa346385596cc78e035a91a62e)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-20",
                  "maven"
                ],
                "cvssv3_baseScore": 5.3,
                "security-severity": "5.3"
              }
            },
            {
              "id": "SNYK-JAVA-ORGAPACHEHTTPCOMPONENTS-31517",
              "shortDescription": {
                "text": "Medium severity - Directory Traversal vulnerability in org.apache.httpcomponents:httpclient"
              },
              "fullDescription": {
                "text": "org.apache.httpcomponents:httpclient@4.5.2"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\n[org.apache.httpcomponents:httpclient](http://hc.apache.org/) is a HttpClient component of the Apache HttpComponents project.\n\n\nAffected versions of this package are vulnerable to Directory Traversal.\nString input by user is not validated for the presence of leading character `/` and is passed to the constructor as `path` information, resulting in a Directory Traversal vulnerability.\n\n## Details\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\r\n\r\nDirectory Traversal vulnerabilities can be generally divided into two types:\r\n\r\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\r\n\r\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\r\n\r\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\r\n\r\n```\r\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\r\n```\r\n**Note** `%2e` is the URL encoded version of `.` (dot).\r\n\r\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \r\n\r\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\r\n\r\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\r\n\r\n```\r\n2018-04-15 22:04:29 .....           19           19  good.txt\r\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\r\n```\n\n\n## Remediation\n\nUpgrade `org.apache.httpcomponents:httpclient` to version 4.5.3 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/apache/httpcomponents-client/commit/0554271750599756d4946c0d7ba43d04b1a7b220)\n\n- [Jira Issue](https://issues.apache.org/jira/browse/HTTPCLIENT-1803)\n\n- [Researcher blog post](http://blog.portswigger.net/2017/07/cracking-lens-targeting-https-hidden.html)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-23",
                  "maven"
                ],
                "cvssv3_baseScore": 5.3,
                "security-severity": "5.3"
              }
            },
            {
              "id": "SNYK-JAVA-ORGAPACHEIVY-3106014",
              "shortDescription": {
                "text": "High severity - Directory Traversal vulnerability in org.apache.ivy:ivy"
              },
              "fullDescription": {
                "text": "(CVE-2022-37865) org.apache.ivy:ivy@2.4.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Directory Traversal due to missing verification of the target path when extracting the archive using the `zip`, `jar` or `war` packaging. An archive containing absolute paths or paths that try to traverse upwards using `..` sequences can write files to any location on the local fie system that the user executing Ivy has write access to.\n\n## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n## Remediation\nUpgrade `org.apache.ivy:ivy` to version 2.5.1 or higher.\n## References\n- [Apache Thread](https://lists.apache.org/thread/gqvvv7qsm2dfjg6xzsw1s2h08tbr0sdy)\n- [GitHub Commit](https://github.com/apache/ant-ivy/commit/03b6b8c3ae27406fadb3b3539b51294af246aafa)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-22",
                  "maven"
                ],
                "cvssv3_baseScore": 7.1,
                "security-severity": "7.1"
              }
            },
            {
              "id": "SNYK-JAVA-ORGAPACHEIVY-3106929",
              "shortDescription": {
                "text": "High severity - Directory Traversal vulnerability in org.apache.ivy:ivy"
              },
              "fullDescription": {
                "text": "(CVE-2022-37866) org.apache.ivy:ivy@2.4.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Directory Traversal in the `IvyPatternHelper` class, which does not strip out `..` sequences from artifact coordinate patterns. This allows an attacker in control of the remote repository to access artifacts in locations outside the local cache or overwrite artifacts in the local cache.\n\n## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```\n\n## Remediation\nUpgrade `org.apache.ivy:ivy` to version 2.5.1 or higher.\n## References\n- [Apache Mailing List](https://lists.apache.org/thread/htxbr8oc464hxrgroftnz3my70whk93b)\n- [GitHub Commit](https://github.com/apache/ant-ivy/commit/3f374602d4d63691398951b9af692960d019f4d9)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-22",
                  "maven"
                ],
                "cvssv3_baseScore": 7.5,
                "security-severity": "7.5"
              }
            },
            {
              "id": "SNYK-JAVA-ORGAPACHEIVY-5847858",
              "shortDescription": {
                "text": "High severity - XML External Entity (XXE) Injection vulnerability in org.apache.ivy:ivy"
              },
              "fullDescription": {
                "text": "(CVE-2022-46751) org.apache.ivy:ivy@2.4.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to XML External Entity (XXE) Injection. When Apache Ivy parses XML files - either its own configuration, Ivy files or Apache Maven POMs - it will allow downloading external document type definitions and expand any entity references contained therein when used.\r\n\r\nThis can be used to exfiltrate data, access resources only the machine running Ivy has access to or disturb the execution of Ivy in different ways.\r\n\r\n## Workaround\r\n\r\nUsers who are unable to upgrade to the fixed version can use Java system properties to restrict the processing of external DTDs.\n\n## Details\nXXE Injection is a type of attack against an application that parses XML input.\nXML is a markup language that defines a set of rules for encoding documents in a format that is both human-readable and machine-readable. By default, many XML processors allow specification of an external entity, a URI that is dereferenced and evaluated during XML processing. When an XML document is being parsed, the parser can make a request and include the content at the specified URI inside of the XML document.\n\nAttacks can include disclosing local files, which may contain sensitive data such as passwords or private user data, using file: schemes or relative paths in the system identifier.\n\nFor example, below is a sample XML document, containing an XML element- username.\n\n```\n<xml>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n   <username>John</username>\n</xml>\n```\n\nAn external XML entity - `xxe`, is defined using a system identifier and present within a DOCTYPE header. These entities can access local or remote content. For example the below code contains an external XML entity that would fetch the content of  `/etc/passwd` and display it to the user rendered by `username`.\n\n```\n<xml>\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n<!DOCTYPE foo [\n   <!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]>\n   <username>&xxe;</username>\n</xml>\n```\n\nOther XXE Injection attacks can access local resources that may not stop returning data, possibly impacting application availability and leading to Denial of Service.\n\n## Remediation\nUpgrade `org.apache.ivy:ivy` to version 2.5.2 or higher.\n## References\n- [Apache Lists](https://lists.apache.org/thread/1dj60hg5nr36kjr4p1100dwjrqookps8)\n- [Apache Lists](https://lists.apache.org/thread/9gcz4xrsn8c7o9gb377xfzvkb8jltffr)\n- [GitHub Commit](https://github.com/apache/ant-ivy/commit/2be17bc18b0e1d4123007d579e43ba1a4b6fab3d)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-611",
                  "maven"
                ],
                "cvssv3_baseScore": 8.2,
                "security-severity": "8.2"
              }
            },
            {
              "id": "SNYK-JAVA-ORGBOUNCYCASTLE-2841508",
              "shortDescription": {
                "text": "Medium severity - Cryptographic Issues vulnerability in org.bouncycastle:bcprov-jdk15on"
              },
              "fullDescription": {
                "text": "org.bouncycastle:bcprov-jdk15on@1.68"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[org.bouncycastle:bcprov-jdk15on](https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk15on) is a Java implementation of cryptographic algorithms.\n\nAffected versions of this package are vulnerable to Cryptographic Issues via weak key-hash message authentication code (HMAC) that is only 16 bits long which can result in hash collisions, as a result of an error within the BKS version 1 keystore (BKS-V1) files and could lead to an attacker being able to affect the integrity of these files. This vulnerability was introduced following an incomplete fix for CVE-2018-5382.\n## Remediation\nUpgrade `org.bouncycastle:bcprov-jdk15on` to version 1.69 or higher.\n## References\n- [GitHub Commit](https://github.com/bcgit/bc-java/commit/7b66244e14488c5c981415b02ff71837ff3d2d50)\n- [GitHub Issue](https://github.com/bcgit/bc-java/issues/850)\n- [GitHub Issue](https://github.com/bcgit/bc-java/issues/925)\n- [PoC](https://insights.sei.cmu.edu/blog/the-curious-case-of-the-bouncy-castle-bks-passwords/)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-310",
                  "maven"
                ],
                "cvssv3_baseScore": 4.8,
                "security-severity": "4.8"
              }
            },
            {
              "id": "SNYK-JAVA-ORGBOUNCYCASTLE-5771339",
              "shortDescription": {
                "text": "Medium severity - Information Exposure vulnerability in org.bouncycastle:bcprov-jdk15on"
              },
              "fullDescription": {
                "text": "(CVE-2023-33201) org.bouncycastle:bcprov-jdk15on@1.68"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[org.bouncycastle:bcprov-jdk15on](https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk15on) is a Java implementation of cryptographic algorithms.\n\nAffected versions of this package are vulnerable to Information Exposure due to missing validation for the X.500 name of any certificate, subject, or issuer. The presence of a wild card may lead to information disclosure. This could allow a malicious user to obtain unauthorized information via blind LDAP Injection, exploring the environment and enumerating data. \r\n\r\n**Note:**\r\n\r\nThe exploit depends on the structure of the target LDAP directory as well as what kind of errors are exposed to the user.\n## Remediation\nA fix was pushed into the `master` branch but not yet published.\n## References\n- [GitHub Commit](https://github.com/bcgit/bc-java/commit/b00b58873643abc7e834f07e345e0165bb3a1786)\n- [GitHub Wiki](https://github.com/bcgit/bc-java/wiki/CVE-2023-33201)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=2215465)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-200",
                  "maven"
                ],
                "cvssv3_baseScore": 4.7,
                "security-severity": "4.7"
              }
            },
            {
              "id": "SNYK-JAVA-ORGBOUNCYCASTLE-6084022",
              "shortDescription": {
                "text": "Medium severity - Uncontrolled Resource Consumption ('Resource Exhaustion') vulnerability in org.bouncycastle:bcprov-jdk15on"
              },
              "fullDescription": {
                "text": "(CVE-2023-33202) org.bouncycastle:bcprov-jdk15on@1.68"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[org.bouncycastle:bcprov-jdk15on](https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk15on) is a Java implementation of cryptographic algorithms.\n\nAffected versions of this package are vulnerable to Uncontrolled Resource Consumption ('Resource Exhaustion') within the `org.bouncycastle.openssl.PEMParser` class. Parsing a file that has crafted `ASN.1` data through the `PEMParser` causes an `OutOfMemoryError`.\r\n\r\n## Workaround\r\nThe attack can be avoided by filtering `PEM` requests containing `EXTERNAL` tagged encodings.\n## Remediation\nThere is no fixed version for `org.bouncycastle:bcprov-jdk15on`.\n\n## References\n- [GitHub Commit](https://github.com/bcgit/bc-java/commit/eff6adf03f426dc4d55e8305255eb38c811ddda7)\n- [GitHub Wiki](https://github.com/bcgit/bc-java/wiki/CVE-2023-33202)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "maven"
                ],
                "cvssv3_baseScore": 5.5,
                "security-severity": "5.5"
              }
            },
            {
              "id": "SNYK-JAVA-ORGBOUNCYCASTLE-6613080",
              "shortDescription": {
                "text": "Medium severity - Allocation of Resources Without Limits or Throttling vulnerability in org.bouncycastle:bcprov-jdk15on"
              },
              "fullDescription": {
                "text": "(CVE-2024-29857) org.bouncycastle:bcprov-jdk15on@1.68"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[org.bouncycastle:bcprov-jdk15on](https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk15on) is a Java implementation of cryptographic algorithms.\n\nAffected versions of this package are vulnerable to Allocation of Resources Without Limits or Throttling in the `solveQuadraticEquation()` function used for certificate verification in `ECCurve.java`. Passing a large f2m parameter can cause excessive CPU consumption.\n## Remediation\nThere is no fixed version for `org.bouncycastle:bcprov-jdk15on`.\n\n## References\n- [GitHub Commit](https://github.com/bcgit/bc-java/commit/efc498ca4caa340ac2fe11f2efee06c1a294501f)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-770",
                  "maven"
                ],
                "cvssv3_baseScore": 5.3,
                "security-severity": "5.3"
              }
            },
            {
              "id": "SNYK-JAVA-ORGCODEHAUSJETTISON-3033152",
              "shortDescription": {
                "text": "Medium severity - Stack-based Buffer Overflow vulnerability in org.codehaus.jettison:jettison"
              },
              "fullDescription": {
                "text": "(CVE-2022-40149) org.codehaus.jettison:jettison@1.1"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Stack-based Buffer Overflow when the parser is running on user supplied input, by allowing an attacker to supply content that causes the parser to crash.\n## Remediation\nUpgrade `org.codehaus.jettison:jettison` to version 1.5.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jettison-json/jettison/commit/395f8625bcf688743872c8e7f59360d372e77811)\n- [GitHub Issue](https://github.com/jettison-json/jettison/issues/45)\n- [GitHub Release](https://github.com/jettison-json/jettison/releases/tag/jettison-1.5.1)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-121",
                  "maven"
                ],
                "cvssv3_baseScore": 6.5,
                "security-severity": "6.5"
              }
            },
            {
              "id": "SNYK-JAVA-ORGCODEHAUSJETTISON-3037311",
              "shortDescription": {
                "text": "Medium severity - Denial of Service (DoS) vulnerability in org.codehaus.jettison:jettison"
              },
              "fullDescription": {
                "text": "(CVE-2022-40150) org.codehaus.jettison:jettison@1.1"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) when the parser is running on user supplied input, allowing an attacker to supply content that causes the parser to crash by Out of memory.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `org.codehaus.jettison:jettison` to version 1.5.1 or higher.\n## References\n- [GitHub Commit](https://github.com/jettison-json/jettison/commit/395f8625bcf688743872c8e7f59360d372e77811)\n- [GitHub Issue](https://github.com/jettison-json/jettison/issues/45)\n- [GitHub Release](https://github.com/jettison-json/jettison/releases)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "maven"
                ],
                "cvssv3_baseScore": 6.5,
                "security-severity": "6.5"
              }
            },
            {
              "id": "SNYK-JAVA-ORGCODEHAUSJETTISON-3168085",
              "shortDescription": {
                "text": "High severity - Denial of Service (DoS) vulnerability in org.codehaus.jettison:jettison"
              },
              "fullDescription": {
                "text": "(CVE-2022-45685) org.codehaus.jettison:jettison@1.1"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) via crafted JSON data.\r\n\r\n## PoC\r\n\r\nPassing a very long string of repeated `{` as the value of `s` below triggers this crash.\r\n\r\n```java\r\npublic class poc {\r\n\r\n\r\n    public static void main(String[] args) throws  JSONException {\r\n\r\n\r\n        String s=\"{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{```\r\n\r\n...\r\n\r\n```\";\r\n        new JSONObject(s);\r\n    }\r\n}\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `org.codehaus.jettison:jettison` to version 1.5.2 or higher.\n## References\n- [GitHub Commit](https://github.com/jettison-json/jettison/commit/19ae19ff57d00dbfa6f6c3af4fc4cb14fb5ca2df)\n- [GitHub Issue](https://github.com/jettison-json/jettison/issues/54)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=2214825)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "maven"
                ],
                "cvssv3_baseScore": 7.5,
                "security-severity": "7.5"
              }
            },
            {
              "id": "SNYK-JAVA-ORGCODEHAUSJETTISON-3367610",
              "shortDescription": {
                "text": "High severity - Denial of Service (DoS) vulnerability in org.codehaus.jettison:jettison"
              },
              "fullDescription": {
                "text": "(CVE-2023-1436) org.codehaus.jettison:jettison@1.1"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) due to infinite recursion, when constructing a `JSONArray` from a Collection that contains a self-reference in one of its elements. \r\nExploiting this vulnerability results in a `StackOverflowError` exception being thrown.\r\n\r\n## Mitigation\r\n\r\nWrap Jettison's JSONArray constructor with exception handling:\r\n\r\n```java\r\ntry {\r\n    JSONArray jsonArray = new JSONArray(list);\r\n}\r\ncatch(StackOverflowError e) {\r\n    System.err.println(\"ERROR: Stack limit reached\");\r\n}\r\n```\n## PoC\n```java\r\npublic class POC {\r\n    public static void main(String[] args) throws JSONException {\r\n        ArrayList<Object> list = new ArrayList<>();\r\n        list.add(list);\r\n        JSONArray jsonArray = new JSONArray(list);\r\n    }\r\n}\r\n```\n## Remediation\nUpgrade `org.codehaus.jettison:jettison` to version 1.5.4 or higher.\n## References\n- [GitHub Commit](https://github.com/jettison-json/jettison/commit/c20a8be23f698d7d89b7ccf8d328971cf4709b9f)\n- [Security Advisory](https://research.jfrog.com/vulnerabilities/jettison-json-array-dos-xray-427911/)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "maven"
                ],
                "cvssv3_baseScore": 7.5,
                "security-severity": "7.5"
              }
            },
            {
              "id": "SNYK-JAVA-ORGJETBRAINSKOTLIN-2393744",
              "shortDescription": {
                "text": "Low severity - Information Exposure vulnerability in org.jetbrains.kotlin:kotlin-stdlib"
              },
              "fullDescription": {
                "text": "(CVE-2020-29582) org.jetbrains.kotlin:kotlin-stdlib@1.4.10"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[org.jetbrains.kotlin:kotlin-stdlib](https://search.maven.org/artifact/org.jetbrains.kotlin/kotlin-stdlib) is a Kotlin Standard Library for JVM.\n\nAffected versions of this package are vulnerable to Information Exposure. A Kotlin application using `createTempDir` or `createTempFile` and placing sensitive information within either of these locations would be leaking this information in a read-only way to other users also on this system.\r\n\r\n**Note:** As of version 1.4.21, the vulnerable functions have been marked as deprecated. Due to still being usable, this advisory is kept as \"unfixed\".\r\n\r\n## PoC by JLLeitschuh\r\n```\r\npackage org.jlleitschuh.sandbox\r\n\r\nimport org.junit.jupiter.api.Test\r\nimport java.io.BufferedReader\r\nimport java.io.File\r\nimport java.io.IOException\r\nimport java.io.InputStreamReader\r\nimport java.nio.file.Files\r\n\r\nclass KotlinTempDirectoryPermissionCheck {\r\n    @Test\r\n    fun `kotlin check default directory permissions`() {\r\n        val dir = createTempDir()\r\n        runLS(dir.parentFile, dir) // Prints drwxr-xr-x\r\n    }\r\n\r\n    @Test\r\n    fun `Files check default directory permissions`() {\r\n        val dir = Files.createTempDirectory(\"random-directory\")\r\n        runLS(dir.toFile().parentFile, dir.toFile()) // Prints drwx------\r\n    }\r\n\r\n    @Test\r\n    fun `kotlin check default file permissions`() {\r\n        val file = createTempFile()\r\n        runLS(file.parentFile, file) // Prints -rw-r--r--\r\n    }\r\n\r\n    @Test\r\n    fun `Files check default file permissions`() {\r\n        val file = Files.createTempFile(\"random-file\", \".txt\")\r\n        runLS(file.toFile().parentFile, file.toFile()) // Prints -rw-------\r\n    }\r\n\r\n    private fun runLS(file: File, lookingFor: File) {\r\n        val processBuilder = ProcessBuilder()\r\n        processBuilder.command(\"ls\", \"-l\", file.absolutePath)\r\n        try {\r\n            val process = processBuilder.start()\r\n            val output = StringBuilder()\r\n            val reader = BufferedReader(\r\n                InputStreamReader(process.inputStream)\r\n            )\r\n            reader.lines().forEach { line ->\r\n                if (line.contains(\"total\")) {\r\n                    output.append(line).append('\\n')\r\n                }\r\n                if (line.contains(lookingFor.name)) {\r\n                    output.append(line).append('\\n')\r\n                }\r\n            }\r\n            val exitVal = process.waitFor()\r\n            if (exitVal == 0) {\r\n                println(\"Success!\")\r\n                println(output)\r\n            } else {\r\n                //abnormal...\r\n            }\r\n        } catch (e: IOException) {\r\n            e.printStackTrace()\r\n        } catch (e: InterruptedException) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n}\r\n```\n## Remediation\nThere is no fixed version for `org.jetbrains.kotlin:kotlin-stdlib`.\n\n## References\n- [Documentation](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/create-temp-dir.html)\n- [Issue](https://youtrack.jetbrains.com/issue/KT-43306/Deprecate-createTempFile-and-createTempDir-functions-in-kotlin.io)\n- [Vulnerable Code #1](https://github.com/JetBrains/kotlin/blob/9b157fd291d581a30a3194940b0ebbb95a2fd247/libraries/stdlib/jvm/src/kotlin/io/files/Utils.kt#L14-L39)\n- [Vulnerable Code #2](https://github.com/JetBrains/kotlin/blob/9b157fd291d581a30a3194940b0ebbb95a2fd247/libraries/stdlib/jvm/src/kotlin/io/files/Utils.kt#L41-L60)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-378",
                  "maven"
                ],
                "cvssv3_baseScore": 3.3,
                "security-severity": "3.3"
              }
            },
            {
              "id": "SNYK-JAVA-ORGJETBRAINSKOTLIN-2628385",
              "shortDescription": {
                "text": "Medium severity - Improper Locking vulnerability in org.jetbrains.kotlin:kotlin-stdlib"
              },
              "fullDescription": {
                "text": "(CVE-2022-24329) org.jetbrains.kotlin:kotlin-stdlib@1.4.10"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[org.jetbrains.kotlin:kotlin-stdlib](https://search.maven.org/artifact/org.jetbrains.kotlin/kotlin-stdlib) is a Kotlin Standard Library for JVM.\n\nAffected versions of this package are vulnerable to Improper Locking due to inability to lock dependencies for Multiplatform Gradle Projects.\n## Remediation\nUpgrade `org.jetbrains.kotlin:kotlin-stdlib` to version 1.6.0 or higher.\n## References\n- [JetBrains Issue](https://youtrack.jetbrains.com/issue/KT-49449)\n- [JetBrains Security Announcment](https://blog.jetbrains.com/blog/2022/02/08/jetbrains-security-bulletin-q4-2021/)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=2074230)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-667",
                  "maven"
                ],
                "cvssv3_baseScore": 5.3,
                "security-severity": "5.3"
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "SNYK-JAVA-COMCEDARSOFTWARE-5710367",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.cedarsoftware:json-io package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.cedarsoftware:json-io@2.5.1"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to com.cedarsoftware:json-io@4.14.1"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "com.cedarsoftware:json-io@4.14.1"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1009829",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1047324",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1048302",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1052449",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1052450",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1054588",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056414",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056416",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056417",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056418",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056419",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056420",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056421",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056424",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056425",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056426",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1056427",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-1061931",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-174736",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-2421244",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-3038424",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-3038426",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-32111",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-450207",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-450917",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-455617",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-467014",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-467015",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-467016",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-469674",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-469676",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-471943",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-472980",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-540500",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-548451",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-559094",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-559106",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-560762",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-560766",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-561362",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-561373",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-561585",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-561586",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-561587",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-564887",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-564888",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-570625",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-572300",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-572314",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-572316",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-6056407",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-608664",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72445",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72446",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72447",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72448",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72449",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72450",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72451",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72882",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72883",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72884",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.fasterxml.jackson.core:jackson-databind package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.fasterxml.jackson.core:jackson-databind@2.9.4"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMGOOGLEGUAVA-1015415",
          "level": "note",
          "message": {
            "text": "This file introduces a vulnerable com.google.guava:guava package with a low severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.google.guava:guava@11.0.2"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.hive:hive-exec@3.1.3"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.hive:hive-exec@3.1.3"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMGOOGLEGUAVA-32236",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable com.google.guava:guava package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.google.guava:guava@11.0.2"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.hive:hive-exec@3.1.3"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.hive:hive-exec@3.1.3"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMGOOGLEGUAVA-5710356",
          "level": "note",
          "message": {
            "text": "This file introduces a vulnerable com.google.guava:guava package with a low severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.google.guava:guava@11.0.2"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.hive:hive-exec@3.1.3"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.hive:hive-exec@3.1.3"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMGOOGLEPROTOBUF-173761",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.google.protobuf:protobuf-java package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.google.protobuf:protobuf-java@3.3.0"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMGOOGLEPROTOBUF-2331703",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.google.protobuf:protobuf-java package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.google.protobuf:protobuf-java@3.3.0"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMGOOGLEPROTOBUF-3040284",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable com.google.protobuf:protobuf-java package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.google.protobuf:protobuf-java@3.3.0"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMGOOGLEPROTOBUF-3167772",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.google.protobuf:protobuf-java package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.google.protobuf:protobuf-java@3.3.0"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMMONSCODEC-561518",
          "level": "note",
          "message": {
            "text": "This file introduces a vulnerable commons-codec:commons-codec package with a low severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "commons-codec:commons-codec@1.9"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMNIMBUSDS-6247633",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.nimbusds:nimbus-jose-jwt package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.nimbusds:nimbus-jose-jwt@9.8.1"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to com.nimbusds:nimbus-jose-jwt@9.37.2"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "com.nimbusds:nimbus-jose-jwt@9.37.2"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-IOAIRLIFT-7164637",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable io.airlift:aircompressor package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "io.airlift:aircompressor@0.10"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to io.airlift:aircompressor@0.27"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "io.airlift:aircompressor@0.27"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-IONETTY-473694",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable io.netty:netty package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "io.netty:netty@3.10.6.Final"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-IONETTY-5953332",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable io.netty:netty-codec-http2 package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "io.netty:netty-codec-http2@4.1.97.Final"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.hbase.thirdparty:hbase-shaded-netty@4.1.5"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.hbase.thirdparty:hbase-shaded-netty@4.1.5"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-IONETTY-6483812",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable io.netty:netty-codec-http package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "io.netty:netty-codec-http@4.1.97.Final"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.hbase.thirdparty:hbase-shaded-netty@4.1.5"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.hbase.thirdparty:hbase-shaded-netty@4.1.5"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-NETMINIDEV-1298655",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable net.minidev:json-smart package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "net.minidev:json-smart@1.3.2"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to com.nimbusds:nimbus-jose-jwt@9.8.1"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "com.nimbusds:nimbus-jose-jwt@9.8.1"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-NETMINIDEV-3369748",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable net.minidev:json-smart package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "net.minidev:json-smart@1.3.2"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to com.nimbusds:nimbus-jose-jwt@9.8.1"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "com.nimbusds:nimbus-jose-jwt@9.8.1"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-ORGAPACHEANT-1015405",
          "level": "note",
          "message": {
            "text": "This file introduces a vulnerable org.apache.ant:ant package with a low severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "org.apache.ant:ant@1.9.1"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.ant:ant@1.10.9"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.ant:ant@1.10.9"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-ORGAPACHEANT-5597835",
          "level": "note",
          "message": {
            "text": "This file introduces a vulnerable org.apache.ant:ant package with a low severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "org.apache.ant:ant@1.9.1"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.ant:ant@1.9.16"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.ant:ant@1.9.16"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-ORGAPACHEANT-5597836",
          "level": "note",
          "message": {
            "text": "This file introduces a vulnerable org.apache.ant:ant package with a low severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "org.apache.ant:ant@1.9.1"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.ant:ant@1.9.16"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.ant:ant@1.9.16"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-ORGAPACHEANT-569130",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable org.apache.ant:ant package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "org.apache.ant:ant@1.9.1"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.ant:ant@1.9.15"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.ant:ant@1.9.15"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-ORGAPACHEAVRO-5926693",
          "level": "note",
          "message": {
            "text": "This file introduces a vulnerable org.apache.avro:avro package with a low severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "org.apache.avro:avro@1.8.2"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.hive:hive-exec@3.1.3"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.hive:hive-exec@3.1.3"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-ORGAPACHECALCITEAVATICA-2961770",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable org.apache.calcite.avatica:avatica-core package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "org.apache.calcite.avatica:avatica-core@1.11.0"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.16.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.16.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-ORGAPACHEDERBY-32274",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable org.apache.derby:derby package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "org.apache.derby:derby@10.14.1.0"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.derby:derby@10.14.2.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.derby:derby@10.14.2.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-ORGAPACHEDERBY-6069877",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable org.apache.derby:derby package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "org.apache.derby:derby@10.14.1.0"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.derby:derby@10.17.1.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.derby:derby@10.17.1.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-ORGAPACHEHTTPCOMPONENTS-1048058",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable org.apache.httpcomponents:httpclient package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "org.apache.httpcomponents:httpclient@4.5.2"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-ORGAPACHEHTTPCOMPONENTS-31517",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable org.apache.httpcomponents:httpclient package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "org.apache.httpcomponents:httpclient@4.5.2"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica@1.11.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica@1.11.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-ORGAPACHEIVY-3106014",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable org.apache.ivy:ivy package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "org.apache.ivy:ivy@2.4.0"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.ivy:ivy@2.5.1"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.ivy:ivy@2.5.1"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-ORGAPACHEIVY-3106929",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable org.apache.ivy:ivy package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "org.apache.ivy:ivy@2.4.0"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.ivy:ivy@2.5.1"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.ivy:ivy@2.5.1"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-ORGAPACHEIVY-5847858",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable org.apache.ivy:ivy package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "org.apache.ivy:ivy@2.4.0"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.ivy:ivy@2.5.2"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.ivy:ivy@2.5.2"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-ORGBOUNCYCASTLE-2841508",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable org.bouncycastle:bcprov-jdk15on package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "org.bouncycastle:bcprov-jdk15on@1.68"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.bouncycastle:bcprov-jdk15on@1.69"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.bouncycastle:bcprov-jdk15on@1.69"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-ORGBOUNCYCASTLE-5771339",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable org.bouncycastle:bcprov-jdk15on package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "org.bouncycastle:bcprov-jdk15on@1.68"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-ORGBOUNCYCASTLE-6084022",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable org.bouncycastle:bcprov-jdk15on package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "org.bouncycastle:bcprov-jdk15on@1.68"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-ORGBOUNCYCASTLE-6613080",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable org.bouncycastle:bcprov-jdk15on package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "org.bouncycastle:bcprov-jdk15on@1.68"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-ORGCODEHAUSJETTISON-3033152",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable org.codehaus.jettison:jettison package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "org.codehaus.jettison:jettison@1.1"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.codehaus.jettison:jettison@1.5.1"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.codehaus.jettison:jettison@1.5.1"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-ORGCODEHAUSJETTISON-3037311",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable org.codehaus.jettison:jettison package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "org.codehaus.jettison:jettison@1.1"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.codehaus.jettison:jettison@1.5.1"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.codehaus.jettison:jettison@1.5.1"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-ORGCODEHAUSJETTISON-3168085",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable org.codehaus.jettison:jettison package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "org.codehaus.jettison:jettison@1.1"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.codehaus.jettison:jettison@1.5.2"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.codehaus.jettison:jettison@1.5.2"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-ORGCODEHAUSJETTISON-3367610",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable org.codehaus.jettison:jettison package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "org.codehaus.jettison:jettison@1.1"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.codehaus.jettison:jettison@1.5.4"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.codehaus.jettison:jettison@1.5.4"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-ORGJETBRAINSKOTLIN-2393744",
          "level": "note",
          "message": {
            "text": "This file introduces a vulnerable org.jetbrains.kotlin:kotlin-stdlib package with a low severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "org.jetbrains.kotlin:kotlin-stdlib@1.4.10"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-ORGJETBRAINSKOTLIN-2628385",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable org.jetbrains.kotlin:kotlin-stdlib package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "org.jetbrains.kotlin:kotlin-stdlib@1.4.10"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.jetbrains.kotlin:kotlin-stdlib@1.6.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/external/storm-autocreds"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.jetbrains.kotlin:kotlin-stdlib@1.6.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Snyk Container",
          "properties": {
            "artifactsScanned": 133
          },
          "rules": [
            {
              "id": "SNYK-JAVA-COMGOOGLEGUAVA-5710356",
              "shortDescription": {
                "text": "Low severity - Creation of Temporary File in Directory with Insecure Permissions vulnerability in com.google.guava:guava"
              },
              "fullDescription": {
                "text": "(CVE-2023-2976) com.google.guava:guava@30.1.1-jre"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.google.guava:guava](https://github.com/google/guava) is a set of core libraries that includes new collection types (such as multimap and multiset,immutable collections, a graph library, functional types, an in-memory cache and more.\n\nAffected versions of this package are vulnerable to Creation of Temporary File in Directory with Insecure Permissions due to the use of Java's default temporary directory for file creation in `FileBackedOutputStream`. Other users and apps on the machine with access to the default Java temporary directory can access the files created by this class. This more fully addresses the underlying issue described in [CVE-2020-8908](https://security.snyk.io/vuln/SNYK-JAVA-COMGOOGLEGUAVA-1015415), by deprecating the permissive temp file creation behavior.\r\n\r\n**NOTE:** Even though the security vulnerability is fixed in version 32.0.0, the maintainers recommend using version 32.0.1, as version 32.0.0 breaks some functionality under Windows.\n## Remediation\nUpgrade `com.google.guava:guava` to version 32.0.0-android, 32.0.0-jre or higher.\n## References\n- [GitHub Commit](https://github.com/google/guava/commit/feb83a1c8fd2e7670b244d5afd23cba5aca43284)\n- [GitHub Issue](https://github.com/google/guava/issues/2575)\n- [GitHub Issue](https://github.com/google/guava/issues/6532)\n- [GitHub Release](https://github.com/google/guava/releases/tag/v32.0.0)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-379",
                  "maven"
                ],
                "cvssv3_baseScore": 3.3,
                "security-severity": "3.3"
              }
            },
            {
              "id": "SNYK-JAVA-COMNIMBUSDS-6247633",
              "shortDescription": {
                "text": "High severity - Allocation of Resources Without Limits or Throttling vulnerability in com.nimbusds:nimbus-jose-jwt"
              },
              "fullDescription": {
                "text": "(CVE-2023-52428) com.nimbusds:nimbus-jose-jwt@9.8.1"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.nimbusds:nimbus-jose-jwt](https://connect2id.com/products/nimbus-jose-jwt) is a library for JSON Web Tokens (JWT)\n\nAffected versions of this package are vulnerable to Allocation of Resources Without Limits or Throttling due to a large JWE `p2c` header value (AKA iteration count) for the `PasswordBasedDecrypter` (PBKDF2) class. An attacker can cause resource consumption by specifying an excessively large iteration count.\n## Remediation\nUpgrade `com.nimbusds:nimbus-jose-jwt` to version 9.37.2 or higher.\n## References\n- [Bitbucket Commit](https://bitbucket.org/connect2id/nimbus-jose-jwt/commits/3b3b77e)\n- [Bitbucket Issue](https://bitbucket.org/connect2id/nimbus-jose-jwt/issues/526/)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-770",
                  "maven"
                ],
                "cvssv3_baseScore": 7.5,
                "security-severity": "7.5"
              }
            },
            {
              "id": "SNYK-JAVA-IONETTY-6483812",
              "shortDescription": {
                "text": "Medium severity - Allocation of Resources Without Limits or Throttling vulnerability in io.netty:netty-codec-http"
              },
              "fullDescription": {
                "text": "(CVE-2024-29025) io.netty:netty-codec-http@4.1.107.Final"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[io.netty:netty-codec-http](https://mvnrepository.com/artifact/io.netty/netty-codec-http) is a network application framework for rapid development of maintainable high performance protocol servers & clients.\n\nAffected versions of this package are vulnerable to Allocation of Resources Without Limits or Throttling due to the accumulation of data in the `HttpPostRequestDecoder`. The decoder cumulates bytes in the `undecodedChunk` buffer until it can decode a field, allowing for data to accumulate without limits.\n\nAn attacker can cause a denial of service by sending a chunked post consisting of many small fields that will be accumulated in the `bodyListHttpData` list.\n## Remediation\nUpgrade `io.netty:netty-codec-http` to version 4.1.108.Final or higher.\n## References\n- [GitHub Commit](https://github.com/netty/netty/commit/0d0c6ed782d13d423586ad0c71737b2c7d02058c)\n- [GitHub Gist](https://gist.github.com/vietj/f558b8ea81ec6505f1e9a6ca283c9ae3)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-770",
                  "maven"
                ],
                "cvssv3_baseScore": 5.3,
                "security-severity": "5.3"
              }
            },
            {
              "id": "SNYK-JAVA-NETMINIDEV-1298655",
              "shortDescription": {
                "text": "Medium severity - Denial of Service (DoS) vulnerability in net.minidev:json-smart"
              },
              "fullDescription": {
                "text": "(CVE-2021-31684) net.minidev:json-smart@1.3.2"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[net.minidev:json-smart](https://github.com/netplex/json-smart-v1) is a Java JSON parser.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) via the `indexOf` function of `JSONParserByteArray` which causes a denial of service (DOS) via a crafted web request.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `net.minidev:json-smart` to version 1.3.3, 2.4.5 or higher.\n## References\n- [GitHub Issue](https://github.com/netplex/json-smart-v1/issues/10)\n- [GitHub Issue](https://github.com/netplex/json-smart-v2/issues/67)\n- [GitHub PR](https://github.com/netplex/json-smart-v1/pull/11)\n- [GitHub PR](https://github.com/netplex/json-smart-v2/pull/68)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "maven"
                ],
                "cvssv3_baseScore": 5.3,
                "security-severity": "5.3"
              }
            },
            {
              "id": "SNYK-JAVA-NETMINIDEV-3369748",
              "shortDescription": {
                "text": "High severity - Denial of Service (DoS) vulnerability in net.minidev:json-smart"
              },
              "fullDescription": {
                "text": "(CVE-2023-1370) net.minidev:json-smart@1.3.2"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[net.minidev:json-smart](https://github.com/netplex/json-smart-v1) is a Java JSON parser.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) due to a `StackOverflowError` when parsing a deeply nested JSON array or object.\r\n\r\n**NOTE:** Although this vulnerability was fixed in version 2.4.9 the maintainer recommends upgrading to 2.4.10, due to a remaining bug.\n## PoC\n```java\r\nStringBuilder s = new StringBuilder();\r\nfor (int i = 0; i < 10000 ; i++) {\r\n  s.append(\"{\\\"a\\\":\");\r\n}\r\ns.append(\"1\");\r\nfor (int i = 0; i < 10000 ; i++) {\r\n  s.append(\"}\");\r\n}\r\nJSONParser p = new JSONParser(JSONParser.MODE_JSON_SIMPLE);\r\np.parse(s.toString());\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `net.minidev:json-smart` to version 2.4.9 or higher.\n## References\n- [GitHub Commit](https://github.com/netplex/json-smart-v2/commit/5b3205d051952d3100aa0db1535f6ba6226bd87a)\n- [GitHub Commit](https://github.com/netplex/json-smart-v2/commit/e2791ae506a57491bc856b439d706c81e45adcf8)\n- [GitHub Issue](https://github.com/netplex/json-smart-v2/issues/137)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "maven"
                ],
                "cvssv3_baseScore": 7.5,
                "security-severity": "7.5"
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "SNYK-JAVA-COMGOOGLEGUAVA-5710356",
          "level": "note",
          "message": {
            "text": "This file introduces a vulnerable com.google.guava:guava package with a low severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/lib"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.google.guava:guava@30.1.1-jre"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to com.google.guava:guava@32.0.0-jre"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/lib"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "com.google.guava:guava@32.0.0-jre"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMNIMBUSDS-6247633",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.nimbusds:nimbus-jose-jwt package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/lib"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.nimbusds:nimbus-jose-jwt@9.8.1"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to com.nimbusds:nimbus-jose-jwt@9.37.2"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/lib"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "com.nimbusds:nimbus-jose-jwt@9.37.2"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-IONETTY-6483812",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable io.netty:netty-codec-http package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/lib"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "io.netty:netty-codec-http@4.1.107.Final"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.storm:storm-shaded-deps@2.6.2"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/lib"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.storm:storm-shaded-deps@2.6.2"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-NETMINIDEV-1298655",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable net.minidev:json-smart package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/lib"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "net.minidev:json-smart@1.3.2"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to com.nimbusds:nimbus-jose-jwt@9.8.1"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/lib"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "com.nimbusds:nimbus-jose-jwt@9.8.1"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-NETMINIDEV-3369748",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable net.minidev:json-smart package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/lib"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "net.minidev:json-smart@1.3.2"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to com.nimbusds:nimbus-jose-jwt@9.8.1"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/lib"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "com.nimbusds:nimbus-jose-jwt@9.8.1"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Snyk Container",
          "properties": {
            "artifactsScanned": 19
          },
          "rules": [
            {
              "id": "SNYK-JAVA-COMGOOGLEGUAVA-1015415",
              "shortDescription": {
                "text": "Low severity - Information Disclosure vulnerability in com.google.guava:guava"
              },
              "fullDescription": {
                "text": "(CVE-2020-8908) com.google.guava:guava@19.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\n[com.google.guava:guava](https://github.com/google/guava) is a set of core libraries that includes new collection types (such as multimap and multiset,immutable collections, a graph library, functional types, an in-memory cache and more.\n\n\nAffected versions of this package are vulnerable to Information Disclosure.\nThe file permissions on the file created by `com.google.common.io.Files.createTempDir` allow an attacker running a malicious program co-resident on the same machine to steal secrets stored in this directory. This is because, by default, on unix-like operating systems the /tmp directory is shared between all users, so if the correct file permissions aren't set by the directory/file creator, the file becomes readable by all other users on that system.\r\n\r\n## PoC\r\n```java\r\nFile guavaTempDir = com.google.common.io.Files.createTempDir();\r\nSystem.out.println(\"Guava Temp Dir: \" + guavaTempDir.getName());\r\nrunLS(guavaTempDir.getParentFile(), guavaTempDir); // Prints the file permissions -> drwxr-xr-x\r\nFile child = new File(guavaTempDir, \"guava-child.txt\");\r\nchild.createNewFile();\r\nrunLS(guavaTempDir, child); // Prints the file permissions -> -rw-r--r--\r\n```\r\n\r\nFor Android developers, choosing a temporary directory API provided by Android is recommended, such as `context.getCacheDir()`. For other Java developers, we recommend migrating to the Java 7 API `java.nio.file.Files.createTempDirectory()` which explicitly configures permissions of 700, or configuring the Java runtime's java.io.tmpdir system property to point to a location whose permissions are appropriately configured.\n\n## Remediation\nThere is no fix for `com.google.guava:guava`. However, in version 30.0 and above, the vulnerable functionality has been deprecated. In oder to mitigate this vulnerability, upgrade to version 30.0 or higher and ensure your dependencies don't use the createTempDir or createTempFile methods.\n\n## References\n\n- [GHSA Advisory](https://github.com/advisories/GHSA-5mg8-w23w-74h3)\n\n- [GitHub Commit](https://github.com/google/guava/commit/feb83a1c8fd2e7670b244d5afd23cba5aca43284)\n\n- [GitHub Commit](https://github.com/google/guava/commit/fec0dbc4634006a6162cfd4d0d09c962073ddf40)\n\n- [GitHub Issue](https://github.com/google/guava/issues/4011)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-200",
                  "maven"
                ],
                "cvssv3_baseScore": 3.3,
                "security-severity": "3.3"
              }
            },
            {
              "id": "SNYK-JAVA-COMGOOGLEGUAVA-32236",
              "shortDescription": {
                "text": "Medium severity - Deserialization of Untrusted Data vulnerability in com.google.guava:guava"
              },
              "fullDescription": {
                "text": "(CVE-2018-10237) com.google.guava:guava@19.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.google.guava:guava](https://github.com/google/guava) is a set of core libraries that includes new collection types (such as multimap and multiset,immutable collections, a graph library, functional types, an in-memory cache and more.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. During deserialization, two Guava classes accept a caller-specified size parameter and eagerly allocate an array of that size:\r\n* `AtomicDoubleArray` (when serialized with Java serialization)\r\n* `CompoundOrdering` (when serialized with GWT serialization)\r\n\r\nAn attacker may be able to send a specially crafted request which with then cause the server to allocate all it's memory, without validation whether the data size is reasonable.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\n  \nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n  \n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application, an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n\n  \n## Remediation\nUpgrade `com.google.guava:guava` to version 24.1.1, 24.1.1-jre or higher.\n## References\n- [GitHub Commit](https://github.com/google/guava/commit/7ec8718f1e6e2814dabaa4b9f96b6b33a813101c)\n- [Google Group Forum](https://groups.google.com/forum/#!topic/guava-announce/xqWALw4W1vs/discussion)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=1573391)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-119",
                  "maven"
                ],
                "cvssv3_baseScore": 5.9,
                "security-severity": "5.9"
              }
            },
            {
              "id": "SNYK-JAVA-COMGOOGLEGUAVA-5710356",
              "shortDescription": {
                "text": "Low severity - Creation of Temporary File in Directory with Insecure Permissions vulnerability in com.google.guava:guava"
              },
              "fullDescription": {
                "text": "(CVE-2023-2976) com.google.guava:guava@19.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.google.guava:guava](https://github.com/google/guava) is a set of core libraries that includes new collection types (such as multimap and multiset,immutable collections, a graph library, functional types, an in-memory cache and more.\n\nAffected versions of this package are vulnerable to Creation of Temporary File in Directory with Insecure Permissions due to the use of Java's default temporary directory for file creation in `FileBackedOutputStream`. Other users and apps on the machine with access to the default Java temporary directory can access the files created by this class. This more fully addresses the underlying issue described in [CVE-2020-8908](https://security.snyk.io/vuln/SNYK-JAVA-COMGOOGLEGUAVA-1015415), by deprecating the permissive temp file creation behavior.\r\n\r\n**NOTE:** Even though the security vulnerability is fixed in version 32.0.0, the maintainers recommend using version 32.0.1, as version 32.0.0 breaks some functionality under Windows.\n## Remediation\nUpgrade `com.google.guava:guava` to version 32.0.0-android, 32.0.0-jre or higher.\n## References\n- [GitHub Commit](https://github.com/google/guava/commit/feb83a1c8fd2e7670b244d5afd23cba5aca43284)\n- [GitHub Issue](https://github.com/google/guava/issues/2575)\n- [GitHub Issue](https://github.com/google/guava/issues/6532)\n- [GitHub Release](https://github.com/google/guava/releases/tag/v32.0.0)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-379",
                  "maven"
                ],
                "cvssv3_baseScore": 3.3,
                "security-severity": "3.3"
              }
            },
            {
              "id": "SNYK-JAVA-COMGOOGLEPROTOBUF-173761",
              "shortDescription": {
                "text": "High severity - Integer Overflow vulnerability in com.google.protobuf:protobuf-java"
              },
              "fullDescription": {
                "text": "(CVE-2015-5237) com.google.protobuf:protobuf-java@3.3.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.google.protobuf:protobuf-java](https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java) is a Google's language-neutral, platform-neutral, extensible mechanism for serializing structured data.\n\nAffected versions of this package are vulnerable to Integer Overflow by allowing remote authenticated attackers to cause a heap-based buffer overflow in serialisation process.\n## Remediation\nUpgrade `com.google.protobuf:protobuf-java` to version 3.4.0 or higher.\n## References\n- [GitHub Issue](https://github.com/protocolbuffers/protobuf/issues/760)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-119",
                  "maven"
                ],
                "cvssv3_baseScore": 8.8,
                "security-severity": "8.8"
              }
            },
            {
              "id": "SNYK-JAVA-COMGOOGLEPROTOBUF-2331703",
              "shortDescription": {
                "text": "High severity - Denial of Service (DoS) vulnerability in com.google.protobuf:protobuf-java"
              },
              "fullDescription": {
                "text": "(CVE-2021-22569) com.google.protobuf:protobuf-java@3.3.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.google.protobuf:protobuf-java](https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java) is a Google's language-neutral, platform-neutral, extensible mechanism for serializing structured data.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). An issue in protobuf-java allowed the interleaving of `com.google.protobuf.UnknownFieldSet` fields in such a way that would be processed out of order. A small malicious payload can occupy the parser for several minutes by creating large numbers of short-lived objects that cause frequent, repeated pauses.\r\n\r\n**Note:** Protobuf `javalite` users are not affected.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `com.google.protobuf:protobuf-java` to version 3.16.1, 3.18.2, 3.19.2 or higher.\n## References\n- [Chromium Bugs](https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=39330)\n- [GitHub Commit](https://github.com/protocolbuffers/protobuf/commit/36a2fe60090a277e0e740c8498ae715e87f6b9b7)\n- [GitHub Commit](https://github.com/protocolbuffers/protobuf/commit/9638a5e5315bf73f5e7148c16181676372321892)\n- [GitHub Commit](https://github.com/protocolbuffers/protobuf/commit/f554ccaa514967232cc494cf22947e1c73ca747f)\n- [Google Cloud Security Bulletin](https://cloud.google.com/support/bulletins#gcp-2022-001)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-696",
                  "maven"
                ],
                "cvssv3_baseScore": 7.5,
                "security-severity": "7.5"
              }
            },
            {
              "id": "SNYK-JAVA-COMGOOGLEPROTOBUF-3040284",
              "shortDescription": {
                "text": "Medium severity - Denial of Service (DoS) vulnerability in com.google.protobuf:protobuf-java"
              },
              "fullDescription": {
                "text": "(CVE-2022-3171) com.google.protobuf:protobuf-java@3.3.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.google.protobuf:protobuf-java](https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java) is a Google's language-neutral, platform-neutral, extensible mechanism for serializing structured data.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) via the parsing procedure for binary and text format data. Input streams containing multiple instances of non-repeated [embedded messages](http://developers.google.com/protocol-buffers/docs/encoding#embedded) with repeated or unknown fields cause objects to be converted back and forth between mutable and immutable forms, resulting in potentially long garbage collection pauses.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `com.google.protobuf:protobuf-java` to version 3.16.3, 3.19.6, 3.20.3, 3.21.7 or higher.\n## References\n- [Chromium Bugs](https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=48771)\n- [GitHub Commit](https://github.com/protocolbuffers/protobuf/commit/24b65038cfe36191268fda355aca0e43d3ecbcbe)\n- [GitHub PR](https://github.com/protocolbuffers/protobuf/pull/10674)\n- [GitHub Release](https://github.com/protocolbuffers/protobuf/releases/tag/v21.7)\n- [GitHub Release](https://github.com/protocolbuffers/protobuf/releases/tag/v3.16.3)\n- [GitHub Release](https://github.com/protocolbuffers/protobuf/releases/tag/v3.19.6)\n- [GitHub Release](https://github.com/protocolbuffers/protobuf/releases/tag/v3.20.3)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "maven"
                ],
                "cvssv3_baseScore": 5.7,
                "security-severity": "5.7"
              }
            },
            {
              "id": "SNYK-JAVA-COMGOOGLEPROTOBUF-3167772",
              "shortDescription": {
                "text": "High severity - Denial of Service (DoS) vulnerability in com.google.protobuf:protobuf-java"
              },
              "fullDescription": {
                "text": "(CVE-2022-3509) com.google.protobuf:protobuf-java@3.3.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.google.protobuf:protobuf-java](https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java) is a Google's language-neutral, platform-neutral, extensible mechanism for serializing structured data.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS) in `MessageReflection.java` due to a text format parsing issue. Inputs containing multiple instances of non-repeated embedded messages with repeated or unknown fields causes objects to be converted back and forth between mutable and immutable forms, resulting in potentially long garbage collection pauses.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\n\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\n\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\n\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\n\nTwo common types of DoS vulnerabilities:\n\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\n\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](https://snyk.io/vuln/npm:ws:20171108)\n\n## Remediation\nUpgrade `com.google.protobuf:protobuf-java` to version 3.16.3, 3.19.6, 3.20.3, 3.21.7 or higher.\n## References\n- [GitHub Commit](https://github.com/protocolbuffers/protobuf/commit/a3888f53317a8018e7a439bac4abeb8f3425d5e9)\n- [GitHub PR](https://github.com/protocolbuffers/protobuf/pull/10673)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-400",
                  "maven"
                ],
                "cvssv3_baseScore": 7.5,
                "security-severity": "7.5"
              }
            },
            {
              "id": "SNYK-JAVA-ORGAPACHECALCITE-1038296",
              "shortDescription": {
                "text": "High severity - Man-in-the-Middle (MitM) vulnerability in org.apache.calcite:calcite-core"
              },
              "fullDescription": {
                "text": "(CVE-2020-13955) org.apache.calcite:calcite-core@1.16.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[org.apache.calcite:calcite-core](https://mvnrepository.com/artifact/org.apache.calcite/calcite-core) is a Core Calcite APIs and engine.\n\nAffected versions of this package are vulnerable to Man-in-the-Middle (MitM). The `HttpUtils#getURLConnection` method disables explicitly hostname verification for HTTPS connections making clients vulnerable to man-in-the-middle attacks. Calcite uses this method internally to connect with Druid and Splunk so information leakage may happen when using the respective Calcite adapters.\r\n\r\nThe method itself is in a utility class so people may use it to create vulnerable HTTPS connections for other applications.\n## Remediation\nUpgrade `org.apache.calcite:calcite-core` to version 1.26 or higher.\n## References\n- [Apache Security Advisory](https://lists.apache.org/thread.html/r0b0fbe2038388175951ce1028182d980f9e9a7328be13d52dab70bb3%40%3Cdev.calcite.apache.org%3E)\n- [GitHub Commit](https://github.com/apache/calcite/commit/43eeafcbac29d02c72bd520c003cdfc571de2d15)\n- [JIRA Ticket](https://issues.apache.org/jira/browse/CALCITE-4298)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-300",
                  "maven"
                ],
                "cvssv3_baseScore": 7.1,
                "security-severity": "7.1"
              }
            },
            {
              "id": "SNYK-JAVA-ORGAPACHECALCITEAVATICA-2961770",
              "shortDescription": {
                "text": "High severity - Arbitrary Code Execution vulnerability in org.apache.calcite.avatica:avatica-core"
              },
              "fullDescription": {
                "text": "(CVE-2022-36364) org.apache.calcite.avatica:avatica-core@1.11.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[org.apache.calcite.avatica:avatica-core](https://search.maven.org/artifact/org.apache.calcite.avatica/avatica-core) is a JDBC driver framework\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution when the JDBC driver fails to verify that a given client instance implements a permitted interface. This allows attackers to load arbitrary classes and thereby execute code.\r\n\r\n**Note:** For this vulnerability to be exploited there must be a constructor class in the classpath with a URL parameter and the ability to execute code.\n## Remediation\nUpgrade `org.apache.calcite.avatica:avatica-core` to version 1.22.0 or higher.\n## References\n- [Apache Mailing List](https://lists.apache.org/thread/5csdj8bv4h3hfgw27okm84jh1j2fyw0c)\n- [GitHub Commit](https://github.com/apache/calcite-avatica/commit/0c097b6a685fc1f97f151505a219976f15ed0c4c)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-94",
                  "maven"
                ],
                "cvssv3_baseScore": 7.2,
                "security-severity": "7.2"
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "SNYK-JAVA-COMGOOGLEGUAVA-1015415",
          "level": "note",
          "message": {
            "text": "This file introduces a vulnerable com.google.guava:guava package with a low severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/lib-tools/sql/core"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.google.guava:guava@19.0"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to com.google.guava:guava@30.0-android"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/lib-tools/sql/core"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "com.google.guava:guava@30.0-android"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMGOOGLEGUAVA-32236",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable com.google.guava:guava package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/lib-tools/sql/core"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.google.guava:guava@19.0"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to com.google.guava:guava@24.1.1-android"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/lib-tools/sql/core"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "com.google.guava:guava@24.1.1-android"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMGOOGLEGUAVA-5710356",
          "level": "note",
          "message": {
            "text": "This file introduces a vulnerable com.google.guava:guava package with a low severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/lib-tools/sql/core"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.google.guava:guava@19.0"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to com.google.guava:guava@32.0.0-android"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/lib-tools/sql/core"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "com.google.guava:guava@32.0.0-android"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMGOOGLEPROTOBUF-173761",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.google.protobuf:protobuf-java package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/lib-tools/sql/core"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.google.protobuf:protobuf-java@3.3.0"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to com.google.protobuf:protobuf-java@3.4.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/lib-tools/sql/core"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "com.google.protobuf:protobuf-java@3.4.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMGOOGLEPROTOBUF-2331703",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.google.protobuf:protobuf-java package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/lib-tools/sql/core"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.google.protobuf:protobuf-java@3.3.0"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to com.google.protobuf:protobuf-java@3.16.1"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/lib-tools/sql/core"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "com.google.protobuf:protobuf-java@3.16.1"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMGOOGLEPROTOBUF-3040284",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable com.google.protobuf:protobuf-java package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/lib-tools/sql/core"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.google.protobuf:protobuf-java@3.3.0"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to com.google.protobuf:protobuf-java@3.16.3"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/lib-tools/sql/core"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "com.google.protobuf:protobuf-java@3.16.3"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMGOOGLEPROTOBUF-3167772",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable com.google.protobuf:protobuf-java package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/lib-tools/sql/core"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.google.protobuf:protobuf-java@3.3.0"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to com.google.protobuf:protobuf-java@3.16.3"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/lib-tools/sql/core"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "com.google.protobuf:protobuf-java@3.16.3"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-ORGAPACHECALCITE-1038296",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable org.apache.calcite:calcite-core package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/lib-tools/sql/core"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "org.apache.calcite:calcite-core@1.16.0"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite:calcite-core@1.26.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/lib-tools/sql/core"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite:calcite-core@1.26.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-ORGAPACHECALCITEAVATICA-2961770",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable org.apache.calcite.avatica:avatica-core package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/lib-tools/sql/core"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "org.apache.calcite.avatica:avatica-core@1.11.0"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica-core@1.22.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/lib-tools/sql/core"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica-core@1.22.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Snyk Container",
          "properties": {
            "artifactsScanned": 22
          },
          "rules": [
            {
              "id": "SNYK-JAVA-COMGOOGLEGUAVA-1015415",
              "shortDescription": {
                "text": "Low severity - Information Disclosure vulnerability in com.google.guava:guava"
              },
              "fullDescription": {
                "text": "(CVE-2020-8908) com.google.guava:guava@19.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\n[com.google.guava:guava](https://github.com/google/guava) is a set of core libraries that includes new collection types (such as multimap and multiset,immutable collections, a graph library, functional types, an in-memory cache and more.\n\n\nAffected versions of this package are vulnerable to Information Disclosure.\nThe file permissions on the file created by `com.google.common.io.Files.createTempDir` allow an attacker running a malicious program co-resident on the same machine to steal secrets stored in this directory. This is because, by default, on unix-like operating systems the /tmp directory is shared between all users, so if the correct file permissions aren't set by the directory/file creator, the file becomes readable by all other users on that system.\r\n\r\n## PoC\r\n```java\r\nFile guavaTempDir = com.google.common.io.Files.createTempDir();\r\nSystem.out.println(\"Guava Temp Dir: \" + guavaTempDir.getName());\r\nrunLS(guavaTempDir.getParentFile(), guavaTempDir); // Prints the file permissions -> drwxr-xr-x\r\nFile child = new File(guavaTempDir, \"guava-child.txt\");\r\nchild.createNewFile();\r\nrunLS(guavaTempDir, child); // Prints the file permissions -> -rw-r--r--\r\n```\r\n\r\nFor Android developers, choosing a temporary directory API provided by Android is recommended, such as `context.getCacheDir()`. For other Java developers, we recommend migrating to the Java 7 API `java.nio.file.Files.createTempDirectory()` which explicitly configures permissions of 700, or configuring the Java runtime's java.io.tmpdir system property to point to a location whose permissions are appropriately configured.\n\n## Remediation\nThere is no fix for `com.google.guava:guava`. However, in version 30.0 and above, the vulnerable functionality has been deprecated. In oder to mitigate this vulnerability, upgrade to version 30.0 or higher and ensure your dependencies don't use the createTempDir or createTempFile methods.\n\n## References\n\n- [GHSA Advisory](https://github.com/advisories/GHSA-5mg8-w23w-74h3)\n\n- [GitHub Commit](https://github.com/google/guava/commit/feb83a1c8fd2e7670b244d5afd23cba5aca43284)\n\n- [GitHub Commit](https://github.com/google/guava/commit/fec0dbc4634006a6162cfd4d0d09c962073ddf40)\n\n- [GitHub Issue](https://github.com/google/guava/issues/4011)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-200",
                  "maven"
                ],
                "cvssv3_baseScore": 3.3,
                "security-severity": "3.3"
              }
            },
            {
              "id": "SNYK-JAVA-COMGOOGLEGUAVA-32236",
              "shortDescription": {
                "text": "Medium severity - Deserialization of Untrusted Data vulnerability in com.google.guava:guava"
              },
              "fullDescription": {
                "text": "(CVE-2018-10237) com.google.guava:guava@19.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.google.guava:guava](https://github.com/google/guava) is a set of core libraries that includes new collection types (such as multimap and multiset,immutable collections, a graph library, functional types, an in-memory cache and more.\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. During deserialization, two Guava classes accept a caller-specified size parameter and eagerly allocate an array of that size:\r\n* `AtomicDoubleArray` (when serialized with Java serialization)\r\n* `CompoundOrdering` (when serialized with GWT serialization)\r\n\r\nAn attacker may be able to send a specially crafted request which with then cause the server to allocate all it's memory, without validation whether the data size is reasonable.\n\n## Details\n\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\n  \nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n  \n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application, an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n\n  \n## Remediation\nUpgrade `com.google.guava:guava` to version 24.1.1, 24.1.1-jre or higher.\n## References\n- [GitHub Commit](https://github.com/google/guava/commit/7ec8718f1e6e2814dabaa4b9f96b6b33a813101c)\n- [Google Group Forum](https://groups.google.com/forum/#!topic/guava-announce/xqWALw4W1vs/discussion)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=1573391)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-119",
                  "maven"
                ],
                "cvssv3_baseScore": 5.9,
                "security-severity": "5.9"
              }
            },
            {
              "id": "SNYK-JAVA-COMGOOGLEGUAVA-5710356",
              "shortDescription": {
                "text": "Low severity - Creation of Temporary File in Directory with Insecure Permissions vulnerability in com.google.guava:guava"
              },
              "fullDescription": {
                "text": "(CVE-2023-2976) com.google.guava:guava@19.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[com.google.guava:guava](https://github.com/google/guava) is a set of core libraries that includes new collection types (such as multimap and multiset,immutable collections, a graph library, functional types, an in-memory cache and more.\n\nAffected versions of this package are vulnerable to Creation of Temporary File in Directory with Insecure Permissions due to the use of Java's default temporary directory for file creation in `FileBackedOutputStream`. Other users and apps on the machine with access to the default Java temporary directory can access the files created by this class. This more fully addresses the underlying issue described in [CVE-2020-8908](https://security.snyk.io/vuln/SNYK-JAVA-COMGOOGLEGUAVA-1015415), by deprecating the permissive temp file creation behavior.\r\n\r\n**NOTE:** Even though the security vulnerability is fixed in version 32.0.0, the maintainers recommend using version 32.0.1, as version 32.0.0 breaks some functionality under Windows.\n## Remediation\nUpgrade `com.google.guava:guava` to version 32.0.0-android, 32.0.0-jre or higher.\n## References\n- [GitHub Commit](https://github.com/google/guava/commit/feb83a1c8fd2e7670b244d5afd23cba5aca43284)\n- [GitHub Issue](https://github.com/google/guava/issues/2575)\n- [GitHub Issue](https://github.com/google/guava/issues/6532)\n- [GitHub Release](https://github.com/google/guava/releases/tag/v32.0.0)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-379",
                  "maven"
                ],
                "cvssv3_baseScore": 3.3,
                "security-severity": "3.3"
              }
            },
            {
              "id": "SNYK-JAVA-ORGAPACHECALCITE-1038296",
              "shortDescription": {
                "text": "High severity - Man-in-the-Middle (MitM) vulnerability in org.apache.calcite:calcite-core"
              },
              "fullDescription": {
                "text": "(CVE-2020-13955) org.apache.calcite:calcite-core@1.16.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[org.apache.calcite:calcite-core](https://mvnrepository.com/artifact/org.apache.calcite/calcite-core) is a Core Calcite APIs and engine.\n\nAffected versions of this package are vulnerable to Man-in-the-Middle (MitM). The `HttpUtils#getURLConnection` method disables explicitly hostname verification for HTTPS connections making clients vulnerable to man-in-the-middle attacks. Calcite uses this method internally to connect with Druid and Splunk so information leakage may happen when using the respective Calcite adapters.\r\n\r\nThe method itself is in a utility class so people may use it to create vulnerable HTTPS connections for other applications.\n## Remediation\nUpgrade `org.apache.calcite:calcite-core` to version 1.26 or higher.\n## References\n- [Apache Security Advisory](https://lists.apache.org/thread.html/r0b0fbe2038388175951ce1028182d980f9e9a7328be13d52dab70bb3%40%3Cdev.calcite.apache.org%3E)\n- [GitHub Commit](https://github.com/apache/calcite/commit/43eeafcbac29d02c72bd520c003cdfc571de2d15)\n- [JIRA Ticket](https://issues.apache.org/jira/browse/CALCITE-4298)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-300",
                  "maven"
                ],
                "cvssv3_baseScore": 7.1,
                "security-severity": "7.1"
              }
            },
            {
              "id": "SNYK-JAVA-ORGAPACHECALCITEAVATICA-2961770",
              "shortDescription": {
                "text": "High severity - Arbitrary Code Execution vulnerability in org.apache.calcite.avatica:avatica-core"
              },
              "fullDescription": {
                "text": "(CVE-2022-36364) org.apache.calcite.avatica:avatica-core@1.11.0"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[org.apache.calcite.avatica:avatica-core](https://search.maven.org/artifact/org.apache.calcite.avatica/avatica-core) is a JDBC driver framework\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution when the JDBC driver fails to verify that a given client instance implements a permitted interface. This allows attackers to load arbitrary classes and thereby execute code.\r\n\r\n**Note:** For this vulnerability to be exploited there must be a constructor class in the classpath with a URL parameter and the ability to execute code.\n## Remediation\nUpgrade `org.apache.calcite.avatica:avatica-core` to version 1.22.0 or higher.\n## References\n- [Apache Mailing List](https://lists.apache.org/thread/5csdj8bv4h3hfgw27okm84jh1j2fyw0c)\n- [GitHub Commit](https://github.com/apache/calcite-avatica/commit/0c097b6a685fc1f97f151505a219976f15ed0c4c)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-94",
                  "maven"
                ],
                "cvssv3_baseScore": 7.2,
                "security-severity": "7.2"
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "SNYK-JAVA-COMGOOGLEGUAVA-1015415",
          "level": "note",
          "message": {
            "text": "This file introduces a vulnerable com.google.guava:guava package with a low severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/lib-tools/sql/runtime"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.google.guava:guava@19.0"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to com.google.guava:guava@30.0-android"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/lib-tools/sql/runtime"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "com.google.guava:guava@30.0-android"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMGOOGLEGUAVA-32236",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable com.google.guava:guava package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/lib-tools/sql/runtime"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.google.guava:guava@19.0"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to com.google.guava:guava@24.1.1-android"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/lib-tools/sql/runtime"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "com.google.guava:guava@24.1.1-android"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-COMGOOGLEGUAVA-5710356",
          "level": "note",
          "message": {
            "text": "This file introduces a vulnerable com.google.guava:guava package with a low severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/lib-tools/sql/runtime"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "com.google.guava:guava@19.0"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to com.google.guava:guava@32.0.0-android"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/lib-tools/sql/runtime"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "com.google.guava:guava@32.0.0-android"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-ORGAPACHECALCITE-1038296",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable org.apache.calcite:calcite-core package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/lib-tools/sql/runtime"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "org.apache.calcite:calcite-core@1.16.0"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite:calcite-core@1.26.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/lib-tools/sql/runtime"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite:calcite-core@1.26.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-ORGAPACHECALCITEAVATICA-2961770",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable org.apache.calcite.avatica:avatica-core package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/lib-tools/sql/runtime"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "org.apache.calcite.avatica:avatica-core@1.11.0"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.calcite.avatica:avatica-core@1.22.0"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/lib-tools/sql/runtime"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.calcite.avatica:avatica-core@1.22.0"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Snyk Container",
          "properties": {
            "artifactsScanned": 39
          },
          "rules": []
        }
      },
      "results": []
    },
    {
      "tool": {
        "driver": {
          "name": "Snyk Container",
          "properties": {
            "artifactsScanned": 36
          },
          "rules": []
        }
      },
      "results": []
    },
    {
      "tool": {
        "driver": {
          "name": "Snyk Container",
          "properties": {
            "artifactsScanned": 108
          },
          "rules": [
            {
              "id": "SNYK-JAVA-ORGGLASSFISH-2841368",
              "shortDescription": {
                "text": "High severity - Improper Input Validation vulnerability in org.glassfish:javax.el"
              },
              "fullDescription": {
                "text": "(CVE-2021-28170) org.glassfish:javax.el@3.0.1-b12"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n\nAffected versions of this package are vulnerable to Improper Input Validation. A bug in the `ELParserTokenManager` enables invalid EL expressions to be evaluated as if they were valid.\r\n\r\nThe bug seems to be in the parser’s grammar  - `$` or `#` followed by a character that is not `{`, `$` or `#` will be treated as a literal expression. The pertinent case is when the character following the `$` or `#` chars is a backslash. The parser will then consume the backslash as part of the literal expression and will leave the character that follows it unescaped.\r\n\r\n**Note:**\r\n`org.glassfish:javax.el` is deprecated, users can move to use `org.glassfish:jakarta.el` instead where this issue is first fixed in version `3.0.4`.\n## Remediation\nThere is no fixed version for `org.glassfish:javax.el`.\n\n## References\n- [GitHub Issue](https://github.com/eclipse-ee4j/el-ri/issues/155)\n- [GitHub PR](https://github.com/eclipse-ee4j/el-ri/pull/160)\n- [GitHub Security Lab](https://securitylab.github.com/advisories/GHSL-2020-021-jakarta-el/)\n- [Vulnerable Code](https://github.com/eclipse-ee4j/el-ri/blob/master/impl/src/main/java/com/sun/el/parser/ELParser.jjt#L451)\n"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-20",
                  "maven"
                ],
                "cvssv3_baseScore": 7.3,
                "security-severity": "7.3"
              }
            },
            {
              "id": "SNYK-JAVA-ORGHIBERNATE-568162",
              "shortDescription": {
                "text": "Medium severity - Improper Input Validation vulnerability in org.hibernate:hibernate-validator"
              },
              "fullDescription": {
                "text": "(CVE-2020-10693) org.hibernate:hibernate-validator@5.4.3.Final"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[org.hibernate:hibernate-validator](https://mvnrepository.com/artifact/org.hibernate/hibernate-validator) is a Hibernate Validator Engine Relocation Artifact.\n\nAffected versions of this package are vulnerable to Improper Input Validation. A bug in the message interpolation processor enables invalid EL expressions to be evaluated as if they were valid. This flaw allows attackers to bypass input sanitation (escaping, stripping) controls that developers may have put in place when handling user-controlled data in error messages.\n## Remediation\nUpgrade `org.hibernate:hibernate-validator` to version 6.0.19.Final, 6.1.3.Final or higher.\n## References\n- [GitHub PR](https://github.com/hibernate/hibernate-validator/pull/1071)\n- [Jira Issue](https://hibernate.atlassian.net/browse/HV-1758)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=1805501)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-20",
                  "maven"
                ],
                "cvssv3_baseScore": 5.3,
                "security-severity": "5.3"
              }
            },
            {
              "id": "SNYK-JAVA-ORGHIBERNATE-569100",
              "shortDescription": {
                "text": "Medium severity - Cross-site Scripting (XSS) vulnerability in org.hibernate:hibernate-validator"
              },
              "fullDescription": {
                "text": "(CVE-2019-10219) org.hibernate:hibernate-validator@5.4.3.Final"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[org.hibernate:hibernate-validator](https://mvnrepository.com/artifact/org.hibernate/hibernate-validator) is a Hibernate Validator Engine Relocation Artifact.\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS). The `SafeHtml` validator annotation fails to properly sanitize payloads consisting of potentially malicious code in HTML comments and instructions.\n## Details\n\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\n\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\n\nInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\n\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\n \nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \n\n### Types of attacks\nThere are a few methods by which XSS can be manipulated:\n\n|Type|Origin|Description|\n|--|--|--|\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\n\n### Affected environments\nThe following environments are susceptible to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n### How to prevent\nThis section describes the top best practices designed to specifically protect your code: \n\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \n* Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\nUpgrade `org.hibernate:hibernate-validator` to version 6.0.18.Final, 6.1.0.Final or higher.\n## References\n- [Apache Security Advisory](https://lists.apache.org/thread.html/r87b7e2d22982b4ca9f88f5f4f22a19b394d2662415b233582ed22ebf@%3Cnotifications.accumulo.apache.org%3E)\n- [GitHub Commit](https://github.com/hibernate/hibernate-validator/commit/124b7dd6d9a4ad24d4d49f74701f05a13e56ceee)\n- [Hibernator Security Release Blog](https://in.relation.to/2019/11/20/hibernate-validator-610-6018-released/)\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2019-10219)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-79",
                  "maven"
                ],
                "cvssv3_baseScore": 6.5,
                "security-severity": "6.5"
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "SNYK-JAVA-ORGGLASSFISH-2841368",
          "level": "error",
          "message": {
            "text": "This file introduces a vulnerable org.glassfish:javax.el package with a high severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/lib-webapp"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "org.glassfish:javax.el@3.0.1-b12"
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-ORGHIBERNATE-568162",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable org.hibernate:hibernate-validator package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/lib-webapp"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "org.hibernate:hibernate-validator@5.4.3.Final"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.hibernate:hibernate-validator@6.0.23.Final"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/lib-webapp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.hibernate:hibernate-validator@6.0.23.Final"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SNYK-JAVA-ORGHIBERNATE-569100",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable org.hibernate:hibernate-validator package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/lib-webapp"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "org.hibernate:hibernate-validator@5.4.3.Final"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.hibernate:hibernate-validator@6.0.23.Final"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/lib-webapp"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.hibernate:hibernate-validator@6.0.23.Final"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Snyk Container",
          "properties": {
            "artifactsScanned": 69
          },
          "rules": [
            {
              "id": "SNYK-JAVA-IONETTY-6483812",
              "shortDescription": {
                "text": "Medium severity - Allocation of Resources Without Limits or Throttling vulnerability in io.netty:netty-codec-http"
              },
              "fullDescription": {
                "text": "(CVE-2024-29025) io.netty:netty-codec-http@4.1.107.Final"
              },
              "help": {
                "text": "",
                "markdown": "## Overview\n[io.netty:netty-codec-http](https://mvnrepository.com/artifact/io.netty/netty-codec-http) is a network application framework for rapid development of maintainable high performance protocol servers & clients.\n\nAffected versions of this package are vulnerable to Allocation of Resources Without Limits or Throttling due to the accumulation of data in the `HttpPostRequestDecoder`. The decoder cumulates bytes in the `undecodedChunk` buffer until it can decode a field, allowing for data to accumulate without limits.\n\nAn attacker can cause a denial of service by sending a chunked post consisting of many small fields that will be accumulated in the `bodyListHttpData` list.\n## Remediation\nUpgrade `io.netty:netty-codec-http` to version 4.1.108.Final or higher.\n## References\n- [GitHub Commit](https://github.com/netty/netty/commit/0d0c6ed782d13d423586ad0c71737b2c7d02058c)\n- [GitHub Gist](https://gist.github.com/vietj/f558b8ea81ec6505f1e9a6ca283c9ae3)\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "properties": {
                "tags": [
                  "security",
                  "CWE-770",
                  "maven"
                ],
                "cvssv3_baseScore": 5.3,
                "security-severity": "5.3"
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "SNYK-JAVA-IONETTY-6483812",
          "level": "warning",
          "message": {
            "text": "This file introduces a vulnerable io.netty:netty-codec-http package with a medium severity vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/apache-storm-2.6.2/lib-worker"
                },
                "region": {
                  "startLine": 1
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "io.netty:netty-codec-http@4.1.107.Final"
                }
              ]
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "Upgrade to org.apache.storm:storm-shaded-deps@2.6.2"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "/apache-storm-2.6.2/lib-worker"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "startLine": 1
                      },
                      "insertedContent": {
                        "text": "org.apache.storm:storm-shaded-deps@2.6.2"
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "name": "Snyk Container",
          "properties": {
            "artifactsScanned": 0
          },
          "rules": []
        }
      },
      "results": []
    }
  ]
}
