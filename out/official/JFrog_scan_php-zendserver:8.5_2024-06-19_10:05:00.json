{
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "informationUri": "https://docs.jfrog-applications.jfrog.io/jfrog-security-features/sca",
          "name": "JFrog Xray SCA",
          "rules": [
            {
              "id": "CVE-2018-10000_ubuntu:xenial:multiarch-support_2.23-0ubuntu11.3",
              "shortDescription": {
                "text": "[CVE-2018-10000] ubuntu:xenial:multiarch-support 2.23-0ubuntu11.3"
              },
              "help": {
                "text": "libc does not account for all the possible return values from the kernel getcwd(2) syscall; arbitrary code execution may result from applications making further assumptions on the return value from the getcwd(3) libary function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__be96a3f634de79f523f07c7e4e0216c28af45eb5776e7a6238a2392f71e01069.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2015-4844_ubuntu:xenial:libicu48_4.8.1.1-12+deb7u2",
              "shortDescription": {
                "text": "[CVE-2015-4844] ubuntu:xenial:libicu48 4.8.1.1-12+deb7u2"
              },
              "help": {
                "text": "Unspecified vulnerability in Oracle Java SE 6u101, 7u85, and 8u60, and Java SE Embedded 8u51, allows remote attackers to affect confidentiality, integrity, and availability via unknown vectors related to 2D.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__ef7b6a4491cea5750befa11916e9d6ff6c527fef3e29aec0787ffbd569b2326b.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2020-10531_ubuntu:xenial:libicu48_4.8.1.1-12+deb7u2",
              "shortDescription": {
                "text": "[CVE-2020-10531] ubuntu:xenial:libicu48 4.8.1.1-12+deb7u2"
              },
              "help": {
                "text": "An issue was discovered in International Components for Unicode (ICU) for C/C++ through 66.1. An integer overflow, leading to a heap-based buffer overflow, exists in the UnicodeString::doAppend() function in common/unistr.cpp.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.8      | Not Covered       | `sha256__ef7b6a4491cea5750befa11916e9d6ff6c527fef3e29aec0787ffbd569b2326b.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "8.8"
              }
            },
            {
              "id": "CVE-2017-7868_ubuntu:xenial:libicu48_4.8.1.1-12+deb7u2",
              "shortDescription": {
                "text": "[CVE-2017-7868] ubuntu:xenial:libicu48 4.8.1.1-12+deb7u2"
              },
              "help": {
                "text": "International Components for Unicode (ICU) for C/C++ before 2017-02-13 has an out-of-bounds write caused by a heap-based buffer overflow related to the utf8TextAccess function in common/utext.cpp and the utext_moveIndex32* function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__ef7b6a4491cea5750befa11916e9d6ff6c527fef3e29aec0787ffbd569b2326b.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2016-6293_ubuntu:xenial:libicu48_4.8.1.1-12+deb7u2",
              "shortDescription": {
                "text": "[CVE-2016-6293] ubuntu:xenial:libicu48 4.8.1.1-12+deb7u2"
              },
              "help": {
                "text": "The uloc_acceptLanguageFromHTTP function in common/uloc.cpp in International Components for Unicode (ICU) through 57.1 for C/C++ does not ensure that there is a '\\0' character at the end of a certain temporary array, which allows remote attackers to cause a denial of service (out-of-bounds read) or possibly have unspecified other impact via a call with a long httpAcceptLanguage argument.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__ef7b6a4491cea5750befa11916e9d6ff6c527fef3e29aec0787ffbd569b2326b.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2017-7867_ubuntu:xenial:libicu48_4.8.1.1-12+deb7u2",
              "shortDescription": {
                "text": "[CVE-2017-7867] ubuntu:xenial:libicu48 4.8.1.1-12+deb7u2"
              },
              "help": {
                "text": "International Components for Unicode (ICU) for C/C++ before 2017-02-13 has an out-of-bounds write caused by a heap-based buffer overflow related to the utf8TextAccess function in common/utext.cpp and the utext_setNativeIndex* function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__ef7b6a4491cea5750befa11916e9d6ff6c527fef3e29aec0787ffbd569b2326b.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2018-10000_ubuntu:xenial:libc-bin_2.23-0ubuntu11.3",
              "shortDescription": {
                "text": "[CVE-2018-10000] ubuntu:xenial:libc-bin 2.23-0ubuntu11.3"
              },
              "help": {
                "text": "libc does not account for all the possible return values from the kernel getcwd(2) syscall; arbitrary code execution may result from applications making further assumptions on the return value from the getcwd(3) libary function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__be96a3f634de79f523f07c7e4e0216c28af45eb5776e7a6238a2392f71e01069.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2018-10000_ubuntu:xenial:libc6_2.23-0ubuntu11.3",
              "shortDescription": {
                "text": "[CVE-2018-10000] ubuntu:xenial:libc6 2.23-0ubuntu11.3"
              },
              "help": {
                "text": "libc does not account for all the possible return values from the kernel getcwd(2) syscall; arbitrary code execution may result from applications making further assumptions on the return value from the getcwd(3) libary function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__be96a3f634de79f523f07c7e4e0216c28af45eb5776e7a6238a2392f71e01069.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2017-14952_ubuntu:xenial:libicu48_4.8.1.1-12+deb7u2",
              "shortDescription": {
                "text": "[CVE-2017-14952] ubuntu:xenial:libicu48 4.8.1.1-12+deb7u2"
              },
              "help": {
                "text": "Double free in i18n/zonemeta.cpp in International Components for Unicode (ICU) for C/C++ through 59.1 allows remote attackers to execute arbitrary code via a crafted string, aka a \"redundant UVector entry clean up function call\" issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__ef7b6a4491cea5750befa11916e9d6ff6c527fef3e29aec0787ffbd569b2326b.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2016-0494_ubuntu:xenial:libicu48_4.8.1.1-12+deb7u2",
              "shortDescription": {
                "text": "[CVE-2016-0494] ubuntu:xenial:libicu48 4.8.1.1-12+deb7u2"
              },
              "help": {
                "text": "Unspecified vulnerability in the Java SE and Java SE Embedded components in Oracle Java SE 6u105, 7u91, and 8u66 and Java SE Embedded 8u65 allows remote attackers to affect confidentiality, integrity, and availability via unknown vectors related to 2D.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__ef7b6a4491cea5750befa11916e9d6ff6c527fef3e29aec0787ffbd569b2326b.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2017-15422_ubuntu:xenial:libicu48_4.8.1.1-12+deb7u2",
              "shortDescription": {
                "text": "[CVE-2017-15422] ubuntu:xenial:libicu48 4.8.1.1-12+deb7u2"
              },
              "help": {
                "text": "Integer overflow in international date handling in International Components for Unicode (ICU) for C/C++ before 60.1, as used in V8 in Google Chrome prior to 63.0.3239.84 and other products, allowed a remote attacker to perform an out of bounds memory read via a crafted HTML page.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__ef7b6a4491cea5750befa11916e9d6ff6c527fef3e29aec0787ffbd569b2326b.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2016-7415_ubuntu:xenial:libicu48_4.8.1.1-12+deb7u2",
              "shortDescription": {
                "text": "[CVE-2016-7415] ubuntu:xenial:libicu48 4.8.1.1-12+deb7u2"
              },
              "help": {
                "text": "Stack-based buffer overflow in the Locale class in common/locid.cpp in International Components for Unicode (ICU) through 57.1 for C/C++ allows remote attackers to cause a denial of service (application crash) or possibly have unspecified other impact via a long locale string.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__ef7b6a4491cea5750befa11916e9d6ff6c527fef3e29aec0787ffbd569b2326b.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-51651_aws/aws-sdk-php_2.8.31",
              "shortDescription": {
                "text": "[CVE-2023-51651] aws/aws-sdk-php 2.8.31"
              },
              "help": {
                "text": "AWS SDK for PHP is the Amazon Web Services software development kit for PHP. Within the scope of requests to S3 object keys and/or prefixes containing a Unix double-dot, a URI path traversal is possible. The issue exists in the `buildEndpoint` method in the RestSerializer component of the AWS SDK for PHP v3 prior to 3.288.1. The `buildEndpoint` method relies on the Guzzle Psr7 UriResolver utility, which strips dot segments from the request path in accordance with RFC 3986. Under certain conditions, this could lead to an arbitrary object being accessed. This issue has been patched in version 3.288.1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.3      | Not Covered       | `sha256__8ddcdaf6483ab6a3e53562bc4f32b525dbddf345bdc28cef9de179c38c13616d.tar `       | [3.288.1]   |"
              },
              "properties": {
                "security-severity": "3.3"
              }
            }
          ],
          "version": "3.96.1"
        }
      },
      "results": [
        {
          "ruleId": "CVE-2018-10000_ubuntu:xenial:multiarch-support_2.23-0ubuntu11.3",
          "ruleIndex": 0,
          "level": "warning",
          "message": {
            "text": "[CVE-2018-10000] sha256__be96a3f634de79f523f07c7e4e0216c28af45eb5776e7a6238a2392f71e01069.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2015-4844_ubuntu:xenial:libicu48_4.8.1.1-12+deb7u2",
          "ruleIndex": 1,
          "level": "warning",
          "message": {
            "text": "[CVE-2015-4844] sha256__ef7b6a4491cea5750befa11916e9d6ff6c527fef3e29aec0787ffbd569b2326b.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-10531_ubuntu:xenial:libicu48_4.8.1.1-12+deb7u2",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-10531] sha256__ef7b6a4491cea5750befa11916e9d6ff6c527fef3e29aec0787ffbd569b2326b.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2017-7868_ubuntu:xenial:libicu48_4.8.1.1-12+deb7u2",
          "ruleIndex": 3,
          "level": "warning",
          "message": {
            "text": "[CVE-2017-7868] sha256__ef7b6a4491cea5750befa11916e9d6ff6c527fef3e29aec0787ffbd569b2326b.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2016-6293_ubuntu:xenial:libicu48_4.8.1.1-12+deb7u2",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "[CVE-2016-6293] sha256__ef7b6a4491cea5750befa11916e9d6ff6c527fef3e29aec0787ffbd569b2326b.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2017-7867_ubuntu:xenial:libicu48_4.8.1.1-12+deb7u2",
          "ruleIndex": 5,
          "level": "warning",
          "message": {
            "text": "[CVE-2017-7867] sha256__ef7b6a4491cea5750befa11916e9d6ff6c527fef3e29aec0787ffbd569b2326b.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-10000_ubuntu:xenial:libc-bin_2.23-0ubuntu11.3",
          "ruleIndex": 6,
          "level": "warning",
          "message": {
            "text": "[CVE-2018-10000] sha256__be96a3f634de79f523f07c7e4e0216c28af45eb5776e7a6238a2392f71e01069.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-10000_ubuntu:xenial:libc6_2.23-0ubuntu11.3",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "[CVE-2018-10000] sha256__be96a3f634de79f523f07c7e4e0216c28af45eb5776e7a6238a2392f71e01069.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2017-14952_ubuntu:xenial:libicu48_4.8.1.1-12+deb7u2",
          "ruleIndex": 8,
          "level": "warning",
          "message": {
            "text": "[CVE-2017-14952] sha256__ef7b6a4491cea5750befa11916e9d6ff6c527fef3e29aec0787ffbd569b2326b.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2016-0494_ubuntu:xenial:libicu48_4.8.1.1-12+deb7u2",
          "ruleIndex": 9,
          "level": "warning",
          "message": {
            "text": "[CVE-2016-0494] sha256__ef7b6a4491cea5750befa11916e9d6ff6c527fef3e29aec0787ffbd569b2326b.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2017-15422_ubuntu:xenial:libicu48_4.8.1.1-12+deb7u2",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "[CVE-2017-15422] sha256__ef7b6a4491cea5750befa11916e9d6ff6c527fef3e29aec0787ffbd569b2326b.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2016-7415_ubuntu:xenial:libicu48_4.8.1.1-12+deb7u2",
          "ruleIndex": 11,
          "level": "warning",
          "message": {
            "text": "[CVE-2016-7415] sha256__ef7b6a4491cea5750befa11916e9d6ff6c527fef3e29aec0787ffbd569b2326b.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-51651_aws/aws-sdk-php_2.8.31",
          "ruleIndex": 12,
          "level": "note",
          "message": {
            "text": "[CVE-2023-51651] sha256__8ddcdaf6483ab6a3e53562bc4f32b525dbddf345bdc28cef9de179c38c13616d.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://jfrog.com/help/r/jfrog-security-documentation/jfrog-advanced-security",
          "name": "JFrog Applicability Scanner",
          "rules": [
            {
              "id": "applic_CVE-2015-4844",
              "name": "CVE-2015-4844",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2015-4844"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2017-15422",
              "name": "CVE-2017-15422",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2017-15422"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-10531",
              "name": "CVE-2020-10531",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-10531"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2016-7415",
              "name": "CVE-2016-7415",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2016-7415"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2016-0494",
              "name": "CVE-2016-0494",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2016-0494"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2017-14952",
              "name": "CVE-2017-14952",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2017-14952"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-51651",
              "name": "CVE-2023-51651",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-51651"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2017-7868",
              "name": "CVE-2017-7868",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2017-7868"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2018-10000",
              "name": "CVE-2018-10000",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2018-10000"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2017-7867",
              "name": "CVE-2017-7867",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2017-7867"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2016-6293",
              "name": "CVE-2016-6293",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2016-6293"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            }
          ],
          "version": "1.0"
        }
      },
      "invocations": [
        {
          "arguments": [
            "/root/.jfrog/dependencies/analyzerManager/jas_scanner/jas_scanner",
            "scan",
            "/tmp/jfrog.cli.temp.-1718791620-3941849643/config.yaml"
          ],
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "/tmp/jfrog.cli.temp.-1718791500-334521788/image.tar"
          }
        }
      ],
      "results": []
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://jfrog.com/help/r/jfrog-security-documentation/jfrog-advanced-security",
          "name": "JFrog Secrets scanner",
          "rules": [
            {
              "id": "REQ.SECRET.GENERIC.TEXT",
              "name": "REQ.SECRET.GENERIC.TEXT",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.TEXT"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "REQ.SECRET.GENERIC.CODE",
              "name": "REQ.SECRET.GENERIC.CODE",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.CODE"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "REQ.SECRET.GENERIC.URL",
              "name": "REQ.SECRET.GENERIC.URL",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.URL"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive"
              }
            },
            {
              "id": "REQ.SECRET.KEYS",
              "name": "REQ.SECRET.KEYS",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.KEYS"
              },
              "fullDescription": {
                "text": "\nStoring an API key in the image could lead to several risks.\n\nIf the key is associated with a wide scope of privileges, attackers could extract it from a single image or firmware and use it maliciously to attack many targets. For example, if the embedded key allows querying/modifying data for all cloud user accounts, without per-user authentication, the attackers who extract it would gain access to system-wide data.\n\nIf the cloud/SaaS provider bills by key usage - for example, every million queries cost the key's owner a fixed sum of money - attackers could use the keys for their own purposes (or just as a form of vandalism), incurring a large cost to the legitimate user or operator.\n\n## Best practices\n\nUse narrow scopes for stored API keys. As much as possible, API keys should be unique per host and require additional authentication with the user's individual credentials for any sensitive actions.\n\nAvoid placing keys whose use incurs costs directly in the image. Store the key with any software or hardware protection available on the host for key storage (such as operating system key-stores, hardware cryptographic storage mechanisms or cloud-managed secure storage services such as [AWS KMS](https://aws.amazon.com/kms/)).\n\nTokens that were detected as exposed should be revoked and replaced -\n\n* [AWS Key Revocation](https://aws.amazon.com/premiumsupport/knowledge-center/delete-access-key/#:~:text=If%20you%20see%20a%20warning,the%20confirmation%20box%2C%20choose%20Deactivate.)\n* [GCP Key Revocation](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/CloudIAM/delete-api-keys.html)\n* [Azure Key Revocation](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops\u0026tabs=Windows#revoke-a-pat)\n* [GitHub Key Revocation](https://docs.github.com/en/rest/apps/oauth-applications#delete-an-app-authorization)\n",
                "markdown": "\nStoring an API key in the image could lead to several risks.\n\nIf the key is associated with a wide scope of privileges, attackers could extract it from a single image or firmware and use it maliciously to attack many targets. For example, if the embedded key allows querying/modifying data for all cloud user accounts, without per-user authentication, the attackers who extract it would gain access to system-wide data.\n\nIf the cloud/SaaS provider bills by key usage - for example, every million queries cost the key's owner a fixed sum of money - attackers could use the keys for their own purposes (or just as a form of vandalism), incurring a large cost to the legitimate user or operator.\n\n## Best practices\n\nUse narrow scopes for stored API keys. As much as possible, API keys should be unique per host and require additional authentication with the user's individual credentials for any sensitive actions.\n\nAvoid placing keys whose use incurs costs directly in the image. Store the key with any software or hardware protection available on the host for key storage (such as operating system key-stores, hardware cryptographic storage mechanisms or cloud-managed secure storage services such as [AWS KMS](https://aws.amazon.com/kms/)).\n\nTokens that were detected as exposed should be revoked and replaced -\n\n* [AWS Key Revocation](https://aws.amazon.com/premiumsupport/knowledge-center/delete-access-key/#:~:text=If%20you%20see%20a%20warning,the%20confirmation%20box%2C%20choose%20Deactivate.)\n* [GCP Key Revocation](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/CloudIAM/delete-api-keys.html)\n* [Azure Key Revocation](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops\u0026tabs=Windows#revoke-a-pat)\n* [GitHub Key Revocation](https://docs.github.com/en/rest/apps/oauth-applications#delete-an-app-authorization)\n"
              },
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private"
              }
            }
          ],
          "version": "1.0"
        }
      },
      "invocations": [
        {
          "arguments": [
            "/root/.jfrog/dependencies/analyzerManager/jas_scanner/jas_scanner",
            "scan",
            "/tmp/jfrog.cli.temp.-1718791620-3941849643/config.yaml"
          ],
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "/tmp/jfrog.cli.temp.-1718791500-334521788/image.tar"
          }
        }
      ],
      "results": [
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp2zi4lrl9/unpacked/filesystem/blobs/sha256/513ed7b8cb626435a0c10f51c07b1631f83e70f06549e79357644c19c6d30670/usr/local/zend/var/libraries/Symfony_2.3/2.3.42/src/Symfony/Bundle/SecurityBundle/Tests/DependencyInjection/Fixtures/xml/container1.xml"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 33,
                  "endLine": 37,
                  "endColumn": 33,
                  "snippet": {
                    "text": "pas************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp2zi4lrl9/unpacked/filesystem/blobs/sha256/513ed7b8cb626435a0c10f51c07b1631f83e70f06549e79357644c19c6d30670/usr/local/zend/var/libraries/Symfony_2.3/2.3.42/src/Symfony/Bundle/SecurityBundle/Tests/DependencyInjection/Fixtures/xml/container1.xml"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 33,
                  "endLine": 38,
                  "endColumn": 33,
                  "snippet": {
                    "text": "pas************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp2zi4lrl9/unpacked/filesystem/blobs/sha256/513ed7b8cb626435a0c10f51c07b1631f83e70f06549e79357644c19c6d30670/usr/local/zend/var/libraries/Symfony_2.3/2.3.42/src/Symfony/Bundle/SecurityBundle/Tests/DependencyInjection/Fixtures/yml/container1.yml"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 27,
                  "endLine": 35,
                  "endColumn": 27,
                  "snippet": {
                    "text": "pas************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp2zi4lrl9/unpacked/filesystem/blobs/sha256/513ed7b8cb626435a0c10f51c07b1631f83e70f06549e79357644c19c6d30670/usr/local/zend/var/libraries/Symfony_2.3/2.3.42/src/Symfony/Bundle/SecurityBundle/Tests/DependencyInjection/Fixtures/yml/container1.yml"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 27,
                  "endLine": 36,
                  "endColumn": 27,
                  "snippet": {
                    "text": "pas************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.CODE",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp2zi4lrl9/unpacked/filesystem/blobs/sha256/513ed7b8cb626435a0c10f51c07b1631f83e70f06549e79357644c19c6d30670/usr/local/zend/var/libraries/Symfony_2.3/2.3.42/src/Symfony/Bundle/SecurityBundle/Tests/DependencyInjection/Fixtures/php/container1.php"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 36,
                  "endLine": 48,
                  "endColumn": 36,
                  "snippet": {
                    "text": "pas************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.CODE",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp2zi4lrl9/unpacked/filesystem/blobs/sha256/513ed7b8cb626435a0c10f51c07b1631f83e70f06549e79357644c19c6d30670/usr/local/zend/var/libraries/Symfony_2.3/2.3.42/src/Symfony/Bundle/SecurityBundle/Tests/DependencyInjection/Fixtures/php/container1.php"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 36,
                  "endLine": 49,
                  "endColumn": 36,
                  "snippet": {
                    "text": "pas************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.CODE",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp2zi4lrl9/unpacked/filesystem/blobs/sha256/513ed7b8cb626435a0c10f51c07b1631f83e70f06549e79357644c19c6d30670/usr/local/zend/var/libraries/Symfony_2.3/2.3.42/src/Symfony/Component/Form/Forms.php"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 4,
                  "endLine": 142,
                  "endColumn": 4,
                  "snippet": {
                    "text": "sec************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.CODE",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp2zi4lrl9/unpacked/filesystem/blobs/sha256/513ed7b8cb626435a0c10f51c07b1631f83e70f06549e79357644c19c6d30670/usr/local/zend/var/libraries/Symfony_2.3/2.3.42/src/Symfony/Component/Form/Forms.php"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 4,
                  "endLine": 67,
                  "endColumn": 4,
                  "snippet": {
                    "text": "sec************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.CODE",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp2zi4lrl9/unpacked/filesystem/blobs/sha256/513ed7b8cb626435a0c10f51c07b1631f83e70f06549e79357644c19c6d30670/usr/local/zend/var/libraries/Symfony_2.3/2.3.42/src/Symfony/Component/Form/Forms.php"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 4,
                  "endLine": 84,
                  "endColumn": 4,
                  "snippet": {
                    "text": "sec************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.CODE",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp2zi4lrl9/unpacked/filesystem/blobs/sha256/513ed7b8cb626435a0c10f51c07b1631f83e70f06549e79357644c19c6d30670/usr/local/zend/var/libraries/Zend_Framework_1/1.12.20/externals/dojo/dojox/image/FlickrBadge.js"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 1,
                  "endLine": 34,
                  "endColumn": 1,
                  "snippet": {
                    "text": "api************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.CODE",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp2zi4lrl9/unpacked/filesystem/blobs/sha256/513ed7b8cb626435a0c10f51c07b1631f83e70f06549e79357644c19c6d30670/usr/local/zend/var/libraries/Zend_Framework_1/1.12.20/externals/dojo/dojox/io/OAuth.js"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 43,
                  "endLine": 276,
                  "endColumn": 43,
                  "snippet": {
                    "text": "sec************"
                  }
                }
              }
            }
          ]
        }
      ]
    }
  ]
}
