{
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "fullName": "Docker Scout",
          "informationUri": "https://docker.com/products/docker-scout",
          "name": "docker scout",
          "rules": [
            {
              "id": "CVE-2023-45288",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-45288: Uncontrolled Resource Consumption"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-45288?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.23.0",
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.\n",
                "markdown": "> An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.\n\n|                |                                              |\n|----------------|----------------------------------------------|\n| Package        | pkg:golang/golang.org/x/net@0.7.0            |\n| Affected range | <0.23.0                                      |\n| Fixed version  | 0.23.0                                       |\n| CVSS Score     |                                          5.3 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L |\n"
              },
              "properties": {
                "affected_version": "<1.21.9",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "1.21.9",
                "purls": [
                  "pkg:golang/golang.org/x/net@0.7.0",
                  "pkg:golang/stdlib@1.20.4"
                ],
                "security-severity": "3.1",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "CVE-2023-45289",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-45289"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-45289?s=golang&n=stdlib&t=golang&vr=%3C1.21.8",
              "help": {
                "text": "When following an HTTP redirect to a domain which is not a subdomain match or exact match of the initial domain, an http.Client does not forward sensitive headers such as \"Authorization\" or \"Cookie\". For example, a redirect from foo.com to www.foo.com will forward the Authorization header, but a redirect to bar.com will not.\n\nA maliciously crafted HTTP redirect could cause sensitive headers to be unexpectedly forwarded.\n",
                "markdown": "> When following an HTTP redirect to a domain which is not a subdomain match or exact match of the initial domain, an http.Client does not forward sensitive headers such as \"Authorization\" or \"Cookie\". For example, a redirect from foo.com to www.foo.com will forward the Authorization header, but a redirect to bar.com will not.\n\nA maliciously crafted HTTP redirect could cause sensitive headers to be unexpectedly forwarded.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.20.4 |\n| Affected range | <1.21.8                  |\n| Fixed version  | 1.21.8                   |\n"
              },
              "properties": {
                "affected_version": "<1.21.8",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "1.21.8",
                "purls": [
                  "pkg:golang/stdlib@1.20.4"
                ],
                "security-severity": "3.1",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "CVE-2023-45290",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-45290"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-45290?s=golang&n=stdlib&t=golang&vr=%3C1.21.8",
              "help": {
                "text": "When parsing a multipart form (either explicitly with Request.ParseMultipartForm or implicitly with Request.FormValue, Request.PostFormValue, or Request.FormFile), limits on the total size of the parsed form were not applied to the memory consumed while reading a single form line. This permits a maliciously crafted input containing very long lines to cause allocation of arbitrarily large amounts of memory, potentially leading to memory exhaustion.\n\nWith fix, the ParseMultipartForm function now correctly limits the maximum size of form lines.\n",
                "markdown": "> When parsing a multipart form (either explicitly with Request.ParseMultipartForm or implicitly with Request.FormValue, Request.PostFormValue, or Request.FormFile), limits on the total size of the parsed form were not applied to the memory consumed while reading a single form line. This permits a maliciously crafted input containing very long lines to cause allocation of arbitrarily large amounts of memory, potentially leading to memory exhaustion.\n\nWith fix, the ParseMultipartForm function now correctly limits the maximum size of form lines.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.20.4 |\n| Affected range | <1.21.8                  |\n| Fixed version  | 1.21.8                   |\n"
              },
              "properties": {
                "affected_version": "<1.21.8",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "1.21.8",
                "purls": [
                  "pkg:golang/stdlib@1.20.4"
                ],
                "security-severity": "3.1",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "CVE-2024-24783",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2024-24783"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2024-24783?s=golang&n=stdlib&t=golang&vr=%3C1.21.8",
              "help": {
                "text": "Verifying a certificate chain which contains a certificate with an unknown public key algorithm will cause Certificate.Verify to panic.\n\nThis affects all crypto/tls clients, and servers that set Config.ClientAuth to VerifyClientCertIfGiven or RequireAndVerifyClientCert. The default behavior is for TLS servers to not verify client certificates.\n",
                "markdown": "> Verifying a certificate chain which contains a certificate with an unknown public key algorithm will cause Certificate.Verify to panic.\n\nThis affects all crypto/tls clients, and servers that set Config.ClientAuth to VerifyClientCertIfGiven or RequireAndVerifyClientCert. The default behavior is for TLS servers to not verify client certificates.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.20.4 |\n| Affected range | <1.21.8                  |\n| Fixed version  | 1.21.8                   |\n"
              },
              "properties": {
                "affected_version": "<1.21.8",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "1.21.8",
                "purls": [
                  "pkg:golang/stdlib@1.20.4"
                ],
                "security-severity": "3.1",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "CVE-2024-24784",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2024-24784"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2024-24784?s=golang&n=stdlib&t=golang&vr=%3C1.21.8",
              "help": {
                "text": "The ParseAddressList function incorrectly handles comments (text within parentheses) within display names. Since this is a misalignment with conforming address parsers, it can result in different trust decisions being made by programs using different parsers.\n",
                "markdown": "> The ParseAddressList function incorrectly handles comments (text within parentheses) within display names. Since this is a misalignment with conforming address parsers, it can result in different trust decisions being made by programs using different parsers.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.20.4 |\n| Affected range | <1.21.8                  |\n| Fixed version  | 1.21.8                   |\n"
              },
              "properties": {
                "affected_version": "<1.21.8",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "1.21.8",
                "purls": [
                  "pkg:golang/stdlib@1.20.4"
                ],
                "security-severity": "3.1",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "CVE-2024-24785",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2024-24785"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2024-24785?s=golang&n=stdlib&t=golang&vr=%3C1.21.8",
              "help": {
                "text": "If errors returned from MarshalJSON methods contain user controlled data, they may be used to break the contextual auto-escaping behavior of the html/template package, allowing for subsequent actions to inject unexpected content into templates.\n",
                "markdown": "> If errors returned from MarshalJSON methods contain user controlled data, they may be used to break the contextual auto-escaping behavior of the html/template package, allowing for subsequent actions to inject unexpected content into templates.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.20.4 |\n| Affected range | <1.21.8                  |\n| Fixed version  | 1.21.8                   |\n"
              },
              "properties": {
                "affected_version": "<1.21.8",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "1.21.8",
                "purls": [
                  "pkg:golang/stdlib@1.20.4"
                ],
                "security-severity": "3.1",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "CVE-2024-24789",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2024-24789"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2024-24789?s=golang&n=stdlib&t=golang&vr=%3C1.21.11",
              "help": {
                "text": "The archive/zip package's handling of certain types of invalid zip files differs from the behavior of most zip implementations. This misalignment could be exploited to create an zip file with contents that vary depending on the implementation reading the file. The archive/zip package now rejects files containing these errors.\n",
                "markdown": "> The archive/zip package's handling of certain types of invalid zip files differs from the behavior of most zip implementations. This misalignment could be exploited to create an zip file with contents that vary depending on the implementation reading the file. The archive/zip package now rejects files containing these errors.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.20.4 |\n| Affected range | <1.21.11                 |\n| Fixed version  | 1.21.11                  |\n"
              },
              "properties": {
                "affected_version": "<1.21.11",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "1.21.11",
                "purls": [
                  "pkg:golang/stdlib@1.20.4"
                ],
                "security-severity": "3.1",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "CVE-2024-24790",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2024-24790"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2024-24790?s=golang&n=stdlib&t=golang&vr=%3C1.21.11",
              "help": {
                "text": "The various Is methods (IsPrivate, IsLoopback, etc) did not work as expected for IPv4-mapped IPv6 addresses, returning false for addresses which would return true in their traditional IPv4 forms.\n",
                "markdown": "> The various Is methods (IsPrivate, IsLoopback, etc) did not work as expected for IPv4-mapped IPv6 addresses, returning false for addresses which would return true in their traditional IPv4 forms.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.20.4 |\n| Affected range | <1.21.11                 |\n| Fixed version  | 1.21.11                  |\n"
              },
              "properties": {
                "affected_version": "<1.21.11",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "1.21.11",
                "purls": [
                  "pkg:golang/stdlib@1.20.4"
                ],
                "security-severity": "3.1",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "GMS-2022-176",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "GMS-2022-176: OWASP Top Ten 2017 Category A9 - Using Components with Known Vulnerabilities"
              },
              "helpUri": "https://scout.docker.com/v/GMS-2022-176?s=gitlab&n=coredns&ns=github.com%2Fcoredns&t=golang&vr=%3Cv1.6.6",
              "help": {
                "text": "### Impact\n\nCoreDNS before 1.6.6 (using go DNS package < 1.1.25) improperly generates random numbers because math/rand is used. The TXID becomes predictable, leading to response forgeries.\n\n### Patches\nThe problem has been fixed in 1.6.6+.\n\n### References\n- [CVE-2019-19794](https://nvd.nist.gov/vuln/detail/CVE-2019-19794)\n\n### For more information\nPlease consult [our security guide](https://github.com/coredns/coredns/blob/master/.github/SECURITY.md) for more information regarding our security process.\n\n",
                "markdown": "> ### Impact\n\nCoreDNS before 1.6.6 (using go DNS package < 1.1.25) improperly generates random numbers because math/rand is used. The TXID becomes predictable, leading to response forgeries.\n\n### Patches\nThe problem has been fixed in 1.6.6+.\n\n### References\n- [CVE-2019-19794](https://nvd.nist.gov/vuln/detail/CVE-2019-19794)\n\n### For more information\nPlease consult [our security guide](https://github.com/coredns/coredns/blob/master/.github/SECURITY.md) for more information regarding our security process.\n\n\n|                |                                             |\n|----------------|---------------------------------------------|\n| Package        | pkg:golang/github.com/coredns/coredns@1.1.2 |\n| Affected range | <v1.6.6                                     |\n| Fixed version  | v1.6.6                                      |\n"
              },
              "properties": {
                "affected_version": "<v1.6.6",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "v1.6.6",
                "purls": [
                  "pkg:golang/github.com/coredns/coredns@1.1.2"
                ],
                "security-severity": "3.1",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "GMS-2023-3788",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "GMS-2023-3788: OWASP Top Ten 2017 Category A9 - Using Components with Known Vulnerabilities"
              },
              "helpUri": "https://scout.docker.com/v/GMS-2023-3788?s=gitlab&n=grpc&ns=google.golang.org&t=golang&vr=%3C1.56.3",
              "help": {
                "text": "### Impact\nIn affected releases of gRPC-Go, it is possible for an attacker to send HTTP/2 requests, cancel them, and send subsequent requests, which is valid by the HTTP/2 protocol, but would cause the gRPC-Go server to launch more concurrent method handlers than the configured maximum stream limit.\n\n### Patches\nThis vulnerability was addressed by #6703 and has been included in patch releases: 1.56.3, 1.57.1, 1.58.3. It is also included in the latest release, 1.59.0.\n\nAlong with applying the patch, users should also ensure they are using the `grpc.MaxConcurrentStreams` server option to apply a limit to the server's resources used for any single connection.\n\n### Workarounds\nNone.\n\n### References\n#6703\n\n",
                "markdown": "> ### Impact\nIn affected releases of gRPC-Go, it is possible for an attacker to send HTTP/2 requests, cancel them, and send subsequent requests, which is valid by the HTTP/2 protocol, but would cause the gRPC-Go server to launch more concurrent method handlers than the configured maximum stream limit.\n\n### Patches\nThis vulnerability was addressed by #6703 and has been included in patch releases: 1.56.3, 1.57.1, 1.58.3. It is also included in the latest release, 1.59.0.\n\nAlong with applying the patch, users should also ensure they are using the `grpc.MaxConcurrentStreams` server option to apply a limit to the server's resources used for any single connection.\n\n### Workarounds\nNone.\n\n### References\n#6703\n\n\n|                |                                          |\n|----------------|------------------------------------------|\n| Package        | pkg:golang/google.golang.org/grpc@1.37.1 |\n| Affected range | <1.56.3                                  |\n| Fixed version  | 1.56.3, 1.57.1, 1.58.3                   |\n"
              },
              "properties": {
                "affected_version": "<1.56.3",
                "cvssV3_severity": "UNSPECIFIED",
                "fixed_version": "1.56.3, 1.57.1, 1.58.3",
                "purls": [
                  "pkg:golang/google.golang.org/grpc@1.37.1"
                ],
                "security-severity": "3.1",
                "tags": [
                  "UNSPECIFIED"
                ]
              }
            },
            {
              "id": "CVE-2020-8912",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-8912"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2020-8912?s=golang&n=aws-sdk-go&ns=github.com%2Faws&t=golang&vr=%3E%3D0",
              "help": {
                "text": "The Go AWS S3 Crypto SDK contains vulnerabilities that can permit an attacker with write access to a bucket to decrypt files in that bucket.\n\nFiles encrypted by the V1 EncryptionClient using either the AES-CBC content cipher or the KMS key wrap algorithm are vulnerable. Users should migrate to the V1 EncryptionClientV2 API, which will not create vulnerable files. Old files will remain vulnerable until re-encrypted with the new client.\n",
                "markdown": "> The Go AWS S3 Crypto SDK contains vulnerabilities that can permit an attacker with write access to a bucket to decrypt files in that bucket.\n\nFiles encrypted by the V1 EncryptionClient using either the AES-CBC content cipher or the KMS key wrap algorithm are vulnerable. Users should migrate to the V1 EncryptionClientV2 API, which will not create vulnerable files. Old files will remain vulnerable until re-encrypted with the new client.\n\n|                |                                              |\n|----------------|----------------------------------------------|\n| Package        | pkg:golang/github.com/aws/aws-sdk-go@1.42.34 |\n| Affected range | >=0                                          |\n| Fixed version  | not fixed                                    |\n"
              },
              "properties": {
                "affected_version": ">=0",
                "cvssV3_severity": "LOW",
                "fixed_version": "not fixed",
                "purls": [
                  "pkg:golang/github.com/aws/aws-sdk-go@1.42.34"
                ],
                "security-severity": "2.5",
                "tags": [
                  "LOW"
                ]
              }
            },
            {
              "id": "CVE-2024-24786",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2024-24786: Loop with Unreachable Exit Condition ('Infinite Loop')"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2024-24786?s=github&n=protobuf&ns=google.golang.org&t=golang&vr=%3C1.33.0",
              "help": {
                "text": "The protojson.Unmarshal function can enter an infinite loop when unmarshaling certain forms of invalid JSON. This condition can occur when unmarshaling into a message which contains a google.protobuf.Any value, or when the UnmarshalOptions.DiscardUnknown option is set.\n",
                "markdown": "> The protojson.Unmarshal function can enter an infinite loop when unmarshaling certain forms of invalid JSON. This condition can occur when unmarshaling into a message which contains a google.protobuf.Any value, or when the UnmarshalOptions.DiscardUnknown option is set.\n\n|                |                                              |\n|----------------|----------------------------------------------|\n| Package        | pkg:golang/google.golang.org/protobuf@1.27.1 |\n| Affected range | <1.33.0                                      |\n| Fixed version  | 1.33.0                                       |\n"
              },
              "properties": {
                "affected_version": "<1.33.0",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.33.0",
                "purls": [
                  "pkg:golang/google.golang.org/protobuf@1.27.1"
                ],
                "security-severity": "4.1",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "GHSA-gv9j-4w24-q7vx",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "GHSA-gv9j-4w24-q7vx: Use of Insufficiently Random Values"
              },
              "helpUri": "https://scout.docker.com/v/GHSA-gv9j-4w24-q7vx?s=github&n=coredns&ns=github.com%2Fcoredns&t=golang&vr=%3C1.6.6",
              "help": {
                "text": "### Impact\n\nCoreDNS before 1.6.6 (using go DNS package < 1.1.25) improperly generates random numbers because math/rand is used. The TXID becomes predictable, leading to response forgeries.\n\n### Patches\nThe problem has been fixed in 1.6.6+.\n\n### References\n- [CVE-2019-19794](https://nvd.nist.gov/vuln/detail/CVE-2019-19794)\n\n### For more information\nPlease consult [our security guide](https://github.com/coredns/coredns/blob/master/.github/SECURITY.md) for more information regarding our security process.\n\n",
                "markdown": "> ### Impact\n\nCoreDNS before 1.6.6 (using go DNS package < 1.1.25) improperly generates random numbers because math/rand is used. The TXID becomes predictable, leading to response forgeries.\n\n### Patches\nThe problem has been fixed in 1.6.6+.\n\n### References\n- [CVE-2019-19794](https://nvd.nist.gov/vuln/detail/CVE-2019-19794)\n\n### For more information\nPlease consult [our security guide](https://github.com/coredns/coredns/blob/master/.github/SECURITY.md) for more information regarding our security process.\n\n\n|                |                                             |\n|----------------|---------------------------------------------|\n| Package        | pkg:golang/github.com/coredns/coredns@1.1.2 |\n| Affected range | <1.6.6                                      |\n| Fixed version  | 1.6.6                                       |\n"
              },
              "properties": {
                "affected_version": "<1.6.6",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.6.6",
                "purls": [
                  "pkg:golang/github.com/coredns/coredns@1.1.2"
                ],
                "security-severity": "4.1",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2024-28180",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2024-28180: Improper Handling of Highly Compressed Data (Data Amplification)"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2024-28180?s=github&n=go-jose.v2&ns=gopkg.in%2Fsquare&t=golang&vr=%3C%3D2.6.0",
              "help": {
                "text": "### Impact\nAn attacker could send a JWE containing compressed data that used large amounts of memory and CPU when decompressed by Decrypt or DecryptMulti. Those functions now return an error if the decompressed data would exceed 250kB or 10x the compressed size (whichever is larger). Thanks to Enze Wang@Alioth and Jianjun Chen@Zhongguancun Lab (@zer0yu and @chenjj) for reporting.\n\n### Patches\nThe problem is fixed in the following packages and versions:\n- github.com/go-jose/go-jose/v4 version 4.0.1\n- github.com/go-jose/go-jose/v3 version 3.0.3\n- gopkg.in/go-jose/go-jose.v2 version 2.6.3\n\nThe problem will not be fixed in the following package because the package is archived:\n- gopkg.in/square/go-jose.v2\n",
                "markdown": "> ### Impact\nAn attacker could send a JWE containing compressed data that used large amounts of memory and CPU when decompressed by Decrypt or DecryptMulti. Those functions now return an error if the decompressed data would exceed 250kB or 10x the compressed size (whichever is larger). Thanks to Enze Wang@Alioth and Jianjun Chen@Zhongguancun Lab (@zer0yu and @chenjj) for reporting.\n\n### Patches\nThe problem is fixed in the following packages and versions:\n- github.com/go-jose/go-jose/v4 version 4.0.1\n- github.com/go-jose/go-jose/v3 version 3.0.3\n- gopkg.in/go-jose/go-jose.v2 version 2.6.3\n\nThe problem will not be fixed in the following package because the package is archived:\n- gopkg.in/square/go-jose.v2\n\n|                |                                              |\n|----------------|----------------------------------------------|\n| Package        | pkg:golang/gopkg.in/square/go-jose.v2@2.5.1  |\n| Affected range | <=2.6.0                                      |\n| Fixed version  | not fixed                                    |\n| CVSS Score     |                                          4.3 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:L |\n"
              },
              "properties": {
                "affected_version": "<=2.6.0",
                "cvssV3": 4.3,
                "cvssV3_severity": "MEDIUM",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:L",
                "fixed_version": "not fixed",
                "purls": [
                  "pkg:golang/gopkg.in/square/go-jose.v2@2.5.1"
                ],
                "security-severity": "4.3",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2022-2835",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-2835: Improper Restriction of Communication Channel to Intended Endpoints"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-2835?s=github&n=coredns&ns=github.com%2Fcoredns&t=golang&vr=%3C%3D1.9.3",
              "help": {
                "text": "A flaw was found in coreDNS. This flaw allows a malicious user to reroute internal calls to some internal services that were accessed by the FQDN in a format of <service>.<namespace>.svc.\n",
                "markdown": "> A flaw was found in coreDNS. This flaw allows a malicious user to reroute internal calls to some internal services that were accessed by the FQDN in a format of <service>.<namespace>.svc.\n\n|                |                                              |\n|----------------|----------------------------------------------|\n| Package        | pkg:golang/github.com/coredns/coredns@1.1.2  |\n| Affected range | <=1.9.3                                      |\n| Fixed version  | not fixed                                    |\n| CVSS Score     |                                          4.4 |\n| CVSS Vector    | CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N |\n"
              },
              "properties": {
                "affected_version": "<=1.9.3",
                "cvssV3": 4.4,
                "cvssV3_severity": "MEDIUM",
                "cvssV3_vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N",
                "fixed_version": "not fixed",
                "purls": [
                  "pkg:golang/github.com/coredns/coredns@1.1.2"
                ],
                "security-severity": "4.4",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2020-8565",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-8565: Insertion of Sensitive Information into Log File"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2020-8565?s=github&n=client-go&ns=k8s.io&t=golang&vr=%3E%3D0.18.0%2C%3C0.18.14",
              "help": {
                "text": "In Kubernetes, if the logging level is set to at least 9, authorization and bearer tokens will be written to log files. This can occur both in API server logs and client tool output like kubectl. This affects <= v1.19.5, <= v1.18.13, <= v1.17.15, < v1.20.0-alpha2.\n",
                "markdown": "> In Kubernetes, if the logging level is set to at least 9, authorization and bearer tokens will be written to log files. This can occur both in API server logs and client tool output like kubectl. This affects <= v1.19.5, <= v1.18.13, <= v1.17.15, < v1.20.0-alpha2.\n\n|                |                                              |\n|----------------|----------------------------------------------|\n| Package        | pkg:golang/k8s.io/client-go@0.18.2           |\n| Affected range | >=0.18.0,<0.18.14                            |\n| Fixed version  | 0.20.0-alpha.2                               |\n| CVSS Score     |                                          4.7 |\n| CVSS Vector    | CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:N/A:N |\n"
              },
              "properties": {
                "affected_version": ">=0.18.0,<0.18.14",
                "cvssV3": 4.7,
                "cvssV3_severity": "MEDIUM",
                "cvssV3_vector": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:N/A:N",
                "fixed_version": "0.20.0-alpha.2",
                "purls": [
                  "pkg:golang/k8s.io/client-go@0.18.2"
                ],
                "security-severity": "4.7",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2023-1297",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-1297: Premature Release of Resource During Expected Lifetime"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-1297?s=github&n=consul&ns=github.com%2Fhashicorp&t=golang&vr=%3C1.14.5",
              "help": {
                "text": "Consul and Consul Enterprise's cluster peering implementation contained a flaw whereby a peer cluster with service of the same name as a local service could corrupt Consul state, resulting in denial of service. This vulnerability was resolved in Consul 1.14.5, and 1.15.3\n",
                "markdown": "> Consul and Consul Enterprise's cluster peering implementation contained a flaw whereby a peer cluster with service of the same name as a local service could corrupt Consul state, resulting in denial of service. This vulnerability was resolved in Consul 1.14.5, and 1.15.3\n\n|                |                                               |\n|----------------|-----------------------------------------------|\n| Package        | pkg:golang/github.com/hashicorp/consul@1.13.9 |\n| Affected range | <1.14.5                                       |\n| Fixed version  | 1.14.5                                        |\n| CVSS Score     |                                           4.9 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:N/A:H  |\n"
              },
              "properties": {
                "affected_version": "<1.14.5",
                "cvssV3": 4.9,
                "cvssV3_severity": "MEDIUM",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:N/A:H",
                "fixed_version": "1.14.5",
                "purls": [
                  "pkg:golang/github.com/hashicorp/consul@1.13.9"
                ],
                "security-severity": "4.9",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2023-29409",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-29409"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-29409?s=golang&n=stdlib&t=golang&vr=%3E%3D1.20.0-0%2C%3C1.20.7",
              "help": {
                "text": "Extremely large RSA keys in certificate chains can cause a client/server to expend significant CPU time verifying signatures.\n\nWith fix, the size of RSA keys transmitted during handshakes is restricted to <= 8192 bits.\n\nBased on a survey of publicly trusted RSA keys, there are currently only three certificates in circulation with keys larger than this, and all three appear to be test certificates that are not actively deployed. It is possible there are larger keys in use in private PKIs, but we target the web PKI, so causing breakage here in the interests of increasing the default safety of users of crypto/tls seems reasonable.\n",
                "markdown": "> Extremely large RSA keys in certificate chains can cause a client/server to expend significant CPU time verifying signatures.\n\nWith fix, the size of RSA keys transmitted during handshakes is restricted to <= 8192 bits.\n\nBased on a survey of publicly trusted RSA keys, there are currently only three certificates in circulation with keys larger than this, and all three appear to be test certificates that are not actively deployed. It is possible there are larger keys in use in private PKIs, but we target the web PKI, so causing breakage here in the interests of increasing the default safety of users of crypto/tls seems reasonable.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.20.4 |\n| Affected range | >=1.20.0-0,<1.20.7       |\n| Fixed version  | 1.20.7                   |\n"
              },
              "properties": {
                "affected_version": ">=1.20.0-0,<1.20.7",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.20.7",
                "purls": [
                  "pkg:golang/stdlib@1.20.4"
                ],
                "security-severity": "5.3",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2023-39326",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-39326"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-39326?s=golang&n=stdlib&t=golang&vr=%3C1.20.12",
              "help": {
                "text": "A malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body.\n\nA malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request.\n\nChunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small.\n",
                "markdown": "> A malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body.\n\nA malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request.\n\nChunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.20.4 |\n| Affected range | <1.20.12                 |\n| Fixed version  | 1.20.12                  |\n"
              },
              "properties": {
                "affected_version": "<1.20.12",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.20.12",
                "purls": [
                  "pkg:golang/stdlib@1.20.4"
                ],
                "security-severity": "5.3",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2023-44487",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-44487: Uncontrolled Resource Consumption"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-44487?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.17.0",
              "help": {
                "text": "## HTTP/2 Rapid reset attack\nThe HTTP/2 protocol allows clients to indicate to the server that a previous stream should be canceled by sending a RST_STREAM frame. The protocol does not require the client and server to coordinate the cancellation in any way, the client may do it unilaterally. The client may also assume that the cancellation will take effect immediately when the server receives the RST_STREAM frame, before any other data from that TCP connection is processed.\n\nAbuse of this feature is called a Rapid Reset attack because it relies on the ability for an endpoint to send a RST_STREAM frame immediately after sending a request frame, which makes the other endpoint start working and then rapidly resets the request. The request is canceled, but leaves the HTTP/2 connection open. \n\nThe HTTP/2 Rapid Reset attack built on this capability is simple: The client opens a large number of streams at once as in the standard HTTP/2 attack, but rather than waiting for a response to each request stream from the server or proxy, the client cancels each request immediately.\n\nThe ability to reset streams immediately allows each connection to have an indefinite number of requests in flight. By explicitly canceling the requests, the attacker never exceeds the limit on the number of concurrent open streams. The number of in-flight requests is no longer dependent on the round-trip time (RTT), but only on the available network bandwidth.\n\nIn a typical HTTP/2 server implementation, the server will still have to do significant amounts of work for canceled requests, such as allocating new stream data structures, parsing the query and doing header decompression, and mapping the URL to a resource. For reverse proxy implementations, the request may be proxied to the backend server before the RST_STREAM frame is processed. The client on the other hand paid almost no costs for sending the requests. This creates an exploitable cost asymmetry between the server and the client.\n\nMultiple software artifacts implementing HTTP/2 are affected. This advisory was originally ingested from the `swift-nio-http2` repo advisory and their original conent follows.\n\n## swift-nio-http2 specific advisory\nswift-nio-http2 is vulnerable to a denial-of-service vulnerability in which a malicious client can create and then reset a large number of HTTP/2 streams in a short period of time. This causes swift-nio-http2 to commit to a large amount of expensive work which it then throws away, including creating entirely new `Channel`s to serve the traffic. This can easily overwhelm an `EventLoop` and prevent it from making forward progress.\n\nswift-nio-http2 1.28 contains a remediation for this issue that applies reset counter using a sliding window. This constrains the number of stream resets that may occur in a given window of time. Clients violating this limit will have their connections torn down. This allows clients to continue to cancel streams for legitimate reasons, while constraining malicious actors.\n",
                "markdown": "> ## HTTP/2 Rapid reset attack\nThe HTTP/2 protocol allows clients to indicate to the server that a previous stream should be canceled by sending a RST_STREAM frame. The protocol does not require the client and server to coordinate the cancellation in any way, the client may do it unilaterally. The client may also assume that the cancellation will take effect immediately when the server receives the RST_STREAM frame, before any other data from that TCP connection is processed.\n\nAbuse of this feature is called a Rapid Reset attack because it relies on the ability for an endpoint to send a RST_STREAM frame immediately after sending a request frame, which makes the other endpoint start working and then rapidly resets the request. The request is canceled, but leaves the HTTP/2 connection open. \n\nThe HTTP/2 Rapid Reset attack built on this capability is simple: The client opens a large number of streams at once as in the standard HTTP/2 attack, but rather than waiting for a response to each request stream from the server or proxy, the client cancels each request immediately.\n\nThe ability to reset streams immediately allows each connection to have an indefinite number of requests in flight. By explicitly canceling the requests, the attacker never exceeds the limit on the number of concurrent open streams. The number of in-flight requests is no longer dependent on the round-trip time (RTT), but only on the available network bandwidth.\n\nIn a typical HTTP/2 server implementation, the server will still have to do significant amounts of work for canceled requests, such as allocating new stream data structures, parsing the query and doing header decompression, and mapping the URL to a resource. For reverse proxy implementations, the request may be proxied to the backend server before the RST_STREAM frame is processed. The client on the other hand paid almost no costs for sending the requests. This creates an exploitable cost asymmetry between the server and the client.\n\nMultiple software artifacts implementing HTTP/2 are affected. This advisory was originally ingested from the `swift-nio-http2` repo advisory and their original conent follows.\n\n## swift-nio-http2 specific advisory\nswift-nio-http2 is vulnerable to a denial-of-service vulnerability in which a malicious client can create and then reset a large number of HTTP/2 streams in a short period of time. This causes swift-nio-http2 to commit to a large amount of expensive work which it then throws away, including creating entirely new `Channel`s to serve the traffic. This can easily overwhelm an `EventLoop` and prevent it from making forward progress.\n\nswift-nio-http2 1.28 contains a remediation for this issue that applies reset counter using a sliding window. This constrains the number of stream resets that may occur in a given window of time. Clients violating this limit will have their connections torn down. This allows clients to continue to cancel streams for legitimate reasons, while constraining malicious actors.\n\n|                |                                              |\n|----------------|----------------------------------------------|\n| Package        | pkg:golang/golang.org/x/net@0.7.0            |\n| Affected range | <0.17.0                                      |\n| Fixed version  | 0.17.0                                       |\n| CVSS Score     |                                          5.3 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L |\n"
              },
              "properties": {
                "affected_version": "<1.56.3",
                "cvssV3": 5.3,
                "cvssV3_severity": "MEDIUM",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
                "fixed_version": "1.56.3",
                "purls": [
                  "pkg:golang/golang.org/x/net@0.7.0",
                  "pkg:golang/google.golang.org/grpc@1.37.1"
                ],
                "security-severity": "5.3",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2023-45284",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-45284"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-45284?s=golang&n=stdlib&t=golang&vr=%3C1.20.11",
              "help": {
                "text": "On Windows, The IsLocal function does not correctly detect reserved device names in some cases.\n\nReserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local.\n\nWith fix, IsLocal now correctly reports these names as non-local.\n",
                "markdown": "> On Windows, The IsLocal function does not correctly detect reserved device names in some cases.\n\nReserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local.\n\nWith fix, IsLocal now correctly reports these names as non-local.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.20.4 |\n| Affected range | <1.20.11                 |\n| Fixed version  | 1.20.11                  |\n"
              },
              "properties": {
                "affected_version": "<1.20.11",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.20.11",
                "purls": [
                  "pkg:golang/stdlib@1.20.4"
                ],
                "security-severity": "5.3",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2024-0874",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2024-0874: Use of Cache Containing Sensitive Information"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2024-0874?s=github&n=coredns&ns=github.com%2Fcoredns&t=golang&vr=%3C%3D1.11.1",
              "help": {
                "text": "A flaw was found in coredns. This issue could lead to invalid cache entries returning due to incorrectly implemented caching.\n",
                "markdown": "> A flaw was found in coredns. This issue could lead to invalid cache entries returning due to incorrectly implemented caching.\n\n|                |                                              |\n|----------------|----------------------------------------------|\n| Package        | pkg:golang/github.com/coredns/coredns@1.1.2  |\n| Affected range | <=1.11.1                                     |\n| Fixed version  | 1.11.2                                       |\n| CVSS Score     |                                          5.3 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N |\n"
              },
              "properties": {
                "affected_version": "<=1.11.1",
                "cvssV3": 5.3,
                "cvssV3_severity": "MEDIUM",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
                "fixed_version": "1.11.2",
                "purls": [
                  "pkg:golang/github.com/coredns/coredns@1.1.2"
                ],
                "security-severity": "5.3",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2020-8911",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-8911"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2020-8911?s=golang&n=aws-sdk-go&ns=github.com%2Faws&t=golang&vr=%3E%3D0",
              "help": {
                "text": "The Go AWS S3 Crypto SDK contains vulnerabilities that can permit an attacker with write access to a bucket to decrypt files in that bucket.\n\nFiles encrypted by the V1 EncryptionClient using either the AES-CBC content cipher or the KMS key wrap algorithm are vulnerable. Users should migrate to the V1 EncryptionClientV2 API, which will not create vulnerable files. Old files will remain vulnerable until re-encrypted with the new client.\n",
                "markdown": "> The Go AWS S3 Crypto SDK contains vulnerabilities that can permit an attacker with write access to a bucket to decrypt files in that bucket.\n\nFiles encrypted by the V1 EncryptionClient using either the AES-CBC content cipher or the KMS key wrap algorithm are vulnerable. Users should migrate to the V1 EncryptionClientV2 API, which will not create vulnerable files. Old files will remain vulnerable until re-encrypted with the new client.\n\n|                |                                              |\n|----------------|----------------------------------------------|\n| Package        | pkg:golang/github.com/aws/aws-sdk-go@1.42.34 |\n| Affected range | >=0                                          |\n| Fixed version  | not fixed                                    |\n"
              },
              "properties": {
                "affected_version": ">=0",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "not fixed",
                "purls": [
                  "pkg:golang/github.com/aws/aws-sdk-go@1.42.34"
                ],
                "security-severity": "5.6",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2022-2837",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-2837: URL Redirection to Untrusted Site ('Open Redirect')"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-2837?s=github&n=coredns&ns=github.com%2Fcoredns&t=golang&vr=%3C%3D1.9.3",
              "help": {
                "text": "A flaw was found in coreDNS. This flaw allows a malicious user to redirect traffic intended for external top-level domains (TLD) to a pod they control by creating projects and namespaces that match the TLD.\n",
                "markdown": "> A flaw was found in coreDNS. This flaw allows a malicious user to redirect traffic intended for external top-level domains (TLD) to a pod they control by creating projects and namespaces that match the TLD.\n\n|                |                                              |\n|----------------|----------------------------------------------|\n| Package        | pkg:golang/github.com/coredns/coredns@1.1.2  |\n| Affected range | <=1.9.3                                      |\n| Fixed version  | not fixed                                    |\n| CVSS Score     |                                          6.1 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N |\n"
              },
              "properties": {
                "affected_version": "<=1.9.3",
                "cvssV3": 6.1,
                "cvssV3_severity": "MEDIUM",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
                "fixed_version": "not fixed",
                "purls": [
                  "pkg:golang/github.com/coredns/coredns@1.1.2"
                ],
                "security-severity": "6.1",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2023-39318",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-39318"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-39318?s=golang&n=stdlib&t=golang&vr=%3C1.20.8",
              "help": {
                "text": "The html/template package does not properly handle HTML-like \"\" comment tokens, nor hashbang \"#!\" comment tokens, in <script> contexts. This may cause the template parser to improperly interpret the contents of <script> contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack.\n",
                "markdown": "> The html/template package does not properly handle HTML-like \"\" comment tokens, nor hashbang \"#!\" comment tokens, in <script> contexts. This may cause the template parser to improperly interpret the contents of <script> contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.20.4 |\n| Affected range | <1.20.8                  |\n| Fixed version  | 1.20.8                   |\n"
              },
              "properties": {
                "affected_version": "<1.20.8",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.20.8",
                "purls": [
                  "pkg:golang/stdlib@1.20.4"
                ],
                "security-severity": "6.1",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2023-39319",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-39319"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-39319?s=golang&n=stdlib&t=golang&vr=%3C1.20.8",
              "help": {
                "text": "The html/template package does not apply the proper rules for handling occurrences of \"<script\", \"<!--\", and \"</script\" within JS literals in <script> contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack.\n",
                "markdown": "> The html/template package does not apply the proper rules for handling occurrences of \"<script\", \"<!--\", and \"</script\" within JS literals in <script> contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.20.4 |\n| Affected range | <1.20.8                  |\n| Fixed version  | 1.20.8                   |\n"
              },
              "properties": {
                "affected_version": "<1.20.8",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.20.8",
                "purls": [
                  "pkg:golang/stdlib@1.20.4"
                ],
                "security-severity": "6.1",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2023-3978",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-3978: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-3978?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.13.0",
              "help": {
                "text": "Text nodes not in the HTML namespace are incorrectly literally rendered, causing text which should be escaped to not be. This could lead to an XSS attack. \n",
                "markdown": "> Text nodes not in the HTML namespace are incorrectly literally rendered, causing text which should be escaped to not be. This could lead to an XSS attack. \n\n|                |                                              |\n|----------------|----------------------------------------------|\n| Package        | pkg:golang/golang.org/x/net@0.7.0            |\n| Affected range | <0.13.0                                      |\n| Fixed version  | 0.13.0                                       |\n| CVSS Score     |                                          6.1 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N |\n"
              },
              "properties": {
                "affected_version": "<0.13.0",
                "cvssV3": 6.1,
                "cvssV3_severity": "MEDIUM",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
                "fixed_version": "0.13.0",
                "purls": [
                  "pkg:golang/golang.org/x/net@0.7.0"
                ],
                "security-severity": "6.1",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2023-0845",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-0845: OWASP Top Ten 2017 Category A9 - Using Components with Known Vulnerabilities"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-0845?s=gitlab&n=consul&ns=github.com%2Fhashicorp&t=golang&vr=%3C1.14.5",
              "help": {
                "text": "Consul and Consul Enterprise allowed an authenticated user with service:write permissions to trigger a workflow that causes Consul server and client agents to crash under certain circumstances. This vulnerability was fixed in Consul 1.14.5.\n",
                "markdown": "> Consul and Consul Enterprise allowed an authenticated user with service:write permissions to trigger a workflow that causes Consul server and client agents to crash under certain circumstances. This vulnerability was fixed in Consul 1.14.5.\n\n|                |                                               |\n|----------------|-----------------------------------------------|\n| Package        | pkg:golang/github.com/hashicorp/consul@1.13.9 |\n| Affected range | <1.14.5                                       |\n| Fixed version  | 1.14.5                                        |\n| CVSS Score     |                                           6.5 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H  |\n"
              },
              "properties": {
                "affected_version": "<1.14.5",
                "cvssV3": 6.5,
                "cvssV3_severity": "MEDIUM",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
                "fixed_version": "1.14.5",
                "purls": [
                  "pkg:golang/github.com/hashicorp/consul@1.13.9"
                ],
                "security-severity": "6.5",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2023-29406",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-29406"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-29406?s=golang&n=stdlib&t=golang&vr=%3E%3D1.20.0-0%2C%3C1.20.6",
              "help": {
                "text": "The HTTP/1 client does not fully validate the contents of the Host header. A maliciously crafted Host header can inject additional headers or entire requests.\n\nWith fix, the HTTP/1 client now refuses to send requests containing an invalid Request.Host or Request.URL.Host value.\n",
                "markdown": "> The HTTP/1 client does not fully validate the contents of the Host header. A maliciously crafted Host header can inject additional headers or entire requests.\n\nWith fix, the HTTP/1 client now refuses to send requests containing an invalid Request.Host or Request.URL.Host value.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.20.4 |\n| Affected range | >=1.20.0-0,<1.20.6       |\n| Fixed version  | 1.20.6                   |\n"
              },
              "properties": {
                "affected_version": ">=1.20.0-0,<1.20.6",
                "cvssV3_severity": "MEDIUM",
                "fixed_version": "1.20.6",
                "purls": [
                  "pkg:golang/stdlib@1.20.4"
                ],
                "security-severity": "6.5",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2020-8559",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2020-8559: URL Redirection to Untrusted Site ('Open Redirect')"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2020-8559?s=github&n=apimachinery&ns=k8s.io&t=golang&vr=%3E%3D0.18.0%2C%3C0.18.7",
              "help": {
                "text": "The Kubernetes kube-apiserver in versions v1.6-v1.15, and versions prior to v1.16.13, v1.17.9 and v1.18.7 are vulnerable to an unvalidated redirect on proxied upgrade requests that could allow an attacker to escalate privileges from a node compromise to a full cluster compromise.\n",
                "markdown": "> The Kubernetes kube-apiserver in versions v1.6-v1.15, and versions prior to v1.16.13, v1.17.9 and v1.18.7 are vulnerable to an unvalidated redirect on proxied upgrade requests that could allow an attacker to escalate privileges from a node compromise to a full cluster compromise.\n\n|                |                                              |\n|----------------|----------------------------------------------|\n| Package        | pkg:golang/k8s.io/apimachinery@0.18.2        |\n| Affected range | >=0.18.0,<0.18.7                             |\n| Fixed version  | 0.18.7                                       |\n| CVSS Score     |                                          6.8 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:U/C:H/I:H/A:H |\n"
              },
              "properties": {
                "affected_version": ">=0.18.0,<0.18.7",
                "cvssV3": 6.8,
                "cvssV3_severity": "MEDIUM",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:U/C:H/I:H/A:H",
                "fixed_version": "0.18.7",
                "purls": [
                  "pkg:golang/k8s.io/apimachinery@0.18.2"
                ],
                "security-severity": "6.8",
                "tags": [
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2021-43565",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2021-43565"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2021-43565?s=github&n=crypto&ns=golang.org%2Fx&t=golang&vr=%3C0.0.0-20211202192323-5770296d904e",
              "help": {
                "text": "The x/crypto/ssh package before 0.0.0-20211202192323-5770296d904e of golang.org/x/crypto allows an unauthenticated attacker to panic an SSH server. When using AES-GCM or ChaCha20Poly1305, consuming a malformed packet which contains an empty plaintext causes a panic.\n",
                "markdown": "> The x/crypto/ssh package before 0.0.0-20211202192323-5770296d904e of golang.org/x/crypto allows an unauthenticated attacker to panic an SSH server. When using AES-GCM or ChaCha20Poly1305, consuming a malformed packet which contains an empty plaintext causes a panic.\n\n|                |                                                                  |\n|----------------|------------------------------------------------------------------|\n| Package        | pkg:golang/golang.org/x/crypto@0.0.0-20210513164829-c07d793c2f9a |\n| Affected range | <0.0.0-20211202192323-5770296d904e                               |\n| Fixed version  | 0.0.0-20211202192323-5770296d904e                                |\n| CVSS Score     |                                                              7.5 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H                     |\n"
              },
              "properties": {
                "affected_version": "<0.0.0-20211202192323-5770296d904e",
                "cvssV3": 7.5,
                "cvssV3_severity": "HIGH",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                "fixed_version": "0.0.0-20211202192323-5770296d904e",
                "purls": [
                  "pkg:golang/golang.org/x/crypto@0.0.0-20210513164829-c07d793c2f9a"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-21698",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-21698: Uncontrolled Resource Consumption"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-21698?s=github&n=client_golang&ns=github.com%2Fprometheus&t=golang&vr=%3C1.11.1",
              "help": {
                "text": "This is the Go client library for Prometheus. It has two separate parts, one for instrumenting application code, and one for creating clients that talk to the Prometheus HTTP API. client_golang is the instrumentation library for Go applications in Prometheus, and the promhttp package in client_golang provides tooling around HTTP servers and clients.\n\n### Impact\n\nHTTP server susceptible to a Denial of Service through unbounded cardinality, and potential memory exhaustion, when handling requests with non-standard HTTP methods.\n\n###  Affected Configuration\n\nIn order to be affected, an instrumented software must\n\n* Use any of `promhttp.InstrumentHandler*` middleware except `RequestsInFlight`.\n* Do not filter any specific methods (e.g GET) before middleware.\n* Pass metric with `method` label name to our middleware.\n* Not have any firewall/LB/proxy that filters away requests with unknown `method`.\n\n### Patches\n\n* https://github.com/prometheus/client_golang/pull/962\n* https://github.com/prometheus/client_golang/pull/987\n\n### Workarounds\n\nIf you cannot upgrade to [v1.11.1 or above](https://github.com/prometheus/client_golang/releases/tag/v1.11.1), in order to stop being affected you can:\n\n* Remove `method` label name from counter/gauge you use in the InstrumentHandler.\n* Turn off affected promhttp handlers.\n* Add custom middleware before promhttp handler that will sanitize the request method given by Go http.Request.\n* Use a reverse proxy or web application firewall, configured to only allow a limited set of methods.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in https://github.com/prometheus/client_golang\n* Email us at `prometheus-team@googlegroups.com`\n\n",
                "markdown": "> This is the Go client library for Prometheus. It has two separate parts, one for instrumenting application code, and one for creating clients that talk to the Prometheus HTTP API. client_golang is the instrumentation library for Go applications in Prometheus, and the promhttp package in client_golang provides tooling around HTTP servers and clients.\n\n### Impact\n\nHTTP server susceptible to a Denial of Service through unbounded cardinality, and potential memory exhaustion, when handling requests with non-standard HTTP methods.\n\n###  Affected Configuration\n\nIn order to be affected, an instrumented software must\n\n* Use any of `promhttp.InstrumentHandler*` middleware except `RequestsInFlight`.\n* Do not filter any specific methods (e.g GET) before middleware.\n* Pass metric with `method` label name to our middleware.\n* Not have any firewall/LB/proxy that filters away requests with unknown `method`.\n\n### Patches\n\n* https://github.com/prometheus/client_golang/pull/962\n* https://github.com/prometheus/client_golang/pull/987\n\n### Workarounds\n\nIf you cannot upgrade to [v1.11.1 or above](https://github.com/prometheus/client_golang/releases/tag/v1.11.1), in order to stop being affected you can:\n\n* Remove `method` label name from counter/gauge you use in the InstrumentHandler.\n* Turn off affected promhttp handlers.\n* Add custom middleware before promhttp handler that will sanitize the request method given by Go http.Request.\n* Use a reverse proxy or web application firewall, configured to only allow a limited set of methods.\n\n### For more information\n\nIf you have any questions or comments about this advisory:\n\n* Open an issue in https://github.com/prometheus/client_golang\n* Email us at `prometheus-team@googlegroups.com`\n\n\n|                |                                                      |\n|----------------|------------------------------------------------------|\n| Package        | pkg:golang/github.com/prometheus/client_golang@1.4.0 |\n| Affected range | <1.11.1                                              |\n| Fixed version  | 1.11.1                                               |\n| CVSS Score     |                                                  7.5 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H         |\n"
              },
              "properties": {
                "affected_version": "<1.11.1",
                "cvssV3": 7.5,
                "cvssV3_severity": "HIGH",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                "fixed_version": "1.11.1",
                "purls": [
                  "pkg:golang/github.com/prometheus/client_golang@1.4.0"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-27191",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-27191: Use of a Broken or Risky Cryptographic Algorithm"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-27191?s=github&n=crypto&ns=golang.org%2Fx&t=golang&vr=%3C0.0.0-20220314234659-1baeb1ce4c0b",
              "help": {
                "text": "The golang.org/x/crypto/ssh package before 0.0.0-20220314234659-1baeb1ce4c0b for Go allows an attacker to crash a server in certain circumstances involving AddHostKey.\n",
                "markdown": "> The golang.org/x/crypto/ssh package before 0.0.0-20220314234659-1baeb1ce4c0b for Go allows an attacker to crash a server in certain circumstances involving AddHostKey.\n\n|                |                                                                  |\n|----------------|------------------------------------------------------------------|\n| Package        | pkg:golang/golang.org/x/crypto@0.0.0-20210513164829-c07d793c2f9a |\n| Affected range | <0.0.0-20220314234659-1baeb1ce4c0b                               |\n| Fixed version  | 0.0.0-20220314234659-1baeb1ce4c0b                                |\n| CVSS Score     |                                                              7.5 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H                     |\n"
              },
              "properties": {
                "affected_version": "<0.0.0-20220314234659-1baeb1ce4c0b",
                "cvssV3": 7.5,
                "cvssV3_severity": "HIGH",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                "fixed_version": "0.0.0-20220314234659-1baeb1ce4c0b",
                "purls": [
                  "pkg:golang/golang.org/x/crypto@0.0.0-20210513164829-c07d793c2f9a"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-28948",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-28948: OWASP Top Ten 2017 Category A9 - Using Components with Known Vulnerabilities"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-28948?s=gitlab&n=yaml.v3&ns=gopkg.in&t=golang&vr=%3Dv3.0.0",
              "help": {
                "text": "An issue in the Unmarshal function in Go-Yaml v3 causes the program to crash when attempting to deserialize invalid input.\n",
                "markdown": "> An issue in the Unmarshal function in Go-Yaml v3 causes the program to crash when attempting to deserialize invalid input.\n\n|                |                                              |\n|----------------|----------------------------------------------|\n| Package        | pkg:golang/gopkg.in/yaml.v3@3.0.0            |\n| Affected range | =v3.0.0                                      |\n| Fixed version  | not fixed                                    |\n| CVSS Score     |                                          7.5 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H |\n"
              },
              "properties": {
                "affected_version": "=v3.0.0",
                "cvssV3": 7.5,
                "cvssV3_severity": "HIGH",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                "fixed_version": "not fixed",
                "purls": [
                  "pkg:golang/gopkg.in/yaml.v3@3.0.0"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2022-3920",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2022-3920: Missing Authorization"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2022-3920?s=github&n=consul&ns=github.com%2Fhashicorp&t=golang&vr=%3E%3D1.13.0%2C%3C1.14.0",
              "help": {
                "text": "HashiCorp Consul and Consul Enterprise 1.13.0 up to 1.13.3 do not filter cluster filtering's imported nodes and services for HTTP or RPC endpoints used by the UI. Fixed in 1.14.0.\n",
                "markdown": "> HashiCorp Consul and Consul Enterprise 1.13.0 up to 1.13.3 do not filter cluster filtering's imported nodes and services for HTTP or RPC endpoints used by the UI. Fixed in 1.14.0.\n\n|                |                                               |\n|----------------|-----------------------------------------------|\n| Package        | pkg:golang/github.com/hashicorp/consul@1.13.9 |\n| Affected range | >=1.13.0,<1.14.0                              |\n| Fixed version  | 1.14.0                                        |\n| CVSS Score     |                                           7.5 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N  |\n"
              },
              "properties": {
                "affected_version": ">=1.13.0,<1.14.0",
                "cvssV3": 7.5,
                "cvssV3_severity": "HIGH",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
                "fixed_version": "1.14.0",
                "purls": [
                  "pkg:golang/github.com/hashicorp/consul@1.13.9"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2023-39325",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-39325: Uncontrolled Resource Consumption"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-39325?s=github&n=net&ns=golang.org%2Fx&t=golang&vr=%3C0.17.0",
              "help": {
                "text": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing. \n\nWith the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection. \n\nThis issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2.\n\nThe default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.\n",
                "markdown": "> A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing. \n\nWith the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection. \n\nThis issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2.\n\nThe default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.\n\n|                |                                              |\n|----------------|----------------------------------------------|\n| Package        | pkg:golang/golang.org/x/net@0.7.0            |\n| Affected range | <0.17.0                                      |\n| Fixed version  | 0.17.0                                       |\n| CVSS Score     |                                          7.5 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H |\n"
              },
              "properties": {
                "affected_version": "<1.20.10",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.20.10",
                "purls": [
                  "pkg:golang/golang.org/x/net@0.7.0",
                  "pkg:golang/stdlib@1.20.4"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2023-45283",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-45283"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-45283?s=golang&n=stdlib&t=golang&vr=%3C1.20.11",
              "help": {
                "text": "The filepath package does not recognize paths with a \\??\\ prefix as special.\n\nOn Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x.\n\nBefore fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b.\n\nSimilarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b.\n\nIn addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name.\n\nUPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored.\n",
                "markdown": "> The filepath package does not recognize paths with a \\??\\ prefix as special.\n\nOn Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x.\n\nBefore fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b.\n\nSimilarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b.\n\nIn addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name.\n\nUPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.20.4 |\n| Affected range | <1.20.11                 |\n| Fixed version  | 1.20.11                  |\n"
              },
              "properties": {
                "affected_version": "<1.20.11",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.20.11",
                "purls": [
                  "pkg:golang/stdlib@1.20.4"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "GHSA-m425-mq94-257g",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "GHSA-m425-mq94-257g"
              },
              "helpUri": "https://scout.docker.com/v/GHSA-m425-mq94-257g?s=github&n=grpc&ns=google.golang.org&t=golang&vr=%3C1.56.3",
              "help": {
                "text": "### Impact\nIn affected releases of gRPC-Go, it is possible for an attacker to send HTTP/2 requests, cancel them, and send subsequent requests, which is valid by the HTTP/2 protocol, but would cause the gRPC-Go server to launch more concurrent method handlers than the configured maximum stream limit.\n\n### Patches\nThis vulnerability was addressed by #6703 and has been included in patch releases: 1.56.3, 1.57.1, 1.58.3.  It is also included in the latest release, 1.59.0.\n\nAlong with applying the patch, users should also ensure they are using the `grpc.MaxConcurrentStreams` server option to apply a limit to the server's resources used for any single connection.\n\n### Workarounds\nNone.\n\n### References\n#6703\n\n",
                "markdown": "> ### Impact\nIn affected releases of gRPC-Go, it is possible for an attacker to send HTTP/2 requests, cancel them, and send subsequent requests, which is valid by the HTTP/2 protocol, but would cause the gRPC-Go server to launch more concurrent method handlers than the configured maximum stream limit.\n\n### Patches\nThis vulnerability was addressed by #6703 and has been included in patch releases: 1.56.3, 1.57.1, 1.58.3.  It is also included in the latest release, 1.59.0.\n\nAlong with applying the patch, users should also ensure they are using the `grpc.MaxConcurrentStreams` server option to apply a limit to the server's resources used for any single connection.\n\n### Workarounds\nNone.\n\n### References\n#6703\n\n\n|                |                                              |\n|----------------|----------------------------------------------|\n| Package        | pkg:golang/google.golang.org/grpc@1.37.1     |\n| Affected range | <1.56.3                                      |\n| Fixed version  | 1.56.3                                       |\n| CVSS Score     |                                          7.5 |\n| CVSS Vector    | CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H |\n"
              },
              "properties": {
                "affected_version": "<1.56.3",
                "cvssV3": 7.5,
                "cvssV3_severity": "HIGH",
                "cvssV3_vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
                "fixed_version": "1.56.3",
                "purls": [
                  "pkg:golang/google.golang.org/grpc@1.37.1"
                ],
                "security-severity": "7.5",
                "tags": [
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2023-29403",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "CVE-2023-29403"
              },
              "helpUri": "https://scout.docker.com/v/CVE-2023-29403?s=golang&n=stdlib&t=golang&vr=%3E%3D1.20.0-0%2C%3C1.20.5",
              "help": {
                "text": "On Unix platforms, the Go runtime does not behave differently when a binary is run with the setuid/setgid bits. This can be dangerous in certain cases, such as when dumping memory state, or assuming the status of standard i/o file descriptors.\n\nIf a setuid/setgid binary is executed with standard I/O file descriptors closed, opening any files can result in unexpected content being read or written with elevated privileges. Similarly, if a setuid/setgid program is terminated, either via panic or signal, it may leak the contents of its registers.\n",
                "markdown": "> On Unix platforms, the Go runtime does not behave differently when a binary is run with the setuid/setgid bits. This can be dangerous in certain cases, such as when dumping memory state, or assuming the status of standard i/o file descriptors.\n\nIf a setuid/setgid binary is executed with standard I/O file descriptors closed, opening any files can result in unexpected content being read or written with elevated privileges. Similarly, if a setuid/setgid program is terminated, either via panic or signal, it may leak the contents of its registers.\n\n|                |                          |\n|----------------|--------------------------|\n| Package        | pkg:golang/stdlib@1.20.4 |\n| Affected range | >=1.20.0-0,<1.20.5       |\n| Fixed version  | 1.20.5                   |\n"
              },
              "properties": {
                "affected_version": ">=1.20.0-0,<1.20.5",
                "cvssV3_severity": "HIGH",
                "fixed_version": "1.20.5",
                "purls": [
                  "pkg:golang/stdlib@1.20.4"
                ],
                "security-severity": "7.8",
                "tags": [
                  "HIGH"
                ]
              }
            }
          ],
          "version": "1.9.3"
        }
      },
      "results": [
        {
          "ruleId": "CVE-2023-45288",
          "ruleIndex": 0,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability   : CVE-2023-45288            \n  Severity        : UNSPECIFIED               \n  Package         : pkg:golang/stdlib@1.20.4  \n  Affected range  : <1.21.9                   \n  Fixed version   : 1.21.9                    \n  EPSS Score      : 0.000440                  \n  EPSS Percentile : 0.131220                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45289",
          "ruleIndex": 1,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability   : CVE-2023-45289            \n  Severity        : UNSPECIFIED               \n  Package         : pkg:golang/stdlib@1.20.4  \n  Affected range  : <1.21.8                   \n  Fixed version   : 1.21.8                    \n  EPSS Score      : 0.000440                  \n  EPSS Percentile : 0.101880                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45290",
          "ruleIndex": 2,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability   : CVE-2023-45290            \n  Severity        : UNSPECIFIED               \n  Package         : pkg:golang/stdlib@1.20.4  \n  Affected range  : <1.21.8                   \n  Fixed version   : 1.21.8                    \n  EPSS Score      : 0.000440                  \n  EPSS Percentile : 0.101880                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24783",
          "ruleIndex": 3,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability   : CVE-2024-24783            \n  Severity        : UNSPECIFIED               \n  Package         : pkg:golang/stdlib@1.20.4  \n  Affected range  : <1.21.8                   \n  Fixed version   : 1.21.8                    \n  EPSS Score      : 0.000440                  \n  EPSS Percentile : 0.101880                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24784",
          "ruleIndex": 4,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability   : CVE-2024-24784            \n  Severity        : UNSPECIFIED               \n  Package         : pkg:golang/stdlib@1.20.4  \n  Affected range  : <1.21.8                   \n  Fixed version   : 1.21.8                    \n  EPSS Score      : 0.000440                  \n  EPSS Percentile : 0.101880                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24785",
          "ruleIndex": 5,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability   : CVE-2024-24785            \n  Severity        : UNSPECIFIED               \n  Package         : pkg:golang/stdlib@1.20.4  \n  Affected range  : <1.21.8                   \n  Fixed version   : 1.21.8                    \n  EPSS Score      : 0.000440                  \n  EPSS Percentile : 0.101880                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24789",
          "ruleIndex": 6,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability   : CVE-2024-24789            \n  Severity        : UNSPECIFIED               \n  Package         : pkg:golang/stdlib@1.20.4  \n  Affected range  : <1.21.11                  \n  Fixed version   : 1.21.11                   \n  EPSS Score      : 0.000450                  \n  EPSS Percentile : 0.153100                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24790",
          "ruleIndex": 7,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability   : CVE-2024-24790            \n  Severity        : UNSPECIFIED               \n  Package         : pkg:golang/stdlib@1.20.4  \n  Affected range  : <1.21.11                  \n  Fixed version   : 1.21.11                   \n  EPSS Score      : 0.000450                  \n  EPSS Percentile : 0.153100                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "GMS-2022-176",
          "ruleIndex": 8,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability  : GMS-2022-176                                 \n  Severity       : UNSPECIFIED                                  \n  Package        : pkg:golang/github.com/coredns/coredns@1.1.2  \n  Affected range : <v1.6.6                                      \n  Fixed version  : v1.6.6                                       \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "GMS-2023-3788",
          "ruleIndex": 9,
          "kind": "fail",
          "level": "none",
          "message": {
            "text": "  Vulnerability  : GMS-2023-3788                             \n  Severity       : UNSPECIFIED                               \n  Package        : pkg:golang/google.golang.org/grpc@1.37.1  \n  Affected range : <1.56.3                                   \n  Fixed version  : 1.56.3, 1.57.1, 1.58.3                    \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-8912",
          "ruleIndex": 10,
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "  Vulnerability   : CVE-2020-8912                                 \n  Severity        : LOW                                           \n  Package         : pkg:golang/github.com/aws/aws-sdk-go@1.42.34  \n  Affected range  : >=0                                           \n  Fixed version   : not fixed                                     \n  EPSS Score      : 0.000440                                      \n  EPSS Percentile : 0.127230                                      \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24786",
          "ruleIndex": 11,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2024-24786                                \n  Severity        : MEDIUM                                        \n  Package         : pkg:golang/google.golang.org/protobuf@1.27.1  \n  Affected range  : <1.33.0                                       \n  Fixed version   : 1.33.0                                        \n  EPSS Score      : 0.000450                                      \n  EPSS Percentile : 0.153100                                      \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "GHSA-gv9j-4w24-q7vx",
          "ruleIndex": 12,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability  : GHSA-gv9j-4w24-q7vx                          \n  Severity       : MEDIUM                                       \n  Package        : pkg:golang/github.com/coredns/coredns@1.1.2  \n  Affected range : <1.6.6                                       \n  Fixed version  : 1.6.6                                        \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-28180",
          "ruleIndex": 13,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2024-28180                                \n  Severity        : MEDIUM                                        \n  Package         : pkg:golang/gopkg.in/square/go-jose.v2@2.5.1   \n  Affected range  : <=2.6.0                                       \n  Fixed version   : not fixed                                     \n  CVSS Score      : 4.3                                           \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:L  \n  EPSS Score      : 0.000450                                      \n  EPSS Percentile : 0.141130                                      \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2835",
          "ruleIndex": 14,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2022-2835                                 \n  Severity        : MEDIUM                                        \n  Package         : pkg:golang/github.com/coredns/coredns@1.1.2   \n  Affected range  : <=1.9.3                                       \n  Fixed version   : not fixed                                     \n  CVSS Score      : 4.4                                           \n  CVSS Vector     : CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N  \n  EPSS Score      : 0.000430                                      \n  EPSS Percentile : 0.088860                                      \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-8565",
          "ruleIndex": 15,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2020-8565                                 \n  Severity        : MEDIUM                                        \n  Package         : pkg:golang/k8s.io/client-go@0.18.2            \n  Affected range  : >=0.18.0,<0.18.14                             \n  Fixed version   : 0.20.0-alpha.2                                \n  CVSS Score      : 4.7                                           \n  CVSS Vector     : CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:N/A:N  \n  EPSS Score      : 0.000440                                      \n  EPSS Percentile : 0.124940                                      \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-1297",
          "ruleIndex": 16,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2023-1297                                  \n  Severity        : MEDIUM                                         \n  Package         : pkg:golang/github.com/hashicorp/consul@1.13.9  \n  Affected range  : <1.14.5                                        \n  Fixed version   : 1.14.5                                         \n  CVSS Score      : 4.9                                            \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:N/A:H   \n  EPSS Score      : 0.000780                                       \n  EPSS Percentile : 0.337690                                       \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29409",
          "ruleIndex": 17,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2023-29409            \n  Severity        : MEDIUM                    \n  Package         : pkg:golang/stdlib@1.20.4  \n  Affected range  : >=1.20.0-0,<1.20.7        \n  Fixed version   : 1.20.7                    \n  EPSS Score      : 0.000600                  \n  EPSS Percentile : 0.256100                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39326",
          "ruleIndex": 18,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2023-39326            \n  Severity        : MEDIUM                    \n  Package         : pkg:golang/stdlib@1.20.4  \n  Affected range  : <1.20.12                  \n  Fixed version   : 1.20.12                   \n  EPSS Score      : 0.000520                  \n  EPSS Percentile : 0.201740                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-44487",
          "ruleIndex": 19,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2023-44487                                \n  Severity        : MEDIUM                                        \n  Package         : pkg:golang/google.golang.org/grpc@1.37.1      \n  Affected range  : <1.56.3                                       \n  Fixed version   : 1.56.3                                        \n  CVSS Score      : 5.3                                           \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L  \n  EPSS Score      : 0.731850                                      \n  EPSS Percentile : 0.981060                                      \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-44487",
          "ruleIndex": 19,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2023-44487                                \n  Severity        : MEDIUM                                        \n  Package         : pkg:golang/golang.org/x/net@0.7.0             \n  Affected range  : <0.17.0                                       \n  Fixed version   : 0.17.0                                        \n  CVSS Score      : 5.3                                           \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L  \n  EPSS Score      : 0.731850                                      \n  EPSS Percentile : 0.981060                                      \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45284",
          "ruleIndex": 20,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2023-45284            \n  Severity        : MEDIUM                    \n  Package         : pkg:golang/stdlib@1.20.4  \n  Affected range  : <1.20.11                  \n  Fixed version   : 1.20.11                   \n  EPSS Score      : 0.000520                  \n  EPSS Percentile : 0.201740                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288",
          "ruleIndex": 0,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2023-45288                                \n  Severity        : MEDIUM                                        \n  Package         : pkg:golang/golang.org/x/net@0.7.0             \n  Affected range  : <0.23.0                                       \n  Fixed version   : 0.23.0                                        \n  CVSS Score      : 5.3                                           \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L  \n  EPSS Score      : 0.000440                                      \n  EPSS Percentile : 0.131220                                      \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-0874",
          "ruleIndex": 21,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2024-0874                                 \n  Severity        : MEDIUM                                        \n  Package         : pkg:golang/github.com/coredns/coredns@1.1.2   \n  Affected range  : <=1.11.1                                      \n  Fixed version   : 1.11.2                                        \n  CVSS Score      : 5.3                                           \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N  \n  EPSS Score      : 0.000450                                      \n  EPSS Percentile : 0.153100                                      \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-8911",
          "ruleIndex": 22,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2020-8911                                 \n  Severity        : MEDIUM                                        \n  Package         : pkg:golang/github.com/aws/aws-sdk-go@1.42.34  \n  Affected range  : >=0                                           \n  Fixed version   : not fixed                                     \n  EPSS Score      : 0.000510                                      \n  EPSS Percentile : 0.199500                                      \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2837",
          "ruleIndex": 23,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2022-2837                                 \n  Severity        : MEDIUM                                        \n  Package         : pkg:golang/github.com/coredns/coredns@1.1.2   \n  Affected range  : <=1.9.3                                       \n  Fixed version   : not fixed                                     \n  CVSS Score      : 6.1                                           \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N  \n  EPSS Score      : 0.000630                                      \n  EPSS Percentile : 0.269380                                      \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39318",
          "ruleIndex": 24,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2023-39318            \n  Severity        : MEDIUM                    \n  Package         : pkg:golang/stdlib@1.20.4  \n  Affected range  : <1.20.8                   \n  Fixed version   : 1.20.8                    \n  EPSS Score      : 0.000840                  \n  EPSS Percentile : 0.358210                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39319",
          "ruleIndex": 25,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2023-39319            \n  Severity        : MEDIUM                    \n  Package         : pkg:golang/stdlib@1.20.4  \n  Affected range  : <1.20.8                   \n  Fixed version   : 1.20.8                    \n  EPSS Score      : 0.000610                  \n  EPSS Percentile : 0.258600                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3978",
          "ruleIndex": 26,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2023-3978                                 \n  Severity        : MEDIUM                                        \n  Package         : pkg:golang/golang.org/x/net@0.7.0             \n  Affected range  : <0.13.0                                       \n  Fixed version   : 0.13.0                                        \n  CVSS Score      : 6.1                                           \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N  \n  EPSS Score      : 0.000520                                      \n  EPSS Percentile : 0.204290                                      \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0845",
          "ruleIndex": 27,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2023-0845                                  \n  Severity        : MEDIUM                                         \n  Package         : pkg:golang/github.com/hashicorp/consul@1.13.9  \n  Affected range  : <1.14.5                                        \n  Fixed version   : 1.14.5                                         \n  CVSS Score      : 6.5                                            \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H   \n  EPSS Score      : 0.001020                                       \n  EPSS Percentile : 0.418020                                       \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29406",
          "ruleIndex": 28,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2023-29406            \n  Severity        : MEDIUM                    \n  Package         : pkg:golang/stdlib@1.20.4  \n  Affected range  : >=1.20.0-0,<1.20.6        \n  Fixed version   : 1.20.6                    \n  EPSS Score      : 0.000910                  \n  EPSS Percentile : 0.387740                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-8559",
          "ruleIndex": 29,
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "  Vulnerability   : CVE-2020-8559                                 \n  Severity        : MEDIUM                                        \n  Package         : pkg:golang/k8s.io/apimachinery@0.18.2         \n  Affected range  : >=0.18.0,<0.18.7                              \n  Fixed version   : 0.18.7                                        \n  CVSS Score      : 6.8                                           \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:U/C:H/I:H/A:H  \n  EPSS Score      : 0.003410                                      \n  EPSS Percentile : 0.714690                                      \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-43565",
          "ruleIndex": 30,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2021-43565                                                    \n  Severity        : HIGH                                                              \n  Package         : pkg:golang/golang.org/x/crypto@0.0.0-20210513164829-c07d793c2f9a  \n  Affected range  : <0.0.0-20211202192323-5770296d904e                                \n  Fixed version   : 0.0.0-20211202192323-5770296d904e                                 \n  CVSS Score      : 7.5                                                               \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H                      \n  EPSS Score      : 0.000840                                                          \n  EPSS Percentile : 0.359040                                                          \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-21698",
          "ruleIndex": 31,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-21698                                        \n  Severity        : HIGH                                                  \n  Package         : pkg:golang/github.com/prometheus/client_golang@1.4.0  \n  Affected range  : <1.11.1                                               \n  Fixed version   : 1.11.1                                                \n  CVSS Score      : 7.5                                                   \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H          \n  EPSS Score      : 0.004730                                              \n  EPSS Percentile : 0.757050                                              \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27191",
          "ruleIndex": 32,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-27191                                                    \n  Severity        : HIGH                                                              \n  Package         : pkg:golang/golang.org/x/crypto@0.0.0-20210513164829-c07d793c2f9a  \n  Affected range  : <0.0.0-20220314234659-1baeb1ce4c0b                                \n  Fixed version   : 0.0.0-20220314234659-1baeb1ce4c0b                                 \n  CVSS Score      : 7.5                                                               \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H                      \n  EPSS Score      : 0.002530                                                          \n  EPSS Percentile : 0.651930                                                          \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-28948",
          "ruleIndex": 33,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-28948                                \n  Severity        : HIGH                                          \n  Package         : pkg:golang/gopkg.in/yaml.v3@3.0.0             \n  Affected range  : =v3.0.0                                       \n  Fixed version   : not fixed                                     \n  CVSS Score      : 7.5                                           \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H  \n  EPSS Score      : 0.000880                                      \n  EPSS Percentile : 0.378240                                      \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-3920",
          "ruleIndex": 34,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2022-3920                                  \n  Severity        : HIGH                                           \n  Package         : pkg:golang/github.com/hashicorp/consul@1.13.9  \n  Affected range  : >=1.13.0,<1.14.0                               \n  Fixed version   : 1.14.0                                         \n  CVSS Score      : 7.5                                            \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N   \n  EPSS Score      : 0.001790                                       \n  EPSS Percentile : 0.551010                                       \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39325",
          "ruleIndex": 35,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2023-39325            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.20.4  \n  Affected range  : <1.20.10                  \n  Fixed version   : 1.20.10                   \n  EPSS Score      : 0.002090                  \n  EPSS Percentile : 0.589120                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39325",
          "ruleIndex": 35,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2023-39325                                \n  Severity        : HIGH                                          \n  Package         : pkg:golang/golang.org/x/net@0.7.0             \n  Affected range  : <0.17.0                                       \n  Fixed version   : 0.17.0                                        \n  CVSS Score      : 7.5                                           \n  CVSS Vector     : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H  \n  EPSS Score      : 0.002090                                      \n  EPSS Percentile : 0.589120                                      \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45283",
          "ruleIndex": 36,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2023-45283            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.20.4  \n  Affected range  : <1.20.11                  \n  Fixed version   : 1.20.11                   \n  EPSS Score      : 0.000980                  \n  EPSS Percentile : 0.410600                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "GHSA-m425-mq94-257g",
          "ruleIndex": 37,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability  : GHSA-m425-mq94-257g                           \n  Severity       : HIGH                                          \n  Package        : pkg:golang/google.golang.org/grpc@1.37.1      \n  Affected range : <1.56.3                                       \n  Fixed version  : 1.56.3                                        \n  CVSS Score     : 7.5                                           \n  CVSS Vector    : CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29403",
          "ruleIndex": 38,
          "kind": "fail",
          "level": "error",
          "message": {
            "text": "  Vulnerability   : CVE-2023-29403            \n  Severity        : HIGH                      \n  Package         : pkg:golang/stdlib@1.20.4  \n  Affected range  : >=1.20.0-0,<1.20.5        \n  Fixed version   : 1.20.5                    \n  EPSS Score      : 0.000580                  \n  EPSS Percentile : 0.239550                  \n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "/bin/consul"
                }
              }
            }
          ]
        }
      ]
    }
  ]
}
