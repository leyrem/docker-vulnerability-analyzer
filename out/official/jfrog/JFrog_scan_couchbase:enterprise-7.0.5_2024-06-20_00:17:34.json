{
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "informationUri": "https://docs.jfrog-applications.jfrog.io/jfrog-security-features/sca",
          "name": "JFrog Xray SCA",
          "rules": [
            {
              "id": "CVE-2020-28852_golang.org/x/text_0.3.4",
              "shortDescription": {
                "text": "[CVE-2020-28852] golang.org/x/text 0.3.4"
              },
              "help": {
                "text": "In x/text in Go before v0.3.5, a \"slice bounds out of range\" panic occurs in language.ParseAcceptLanguage while processing a BCP 47 tag. (x/text/language is supposed to be able to parse an HTTP Accept-Language header.)",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.3.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2020-28851_golang.org/x/text_0.3.5",
              "shortDescription": {
                "text": "[CVE-2020-28851] golang.org/x/text 0.3.5"
              },
              "help": {
                "text": "In x/text in Go 1.15.4, an \"index out of range\" panic occurs in language.ParseAcceptLanguage while parsing the -u- extension. (x/text/language is supposed to be able to parse an HTTP Accept-Language header.)",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.3.6]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-28840_github.com/docker/docker_17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible",
              "shortDescription": {
                "text": "[CVE-2023-28840] github.com/docker/docker 17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible"
              },
              "help": {
                "text": "Moby is an open source container framework developed by Docker Inc. that is distributed as Docker, Mirantis Container Runtime, and various other downstream projects/products. The Moby daemon component (`dockerd`), which is developed as moby/moby, is commonly referred to as *Docker*.\n\nSwarm Mode, which is compiled in and delivered by default in dockerd and is thus present in most major Moby downstreams, is a simple, built-in container orchestrator that is implemented through a combination of SwarmKit and supporting network code.\n\nThe overlay network driver is a core feature of Swarm Mode, providing isolated virtual LANs that allow communication between containers and services across the cluster. This driver is an implementation/user of VXLAN, which encapsulates link-layer (Ethernet) frames in UDP datagrams that tag the frame with a VXLAN Network ID (VNI) that identifies the originating overlay network. In addition, the overlay network driver supports an optional, off-by-default encrypted mode, which is especially useful when VXLAN packets traverses an untrusted network between nodes.\n\nEncrypted overlay networks function by encapsulating the VXLAN datagrams through the use of the IPsec Encapsulating Security Payload protocol in Transport mode. By deploying IPSec encapsulation, encrypted overlay networks gain the additional properties of source authentication through cryptographic proof, data integrity through check-summing, and confidentiality through encryption.\n\nWhen setting an endpoint up on an encrypted overlay network, Moby installs three iptables (Linux kernel firewall) rules that enforce both incoming and outgoing IPSec. These rules rely on the u32 iptables extension provided by the xt_u32 kernel module to directly filter on a VXLAN packet's VNI field, so that IPSec guarantees can be enforced on encrypted overlay networks without interfering with other overlay networks or other users of VXLAN.\n\nTwo iptables rules serve to filter incoming VXLAN datagrams with a VNI that corresponds to an encrypted net...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.7      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [20.10.24], [23.0.3]   |"
              },
              "properties": {
                "security-severity": "8.7"
              }
            },
            {
              "id": "CVE-2018-15664_github.com/docker/docker_17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible",
              "shortDescription": {
                "text": "[CVE-2018-15664] github.com/docker/docker 17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible"
              },
              "help": {
                "text": "In Docker through 18.06.1-ce-rc2, the API endpoints behind the 'docker cp' command are vulnerable to a symlink-exchange attack with Directory Traversal, giving attackers arbitrary read-write access to the host filesystem with root privileges, because daemon/archive.go does not do archive operations on a frozen filesystem (or from within a chroot).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [18.09.7-rc1], [19.03.0-rc2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-23648_github.com/containerd/containerd_1.3.4",
              "shortDescription": {
                "text": "[CVE-2022-23648] github.com/containerd/containerd 1.3.4"
              },
              "help": {
                "text": "containerd is a container runtime available as a daemon for Linux and Windows. A bug was found in containerd prior to versions 1.6.1, 1.5.10, and 1.14.12 where containers launched through containerd’s CRI implementation on Linux with a specially-crafted image configuration could gain access to read-only copies of arbitrary files and directories on the host. This may bypass any policy-based enforcement on container setup (including a Kubernetes Pod Security Policy) and expose potentially sensitive information. Kubernetes and crictl can both be configured to use containerd’s CRI implementation. This bug has been fixed in containerd 1.6.1, 1.5.10, and 1.4.12. Users should update to these versions to resolve the issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.4.13], [1.5.10], [1.6.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2019-13509_github.com/docker/docker_17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible",
              "shortDescription": {
                "text": "[CVE-2019-13509] github.com/docker/docker 17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible"
              },
              "help": {
                "text": "In Docker CE and EE before 18.09.8 (as well as Docker EE before 17.06.2-ee-23 and 18.x before 18.03.1-ee-10), Docker Engine in debug mode may sometimes add secrets to the debug log. This applies to a scenario where docker stack deploy is run to redeploy a stack that includes (non external) secrets. It potentially applies to other API users of the stack API if they resend the secret.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [18.09.8]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2024-24557_github.com/docker/docker_17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible",
              "shortDescription": {
                "text": "[CVE-2024-24557] github.com/docker/docker 17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible"
              },
              "help": {
                "text": "Moby is an open-source project created by Docker to enable software containerization. The classic builder cache system is prone to cache poisoning if the image is built FROM scratch. Also, changes to some instructions (most important being HEALTHCHECK and ONBUILD) would not cause a cache miss. An attacker with the knowledge of the Dockerfile someone is using could poison their cache by making them pull a specially crafted image that would be considered as a valid cache candidate for some build steps. 23.0+ users are only affected if they explicitly opted out of Buildkit (DOCKER_BUILDKIT=0 environment variable) or are using the /build API endpoint. All users on versions older than 23.0 could be impacted. Image build API endpoint (/build) and ImageBuild function from github.com/docker/docker/client is also affected as it the uses classic builder by default. Patches are included in 24.0.9 and 25.0.2 releases.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [24.0.9], [25.0.2]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2021-41103_github.com/containerd/containerd_1.3.4",
              "shortDescription": {
                "text": "[CVE-2021-41103] github.com/containerd/containerd 1.3.4"
              },
              "help": {
                "text": "containerd is an open source container runtime with an emphasis on simplicity, robustness and portability. A bug was found in containerd where container root directories and some plugins had insufficiently restricted permissions, allowing otherwise unprivileged Linux users to traverse directory contents and execute programs. When containers included executable programs with extended permission bits (such as setuid), unprivileged Linux users could discover and execute those programs. When the UID of an unprivileged Linux user on the host collided with the file owner or group inside a container, the unprivileged Linux user on the host could discover, read, and modify those files. This vulnerability has been fixed in containerd 1.4.11 and containerd 1.5.7. Users should update to these version when they are released and may restart containers or update directory permissions to mitigate the vulnerability. Users unable to update should limit access to the host to trusted users. Update directory permission on container bundles directories.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.4.11], [1.5.7]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2020-7919_golang.org/x/crypto_0.0.0-20190308221718-c2843e01d9a2",
              "shortDescription": {
                "text": "[CVE-2020-7919] golang.org/x/crypto 0.0.0-20190308221718-c2843e01d9a2"
              },
              "help": {
                "text": "Go before 1.12.16 and 1.13.x before 1.13.7 (and the crypto/cryptobyte package before 0.0.0-20200124225646-8b5121be2f68 for Go) allows attacks on clients (resulting in a panic) via a malformed X.509 certificate.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.0.0-20200124225646-8b5121be2f68]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41881_io.netty:netty-codec-haproxy_4.1.84.Final",
              "shortDescription": {
                "text": "[CVE-2022-41881] io.netty:netty-codec-haproxy 4.1.84.Final"
              },
              "help": {
                "text": "Netty project is an event-driven asynchronous network application framework. In versions prior to 4.1.86.Final, a StackOverflowError can be raised when parsing a malformed crafted message due to an infinite recursion. This issue is patched in version 4.1.86.Final. There is no workaround, except using a custom HaProxyMessageDecoder.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [4.1.86.Final]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2018-20225_pip_22.0.4",
              "shortDescription": {
                "text": "[CVE-2018-20225] pip 22.0.4"
              },
              "help": {
                "text": "An issue was discovered in pip (all versions) because it installs the version with the highest version number, even if the user had intended to obtain a private package from a private index. This only affects use of the --extra-index-url option, and exploitation requires that the package does not already exist in the public index (and thus the attacker can put the package there with an arbitrary version number). NOTE: it has been reported that this is intended functionality and the user is responsible for using --extra-index-url securely",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2023-48795_golang.org/x/crypto_0.0.0-20201002170205-7f63de1d35b0",
              "shortDescription": {
                "text": "[CVE-2023-48795] golang.org/x/crypto 0.0.0-20201002170205-7f63de1d35b0"
              },
              "help": {
                "text": "The SSH transport protocol with certain OpenSSH extensions, found in OpenSSH before 9.6 and other products, allows remote attackers to bypass integrity checks such that some packets are omitted (from the extension negotiation message), and a client and server may consequently end up with a connection for which some security features have been downgraded or disabled, aka a Terrapin attack. This occurs because the SSH Binary Packet Protocol (BPP), implemented by these extensions, mishandles the handshake phase and mishandles use of sequence numbers. For example, there is an effective attack against SSH's use of ChaCha20-Poly1305 (and CBC with Encrypt-then-MAC). The bypass occurs in chacha20-poly1305@openssh.com and (if CBC is used) the -etm@openssh.com MAC algorithms. This also affects Maverick Synergy Java SSH API before 3.1.0-SNAPSHOT, Dropbear through 2022.83, Ssh before 5.1.1 in Erlang/OTP, PuTTY before 0.80, AsyncSSH before 2.14.2, golang.org/x/crypto before 0.17.0, libssh before 0.10.6, libssh2 through 1.11.0, Thorn Tech SFTP Gateway before 3.4.6, Tera Term before 5.1, Paramiko before 3.4.0, jsch before 0.2.15, SFTPGo before 2.5.6, Netgate pfSense Plus through 23.09.1, Netgate pfSense CE through 2.7.2, HPN-SSH through 18.2.0, ProFTPD before 1.3.8b (and before 1.3.9rc2), ORYX CycloneSSH before 2.3.4, NetSarang XShell 7 before Build 0144, CrushFTP before 10.6.0, ConnectBot SSH library before 2.2.22, Apache MINA sshd through 2.11.0, sshj through 0.37.0, TinySSH through 20230101, trilead-ssh2 6401, LANCOM LCOS and LANconfig, FileZilla before 3.66.4, Nova before 11.8, PKIX-SSH before 14.4, SecureCRT before 9.4.3, Transmit5 before 5.10.4, Win32-OpenSSH before 9.5.0.0p1-Beta, WinSCP before 6.2.2, Bitvise SSH Server before 9.32, Bitvise SSH Client before 9.33, KiTTY through 0.76.1.13, the net-ssh gem 7.2.0 for Ruby, the mscdex ssh2 module before 1.15.0 for Node.js, the thrussh library before 0.35.1 for Rust, and the Russh crate before 0.40.2 for Rust.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Undetermined       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-48795_golang.org/x/crypto_0.0.0-20210314154223-e6e6c4f2bb5b",
              "shortDescription": {
                "text": "[CVE-2023-48795] golang.org/x/crypto 0.0.0-20210314154223-e6e6c4f2bb5b"
              },
              "help": {
                "text": "The SSH transport protocol with certain OpenSSH extensions, found in OpenSSH before 9.6 and other products, allows remote attackers to bypass integrity checks such that some packets are omitted (from the extension negotiation message), and a client and server may consequently end up with a connection for which some security features have been downgraded or disabled, aka a Terrapin attack. This occurs because the SSH Binary Packet Protocol (BPP), implemented by these extensions, mishandles the handshake phase and mishandles use of sequence numbers. For example, there is an effective attack against SSH's use of ChaCha20-Poly1305 (and CBC with Encrypt-then-MAC). The bypass occurs in chacha20-poly1305@openssh.com and (if CBC is used) the -etm@openssh.com MAC algorithms. This also affects Maverick Synergy Java SSH API before 3.1.0-SNAPSHOT, Dropbear through 2022.83, Ssh before 5.1.1 in Erlang/OTP, PuTTY before 0.80, AsyncSSH before 2.14.2, golang.org/x/crypto before 0.17.0, libssh before 0.10.6, libssh2 through 1.11.0, Thorn Tech SFTP Gateway before 3.4.6, Tera Term before 5.1, Paramiko before 3.4.0, jsch before 0.2.15, SFTPGo before 2.5.6, Netgate pfSense Plus through 23.09.1, Netgate pfSense CE through 2.7.2, HPN-SSH through 18.2.0, ProFTPD before 1.3.8b (and before 1.3.9rc2), ORYX CycloneSSH before 2.3.4, NetSarang XShell 7 before Build 0144, CrushFTP before 10.6.0, ConnectBot SSH library before 2.2.22, Apache MINA sshd through 2.11.0, sshj through 0.37.0, TinySSH through 20230101, trilead-ssh2 6401, LANCOM LCOS and LANconfig, FileZilla before 3.66.4, Nova before 11.8, PKIX-SSH before 14.4, SecureCRT before 9.4.3, Transmit5 before 5.10.4, Win32-OpenSSH before 9.5.0.0p1-Beta, WinSCP before 6.2.2, Bitvise SSH Server before 9.32, Bitvise SSH Client before 9.33, KiTTY through 0.76.1.13, the net-ssh gem 7.2.0 for Ruby, the mscdex ssh2 module before 1.15.0 for Node.js, the thrussh library before 0.35.1 for Rust, and the Russh crate before 0.40.2 for Rust.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Undetermined       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-48795_golang.org/x/crypto_0.0.0-20221010152910-d6f0a8c073c2",
              "shortDescription": {
                "text": "[CVE-2023-48795] golang.org/x/crypto 0.0.0-20221010152910-d6f0a8c073c2"
              },
              "help": {
                "text": "The SSH transport protocol with certain OpenSSH extensions, found in OpenSSH before 9.6 and other products, allows remote attackers to bypass integrity checks such that some packets are omitted (from the extension negotiation message), and a client and server may consequently end up with a connection for which some security features have been downgraded or disabled, aka a Terrapin attack. This occurs because the SSH Binary Packet Protocol (BPP), implemented by these extensions, mishandles the handshake phase and mishandles use of sequence numbers. For example, there is an effective attack against SSH's use of ChaCha20-Poly1305 (and CBC with Encrypt-then-MAC). The bypass occurs in chacha20-poly1305@openssh.com and (if CBC is used) the -etm@openssh.com MAC algorithms. This also affects Maverick Synergy Java SSH API before 3.1.0-SNAPSHOT, Dropbear through 2022.83, Ssh before 5.1.1 in Erlang/OTP, PuTTY before 0.80, AsyncSSH before 2.14.2, golang.org/x/crypto before 0.17.0, libssh before 0.10.6, libssh2 through 1.11.0, Thorn Tech SFTP Gateway before 3.4.6, Tera Term before 5.1, Paramiko before 3.4.0, jsch before 0.2.15, SFTPGo before 2.5.6, Netgate pfSense Plus through 23.09.1, Netgate pfSense CE through 2.7.2, HPN-SSH through 18.2.0, ProFTPD before 1.3.8b (and before 1.3.9rc2), ORYX CycloneSSH before 2.3.4, NetSarang XShell 7 before Build 0144, CrushFTP before 10.6.0, ConnectBot SSH library before 2.2.22, Apache MINA sshd through 2.11.0, sshj through 0.37.0, TinySSH through 20230101, trilead-ssh2 6401, LANCOM LCOS and LANconfig, FileZilla before 3.66.4, Nova before 11.8, PKIX-SSH before 14.4, SecureCRT before 9.4.3, Transmit5 before 5.10.4, Win32-OpenSSH before 9.5.0.0p1-Beta, WinSCP before 6.2.2, Bitvise SSH Server before 9.32, Bitvise SSH Client before 9.33, KiTTY through 0.76.1.13, the net-ssh gem 7.2.0 for Ruby, the mscdex ssh2 module before 1.15.0 for Node.js, the thrussh library before 0.35.1 for Rust, and the Russh crate before 0.40.2 for Rust.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Undetermined       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-48795_golang.org/x/crypto_0.0.0-20190308221718-c2843e01d9a2",
              "shortDescription": {
                "text": "[CVE-2023-48795] golang.org/x/crypto 0.0.0-20190308221718-c2843e01d9a2"
              },
              "help": {
                "text": "The SSH transport protocol with certain OpenSSH extensions, found in OpenSSH before 9.6 and other products, allows remote attackers to bypass integrity checks such that some packets are omitted (from the extension negotiation message), and a client and server may consequently end up with a connection for which some security features have been downgraded or disabled, aka a Terrapin attack. This occurs because the SSH Binary Packet Protocol (BPP), implemented by these extensions, mishandles the handshake phase and mishandles use of sequence numbers. For example, there is an effective attack against SSH's use of ChaCha20-Poly1305 (and CBC with Encrypt-then-MAC). The bypass occurs in chacha20-poly1305@openssh.com and (if CBC is used) the -etm@openssh.com MAC algorithms. This also affects Maverick Synergy Java SSH API before 3.1.0-SNAPSHOT, Dropbear through 2022.83, Ssh before 5.1.1 in Erlang/OTP, PuTTY before 0.80, AsyncSSH before 2.14.2, golang.org/x/crypto before 0.17.0, libssh before 0.10.6, libssh2 through 1.11.0, Thorn Tech SFTP Gateway before 3.4.6, Tera Term before 5.1, Paramiko before 3.4.0, jsch before 0.2.15, SFTPGo before 2.5.6, Netgate pfSense Plus through 23.09.1, Netgate pfSense CE through 2.7.2, HPN-SSH through 18.2.0, ProFTPD before 1.3.8b (and before 1.3.9rc2), ORYX CycloneSSH before 2.3.4, NetSarang XShell 7 before Build 0144, CrushFTP before 10.6.0, ConnectBot SSH library before 2.2.22, Apache MINA sshd through 2.11.0, sshj through 0.37.0, TinySSH through 20230101, trilead-ssh2 6401, LANCOM LCOS and LANconfig, FileZilla before 3.66.4, Nova before 11.8, PKIX-SSH before 14.4, SecureCRT before 9.4.3, Transmit5 before 5.10.4, Win32-OpenSSH before 9.5.0.0p1-Beta, WinSCP before 6.2.2, Bitvise SSH Server before 9.32, Bitvise SSH Client before 9.33, KiTTY through 0.76.1.13, the net-ssh gem 7.2.0 for Ruby, the mscdex ssh2 module before 1.15.0 for Node.js, the thrussh library before 0.35.1 for Rust, and the Russh crate before 0.40.2 for Rust.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Undetermined       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-48795_golang.org/x/crypto_0.0.0-20210322153248-0c34fe9e7dc2",
              "shortDescription": {
                "text": "[CVE-2023-48795] golang.org/x/crypto 0.0.0-20210322153248-0c34fe9e7dc2"
              },
              "help": {
                "text": "The SSH transport protocol with certain OpenSSH extensions, found in OpenSSH before 9.6 and other products, allows remote attackers to bypass integrity checks such that some packets are omitted (from the extension negotiation message), and a client and server may consequently end up with a connection for which some security features have been downgraded or disabled, aka a Terrapin attack. This occurs because the SSH Binary Packet Protocol (BPP), implemented by these extensions, mishandles the handshake phase and mishandles use of sequence numbers. For example, there is an effective attack against SSH's use of ChaCha20-Poly1305 (and CBC with Encrypt-then-MAC). The bypass occurs in chacha20-poly1305@openssh.com and (if CBC is used) the -etm@openssh.com MAC algorithms. This also affects Maverick Synergy Java SSH API before 3.1.0-SNAPSHOT, Dropbear through 2022.83, Ssh before 5.1.1 in Erlang/OTP, PuTTY before 0.80, AsyncSSH before 2.14.2, golang.org/x/crypto before 0.17.0, libssh before 0.10.6, libssh2 through 1.11.0, Thorn Tech SFTP Gateway before 3.4.6, Tera Term before 5.1, Paramiko before 3.4.0, jsch before 0.2.15, SFTPGo before 2.5.6, Netgate pfSense Plus through 23.09.1, Netgate pfSense CE through 2.7.2, HPN-SSH through 18.2.0, ProFTPD before 1.3.8b (and before 1.3.9rc2), ORYX CycloneSSH before 2.3.4, NetSarang XShell 7 before Build 0144, CrushFTP before 10.6.0, ConnectBot SSH library before 2.2.22, Apache MINA sshd through 2.11.0, sshj through 0.37.0, TinySSH through 20230101, trilead-ssh2 6401, LANCOM LCOS and LANconfig, FileZilla before 3.66.4, Nova before 11.8, PKIX-SSH before 14.4, SecureCRT before 9.4.3, Transmit5 before 5.10.4, Win32-OpenSSH before 9.5.0.0p1-Beta, WinSCP before 6.2.2, Bitvise SSH Server before 9.32, Bitvise SSH Client before 9.33, KiTTY through 0.76.1.13, the net-ssh gem 7.2.0 for Ruby, the mscdex ssh2 module before 1.15.0 for Node.js, the thrussh library before 0.35.1 for Rust, and the Russh crate before 0.40.2 for Rust.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Undetermined       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2022-4203_cryptography_36.0.0",
              "shortDescription": {
                "text": "[CVE-2022-4203] cryptography 36.0.0"
              },
              "help": {
                "text": "A read buffer overrun can be triggered in X.509 certificate verification,\nspecifically in name constraint checking. Note that this occurs\nafter certificate chain signature verification and requires either a\nCA to have signed the malicious certificate or for the application to\ncontinue certificate verification despite failure to construct a path\nto a trusted issuer.\n\nThe read buffer overrun might result in a crash which could lead to\na denial of service attack. In theory it could also result in the disclosure\nof private memory contents (such as private keys, or sensitive plaintext)\nalthough we are not aware of any working exploit leading to memory\ncontents disclosure as of the time of release of this advisory.\n\nIn a TLS client, this can be triggered by connecting to a malicious\nserver. In a TLS server, this can be triggered if the server requests\nclient authentication and a malicious client connects.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.9      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [39.0.1]   |"
              },
              "properties": {
                "security-severity": "4.9"
              }
            },
            {
              "id": "CVE-2023-39318_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-39318] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "The html/template package does not properly handle HTML-like \"\" comment tokens, nor hashbang \"#!\" comment tokens, in \u003cscript\u003e contexts. This may cause the template parser to improperly interpret the contents of \u003cscript\u003e contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2024-37891_urllib3_1.26.8",
              "shortDescription": {
                "text": "[CVE-2024-37891] urllib3 1.26.8"
              },
              "help": {
                "text": "urllib3 is a user-friendly HTTP client library for Python. When using urllib3's proxy support with `ProxyManager`, the `Proxy-Authorization` header is only sent to the configured proxy, as expected. However, when sending HTTP requests *without* using urllib3's proxy support, it's possible to accidentally configure the `Proxy-Authorization` header even though it won't have any effect as the request is not using a forwarding proxy or a tunneling proxy. In those cases, urllib3 doesn't treat the `Proxy-Authorization` HTTP header as one carrying authentication material and thus doesn't strip the header on cross-origin redirects. Because this is a highly unlikely scenario, we believe the severity of this vulnerability is low for almost all users. Out of an abundance of caution urllib3 will automatically strip the `Proxy-Authorization` header during cross-origin redirects to avoid the small chance that users are doing this on accident. Users should use urllib3's proxy support or disable automatic redirects to achieve safe processing of the `Proxy-Authorization` header, but we still decided to strip the header by default in order to further protect users who aren't using the correct approach. We believe the number of usages affected by this advisory is low. It requires all of the following to be true to be exploited: 1. Setting the `Proxy-Authorization` header without using urllib3's built-in proxy support. 2. Not disabling HTTP redirects. 3. Either not using an HTTPS origin server or for the proxy or target origin to redirect to a malicious origin. Users are advised to update to either version 1.26.19 or version 2.2.2. Users unable to upgrade may use the `Proxy-Authorization` header with urllib3's `ProxyManager`, disable HTTP redirects using `redirects=False` when sending requests, or not user the `Proxy-Authorization` header as mitigations.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.4      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.26.19], [2.2.2]   |"
              },
              "properties": {
                "security-severity": "4.4"
              }
            },
            {
              "id": "CVE-2024-29857_org.bouncycastle:bcprov-jdk15on_1.70",
              "shortDescription": {
                "text": "[CVE-2024-29857] org.bouncycastle:bcprov-jdk15on 1.70"
              },
              "help": {
                "text": "An issue was discovered in ECCurve.java and ECCurve.cs in Bouncy Castle Java (BC Java) before 1.78, BC Java LTS before 2.73.6, BC-FJA before 1.0.2.5, and BC C# .Net before 2.3.1. Importing an EC certificate with crafted F2m parameters can lead to excessive CPU consumption during the evaluation of the curve parameters.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.78]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-1705_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2022-1705] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "Acceptance of some invalid Transfer-Encoding headers in the HTTP/1 client in net/http before Go 1.17.12 and Go 1.18.4 allows HTTP request smuggling if combined with an intermediate server that also improperly fails to reject the header as invalid.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2024-35195_requests_2.27.1",
              "shortDescription": {
                "text": "[CVE-2024-35195] requests 2.27.1"
              },
              "help": {
                "text": "Requests is a HTTP library. Prior to 2.32.0, when making requests through a Requests `Session`, if the first request is made with `verify=False` to disable cert verification, all subsequent requests to the same host will continue to ignore cert verification regardless of changes to the value of `verify`. This behavior will continue for the lifecycle of the connection in the connection pool. This vulnerability is fixed in 2.32.0.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.6      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [2.32.0]   |"
              },
              "properties": {
                "security-severity": "5.6"
              }
            },
            {
              "id": "CVE-2020-8565_k8s.io/client-go_0.19.4",
              "shortDescription": {
                "text": "[CVE-2020-8565] k8s.io/client-go 0.19.4"
              },
              "help": {
                "text": "In Kubernetes, if the logging level is set to at least 9, authorization and bearer tokens will be written to log files. This can occur both in API server logs and client tool output like kubectl. This affects \u003c= v1.19.3, \u003c= v1.18.10, \u003c= v1.17.13, \u003c v1.20.0-alpha2.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.17.16], [0.18.14], [0.19.6], [0.20.0-alpha.2]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2021-41089_github.com/docker/docker_17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible",
              "shortDescription": {
                "text": "[CVE-2021-41089] github.com/docker/docker 17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible"
              },
              "help": {
                "text": "Moby is an open-source project created by Docker to enable software containerization. A bug was found in Moby (Docker Engine) where attempting to copy files using `docker cp` into a specially-crafted container can result in Unix file permission changes for existing files in the host’s filesystem, widening access to others. This bug does not directly allow files to be read, modified, or executed without an additional cooperating process. This bug has been fixed in Moby (Docker Engine) 20.10.9. Users should update to this version as soon as possible. Running containers do not need to be restarted.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.3      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [20.10.9]   |"
              },
              "properties": {
                "security-severity": "6.3"
              }
            },
            {
              "id": "CVE-2024-30172_org.bouncycastle:bcprov-jdk15on_1.70",
              "shortDescription": {
                "text": "[CVE-2024-30172] org.bouncycastle:bcprov-jdk15on 1.70"
              },
              "help": {
                "text": "An issue was discovered in Bouncy Castle Java Cryptography APIs before 1.78. An Ed25519 verification code infinite loop can occur via a crafted signature and public key.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.78]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-21334_github.com/containerd/containerd_1.3.4",
              "shortDescription": {
                "text": "[CVE-2021-21334] github.com/containerd/containerd 1.3.4"
              },
              "help": {
                "text": "In containerd (an industry-standard container runtime) before versions 1.3.10 and 1.4.4, containers launched through containerd's CRI implementation (through Kubernetes, crictl, or any other pod/container client that uses the containerd CRI service) that share the same image may receive incorrect environment variables, including values that are defined for other containers. If the affected containers have different security contexts, this may allow sensitive information to be unintentionally shared. If you are not using containerd's CRI implementation (through one of the mechanisms described above), you are not vulnerable to this issue. If you are not launching multiple containers or Kubernetes pods from the same image which have different environment variables, you are not vulnerable to this issue. If you are not launching multiple containers or Kubernetes pods from the same image in rapid succession, you have reduced likelihood of being vulnerable to this issue This vulnerability has been fixed in containerd 1.3.10 and containerd 1.4.4. Users should update to these versions.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.3      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.3.10], [1.4.4]   |"
              },
              "properties": {
                "security-severity": "6.3"
              }
            },
            {
              "id": "CVE-2023-28842_github.com/docker/docker_17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible",
              "shortDescription": {
                "text": "[CVE-2023-28842] github.com/docker/docker 17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible"
              },
              "help": {
                "text": "Moby) is an open source container framework developed by Docker Inc. that is distributed as Docker, Mirantis Container Runtime, and various other downstream projects/products. The Moby daemon component (`dockerd`), which is developed as moby/moby is commonly referred to as *Docker*.\n\nSwarm Mode, which is compiled in and delivered by default in `dockerd` and is thus present in most major Moby downstreams, is a simple, built-in container orchestrator that is implemented through a combination of SwarmKit and supporting network code.\n\nThe `overlay` network driver is a core feature of Swarm Mode, providing isolated virtual LANs that allow communication between containers and services across the cluster. This driver is an implementation/user of VXLAN, which encapsulates link-layer (Ethernet) frames in UDP datagrams that tag the frame with the VXLAN metadata, including a VXLAN Network ID (VNI) that identifies the originating overlay network. In addition, the overlay network driver supports an optional, off-by-default encrypted mode, which is especially useful when VXLAN packets traverses an untrusted network between nodes.\n\nEncrypted overlay networks function by encapsulating the VXLAN datagrams through the use of the IPsec Encapsulating Security Payload protocol in Transport mode. By deploying IPSec encapsulation, encrypted overlay networks gain the additional properties of source authentication through cryptographic proof, data integrity through check-summing, and confidentiality through encryption.\n\nWhen setting an endpoint up on an encrypted overlay network, Moby installs three iptables (Linux kernel firewall) rules that enforce both incoming and outgoing IPSec. These rules rely on the `u32` iptables extension provided by the `xt_u32` kernel module to directly filter on a VXLAN packet's VNI field, so that IPSec guarantees can be enforced on encrypted overlay networks without interfering with other overlay networks or other users of VXLAN.\n\nThe `overlay` driver dynamically and lazily defines the kernel config...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.8      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [20.10.24], [23.0.3]   |"
              },
              "properties": {
                "security-severity": "6.8"
              }
            },
            {
              "id": "CVE-2023-45284_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2023-45284] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "On Windows, The IsLocal function does not correctly detect reserved device names in some cases. Reserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local. With fix, IsLocal now correctly reports these names as non-local.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.20.11], [1.21.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2024-24786_google.golang.org/protobuf_1.24.0",
              "shortDescription": {
                "text": "[CVE-2024-24786] google.golang.org/protobuf 1.24.0"
              },
              "help": {
                "text": "The protojson.Unmarshal function can enter an infinite loop when unmarshaling certain forms of invalid JSON. This condition can occur when unmarshaling into a message which contains a google.protobuf.Any value, or when the UnmarshalOptions.DiscardUnknown option is set.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.33.0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-39326_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2023-39326] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "A malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body. A malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request. Chunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-41915_io.netty:netty-codec-http_4.1.84.Final",
              "shortDescription": {
                "text": "[CVE-2022-41915] io.netty:netty-codec-http 4.1.84.Final"
              },
              "help": {
                "text": "Netty project is an event-driven asynchronous network application framework. Starting in version 4.1.83.Final and prior to 4.1.86.Final, when calling `DefaultHttpHeadesr.set` with an _iterator_ of values, header value validation was not performed, allowing malicious header values in the iterator to perform HTTP Response Splitting. This issue has been patched in version 4.1.86.Final. Integrators can work around the issue by changing the `DefaultHttpHeaders.set(CharSequence, Iterator\u003c?\u003e)` call, into a `remove()` call, and call `add()` in a loop over the iterator of values.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [4.1.86.Final]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-24532_github.com/golang/go_1.19.2",
              "shortDescription": {
                "text": "[CVE-2023-24532] github.com/golang/go 1.19.2"
              },
              "help": {
                "text": "The ScalarMult and ScalarBaseMult methods of the P256 Curve may return an incorrect result if called with some specific unreduced scalars (a scalar larger than the order of the curve). This does not impact usages of crypto/ecdsa or crypto/ecdh.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.7], [1.20.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-41190_github.com/opencontainers/image-spec_1.0.1",
              "shortDescription": {
                "text": "[CVE-2021-41190] github.com/opencontainers/image-spec 1.0.1"
              },
              "help": {
                "text": "The OCI Distribution Spec project defines an API protocol to facilitate and standardize the distribution of content. In the OCI Distribution Specification version 1.0.0 and prior, the Content-Type header alone was used to determine the type of document during push and pull operations. Documents that contain both “manifests” and “layers” fields could be interpreted as either a manifest or an index in the absence of an accompanying Content-Type header. If a Content-Type header changed between two pulls of the same digest, a client may interpret the resulting content differently. The OCI Distribution Specification has been updated to require that a mediaType value present in a manifest or index match the Content-Type header used during the push and pull operations. Clients pulling from a registry may distrust the Content-Type header and reject an ambiguous document that contains both “manifests” and “layers” fields or “manifests” and “config” fields if they are unable to update to version 1.0.1 of the spec.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.0      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.0.2]   |"
              },
              "properties": {
                "security-severity": "5.0"
              }
            },
            {
              "id": "CVE-2023-39318_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2023-39318] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "The html/template package does not properly handle HTML-like \"\" comment tokens, nor hashbang \"#!\" comment tokens, in \u003cscript\u003e contexts. This may cause the template parser to improperly interpret the contents of \u003cscript\u003e contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2024-0727_cryptography_36.0.0",
              "shortDescription": {
                "text": "[CVE-2024-0727] cryptography 36.0.0"
              },
              "help": {
                "text": "Issue summary: Processing a maliciously formatted PKCS12 file may lead OpenSSL\nto crash leading to a potential Denial of Service attack\n\nImpact summary: Applications loading files in the PKCS12 format from untrusted\nsources might terminate abruptly.\n\nA file in PKCS12 format can contain certificates and keys and may come from an\nuntrusted source. The PKCS12 specification allows certain fields to be NULL, but\nOpenSSL does not correctly check for this case. This can lead to a NULL pointer\ndereference that results in OpenSSL crashing. If an application processes PKCS12\nfiles from an untrusted source using the OpenSSL APIs then that application will\nbe vulnerable to this issue.\n\nOpenSSL APIs that are vulnerable to this are: PKCS12_parse(),\nPKCS12_unpack_p7data(), PKCS12_unpack_p7encdata(), PKCS12_unpack_authsafes()\nand PKCS12_newpass().\n\nWe have also fixed a similar issue in SMIME_write_PKCS7(). However since this\nfunction is related to writing data we do not consider it security significant.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [42.0.2]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-40577_github.com/prometheus/alertmanager_0.21.0",
              "shortDescription": {
                "text": "[CVE-2023-40577] github.com/prometheus/alertmanager 0.21.0"
              },
              "help": {
                "text": "Alertmanager handles alerts sent by client applications such as the Prometheus server. An attacker with the permission to perform POST requests on the /api/v1/alerts endpoint could be able to execute arbitrary JavaScript code on the users of Prometheus Alertmanager. This issue has been fixed in Alertmanager version 0.2.51.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.4      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.25.1]   |"
              },
              "properties": {
                "security-severity": "5.4"
              }
            },
            {
              "id": "CVE-2021-32760_github.com/containerd/containerd_1.3.4",
              "shortDescription": {
                "text": "[CVE-2021-32760] github.com/containerd/containerd 1.3.4"
              },
              "help": {
                "text": "containerd is a container runtime. A bug was found in containerd versions prior to 1.4.8 and 1.5.4 where pulling and extracting a specially-crafted container image can result in Unix file permission changes for existing files in the host’s filesystem. Changes to file permissions can deny access to the expected owner of the file, widen access to others, or set extended bits like setuid, setgid, and sticky. This bug does not directly allow files to be read, modified, or executed without an additional cooperating process. This bug has been fixed in containerd 1.5.4 and 1.4.8. As a workaround, ensure that users only pull images from trusted sources. Linux security modules (LSMs) like SELinux and AppArmor can limit the files potentially affected by this bug through policies and profiles that prevent containerd from interacting with specific files.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.3      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.4.8], [1.5.4]   |"
              },
              "properties": {
                "security-severity": "6.3"
              }
            },
            {
              "id": "CVE-2023-39318_github.com/golang/go_1.19.2",
              "shortDescription": {
                "text": "[CVE-2023-39318] github.com/golang/go 1.19.2"
              },
              "help": {
                "text": "The html/template package does not properly handle HTML-like \"\" comment tokens, nor hashbang \"#!\" comment tokens, in \u003cscript\u003e contexts. This may cause the template parser to improperly interpret the contents of \u003cscript\u003e contexts, causing actions to be improperly escaped. This may be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2021-34558_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2021-34558] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "The crypto/tls package of Go through 1.16.5 does not properly assert that the type of public key in an X.509 certificate matches the expected type when doing a RSA based key exchange, allowing a malicious TLS server to cause a TLS client to panic.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.15.14], [1.16.6]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2024-29025_io.netty:netty-codec-http_4.1.84.Final",
              "shortDescription": {
                "text": "[CVE-2024-29025] io.netty:netty-codec-http 4.1.84.Final"
              },
              "help": {
                "text": "Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers \u0026 clients. The `HttpPostRequestDecoder` can be tricked to accumulate data. While the decoder can store items on the disk if configured so, there are no limits to the number of fields the form can have, an attacher can send a chunked post consisting of many small fields that will be accumulated in the `bodyListHttpData` list. The decoder cumulates bytes in the `undecodedChunk` buffer until it can decode a field, this field can cumulate data without limits. This vulnerability is fixed in 4.1.108.Final.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [4.1.108.Final]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-39319_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2023-39319] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "The html/template package does not apply the proper rules for handling occurrences of \"\u003cscript\", \"\u003c!--\", and \"\u003c/script\" within JS literals in \u003cscript\u003e contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2023-23931_cryptography_36.0.0",
              "shortDescription": {
                "text": "[CVE-2023-23931] cryptography 36.0.0"
              },
              "help": {
                "text": "cryptography is a package designed to expose cryptographic primitives and recipes to Python developers. In affected versions `Cipher.update_into` would accept Python objects which implement the buffer protocol, but provide only immutable buffers. This would allow immutable objects (such as `bytes`) to be mutated, thus violating fundamental rules of Python and resulting in corrupted output. This now correctly raises an exception. This issue has been present since `update_into` was originally introduced in cryptography 1.8.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [39.0.1]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-28841_github.com/docker/docker_17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible",
              "shortDescription": {
                "text": "[CVE-2023-28841] github.com/docker/docker 17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible"
              },
              "help": {
                "text": "Moby is an open source container framework developed by Docker Inc. that is distributed as Docker, Mirantis Container Runtime, and various other downstream projects/products. The Moby daemon component (`dockerd`), which is developed as moby/moby is commonly referred to as *Docker*.\n\nSwarm Mode, which is compiled in and delivered by default in `dockerd` and is thus present in most major Moby downstreams, is a simple, built-in container orchestrator that is implemented through a combination of SwarmKit and supporting network code.\n\nThe `overlay` network driver is a core feature of Swarm Mode, providing isolated virtual LANs that allow communication between containers and services across the cluster. This driver is an implementation/user of VXLAN, which encapsulates link-layer (Ethernet) frames in UDP datagrams that tag the frame with the VXLAN metadata, including a VXLAN Network ID (VNI) that identifies the originating overlay network. In addition, the overlay network driver supports an optional, off-by-default encrypted mode, which is especially useful when VXLAN packets traverses an untrusted network between nodes.\n\nEncrypted overlay networks function by encapsulating the VXLAN datagrams through the use of the IPsec Encapsulating Security Payload protocol in Transport mode. By deploying IPSec encapsulation, encrypted overlay networks gain the additional properties of source authentication through cryptographic proof, data integrity through check-summing, and confidentiality through encryption.\n\nWhen setting an endpoint up on an encrypted overlay network, Moby installs three iptables (Linux kernel firewall) rules that enforce both incoming and outgoing IPSec. These rules rely on the `u32` iptables extension provided by the `xt_u32` kernel module to directly filter on a VXLAN packet's VNI field, so that IPSec guarantees can be enforced on encrypted overlay networks without interfering with other overlay networks or other users of VXLAN.\n\nAn iptables rule designates outgoing VXLAN datagrams with a VNI that c...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.8      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [20.10.24], [23.0.3]   |"
              },
              "properties": {
                "security-severity": "6.8"
              }
            },
            {
              "id": "CVE-2023-3446_cryptography_36.0.0",
              "shortDescription": {
                "text": "[CVE-2023-3446] cryptography 36.0.0"
              },
              "help": {
                "text": "Issue summary: Checking excessively long DH keys or parameters may be very slow.\n\nImpact summary: Applications that use the functions DH_check(), DH_check_ex()\nor EVP_PKEY_param_check() to check a DH key or DH parameters may experience long\ndelays. Where the key or parameters that are being checked have been obtained\nfrom an untrusted source this may lead to a Denial of Service.\n\nThe function DH_check() performs various checks on DH parameters. One of those\nchecks confirms that the modulus ('p' parameter) is not too large. Trying to use\na very large modulus is slow and OpenSSL will not normally use a modulus which\nis over 10,000 bits in length.\n\nHowever the DH_check() function checks numerous aspects of the key or parameters\nthat have been supplied. Some of those checks use the supplied modulus value\neven if it has already been found to be too large.\n\nAn application that calls DH_check() and supplies a key or parameters obtained\nfrom an untrusted source could be vulernable to a Denial of Service attack.\n\nThe function DH_check() is itself called by a number of other OpenSSL functions.\nAn application calling any of those other functions may similarly be affected.\nThe other functions affected by this are DH_check_ex() and\nEVP_PKEY_param_check().\n\nAlso vulnerable are the OpenSSL dhparam and pkeyparam command line applications\nwhen using the '-check' option.\n\nThe OpenSSL SSL/TLS implementation is not affected by this issue.\nThe OpenSSL 3.0 and 3.1 FIPS providers are not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [41.0.3]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-30187_com.azure:azure-storage-blob_12.14.3",
              "shortDescription": {
                "text": "[CVE-2022-30187] com.azure:azure-storage-blob 12.14.3"
              },
              "help": {
                "text": "Azure Storage Library Information Disclosure Vulnerability",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.7      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [12.18.0]   |"
              },
              "properties": {
                "security-severity": "4.7"
              }
            },
            {
              "id": "CVE-2021-41091_github.com/docker/docker_17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible",
              "shortDescription": {
                "text": "[CVE-2021-41091] github.com/docker/docker 17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible"
              },
              "help": {
                "text": "Moby is an open-source project created by Docker to enable software containerization. A bug was found in Moby (Docker Engine) where the data directory (typically `/var/lib/docker`) contained subdirectories with insufficiently restricted permissions, allowing otherwise unprivileged Linux users to traverse directory contents and execute programs. When containers included executable programs with extended permission bits (such as `setuid`), unprivileged Linux users could discover and execute those programs. When the UID of an unprivileged Linux user on the host collided with the file owner or group inside a container, the unprivileged Linux user on the host could discover, read, and modify those files. This bug has been fixed in Moby (Docker Engine) 20.10.9. Users should update to this version as soon as possible. Running containers should be stopped and restarted for the permissions to be fixed. For users unable to upgrade limit access to the host to trusted users. Limit access to host volumes to trusted containers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.3      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [20.10.9]   |"
              },
              "properties": {
                "security-severity": "6.3"
              }
            },
            {
              "id": "CVE-2023-2253_github.com/docker/distribution_2.7.1+incompatible",
              "shortDescription": {
                "text": "[CVE-2023-2253] github.com/docker/distribution 2.7.1+incompatible"
              },
              "help": {
                "text": "A flaw was found in the `/v2/_catalog` endpoint in distribution/distribution, which accepts a parameter to control the maximum number of records returned (query string: `n`). This vulnerability allows a malicious user to submit an unreasonably large value for `n,` causing the allocation of a massive string array, possibly causing a denial of service through excessive use of memory.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [2.8.2-beta.1]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-31030_github.com/containerd/containerd_1.3.4",
              "shortDescription": {
                "text": "[CVE-2022-31030] github.com/containerd/containerd 1.3.4"
              },
              "help": {
                "text": "containerd is an open source container runtime. A bug was found in the containerd's CRI implementation where programs inside a container can cause the containerd daemon to consume memory without bound during invocation of the `ExecSync` API. This can cause containerd to consume all available memory on the computer, denying service to other legitimate workloads. Kubernetes and crictl can both be configured to use containerd's CRI implementation; `ExecSync` may be used when running probes or when executing processes via an \"exec\" facility. This bug has been fixed in containerd 1.6.6 and 1.5.13. Users should update to these versions to resolve the issue. Users unable to upgrade should ensure that only trusted images and commands are used.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.5.13], [1.6.6]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2024-29018_github.com/docker/docker_17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible",
              "shortDescription": {
                "text": "[CVE-2024-29018] github.com/docker/docker 17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible"
              },
              "help": {
                "text": "Moby is an open source container framework that is a key component of Docker Engine, Docker Desktop, and other distributions of container tooling or runtimes. Moby's networking implementation allows for many networks, each with their own IP address range and gateway, to be defined. This feature is frequently referred to as custom networks, as each network can have a different driver, set of parameters and thus behaviors. When creating a network, the `--internal` flag is used to designate a network as _internal_. The `internal` attribute in a docker-compose.yml file may also be used to mark a network _internal_, and other API clients may specify the `internal` parameter as well.\n\nWhen containers with networking are created, they are assigned unique network interfaces and IP addresses. The host serves as a router for non-internal networks, with a gateway IP that provides SNAT/DNAT to/from container IPs.\n\nContainers on an internal network may communicate between each other, but are precluded from communicating with any networks the host has access to (LAN or WAN) as no default route is configured, and firewall rules are set up to drop all outgoing traffic. Communication with the gateway IP address (and thus appropriately configured host services) is possible, and the host may communicate with any container IP directly.\n\nIn addition to configuring the Linux kernel's various networking features to enable container networking, `dockerd` directly provides some services to container networks. Principal among these is serving as a resolver, enabling service discovery, and resolution of names from an upstream resolver.\n\nWhen a DNS request for a name that does not correspond to a container is received, the request is forwarded to the configured upstream resolver. This request is made from the container's network namespace: the level of access and routing of traffic is the same as if the request was made by the container itself.\n\nAs a consequence of this design, containers solely attached to an internal network will ...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [23.0.11], [25.0.5], [26.0.0-rc3]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-39319_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-39319] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "The html/template package does not apply the proper rules for handling occurrences of \"\u003cscript\", \"\u003c!--\", and \"\u003c/script\" within JS literals in \u003cscript\u003e contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2023-45284_github.com/golang/go_1.19.2",
              "shortDescription": {
                "text": "[CVE-2023-45284] github.com/golang/go 1.19.2"
              },
              "help": {
                "text": "On Windows, The IsLocal function does not correctly detect reserved device names in some cases. Reserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local. With fix, IsLocal now correctly reports these names as non-local.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.20.11], [1.21.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-23471_github.com/containerd/containerd_1.3.4",
              "shortDescription": {
                "text": "[CVE-2022-23471] github.com/containerd/containerd 1.3.4"
              },
              "help": {
                "text": "containerd is an open source container runtime. A bug was found in containerd's CRI implementation where a user can exhaust memory on the host. In the CRI stream server, a goroutine is launched to handle terminal resize events if a TTY is requested. If the user's process fails to launch due to, for example, a faulty command, the goroutine will be stuck waiting to send without a receiver, resulting in a memory leak. Kubernetes and crictl can both be configured to use containerd's CRI implementation and the stream server is used for handling container IO. This bug has been fixed in containerd 1.6.12 and 1.5.16.  Users should update to these versions to resolve the issue. Users unable to upgrade should ensure that only trusted images and commands are used and that only trusted users have permissions to execute commands in running containers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.5.16], [1.6.12]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2024-24786_google.golang.org/protobuf_1.26.0",
              "shortDescription": {
                "text": "[CVE-2024-24786] google.golang.org/protobuf 1.26.0"
              },
              "help": {
                "text": "The protojson.Unmarshal function can enter an infinite loop when unmarshaling certain forms of invalid JSON. This condition can occur when unmarshaling into a message which contains a google.protobuf.Any value, or when the UnmarshalOptions.DiscardUnknown option is set.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.33.0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2018-10892_github.com/docker/docker_17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible",
              "shortDescription": {
                "text": "[CVE-2018-10892] github.com/docker/docker 17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible"
              },
              "help": {
                "text": "The default OCI linux spec in oci/defaults{_linux}.go in Docker/Moby from 1.11 to current does not block /proc/acpi pathnames. The flaw allows an attacker to modify host's hardware like enabling/disabling bluetooth or turning up/down keyboard brightness.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [18.06.0-ce-rc3]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2020-15257_github.com/containerd/containerd_1.3.4",
              "shortDescription": {
                "text": "[CVE-2020-15257] github.com/containerd/containerd 1.3.4"
              },
              "help": {
                "text": "containerd is an industry-standard container runtime and is available as a daemon for Linux and Windows. In containerd before versions 1.3.9 and 1.4.3, the containerd-shim API is improperly exposed to host network containers. Access controls for the shim’s API socket verified that the connecting process had an effective UID of 0, but did not otherwise restrict access to the abstract Unix domain socket. This would allow malicious containers running in the same network namespace as the shim, with an effective UID of 0 but otherwise reduced privileges, to cause new processes to be run with elevated privileges. This vulnerability has been fixed in containerd 1.3.9 and 1.4.3. Users should update to these versions as soon as they are released. It should be noted that containers started with an old version of containerd-shim should be stopped and restarted, as running containers will continue to be vulnerable even after an upgrade. If you are not providing the ability for untrusted users to start containers in the same network namespace as the shim (typically the \"host\" network namespace, for example with docker run --net=host or hostNetwork: true in a Kubernetes pod) and run with an effective UID of 0, you are not vulnerable to this issue. If you are running containers with a vulnerable configuration, you can deny access to all abstract sockets with AppArmor by adding a line similar to deny unix addr=@**, to your policy. It is best practice to run containers with a reduced set of privileges, with a non-zero UID, and with isolated namespaces. The containerd maintainers strongly advise against sharing namespaces with the host. Reducing the set of isolation mechanisms used for a container necessarily increases that container's privilege, regardless of what container runtime is used for running that container.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.2      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.3.9], [1.4.3]   |"
              },
              "properties": {
                "security-severity": "5.2"
              }
            },
            {
              "id": "CVE-2023-45284_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-45284] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "On Windows, The IsLocal function does not correctly detect reserved device names in some cases. Reserved names followed by spaces, such as \"COM1 \", and reserved names \"COM\" and \"LPT\" followed by superscript 1, 2, or 3, are incorrectly reported as local. With fix, IsLocal now correctly reports these names as non-local.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.20.11], [1.21.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-31684_io.projectreactor.netty:reactor-netty-http_1.0.14",
              "shortDescription": {
                "text": "[CVE-2022-31684] io.projectreactor.netty:reactor-netty-http 1.0.14"
              },
              "help": {
                "text": "Reactor Netty HTTP Server, in versions 1.0.11 - 1.0.23, may log request headers in some cases of invalid HTTP requests. The logged headers may reveal valid access tokens to those with access to server logs. This may affect only invalid HTTP requests where logging at WARN level is enabled.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.3      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.0.24]   |"
              },
              "properties": {
                "security-severity": "4.3"
              }
            },
            {
              "id": "CVE-2024-24786_google.golang.org/protobuf_1.21.0",
              "shortDescription": {
                "text": "[CVE-2024-24786] google.golang.org/protobuf 1.21.0"
              },
              "help": {
                "text": "The protojson.Unmarshal function can enter an infinite loop when unmarshaling certain forms of invalid JSON. This condition can occur when unmarshaling into a message which contains a google.protobuf.Any value, or when the UnmarshalOptions.DiscardUnknown option is set.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.33.0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-24532_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-24532] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "The ScalarMult and ScalarBaseMult methods of the P256 Curve may return an incorrect result if called with some specific unreduced scalars (a scalar larger than the order of the curve). This does not impact usages of crypto/ecdsa or crypto/ecdh.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.7], [1.20.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-39326_github.com/golang/go_1.19.2",
              "shortDescription": {
                "text": "[CVE-2023-39326] github.com/golang/go 1.19.2"
              },
              "help": {
                "text": "A malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body. A malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request. Chunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2024-25710_org.apache.commons:commons-compress_1.21",
              "shortDescription": {
                "text": "[CVE-2024-25710] org.apache.commons:commons-compress 1.21"
              },
              "help": {
                "text": "Loop with Unreachable Exit Condition ('Infinite Loop') vulnerability in Apache Commons Compress.This issue affects Apache Commons Compress: from 1.3 through 1.25.0.\n\nUsers are recommended to upgrade to version 1.26.0 which fixes the issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.26.0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-45803_urllib3_1.26.8",
              "shortDescription": {
                "text": "[CVE-2023-45803] urllib3 1.26.8"
              },
              "help": {
                "text": "urllib3 is a user-friendly HTTP client library for Python. urllib3 previously wouldn't remove the HTTP request body when an HTTP redirect response using status 301, 302, or 303 after the request had its method changed from one that could accept a request body (like `POST`) to `GET` as is required by HTTP RFCs. Although this behavior is not specified in the section for redirects, it can be inferred by piecing together information from different sections and we have observed the behavior in other major HTTP client implementations like curl and web browsers. Because the vulnerability requires a previously trusted service to become compromised in order to have an impact on confidentiality we believe the exploitability of this vulnerability is low. Additionally, many users aren't putting sensitive data in HTTP request bodies, if this is the case then this vulnerability isn't exploitable. Both of the following conditions must be true to be affected by this vulnerability: 1. Using urllib3 and submitting sensitive information in the HTTP request body (such as form data or JSON) and 2. The origin service is compromised and starts redirecting using 301, 302, or 303 to a malicious peer or the redirected-to service becomes compromised. This issue has been addressed in versions 1.26.18 and 2.0.7 and users are advised to update to resolve this issue. Users unable to update should disable redirects for services that aren't expecting to respond with redirects with `redirects=False` and disable automatic redirects with `redirects=False` and handle 301, 302, and 303 redirects manually by stripping the HTTP request body.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.2      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.26.18], [2.0.7]   |"
              },
              "properties": {
                "security-severity": "4.2"
              }
            },
            {
              "id": "CVE-2022-24769_github.com/docker/docker_17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible",
              "shortDescription": {
                "text": "[CVE-2022-24769] github.com/docker/docker 17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible"
              },
              "help": {
                "text": "Moby is an open-source project created by Docker to enable and accelerate software containerization. A bug was found in Moby (Docker Engine) prior to version 20.10.14 where containers were incorrectly started with non-empty inheritable Linux process capabilities, creating an atypical Linux environment and enabling programs with inheritable file capabilities to elevate those capabilities to the permitted set during `execve(2)`. Normally, when executable programs have specified permitted file capabilities, otherwise unprivileged users and processes can execute those programs and gain the specified file capabilities up to the bounding set. Due to this bug, containers which included executable programs with inheritable file capabilities allowed otherwise unprivileged users and processes to additionally gain these inheritable file capabilities up to the container's bounding set. Containers which use Linux users and groups to perform privilege separation inside the container are most directly impacted. This bug did not affect the container security sandbox as the inheritable set never contained more capabilities than were included in the container's bounding set. This bug has been fixed in Moby (Docker Engine) 20.10.14. Running containers should be stopped, deleted, and recreated for the inheritable capabilities to be reset. This fix changes Moby (Docker Engine) behavior such that containers are started with a more typical Linux environment. As a workaround, the entry point of a container can be modified to use a utility like `capsh(1)` to drop inheritable capabilities prior to the primary process starting.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [20.10.14]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2024-36124_org.iq80.snappy:snappy_0.4",
              "shortDescription": {
                "text": "[CVE-2024-36124] org.iq80.snappy:snappy 0.4"
              },
              "help": {
                "text": "iq80 Snappy is a compression/decompression library. When uncompressing certain data, Snappy tries to read outside the bounds of the given byte arrays. Because Snappy uses the JDK class `sun.misc.Unsafe` to speed up memory access, no additional bounds checks are performed and this has similar security consequences as out-of-bounds access in C or C++, namely it can lead to non-deterministic behavior or crash the JVM. iq80 Snappy is not actively maintained anymore. As quick fix users can upgrade to version 0.5.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.5]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2024-30171_org.bouncycastle:bcprov-jdk15on_1.70",
              "shortDescription": {
                "text": "[CVE-2024-30171] org.bouncycastle:bcprov-jdk15on 1.70"
              },
              "help": {
                "text": "An issue was discovered in Bouncy Castle Java TLS API and JSSE Provider before 1.78. Timing-based leakage may occur in RSA based handshakes because of exception processing.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.78]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-24532_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2023-24532] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "The ScalarMult and ScalarBaseMult methods of the P256 Curve may return an incorrect result if called with some specific unreduced scalars (a scalar larger than the order of the curve). This does not impact usages of crypto/ecdsa or crypto/ecdh.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.7], [1.20.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-34462_io.netty:netty-handler_4.1.84.Final",
              "shortDescription": {
                "text": "[CVE-2023-34462] io.netty:netty-handler 4.1.84.Final"
              },
              "help": {
                "text": "Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers \u0026 clients. The `SniHandler` can allocate up to 16MB of heap for each channel during the TLS handshake. When the handler or the channel does not have an idle timeout, it can be used to make a TCP server using the `SniHandler` to allocate 16MB of heap. The `SniHandler` class is a handler that waits for the TLS handshake to configure a `SslHandler` according to the indicated server name by the `ClientHello` record. For this matter it allocates a `ByteBuf` using the value defined in the `ClientHello` record. Normally the value of the packet should be smaller than the handshake packet but there are not checks done here and the way the code is written, it is possible to craft a packet that makes the `SslClientHelloHandler`. This vulnerability has been fixed in version 4.1.94.Final.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [4.1.94.Final]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2018-20699_github.com/docker/docker_17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible",
              "shortDescription": {
                "text": "[CVE-2018-20699] github.com/docker/docker 17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible"
              },
              "help": {
                "text": "Docker Engine before 18.09 allows attackers to cause a denial of service (dockerd memory consumption) via a large integer in a --cpuset-mems or --cpuset-cpus value, related to daemon/daemon_unix.go, pkg/parsers/parsers.go, and pkg/sysinfo/sysinfo.go.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.9      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [18.09.0-beta5]   |"
              },
              "properties": {
                "security-severity": "4.9"
              }
            },
            {
              "id": "CVE-2020-27534_github.com/docker/docker_17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible",
              "shortDescription": {
                "text": "[CVE-2020-27534] github.com/docker/docker 17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible"
              },
              "help": {
                "text": "util/binfmt_misc/check.go in Builder in Docker Engine before 19.03.9 calls os.OpenFile with a potentially unsafe qemu-check temporary pathname, constructed with an empty first argument in an ioutil.TempDir call.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [19.03.9]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-4304_cryptography_36.0.0",
              "shortDescription": {
                "text": "[CVE-2022-4304] cryptography 36.0.0"
              },
              "help": {
                "text": "A timing based side channel exists in the OpenSSL RSA Decryption implementation\nwhich could be sufficient to recover a plaintext across a network in a\nBleichenbacher style attack. To achieve a successful decryption an attacker\nwould have to be able to send a very large number of trial messages for\ndecryption. The vulnerability affects all RSA padding modes: PKCS#1 v1.5,\nRSA-OEAP and RSASVE.\n\nFor example, in a TLS connection, RSA is commonly used by a client to send an\nencrypted pre-master secret to the server. An attacker that had observed a\ngenuine connection between a client and a server could use this flaw to send\ntrial messages to the server and record the time taken to process them. After a\nsufficiently large number of messages the attacker could recover the pre-master\nsecret used for the original connection and thus be able to decrypt the\napplication data sent over that connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [39.0.1]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-39326_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-39326] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "A malicious HTTP sender can use chunk extensions to cause a receiver reading from a request or response body to read many more bytes from the network than are in the body. A malicious HTTP client can further exploit this to cause a server to automatically read a large amount of data (up to about 1GiB) when a handler fails to read the entire body of a request. Chunk extensions are a little-used HTTP feature which permit including additional metadata in a request or response body sent using the chunked encoding. The net/http chunked encoding reader discards this metadata. A sender can exploit this by inserting a large metadata segment with each byte transferred. The chunk reader now produces an error if the ratio of real body to encoded bytes grows too small.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-39319_github.com/golang/go_1.19.2",
              "shortDescription": {
                "text": "[CVE-2023-39319] github.com/golang/go 1.19.2"
              },
              "help": {
                "text": "The html/template package does not apply the proper rules for handling occurrences of \"\u003cscript\", \"\u003c!--\", and \"\u003c/script\" within JS literals in \u003cscript\u003e contexts. This may cause the template parser to improperly consider script contexts to be terminated early, causing actions to be improperly escaped. This could be leveraged to perform an XSS attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.20.8], [1.21.1]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2020-22916_ubuntu:focal:xz-utils_5.2.4-1ubuntu1.1",
              "shortDescription": {
                "text": "[CVE-2020-22916] ubuntu:focal:xz-utils 5.2.4-1ubuntu1.1"
              },
              "help": {
                "text": "An issue discovered in XZ 5.2.5 allows attackers to cause a denial of service via decompression of a crafted file. NOTE: the vendor disputes the claims of \"endless output\" and \"denial of service\" because decompression of the 17,486 bytes always results in 114,881,179 bytes, which is often a reasonable size increase.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__163cc51dd081f81f5891885b7c4529a8c0d5fbc5d625d083bb440c53115ef2c7.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2020-22916_ubuntu:focal:liblzma5_5.2.4-1ubuntu1.1",
              "shortDescription": {
                "text": "[CVE-2020-22916] ubuntu:focal:liblzma5 5.2.4-1ubuntu1.1"
              },
              "help": {
                "text": "An issue discovered in XZ 5.2.5 allows attackers to cause a denial of service via decompression of a crafted file. NOTE: the vendor disputes the claims of \"endless output\" and \"denial of service\" because decompression of the 17,486 bytes always results in 114,881,179 bytes, which is often a reasonable size increase.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2024-2236_ubuntu:focal:libgcrypt20_1.8.5-5ubuntu1.1",
              "shortDescription": {
                "text": "[CVE-2024-2236] ubuntu:focal:libgcrypt20 1.8.5-5ubuntu1.1"
              },
              "help": {
                "text": "A timing-based side-channel flaw was found in libgcrypt's RSA implementation. This issue may allow a remote attacker to initiate a Bleichenbacher-style attack, which can lead to the decryption of RSA ciphertexts.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2021-31879_ubuntu:focal:wget_1.20.3-1ubuntu2",
              "shortDescription": {
                "text": "[CVE-2021-31879] ubuntu:focal:wget 1.20.3-1ubuntu2"
              },
              "help": {
                "text": "GNU Wget through 1.21.1 does not omit the Authorization header upon a redirect to a different origin, a related issue to CVE-2018-1000007.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Covered       | `sha256__163cc51dd081f81f5891885b7c4529a8c0d5fbc5d625d083bb440c53115ef2c7.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2024-38428_ubuntu:focal:wget_1.20.3-1ubuntu2",
              "shortDescription": {
                "text": "[CVE-2024-38428] ubuntu:focal:wget 1.20.3-1ubuntu2"
              },
              "help": {
                "text": "url.c in GNU Wget through 1.24.5 mishandles semicolons in the userinfo subcomponent of a URI, and thus there may be insecure behavior in which data that was supposed to be in the userinfo subcomponent is misinterpreted to be part of the host subcomponent.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__163cc51dd081f81f5891885b7c4529a8c0d5fbc5d625d083bb440c53115ef2c7.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-33201_org.bouncycastle:bcprov-jdk15on_1.70",
              "shortDescription": {
                "text": "[CVE-2023-33201] org.bouncycastle:bcprov-jdk15on 1.70"
              },
              "help": {
                "text": "Bouncy Castle For Java before 1.74 is affected by an LDAP injection vulnerability. The vulnerability only affects applications that use an LDAP CertStore from Bouncy Castle to validate X.509 certificates. During the certificate validation process, Bouncy Castle inserts the certificate's Subject Name into an LDAP search filter without any escaping, which leads to an LDAP injection vulnerability.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2017-11164_ubuntu:focal:libpcre3:2_8.39-12ubuntu0.1",
              "shortDescription": {
                "text": "[CVE-2017-11164] ubuntu:focal:libpcre3:2 8.39-12ubuntu0.1"
              },
              "help": {
                "text": "In PCRE 8.41, the OP_KETRMAX feature in the match function in pcre_exec.c allows stack exhaustion (uncontrolled recursion) when processing a crafted regular expression.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Applicable       | `sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-5752_pip_22.0.4",
              "shortDescription": {
                "text": "[CVE-2023-5752] pip 22.0.4"
              },
              "help": {
                "text": "When installing a package from a Mercurial VCS URL  (ie \"pip install \nhg+...\") with pip prior to v23.3, the specified Mercurial revision could\n be used to inject arbitrary configuration options to the \"hg clone\" \ncall (ie \"--config\"). Controlling the Mercurial configuration can modify\n how and which repository is installed. This vulnerability does not \naffect users who aren't installing from Mercurial.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.3      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [23.3]   |"
              },
              "properties": {
                "security-severity": "3.3"
              }
            },
            {
              "id": "CVE-2024-34062_tqdm_4.63.0",
              "shortDescription": {
                "text": "[CVE-2024-34062] tqdm 4.63.0"
              },
              "help": {
                "text": "tqdm is an open source progress bar for Python and CLI. Any optional non-boolean CLI arguments (e.g. `--delim`, `--buf-size`, `--manpath`) are passed through python's `eval`, allowing arbitrary code execution. This issue is only locally exploitable and had been addressed in release version 4.66.3. All users are advised to upgrade. There are no known workarounds for this vulnerability.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.9      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [4.66.3]   |"
              },
              "properties": {
                "security-severity": "3.9"
              }
            },
            {
              "id": "CVE-2022-30629_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2022-30629] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "Non-random values for ticket_age_add in session tickets in crypto/tls before Go 1.17.11 and Go 1.18.3 allow an attacker that can observe TLS handshakes to correlate successive connections by comparing ticket ages during session resumption.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.1      | Not Covered       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "3.1"
              }
            },
            {
              "id": "CVE-2024-2511_ubuntu:focal:libssl1.1_1.1.1f-1ubuntu2.22",
              "shortDescription": {
                "text": "[CVE-2024-2511] ubuntu:focal:libssl1.1 1.1.1f-1ubuntu2.22"
              },
              "help": {
                "text": "Issue summary: Some non-default TLS server configurations can cause unbounded\nmemory growth when processing TLSv1.3 sessions\n\nImpact summary: An attacker may exploit certain server configurations to trigger\nunbounded memory growth that would lead to a Denial of Service\n\nThis problem can occur in TLSv1.3 if the non-default SSL_OP_NO_TICKET option is\nbeing used (but not if early_data support is also configured and the default\nanti-replay protection is in use). In this case, under certain conditions, the\nsession cache can get into an incorrect state and it will fail to flush properly\nas it fills. The session cache will continue to grow in an unbounded manner. A\nmalicious client could deliberately create the scenario for this failure to\nforce a Denial of Service. It may also happen by accident in normal operation.\n\nThis issue only affects TLS servers supporting TLSv1.3. It does not affect TLS\nclients.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue. OpenSSL\n1.0.2 is also not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__163cc51dd081f81f5891885b7c4529a8c0d5fbc5d625d083bb440c53115ef2c7.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-50495_ubuntu:focal:ncurses-base_6.2-0ubuntu2.1",
              "shortDescription": {
                "text": "[CVE-2023-50495] ubuntu:focal:ncurses-base 6.2-0ubuntu2.1"
              },
              "help": {
                "text": "NCurse v6.4-20230418 was discovered to contain a segmentation fault via the component _nc_wrap_entry().",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-29383_ubuntu:focal:login:1_4.8.1-1ubuntu5.20.04.5",
              "shortDescription": {
                "text": "[CVE-2023-29383] ubuntu:focal:login:1 4.8.1-1ubuntu5.20.04.5"
              },
              "help": {
                "text": "In Shadow 4.13, it is possible to inject control characters into fields provided to the SUID program chfn (change finger). Although it is not possible to exploit this directly (e.g., adding a new user fails because \\n is in the block list), it is possible to misrepresent the /etc/passwd file when viewed. Use of \\r manipulations and Unicode characters to work around blocking of the : character make it possible to give the impression that a new user has been added. In other words, an adversary may be able to convince a system administrator to take the system offline (an indirect, social-engineered denial of service) by demonstrating that \"cat /etc/passwd\" shows a rogue user account.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.3      | Not Covered       | `sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "3.3"
              }
            },
            {
              "id": "CVE-2016-20013_ubuntu:focal:libc6_2.31-0ubuntu9.16",
              "shortDescription": {
                "text": "[CVE-2016-20013] ubuntu:focal:libc6 2.31-0ubuntu9.16"
              },
              "help": {
                "text": "sha256crypt and sha512crypt through 0.6 allow attackers to cause a denial of service (CPU consumption) because the algorithm's runtime is proportional to the square of the length of the password.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-50495_ubuntu:focal:libncursesw6_6.2-0ubuntu2.1",
              "shortDescription": {
                "text": "[CVE-2023-50495] ubuntu:focal:libncursesw6 6.2-0ubuntu2.1"
              },
              "help": {
                "text": "NCurse v6.4-20230418 was discovered to contain a segmentation fault via the component _nc_wrap_entry().",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-45918_ubuntu:focal:ncurses-base_6.2-0ubuntu2.1",
              "shortDescription": {
                "text": "[CVE-2023-45918] ubuntu:focal:ncurses-base 6.2-0ubuntu2.1"
              },
              "help": {
                "text": "ncurses 6.4-20230610 has a NULL pointer dereference in tgetstr in tinfo/lib_termcap.c.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-50495_ubuntu:focal:libtinfo6_6.2-0ubuntu2.1",
              "shortDescription": {
                "text": "[CVE-2023-50495] ubuntu:focal:libtinfo6 6.2-0ubuntu2.1"
              },
              "help": {
                "text": "NCurse v6.4-20230418 was discovered to contain a segmentation fault via the component _nc_wrap_entry().",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2016-2781_ubuntu:focal:coreutils_8.30-3ubuntu2",
              "shortDescription": {
                "text": "[CVE-2016-2781] ubuntu:focal:coreutils 8.30-3ubuntu2"
              },
              "help": {
                "text": "chroot in GNU coreutils, when used with --userspec, allows local users to escape to the parent session via a crafted TIOCSTI ioctl call, which pushes characters to the terminal's input buffer.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-50495_ubuntu:focal:libncurses6_6.2-0ubuntu2.1",
              "shortDescription": {
                "text": "[CVE-2023-50495] ubuntu:focal:libncurses6 6.2-0ubuntu2.1"
              },
              "help": {
                "text": "NCurse v6.4-20230418 was discovered to contain a segmentation fault via the component _nc_wrap_entry().",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-45918_ubuntu:focal:libtinfo6_6.2-0ubuntu2.1",
              "shortDescription": {
                "text": "[CVE-2023-45918] ubuntu:focal:libtinfo6 6.2-0ubuntu2.1"
              },
              "help": {
                "text": "ncurses 6.4-20230610 has a NULL pointer dereference in tgetstr in tinfo/lib_termcap.c.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-45918_ubuntu:focal:ncurses-bin_6.2-0ubuntu2.1",
              "shortDescription": {
                "text": "[CVE-2023-45918] ubuntu:focal:ncurses-bin 6.2-0ubuntu2.1"
              },
              "help": {
                "text": "ncurses 6.4-20230610 has a NULL pointer dereference in tgetstr in tinfo/lib_termcap.c.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2016-20013_ubuntu:focal:libc-bin_2.31-0ubuntu9.16",
              "shortDescription": {
                "text": "[CVE-2016-20013] ubuntu:focal:libc-bin 2.31-0ubuntu9.16"
              },
              "help": {
                "text": "sha256crypt and sha512crypt through 0.6 allow attackers to cause a denial of service (CPU consumption) because the algorithm's runtime is proportional to the square of the length of the password.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2013-4235_ubuntu:focal:login:1_4.8.1-1ubuntu5.20.04.5",
              "shortDescription": {
                "text": "[CVE-2013-4235] ubuntu:focal:login:1 4.8.1-1ubuntu5.20.04.5"
              },
              "help": {
                "text": "shadow: TOCTOU (time-of-check time-of-use) race condition when copying and removing directory trees",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.7      | Not Covered       | `sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "4.7"
              }
            },
            {
              "id": "CVE-2022-3219_ubuntu:focal:gpgv_2.2.19-3ubuntu2.2",
              "shortDescription": {
                "text": "[CVE-2022-3219] ubuntu:focal:gpgv 2.2.19-3ubuntu2.2"
              },
              "help": {
                "text": "GnuPG can be made to spin on a relatively small input by (for example) crafting a public key with thousands of signatures attached, compressed down to just a few KB.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.3      | Not Covered       | `sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "3.3"
              }
            },
            {
              "id": "CVE-2023-45918_ubuntu:focal:libncurses6_6.2-0ubuntu2.1",
              "shortDescription": {
                "text": "[CVE-2023-45918] ubuntu:focal:libncurses6 6.2-0ubuntu2.1"
              },
              "help": {
                "text": "ncurses 6.4-20230610 has a NULL pointer dereference in tgetstr in tinfo/lib_termcap.c.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-7008_ubuntu:focal:libsystemd0_245.4-4ubuntu3.23",
              "shortDescription": {
                "text": "[CVE-2023-7008] ubuntu:focal:libsystemd0 245.4-4ubuntu3.23"
              },
              "help": {
                "text": "A vulnerability was found in systemd-resolved. This issue may allow systemd-resolved to accept records of DNSSEC-signed domains even when they have no signature, allowing man-in-the-middles (or the upstream DNS resolver) to manipulate records.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2013-4235_ubuntu:focal:passwd:1_4.8.1-1ubuntu5.20.04.5",
              "shortDescription": {
                "text": "[CVE-2013-4235] ubuntu:focal:passwd:1 4.8.1-1ubuntu5.20.04.5"
              },
              "help": {
                "text": "shadow: TOCTOU (time-of-check time-of-use) race condition when copying and removing directory trees",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.7      | Not Covered       | `sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "4.7"
              }
            },
            {
              "id": "CVE-2023-50495_ubuntu:focal:ncurses-bin_6.2-0ubuntu2.1",
              "shortDescription": {
                "text": "[CVE-2023-50495] ubuntu:focal:ncurses-bin 6.2-0ubuntu2.1"
              },
              "help": {
                "text": "NCurse v6.4-20230418 was discovered to contain a segmentation fault via the component _nc_wrap_entry().",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2024-2511_ubuntu:focal:openssl_1.1.1f-1ubuntu2.22",
              "shortDescription": {
                "text": "[CVE-2024-2511] ubuntu:focal:openssl 1.1.1f-1ubuntu2.22"
              },
              "help": {
                "text": "Issue summary: Some non-default TLS server configurations can cause unbounded\nmemory growth when processing TLSv1.3 sessions\n\nImpact summary: An attacker may exploit certain server configurations to trigger\nunbounded memory growth that would lead to a Denial of Service\n\nThis problem can occur in TLSv1.3 if the non-default SSL_OP_NO_TICKET option is\nbeing used (but not if early_data support is also configured and the default\nanti-replay protection is in use). In this case, under certain conditions, the\nsession cache can get into an incorrect state and it will fail to flush properly\nas it fills. The session cache will continue to grow in an unbounded manner. A\nmalicious client could deliberately create the scenario for this failure to\nforce a Denial of Service. It may also happen by accident in normal operation.\n\nThis issue only affects TLS servers supporting TLSv1.3. It does not affect TLS\nclients.\n\nThe FIPS modules in 3.2, 3.1 and 3.0 are not affected by this issue. OpenSSL\n1.0.2 is also not affected by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__163cc51dd081f81f5891885b7c4529a8c0d5fbc5d625d083bb440c53115ef2c7.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-45918_ubuntu:focal:libncursesw6_6.2-0ubuntu2.1",
              "shortDescription": {
                "text": "[CVE-2023-45918] ubuntu:focal:libncursesw6 6.2-0ubuntu2.1"
              },
              "help": {
                "text": "ncurses 6.4-20230610 has a NULL pointer dereference in tgetstr in tinfo/lib_termcap.c.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-29383_ubuntu:focal:passwd:1_4.8.1-1ubuntu5.20.04.5",
              "shortDescription": {
                "text": "[CVE-2023-29383] ubuntu:focal:passwd:1 4.8.1-1ubuntu5.20.04.5"
              },
              "help": {
                "text": "In Shadow 4.13, it is possible to inject control characters into fields provided to the SUID program chfn (change finger). Although it is not possible to exploit this directly (e.g., adding a new user fails because \\n is in the block list), it is possible to misrepresent the /etc/passwd file when viewed. Use of \\r manipulations and Unicode characters to work around blocking of the : character make it possible to give the impression that a new user has been added. In other words, an adversary may be able to convince a system administrator to take the system offline (an indirect, social-engineered denial of service) by demonstrating that \"cat /etc/passwd\" shows a rogue user account.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.3      | Not Covered       | `sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "3.3"
              }
            },
            {
              "id": "CVE-2023-7008_ubuntu:focal:libudev1_245.4-4ubuntu3.23",
              "shortDescription": {
                "text": "[CVE-2023-7008] ubuntu:focal:libudev1 245.4-4ubuntu3.23"
              },
              "help": {
                "text": "A vulnerability was found in systemd-resolved. This issue may allow systemd-resolved to accept records of DNSSEC-signed domains even when they have no signature, allowing man-in-the-middles (or the upstream DNS resolver) to manipulate records.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-29402_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2023-29402] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "The go command may generate unexpected code at build time when using cgo. This may result in unexpected behavior when running a go program which uses cgo. This may occur when running an untrusted module which contains directories with newline characters in their names. Modules which are retrieved using the go command, i.e. via \"go get\", are not affected (modules retrieved using GOPATH-mode, i.e. GO111MODULE=off, may be affected).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29404_github.com/golang/go_1.19.2",
              "shortDescription": {
                "text": "[CVE-2023-29404] github.com/golang/go 1.19.2"
              },
              "help": {
                "text": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. The arguments for a number of flags which are non-optional are incorrectly considered optional, allowing disallowed flags to be smuggled through the LDFLAGS sanitization. This affects usage of both the gc and gccgo compilers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-24540_github.com/golang/go_1.19.2",
              "shortDescription": {
                "text": "[CVE-2023-24540] github.com/golang/go 1.19.2"
              },
              "help": {
                "text": "Not all valid JavaScript whitespace characters are considered to be whitespace. Templates containing whitespace characters outside of the character set \"\\t\\n\\f\\r\\u0020\\u2028\\u2029\" in JavaScript contexts that also contain actions may not be properly sanitized during execution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-24538_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-24538] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "Templates do not properly consider backticks (`) as Javascript string delimiters, and do not escape them as expected. Backticks are used, since ES6, for JS template literals. If a template contains a Go template action within a Javascript template literal, the contents of the action can be used to terminate the literal, injecting arbitrary Javascript code into the Go template. As ES6 template literals are rather complex, and themselves can do string interpolation, the decision was made to simply disallow Go template actions from being used inside of them (e.g. \"var a = {{.}}\"), since there is no obviously safe way to allow this behavior. This takes the same approach as github.com/google/safehtml. With fix, Template.Parse returns an Error when it encounters templates like this, with an ErrorCode of value 12. This ErrorCode is currently unexported, but will be exported in the release of Go 1.21. Users who rely on the previous behavior can re-enable it using the GODEBUG flag jstmpllitinterp=1, with the caveat that backticks will now be escaped. This should be used with caution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-24538_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2023-24538] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "Templates do not properly consider backticks (`) as Javascript string delimiters, and do not escape them as expected. Backticks are used, since ES6, for JS template literals. If a template contains a Go template action within a Javascript template literal, the contents of the action can be used to terminate the literal, injecting arbitrary Javascript code into the Go template. As ES6 template literals are rather complex, and themselves can do string interpolation, the decision was made to simply disallow Go template actions from being used inside of them (e.g. \"var a = {{.}}\"), since there is no obviously safe way to allow this behavior. This takes the same approach as github.com/google/safehtml. With fix, Template.Parse returns an Error when it encounters templates like this, with an ErrorCode of value 12. This ErrorCode is currently unexported, but will be exported in the release of Go 1.21. Users who rely on the previous behavior can re-enable it using the GODEBUG flag jstmpllitinterp=1, with the caveat that backticks will now be escaped. This should be used with caution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29404_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2023-29404] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. The arguments for a number of flags which are non-optional are incorrectly considered optional, allowing disallowed flags to be smuggled through the LDFLAGS sanitization. This affects usage of both the gc and gccgo compilers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-23806_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2022-23806] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "Curve.IsOnCurve in crypto/elliptic in Go before 1.16.14 and 1.17.x before 1.17.7 can incorrectly return true in situations with a big.Int value that is not a valid field element.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.1      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.16.14], [1.17.7]   |"
              },
              "properties": {
                "security-severity": "9.1"
              }
            },
            {
              "id": "CVE-2021-38297_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2021-38297] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "Go before 1.16.9 and 1.17.x before 1.17.2 has a Buffer Overflow via large arguments in a function invocation from a WASM module, when GOARCH=wasm GOOS=js is used.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.16.9], [1.17.2]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29402_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-29402] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "The go command may generate unexpected code at build time when using cgo. This may result in unexpected behavior when running a go program which uses cgo. This may occur when running an untrusted module which contains directories with newline characters in their names. Modules which are retrieved using the go command, i.e. via \"go get\", are not affected (modules retrieved using GOPATH-mode, i.e. GO111MODULE=off, may be affected).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29404_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-29404] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. The arguments for a number of flags which are non-optional are incorrectly considered optional, allowing disallowed flags to be smuggled through the LDFLAGS sanitization. This affects usage of both the gc and gccgo compilers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29405_github.com/golang/go_1.19.2",
              "shortDescription": {
                "text": "[CVE-2023-29405] github.com/golang/go 1.19.2"
              },
              "help": {
                "text": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. Flags containing embedded spaces are mishandled, allowing disallowed flags to be smuggled through the LDFLAGS sanitization by including them in the argument of another flag. This only affects usage of the gccgo compiler.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-24540_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2023-24540] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "Not all valid JavaScript whitespace characters are considered to be whitespace. Templates containing whitespace characters outside of the character set \"\\t\\n\\f\\r\\u0020\\u2028\\u2029\" in JavaScript contexts that also contain actions may not be properly sanitized during execution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-37920_certifi_2022.9.24",
              "shortDescription": {
                "text": "[CVE-2023-37920] certifi 2022.9.24"
              },
              "help": {
                "text": "Certifi is a curated collection of Root Certificates for validating the trustworthiness of SSL certificates while verifying the identity of TLS hosts. Certifi prior to version 2023.07.22 recognizes \"e-Tugra\" root certificates. e-Tugra's root certificates were subject to an investigation prompted by reporting of security issues in their systems. Certifi 2023.07.22 removes root certificates from \"e-Tugra\" from the root store.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [2023.7.22]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-24538_github.com/golang/go_1.19.2",
              "shortDescription": {
                "text": "[CVE-2023-24538] github.com/golang/go 1.19.2"
              },
              "help": {
                "text": "Templates do not properly consider backticks (`) as Javascript string delimiters, and do not escape them as expected. Backticks are used, since ES6, for JS template literals. If a template contains a Go template action within a Javascript template literal, the contents of the action can be used to terminate the literal, injecting arbitrary Javascript code into the Go template. As ES6 template literals are rather complex, and themselves can do string interpolation, the decision was made to simply disallow Go template actions from being used inside of them (e.g. \"var a = {{.}}\"), since there is no obviously safe way to allow this behavior. This takes the same approach as github.com/google/safehtml. With fix, Template.Parse returns an Error when it encounters templates like this, with an ErrorCode of value 12. This ErrorCode is currently unexported, but will be exported in the release of Go 1.21. Users who rely on the previous behavior can re-enable it using the GODEBUG flag jstmpllitinterp=1, with the caveat that backticks will now be escaped. This should be used with caution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-24540_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-24540] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "Not all valid JavaScript whitespace characters are considered to be whitespace. Templates containing whitespace characters outside of the character set \"\\t\\n\\f\\r\\u0020\\u2028\\u2029\" in JavaScript contexts that also contain actions may not be properly sanitized during execution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29405_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2023-29405] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. Flags containing embedded spaces are mishandled, allowing disallowed flags to be smuggled through the LDFLAGS sanitization by including them in the argument of another flag. This only affects usage of the gccgo compiler.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29402_github.com/golang/go_1.19.2",
              "shortDescription": {
                "text": "[CVE-2023-29402] github.com/golang/go 1.19.2"
              },
              "help": {
                "text": "The go command may generate unexpected code at build time when using cgo. This may result in unexpected behavior when running a go program which uses cgo. This may occur when running an untrusted module which contains directories with newline characters in their names. Modules which are retrieved using the go command, i.e. via \"go get\", are not affected (modules retrieved using GOPATH-mode, i.e. GO111MODULE=off, may be affected).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-29405_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-29405] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "The go command may execute arbitrary code at build time when using cgo. This may occur when running \"go get\" on a malicious module, or when running any other command which builds untrusted code. This is can by triggered by linker flags, specified via a \"#cgo LDFLAGS\" directive. Flags containing embedded spaces are mishandled, allowing disallowed flags to be smuggled through the LDFLAGS sanitization by including them in the argument of another flag. This only affects usage of the gccgo compiler.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-44487_golang.org/x/net_0.0.0-20201110031124-69a78807bb2b",
              "shortDescription": {
                "text": "[CVE-2023-44487] golang.org/x/net 0.0.0-20201110031124-69a78807bb2b"
              },
              "help": {
                "text": "The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45287_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2023-45287] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "Before Go 1.20, the RSA based TLS key exchanges used the math/big library, which is not constant time. RSA blinding was applied to prevent timing attacks, but analysis shows this may not have been fully effective. In particular it appears as if the removal of PKCS#1 padding may leak timing information, which in turn could be used to recover session key bits. In Go 1.20, the crypto/tls library switched to a fully constant time RSA implementation, which we do not believe exhibits any timing side channels.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.20.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24536_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-24536] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "Multipart form parsing can consume large amounts of CPU and memory when processing form inputs containing very large numbers of parts. This stems from several causes: 1. mime/multipart.Reader.ReadForm limits the total memory a parsed multipart form can consume. ReadForm can undercount the amount of memory consumed, leading it to accept larger inputs than intended. 2. Limiting total memory does not account for increased pressure on the garbage collector from large numbers of small allocations in forms with many parts. 3. ReadForm can allocate a large number of short-lived buffers, further increasing pressure on the garbage collector. The combination of these factors can permit an attacker to cause an program that parses multipart forms to consume large amounts of CPU and memory, potentially resulting in a denial of service. This affects programs that use mime/multipart.Reader.ReadForm, as well as form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. With fix, ReadForm now does a better job of estimating the memory consumption of parsed forms, and performs many fewer short-lived allocations. In addition, the fixed mime/multipart.Reader imposes the following limits on the size of parsed forms: 1. Forms parsed with ReadForm may contain no more than 1000 parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxparts=. 2. Form parts parsed with NextPart and NextRawPart may contain no more than 10,000 header fields. In addition, forms parsed with ReadForm may contain no more than 10,000 header fields across all parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxheaders=.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-27664_golang.org/x/net_0.0.0-20201110031124-69a78807bb2b",
              "shortDescription": {
                "text": "[CVE-2022-27664] golang.org/x/net 0.0.0-20201110031124-69a78807bb2b"
              },
              "help": {
                "text": "In net/http in Go before 1.18.6 and 1.19.x before 1.19.1, attackers can cause a denial of service because an HTTP/2 connection can hang during closing if shutdown were preempted by a fatal error.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.0.0-20220906165146-f3363e06e74c]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24537_github.com/golang/go_1.19.2",
              "shortDescription": {
                "text": "[CVE-2023-24537] github.com/golang/go 1.19.2"
              },
              "help": {
                "text": "Calling any of the Parse functions on Go source code which contains //line directives with very large line numbers can cause an infinite loop due to integer overflow.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41721_golang.org/x/net_0.0.0-20220728211354-c7608f3a8462",
              "shortDescription": {
                "text": "[CVE-2022-41721] golang.org/x/net 0.0.0-20220728211354-c7608f3a8462"
              },
              "help": {
                "text": "A request smuggling attack is possible when using MaxBytesHandler. When using MaxBytesHandler, the body of an HTTP request is not fully consumed. When the server attempts to read HTTP2 frames from the connection, it will instead be reading the body of the HTTP request, which could be attacker-manipulated to represent arbitrary HTTP2 requests.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.1.1-0.20221104162952-702349b0e862]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-32149_golang.org/x/text_0.3.5",
              "shortDescription": {
                "text": "[CVE-2022-32149] golang.org/x/text 0.3.5"
              },
              "help": {
                "text": "An attacker may cause a denial of service by crafting an Accept-Language header which ParseAcceptLanguage will take significant time to parse.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.3.8]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-33194_golang.org/x/net_0.0.0-20201110031124-69a78807bb2b",
              "shortDescription": {
                "text": "[CVE-2021-33194] golang.org/x/net 0.0.0-20201110031124-69a78807bb2b"
              },
              "help": {
                "text": "golang.org/x/net before v0.0.0-20210520170846-37e1c6afe023 allows attackers to cause a denial of service (infinite loop) via crafted ParseFragment input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.0.0-20210520170846-37e1c6afe023]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-23491_certifi_2022.9.24",
              "shortDescription": {
                "text": "[CVE-2022-23491] certifi 2022.9.24"
              },
              "help": {
                "text": "Certifi is a curated collection of Root Certificates for validating the trustworthiness of SSL certificates while verifying the identity of TLS hosts. Certifi 2022.12.07 removes root certificates from \"TrustCor\" from the root store. These are in the process of being removed from Mozilla's trust store. TrustCor's root certificates are being removed pursuant to an investigation prompted by media reporting that TrustCor's ownership also operated a business that produced spyware. Conclusions of Mozilla's investigation can be found in the linked google group discussion.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [2022.12.07]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45287_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-45287] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "Before Go 1.20, the RSA based TLS key exchanges used the math/big library, which is not constant time. RSA blinding was applied to prevent timing attacks, but analysis shows this may not have been fully effective. In particular it appears as if the removal of PKCS#1 padding may leak timing information, which in turn could be used to recover session key bits. In Go 1.20, the crypto/tls library switched to a fully constant time RSA implementation, which we do not believe exhibits any timing side channels.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.20.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-43565_golang.org/x/crypto_0.0.0-20210322153248-0c34fe9e7dc2",
              "shortDescription": {
                "text": "[CVE-2021-43565] golang.org/x/crypto 0.0.0-20210322153248-0c34fe9e7dc2"
              },
              "help": {
                "text": "The x/crypto/ssh package before 0.0.0-20211202192323-5770296d904e of golang.org/x/crypto allows an attacker to panic an SSH server.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.0.0-20211202192323-5770296d904e]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-43565_golang.org/x/crypto_0.0.0-20210314154223-e6e6c4f2bb5b",
              "shortDescription": {
                "text": "[CVE-2021-43565] golang.org/x/crypto 0.0.0-20210314154223-e6e6c4f2bb5b"
              },
              "help": {
                "text": "The x/crypto/ssh package before 0.0.0-20211202192323-5770296d904e of golang.org/x/crypto allows an attacker to panic an SSH server.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.0.0-20211202192323-5770296d904e]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-32189_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2022-32189] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "A too-short encoded message can cause a panic in Float.GobDecode and Rat GobDecode in math/big in Go before 1.17.13 and 1.18.5, potentially allowing a denial of service.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.17.13], [1.18.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-32149_golang.org/x/text_0.3.6",
              "shortDescription": {
                "text": "[CVE-2022-32149] golang.org/x/text 0.3.6"
              },
              "help": {
                "text": "An attacker may cause a denial of service by crafting an Accept-Language header which ParseAcceptLanguage will take significant time to parse.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.3.8]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0215_cryptography_36.0.0",
              "shortDescription": {
                "text": "[CVE-2023-0215] cryptography 36.0.0"
              },
              "help": {
                "text": "The public API function BIO_new_NDEF is a helper function used for streaming\nASN.1 data via a BIO. It is primarily used internally to OpenSSL to support the\nSMIME, CMS and PKCS7 streaming capabilities, but may also be called directly by\nend user applications.\n\nThe function receives a BIO from the caller, prepends a new BIO_f_asn1 filter\nBIO onto the front of it to form a BIO chain, and then returns the new head of\nthe BIO chain to the caller. Under certain conditions, for example if a CMS\nrecipient public key is invalid, the new filter BIO is freed and the function\nreturns a NULL result indicating a failure. However, in this case, the BIO chain\nis not properly cleaned up and the BIO passed by the caller still retains\ninternal pointers to the previously freed filter BIO. If the caller then goes on\nto call BIO_pop() on the BIO then a use-after-free will occur. This will most\nlikely result in a crash.\n\n\n\nThis scenario occurs directly in the internal function B64_write_ASN1() which\nmay cause BIO_new_NDEF() to be called and will subsequently call BIO_pop() on\nthe BIO. This internal function is in turn called by the public API functions\nPEM_write_bio_ASN1_stream, PEM_write_bio_CMS_stream, PEM_write_bio_PKCS7_stream,\nSMIME_write_ASN1, SMIME_write_CMS and SMIME_write_PKCS7.\n\nOther public API functions that may be impacted by this include\ni2d_ASN1_bio_stream, BIO_new_CMS, BIO_new_PKCS7, i2d_CMS_bio_stream and\ni2d_PKCS7_bio_stream.\n\nThe OpenSSL cms and smime command line applications are similarly affected.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [39.0.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-27191_golang.org/x/crypto_0.0.0-20190308221718-c2843e01d9a2",
              "shortDescription": {
                "text": "[CVE-2022-27191] golang.org/x/crypto 0.0.0-20190308221718-c2843e01d9a2"
              },
              "help": {
                "text": "The golang.org/x/crypto/ssh package before 0.0.0-20220314234659-1baeb1ce4c0b for Go allows an attacker to crash a server in certain circumstances involving AddHostKey.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.0.0-20220314234659-1baeb1ce4c0b]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41724_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2022-41724] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "Large handshake records may cause panics in crypto/tls. Both clients and servers may send large TLS handshake records which cause servers and clients, respectively, to panic when attempting to construct responses. This affects all TLS 1.3 clients, TLS 1.2 clients which explicitly enable session resumption (by setting Config.ClientSessionCache to a non-nil value), and TLS 1.3 servers which request client certificates (by setting Config.ClientAuth \u003e= RequestClientCert).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45283_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2023-45283] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "The filepath package does not recognize paths with a \\??\\ prefix as special. On Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x. Before fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b. Similarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b. In addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name. UPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.20.11], [1.20.12], [1.21.4], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24539_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-24539] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "Angle brackets (\u003c\u003e) are not considered dangerous characters when inserted into CSS contexts. Templates containing multiple actions separated by a '/' character can result in unexpectedly closing the CSS context and allowing for injection of unexpected HTML, if executed with untrusted input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.3      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2022-28948_gopkg.in/yaml.v3_3.0.0-20200615113413-eeeca48fe776",
              "shortDescription": {
                "text": "[CVE-2022-28948] gopkg.in/yaml.v3 3.0.0-20200615113413-eeeca48fe776"
              },
              "help": {
                "text": "An issue in the Unmarshal function in Go-Yaml v3 causes the program to crash when attempting to deserialize invalid input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [3.0.0-20220521103104-8f96da9f5d5e]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-2879_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2022-2879] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "Reader.Read does not set a limit on the maximum size of file headers. A maliciously crafted archive could cause Read to allocate unbounded amounts of memory, potentially causing resource exhaustion or panics. After fix, Reader.Read limits the maximum size of header blocks to 1 MiB.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.18.7], [1.19.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-40152_com.fasterxml.woodstox:woodstox-core_6.2.7",
              "shortDescription": {
                "text": "[CVE-2022-40152] com.fasterxml.woodstox:woodstox-core 6.2.7"
              },
              "help": {
                "text": "Those using Woodstox to parse XML data may be vulnerable to Denial of Service attacks (DOS) if DTD support is enabled. If the parser is running on user supplied input, an attacker may supply content that causes the parser to crash by stackoverflow. This effect may support a denial of service attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [5.4.0], [6.4.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30631_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2022-30631] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "Uncontrolled recursion in Reader.Read in compress/gzip before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via an archive containing a large number of concatenated 0-length compressed files.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-44487_google.golang.org/grpc_1.33.1",
              "shortDescription": {
                "text": "[CVE-2023-44487] google.golang.org/grpc 1.33.1"
              },
              "help": {
                "text": "The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.56.3], [1.57.1], [1.58.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-29403_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-29403] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "On Unix platforms, the Go runtime does not behave differently when a binary is run with the setuid/setgid bits. This can be dangerous in certain cases, such as when dumping memory state, or assuming the status of standard i/o file descriptors. If a setuid/setgid binary is executed with standard I/O file descriptors closed, opening any files can result in unexpected content being read or written with elevated privileges. Similarly, if a setuid/setgid program is terminated, either via panic or signal, it may leak the contents of its registers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2023-45285_github.com/golang/go_1.19.2",
              "shortDescription": {
                "text": "[CVE-2023-45285] github.com/golang/go 1.19.2"
              },
              "help": {
                "text": "Using go get to fetch a module with the \".git\" suffix may unexpectedly fallback to the insecure \"git://\" protocol if the module is unavailable via the secure \"https://\" and \"git+ssh://\" protocols, even if GOINSECURE is not set for said module. This only affects users who are not using the module proxy and are fetching modules directly (i.e. GOPROXY=off).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-24675_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2022-24675] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "encoding/pem in Go before 1.17.9 and 1.18.x before 1.18.1 has a Decode stack overflow via a large amount of PEM data.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.17.9], [1.18.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-28131_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2022-28131] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "Uncontrolled recursion in Decoder.Skip in encoding/xml before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a deeply nested XML document.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45283_github.com/golang/go_1.19.2",
              "shortDescription": {
                "text": "[CVE-2023-45283] github.com/golang/go 1.19.2"
              },
              "help": {
                "text": "The filepath package does not recognize paths with a \\??\\ prefix as special. On Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x. Before fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b. Similarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b. In addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name. UPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.20.11], [1.20.12], [1.21.4], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41722_github.com/golang/go_1.19.2",
              "shortDescription": {
                "text": "[CVE-2022-41722] github.com/golang/go 1.19.2"
              },
              "help": {
                "text": "A path traversal vulnerability exists in filepath.Clean on Windows. On Windows, the filepath.Clean function could transform an invalid path such as \"a/../c:/b\" into the valid path \"c:\\b\". This transformation of a relative (if invalid) path into an absolute path could enable a directory traversal attack. After fix, the filepath.Clean function transforms this path into the relative (but still invalid) path \".\\c:\\b\".",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-32149_golang.org/x/text_0.3.7",
              "shortDescription": {
                "text": "[CVE-2022-32149] golang.org/x/text 0.3.7"
              },
              "help": {
                "text": "An attacker may cause a denial of service by crafting an Accept-Language header which ParseAcceptLanguage will take significant time to parse.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.3.8]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-21698_github.com/prometheus/client_golang_1.10.0",
              "shortDescription": {
                "text": "[CVE-2022-21698] github.com/prometheus/client_golang 1.10.0"
              },
              "help": {
                "text": "client_golang is the instrumentation library for Go applications in Prometheus, and the promhttp package in client_golang provides tooling around HTTP servers and clients. In client_golang prior to version 1.11.1, HTTP server is susceptible to a Denial of Service through unbounded cardinality, and potential memory exhaustion, when handling requests with non-standard HTTP methods. In order to be affected, an instrumented software must use any of `promhttp.InstrumentHandler*` middleware except `RequestsInFlight`; not filter any specific methods (e.g GET) before middleware; pass metric with `method` label name to our middleware; and not have any firewall/LB/proxy that filters away requests with unknown `method`. client_golang version 1.11.1 contains a patch for this issue. Several workarounds are available, including removing the `method` label name from counter/gauge used in the InstrumentHandler; turning off affected promhttp handlers; adding custom middleware before promhttp handler that will sanitize the request method given by Go http.Request; and using a reverse proxy or web application firewall, configured to only allow a limited set of methods.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.11.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-39323_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2023-39323] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "Line directives (\"//line\") can be used to bypass the restrictions on \"//go:cgo_\" directives, allowing blocked linker and compiler flags to be passed during compilation. This can result in unexpected execution of arbitrary code when running \"go build\". The line directive requires the absolute path of the file in which the directive lives, which makes exploiting this issue significantly more complex.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.20.9], [1.21.2]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2020-9283_golang.org/x/crypto_0.0.0-20190308221718-c2843e01d9a2",
              "shortDescription": {
                "text": "[CVE-2020-9283] golang.org/x/crypto 0.0.0-20190308221718-c2843e01d9a2"
              },
              "help": {
                "text": "golang.org/x/crypto before v0.0.0-20200220183623-bac4c82f6975 for Go allows a panic during signature verification in the golang.org/x/crypto/ssh package. A client can attack an SSH server that accepts public keys. Also, a server can attack any SSH client.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.0.0-20200220183623-bac4c82f6975]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-28327_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2022-28327] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "The generic P-256 feature in crypto/elliptic in Go before 1.17.9 and 1.18.x before 1.18.1 allows a panic via long scalar input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.17.9], [1.18.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-3996_cryptography_36.0.0",
              "shortDescription": {
                "text": "[CVE-2022-3996] cryptography 36.0.0"
              },
              "help": {
                "text": "If an X.509 certificate contains a malformed policy constraint and\npolicy processing is enabled, then a write lock will be taken twice\nrecursively.  On some operating systems (most widely: Windows) this\nresults in a denial of service when the affected process hangs.  Policy\nprocessing being enabled on a publicly facing server is not considered\nto be a common setup.\n\nPolicy processing is enabled by passing the `-policy'\nargument to the command line utilities or by calling the\n`X509_VERIFY_PARAM_set1_policies()' function.\n\nUpdate (31 March 2023): The description of the policy processing enablement\nwas corrected based on CVE-2023-0466.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [39.0.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41725_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2022-41725] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "A denial of service is possible from excessive resource consumption in net/http and mime/multipart. Multipart form parsing with mime/multipart.Reader.ReadForm can consume largely unlimited amounts of memory and disk files. This also affects form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. ReadForm takes a maxMemory parameter, and is documented as storing \"up to maxMemory bytes +10MB (reserved for non-file parts) in memory\". File parts which cannot be stored in memory are stored on disk in temporary files. The unconfigurable 10MB reserved for non-file parts is excessively large and can potentially open a denial of service vector on its own. However, ReadForm did not properly account for all memory consumed by a parsed form, such as map entry overhead, part names, and MIME headers, permitting a maliciously crafted form to consume well over 10MB. In addition, ReadForm contained no limit on the number of disk files created, permitting a relatively small request body to create a large number of disk temporary files. With fix, ReadForm now properly accounts for various forms of memory overhead, and should now stay within its documented limit of 10MB + maxMemory bytes of memory consumption. Users should still be aware that this limit is high and may still be hazardous. In addition, ReadForm now creates at most one on-disk temporary file, combining multiple form parts into a single temporary file. The mime/multipart.File interface type's documentation states, \"If stored on disk, the File's underlying concrete type will be an *os.File.\". This is no longer the case when a form contains more than one file part, due to this coalescing of parts into a single file. The previous behavior of using distinct files for each form part may be reenabled with the environment variable GODEBUG=multipartfiles=distinct. Users should be aware that multipart.ReadForm and the http.Request methods that call it do not limit the amount of disk consumed by temporary ...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30634_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2022-30634] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "Infinite loop in Read in crypto/rand before Go 1.17.11 and Go 1.18.3 on Windows allows attacker to cause an indefinite hang by passing a buffer larger than 1 \u003c\u003c 32 - 1 bytes.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45285_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2023-45285] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "Using go get to fetch a module with the \".git\" suffix may unexpectedly fallback to the insecure \"git://\" protocol if the module is unavailable via the secure \"https://\" and \"git+ssh://\" protocols, even if GOINSECURE is not set for said module. This only affects users who are not using the module proxy and are fetching modules directly (i.e. GOPROXY=off).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30635_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2022-30635] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "Uncontrolled recursion in Decoder.Decode in encoding/gob before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a message which contains deeply nested structures.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-49083_cryptography_36.0.0",
              "shortDescription": {
                "text": "[CVE-2023-49083] cryptography 36.0.0"
              },
              "help": {
                "text": "cryptography is a package designed to expose cryptographic primitives and recipes to Python developers. Calling `load_pem_pkcs7_certificates` or `load_der_pkcs7_certificates` could lead to a NULL-pointer dereference and segfault. Exploitation of this vulnerability poses a serious risk of Denial of Service (DoS) for any application attempting to deserialize a PKCS7 blob/certificate. The consequences extend to potential disruptions in system availability and stability. This vulnerability has been patched in version 41.0.6.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [41.0.6]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0217_cryptography_36.0.0",
              "shortDescription": {
                "text": "[CVE-2023-0217] cryptography 36.0.0"
              },
              "help": {
                "text": "An invalid pointer dereference on read can be triggered when an\napplication tries to check a malformed DSA public key by the\nEVP_PKEY_public_check() function. This will most likely lead\nto an application crash. This function can be called on public\nkeys supplied from untrusted sources which could allow an attacker\nto cause a denial of service attack.\n\nThe TLS implementation in OpenSSL does not call this function\nbut applications might call the function if there are additional\nsecurity requirements imposed by standards such as FIPS 140-3.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [39.0.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-44487_google.golang.org/grpc_1.37.0",
              "shortDescription": {
                "text": "[CVE-2023-44487] google.golang.org/grpc 1.37.0"
              },
              "help": {
                "text": "The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.56.3], [1.57.1], [1.58.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45285_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-45285] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "Using go get to fetch a module with the \".git\" suffix may unexpectedly fallback to the insecure \"git://\" protocol if the module is unavailable via the secure \"https://\" and \"git+ssh://\" protocols, even if GOINSECURE is not set for said module. This only affects users who are not using the module proxy and are fetching modules directly (i.e. GOPROXY=off).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.20.12], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24539_github.com/golang/go_1.19.2",
              "shortDescription": {
                "text": "[CVE-2023-24539] github.com/golang/go 1.19.2"
              },
              "help": {
                "text": "Angle brackets (\u003c\u003e) are not considered dangerous characters when inserted into CSS contexts. Templates containing multiple actions separated by a '/' character can result in unexpectedly closing the CSS context and allowing for injection of unexpected HTML, if executed with untrusted input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.3      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2022-41722_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2022-41722] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "A path traversal vulnerability exists in filepath.Clean on Windows. On Windows, the filepath.Clean function could transform an invalid path such as \"a/../c:/b\" into the valid path \"c:\\b\". This transformation of a relative (if invalid) path into an absolute path could enable a directory traversal attack. After fix, the filepath.Clean function transforms this path into the relative (but still invalid) path \".\\c:\\b\".",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-39323_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-39323] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "Line directives (\"//line\") can be used to bypass the restrictions on \"//go:cgo_\" directives, allowing blocked linker and compiler flags to be passed during compilation. This can result in unexpected execution of arbitrary code when running \"go build\". The line directive requires the absolute path of the file in which the directive lives, which makes exploiting this issue significantly more complex.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.20.9], [1.21.2]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2021-41772_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2021-41772] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "Go before 1.16.10 and 1.17.x before 1.17.3 allows an archive/zip Reader.Open panic via a crafted ZIP archive containing an invalid name or an empty filename field.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.16.10], [1.17.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-50782_cryptography_36.0.0",
              "shortDescription": {
                "text": "[CVE-2023-50782] cryptography 36.0.0"
              },
              "help": {
                "text": "A flaw was found in the python-cryptography package. This issue may allow a remote attacker to decrypt captured messages in TLS servers that use RSA key exchanges, which may lead to exposure of confidential or sensitive data.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [42.0.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41720_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2022-41720] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "On Windows, restricted files can be accessed via os.DirFS and http.Dir. The os.DirFS function and http.Dir type provide access to a tree of files rooted at a given directory. These functions permit access to Windows device files under that root. For example, os.DirFS(\"C:/tmp\").Open(\"COM1\") opens the COM1 device. Both os.DirFS and http.Dir only provide read-only filesystem access. In addition, on Windows, an os.DirFS for the directory (the root of the current drive) can permit a maliciously crafted path to escape from the drive and access any path on the system. With fix applied, the behavior of os.DirFS(\"\") has changed. Previously, an empty root was treated equivalently to \"/\", so os.DirFS(\"\").Open(\"tmp\") would open the path \"/tmp\". This now returns an error.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.18.9], [1.19.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24534_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2023-24534] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "HTTP and MIME header parsing can allocate large amounts of memory, even when parsing small inputs, potentially leading to a denial of service. Certain unusual patterns of input data can cause the common function used to parse HTTP and MIME headers to allocate substantially more memory than required to hold the parsed headers. An attacker can exploit this behavior to cause an HTTP server to allocate large amounts of memory from a small request, potentially leading to memory exhaustion and a denial of service. With fix, header parsing now correctly allocates only the memory required to hold parsed headers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-34454_org.xerial.snappy:snappy-java_1.1.8.4",
              "shortDescription": {
                "text": "[CVE-2023-34454] org.xerial.snappy:snappy-java 1.1.8.4"
              },
              "help": {
                "text": "snappy-java is a fast compressor/decompressor for Java. Due to unchecked multiplications, an integer overflow may occur in versions prior to 1.1.10.1, causing an unrecoverable fatal error.\n\nThe function `compress(char[] input)` in the file `Snappy.java` receives an array of characters and compresses it. It does so by multiplying the length by 2 and passing it to the rawCompress` function.\n\nSince the length is not tested, the multiplication by two can cause an integer overflow and become negative. The rawCompress function then uses the received length and passes it to the natively compiled maxCompressedLength function, using the returned value to allocate a byte array.\n\nSince the maxCompressedLength function treats the length as an unsigned integer, it doesn’t care that it is negative, and it returns a valid value, which is casted to a signed integer by the Java engine. If the result is negative, a `java.lang.NegativeArraySizeException` exception will be raised while trying to allocate the array `buf`. On the other side, if the result is positive, the `buf` array will successfully be allocated, but its size might be too small to use for the compression, causing a fatal Access Violation error.\n\nThe same issue exists also when using the `compress` functions that receive double, float, int, long and short, each using a different multiplier that may cause the same issue. The issue most likely won’t occur when using a byte array, since creating a byte array of size 0x80000000 (or any other negative value) is impossible in the first place.\n\nVersion 1.1.10.1 contains a patch for this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.1.10.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0401_cryptography_36.0.0",
              "shortDescription": {
                "text": "[CVE-2023-0401] cryptography 36.0.0"
              },
              "help": {
                "text": "A NULL pointer can be dereferenced when signatures are being\nverified on PKCS7 signed or signedAndEnveloped data. In case the hash\nalgorithm used for the signature is known to the OpenSSL library but\nthe implementation of the hash algorithm is not available the digest\ninitialization will fail. There is a missing check for the return\nvalue from the initialization function which later leads to invalid\nusage of the digest API most likely leading to a crash.\n\nThe unavailability of an algorithm can be caused by using FIPS\nenabled configuration of providers or more commonly by not loading\nthe legacy provider.\n\nPKCS7 data is processed by the SMIME library calls and also by the\ntime stamp (TS) library calls. The TLS implementation in OpenSSL does\nnot call these functions however third party applications would be\naffected if they call these functions to verify signatures on untrusted\ndata.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [39.0.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-4807_cryptography_36.0.0",
              "shortDescription": {
                "text": "[CVE-2023-4807] cryptography 36.0.0"
              },
              "help": {
                "text": "Issue summary: The POLY1305 MAC (message authentication code) implementation\ncontains a bug that might corrupt the internal state of applications on the\nWindows 64 platform when running on newer X86_64 processors supporting the\nAVX512-IFMA instructions.\n\nImpact summary: If in an application that uses the OpenSSL library an attacker\ncan influence whether the POLY1305 MAC algorithm is used, the application\nstate might be corrupted with various application dependent consequences.\n\nThe POLY1305 MAC (message authentication code) implementation in OpenSSL does\nnot save the contents of non-volatile XMM registers on Windows 64 platform\nwhen calculating the MAC of data larger than 64 bytes. Before returning to\nthe caller all the XMM registers are set to zero rather than restoring their\nprevious content. The vulnerable code is used only on newer x86_64 processors\nsupporting the AVX512-IFMA instructions.\n\nThe consequences of this kind of internal application state corruption can\nbe various - from no consequences, if the calling application does not\ndepend on the contents of non-volatile XMM registers at all, to the worst\nconsequences, where the attacker could get complete control of the application\nprocess. However given the contents of the registers are just zeroized so\nthe attacker cannot put arbitrary values inside, the most likely consequence,\nif any, would be an incorrect result of some application dependent\ncalculations or a crash leading to a denial of service.\n\nThe POLY1305 MAC algorithm is most frequently used as part of the\nCHACHA20-POLY1305 AEAD (authenticated encryption with associated data)\nalgorithm. The most common usage of this AEAD cipher is with TLS protocol\nversions 1.2 and 1.3 and a malicious client can influence whether this AEAD\ncipher is used by the server. This implies that server applications using\nOpenSSL can be potentially impacted. However we are currently not aware of\nany concrete application that would be affected by this issue therefore we\nconsider this a Low severity security issue.\n\n...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [41.0.4]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2023-0216_cryptography_36.0.0",
              "shortDescription": {
                "text": "[CVE-2023-0216] cryptography 36.0.0"
              },
              "help": {
                "text": "An invalid pointer dereference on read can be triggered when an\napplication tries to load malformed PKCS7 data with the\nd2i_PKCS7(), d2i_PKCS7_bio() or d2i_PKCS7_fp() functions.\n\nThe result of the dereference is an application crash which could\nlead to a denial of service attack. The TLS implementation in OpenSSL\ndoes not call this function however third party applications might\ncall these functions on untrusted data.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [39.0.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41725_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2022-41725] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "A denial of service is possible from excessive resource consumption in net/http and mime/multipart. Multipart form parsing with mime/multipart.Reader.ReadForm can consume largely unlimited amounts of memory and disk files. This also affects form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. ReadForm takes a maxMemory parameter, and is documented as storing \"up to maxMemory bytes +10MB (reserved for non-file parts) in memory\". File parts which cannot be stored in memory are stored on disk in temporary files. The unconfigurable 10MB reserved for non-file parts is excessively large and can potentially open a denial of service vector on its own. However, ReadForm did not properly account for all memory consumed by a parsed form, such as map entry overhead, part names, and MIME headers, permitting a maliciously crafted form to consume well over 10MB. In addition, ReadForm contained no limit on the number of disk files created, permitting a relatively small request body to create a large number of disk temporary files. With fix, ReadForm now properly accounts for various forms of memory overhead, and should now stay within its documented limit of 10MB + maxMemory bytes of memory consumption. Users should still be aware that this limit is high and may still be hazardous. In addition, ReadForm now creates at most one on-disk temporary file, combining multiple form parts into a single temporary file. The mime/multipart.File interface type's documentation states, \"If stored on disk, the File's underlying concrete type will be an *os.File.\". This is no longer the case when a form contains more than one file part, due to this coalescing of parts into a single file. The previous behavior of using distinct files for each form part may be reenabled with the environment variable GODEBUG=multipartfiles=distinct. Users should be aware that multipart.ReadForm and the http.Request methods that call it do not limit the amount of disk consumed by temporary ...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-43565_golang.org/x/crypto_0.0.0-20201002170205-7f63de1d35b0",
              "shortDescription": {
                "text": "[CVE-2021-43565] golang.org/x/crypto 0.0.0-20201002170205-7f63de1d35b0"
              },
              "help": {
                "text": "The x/crypto/ssh package before 0.0.0-20211202192323-5770296d904e of golang.org/x/crypto allows an attacker to panic an SSH server.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.0.0-20211202192323-5770296d904e]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-34062_io.projectreactor.netty:reactor-netty-http_1.0.14",
              "shortDescription": {
                "text": "[CVE-2023-34062] io.projectreactor.netty:reactor-netty-http 1.0.14"
              },
              "help": {
                "text": "In Reactor Netty HTTP Server, versions 1.1.x prior to 1.1.13 and versions 1.0.x prior to 1.0.39, a malicious user can send a request using a specially crafted URL that can lead to a directory traversal attack.\n\nSpecifically, an application is vulnerable if Reactor Netty HTTP Server is configured to serve static resources.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.0.39], [1.1.13]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41720_github.com/golang/go_1.19.2",
              "shortDescription": {
                "text": "[CVE-2022-41720] github.com/golang/go 1.19.2"
              },
              "help": {
                "text": "On Windows, restricted files can be accessed via os.DirFS and http.Dir. The os.DirFS function and http.Dir type provide access to a tree of files rooted at a given directory. These functions permit access to Windows device files under that root. For example, os.DirFS(\"C:/tmp\").Open(\"COM1\") opens the COM1 device. Both os.DirFS and http.Dir only provide read-only filesystem access. In addition, on Windows, an os.DirFS for the directory (the root of the current drive) can permit a maliciously crafted path to escape from the drive and access any path on the system. With fix applied, the behavior of os.DirFS(\"\") has changed. Previously, an empty root was treated equivalently to \"/\", so os.DirFS(\"\").Open(\"tmp\") would open the path \"/tmp\". This now returns an error.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.18.9], [1.19.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41716_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2022-41716] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "Due to unsanitized NUL values, attackers may be able to maliciously set environment variables on Windows. In syscall.StartProcess and os/exec.Cmd, invalid environment variable values containing NUL values are not properly checked for. A malicious environment variable value can exploit this behavior to set a value for a different environment variable. For example, the environment variable string \"A=B\\x00C=D\" sets the variables \"A=B\" and \"C=D\".",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.18.8], [1.19.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-41771_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2021-41771] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "ImportedSymbols in debug/macho (for Open or OpenFat) in Go before 1.16.10 and 1.17.x before 1.17.3 Accesses a Memory Location After the End of a Buffer, aka an out-of-bounds slice situation.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.16.10], [1.17.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41716_github.com/golang/go_1.19.2",
              "shortDescription": {
                "text": "[CVE-2022-41716] github.com/golang/go 1.19.2"
              },
              "help": {
                "text": "Due to unsanitized NUL values, attackers may be able to maliciously set environment variables on Windows. In syscall.StartProcess and os/exec.Cmd, invalid environment variable values containing NUL values are not properly checked for. A malicious environment variable value can exploit this behavior to set a value for a different environment variable. For example, the environment variable string \"A=B\\x00C=D\" sets the variables \"A=B\" and \"C=D\".",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.18.8], [1.19.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24537_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2023-24537] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "Calling any of the Parse functions on Go source code which contains //line directives with very large line numbers can cause an infinite loop due to integer overflow.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41715_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2022-41715] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "Programs which compile regular expressions from untrusted sources may be vulnerable to memory exhaustion or denial of service. The parsed regexp representation is linear in the size of the input, but in some cases the constant factor can be as high as 40,000, making relatively small regexps consume much larger amounts of memory. After fix, each regexp being parsed is limited to a 256 MB memory footprint. Regular expressions whose representation would use more space than that are rejected. Normal use of regular expressions is unaffected.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.18.7], [1.19.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-39293_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2021-39293] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "In archive/zip in Go before 1.16.8 and 1.17.x before 1.17.1, a crafted archive header (falsely designating that many files are present) can cause a NewReader or OpenReader panic. NOTE: this issue exists because of an incomplete fix for CVE-2021-33196.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.16.8], [1.17.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-32149_golang.org/x/text_0.3.4",
              "shortDescription": {
                "text": "[CVE-2022-32149] golang.org/x/text 0.3.4"
              },
              "help": {
                "text": "An attacker may cause a denial of service by crafting an Accept-Language header which ParseAcceptLanguage will take significant time to parse.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.3.8]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-44487_golang.org/x/net_0.0.0-20220728211354-c7608f3a8462",
              "shortDescription": {
                "text": "[CVE-2023-44487] golang.org/x/net 0.0.0-20220728211354-c7608f3a8462"
              },
              "help": {
                "text": "The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41724_github.com/golang/go_1.19.2",
              "shortDescription": {
                "text": "[CVE-2022-41724] github.com/golang/go 1.19.2"
              },
              "help": {
                "text": "Large handshake records may cause panics in crypto/tls. Both clients and servers may send large TLS handshake records which cause servers and clients, respectively, to panic when attempting to construct responses. This affects all TLS 1.3 clients, TLS 1.2 clients which explicitly enable session resumption (by setting Config.ClientSessionCache to a non-nil value), and TLS 1.3 servers which request client certificates (by setting Config.ClientAuth \u003e= RequestClientCert).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41725_github.com/golang/go_1.19.2",
              "shortDescription": {
                "text": "[CVE-2022-41725] github.com/golang/go 1.19.2"
              },
              "help": {
                "text": "A denial of service is possible from excessive resource consumption in net/http and mime/multipart. Multipart form parsing with mime/multipart.Reader.ReadForm can consume largely unlimited amounts of memory and disk files. This also affects form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. ReadForm takes a maxMemory parameter, and is documented as storing \"up to maxMemory bytes +10MB (reserved for non-file parts) in memory\". File parts which cannot be stored in memory are stored on disk in temporary files. The unconfigurable 10MB reserved for non-file parts is excessively large and can potentially open a denial of service vector on its own. However, ReadForm did not properly account for all memory consumed by a parsed form, such as map entry overhead, part names, and MIME headers, permitting a maliciously crafted form to consume well over 10MB. In addition, ReadForm contained no limit on the number of disk files created, permitting a relatively small request body to create a large number of disk temporary files. With fix, ReadForm now properly accounts for various forms of memory overhead, and should now stay within its documented limit of 10MB + maxMemory bytes of memory consumption. Users should still be aware that this limit is high and may still be hazardous. In addition, ReadForm now creates at most one on-disk temporary file, combining multiple form parts into a single temporary file. The mime/multipart.File interface type's documentation states, \"If stored on disk, the File's underlying concrete type will be an *os.File.\". This is no longer the case when a form contains more than one file part, due to this coalescing of parts into a single file. The previous behavior of using distinct files for each form part may be reenabled with the environment variable GODEBUG=multipartfiles=distinct. Users should be aware that multipart.ReadForm and the http.Request methods that call it do not limit the amount of disk consumed by temporary ...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-23773_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2022-23773] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "cmd/go in Go before 1.16.14 and 1.17.x before 1.17.7 can misinterpret branch names that falsely appear to be version tags. This can lead to incorrect access control if an actor is supposed to be able to create branches but not tags.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.16.14], [1.17.7]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-39325_golang.org/x/net_0.0.0-20210410081132-afb366fc7cd1",
              "shortDescription": {
                "text": "[CVE-2023-39325] golang.org/x/net 0.0.0-20210410081132-afb366fc7cd1"
              },
              "help": {
                "text": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing. With the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection. This issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2. The default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30630_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2022-30630] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "Uncontrolled recursion in Glob in io/fs before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a path which contains a large number of path separators.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-27191_golang.org/x/crypto_0.0.0-20210314154223-e6e6c4f2bb5b",
              "shortDescription": {
                "text": "[CVE-2022-27191] golang.org/x/crypto 0.0.0-20210314154223-e6e6c4f2bb5b"
              },
              "help": {
                "text": "The golang.org/x/crypto/ssh package before 0.0.0-20220314234659-1baeb1ce4c0b for Go allows an attacker to crash a server in certain circumstances involving AddHostKey.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.0.0-20220314234659-1baeb1ce4c0b]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24534_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-24534] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "HTTP and MIME header parsing can allocate large amounts of memory, even when parsing small inputs, potentially leading to a denial of service. Certain unusual patterns of input data can cause the common function used to parse HTTP and MIME headers to allocate substantially more memory than required to hold the parsed headers. An attacker can exploit this behavior to cause an HTTP server to allocate large amounts of memory from a small request, potentially leading to memory exhaustion and a denial of service. With fix, header parsing now correctly allocates only the memory required to hold parsed headers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-39323_github.com/golang/go_1.19.2",
              "shortDescription": {
                "text": "[CVE-2023-39323] github.com/golang/go 1.19.2"
              },
              "help": {
                "text": "Line directives (\"//line\") can be used to bypass the restrictions on \"//go:cgo_\" directives, allowing blocked linker and compiler flags to be passed during compilation. This can result in unexpected execution of arbitrary code when running \"go build\". The line directive requires the absolute path of the file in which the directive lives, which makes exploiting this issue significantly more complex.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.20.9], [1.21.2]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2022-21698_github.com/prometheus/client_golang_1.8.0",
              "shortDescription": {
                "text": "[CVE-2022-21698] github.com/prometheus/client_golang 1.8.0"
              },
              "help": {
                "text": "client_golang is the instrumentation library for Go applications in Prometheus, and the promhttp package in client_golang provides tooling around HTTP servers and clients. In client_golang prior to version 1.11.1, HTTP server is susceptible to a Denial of Service through unbounded cardinality, and potential memory exhaustion, when handling requests with non-standard HTTP methods. In order to be affected, an instrumented software must use any of `promhttp.InstrumentHandler*` middleware except `RequestsInFlight`; not filter any specific methods (e.g GET) before middleware; pass metric with `method` label name to our middleware; and not have any firewall/LB/proxy that filters away requests with unknown `method`. client_golang version 1.11.1 contains a patch for this issue. Several workarounds are available, including removing the `method` label name from counter/gauge used in the InstrumentHandler; turning off affected promhttp handlers; adding custom middleware before promhttp handler that will sanitize the request method given by Go http.Request; and using a reverse proxy or web application firewall, configured to only allow a limited set of methods.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.11.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-2880_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2022-2880] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "Requests forwarded by ReverseProxy include the raw query parameters from the inbound request, including unparsable parameters rejected by net/http. This could permit query parameter smuggling when a Go proxy forwards a parameter with an unparsable value. After fix, ReverseProxy sanitizes the query parameters in the forwarded query when the outbound request's Form field is set after the ReverseProxy. Director function returns, indicating that the proxy has parsed the query parameters. Proxies which do not parse query parameters continue to forward the original query parameters unchanged.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.18.7], [1.19.2]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-25173_github.com/containerd/containerd_1.3.4",
              "shortDescription": {
                "text": "[CVE-2023-25173] github.com/containerd/containerd 1.3.4"
              },
              "help": {
                "text": "containerd is an open source container runtime. A bug was found in containerd prior to versions 1.6.18 and 1.5.18 where supplementary groups are not set up properly inside a container. If an attacker has direct access to a container and manipulates their supplementary group access, they may be able to use supplementary group access to bypass primary group restrictions in some cases, potentially gaining access to sensitive information or gaining the ability to execute code in that container. Downstream applications that use the containerd client library may be affected as well.\n\nThis bug has been fixed in containerd v1.6.18 and v.1.5.18. Users should update to these versions and recreate containers to resolve this issue. Users who rely on a downstream application that uses containerd's client library should check that application for a separate advisory and instructions. As a workaround, ensure that the `\"USER $USERNAME\"` Dockerfile instruction is not used. Instead, set the container entrypoint to a value similar to `ENTRYPOINT [\"su\", \"-\", \"user\"]` to allow `su` to properly set up supplementary groups.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.5.18], [1.6.18]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2023-45283_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-45283] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "The filepath package does not recognize paths with a \\??\\ prefix as special. On Windows, a path beginning with \\??\\ is a Root Local Device path equivalent to a path beginning with \\\\?\\. Paths with a \\??\\ prefix may be used to access arbitrary locations on the system. For example, the path \\??\\c:\\x is equivalent to the more common path c:\\x. Before fix, Clean could convert a rooted path such as \\a\\..\\??\\b into the root local device path \\??\\b. Clean will now convert this to .\\??\\b. Similarly, Join(\\, ??, b) could convert a seemingly innocent sequence of path elements into the root local device path \\??\\b. Join will now convert this to \\.\\??\\b. In addition, with fix, IsAbs now correctly reports paths beginning with \\??\\ as absolute, and VolumeName correctly reports the \\??\\ prefix as a volume name. UPDATE: Go 1.20.11 and Go 1.21.4 inadvertently changed the definition of the volume name in Windows paths starting with \\?, resulting in filepath.Clean(\\?\\c:) returning \\?\\c: rather than \\?\\c:\\ (among other effects). The previous behavior has been restored.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.20.11], [1.20.12], [1.21.4], [1.21.5]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-29804_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2022-29804] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "Incorrect conversion of certain invalid paths to valid, absolute paths in Clean in path/filepath before Go 1.17.11 and Go 1.18.3 on Windows allows potential directory traversal attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41723_golang.org/x/net_0.0.0-20210410081132-afb366fc7cd1",
              "shortDescription": {
                "text": "[CVE-2022-41723] golang.org/x/net 0.0.0-20210410081132-afb366fc7cd1"
              },
              "help": {
                "text": "A maliciously crafted HTTP/2 stream could cause excessive CPU consumption in the HPACK decoder, sufficient to cause a denial of service from a small number of small requests.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.7.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-27191_golang.org/x/crypto_0.0.0-20201002170205-7f63de1d35b0",
              "shortDescription": {
                "text": "[CVE-2022-27191] golang.org/x/crypto 0.0.0-20201002170205-7f63de1d35b0"
              },
              "help": {
                "text": "The golang.org/x/crypto/ssh package before 0.0.0-20220314234659-1baeb1ce4c0b for Go allows an attacker to crash a server in certain circumstances involving AddHostKey.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.0.0-20220314234659-1baeb1ce4c0b]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-43565_golang.org/x/crypto_0.0.0-20190308221718-c2843e01d9a2",
              "shortDescription": {
                "text": "[CVE-2021-43565] golang.org/x/crypto 0.0.0-20190308221718-c2843e01d9a2"
              },
              "help": {
                "text": "The x/crypto/ssh package before 0.0.0-20211202192323-5770296d904e of golang.org/x/crypto allows an attacker to panic an SSH server.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.0.0-20211202192323-5770296d904e]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24536_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2023-24536] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "Multipart form parsing can consume large amounts of CPU and memory when processing form inputs containing very large numbers of parts. This stems from several causes: 1. mime/multipart.Reader.ReadForm limits the total memory a parsed multipart form can consume. ReadForm can undercount the amount of memory consumed, leading it to accept larger inputs than intended. 2. Limiting total memory does not account for increased pressure on the garbage collector from large numbers of small allocations in forms with many parts. 3. ReadForm can allocate a large number of short-lived buffers, further increasing pressure on the garbage collector. The combination of these factors can permit an attacker to cause an program that parses multipart forms to consume large amounts of CPU and memory, potentially resulting in a denial of service. This affects programs that use mime/multipart.Reader.ReadForm, as well as form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. With fix, ReadForm now does a better job of estimating the memory consumption of parsed forms, and performs many fewer short-lived allocations. In addition, the fixed mime/multipart.Reader imposes the following limits on the size of parsed forms: 1. Forms parsed with ReadForm may contain no more than 1000 parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxparts=. 2. Form parts parsed with NextPart and NextRawPart may contain no more than 10,000 header fields. In addition, forms parsed with ReadForm may contain no more than 10,000 header fields across all parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxheaders=.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-44487_google.golang.org/grpc_1.24.0",
              "shortDescription": {
                "text": "[CVE-2023-44487] google.golang.org/grpc 1.24.0"
              },
              "help": {
                "text": "The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.56.3], [1.57.1], [1.58.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-39325_golang.org/x/net_0.0.0-20201110031124-69a78807bb2b",
              "shortDescription": {
                "text": "[CVE-2023-39325] golang.org/x/net 0.0.0-20201110031124-69a78807bb2b"
              },
              "help": {
                "text": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing. With the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection. This issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2. The default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41722_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2022-41722] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "A path traversal vulnerability exists in filepath.Clean on Windows. On Windows, the filepath.Clean function could transform an invalid path such as \"a/../c:/b\" into the valid path \"c:\\b\". This transformation of a relative (if invalid) path into an absolute path could enable a directory traversal attack. After fix, the filepath.Clean function transforms this path into the relative (but still invalid) path \".\\c:\\b\".",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-29400_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2023-29400] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "Templates containing actions in unquoted HTML attributes (e.g. \"attr={{.}}\") executed with empty input can result in output with unexpected results when parsed due to HTML normalization rules. This may allow injection of arbitrary attributes into tags.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.3      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2023-0286_cryptography_36.0.0",
              "shortDescription": {
                "text": "[CVE-2023-0286] cryptography 36.0.0"
              },
              "help": {
                "text": "There is a type confusion vulnerability relating to X.400 address processing\ninside an X.509 GeneralName. X.400 addresses were parsed as an ASN1_STRING but\nthe public structure definition for GENERAL_NAME incorrectly specified the type\nof the x400Address field as ASN1_TYPE. This field is subsequently interpreted by\nthe OpenSSL function GENERAL_NAME_cmp as an ASN1_TYPE rather than an\nASN1_STRING.\n\nWhen CRL checking is enabled (i.e. the application sets the\nX509_V_FLAG_CRL_CHECK flag), this vulnerability may allow an attacker to pass\narbitrary pointers to a memcmp call, enabling them to read memory contents or\nenact a denial of service. In most cases, the attack requires the attacker to\nprovide both the certificate chain and CRL, neither of which need to have a\nvalid signature. If the attacker only controls one of these inputs, the other\ninput must already contain an X.400 address as a CRL distribution point, which\nis uncommon. As such, this vulnerability is most likely to only affect\napplications which have implemented their own functionality for retrieving CRLs\nover a network.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.4      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [39.0.1]   |"
              },
              "properties": {
                "security-severity": "7.4"
              }
            },
            {
              "id": "CVE-2020-29652_golang.org/x/crypto_0.0.0-20190308221718-c2843e01d9a2",
              "shortDescription": {
                "text": "[CVE-2020-29652] golang.org/x/crypto 0.0.0-20190308221718-c2843e01d9a2"
              },
              "help": {
                "text": "A nil pointer dereference in the golang.org/x/crypto/ssh component through v0.0.0-20201203163018-be400aefbc4c for Go allows remote attackers to cause a denial of service against SSH servers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.0.0-20201216223049-8b5274cf687f]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-29403_github.com/golang/go_1.19.2",
              "shortDescription": {
                "text": "[CVE-2023-29403] github.com/golang/go 1.19.2"
              },
              "help": {
                "text": "On Unix platforms, the Go runtime does not behave differently when a binary is run with the setuid/setgid bits. This can be dangerous in certain cases, such as when dumping memory state, or assuming the status of standard i/o file descriptors. If a setuid/setgid binary is executed with standard I/O file descriptors closed, opening any files can result in unexpected content being read or written with elevated privileges. Similarly, if a setuid/setgid program is terminated, either via panic or signal, it may leak the contents of its registers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2021-33194_golang.org/x/net_0.0.0-20210324205630-d1beb07c2056",
              "shortDescription": {
                "text": "[CVE-2021-33194] golang.org/x/net 0.0.0-20210324205630-d1beb07c2056"
              },
              "help": {
                "text": "golang.org/x/net before v0.0.0-20210520170846-37e1c6afe023 allows attackers to cause a denial of service (infinite loop) via crafted ParseFragment input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.0.0-20210520170846-37e1c6afe023]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-27664_golang.org/x/net_0.0.0-20220728211354-c7608f3a8462",
              "shortDescription": {
                "text": "[CVE-2022-27664] golang.org/x/net 0.0.0-20220728211354-c7608f3a8462"
              },
              "help": {
                "text": "In net/http in Go before 1.18.6 and 1.19.x before 1.19.1, attackers can cause a denial of service because an HTTP/2 connection can hang during closing if shutdown were preempted by a fatal error.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.0.0-20220906165146-f3363e06e74c]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-29403_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2023-29403] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "On Unix platforms, the Go runtime does not behave differently when a binary is run with the setuid/setgid bits. This can be dangerous in certain cases, such as when dumping memory state, or assuming the status of standard i/o file descriptors. If a setuid/setgid binary is executed with standard I/O file descriptors closed, opening any files can result in unexpected content being read or written with elevated privileges. Similarly, if a setuid/setgid program is terminated, either via panic or signal, it may leak the contents of its registers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.10], [1.20.5]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2023-44487_golang.org/x/net_0.0.0-20210410081132-afb366fc7cd1",
              "shortDescription": {
                "text": "[CVE-2023-44487] golang.org/x/net 0.0.0-20210410081132-afb366fc7cd1"
              },
              "help": {
                "text": "The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-38561_golang.org/x/text_0.3.4",
              "shortDescription": {
                "text": "[CVE-2021-38561] golang.org/x/text 0.3.4"
              },
              "help": {
                "text": "golang.org/x/text/language in golang.org/x/text before 0.3.7 can panic with an out-of-bounds read during BCP 47 language tag parsing. Index calculation is mishandled. If parsing untrusted user input, this can be used as a vector for a denial-of-service attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.3.7]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-39325_golang.org/x/net_0.0.0-20210324205630-d1beb07c2056",
              "shortDescription": {
                "text": "[CVE-2023-39325] golang.org/x/net 0.0.0-20210324205630-d1beb07c2056"
              },
              "help": {
                "text": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing. With the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection. This issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2. The default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30632_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2022-30632] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "Uncontrolled recursion in Glob in path/filepath before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via a path containing a large number of path separators.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-43642_org.xerial.snappy:snappy-java_1.1.8.4",
              "shortDescription": {
                "text": "[CVE-2023-43642] org.xerial.snappy:snappy-java 1.1.8.4"
              },
              "help": {
                "text": "snappy-java is a Java port of the snappy, a fast C++ compresser/decompresser developed by Google. The SnappyInputStream was found to be vulnerable to Denial of Service (DoS) attacks when decompressing data with a too large chunk size. Due to missing upper bound check on chunk length, an unrecoverable fatal error can occur. All versions of snappy-java including the latest released version 1.1.10.3 are vulnerable to this issue. A fix has been introduced in commit `9f8c3cf74` which will be included in the 1.1.10.4 release. Users are advised to upgrade. Users unable to upgrade should only accept compressed data from trusted sources.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.1.10.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-34453_org.xerial.snappy:snappy-java_1.1.8.4",
              "shortDescription": {
                "text": "[CVE-2023-34453] org.xerial.snappy:snappy-java 1.1.8.4"
              },
              "help": {
                "text": "snappy-java is a fast compressor/decompressor for Java. Due to unchecked multiplications, an integer overflow may occur in versions prior to 1.1.10.1, causing a fatal error.\n\nThe function `shuffle(int[] input)` in the file `BitShuffle.java` receives an array of integers and applies a bit shuffle on it. It does so by multiplying the length by 4 and passing it to the natively compiled shuffle function. Since the length is not tested, the multiplication by four can cause an integer overflow and become a smaller value than the true size, or even zero or negative. In the case of a negative value, a `java.lang.NegativeArraySizeException` exception will raise, which can crash the program. In a case of a value that is zero or too small, the code that afterwards references the shuffled array will assume a bigger size of the array, which might cause exceptions such as `java.lang.ArrayIndexOutOfBoundsException`.\n\nThe same issue exists also when using the `shuffle` functions that receive a double, float, long and short, each using a different multiplier that may cause the same issue.\n\nVersion 1.1.10.1 contains a patch for this vulnerability.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.1.10.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-2976_com.google.guava:guava_31.0.1-jre",
              "shortDescription": {
                "text": "[CVE-2023-2976] com.google.guava:guava 31.0.1-jre"
              },
              "help": {
                "text": "Use of Java's default temporary directory for file creation in `FileBackedOutputStream` in Google Guava versions 1.0 to 31.1 on Unix systems and Android Ice Cream Sandwich allows other users and apps on the machine with access to the default Java temporary directory to be able to access the files created by the class.\n\nEven though the security vulnerability is fixed in version 32.0.0, we recommend using version 32.0.1 as version 32.0.0 breaks some functionality under Windows.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.1      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [32.0.0-android]   |"
              },
              "properties": {
                "security-severity": "7.1"
              }
            },
            {
              "id": "CVE-2022-41723_golang.org/x/net_0.0.0-20210324205630-d1beb07c2056",
              "shortDescription": {
                "text": "[CVE-2022-41723] golang.org/x/net 0.0.0-20210324205630-d1beb07c2056"
              },
              "help": {
                "text": "A maliciously crafted HTTP/2 stream could cause excessive CPU consumption in the HPACK decoder, sufficient to cause a denial of service from a small number of small requests.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.7.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-27191_golang.org/x/crypto_0.0.0-20210322153248-0c34fe9e7dc2",
              "shortDescription": {
                "text": "[CVE-2022-27191] golang.org/x/crypto 0.0.0-20210322153248-0c34fe9e7dc2"
              },
              "help": {
                "text": "The golang.org/x/crypto/ssh package before 0.0.0-20220314234659-1baeb1ce4c0b for Go allows an attacker to crash a server in certain circumstances involving AddHostKey.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.0.0-20220314234659-1baeb1ce4c0b]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-34054_io.projectreactor.netty:reactor-netty-http_1.0.14",
              "shortDescription": {
                "text": "[CVE-2023-34054] io.projectreactor.netty:reactor-netty-http 1.0.14"
              },
              "help": {
                "text": "In Reactor Netty HTTP Server, versions 1.1.x prior to 1.1.13 and versions 1.0.x prior to 1.0.39, it is possible for a user to provide specially crafted HTTP requests that may cause a denial-of-service (DoS) condition.\n\nSpecifically, an application is vulnerable if Reactor Netty HTTP Server built-in integration with Micrometer is enabled.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.0.39], [1.1.13]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-30580_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2022-30580] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "Code injection in Cmd.Start in os/exec before Go 1.17.11 and Go 1.18.3 allows execution of any binaries in the working directory named either \"..com\" or \"..exe\" by calling Cmd.Run, Cmd.Start, Cmd.Output, or Cmd.CombinedOutput when Cmd.Path is unset.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.17.11], [1.18.3]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2022-41723_golang.org/x/net_0.0.0-20220728211354-c7608f3a8462",
              "shortDescription": {
                "text": "[CVE-2022-41723] golang.org/x/net 0.0.0-20220728211354-c7608f3a8462"
              },
              "help": {
                "text": "A maliciously crafted HTTP/2 stream could cause excessive CPU consumption in the HPACK decoder, sufficient to cause a denial of service from a small number of small requests.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.7.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-38561_golang.org/x/text_0.3.6",
              "shortDescription": {
                "text": "[CVE-2021-38561] golang.org/x/text 0.3.6"
              },
              "help": {
                "text": "golang.org/x/text/language in golang.org/x/text before 0.3.7 can panic with an out-of-bounds read during BCP 47 language tag parsing. Index calculation is mishandled. If parsing untrusted user input, this can be used as a vector for a denial-of-service attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.3.7]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-33194_golang.org/x/net_0.0.0-20210410081132-afb366fc7cd1",
              "shortDescription": {
                "text": "[CVE-2021-33194] golang.org/x/net 0.0.0-20210410081132-afb366fc7cd1"
              },
              "help": {
                "text": "golang.org/x/net before v0.0.0-20210520170846-37e1c6afe023 allows attackers to cause a denial of service (infinite loop) via crafted ParseFragment input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.0.0-20210520170846-37e1c6afe023]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-27664_golang.org/x/net_0.0.0-20210410081132-afb366fc7cd1",
              "shortDescription": {
                "text": "[CVE-2022-27664] golang.org/x/net 0.0.0-20210410081132-afb366fc7cd1"
              },
              "help": {
                "text": "In net/http in Go before 1.18.6 and 1.19.x before 1.19.1, attackers can cause a denial of service because an HTTP/2 connection can hang during closing if shutdown were preempted by a fatal error.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.0.0-20220906165146-f3363e06e74c]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-29400_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-29400] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "Templates containing actions in unquoted HTML attributes (e.g. \"attr={{.}}\") executed with empty input can result in output with unexpected results when parsed due to HTML normalization rules. This may allow injection of arbitrary attributes into tags.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.3      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2022-41724_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2022-41724] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "Large handshake records may cause panics in crypto/tls. Both clients and servers may send large TLS handshake records which cause servers and clients, respectively, to panic when attempting to construct responses. This affects all TLS 1.3 clients, TLS 1.2 clients which explicitly enable session resumption (by setting Config.ClientSessionCache to a non-nil value), and TLS 1.3 servers which request client certificates (by setting Config.ClientAuth \u003e= RequestClientCert).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.6], [1.20.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-34455_org.xerial.snappy:snappy-java_1.1.8.4",
              "shortDescription": {
                "text": "[CVE-2023-34455] org.xerial.snappy:snappy-java 1.1.8.4"
              },
              "help": {
                "text": "snappy-java is a fast compressor/decompressor for Java. Due to use of an unchecked chunk length, an unrecoverable fatal error can occur in versions prior to 1.1.10.1.\n\nThe code in the function hasNextChunk in the fileSnappyInputStream.java checks if a given stream has more chunks to read. It does that by attempting to read 4 bytes. If it wasn’t possible to read the 4 bytes, the function returns false. Otherwise, if 4 bytes were available, the code treats them as the length of the next chunk.\n\nIn the case that the `compressed` variable is null, a byte array is allocated with the size given by the input data. Since the code doesn’t test the legality of the `chunkSize` variable, it is possible to pass a negative number (such as 0xFFFFFFFF which is -1), which will cause the code to raise a `java.lang.NegativeArraySizeException` exception. A worse case would happen when passing a huge positive value (such as 0x7FFFFFFF), which would raise the fatal `java.lang.OutOfMemoryError` error.\n\nVersion 1.1.10.1 contains a patch for this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.1.10.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-38561_golang.org/x/text_0.3.5",
              "shortDescription": {
                "text": "[CVE-2021-38561] golang.org/x/text 0.3.5"
              },
              "help": {
                "text": "golang.org/x/text/language in golang.org/x/text before 0.3.7 can panic with an out-of-bounds read during BCP 47 language tag parsing. Index calculation is mishandled. If parsing untrusted user input, this can be used as a vector for a denial-of-service attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.3.7]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24537_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-24537] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "Calling any of the Parse functions on Go source code which contains //line directives with very large line numbers can cause an infinite loop due to integer overflow.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2020-29652_golang.org/x/crypto_0.0.0-20201002170205-7f63de1d35b0",
              "shortDescription": {
                "text": "[CVE-2020-29652] golang.org/x/crypto 0.0.0-20201002170205-7f63de1d35b0"
              },
              "help": {
                "text": "A nil pointer dereference in the golang.org/x/crypto/ssh component through v0.0.0-20201203163018-be400aefbc4c for Go allows remote attackers to cause a denial of service against SSH servers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.0.0-20201216223049-8b5274cf687f]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24536_github.com/golang/go_1.19.2",
              "shortDescription": {
                "text": "[CVE-2023-24536] github.com/golang/go 1.19.2"
              },
              "help": {
                "text": "Multipart form parsing can consume large amounts of CPU and memory when processing form inputs containing very large numbers of parts. This stems from several causes: 1. mime/multipart.Reader.ReadForm limits the total memory a parsed multipart form can consume. ReadForm can undercount the amount of memory consumed, leading it to accept larger inputs than intended. 2. Limiting total memory does not account for increased pressure on the garbage collector from large numbers of small allocations in forms with many parts. 3. ReadForm can allocate a large number of short-lived buffers, further increasing pressure on the garbage collector. The combination of these factors can permit an attacker to cause an program that parses multipart forms to consume large amounts of CPU and memory, potentially resulting in a denial of service. This affects programs that use mime/multipart.Reader.ReadForm, as well as form parsing in the net/http package with the Request methods FormFile, FormValue, ParseMultipartForm, and PostFormValue. With fix, ReadForm now does a better job of estimating the memory consumption of parsed forms, and performs many fewer short-lived allocations. In addition, the fixed mime/multipart.Reader imposes the following limits on the size of parsed forms: 1. Forms parsed with ReadForm may contain no more than 1000 parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxparts=. 2. Form parts parsed with NextPart and NextRawPart may contain no more than 10,000 header fields. In addition, forms parsed with ReadForm may contain no more than 10,000 header fields across all parts. This limit may be adjusted with the environment variable GODEBUG=multipartmaxheaders=.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-24539_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2023-24539] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "Angle brackets (\u003c\u003e) are not considered dangerous characters when inserted into CSS contexts. Templates containing multiple actions separated by a '/' character can result in unexpectedly closing the CSS context and allowing for injection of unexpected HTML, if executed with untrusted input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.3      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2023-39325_golang.org/x/net_0.0.0-20220728211354-c7608f3a8462",
              "shortDescription": {
                "text": "[CVE-2023-39325] golang.org/x/net 0.0.0-20220728211354-c7608f3a8462"
              },
              "help": {
                "text": "A malicious HTTP/2 client which rapidly creates requests and immediately resets them can cause excessive server resource consumption. While the total number of requests is bounded by the http2.Server.MaxConcurrentStreams setting, resetting an in-progress request allows the attacker to create a new request while the existing one is still executing. With the fix applied, HTTP/2 servers now bound the number of simultaneously executing handler goroutines to the stream concurrency limit (MaxConcurrentStreams). New requests arriving when at the limit (which can only happen after the client has reset an existing, in-flight request) will be queued until a handler exits. If the request queue grows too large, the server will terminate the connection. This issue is also fixed in golang.org/x/net/http2 for users manually configuring HTTP/2. The default stream concurrency limit is 250 streams (requests) per HTTP/2 connection. This value may be adjusted using the golang.org/x/net/http2 package; see the Server.MaxConcurrentStreams setting and the ConfigureServer function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-27664_golang.org/x/net_0.0.0-20210324205630-d1beb07c2056",
              "shortDescription": {
                "text": "[CVE-2022-27664] golang.org/x/net 0.0.0-20210324205630-d1beb07c2056"
              },
              "help": {
                "text": "In net/http in Go before 1.18.6 and 1.19.x before 1.19.1, attackers can cause a denial of service because an HTTP/2 connection can hang during closing if shutdown were preempted by a fatal error.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.0.0-20220906165146-f3363e06e74c]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-44487_io.netty:netty-codec-http2_4.1.84.Final",
              "shortDescription": {
                "text": "[CVE-2023-44487] io.netty:netty-codec-http2 4.1.84.Final"
              },
              "help": {
                "text": "The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [4.1.100.Final]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-40898_wheel_0.37.1",
              "shortDescription": {
                "text": "[CVE-2022-40898] wheel 0.37.1"
              },
              "help": {
                "text": "An issue discovered in Python Packaging Authority (PyPA) Wheel 0.37.1 and earlier allows remote attackers to cause a denial of service via attacker controlled input to wheel cli.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.38.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-44487_golang.org/x/net_0.0.0-20210324205630-d1beb07c2056",
              "shortDescription": {
                "text": "[CVE-2023-44487] golang.org/x/net 0.0.0-20210324205630-d1beb07c2056"
              },
              "help": {
                "text": "The HTTP/2 protocol allows a denial of service (server resource consumption) because request cancellation can reset many streams quickly, as exploited in the wild in August through October 2023.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.17.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41720_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2022-41720] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "On Windows, restricted files can be accessed via os.DirFS and http.Dir. The os.DirFS function and http.Dir type provide access to a tree of files rooted at a given directory. These functions permit access to Windows device files under that root. For example, os.DirFS(\"C:/tmp\").Open(\"COM1\") opens the COM1 device. Both os.DirFS and http.Dir only provide read-only filesystem access. In addition, on Windows, an os.DirFS for the directory (the root of the current drive) can permit a maliciously crafted path to escape from the drive and access any path on the system. With fix applied, the behavior of os.DirFS(\"\") has changed. Previously, an empty root was treated equivalently to \"/\", so os.DirFS(\"\").Open(\"tmp\") would open the path \"/tmp\". This now returns an error.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.18.9], [1.19.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41716_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2022-41716] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "Due to unsanitized NUL values, attackers may be able to maliciously set environment variables on Windows. In syscall.StartProcess and os/exec.Cmd, invalid environment variable values containing NUL values are not properly checked for. A malicious environment variable value can exploit this behavior to set a value for a different environment variable. For example, the environment variable string \"A=B\\x00C=D\" sets the variables \"A=B\" and \"C=D\".",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.18.8], [1.19.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-23772_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2022-23772] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "Rat.SetString in math/big in Go before 1.16.14 and 1.17.x before 1.17.7 has an overflow that can lead to Uncontrolled Memory Consumption.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.16.14], [1.17.7]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-45287_github.com/golang/go_1.19.2",
              "shortDescription": {
                "text": "[CVE-2023-45287] github.com/golang/go 1.19.2"
              },
              "help": {
                "text": "Before Go 1.20, the RSA based TLS key exchanges used the math/big library, which is not constant time. RSA blinding was applied to prevent timing attacks, but analysis shows this may not have been fully effective. In particular it appears as if the removal of PKCS#1 padding may leak timing information, which in turn could be used to recover session key bits. In Go 1.20, the crypto/tls library switched to a fully constant time RSA implementation, which we do not believe exhibits any timing side channels.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.20.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-29400_github.com/golang/go_1.19.2",
              "shortDescription": {
                "text": "[CVE-2023-29400] github.com/golang/go 1.19.2"
              },
              "help": {
                "text": "Templates containing actions in unquoted HTML attributes (e.g. \"attr={{.}}\") executed with empty input can result in output with unexpected results when parsed due to HTML normalization rules. This may allow injection of arbitrary attributes into tags.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.3      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.9], [1.20.4]   |"
              },
              "properties": {
                "security-severity": "7.3"
              }
            },
            {
              "id": "CVE-2023-24534_github.com/golang/go_1.19.2",
              "shortDescription": {
                "text": "[CVE-2023-24534] github.com/golang/go 1.19.2"
              },
              "help": {
                "text": "HTTP and MIME header parsing can allocate large amounts of memory, even when parsing small inputs, potentially leading to a denial of service. Certain unusual patterns of input data can cause the common function used to parse HTTP and MIME headers to allocate substantially more memory than required to hold the parsed headers. An attacker can exploit this behavior to cause an HTTP server to allocate large amounts of memory from a small request, potentially leading to memory exhaustion and a denial of service. With fix, header parsing now correctly allocates only the memory required to hold parsed headers.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.8], [1.20.3]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-24921_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2022-24921] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "regexp.Compile in Go before 1.16.15 and 1.17.x before 1.17.8 allows stack exhaustion via a deeply nested expression.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.16.15], [1.17.8]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-43804_urllib3_1.26.8",
              "shortDescription": {
                "text": "[CVE-2023-43804] urllib3 1.26.8"
              },
              "help": {
                "text": "urllib3 is a user-friendly HTTP client library for Python. urllib3 doesn't treat the `Cookie` HTTP header special or provide any helpers for managing cookies over HTTP, that is the responsibility of the user. However, it is possible for a user to specify a `Cookie` header and unknowingly leak information via HTTP redirects to a different origin if that user doesn't disable redirects explicitly. This issue has been patched in urllib3 version 1.26.17 or 2.0.5.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.26.17], [2.0.6]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2022-30633_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2022-30633] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "Uncontrolled recursion in Unmarshal in encoding/xml before Go 1.17.12 and Go 1.18.4 allows an attacker to cause a panic due to stack exhaustion via unmarshalling an XML document into a Go struct which has a nested field that uses the 'any' field tag.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-4450_cryptography_36.0.0",
              "shortDescription": {
                "text": "[CVE-2022-4450] cryptography 36.0.0"
              },
              "help": {
                "text": "The function PEM_read_bio_ex() reads a PEM file from a BIO and parses and\ndecodes the \"name\" (e.g. \"CERTIFICATE\"), any header data and the payload data.\nIf the function succeeds then the \"name_out\", \"header\" and \"data\" arguments are\npopulated with pointers to buffers containing the relevant decoded data. The\ncaller is responsible for freeing those buffers. It is possible to construct a\nPEM file that results in 0 bytes of payload data. In this case PEM_read_bio_ex()\nwill return a failure code but will populate the header argument with a pointer\nto a buffer that has already been freed. If the caller also frees this buffer\nthen a double free will occur. This will most likely lead to a crash. This\ncould be exploited by an attacker who has the ability to supply malicious PEM\nfiles for parsing to achieve a denial of service attack.\n\nThe functions PEM_read_bio() and PEM_read() are simple wrappers around\nPEM_read_bio_ex() and therefore these functions are also directly affected.\n\nThese functions are also called indirectly by a number of other OpenSSL\nfunctions including PEM_X509_INFO_read_bio_ex() and\nSSL_CTX_use_serverinfo_file() which are also vulnerable. Some OpenSSL internal\nuses of these functions are not vulnerable because the caller does not free the\nheader argument if PEM_read_bio_ex() returns a failure code. These locations\ninclude the PEM_read_bio_TYPE() functions as well as the decoders introduced in\nOpenSSL 3.0.\n\nThe OpenSSL asn1parse command line application is also impacted by this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [39.0.1]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-41723_golang.org/x/net_0.0.0-20201110031124-69a78807bb2b",
              "shortDescription": {
                "text": "[CVE-2022-41723] golang.org/x/net 0.0.0-20201110031124-69a78807bb2b"
              },
              "help": {
                "text": "A maliciously crafted HTTP/2 stream could cause excessive CPU consumption in the HPACK decoder, sufficient to cause a denial of service from a small number of small requests.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.7.0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-3978_golang.org/x/net_0.0.0-20210410081132-afb366fc7cd1",
              "shortDescription": {
                "text": "[CVE-2023-3978] golang.org/x/net 0.0.0-20210410081132-afb366fc7cd1"
              },
              "help": {
                "text": "Text nodes not in the HTML namespace are incorrectly literally rendered, causing text which should be escaped to not be. This could lead to an XSS attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.13.0]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2024-26308_org.apache.commons:commons-compress_1.21",
              "shortDescription": {
                "text": "[CVE-2024-26308] org.apache.commons:commons-compress 1.21"
              },
              "help": {
                "text": "Allocation of Resources Without Limits or Throttling vulnerability in Apache Commons Compress.This issue affects Apache Commons Compress: from 1.21 before 1.26.\n\nUsers are recommended to upgrade to version 1.26, which fixes the issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.26.0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-45288_golang.org/x/net_0.0.0-20210324205630-d1beb07c2056",
              "shortDescription": {
                "text": "[CVE-2023-45288] golang.org/x/net 0.0.0-20210324205630-d1beb07c2056"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.23.0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-3978_golang.org/x/net_0.0.0-20220728211354-c7608f3a8462",
              "shortDescription": {
                "text": "[CVE-2023-3978] golang.org/x/net 0.0.0-20220728211354-c7608f3a8462"
              },
              "help": {
                "text": "Text nodes not in the HTML namespace are incorrectly literally rendered, causing text which should be escaped to not be. This could lead to an XSS attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.13.0]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2023-29406_github.com/golang/go_1.19.2",
              "shortDescription": {
                "text": "[CVE-2023-29406] github.com/golang/go 1.19.2"
              },
              "help": {
                "text": "The HTTP/1 client does not fully validate the contents of the Host header. A maliciously crafted Host header can inject additional headers or entire requests. With fix, the HTTP/1 client now refuses to send requests containing an invalid Request.Host or Request.URL.Host value.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.11], [1.20.6]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-40897_setuptools_58.0.4",
              "shortDescription": {
                "text": "[CVE-2022-40897] setuptools 58.0.4"
              },
              "help": {
                "text": "Python Packaging Authority (PyPA) setuptools before 65.5.1 allows remote attackers to cause a denial of service via HTML in a crafted package or custom PackageIndex page. There is a Regular Expression Denial of Service (ReDoS) in package_index.py.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [65.5.1]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-3978_golang.org/x/net_0.0.0-20201110031124-69a78807bb2b",
              "shortDescription": {
                "text": "[CVE-2023-3978] golang.org/x/net 0.0.0-20201110031124-69a78807bb2b"
              },
              "help": {
                "text": "Text nodes not in the HTML namespace are incorrectly literally rendered, causing text which should be escaped to not be. This could lead to an XSS attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.13.0]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2022-41717_golang.org/x/net_0.0.0-20220728211354-c7608f3a8462",
              "shortDescription": {
                "text": "[CVE-2022-41717] golang.org/x/net 0.0.0-20220728211354-c7608f3a8462"
              },
              "help": {
                "text": "An attacker can cause excessive memory growth in a Go server accepting HTTP/2 requests. HTTP/2 server connections contain a cache of HTTP header keys sent by the client. While the total number of entries in this cache is capped, an attacker sending very large keys can cause the server to allocate approximately 64 MiB per open connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.4.0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-45288_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2023-45288] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.21.9], [1.22.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-45288_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-45288] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.21.9], [1.22.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-45288_golang.org/x/net_0.0.0-20210410081132-afb366fc7cd1",
              "shortDescription": {
                "text": "[CVE-2023-45288] golang.org/x/net 0.0.0-20210410081132-afb366fc7cd1"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.23.0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-20329_go.mongodb.org/mongo-driver_1.4.3",
              "shortDescription": {
                "text": "[CVE-2021-20329] go.mongodb.org/mongo-driver 1.4.3"
              },
              "help": {
                "text": "Specific cstrings input may not be properly validated in the MongoDB Go Driver when marshalling Go objects into BSON. A malicious user could use a Go object with specific string to potentially inject additional fields into marshalled documents. This issue affects all MongoDB GO Drivers prior to and including 1.5.0.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.5.1]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2021-31525_golang.org/x/net_0.0.0-20210324205630-d1beb07c2056",
              "shortDescription": {
                "text": "[CVE-2021-31525] golang.org/x/net 0.0.0-20210324205630-d1beb07c2056"
              },
              "help": {
                "text": "net/http in Go before 1.15.12 and 1.16.x before 1.16.4 allows remote attackers to cause a denial of service (panic) via a large header to ReadRequest or ReadResponse. Server, Transport, and Client can each be affected in some configurations.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.0.0-20210428140749-89ef3d95e781]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2021-36221_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2021-36221] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "Go before 1.15.15 and 1.16.x before 1.16.7 has a race condition that can lead to a net/http/httputil ReverseProxy panic upon an ErrAbortHandler abort.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.15.15], [1.16.7]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2022-41717_golang.org/x/net_0.0.0-20210324205630-d1beb07c2056",
              "shortDescription": {
                "text": "[CVE-2022-41717] golang.org/x/net 0.0.0-20210324205630-d1beb07c2056"
              },
              "help": {
                "text": "An attacker can cause excessive memory growth in a Go server accepting HTTP/2 requests. HTTP/2 server connections contain a cache of HTTP header keys sent by the client. While the total number of entries in this cache is capped, an attacker sending very large keys can cause the server to allocate approximately 64 MiB per open connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.4.0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-29406_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-29406] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "The HTTP/1 client does not fully validate the contents of the Host header. A maliciously crafted Host header can inject additional headers or entire requests. With fix, the HTTP/1 client now refuses to send requests containing an invalid Request.Host or Request.URL.Host value.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.11], [1.20.6]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-29526_golang.org/x/sys_0.0.0-20201119102817-f84b799fce68",
              "shortDescription": {
                "text": "[CVE-2022-29526] golang.org/x/sys 0.0.0-20201119102817-f84b799fce68"
              },
              "help": {
                "text": "Go before 1.17.10 and 1.18.x before 1.18.2 has Incorrect Privilege Assignment. When called with a non-zero flags parameter, the Faccessat function could incorrectly report that a file is accessible.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.0.0-20220412211240-33da011f77ad]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-41717_golang.org/x/net_0.0.0-20201110031124-69a78807bb2b",
              "shortDescription": {
                "text": "[CVE-2022-41717] golang.org/x/net 0.0.0-20201110031124-69a78807bb2b"
              },
              "help": {
                "text": "An attacker can cause excessive memory growth in a Go server accepting HTTP/2 requests. HTTP/2 server connections contain a cache of HTTP header keys sent by the client. While the total number of entries in this cache is capped, an attacker sending very large keys can cause the server to allocate approximately 64 MiB per open connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.4.0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2021-31525_golang.org/x/net_0.0.0-20210410081132-afb366fc7cd1",
              "shortDescription": {
                "text": "[CVE-2021-31525] golang.org/x/net 0.0.0-20210410081132-afb366fc7cd1"
              },
              "help": {
                "text": "net/http in Go before 1.15.12 and 1.16.x before 1.16.4 allows remote attackers to cause a denial of service (panic) via a large header to ReadRequest or ReadResponse. Server, Transport, and Client can each be affected in some configurations.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.0.0-20210428140749-89ef3d95e781]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2022-41717_golang.org/x/net_0.0.0-20210410081132-afb366fc7cd1",
              "shortDescription": {
                "text": "[CVE-2022-41717] golang.org/x/net 0.0.0-20210410081132-afb366fc7cd1"
              },
              "help": {
                "text": "An attacker can cause excessive memory growth in a Go server accepting HTTP/2 requests. HTTP/2 server connections contain a cache of HTTP header keys sent by the client. While the total number of entries in this cache is capped, an attacker sending very large keys can cause the server to allocate approximately 64 MiB per open connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.4.0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-45288_golang.org/x/net_0.0.0-20220728211354-c7608f3a8462",
              "shortDescription": {
                "text": "[CVE-2023-45288] golang.org/x/net 0.0.0-20220728211354-c7608f3a8462"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.23.0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-32681_requests_2.27.1",
              "shortDescription": {
                "text": "[CVE-2023-32681] requests 2.27.1"
              },
              "help": {
                "text": "Requests is a HTTP library. Since Requests 2.3.0, Requests has been leaking Proxy-Authorization headers to destination servers when redirected to an HTTPS endpoint. This is a product of how we use `rebuild_proxies` to reattach the `Proxy-Authorization` header to requests. For HTTP connections sent through the tunnel, the proxy will identify the header in the request itself and remove it prior to forwarding to the destination server. However when sent over HTTPS, the `Proxy-Authorization` header must be sent in the CONNECT request as the proxy has no visibility into the tunneled request. This results in Requests forwarding proxy credentials to the destination server unintentionally, allowing a malicious actor to potentially exfiltrate sensitive information. This issue has been patched in version 2.31.0.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [2.31.0]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2022-40897_setuptools_58.1.0",
              "shortDescription": {
                "text": "[CVE-2022-40897] setuptools 58.1.0"
              },
              "help": {
                "text": "Python Packaging Authority (PyPA) setuptools before 65.5.1 allows remote attackers to cause a denial of service via HTML in a crafted package or custom PackageIndex page. There is a Regular Expression Denial of Service (ReDoS) in package_index.py.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [65.5.1]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2021-44717_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2021-44717] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "Go before 1.16.12 and 1.17.x before 1.17.5 on UNIX allows write operations to an unintended file or unintended network connection as a consequence of erroneous closing of file descriptor 0 after file-descriptor exhaustion.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.8      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.16.12], [1.17.5]   |"
              },
              "properties": {
                "security-severity": "4.8"
              }
            },
            {
              "id": "CVE-2022-1962_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2022-1962] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "Uncontrolled recursion in the Parse functions in go/parser before Go 1.17.12 and Go 1.18.4 allow an attacker to cause a panic due to stack exhaustion via deeply nested types or declarations.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-29409_github.com/golang/go_1.19.2",
              "shortDescription": {
                "text": "[CVE-2023-29409] github.com/golang/go 1.19.2"
              },
              "help": {
                "text": "Extremely large RSA keys in certificate chains can cause a client/server to expend significant CPU time verifying signatures. With fix, the size of RSA keys transmitted during handshakes is restricted to \u003c= 8192 bits. Based on a survey of publicly trusted RSA keys, there are currently only three certificates in circulation with keys larger than this, and all three appear to be test certificates that are not actively deployed. It is possible there are larger keys in use in private PKIs, but we target the web PKI, so causing breakage here in the interests of increasing the default safety of users of crypto/tls seems reasonable.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.12], [1.20.7], [1.21.0-rc.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-45288_github.com/golang/go_1.19.2",
              "shortDescription": {
                "text": "[CVE-2023-45288] github.com/golang/go 1.19.2"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.21.9], [1.22.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-3978_golang.org/x/net_0.0.0-20210324205630-d1beb07c2056",
              "shortDescription": {
                "text": "[CVE-2023-3978] golang.org/x/net 0.0.0-20210324205630-d1beb07c2056"
              },
              "help": {
                "text": "Text nodes not in the HTML namespace are incorrectly literally rendered, causing text which should be escaped to not be. This could lead to an XSS attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.1      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.13.0]   |"
              },
              "properties": {
                "security-severity": "6.1"
              }
            },
            {
              "id": "CVE-2021-31525_golang.org/x/net_0.0.0-20201110031124-69a78807bb2b",
              "shortDescription": {
                "text": "[CVE-2021-31525] golang.org/x/net 0.0.0-20201110031124-69a78807bb2b"
              },
              "help": {
                "text": "net/http in Go before 1.15.12 and 1.16.x before 1.16.4 allows remote attackers to cause a denial of service (panic) via a large header to ReadRequest or ReadResponse. Server, Transport, and Client can each be affected in some configurations.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.0.0-20210428140749-89ef3d95e781]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-45288_golang.org/x/net_0.0.0-20201110031124-69a78807bb2b",
              "shortDescription": {
                "text": "[CVE-2023-45288] golang.org/x/net 0.0.0-20201110031124-69a78807bb2b"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.23.0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-25153_github.com/containerd/containerd_1.3.4",
              "shortDescription": {
                "text": "[CVE-2023-25153] github.com/containerd/containerd 1.3.4"
              },
              "help": {
                "text": "containerd is an open source container runtime. Before versions 1.6.18 and 1.5.18, when importing an OCI image, there was no limit on the number of bytes read for certain files. A maliciously crafted image with a large file where a limit was not applied could cause a denial of service. This bug has been fixed in containerd 1.6.18 and 1.5.18.  Users should update to these versions to resolve the issue. As a workaround, ensure that only trusted images are used and that only trusted users have permissions to import images.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.5.18], [1.6.18]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2022-32148_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2022-32148] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "Improper exposure of client IP addresses in net/http before Go 1.17.12 and Go 1.18.4 can be triggered by calling httputil.ReverseProxy.ServeHTTP with a Request.Header map containing a nil value for the X-Forwarded-For header, which causes ReverseProxy to set the client IP as the value of the X-Forwarded-For header.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.17.12], [1.18.4]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-2650_cryptography_36.0.0",
              "shortDescription": {
                "text": "[CVE-2023-2650] cryptography 36.0.0"
              },
              "help": {
                "text": "Issue summary: Processing some specially crafted ASN.1 object identifiers or\ndata containing them may be very slow.\n\nImpact summary: Applications that use OBJ_obj2txt() directly, or use any of\nthe OpenSSL subsystems OCSP, PKCS7/SMIME, CMS, CMP/CRMF or TS with no message\nsize limit may experience notable to very long delays when processing those\nmessages, which may lead to a Denial of Service.\n\nAn OBJECT IDENTIFIER is composed of a series of numbers - sub-identifiers -\nmost of which have no size limit.  OBJ_obj2txt() may be used to translate\nan ASN.1 OBJECT IDENTIFIER given in DER encoding form (using the OpenSSL\ntype ASN1_OBJECT) to its canonical numeric text form, which are the\nsub-identifiers of the OBJECT IDENTIFIER in decimal form, separated by\nperiods.\n\nWhen one of the sub-identifiers in the OBJECT IDENTIFIER is very large\n(these are sizes that are seen as absurdly large, taking up tens or hundreds\nof KiBs), the translation to a decimal number in text may take a very long\ntime.  The time complexity is O(n^2) with 'n' being the size of the\nsub-identifiers in bytes (*).\n\nWith OpenSSL 3.0, support to fetch cryptographic algorithms using names /\nidentifiers in string form was introduced.  This includes using OBJECT\nIDENTIFIERs in canonical numeric text form as identifiers for fetching\nalgorithms.\n\nSuch OBJECT IDENTIFIERs may be received through the ASN.1 structure\nAlgorithmIdentifier, which is commonly used in multiple protocols to specify\nwhat cryptographic algorithm should be used to sign or verify, encrypt or\ndecrypt, or digest passed data.\n\nApplications that call OBJ_obj2txt() directly with untrusted data are\naffected, with any version of OpenSSL.  If the use is for the mere purpose\nof display, the severity is considered low.\n\nIn OpenSSL 3.0 and newer, this affects the subsystems OCSP, PKCS7/SMIME,\nCMS, CMP/CRMF or TS.  It also impacts anything that processes X.509\ncertificates, including simple things like verifying its signature.\n\nThe impact on TLS is relatively low, because all versions of OpenSSL...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [41.0.0]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-29409_github.com/golang/go_1.18.7",
              "shortDescription": {
                "text": "[CVE-2023-29409] github.com/golang/go 1.18.7"
              },
              "help": {
                "text": "Extremely large RSA keys in certificate chains can cause a client/server to expend significant CPU time verifying signatures. With fix, the size of RSA keys transmitted during handshakes is restricted to \u003c= 8192 bits. Based on a survey of publicly trusted RSA keys, there are currently only three certificates in circulation with keys larger than this, and all three appear to be test certificates that are not actively deployed. It is possible there are larger keys in use in private PKIs, but we target the web PKI, so causing breakage here in the interests of increasing the default safety of users of crypto/tls seems reasonable.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.12], [1.20.7], [1.21.0-rc.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-29406_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2023-29406] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "The HTTP/1 client does not fully validate the contents of the Host header. A maliciously crafted Host header can inject additional headers or entire requests. With fix, the HTTP/1 client now refuses to send requests containing an invalid Request.Host or Request.URL.Host value.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.11], [1.20.6]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-29526_golang.org/x/sys_0.0.0-20210403161142-5e06dd20ab57",
              "shortDescription": {
                "text": "[CVE-2022-29526] golang.org/x/sys 0.0.0-20210403161142-5e06dd20ab57"
              },
              "help": {
                "text": "Go before 1.17.10 and 1.18.x before 1.18.2 has Incorrect Privilege Assignment. When called with a non-zero flags parameter, the Faccessat function could incorrectly report that a file is accessible.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.0.0-20220412211240-33da011f77ad]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-29409_github.com/golang/go_1.16.5",
              "shortDescription": {
                "text": "[CVE-2023-29409] github.com/golang/go 1.16.5"
              },
              "help": {
                "text": "Extremely large RSA keys in certificate chains can cause a client/server to expend significant CPU time verifying signatures. With fix, the size of RSA keys transmitted during handshakes is restricted to \u003c= 8192 bits. Based on a survey of publicly trusted RSA keys, there are currently only three certificates in circulation with keys larger than this, and all three appear to be test certificates that are not actively deployed. It is possible there are larger keys in use in private PKIs, but we target the web PKI, so causing breakage here in the interests of increasing the default safety of users of crypto/tls seems reasonable.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [1.19.12], [1.20.7], [1.21.0-rc.4]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2019-11840_golang.org/x/crypto_0.0.0-20190308221718-c2843e01d9a2",
              "shortDescription": {
                "text": "[CVE-2019-11840] golang.org/x/crypto 0.0.0-20190308221718-c2843e01d9a2"
              },
              "help": {
                "text": "An issue was discovered in supplementary Go cryptography libraries, aka golang-googlecode-go-crypto, before 2019-03-20. A flaw was found in the amd64 implementation of golang.org/x/crypto/salsa20 and golang.org/x/crypto/salsa20/salsa. If more than 256 GiB of keystream is generated, or if the counter otherwise grows greater than 32 bits, the amd64 implementation will first generate incorrect output, and then cycle back to previously generated keystream. Repeated keystream bytes can lead to loss of confidentiality in encryption applications, or to predictability in CSPRNG applications.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.0.0-20190320223903-b7391e95e576]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2019-11841_golang.org/x/crypto_0.0.0-20190308221718-c2843e01d9a2",
              "shortDescription": {
                "text": "[CVE-2019-11841] golang.org/x/crypto 0.0.0-20190308221718-c2843e01d9a2"
              },
              "help": {
                "text": "A message-forgery issue was discovered in crypto/openpgp/clearsign/clearsign.go in supplementary Go cryptography libraries 2019-03-25. According to the OpenPGP Message Format specification in RFC 4880 chapter 7, a cleartext signed message can contain one or more optional \"Hash\" Armor Headers. The \"Hash\" Armor Header specifies the message digest algorithm(s) used for the signature. However, the Go clearsign package ignores the value of this header, which allows an attacker to spoof it. Consequently, an attacker can lead a victim to believe the signature was generated using a different message digest algorithm than what was actually used. Moreover, since the library skips Armor Header parsing in general, an attacker can not only embed arbitrary Armor Headers, but also prepend arbitrary text to cleartext messages without invalidating the signatures.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [0.0.0-20190424203555-c05e17bb3b2d]   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2023-35116_com.fasterxml.jackson.core:jackson-databind_2.13.4.2",
              "shortDescription": {
                "text": "[CVE-2023-35116] com.fasterxml.jackson.core:jackson-databind 2.13.4.2"
              },
              "help": {
                "text": "jackson-databind through 2.15.2 allows attackers to cause a denial of service or other unspecified impact via a crafted object that uses cyclic dependencies. NOTE: the vendor's perspective is that this is not a valid vulnerability report, because the steps of constructing a cyclic data structure and trying to serialize it cannot be achieved by an external attacker.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.7      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "4.7"
              }
            },
            {
              "id": "CVE-2023-35116_com.fasterxml.jackson.core:jackson-databind_2.14.0",
              "shortDescription": {
                "text": "[CVE-2023-35116] com.fasterxml.jackson.core:jackson-databind 2.14.0"
              },
              "help": {
                "text": "jackson-databind through 2.15.2 allows attackers to cause a denial of service or other unspecified impact via a crafted object that uses cyclic dependencies. NOTE: the vendor's perspective is that this is not a valid vulnerability report, because the steps of constructing a cyclic data structure and trying to serialize it cannot be achieved by an external attacker.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.7      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "4.7"
              }
            },
            {
              "id": "CVE-2022-31022_github.com/blevesearch/bleve/v2_2.0.4-0.20210810162943-2b21ae8f266f",
              "shortDescription": {
                "text": "[CVE-2022-31022] github.com/blevesearch/bleve/v2 2.0.4-0.20210810162943-2b21ae8f266f"
              },
              "help": {
                "text": "Bleve is a text indexing library for go. Bleve includes HTTP utilities under bleve/http package, that are used by its sample application. These HTTP methods pave way for exploitation of a node’s filesystem where the bleve index resides, if the user has used bleve’s own HTTP (bleve/http) handlers for exposing the access to the indexes. For instance, the CreateIndexHandler (`http/index_create.go`) and DeleteIndexHandler (`http/index_delete.go`) enable an attacker to create a bleve index (directory structure) anywhere where the user running the server has the write permissions and to delete recursively any directory owned by the same user account. Users who have used the bleve/http package for exposing access to bleve index without the explicit handling for the Role Based Access Controls(RBAC) of the index assets would be impacted by this issue. There is no patch for this issue because the http package is purely intended to be used for demonstration purposes. Bleve was never designed handle the RBACs, nor it was ever advertised to be used in that way. The collaborators of this project have decided to stay away from adding any authentication or authorization to bleve project at the moment. The bleve/http package is mainly for demonstration purposes and it lacks exhaustive validation of the user inputs as well as any authentication and authorization measures. It is recommended to not use bleve/http in production use cases.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-26604_ubuntu:focal:libudev1_245.4-4ubuntu3.23",
              "shortDescription": {
                "text": "[CVE-2023-26604] ubuntu:focal:libudev1 245.4-4ubuntu3.23"
              },
              "help": {
                "text": "systemd before 247 does not adequately block local privilege escalation for some Sudo configurations, e.g., plausible sudoers files in which the \"systemctl status\" command may be executed. Specifically, systemd does not set LESSSECURE to 1, and thus other programs may be launched from the less program. This presents a substantial security risk when running systemctl from Sudo, because less executes as root when the terminal size is too small to show the complete systemctl output.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Applicable       | `sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2020-8908_com.google.guava:guava_31.0.1-jre",
              "shortDescription": {
                "text": "[CVE-2020-8908] com.google.guava:guava 31.0.1-jre"
              },
              "help": {
                "text": "A temp directory creation vulnerability exists in all versions of Guava, allowing an attacker with access to the machine to potentially access data in a temporary directory created by the Guava API com.google.common.io.Files.createTempDir(). By default, on unix-like systems, the created directory is world-readable (readable by an attacker with access to the system). The method in question has been marked @Deprecated in versions 30.0 and later and should not be used. For Android developers, we recommend choosing a temporary directory API provided by Android, such as context.getCacheDir(). For other Java developers, we recommend migrating to the Java 7 API java.nio.file.Files.createTempDirectory() which explicitly configures permissions of 700, or configuring the Java runtime's java.io.tmpdir system property to point to a location whose permissions are appropriately configured.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.3      | Not Applicable       | `sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar `       | [32.0.0-android]   |"
              },
              "properties": {
                "security-severity": "3.3"
              }
            },
            {
              "id": "CVE-2024-4741_ubuntu:focal:libssl1.1_1.1.1f-1ubuntu2.22",
              "shortDescription": {
                "text": "[CVE-2024-4741] ubuntu:focal:libssl1.1 1.1.1f-1ubuntu2.22"
              },
              "help": {
                "text": "Use After Free with SSL_free_buffers",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Applicable       | `sha256__163cc51dd081f81f5891885b7c4529a8c0d5fbc5d625d083bb440c53115ef2c7.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-26604_ubuntu:focal:libsystemd0_245.4-4ubuntu3.23",
              "shortDescription": {
                "text": "[CVE-2023-26604] ubuntu:focal:libsystemd0 245.4-4ubuntu3.23"
              },
              "help": {
                "text": "systemd before 247 does not adequately block local privilege escalation for some Sudo configurations, e.g., plausible sudoers files in which the \"systemctl status\" command may be executed. Specifically, systemd does not set LESSSECURE to 1, and thus other programs may be launched from the less program. This presents a substantial security risk when running systemctl from Sudo, because less executes as root when the terminal size is too small to show the complete systemctl output.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Applicable       | `sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2024-4741_ubuntu:focal:openssl_1.1.1f-1ubuntu2.22",
              "shortDescription": {
                "text": "[CVE-2024-4741] ubuntu:focal:openssl 1.1.1f-1ubuntu2.22"
              },
              "help": {
                "text": "Use After Free with SSL_free_buffers",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Applicable       | `sha256__163cc51dd081f81f5891885b7c4529a8c0d5fbc5d625d083bb440c53115ef2c7.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            }
          ],
          "version": "3.96.1"
        }
      },
      "results": [
        {
          "ruleId": "CVE-2020-28852_golang.org/x/text_0.3.4",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "[CVE-2020-28852] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-28851_golang.org/x/text_0.3.5",
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "[CVE-2020-28851] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-28840_github.com/docker/docker_17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "[CVE-2023-28840] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-15664_github.com/docker/docker_17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "text": "[CVE-2018-15664] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23648_github.com/containerd/containerd_1.3.4",
          "ruleIndex": 4,
          "level": "error",
          "message": {
            "text": "[CVE-2022-23648] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-13509_github.com/docker/docker_17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible",
          "ruleIndex": 5,
          "level": "error",
          "message": {
            "text": "[CVE-2019-13509] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24557_github.com/docker/docker_17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible",
          "ruleIndex": 6,
          "level": "error",
          "message": {
            "text": "[CVE-2024-24557] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-41103_github.com/containerd/containerd_1.3.4",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "[CVE-2021-41103] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-7919_golang.org/x/crypto_0.0.0-20190308221718-c2843e01d9a2",
          "ruleIndex": 8,
          "level": "error",
          "message": {
            "text": "[CVE-2020-7919] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41881_io.netty:netty-codec-haproxy_4.1.84.Final",
          "ruleIndex": 9,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41881] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-20225_pip_22.0.4",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "[CVE-2018-20225] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-48795_golang.org/x/crypto_0.0.0-20201002170205-7f63de1d35b0",
          "ruleIndex": 11,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-48795] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-48795_golang.org/x/crypto_0.0.0-20210314154223-e6e6c4f2bb5b",
          "ruleIndex": 12,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-48795] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-48795_golang.org/x/crypto_0.0.0-20221010152910-d6f0a8c073c2",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-48795] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-48795_golang.org/x/crypto_0.0.0-20190308221718-c2843e01d9a2",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-48795] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-48795_golang.org/x/crypto_0.0.0-20210322153248-0c34fe9e7dc2",
          "ruleIndex": 15,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-48795] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4203_cryptography_36.0.0",
          "ruleIndex": 16,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-4203] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39318_github.com/golang/go_1.18.7",
          "ruleIndex": 17,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39318] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-37891_urllib3_1.26.8",
          "ruleIndex": 18,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-37891] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-29857_org.bouncycastle:bcprov-jdk15on_1.70",
          "ruleIndex": 19,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-29857] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1705_github.com/golang/go_1.16.5",
          "ruleIndex": 20,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-1705] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-35195_requests_2.27.1",
          "ruleIndex": 21,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-35195] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-8565_k8s.io/client-go_0.19.4",
          "ruleIndex": 22,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-8565] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-41089_github.com/docker/docker_17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible",
          "ruleIndex": 23,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-41089] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-30172_org.bouncycastle:bcprov-jdk15on_1.70",
          "ruleIndex": 24,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-30172] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-21334_github.com/containerd/containerd_1.3.4",
          "ruleIndex": 25,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-21334] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-28842_github.com/docker/docker_17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible",
          "ruleIndex": 26,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-28842] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45284_github.com/golang/go_1.16.5",
          "ruleIndex": 27,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45284] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24786_google.golang.org/protobuf_1.24.0",
          "ruleIndex": 28,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-24786] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39326_github.com/golang/go_1.16.5",
          "ruleIndex": 29,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39326] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41915_io.netty:netty-codec-http_4.1.84.Final",
          "ruleIndex": 30,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-41915] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24532_github.com/golang/go_1.19.2",
          "ruleIndex": 31,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-24532] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-41190_github.com/opencontainers/image-spec_1.0.1",
          "ruleIndex": 32,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-41190] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39318_github.com/golang/go_1.16.5",
          "ruleIndex": 33,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39318] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-0727_cryptography_36.0.0",
          "ruleIndex": 34,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-0727] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-40577_github.com/prometheus/alertmanager_0.21.0",
          "ruleIndex": 35,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-40577] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-32760_github.com/containerd/containerd_1.3.4",
          "ruleIndex": 36,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-32760] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39318_github.com/golang/go_1.19.2",
          "ruleIndex": 37,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39318] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-34558_github.com/golang/go_1.16.5",
          "ruleIndex": 38,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-34558] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-29025_io.netty:netty-codec-http_4.1.84.Final",
          "ruleIndex": 39,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-29025] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39319_github.com/golang/go_1.16.5",
          "ruleIndex": 40,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39319] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-23931_cryptography_36.0.0",
          "ruleIndex": 41,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-23931] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-28841_github.com/docker/docker_17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible",
          "ruleIndex": 42,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-28841] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3446_cryptography_36.0.0",
          "ruleIndex": 43,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3446] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30187_com.azure:azure-storage-blob_12.14.3",
          "ruleIndex": 44,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-30187] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-41091_github.com/docker/docker_17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible",
          "ruleIndex": 45,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-41091] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-2253_github.com/docker/distribution_2.7.1+incompatible",
          "ruleIndex": 46,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-2253] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-31030_github.com/containerd/containerd_1.3.4",
          "ruleIndex": 47,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-31030] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-29018_github.com/docker/docker_17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible",
          "ruleIndex": 48,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-29018] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39319_github.com/golang/go_1.18.7",
          "ruleIndex": 49,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39319] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45284_github.com/golang/go_1.19.2",
          "ruleIndex": 50,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45284] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23471_github.com/containerd/containerd_1.3.4",
          "ruleIndex": 51,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-23471] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24786_google.golang.org/protobuf_1.26.0",
          "ruleIndex": 52,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-24786] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-10892_github.com/docker/docker_17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible",
          "ruleIndex": 53,
          "level": "warning",
          "message": {
            "text": "[CVE-2018-10892] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-15257_github.com/containerd/containerd_1.3.4",
          "ruleIndex": 54,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-15257] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45284_github.com/golang/go_1.18.7",
          "ruleIndex": 55,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45284] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-31684_io.projectreactor.netty:reactor-netty-http_1.0.14",
          "ruleIndex": 56,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-31684] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24786_google.golang.org/protobuf_1.21.0",
          "ruleIndex": 57,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-24786] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24532_github.com/golang/go_1.18.7",
          "ruleIndex": 58,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-24532] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39326_github.com/golang/go_1.19.2",
          "ruleIndex": 59,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39326] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-25710_org.apache.commons:commons-compress_1.21",
          "ruleIndex": 60,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-25710] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45803_urllib3_1.26.8",
          "ruleIndex": 61,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45803] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24769_github.com/docker/docker_17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible",
          "ruleIndex": 62,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-24769] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-36124_org.iq80.snappy:snappy_0.4",
          "ruleIndex": 63,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-36124] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-30171_org.bouncycastle:bcprov-jdk15on_1.70",
          "ruleIndex": 64,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-30171] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24532_github.com/golang/go_1.16.5",
          "ruleIndex": 65,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-24532] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-34462_io.netty:netty-handler_4.1.84.Final",
          "ruleIndex": 66,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-34462] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2018-20699_github.com/docker/docker_17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible",
          "ruleIndex": 67,
          "level": "warning",
          "message": {
            "text": "[CVE-2018-20699] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-27534_github.com/docker/docker_17.12.0-ce-rc1.0.20200706150819-a40b877fbb9e+incompatible",
          "ruleIndex": 68,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-27534] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4304_cryptography_36.0.0",
          "ruleIndex": 69,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-4304] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39326_github.com/golang/go_1.18.7",
          "ruleIndex": 70,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39326] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39319_github.com/golang/go_1.19.2",
          "ruleIndex": 71,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-39319] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-22916_ubuntu:focal:xz-utils_5.2.4-1ubuntu1.1",
          "ruleIndex": 72,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-22916] sha256__163cc51dd081f81f5891885b7c4529a8c0d5fbc5d625d083bb440c53115ef2c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-22916_ubuntu:focal:liblzma5_5.2.4-1ubuntu1.1",
          "ruleIndex": 73,
          "level": "warning",
          "message": {
            "text": "[CVE-2020-22916] sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2236_ubuntu:focal:libgcrypt20_1.8.5-5ubuntu1.1",
          "ruleIndex": 74,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-2236] sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-31879_ubuntu:focal:wget_1.20.3-1ubuntu2",
          "ruleIndex": 75,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-31879] sha256__163cc51dd081f81f5891885b7c4529a8c0d5fbc5d625d083bb440c53115ef2c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-38428_ubuntu:focal:wget_1.20.3-1ubuntu2",
          "ruleIndex": 76,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-38428] sha256__163cc51dd081f81f5891885b7c4529a8c0d5fbc5d625d083bb440c53115ef2c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-33201_org.bouncycastle:bcprov-jdk15on_1.70",
          "ruleIndex": 77,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-33201] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2017-11164_ubuntu:focal:libpcre3:2_8.39-12ubuntu0.1",
          "ruleIndex": 78,
          "level": "note",
          "message": {
            "text": "[CVE-2017-11164] sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-5752_pip_22.0.4",
          "ruleIndex": 79,
          "level": "note",
          "message": {
            "text": "[CVE-2023-5752] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-34062_tqdm_4.63.0",
          "ruleIndex": 80,
          "level": "note",
          "message": {
            "text": "[CVE-2024-34062] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30629_github.com/golang/go_1.16.5",
          "ruleIndex": 81,
          "level": "note",
          "message": {
            "text": "[CVE-2022-30629] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2511_ubuntu:focal:libssl1.1_1.1.1f-1ubuntu2.22",
          "ruleIndex": 82,
          "level": "note",
          "message": {
            "text": "[CVE-2024-2511] sha256__163cc51dd081f81f5891885b7c4529a8c0d5fbc5d625d083bb440c53115ef2c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-50495_ubuntu:focal:ncurses-base_6.2-0ubuntu2.1",
          "ruleIndex": 83,
          "level": "note",
          "message": {
            "text": "[CVE-2023-50495] sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29383_ubuntu:focal:login:1_4.8.1-1ubuntu5.20.04.5",
          "ruleIndex": 84,
          "level": "note",
          "message": {
            "text": "[CVE-2023-29383] sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2016-20013_ubuntu:focal:libc6_2.31-0ubuntu9.16",
          "ruleIndex": 85,
          "level": "note",
          "message": {
            "text": "[CVE-2016-20013] sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-50495_ubuntu:focal:libncursesw6_6.2-0ubuntu2.1",
          "ruleIndex": 86,
          "level": "note",
          "message": {
            "text": "[CVE-2023-50495] sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45918_ubuntu:focal:ncurses-base_6.2-0ubuntu2.1",
          "ruleIndex": 87,
          "level": "note",
          "message": {
            "text": "[CVE-2023-45918] sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-50495_ubuntu:focal:libtinfo6_6.2-0ubuntu2.1",
          "ruleIndex": 88,
          "level": "note",
          "message": {
            "text": "[CVE-2023-50495] sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2016-2781_ubuntu:focal:coreutils_8.30-3ubuntu2",
          "ruleIndex": 89,
          "level": "note",
          "message": {
            "text": "[CVE-2016-2781] sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-50495_ubuntu:focal:libncurses6_6.2-0ubuntu2.1",
          "ruleIndex": 90,
          "level": "note",
          "message": {
            "text": "[CVE-2023-50495] sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45918_ubuntu:focal:libtinfo6_6.2-0ubuntu2.1",
          "ruleIndex": 91,
          "level": "note",
          "message": {
            "text": "[CVE-2023-45918] sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45918_ubuntu:focal:ncurses-bin_6.2-0ubuntu2.1",
          "ruleIndex": 92,
          "level": "note",
          "message": {
            "text": "[CVE-2023-45918] sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2016-20013_ubuntu:focal:libc-bin_2.31-0ubuntu9.16",
          "ruleIndex": 93,
          "level": "note",
          "message": {
            "text": "[CVE-2016-20013] sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2013-4235_ubuntu:focal:login:1_4.8.1-1ubuntu5.20.04.5",
          "ruleIndex": 94,
          "level": "note",
          "message": {
            "text": "[CVE-2013-4235] sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-3219_ubuntu:focal:gpgv_2.2.19-3ubuntu2.2",
          "ruleIndex": 95,
          "level": "note",
          "message": {
            "text": "[CVE-2022-3219] sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45918_ubuntu:focal:libncurses6_6.2-0ubuntu2.1",
          "ruleIndex": 96,
          "level": "note",
          "message": {
            "text": "[CVE-2023-45918] sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-7008_ubuntu:focal:libsystemd0_245.4-4ubuntu3.23",
          "ruleIndex": 97,
          "level": "note",
          "message": {
            "text": "[CVE-2023-7008] sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2013-4235_ubuntu:focal:passwd:1_4.8.1-1ubuntu5.20.04.5",
          "ruleIndex": 98,
          "level": "note",
          "message": {
            "text": "[CVE-2013-4235] sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-50495_ubuntu:focal:ncurses-bin_6.2-0ubuntu2.1",
          "ruleIndex": 99,
          "level": "note",
          "message": {
            "text": "[CVE-2023-50495] sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-2511_ubuntu:focal:openssl_1.1.1f-1ubuntu2.22",
          "ruleIndex": 100,
          "level": "note",
          "message": {
            "text": "[CVE-2024-2511] sha256__163cc51dd081f81f5891885b7c4529a8c0d5fbc5d625d083bb440c53115ef2c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45918_ubuntu:focal:libncursesw6_6.2-0ubuntu2.1",
          "ruleIndex": 101,
          "level": "note",
          "message": {
            "text": "[CVE-2023-45918] sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29383_ubuntu:focal:passwd:1_4.8.1-1ubuntu5.20.04.5",
          "ruleIndex": 102,
          "level": "note",
          "message": {
            "text": "[CVE-2023-29383] sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-7008_ubuntu:focal:libudev1_245.4-4ubuntu3.23",
          "ruleIndex": 103,
          "level": "note",
          "message": {
            "text": "[CVE-2023-7008] sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29402_github.com/golang/go_1.16.5",
          "ruleIndex": 104,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29402] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29404_github.com/golang/go_1.19.2",
          "ruleIndex": 105,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29404] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24540_github.com/golang/go_1.19.2",
          "ruleIndex": 106,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24540] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24538_github.com/golang/go_1.18.7",
          "ruleIndex": 107,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24538] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24538_github.com/golang/go_1.16.5",
          "ruleIndex": 108,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24538] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29404_github.com/golang/go_1.16.5",
          "ruleIndex": 109,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29404] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23806_github.com/golang/go_1.16.5",
          "ruleIndex": 110,
          "level": "error",
          "message": {
            "text": "[CVE-2022-23806] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-38297_github.com/golang/go_1.16.5",
          "ruleIndex": 111,
          "level": "error",
          "message": {
            "text": "[CVE-2021-38297] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29402_github.com/golang/go_1.18.7",
          "ruleIndex": 112,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29402] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29404_github.com/golang/go_1.18.7",
          "ruleIndex": 113,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29404] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29405_github.com/golang/go_1.19.2",
          "ruleIndex": 114,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29405] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24540_github.com/golang/go_1.16.5",
          "ruleIndex": 115,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24540] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-37920_certifi_2022.9.24",
          "ruleIndex": 116,
          "level": "error",
          "message": {
            "text": "[CVE-2023-37920] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24538_github.com/golang/go_1.19.2",
          "ruleIndex": 117,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24538] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24540_github.com/golang/go_1.18.7",
          "ruleIndex": 118,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24540] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29405_github.com/golang/go_1.16.5",
          "ruleIndex": 119,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29405] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29402_github.com/golang/go_1.19.2",
          "ruleIndex": 120,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29402] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29405_github.com/golang/go_1.18.7",
          "ruleIndex": 121,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29405] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-44487_golang.org/x/net_0.0.0-20201110031124-69a78807bb2b",
          "ruleIndex": 122,
          "level": "error",
          "message": {
            "text": "[CVE-2023-44487] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45287_github.com/golang/go_1.16.5",
          "ruleIndex": 123,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45287] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24536_github.com/golang/go_1.18.7",
          "ruleIndex": 124,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24536] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27664_golang.org/x/net_0.0.0-20201110031124-69a78807bb2b",
          "ruleIndex": 125,
          "level": "error",
          "message": {
            "text": "[CVE-2022-27664] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24537_github.com/golang/go_1.19.2",
          "ruleIndex": 126,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24537] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41721_golang.org/x/net_0.0.0-20220728211354-c7608f3a8462",
          "ruleIndex": 127,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41721] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32149_golang.org/x/text_0.3.5",
          "ruleIndex": 128,
          "level": "error",
          "message": {
            "text": "[CVE-2022-32149] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-33194_golang.org/x/net_0.0.0-20201110031124-69a78807bb2b",
          "ruleIndex": 129,
          "level": "error",
          "message": {
            "text": "[CVE-2021-33194] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23491_certifi_2022.9.24",
          "ruleIndex": 130,
          "level": "error",
          "message": {
            "text": "[CVE-2022-23491] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45287_github.com/golang/go_1.18.7",
          "ruleIndex": 131,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45287] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-43565_golang.org/x/crypto_0.0.0-20210322153248-0c34fe9e7dc2",
          "ruleIndex": 132,
          "level": "error",
          "message": {
            "text": "[CVE-2021-43565] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-43565_golang.org/x/crypto_0.0.0-20210314154223-e6e6c4f2bb5b",
          "ruleIndex": 133,
          "level": "error",
          "message": {
            "text": "[CVE-2021-43565] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32189_github.com/golang/go_1.16.5",
          "ruleIndex": 134,
          "level": "error",
          "message": {
            "text": "[CVE-2022-32189] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32149_golang.org/x/text_0.3.6",
          "ruleIndex": 135,
          "level": "error",
          "message": {
            "text": "[CVE-2022-32149] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0215_cryptography_36.0.0",
          "ruleIndex": 136,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0215] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27191_golang.org/x/crypto_0.0.0-20190308221718-c2843e01d9a2",
          "ruleIndex": 137,
          "level": "error",
          "message": {
            "text": "[CVE-2022-27191] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41724_github.com/golang/go_1.18.7",
          "ruleIndex": 138,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41724] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45283_github.com/golang/go_1.16.5",
          "ruleIndex": 139,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45283] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24539_github.com/golang/go_1.18.7",
          "ruleIndex": 140,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24539] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-28948_gopkg.in/yaml.v3_3.0.0-20200615113413-eeeca48fe776",
          "ruleIndex": 141,
          "level": "error",
          "message": {
            "text": "[CVE-2022-28948] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2879_github.com/golang/go_1.16.5",
          "ruleIndex": 142,
          "level": "error",
          "message": {
            "text": "[CVE-2022-2879] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-40152_com.fasterxml.woodstox:woodstox-core_6.2.7",
          "ruleIndex": 143,
          "level": "error",
          "message": {
            "text": "[CVE-2022-40152] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30631_github.com/golang/go_1.16.5",
          "ruleIndex": 144,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30631] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-44487_google.golang.org/grpc_1.33.1",
          "ruleIndex": 145,
          "level": "error",
          "message": {
            "text": "[CVE-2023-44487] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29403_github.com/golang/go_1.18.7",
          "ruleIndex": 146,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29403] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45285_github.com/golang/go_1.19.2",
          "ruleIndex": 147,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45285] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24675_github.com/golang/go_1.16.5",
          "ruleIndex": 148,
          "level": "error",
          "message": {
            "text": "[CVE-2022-24675] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-28131_github.com/golang/go_1.16.5",
          "ruleIndex": 149,
          "level": "error",
          "message": {
            "text": "[CVE-2022-28131] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45283_github.com/golang/go_1.19.2",
          "ruleIndex": 150,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45283] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41722_github.com/golang/go_1.19.2",
          "ruleIndex": 151,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41722] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32149_golang.org/x/text_0.3.7",
          "ruleIndex": 152,
          "level": "error",
          "message": {
            "text": "[CVE-2022-32149] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-21698_github.com/prometheus/client_golang_1.10.0",
          "ruleIndex": 153,
          "level": "error",
          "message": {
            "text": "[CVE-2022-21698] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39323_github.com/golang/go_1.16.5",
          "ruleIndex": 154,
          "level": "error",
          "message": {
            "text": "[CVE-2023-39323] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-9283_golang.org/x/crypto_0.0.0-20190308221718-c2843e01d9a2",
          "ruleIndex": 155,
          "level": "error",
          "message": {
            "text": "[CVE-2020-9283] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-28327_github.com/golang/go_1.16.5",
          "ruleIndex": 156,
          "level": "error",
          "message": {
            "text": "[CVE-2022-28327] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-3996_cryptography_36.0.0",
          "ruleIndex": 157,
          "level": "error",
          "message": {
            "text": "[CVE-2022-3996] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41725_github.com/golang/go_1.18.7",
          "ruleIndex": 158,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41725] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30634_github.com/golang/go_1.16.5",
          "ruleIndex": 159,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30634] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45285_github.com/golang/go_1.16.5",
          "ruleIndex": 160,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45285] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30635_github.com/golang/go_1.16.5",
          "ruleIndex": 161,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30635] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-49083_cryptography_36.0.0",
          "ruleIndex": 162,
          "level": "error",
          "message": {
            "text": "[CVE-2023-49083] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0217_cryptography_36.0.0",
          "ruleIndex": 163,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0217] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-44487_google.golang.org/grpc_1.37.0",
          "ruleIndex": 164,
          "level": "error",
          "message": {
            "text": "[CVE-2023-44487] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45285_github.com/golang/go_1.18.7",
          "ruleIndex": 165,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45285] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24539_github.com/golang/go_1.19.2",
          "ruleIndex": 166,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24539] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41722_github.com/golang/go_1.16.5",
          "ruleIndex": 167,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41722] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39323_github.com/golang/go_1.18.7",
          "ruleIndex": 168,
          "level": "error",
          "message": {
            "text": "[CVE-2023-39323] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-41772_github.com/golang/go_1.16.5",
          "ruleIndex": 169,
          "level": "error",
          "message": {
            "text": "[CVE-2021-41772] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-50782_cryptography_36.0.0",
          "ruleIndex": 170,
          "level": "error",
          "message": {
            "text": "[CVE-2023-50782] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41720_github.com/golang/go_1.16.5",
          "ruleIndex": 171,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41720] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24534_github.com/golang/go_1.16.5",
          "ruleIndex": 172,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24534] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-34454_org.xerial.snappy:snappy-java_1.1.8.4",
          "ruleIndex": 173,
          "level": "error",
          "message": {
            "text": "[CVE-2023-34454] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0401_cryptography_36.0.0",
          "ruleIndex": 174,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0401] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-4807_cryptography_36.0.0",
          "ruleIndex": 175,
          "level": "error",
          "message": {
            "text": "[CVE-2023-4807] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0216_cryptography_36.0.0",
          "ruleIndex": 176,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0216] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41725_github.com/golang/go_1.16.5",
          "ruleIndex": 177,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41725] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-43565_golang.org/x/crypto_0.0.0-20201002170205-7f63de1d35b0",
          "ruleIndex": 178,
          "level": "error",
          "message": {
            "text": "[CVE-2021-43565] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-34062_io.projectreactor.netty:reactor-netty-http_1.0.14",
          "ruleIndex": 179,
          "level": "error",
          "message": {
            "text": "[CVE-2023-34062] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41720_github.com/golang/go_1.19.2",
          "ruleIndex": 180,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41720] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41716_github.com/golang/go_1.16.5",
          "ruleIndex": 181,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41716] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-41771_github.com/golang/go_1.16.5",
          "ruleIndex": 182,
          "level": "error",
          "message": {
            "text": "[CVE-2021-41771] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41716_github.com/golang/go_1.19.2",
          "ruleIndex": 183,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41716] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24537_github.com/golang/go_1.16.5",
          "ruleIndex": 184,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24537] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41715_github.com/golang/go_1.16.5",
          "ruleIndex": 185,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41715] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-39293_github.com/golang/go_1.16.5",
          "ruleIndex": 186,
          "level": "error",
          "message": {
            "text": "[CVE-2021-39293] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32149_golang.org/x/text_0.3.4",
          "ruleIndex": 187,
          "level": "error",
          "message": {
            "text": "[CVE-2022-32149] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-44487_golang.org/x/net_0.0.0-20220728211354-c7608f3a8462",
          "ruleIndex": 188,
          "level": "error",
          "message": {
            "text": "[CVE-2023-44487] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41724_github.com/golang/go_1.19.2",
          "ruleIndex": 189,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41724] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41725_github.com/golang/go_1.19.2",
          "ruleIndex": 190,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41725] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23773_github.com/golang/go_1.16.5",
          "ruleIndex": 191,
          "level": "error",
          "message": {
            "text": "[CVE-2022-23773] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39325_golang.org/x/net_0.0.0-20210410081132-afb366fc7cd1",
          "ruleIndex": 192,
          "level": "error",
          "message": {
            "text": "[CVE-2023-39325] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30630_github.com/golang/go_1.16.5",
          "ruleIndex": 193,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30630] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27191_golang.org/x/crypto_0.0.0-20210314154223-e6e6c4f2bb5b",
          "ruleIndex": 194,
          "level": "error",
          "message": {
            "text": "[CVE-2022-27191] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24534_github.com/golang/go_1.18.7",
          "ruleIndex": 195,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24534] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39323_github.com/golang/go_1.19.2",
          "ruleIndex": 196,
          "level": "error",
          "message": {
            "text": "[CVE-2023-39323] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-21698_github.com/prometheus/client_golang_1.8.0",
          "ruleIndex": 197,
          "level": "error",
          "message": {
            "text": "[CVE-2022-21698] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2880_github.com/golang/go_1.16.5",
          "ruleIndex": 198,
          "level": "error",
          "message": {
            "text": "[CVE-2022-2880] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-25173_github.com/containerd/containerd_1.3.4",
          "ruleIndex": 199,
          "level": "error",
          "message": {
            "text": "[CVE-2023-25173] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45283_github.com/golang/go_1.18.7",
          "ruleIndex": 200,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45283] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-29804_github.com/golang/go_1.16.5",
          "ruleIndex": 201,
          "level": "error",
          "message": {
            "text": "[CVE-2022-29804] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41723_golang.org/x/net_0.0.0-20210410081132-afb366fc7cd1",
          "ruleIndex": 202,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41723] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27191_golang.org/x/crypto_0.0.0-20201002170205-7f63de1d35b0",
          "ruleIndex": 203,
          "level": "error",
          "message": {
            "text": "[CVE-2022-27191] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-43565_golang.org/x/crypto_0.0.0-20190308221718-c2843e01d9a2",
          "ruleIndex": 204,
          "level": "error",
          "message": {
            "text": "[CVE-2021-43565] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24536_github.com/golang/go_1.16.5",
          "ruleIndex": 205,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24536] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-44487_google.golang.org/grpc_1.24.0",
          "ruleIndex": 206,
          "level": "error",
          "message": {
            "text": "[CVE-2023-44487] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39325_golang.org/x/net_0.0.0-20201110031124-69a78807bb2b",
          "ruleIndex": 207,
          "level": "error",
          "message": {
            "text": "[CVE-2023-39325] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41722_github.com/golang/go_1.18.7",
          "ruleIndex": 208,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41722] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29400_github.com/golang/go_1.16.5",
          "ruleIndex": 209,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29400] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0286_cryptography_36.0.0",
          "ruleIndex": 210,
          "level": "error",
          "message": {
            "text": "[CVE-2023-0286] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-29652_golang.org/x/crypto_0.0.0-20190308221718-c2843e01d9a2",
          "ruleIndex": 211,
          "level": "error",
          "message": {
            "text": "[CVE-2020-29652] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29403_github.com/golang/go_1.19.2",
          "ruleIndex": 212,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29403] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-33194_golang.org/x/net_0.0.0-20210324205630-d1beb07c2056",
          "ruleIndex": 213,
          "level": "error",
          "message": {
            "text": "[CVE-2021-33194] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27664_golang.org/x/net_0.0.0-20220728211354-c7608f3a8462",
          "ruleIndex": 214,
          "level": "error",
          "message": {
            "text": "[CVE-2022-27664] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29403_github.com/golang/go_1.16.5",
          "ruleIndex": 215,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29403] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-44487_golang.org/x/net_0.0.0-20210410081132-afb366fc7cd1",
          "ruleIndex": 216,
          "level": "error",
          "message": {
            "text": "[CVE-2023-44487] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-38561_golang.org/x/text_0.3.4",
          "ruleIndex": 217,
          "level": "error",
          "message": {
            "text": "[CVE-2021-38561] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39325_golang.org/x/net_0.0.0-20210324205630-d1beb07c2056",
          "ruleIndex": 218,
          "level": "error",
          "message": {
            "text": "[CVE-2023-39325] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30632_github.com/golang/go_1.16.5",
          "ruleIndex": 219,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30632] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-43642_org.xerial.snappy:snappy-java_1.1.8.4",
          "ruleIndex": 220,
          "level": "error",
          "message": {
            "text": "[CVE-2023-43642] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-34453_org.xerial.snappy:snappy-java_1.1.8.4",
          "ruleIndex": 221,
          "level": "error",
          "message": {
            "text": "[CVE-2023-34453] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-2976_com.google.guava:guava_31.0.1-jre",
          "ruleIndex": 222,
          "level": "error",
          "message": {
            "text": "[CVE-2023-2976] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41723_golang.org/x/net_0.0.0-20210324205630-d1beb07c2056",
          "ruleIndex": 223,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41723] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27191_golang.org/x/crypto_0.0.0-20210322153248-0c34fe9e7dc2",
          "ruleIndex": 224,
          "level": "error",
          "message": {
            "text": "[CVE-2022-27191] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-34054_io.projectreactor.netty:reactor-netty-http_1.0.14",
          "ruleIndex": 225,
          "level": "error",
          "message": {
            "text": "[CVE-2023-34054] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30580_github.com/golang/go_1.16.5",
          "ruleIndex": 226,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30580] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41723_golang.org/x/net_0.0.0-20220728211354-c7608f3a8462",
          "ruleIndex": 227,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41723] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-38561_golang.org/x/text_0.3.6",
          "ruleIndex": 228,
          "level": "error",
          "message": {
            "text": "[CVE-2021-38561] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-33194_golang.org/x/net_0.0.0-20210410081132-afb366fc7cd1",
          "ruleIndex": 229,
          "level": "error",
          "message": {
            "text": "[CVE-2021-33194] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27664_golang.org/x/net_0.0.0-20210410081132-afb366fc7cd1",
          "ruleIndex": 230,
          "level": "error",
          "message": {
            "text": "[CVE-2022-27664] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29400_github.com/golang/go_1.18.7",
          "ruleIndex": 231,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29400] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41724_github.com/golang/go_1.16.5",
          "ruleIndex": 232,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41724] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-34455_org.xerial.snappy:snappy-java_1.1.8.4",
          "ruleIndex": 233,
          "level": "error",
          "message": {
            "text": "[CVE-2023-34455] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-38561_golang.org/x/text_0.3.5",
          "ruleIndex": 234,
          "level": "error",
          "message": {
            "text": "[CVE-2021-38561] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24537_github.com/golang/go_1.18.7",
          "ruleIndex": 235,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24537] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-29652_golang.org/x/crypto_0.0.0-20201002170205-7f63de1d35b0",
          "ruleIndex": 236,
          "level": "error",
          "message": {
            "text": "[CVE-2020-29652] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24536_github.com/golang/go_1.19.2",
          "ruleIndex": 237,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24536] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24539_github.com/golang/go_1.16.5",
          "ruleIndex": 238,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24539] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-39325_golang.org/x/net_0.0.0-20220728211354-c7608f3a8462",
          "ruleIndex": 239,
          "level": "error",
          "message": {
            "text": "[CVE-2023-39325] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-27664_golang.org/x/net_0.0.0-20210324205630-d1beb07c2056",
          "ruleIndex": 240,
          "level": "error",
          "message": {
            "text": "[CVE-2022-27664] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-44487_io.netty:netty-codec-http2_4.1.84.Final",
          "ruleIndex": 241,
          "level": "error",
          "message": {
            "text": "[CVE-2023-44487] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-40898_wheel_0.37.1",
          "ruleIndex": 242,
          "level": "error",
          "message": {
            "text": "[CVE-2022-40898] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-44487_golang.org/x/net_0.0.0-20210324205630-d1beb07c2056",
          "ruleIndex": 243,
          "level": "error",
          "message": {
            "text": "[CVE-2023-44487] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41720_github.com/golang/go_1.18.7",
          "ruleIndex": 244,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41720] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41716_github.com/golang/go_1.18.7",
          "ruleIndex": 245,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41716] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-23772_github.com/golang/go_1.16.5",
          "ruleIndex": 246,
          "level": "error",
          "message": {
            "text": "[CVE-2022-23772] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45287_github.com/golang/go_1.19.2",
          "ruleIndex": 247,
          "level": "error",
          "message": {
            "text": "[CVE-2023-45287] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29400_github.com/golang/go_1.19.2",
          "ruleIndex": 248,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29400] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-24534_github.com/golang/go_1.19.2",
          "ruleIndex": 249,
          "level": "error",
          "message": {
            "text": "[CVE-2023-24534] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-24921_github.com/golang/go_1.16.5",
          "ruleIndex": 250,
          "level": "error",
          "message": {
            "text": "[CVE-2022-24921] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-43804_urllib3_1.26.8",
          "ruleIndex": 251,
          "level": "error",
          "message": {
            "text": "[CVE-2023-43804] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-30633_github.com/golang/go_1.16.5",
          "ruleIndex": 252,
          "level": "error",
          "message": {
            "text": "[CVE-2022-30633] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4450_cryptography_36.0.0",
          "ruleIndex": 253,
          "level": "error",
          "message": {
            "text": "[CVE-2022-4450] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41723_golang.org/x/net_0.0.0-20201110031124-69a78807bb2b",
          "ruleIndex": 254,
          "level": "error",
          "message": {
            "text": "[CVE-2022-41723] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3978_golang.org/x/net_0.0.0-20210410081132-afb366fc7cd1",
          "ruleIndex": 255,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3978] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-26308_org.apache.commons:commons-compress_1.21",
          "ruleIndex": 256,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-26308] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_golang.org/x/net_0.0.0-20210324205630-d1beb07c2056",
          "ruleIndex": 257,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3978_golang.org/x/net_0.0.0-20220728211354-c7608f3a8462",
          "ruleIndex": 258,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3978] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29406_github.com/golang/go_1.19.2",
          "ruleIndex": 259,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29406] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-40897_setuptools_58.0.4",
          "ruleIndex": 260,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-40897] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3978_golang.org/x/net_0.0.0-20201110031124-69a78807bb2b",
          "ruleIndex": 261,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3978] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41717_golang.org/x/net_0.0.0-20220728211354-c7608f3a8462",
          "ruleIndex": 262,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-41717] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_github.com/golang/go_1.16.5",
          "ruleIndex": 263,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_github.com/golang/go_1.18.7",
          "ruleIndex": 264,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_golang.org/x/net_0.0.0-20210410081132-afb366fc7cd1",
          "ruleIndex": 265,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-20329_go.mongodb.org/mongo-driver_1.4.3",
          "ruleIndex": 266,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-20329] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-31525_golang.org/x/net_0.0.0-20210324205630-d1beb07c2056",
          "ruleIndex": 267,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-31525] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-36221_github.com/golang/go_1.16.5",
          "ruleIndex": 268,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-36221] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41717_golang.org/x/net_0.0.0-20210324205630-d1beb07c2056",
          "ruleIndex": 269,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-41717] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29406_github.com/golang/go_1.18.7",
          "ruleIndex": 270,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29406] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-29526_golang.org/x/sys_0.0.0-20201119102817-f84b799fce68",
          "ruleIndex": 271,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-29526] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41717_golang.org/x/net_0.0.0-20201110031124-69a78807bb2b",
          "ruleIndex": 272,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-41717] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-31525_golang.org/x/net_0.0.0-20210410081132-afb366fc7cd1",
          "ruleIndex": 273,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-31525] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-41717_golang.org/x/net_0.0.0-20210410081132-afb366fc7cd1",
          "ruleIndex": 274,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-41717] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_golang.org/x/net_0.0.0-20220728211354-c7608f3a8462",
          "ruleIndex": 275,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-32681_requests_2.27.1",
          "ruleIndex": 276,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-32681] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-40897_setuptools_58.1.0",
          "ruleIndex": 277,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-40897] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-44717_github.com/golang/go_1.16.5",
          "ruleIndex": 278,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-44717] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1962_github.com/golang/go_1.16.5",
          "ruleIndex": 279,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-1962] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29409_github.com/golang/go_1.19.2",
          "ruleIndex": 280,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29409] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_github.com/golang/go_1.19.2",
          "ruleIndex": 281,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-3978_golang.org/x/net_0.0.0-20210324205630-d1beb07c2056",
          "ruleIndex": 282,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-3978] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-31525_golang.org/x/net_0.0.0-20201110031124-69a78807bb2b",
          "ruleIndex": 283,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-31525] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_golang.org/x/net_0.0.0-20201110031124-69a78807bb2b",
          "ruleIndex": 284,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-25153_github.com/containerd/containerd_1.3.4",
          "ruleIndex": 285,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-25153] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-32148_github.com/golang/go_1.16.5",
          "ruleIndex": 286,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-32148] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-2650_cryptography_36.0.0",
          "ruleIndex": 287,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-2650] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29409_github.com/golang/go_1.18.7",
          "ruleIndex": 288,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29409] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29406_github.com/golang/go_1.16.5",
          "ruleIndex": 289,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29406] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-29526_golang.org/x/sys_0.0.0-20210403161142-5e06dd20ab57",
          "ruleIndex": 290,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-29526] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29409_github.com/golang/go_1.16.5",
          "ruleIndex": 291,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-29409] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-11840_golang.org/x/crypto_0.0.0-20190308221718-c2843e01d9a2",
          "ruleIndex": 292,
          "level": "warning",
          "message": {
            "text": "[CVE-2019-11840] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-11841_golang.org/x/crypto_0.0.0-20190308221718-c2843e01d9a2",
          "ruleIndex": 293,
          "level": "warning",
          "message": {
            "text": "[CVE-2019-11841] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-35116_com.fasterxml.jackson.core:jackson-databind_2.13.4.2",
          "ruleIndex": 294,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-35116] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-35116_com.fasterxml.jackson.core:jackson-databind_2.14.0",
          "ruleIndex": 295,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-35116] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-31022_github.com/blevesearch/bleve/v2_2.0.4-0.20210810162943-2b21ae8f266f",
          "ruleIndex": 296,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-31022] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-26604_ubuntu:focal:libudev1_245.4-4ubuntu3.23",
          "ruleIndex": 297,
          "level": "note",
          "message": {
            "text": "[CVE-2023-26604] sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-8908_com.google.guava:guava_31.0.1-jre",
          "ruleIndex": 298,
          "level": "note",
          "message": {
            "text": "[CVE-2020-8908] sha256__e7e6357da5b77347b25d64c95abc352628aaad8c32386859c04030510d2201cb.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-4741_ubuntu:focal:libssl1.1_1.1.1f-1ubuntu2.22",
          "ruleIndex": 299,
          "level": "note",
          "message": {
            "text": "[CVE-2024-4741] sha256__163cc51dd081f81f5891885b7c4529a8c0d5fbc5d625d083bb440c53115ef2c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-26604_ubuntu:focal:libsystemd0_245.4-4ubuntu3.23",
          "ruleIndex": 300,
          "level": "note",
          "message": {
            "text": "[CVE-2023-26604] sha256__3ec3ded77c0ce89e931f92aed086b2a2c774a6fbd51617853decc8afa4e1087a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-4741_ubuntu:focal:openssl_1.1.1f-1ubuntu2.22",
          "ruleIndex": 301,
          "level": "note",
          "message": {
            "text": "[CVE-2024-4741] sha256__163cc51dd081f81f5891885b7c4529a8c0d5fbc5d625d083bb440c53115ef2c7.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://jfrog.com/help/r/jfrog-security-documentation/jfrog-advanced-security",
          "name": "JFrog Applicability Scanner",
          "rules": [
            {
              "id": "applic_CVE-2022-41720",
              "name": "CVE-2022-41720",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41720"
              },
              "fullDescription": {
                "text": "The scanner checks whether one of the vulnerable functions `os.dirFS.Open` or  `net/http.Dir.Open` is called.",
                "markdown": "The scanner checks whether one of the vulnerable functions `os.dirFS.Open` or  `net/http.Dir.Open` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41722",
              "name": "CVE-2022-41722",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41722"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-38297",
              "name": "CVE-2021-38297",
              "shortDescription": {
                "text": "Scanner for CVE-2021-38297"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-29804",
              "name": "CVE-2022-29804",
              "shortDescription": {
                "text": "Scanner for CVE-2022-29804"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-30580",
              "name": "CVE-2022-30580",
              "shortDescription": {
                "text": "Scanner for CVE-2022-30580"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-30634",
              "name": "CVE-2022-30634",
              "shortDescription": {
                "text": "Scanner for CVE-2022-30634"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41716",
              "name": "CVE-2022-41716",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41716"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2019-11840",
              "name": "CVE-2019-11840",
              "shortDescription": {
                "text": "Scanner for CVE-2019-11840"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-4807",
              "name": "CVE-2023-4807",
              "shortDescription": {
                "text": "Scanner for CVE-2023-4807"
              },
              "fullDescription": {
                "text": "The vulnerability is only exploitable when running under the Windows OS.\nSince currently only Linux containers are supported, the scanner will always conclude that this vulnerability is not applicable.",
                "markdown": "The vulnerability is only exploitable when running under the Windows OS.\nSince currently only Linux containers are supported, the scanner will always conclude that this vulnerability is not applicable."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-3996",
              "name": "CVE-2022-3996",
              "shortDescription": {
                "text": "Scanner for CVE-2022-3996"
              },
              "fullDescription": {
                "text": "The vulnerability is only exploitable when running under the Windows OS.\nSince currently only Linux containers are supported, the scanner will always conclude that this vulnerability is not applicable.",
                "markdown": "The vulnerability is only exploitable when running under the Windows OS.\nSince currently only Linux containers are supported, the scanner will always conclude that this vulnerability is not applicable."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-45283",
              "name": "CVE-2023-45283",
              "shortDescription": {
                "text": "Scanner for CVE-2023-45283"
              },
              "fullDescription": {
                "text": "The vulnerability is only exploitable when running under the Windows OS.\nSince currently only Linux containers are supported, the scanner will always conclude that this vulnerability is not applicable.",
                "markdown": "The vulnerability is only exploitable when running under the Windows OS.\nSince currently only Linux containers are supported, the scanner will always conclude that this vulnerability is not applicable."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2020-29652",
              "name": "CVE-2020-29652",
              "shortDescription": {
                "text": "Scanner for CVE-2020-29652"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `ssh.NewServerConn` is called.\n\nThe below prerequisite is also crucial for applicability but is not checked in the scanner (if it is not met, the CVE is not applicable):\n\n1. The data in the `ServerConfig` argument passed to the above function has the `GSSAPIWithMICConfig` field equal `nil`.",
                "markdown": "The scanner checks whether the vulnerable function `ssh.NewServerConn` is called.\n\nThe below prerequisite is also crucial for applicability but is not checked in the scanner (if it is not met, the CVE is not applicable):\n\n1. The data in the `ServerConfig` argument passed to the above function has the `GSSAPIWithMICConfig` field equal `nil`."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2020-9283",
              "name": "CVE-2020-9283",
              "shortDescription": {
                "text": "Scanner for CVE-2020-9283"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-20329",
              "name": "CVE-2021-20329",
              "shortDescription": {
                "text": "Scanner for CVE-2021-20329"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-31525",
              "name": "CVE-2021-31525",
              "shortDescription": {
                "text": "Scanner for CVE-2021-31525"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-33194",
              "name": "CVE-2021-33194",
              "shortDescription": {
                "text": "Scanner for CVE-2021-33194"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-2880",
              "name": "CVE-2022-2880",
              "shortDescription": {
                "text": "Scanner for CVE-2022-2880"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-36221",
              "name": "CVE-2021-36221",
              "shortDescription": {
                "text": "Scanner for CVE-2021-36221"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-38561",
              "name": "CVE-2021-38561",
              "shortDescription": {
                "text": "Scanner for CVE-2021-38561"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-39293",
              "name": "CVE-2021-39293",
              "shortDescription": {
                "text": "Scanner for CVE-2021-39293"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-41771",
              "name": "CVE-2021-41771",
              "shortDescription": {
                "text": "Scanner for CVE-2021-41771"
              },
              "fullDescription": {
                "text": "The scanner checks whether the functions `macho.NewFile()`, `macho.OpenFat()` or `macho.Open()` are called with external input.",
                "markdown": "The scanner checks whether the functions `macho.NewFile()`, `macho.OpenFat()` or `macho.Open()` are called with external input."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-41772",
              "name": "CVE-2021-41772",
              "shortDescription": {
                "text": "Scanner for CVE-2021-41772"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `archive/zip.(*Reader).Open` is used.",
                "markdown": "The scanner checks whether the vulnerable function `archive/zip.(*Reader).Open` is used."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-43565",
              "name": "CVE-2021-43565",
              "shortDescription": {
                "text": "Scanner for CVE-2021-43565"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `NewServerConn` is called.",
                "markdown": "The scanner checks whether the vulnerable function `NewServerConn` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-44717",
              "name": "CVE-2021-44717",
              "shortDescription": {
                "text": "Scanner for CVE-2021-44717"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-1962",
              "name": "CVE-2022-1962",
              "shortDescription": {
                "text": "Scanner for CVE-2022-1962"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-21698",
              "name": "CVE-2022-21698",
              "shortDescription": {
                "text": "Scanner for CVE-2022-21698"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-23772",
              "name": "CVE-2022-23772",
              "shortDescription": {
                "text": "Scanner for CVE-2022-23772"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `Rat.SetString` is called.",
                "markdown": "The scanner checks whether the vulnerable function `Rat.SetString` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-23806",
              "name": "CVE-2022-23806",
              "shortDescription": {
                "text": "Scanner for CVE-2022-23806"
              },
              "fullDescription": {
                "text": "The scanner checks if at least one of the following vulnerable functions is called with external output - \n```\ncrypto/elliptic.(*CurveParams).IsOnCurve()\ncrypto/elliptic.p224Curve.IsOnCurve()\ncrypto/elliptic.p521Curve.IsOnCurve()\ncrypto/elliptic.Curve.IsOnCurve()\ncrypto/elliptic.p256Curve.IsOnCurve()\ncrypto/elliptic.(*p224Curve).IsOnCurve()\ncrypto/elliptic.(*p256Curve).IsOnCurve()\ncrypto/elliptic.(*p521Curve).IsOnCurve()\n```",
                "markdown": "The scanner checks if at least one of the following vulnerable functions is called with external output - \n```\ncrypto/elliptic.(*CurveParams).IsOnCurve()\ncrypto/elliptic.p224Curve.IsOnCurve()\ncrypto/elliptic.p521Curve.IsOnCurve()\ncrypto/elliptic.Curve.IsOnCurve()\ncrypto/elliptic.p256Curve.IsOnCurve()\ncrypto/elliptic.(*p224Curve).IsOnCurve()\ncrypto/elliptic.(*p256Curve).IsOnCurve()\ncrypto/elliptic.(*p521Curve).IsOnCurve()\n```"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-24675",
              "name": "CVE-2022-24675",
              "shortDescription": {
                "text": "Scanner for CVE-2022-24675"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `pem.Decode` is called.",
                "markdown": "The scanner checks whether the vulnerable function `pem.Decode` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-24921",
              "name": "CVE-2022-24921",
              "shortDescription": {
                "text": "Scanner for CVE-2022-24921"
              },
              "fullDescription": {
                "text": "The scanner checks whether at least one of the vulnerable functions is called : \n```\nregexp.Match\nregexp.MatchReader \nregexp.MatchString\nregexp.Compile\nregexp.CompilePOSIX \nregexp.MustCompile\nregexp.MustCompilePOSIX\n```",
                "markdown": "The scanner checks whether at least one of the vulnerable functions is called : \n```\nregexp.Match\nregexp.MatchReader \nregexp.MatchString\nregexp.Compile\nregexp.CompilePOSIX \nregexp.MustCompile\nregexp.MustCompilePOSIX\n```"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-27191",
              "name": "CVE-2022-27191",
              "shortDescription": {
                "text": "Scanner for CVE-2022-27191"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-27664",
              "name": "CVE-2022-27664",
              "shortDescription": {
                "text": "Scanner for CVE-2022-27664"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `net/http.ListenAndServeTLS` is called.",
                "markdown": "The scanner checks whether the vulnerable function `net/http.ListenAndServeTLS` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-28131",
              "name": "CVE-2022-28131",
              "shortDescription": {
                "text": "Scanner for CVE-2022-28131"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `Decoder.Skip` is called.",
                "markdown": "The scanner checks whether the vulnerable function `Decoder.Skip` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-28327",
              "name": "CVE-2022-28327",
              "shortDescription": {
                "text": "Scanner for CVE-2022-28327"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-2879",
              "name": "CVE-2022-2879",
              "shortDescription": {
                "text": "Scanner for CVE-2022-2879"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `archive/tar.(*Reader).Next` is called.",
                "markdown": "The scanner checks whether the vulnerable function `archive/tar.(*Reader).Next` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-28948",
              "name": "CVE-2022-28948",
              "shortDescription": {
                "text": "Scanner for CVE-2022-28948"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-29526",
              "name": "CVE-2022-29526",
              "shortDescription": {
                "text": "Scanner for CVE-2022-29526"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-30630",
              "name": "CVE-2022-30630",
              "shortDescription": {
                "text": "Scanner for CVE-2022-30630"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `fs.Glob` is called.",
                "markdown": "The scanner checks whether the vulnerable function `fs.Glob` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-30631",
              "name": "CVE-2022-30631",
              "shortDescription": {
                "text": "Scanner for CVE-2022-30631"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `Reader.Read` is called.",
                "markdown": "The scanner checks whether the vulnerable function `Reader.Read` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-30632",
              "name": "CVE-2022-30632",
              "shortDescription": {
                "text": "Scanner for CVE-2022-30632"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `filepath.Glob` is called.",
                "markdown": "The scanner checks whether the vulnerable function `filepath.Glob` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-30633",
              "name": "CVE-2022-30633",
              "shortDescription": {
                "text": "Scanner for CVE-2022-30633"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-31022",
              "name": "CVE-2022-31022",
              "shortDescription": {
                "text": "Scanner for CVE-2022-31022"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-32148",
              "name": "CVE-2022-32148",
              "shortDescription": {
                "text": "Scanner for CVE-2022-32148"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-32149",
              "name": "CVE-2022-32149",
              "shortDescription": {
                "text": "Scanner for CVE-2022-32149"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-32189",
              "name": "CVE-2022-32189",
              "shortDescription": {
                "text": "Scanner for CVE-2022-32189"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable functions `Float.GobDecode()` or `Rat.GobDecode()` are called.",
                "markdown": "The scanner checks whether the vulnerable functions `Float.GobDecode()` or `Rat.GobDecode()` are called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-40897",
              "name": "CVE-2022-40897",
              "shortDescription": {
                "text": "Scanner for CVE-2022-40897"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `find_external_links` is called.\n\nNote that the scanner does not check for an additional vulnerable case in which the `pip` CLI tool is executed with the  `--editable` flag. In this case, the vulnerability will lead to a DoS of a forked command-line utility, which has a minimal security impact.",
                "markdown": "The scanner checks whether the vulnerable function `find_external_links` is called.\n\nNote that the scanner does not check for an additional vulnerable case in which the `pip` CLI tool is executed with the  `--editable` flag. In this case, the vulnerability will lead to a DoS of a forked command-line utility, which has a minimal security impact."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41715",
              "name": "CVE-2022-41715",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41715"
              },
              "fullDescription": {
                "text": "The scanner checks whether any function eventually calls the vulnerable function `regexp/syntax.parse`.",
                "markdown": "The scanner checks whether any function eventually calls the vulnerable function `regexp/syntax.parse`."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41717",
              "name": "CVE-2022-41717",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41717"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41721",
              "name": "CVE-2022-41721",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41721"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `h2c.NewHandler` is used and in addition that the vulnerable wrapper `http.MaxBytesHandler` is referenced.",
                "markdown": "The scanner checks whether the vulnerable function `h2c.NewHandler` is used and in addition that the vulnerable wrapper `http.MaxBytesHandler` is referenced."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41723",
              "name": "CVE-2022-41723",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41723"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `Decoder.DecodeFull` is called",
                "markdown": "The scanner checks whether the vulnerable function `Decoder.DecodeFull` is called"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41724",
              "name": "CVE-2022-41724",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41724"
              },
              "fullDescription": {
                "text": "The CVE is never applicable. A closer inspection of the issue shows there are no potential user-controllable paths that allow creating a panic (see also original commit message - https://go.dev/cl/468125)",
                "markdown": "The CVE is never applicable. A closer inspection of the issue shows there are no potential user-controllable paths that allow creating a panic (see also original commit message - https://go.dev/cl/468125)"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-24536",
              "name": "CVE-2023-24536",
              "shortDescription": {
                "text": "Scanner for CVE-2023-24536"
              },
              "fullDescription": {
                "text": "The scanner checks whether one of the following vulnerable functions is called:\n- `mime/multipart Reader.ReadForm`\n- `net/http Request.FormFile`\n- `net/http Request.FormValue`\n- `net/http Request.ParseMultipartForm`\n- `net/http Request.PostFormValue`",
                "markdown": "The scanner checks whether one of the following vulnerable functions is called:\n- `mime/multipart Reader.ReadForm`\n- `net/http Request.FormFile`\n- `net/http Request.FormValue`\n- `net/http Request.ParseMultipartForm`\n- `net/http Request.PostFormValue`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41725",
              "name": "CVE-2022-41725",
              "shortDescription": {
                "text": "Scanner for CVE-2022-41725"
              },
              "fullDescription": {
                "text": "The scanner checks whether one of the following vulnerable functions is called:\n- `mime/multipart Reader.ReadForm`\n- `net/http Request.FormFile`\n- `net/http Request.FormValue`\n- `net/http Request.ParseMultipartForm`\n- `net/http Request.PostFormValue`",
                "markdown": "The scanner checks whether one of the following vulnerable functions is called:\n- `mime/multipart Reader.ReadForm`\n- `net/http Request.FormFile`\n- `net/http Request.FormValue`\n- `net/http Request.ParseMultipartForm`\n- `net/http Request.PostFormValue`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-4450",
              "name": "CVE-2022-4450",
              "shortDescription": {
                "text": "Scanner for CVE-2022-4450"
              },
              "fullDescription": {
                "text": "The scanner checks if at least one of the vulnerable functions is called:\n```\nPEM_read_bio_ex()\nPEM_read_bio()\nPEM_read()\nPEM_read_DHparams()\nPEM_read_PrivateKey()\nPEM_read_bio_PrivateKey()\nPEM_read_RSA_PUBKEY()\nPEM_read_bio_RSA_PUBKEY()\nPEM_read_RSAPrivateKey()\nPEM_read_bio_RSAPrivateKey()\nPEM_read_PKCS7()\nPEM_read_bio_PKCS7()\nPEM_read_X509()\nPEM_read_bio_X509()\nPEM_read_X509_AUX()\nPEM_read_bio_X509_AUX()\nPEM_read_X509_CRL()\nPEM_read_bio_X509_CRL()\nPEM_read_bio_X509_REQ()\nPEM_read_bio_ECPrivateKey()\nPEM_read_bio_PKCS8()\n\nPEM_X509_INFO_read_bio_ex()\nSSL_CTX_use_serverinfo_file()\nSSL_use_cert_and_key() \nSSL_CTX_use_certificate_chain_file()\nSSL_CTX_load_verify_locations()\nSSL_CTX_set1_verify_file()\nSSL_CTX_set1_verify_path()\nX509_LOOKUP_load_file()\n\nSSL_load_client_CA_file_ex()\nSSL_load_client_CA_file()\nSSL_add_file_cert_subjects_to_stack()\nSSL_add_dir_cert_subjects_to_stack()\nSSL_add_store_cert_subjects_to_stack()\n\nuse_certificate_chain_file\nSSL_use_certificate_file\nSSL_CTX_use_certificate_file\nSSL_use_PrivateKey_file\nSSL_CTX_use_PrivateKey_file\nSSL_CTX_use_serverinfo_file\n\nSSL_use_RSAPrivateKey_file\nSSL_CTX_use_RSAPrivateKey_file\n```\n\nNote that while the vulnerability is also exploitable through the use of the command line tool `openssl asn1parse`, the vulnerability's DoS impact in this case does not pose a threat, since the DoS will crash the forked `openssl` tool process only",
                "markdown": "The scanner checks if at least one of the vulnerable functions is called:\n```\nPEM_read_bio_ex()\nPEM_read_bio()\nPEM_read()\nPEM_read_DHparams()\nPEM_read_PrivateKey()\nPEM_read_bio_PrivateKey()\nPEM_read_RSA_PUBKEY()\nPEM_read_bio_RSA_PUBKEY()\nPEM_read_RSAPrivateKey()\nPEM_read_bio_RSAPrivateKey()\nPEM_read_PKCS7()\nPEM_read_bio_PKCS7()\nPEM_read_X509()\nPEM_read_bio_X509()\nPEM_read_X509_AUX()\nPEM_read_bio_X509_AUX()\nPEM_read_X509_CRL()\nPEM_read_bio_X509_CRL()\nPEM_read_bio_X509_REQ()\nPEM_read_bio_ECPrivateKey()\nPEM_read_bio_PKCS8()\n\nPEM_X509_INFO_read_bio_ex()\nSSL_CTX_use_serverinfo_file()\nSSL_use_cert_and_key() \nSSL_CTX_use_certificate_chain_file()\nSSL_CTX_load_verify_locations()\nSSL_CTX_set1_verify_file()\nSSL_CTX_set1_verify_path()\nX509_LOOKUP_load_file()\n\nSSL_load_client_CA_file_ex()\nSSL_load_client_CA_file()\nSSL_add_file_cert_subjects_to_stack()\nSSL_add_dir_cert_subjects_to_stack()\nSSL_add_store_cert_subjects_to_stack()\n\nuse_certificate_chain_file\nSSL_use_certificate_file\nSSL_CTX_use_certificate_file\nSSL_use_PrivateKey_file\nSSL_CTX_use_PrivateKey_file\nSSL_CTX_use_serverinfo_file\n\nSSL_use_RSAPrivateKey_file\nSSL_CTX_use_RSAPrivateKey_file\n```\n\nNote that while the vulnerability is also exploitable through the use of the command line tool `openssl asn1parse`, the vulnerability's DoS impact in this case does not pose a threat, since the DoS will crash the forked `openssl` tool process only"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0215",
              "name": "CVE-2023-0215",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0215"
              },
              "fullDescription": {
                "text": "The scanner checks if at least one of the vulnerable functions is called:\n```\nPEM_write_bio_ASN1_stream()\nPEM_write_bio_CMS_stream()\nPEM_write_bio_PKCS7_stream()\nSMIME_write_ASN1()\nSMIME_write_CMS()\nSMIME_write_PKCS7()\nBIO_new_CMS()\nBIO_new_PKCS7()\ni2d_CMS_bio_stream()\ni2d_PKCS7_bio_stream()\ni2d_ASN1_bio_stream()\nBIO_new_NDEF()\n```",
                "markdown": "The scanner checks if at least one of the vulnerable functions is called:\n```\nPEM_write_bio_ASN1_stream()\nPEM_write_bio_CMS_stream()\nPEM_write_bio_PKCS7_stream()\nSMIME_write_ASN1()\nSMIME_write_CMS()\nSMIME_write_PKCS7()\nBIO_new_CMS()\nBIO_new_PKCS7()\ni2d_CMS_bio_stream()\ni2d_PKCS7_bio_stream()\ni2d_ASN1_bio_stream()\nBIO_new_NDEF()\n```"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0217",
              "name": "CVE-2023-0217",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0217"
              },
              "fullDescription": {
                "text": "When checking ELF files, the scanner checks whether the vulnerable `EVP_PKEY_public_check()` function is called.\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked",
                "markdown": "When checking ELF files, the scanner checks whether the vulnerable `EVP_PKEY_public_check()` function is called.\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0286",
              "name": "CVE-2023-0286",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0286"
              },
              "fullDescription": {
                "text": "The scanner checks if at least one of the vulnerable API calls is called:\n\n* `X509_STORE_CTX_get_check_revocation`\n* `X509_STORE_get_check_revocation`\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The CRL checking option must also be enabled.",
                "markdown": "The scanner checks if at least one of the vulnerable API calls is called:\n\n* `X509_STORE_CTX_get_check_revocation`\n* `X509_STORE_get_check_revocation`\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The CRL checking option must also be enabled."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0401",
              "name": "CVE-2023-0401",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0401"
              },
              "fullDescription": {
                "text": "When checking ELF files, the scanner checks whether at least one of the vulnerable API calls is called:\n\n* `PKCS7_decrypt`\n* `PKCS7_dataInit`\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked",
                "markdown": "When checking ELF files, the scanner checks whether at least one of the vulnerable API calls is called:\n\n* `PKCS7_decrypt`\n* `PKCS7_dataInit`\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-24534",
              "name": "CVE-2023-24534",
              "shortDescription": {
                "text": "Scanner for CVE-2023-24534"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-24537",
              "name": "CVE-2023-24537",
              "shortDescription": {
                "text": "Scanner for CVE-2023-24537"
              },
              "fullDescription": {
                "text": "The scanner checks whether one of the following vulnerable functions is called:\n\n- `scanner.Scanner.Scan`\n- `parser.ParseDir`\n- `parser.ParseExpr`\n- `parser.ExprFrom`\n- `parser.ParseFile`\n\nNote that the scanner does not check for the invocation of command-line utilities (such as `go build`) that can indirectly trigger this vulnerability",
                "markdown": "The scanner checks whether one of the following vulnerable functions is called:\n\n- `scanner.Scanner.Scan`\n- `parser.ParseDir`\n- `parser.ParseExpr`\n- `parser.ExprFrom`\n- `parser.ParseFile`\n\nNote that the scanner does not check for the invocation of command-line utilities (such as `go build`) that can indirectly trigger this vulnerability"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-24538",
              "name": "CVE-2023-24538",
              "shortDescription": {
                "text": "Scanner for CVE-2023-24538"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `Template.Execute`\n\t\n* `Template.ExecuteTemplate`",
                "markdown": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `Template.Execute`\n\t\n* `Template.ExecuteTemplate`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-24539",
              "name": "CVE-2023-24539",
              "shortDescription": {
                "text": "Scanner for CVE-2023-24539"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-24540",
              "name": "CVE-2023-24540",
              "shortDescription": {
                "text": "Scanner for CVE-2023-24540"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-25153",
              "name": "CVE-2023-25153",
              "shortDescription": {
                "text": "Scanner for CVE-2023-25153"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-25173",
              "name": "CVE-2023-25173",
              "shortDescription": {
                "text": "Scanner for CVE-2023-25173"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-26604",
              "name": "CVE-2023-26604",
              "shortDescription": {
                "text": "Scanner for CVE-2023-26604"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable command `systemctl` is called in a `sudoers` file.",
                "markdown": "The scanner checks whether the vulnerable command `systemctl` is called in a `sudoers` file."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29400",
              "name": "CVE-2023-29400",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29400"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29402",
              "name": "CVE-2023-29402",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29402"
              },
              "fullDescription": {
                "text": "The scanner looks for Go program binaries that were built with \"cgo\" support (C language bindings)",
                "markdown": "The scanner looks for Go program binaries that were built with \"cgo\" support (C language bindings)"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29403",
              "name": "CVE-2023-29403",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29403"
              },
              "fullDescription": {
                "text": "The scanner checks whether any Go binaries exist in the image, that have the SETUID or SETGID flags enabled",
                "markdown": "The scanner checks whether any Go binaries exist in the image, that have the SETUID or SETGID flags enabled"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29406",
              "name": "CVE-2023-29406",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29406"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-40898",
              "name": "CVE-2022-40898",
              "shortDescription": {
                "text": "Scanner for CVE-2022-40898"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following functions are called:\n\n- `wheelfile.WheelFile()` with user-controlled input to its `1st` (`file`) argument\n- `cli.unpack_f()`\n- `cli.pack_f()`\n- `cli.convert_f()`\n\nNote: The scanner does not check for wheel command line execution because a ReDoS attack on a forked process is not considered a security issue.",
                "markdown": "The scanner checks whether any of the following functions are called:\n\n- `wheelfile.WheelFile()` with user-controlled input to its `1st` (`file`) argument\n- `cli.unpack_f()`\n- `cli.pack_f()`\n- `cli.convert_f()`\n\nNote: The scanner does not check for wheel command line execution because a ReDoS attack on a forked process is not considered a security issue."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29409",
              "name": "CVE-2023-29409",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29409"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-3978",
              "name": "CVE-2023-3978",
              "shortDescription": {
                "text": "Scanner for CVE-2023-3978"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-23491",
              "name": "CVE-2022-23491",
              "shortDescription": {
                "text": "Scanner for CVE-2022-23491"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `certifi.where()` is called, or if any of the following functions are called with the `verify` argument set to false:\n\n* `requests.get()` \n* `requests.options()`\n* `requests.head()`\n* `requests.post()`\n* `requests.put()`\n* `requests.patch()`\n* `requests.delete()`",
                "markdown": "The scanner checks whether the vulnerable function `certifi.where()` is called, or if any of the following functions are called with the `verify` argument set to false:\n\n* `requests.get()` \n* `requests.options()`\n* `requests.head()`\n* `requests.post()`\n* `requests.put()`\n* `requests.patch()`\n* `requests.delete()`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-37920",
              "name": "CVE-2023-37920",
              "shortDescription": {
                "text": "Scanner for CVE-2023-37920"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `certifi.where()` is called, or if any of the following functions are called with the `verify` argument set to false:\n\n* `requests.get()` \n* `requests.options()`\n* `requests.head()`\n* `requests.post()`\n* `requests.put()`\n* `requests.patch()`\n* `requests.delete()`",
                "markdown": "The scanner checks whether the vulnerable function `certifi.where()` is called, or if any of the following functions are called with the `verify` argument set to false:\n\n* `requests.get()` \n* `requests.options()`\n* `requests.head()`\n* `requests.post()`\n* `requests.put()`\n* `requests.patch()`\n* `requests.delete()`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-32681",
              "name": "CVE-2023-32681",
              "shortDescription": {
                "text": "Scanner for CVE-2023-32681"
              },
              "fullDescription": {
                "text": "The scanner checks for any of the following usages of the library `requests`.\nCalls for the vulnerable function:\n\n* `requests.Session.rebuild_proxies`\n\nOr, calls for the following vulnerable functions that have the `proxies` argument, but not the `allow_redirects` argument set to false:\n\n* `requests.request`\n* `requests.get`\n* `requests.options`\n* `requests.head`\n* `requests.post`\n* `requests.put`\n* `requests.patch`\n* `requests.delete`\n* `requests.send`\n* `requests.Session.request`\n* `requests.Session.get`\n* `requests.Session.options`\n* `requests.Session.head`\n* `requests.Session.post`\n* `requests.Session.put`\n* `requests.Session.patch`\n* `requests.Session.delete`\n* `requests.Session.send`\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: the proxy should have authorization information in its URL (e.g. `https://username:password@proxy:8080`).",
                "markdown": "The scanner checks for any of the following usages of the library `requests`.\nCalls for the vulnerable function:\n\n* `requests.Session.rebuild_proxies`\n\nOr, calls for the following vulnerable functions that have the `proxies` argument, but not the `allow_redirects` argument set to false:\n\n* `requests.request`\n* `requests.get`\n* `requests.options`\n* `requests.head`\n* `requests.post`\n* `requests.put`\n* `requests.patch`\n* `requests.delete`\n* `requests.send`\n* `requests.Session.request`\n* `requests.Session.get`\n* `requests.Session.options`\n* `requests.Session.head`\n* `requests.Session.post`\n* `requests.Session.put`\n* `requests.Session.patch`\n* `requests.Session.delete`\n* `requests.Session.send`\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: the proxy should have authorization information in its URL (e.g. `https://username:password@proxy:8080`)."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2019-11841",
              "name": "CVE-2019-11841",
              "shortDescription": {
                "text": "Scanner for CVE-2019-11841"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29404",
              "name": "CVE-2023-29404",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29404"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information).",
                "markdown": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information)."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-23773",
              "name": "CVE-2022-23773",
              "shortDescription": {
                "text": "Scanner for CVE-2022-23773"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable, since exploitation depends on the structure of the organization's Git repositories (see extended information).",
                "markdown": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable, since exploitation depends on the structure of the organization's Git repositories (see extended information)."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-39323",
              "name": "CVE-2023-39323",
              "shortDescription": {
                "text": "Scanner for CVE-2023-39323"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information).",
                "markdown": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information)."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29405",
              "name": "CVE-2023-29405",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29405"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information).",
                "markdown": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information)."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-45285",
              "name": "CVE-2023-45285",
              "shortDescription": {
                "text": "Scanner for CVE-2023-45285"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue is only exploitable via user interaction.",
                "markdown": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue is only exploitable via user interaction."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-43804",
              "name": "CVE-2023-43804",
              "shortDescription": {
                "text": "Scanner for CVE-2023-43804"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following vulnerable functions are called, with a `headers` argument and `redirect` argument is not set to `False`:\n\n* `urllib3.request()`\n* `urllib3.request_encode_url()`\n* `urllib3.request_encode_body()`\n* `urllib3.urlopen()`\n* `urllib3.PoolManager().request()`\n* `urllib3.PoolManager().request_encode_url()`\n* `urllib3.PoolManager().request_encode_body()`\n* `urllib3.PoolManager().urlopen()`",
                "markdown": "The scanner checks whether any of the following vulnerable functions are called, with a `headers` argument and `redirect` argument is not set to `False`:\n\n* `urllib3.request()`\n* `urllib3.request_encode_url()`\n* `urllib3.request_encode_body()`\n* `urllib3.urlopen()`\n* `urllib3.PoolManager().request()`\n* `urllib3.PoolManager().request_encode_url()`\n* `urllib3.PoolManager().request_encode_body()`\n* `urllib3.PoolManager().urlopen()`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0216",
              "name": "CVE-2023-0216",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0216"
              },
              "fullDescription": {
                "text": "When checking ELF files, the scanner checks if at least one of the vulnerable functions is called:\n\n* `d2i_PKCS7()`\n* `d2i_PKCS7_bio()`\n* `d2i_PKCS7_fp()`\n\nWhen checking Python files, the scanner checks if at least one of the vulnerable functions is called with external input to its 1st (`bytes`) argument:\n\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_der_pkcs7_certificates`\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_pem_pkcs7_certificates`",
                "markdown": "When checking ELF files, the scanner checks if at least one of the vulnerable functions is called:\n\n* `d2i_PKCS7()`\n* `d2i_PKCS7_bio()`\n* `d2i_PKCS7_fp()`\n\nWhen checking Python files, the scanner checks if at least one of the vulnerable functions is called with external input to its 1st (`bytes`) argument:\n\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_der_pkcs7_certificates`\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_pem_pkcs7_certificates`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-2650",
              "name": "CVE-2023-2650",
              "shortDescription": {
                "text": "Scanner for CVE-2023-2650"
              },
              "fullDescription": {
                "text": "When checking ELF files, the scanner checks whether one of the following function is called with an external input:\n\n* Direct call to `OBJ_obj2txt()` function (for OpenSSL 1.x and OpenSSL 3.x)\n\n**Only for OpenSSL 3.x:**\n\n* OCSP: `OCSP_basic_verify()`\n\n* PKCS7/SMIME:\n`PKCS7_decrypt()`\n`PKCS7_sign()`\n`PKCS7_verify()`\n\n* CMS:\n`CMS_EncryptedData_decrypt()`\n`CMS_EncryptedData_encrypt()`\n`CMS_EnvelopedData_decrypt()`\n`CMS_final()`\n`CMS_decrypt_set1_password()`\n`CMS_RecipientInfo_decrypt()`\n`CMS_decrypt()`\n`CMS_decrypt_set1_pkey()`\n`CMS_decrypt_set1_pkey_and_peer()`\n`CMS_SignedData_verify()`\n`CMS_verify()`\n`CMS_SignerInfo_verify()`\n`CMS_compress()`\n`CMS_data_create()`\n`CMS_data_create_ex()`\n`CMS_digest_create()`\n`CMS_digest_create_ex()`\n`CMS_digest_verify()`\n`CMS_encrypt()`\n`CMS_encrypt_ex()`\n`CMS_final_digest()`\n`CMS_sign()`\n`CMS_sign_ex()`\n`CMS_add1_signer()`\n`CMS_sign_receipt()`\n`CMS_uncompress()`\n`CMS_verify_receipt()`\n\n* CMP/CRMF:\n`OSSL_CMP_get_caCerts()`\n`OSSL_CRMF_ENCRYPTEDVALUE_get1_encCert()`\n`OSSL_CRMF_pbm_new()`\n\n* TS:\n`TS_REQ_print_bio()`\n`TS_OBJ_print_bio()`\n`TS_RESP_create_response()`\n`TS_RESP_print_bio()`\n`TS_RESP_verify_response()`\n`TS_RESP_verify_token()`\n\n* ASN1:\n`ASN1_parse()`\n`X509_NAME_print_ex()`\n`X509_NAME_print_ex_fp()`\n`d2i_AutoPrivateKey()`\n`d2i_PrivateKey()`\n`X509_STORE_CTX_print_verify_cb()`\n`x509_pubkey_ex_d2i_ex()`\n\n* EVP:\n`EVP_PKCS82PKEY()`\n`EVP_PKCS82PKEY_ex()`\n`PKCS5_v2_PBE_keyivgen()`\n`PKCS5_v2_PBE_keyivgen_ex()`\n\n* ESS:\n`OSSL_ESS_check_signing_certs()`\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked",
                "markdown": "When checking ELF files, the scanner checks whether one of the following function is called with an external input:\n\n* Direct call to `OBJ_obj2txt()` function (for OpenSSL 1.x and OpenSSL 3.x)\n\n**Only for OpenSSL 3.x:**\n\n* OCSP: `OCSP_basic_verify()`\n\n* PKCS7/SMIME:\n`PKCS7_decrypt()`\n`PKCS7_sign()`\n`PKCS7_verify()`\n\n* CMS:\n`CMS_EncryptedData_decrypt()`\n`CMS_EncryptedData_encrypt()`\n`CMS_EnvelopedData_decrypt()`\n`CMS_final()`\n`CMS_decrypt_set1_password()`\n`CMS_RecipientInfo_decrypt()`\n`CMS_decrypt()`\n`CMS_decrypt_set1_pkey()`\n`CMS_decrypt_set1_pkey_and_peer()`\n`CMS_SignedData_verify()`\n`CMS_verify()`\n`CMS_SignerInfo_verify()`\n`CMS_compress()`\n`CMS_data_create()`\n`CMS_data_create_ex()`\n`CMS_digest_create()`\n`CMS_digest_create_ex()`\n`CMS_digest_verify()`\n`CMS_encrypt()`\n`CMS_encrypt_ex()`\n`CMS_final_digest()`\n`CMS_sign()`\n`CMS_sign_ex()`\n`CMS_add1_signer()`\n`CMS_sign_receipt()`\n`CMS_uncompress()`\n`CMS_verify_receipt()`\n\n* CMP/CRMF:\n`OSSL_CMP_get_caCerts()`\n`OSSL_CRMF_ENCRYPTEDVALUE_get1_encCert()`\n`OSSL_CRMF_pbm_new()`\n\n* TS:\n`TS_REQ_print_bio()`\n`TS_OBJ_print_bio()`\n`TS_RESP_create_response()`\n`TS_RESP_print_bio()`\n`TS_RESP_verify_response()`\n`TS_RESP_verify_token()`\n\n* ASN1:\n`ASN1_parse()`\n`X509_NAME_print_ex()`\n`X509_NAME_print_ex_fp()`\n`d2i_AutoPrivateKey()`\n`d2i_PrivateKey()`\n`X509_STORE_CTX_print_verify_cb()`\n`x509_pubkey_ex_d2i_ex()`\n\n* EVP:\n`EVP_PKCS82PKEY()`\n`EVP_PKCS82PKEY_ex()`\n`PKCS5_v2_PBE_keyivgen()`\n`PKCS5_v2_PBE_keyivgen_ex()`\n\n* ESS:\n`OSSL_ESS_check_signing_certs()`\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-43642",
              "name": "CVE-2023-43642",
              "shortDescription": {
                "text": "Scanner for CVE-2023-43642"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable `org.xerial.snappy.SnappyInputStream` object is being initialized.",
                "markdown": "The scanner checks whether the vulnerable `org.xerial.snappy.SnappyInputStream` object is being initialized."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-34455",
              "name": "CVE-2023-34455",
              "shortDescription": {
                "text": "Scanner for CVE-2023-34455"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable `org.xerial.snappy.SnappyInputStream` object is being initialized.",
                "markdown": "The scanner checks whether the vulnerable `org.xerial.snappy.SnappyInputStream` object is being initialized."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-39325",
              "name": "CVE-2023-39325",
              "shortDescription": {
                "text": "Scanner for CVE-2023-39325"
              },
              "fullDescription": {
                "text": "The scanner should check whether one of the functions is used:\n\n* net/http\n\n    - ListenAndServe\n    - ListenAndServeTLS\n    - Serve\n    - ServeTLS\n    - Server.ListenAndServe\n    - Server.ListenAndServeTLS\n    - Server.Serve\n    - Server.ServeTLS\n    - http2serverConn.serve\n    - http2serverConn.processHeaders\n    - http2serverConn.upgradeRequest\n    - http2serverConn.runHandler\n        \n* golang.org/x/net/http2\n\n    - Server.ServeConn\n    - serverConn.serve\n    - serverConn.processHeaders\n    - serverConn.upgradeRequest\n    - serverConn.runHandler",
                "markdown": "The scanner should check whether one of the functions is used:\n\n* net/http\n\n    - ListenAndServe\n    - ListenAndServeTLS\n    - Serve\n    - ServeTLS\n    - Server.ListenAndServe\n    - Server.ListenAndServeTLS\n    - Server.Serve\n    - Server.ServeTLS\n    - http2serverConn.serve\n    - http2serverConn.processHeaders\n    - http2serverConn.upgradeRequest\n    - http2serverConn.runHandler\n        \n* golang.org/x/net/http2\n\n    - Server.ServeConn\n    - serverConn.serve\n    - serverConn.processHeaders\n    - serverConn.upgradeRequest\n    - serverConn.runHandler"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-49083",
              "name": "CVE-2023-49083",
              "shortDescription": {
                "text": "Scanner for CVE-2023-49083"
              },
              "fullDescription": {
                "text": "The scanner checks whether the following vulnerable functions are called with external input:\n\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_pem_pkcs7_certificates`\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_der_pkcs7_certificates`",
                "markdown": "The scanner checks whether the following vulnerable functions are called with external input:\n\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_pem_pkcs7_certificates`\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_der_pkcs7_certificates`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-45287",
              "name": "CVE-2023-45287",
              "shortDescription": {
                "text": "Scanner for CVE-2023-45287"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following functions are called:\n\n* `Conn.Handshake()`\n\n* `Conn.HandshakeContext()`\n\n* `Conn.Read()`\n\n* `Conn.Write()`\n\n* `Dial()`\n\n* `DialWithDialer()`\n\n* `Dialer.Dial()`\n\n* `Dialer.DialContext()`",
                "markdown": "The scanner checks whether any of the following functions are called:\n\n* `Conn.Handshake()`\n\n* `Conn.HandshakeContext()`\n\n* `Conn.Read()`\n\n* `Conn.Write()`\n\n* `Dial()`\n\n* `DialWithDialer()`\n\n* `Dialer.Dial()`\n\n* `Dialer.DialContext()`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-48795",
              "name": "CVE-2023-48795",
              "shortDescription": {
                "text": "Scanner for CVE-2023-48795"
              },
              "fullDescription": {
                "text": "The scanner looks for the OpenSSH/libssh server and client configurations in the following locations:\n\n* `/etc/ssh/sshd_config`\n* `/etc/ssh/ssh_config`\n* `~/.ssh/config`\n* `/root/.ssh/config`\n\nAnd checks if all of the following steps were taken to mitigate the vulnerability:\n\n1. Disabling/overriding the vulnerable `chacha20-poly1305` cipher, which is enabled by default.\n\n2. Turning off `AES-CBC`, unless you combine it with case 3.\n\n3. Disabling/overriding the vulnerable Message Authentication Code (MAC) algorithms, some of which are enabled by default. This is only relevant when `AES-CBC` is enabled.\n\nThe scanner currently only checks for libssh and OpenSSH attack prerequisites, even though other SSH programs may be vulnerable with different prerequisites. Therefore - the scanner either returns an Applicable result (libssh or OpenSSH are applicable) or an Undetermined result (libssh or OpenSSH are not applicable, other SSH programs may be applicable).",
                "markdown": "The scanner looks for the OpenSSH/libssh server and client configurations in the following locations:\n\n* `/etc/ssh/sshd_config`\n* `/etc/ssh/ssh_config`\n* `~/.ssh/config`\n* `/root/.ssh/config`\n\nAnd checks if all of the following steps were taken to mitigate the vulnerability:\n\n1. Disabling/overriding the vulnerable `chacha20-poly1305` cipher, which is enabled by default.\n\n2. Turning off `AES-CBC`, unless you combine it with case 3.\n\n3. Disabling/overriding the vulnerable Message Authentication Code (MAC) algorithms, some of which are enabled by default. This is only relevant when `AES-CBC` is enabled.\n\nThe scanner currently only checks for libssh and OpenSSH attack prerequisites, even though other SSH programs may be vulnerable with different prerequisites. Therefore - the scanner either returns an Applicable result (libssh or OpenSSH are applicable) or an Undetermined result (libssh or OpenSSH are not applicable, other SSH programs may be applicable)."
              },
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private"
              }
            },
            {
              "id": "applic_CVE-2023-35116",
              "name": "CVE-2023-35116",
              "shortDescription": {
                "text": "Scanner for CVE-2023-35116"
              },
              "fullDescription": {
                "text": "The scanner checks for calls to the vulnerable functions with external input:\n\n*  `ObjectMapper.writeValue()`\n*  `ObjectMapper.writeValueAsString()`\n*  `ObjectMapper.writeValueAsBytes()`\n*  `ObjectWriter.writeValue()`\n*  `ObjectWriter.writeValueAsString()`\n*  `ObjectWriter.writeValueAsBytes()`\n* `ser.DefaultSerializerProvider.serializeValue()`\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The input argument to those functions is a cyclic object (e.g. a `HashMap` object with a reference to itself).",
                "markdown": "The scanner checks for calls to the vulnerable functions with external input:\n\n*  `ObjectMapper.writeValue()`\n*  `ObjectMapper.writeValueAsString()`\n*  `ObjectMapper.writeValueAsBytes()`\n*  `ObjectWriter.writeValue()`\n*  `ObjectWriter.writeValueAsString()`\n*  `ObjectWriter.writeValueAsBytes()`\n* `ser.DefaultSerializerProvider.serializeValue()`\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The input argument to those functions is a cyclic object (e.g. a `HashMap` object with a reference to itself)."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-34062",
              "name": "CVE-2023-34062",
              "shortDescription": {
                "text": "Scanner for CVE-2023-34062"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `reactor.netty.http.server.HttpServerRoutes.directory` is called.",
                "markdown": "The scanner checks whether the vulnerable function `reactor.netty.http.server.HttpServerRoutes.directory` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2020-8908",
              "name": "CVE-2020-8908",
              "shortDescription": {
                "text": "Scanner for CVE-2020-8908"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `com.google.common.io.Files.createTempDir()` is called.",
                "markdown": "The scanner checks whether the vulnerable function `com.google.common.io.Files.createTempDir()` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-2976",
              "name": "CVE-2023-2976",
              "shortDescription": {
                "text": "Scanner for CVE-2023-2976"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `com.google.common.io.Files.createTempDir()` is called.",
                "markdown": "The scanner checks whether the vulnerable function `com.google.common.io.Files.createTempDir()` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-40152",
              "name": "CVE-2022-40152",
              "shortDescription": {
                "text": "Scanner for CVE-2022-40152"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `fromXML` is called with external input to its 1st (`input`) argument.",
                "markdown": "The scanner checks whether the vulnerable function `fromXML` is called with external input to its 1st (`input`) argument."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-34453",
              "name": "CVE-2023-34453",
              "shortDescription": {
                "text": "Scanner for CVE-2023-34453"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `BitShuffle.shuffle` is called with external input to its 1st (`input`) argument.",
                "markdown": "The scanner checks whether the vulnerable function `BitShuffle.shuffle` is called with external input to its 1st (`input`) argument."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-34454",
              "name": "CVE-2023-34454",
              "shortDescription": {
                "text": "Scanner for CVE-2023-34454"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `Snappy.compress()` is called with external input to its 1st (`input`) argument.",
                "markdown": "The scanner checks whether the vulnerable function `Snappy.compress()` is called with external input to its 1st (`input`) argument."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-34054",
              "name": "CVE-2023-34054",
              "shortDescription": {
                "text": "Scanner for CVE-2023-34054"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `metrics()` function is called with the `enable` argument to `true` for the following classes:\n\n* ClientTransport\n\n* ServerTransport\n\n* QuicClient\n\n* QuicServer\n\n* UdpClient\n\n* UdpServer\n\n* HttpClient\n\n* HttpServer\n\n* TcpClient\n\n* TcpServer",
                "markdown": "The scanner checks whether the `metrics()` function is called with the `enable` argument to `true` for the following classes:\n\n* ClientTransport\n\n* ServerTransport\n\n* QuicClient\n\n* QuicServer\n\n* UdpClient\n\n* UdpServer\n\n* HttpClient\n\n* HttpServer\n\n* TcpClient\n\n* TcpServer"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2024-26308",
              "name": "CVE-2024-26308",
              "shortDescription": {
                "text": "Scanner for CVE-2024-26308"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable class `Pack200CompressorInputStream` is instantiated.",
                "markdown": "The scanner checks whether the vulnerable class `Pack200CompressorInputStream` is instantiated."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-50782",
              "name": "CVE-2023-50782",
              "shortDescription": {
                "text": "Scanner for CVE-2023-50782"
              },
              "fullDescription": {
                "text": "The scanner checks whether the PKCS1v15 vulnerable padding is used in a decryption function.",
                "markdown": "The scanner checks whether the PKCS1v15 vulnerable padding is used in a decryption function."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-45288",
              "name": "CVE-2023-45288",
              "shortDescription": {
                "text": "Scanner for CVE-2023-45288"
              },
              "fullDescription": {
                "text": "The scanner checks if any of the following functions are called:\n\n* `net/http/ServeTLS`\n* `x/net/http2/Server/ServeConn`\n* `x/net/http2/ConfigureServer`\n\nAn additional condition (that the scanner currently does not check) should be verified to determine if the CVE is applicable: `crypto/tls/Config/NextProtos` or `net/http/TLSNextProto` are not used to disable `HTTP/2`.",
                "markdown": "The scanner checks if any of the following functions are called:\n\n* `net/http/ServeTLS`\n* `x/net/http2/Server/ServeConn`\n* `x/net/http2/ConfigureServer`\n\nAn additional condition (that the scanner currently does not check) should be verified to determine if the CVE is applicable: `crypto/tls/Config/NextProtos` or `net/http/TLSNextProto` are not used to disable `HTTP/2`."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2024-4741",
              "name": "CVE-2024-4741",
              "shortDescription": {
                "text": "Scanner for CVE-2024-4741"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `SSL_free_buffers` is called.",
                "markdown": "The scanner checks whether the vulnerable function `SSL_free_buffers` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-44487",
              "name": "CVE-2023-44487",
              "shortDescription": {
                "text": "Scanner for CVE-2023-44487"
              },
              "fullDescription": {
                "text": "The scanner checks for each vendor listed here:\n\n* Tomcat: configuration enables HTTP/2 either through the XML file or Java's `addUpgradeProtocol()` method.\n* Jetty: HTTP/2 enabled through `HTTP2CServerConnectionFactory`/`HTTP2ServerConnectionFactory` class initialization. Note: it also checks whether `jenkins` enables http/2 through its configuration.\n* Nginx: check whether one of the HTTP configurations is enabling http/2.\nNote: the following parameters should be configured properly to make the vulnerability not applicable:\n`keepalive_requests` should be kept at the default setting of 1000 requests\n`http2_max_concurrent_streams` should be kept at the default setting of 128 streams\n`limit_conn and limit_req` should be set `with a reasonable setting balancing application performance and security`. \n* Netty: check whether the `http2` codec classes are used in a java class\n* NodeJS: check whether the `http2.createSecureServer()` is used\n* NGHttp2: check whether a web server is instantiated through one of the symbols `nghttp2_session_server_new` or `listen_and_serve`.\n* Go: check whether a server is instantiated through the `net/http` or `net/http2` packages",
                "markdown": "The scanner checks for each vendor listed here:\n\n* Tomcat: configuration enables HTTP/2 either through the XML file or Java's `addUpgradeProtocol()` method.\n* Jetty: HTTP/2 enabled through `HTTP2CServerConnectionFactory`/`HTTP2ServerConnectionFactory` class initialization. Note: it also checks whether `jenkins` enables http/2 through its configuration.\n* Nginx: check whether one of the HTTP configurations is enabling http/2.\nNote: the following parameters should be configured properly to make the vulnerability not applicable:\n`keepalive_requests` should be kept at the default setting of 1000 requests\n`http2_max_concurrent_streams` should be kept at the default setting of 128 streams\n`limit_conn and limit_req` should be set `with a reasonable setting balancing application performance and security`. \n* Netty: check whether the `http2` codec classes are used in a java class\n* NodeJS: check whether the `http2.createSecureServer()` is used\n* NGHttp2: check whether a web server is instantiated through one of the symbols `nghttp2_session_server_new` or `listen_and_serve`.\n* Go: check whether a server is instantiated through the `net/http` or `net/http2` packages"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-30635",
              "name": "CVE-2022-30635",
              "shortDescription": {
                "text": "Scanner for CVE-2022-30635"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function Decoder.Decode of encoding/gob is called.",
                "markdown": "The scanner checks whether the vulnerable function Decoder.Decode of encoding/gob is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2017-11164",
              "name": "CVE-2017-11164",
              "shortDescription": {
                "text": "Scanner for CVE-2017-11164"
              },
              "fullDescription": {
                "text": "The scanner checks whether a binary uses the `PCRE1` vulnerable functions: `pcre_compile()` or `pcre_exec()`.",
                "markdown": "The scanner checks whether a binary uses the `PCRE1` vulnerable functions: `pcre_compile()` or `pcre_exec()`."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-41881",
              "name": "CVE-2022-41881",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-41881"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-24532",
              "name": "CVE-2023-24532",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-24532"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-37891",
              "name": "CVE-2024-37891",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-37891"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2013-4235",
              "name": "CVE-2013-4235",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2013-4235"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-28851",
              "name": "CVE-2020-28851",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-28851"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-23648",
              "name": "CVE-2022-23648",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-23648"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-41103",
              "name": "CVE-2021-41103",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-41103"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-27534",
              "name": "CVE-2020-27534",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-27534"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-3219",
              "name": "CVE-2022-3219",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-3219"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-50495",
              "name": "CVE-2023-50495",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-50495"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-30187",
              "name": "CVE-2022-30187",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-30187"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-23931",
              "name": "CVE-2023-23931",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-23931"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-30629",
              "name": "CVE-2022-30629",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-30629"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-29018",
              "name": "CVE-2024-29018",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-29018"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-25710",
              "name": "CVE-2024-25710",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-25710"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-34062",
              "name": "CVE-2024-34062",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-34062"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2018-15664",
              "name": "CVE-2018-15664",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2018-15664"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-45284",
              "name": "CVE-2023-45284",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-45284"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-31684",
              "name": "CVE-2022-31684",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-31684"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-21334",
              "name": "CVE-2021-21334",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-21334"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-24786",
              "name": "CVE-2024-24786",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-24786"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-41089",
              "name": "CVE-2021-41089",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-41089"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-8565",
              "name": "CVE-2020-8565",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-8565"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2018-20225",
              "name": "CVE-2018-20225",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2018-20225"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-40577",
              "name": "CVE-2023-40577",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-40577"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-45803",
              "name": "CVE-2023-45803",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-45803"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-28840",
              "name": "CVE-2023-28840",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-28840"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-29857",
              "name": "CVE-2024-29857",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-29857"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-29383",
              "name": "CVE-2023-29383",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-29383"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-7008",
              "name": "CVE-2023-7008",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-7008"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-2253",
              "name": "CVE-2023-2253",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-2253"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-22916",
              "name": "CVE-2020-22916",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-22916"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2016-2781",
              "name": "CVE-2016-2781",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2016-2781"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-34462",
              "name": "CVE-2023-34462",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-34462"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-5752",
              "name": "CVE-2023-5752",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-5752"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-31879",
              "name": "CVE-2021-31879",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-31879"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-33201",
              "name": "CVE-2023-33201",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-33201"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-1705",
              "name": "CVE-2022-1705",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-1705"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-4304",
              "name": "CVE-2022-4304",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-4304"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-15257",
              "name": "CVE-2020-15257",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-15257"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-34558",
              "name": "CVE-2021-34558",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-34558"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-35195",
              "name": "CVE-2024-35195",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-35195"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-23471",
              "name": "CVE-2022-23471",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-23471"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-4203",
              "name": "CVE-2022-4203",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-4203"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `SSL_CTX_set_verify()` or `SSL_set_verify()` functions are called.\nA call with the `SSL_VERIFY_PEER` mode is enabling client authentication and makes this vulnerability possible.",
                "markdown": "The scanner checks whether the `SSL_CTX_set_verify()` or `SSL_set_verify()` functions are called.\nA call with the `SSL_VERIFY_PEER` mode is enabling client authentication and makes this vulnerability possible."
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-24557",
              "name": "CVE-2024-24557",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-24557"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-41915",
              "name": "CVE-2022-41915",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-41915"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-45918",
              "name": "CVE-2023-45918",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-45918"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-39318",
              "name": "CVE-2023-39318",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-39318"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2019-13509",
              "name": "CVE-2019-13509",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2019-13509"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-31030",
              "name": "CVE-2022-31030",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-31030"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-32760",
              "name": "CVE-2021-32760",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-32760"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-39326",
              "name": "CVE-2023-39326",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-39326"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-7919",
              "name": "CVE-2020-7919",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-7919"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-30171",
              "name": "CVE-2024-30171",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-30171"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-41190",
              "name": "CVE-2021-41190",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-41190"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-41091",
              "name": "CVE-2021-41091",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-41091"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-3446",
              "name": "CVE-2023-3446",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-3446"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2020-28852",
              "name": "CVE-2020-28852",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2020-28852"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-38428",
              "name": "CVE-2024-38428",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-38428"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2016-20013",
              "name": "CVE-2016-20013",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2016-20013"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-24769",
              "name": "CVE-2022-24769",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-24769"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-30172",
              "name": "CVE-2024-30172",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-30172"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-36124",
              "name": "CVE-2024-36124",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-36124"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-29025",
              "name": "CVE-2024-29025",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-29025"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-28841",
              "name": "CVE-2023-28841",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-28841"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2018-20699",
              "name": "CVE-2018-20699",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2018-20699"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-28842",
              "name": "CVE-2023-28842",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-28842"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-2511",
              "name": "CVE-2024-2511",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-2511"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2018-10892",
              "name": "CVE-2018-10892",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2018-10892"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-0727",
              "name": "CVE-2024-0727",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-0727"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-2236",
              "name": "CVE-2024-2236",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-2236"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-39319",
              "name": "CVE-2023-39319",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-39319"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            }
          ],
          "version": "1.0"
        }
      },
      "invocations": [
        {
          "arguments": [
            "/root/.jfrog/dependencies/analyzerManager/jas_scanner/jas_scanner",
            "scan",
            "/tmp/jfrog.cli.temp.-1718842815-569803999/config.yaml"
          ],
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "/tmp/jfrog.cli.temp.-1718842654-3334427047/image.tar"
          }
        }
      ],
      "results": [
        {
          "ruleId": "applic_CVE-2022-41720",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether one of the vulnerable functions `os.dirFS.Open` or  `net/http.Dir.Open` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2022-41722",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2021-38297",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-29804",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-30580",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-30634",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-41716",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2019-11840",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2023-4807",
          "kind": "pass",
          "message": {
            "text": "The vulnerability is only exploitable when running under the Windows OS.\nSince currently only Linux containers are supported, the scanner will always conclude that this vulnerability is not applicable."
          }
        },
        {
          "ruleId": "applic_CVE-2022-3996",
          "kind": "pass",
          "message": {
            "text": "The vulnerability is only exploitable when running under the Windows OS.\nSince currently only Linux containers are supported, the scanner will always conclude that this vulnerability is not applicable."
          }
        },
        {
          "ruleId": "applic_CVE-2023-45283",
          "kind": "pass",
          "message": {
            "text": "The vulnerability is only exploitable when running under the Windows OS.\nSince currently only Linux containers are supported, the scanner will always conclude that this vulnerability is not applicable."
          }
        },
        {
          "ruleId": "applic_CVE-2020-29652",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `ssh.NewServerConn` is called.\n\nThe below prerequisite is also crucial for applicability but is not checked in the scanner (if it is not met, the CVE is not applicable):\n\n1. The data in the `ServerConfig` argument passed to the above function has the `GSSAPIWithMICConfig` field equal `nil`."
          }
        },
        {
          "ruleId": "applic_CVE-2020-9283",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2021-20329",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2021-31525",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2021-33194",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-2880",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2021-36221",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2021-38561",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2021-39293",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2021-41771",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the functions `macho.NewFile()`, `macho.OpenFat()` or `macho.Open()` are called with external input."
          }
        },
        {
          "ruleId": "applic_CVE-2021-41772",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `archive/zip.(*Reader).Open` is used."
          }
        },
        {
          "ruleId": "applic_CVE-2021-43565",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `NewServerConn` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2021-44717",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-1962",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-21698",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-23772",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `Rat.SetString` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2022-23806",
          "kind": "pass",
          "message": {
            "text": "The scanner checks if at least one of the following vulnerable functions is called with external output - \n```\ncrypto/elliptic.(*CurveParams).IsOnCurve()\ncrypto/elliptic.p224Curve.IsOnCurve()\ncrypto/elliptic.p521Curve.IsOnCurve()\ncrypto/elliptic.Curve.IsOnCurve()\ncrypto/elliptic.p256Curve.IsOnCurve()\ncrypto/elliptic.(*p224Curve).IsOnCurve()\ncrypto/elliptic.(*p256Curve).IsOnCurve()\ncrypto/elliptic.(*p521Curve).IsOnCurve()\n```"
          }
        },
        {
          "ruleId": "applic_CVE-2022-24675",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `pem.Decode` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2022-24921",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether at least one of the vulnerable functions is called : \n```\nregexp.Match\nregexp.MatchReader \nregexp.MatchString\nregexp.Compile\nregexp.CompilePOSIX \nregexp.MustCompile\nregexp.MustCompilePOSIX\n```"
          }
        },
        {
          "ruleId": "applic_CVE-2022-27191",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-27664",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `net/http.ListenAndServeTLS` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2022-28131",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `Decoder.Skip` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2022-28327",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-2879",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `archive/tar.(*Reader).Next` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2022-28948",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-29526",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-30630",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `fs.Glob` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2022-30631",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `Reader.Read` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2022-30632",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `filepath.Glob` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2022-30633",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-31022",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-32148",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-32149",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-32189",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable functions `Float.GobDecode()` or `Rat.GobDecode()` are called."
          }
        },
        {
          "ruleId": "applic_CVE-2022-40897",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `find_external_links` is called.\n\nNote that the scanner does not check for an additional vulnerable case in which the `pip` CLI tool is executed with the  `--editable` flag. In this case, the vulnerability will lead to a DoS of a forked command-line utility, which has a minimal security impact."
          }
        },
        {
          "ruleId": "applic_CVE-2022-41715",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any function eventually calls the vulnerable function `regexp/syntax.parse`."
          }
        },
        {
          "ruleId": "applic_CVE-2022-41717",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-41721",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `h2c.NewHandler` is used and in addition that the vulnerable wrapper `http.MaxBytesHandler` is referenced."
          }
        },
        {
          "ruleId": "applic_CVE-2022-41723",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `Decoder.DecodeFull` is called"
          }
        },
        {
          "ruleId": "applic_CVE-2022-41724",
          "kind": "pass",
          "message": {
            "text": "The CVE is never applicable. A closer inspection of the issue shows there are no potential user-controllable paths that allow creating a panic (see also original commit message - https://go.dev/cl/468125)"
          }
        },
        {
          "ruleId": "applic_CVE-2023-24536",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether one of the following vulnerable functions is called:\n- `mime/multipart Reader.ReadForm`\n- `net/http Request.FormFile`\n- `net/http Request.FormValue`\n- `net/http Request.ParseMultipartForm`\n- `net/http Request.PostFormValue`"
          }
        },
        {
          "ruleId": "applic_CVE-2022-41725",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether one of the following vulnerable functions is called:\n- `mime/multipart Reader.ReadForm`\n- `net/http Request.FormFile`\n- `net/http Request.FormValue`\n- `net/http Request.ParseMultipartForm`\n- `net/http Request.PostFormValue`"
          }
        },
        {
          "ruleId": "applic_CVE-2022-4450",
          "kind": "pass",
          "message": {
            "text": "The scanner checks if at least one of the vulnerable functions is called:\n```\nPEM_read_bio_ex()\nPEM_read_bio()\nPEM_read()\nPEM_read_DHparams()\nPEM_read_PrivateKey()\nPEM_read_bio_PrivateKey()\nPEM_read_RSA_PUBKEY()\nPEM_read_bio_RSA_PUBKEY()\nPEM_read_RSAPrivateKey()\nPEM_read_bio_RSAPrivateKey()\nPEM_read_PKCS7()\nPEM_read_bio_PKCS7()\nPEM_read_X509()\nPEM_read_bio_X509()\nPEM_read_X509_AUX()\nPEM_read_bio_X509_AUX()\nPEM_read_X509_CRL()\nPEM_read_bio_X509_CRL()\nPEM_read_bio_X509_REQ()\nPEM_read_bio_ECPrivateKey()\nPEM_read_bio_PKCS8()\n\nPEM_X509_INFO_read_bio_ex()\nSSL_CTX_use_serverinfo_file()\nSSL_use_cert_and_key() \nSSL_CTX_use_certificate_chain_file()\nSSL_CTX_load_verify_locations()\nSSL_CTX_set1_verify_file()\nSSL_CTX_set1_verify_path()\nX509_LOOKUP_load_file()\n\nSSL_load_client_CA_file_ex()\nSSL_load_client_CA_file()\nSSL_add_file_cert_subjects_to_stack()\nSSL_add_dir_cert_subjects_to_stack()\nSSL_add_store_cert_subjects_to_stack()\n\nuse_certificate_chain_file\nSSL_use_certificate_file\nSSL_CTX_use_certificate_file\nSSL_use_PrivateKey_file\nSSL_CTX_use_PrivateKey_file\nSSL_CTX_use_serverinfo_file\n\nSSL_use_RSAPrivateKey_file\nSSL_CTX_use_RSAPrivateKey_file\n```\n\nNote that while the vulnerability is also exploitable through the use of the command line tool `openssl asn1parse`, the vulnerability's DoS impact in this case does not pose a threat, since the DoS will crash the forked `openssl` tool process only"
          }
        },
        {
          "ruleId": "applic_CVE-2023-0215",
          "kind": "pass",
          "message": {
            "text": "The scanner checks if at least one of the vulnerable functions is called:\n```\nPEM_write_bio_ASN1_stream()\nPEM_write_bio_CMS_stream()\nPEM_write_bio_PKCS7_stream()\nSMIME_write_ASN1()\nSMIME_write_CMS()\nSMIME_write_PKCS7()\nBIO_new_CMS()\nBIO_new_PKCS7()\ni2d_CMS_bio_stream()\ni2d_PKCS7_bio_stream()\ni2d_ASN1_bio_stream()\nBIO_new_NDEF()\n```"
          }
        },
        {
          "ruleId": "applic_CVE-2023-0217",
          "kind": "pass",
          "message": {
            "text": "When checking ELF files, the scanner checks whether the vulnerable `EVP_PKEY_public_check()` function is called.\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked"
          }
        },
        {
          "ruleId": "applic_CVE-2023-0286",
          "kind": "pass",
          "message": {
            "text": "The scanner checks if at least one of the vulnerable API calls is called:\n\n* `X509_STORE_CTX_get_check_revocation`\n* `X509_STORE_get_check_revocation`\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The CRL checking option must also be enabled."
          }
        },
        {
          "ruleId": "applic_CVE-2023-0401",
          "kind": "pass",
          "message": {
            "text": "When checking ELF files, the scanner checks whether at least one of the vulnerable API calls is called:\n\n* `PKCS7_decrypt`\n* `PKCS7_dataInit`\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked"
          }
        },
        {
          "ruleId": "applic_CVE-2023-24534",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2023-24537",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether one of the following vulnerable functions is called:\n\n- `scanner.Scanner.Scan`\n- `parser.ParseDir`\n- `parser.ParseExpr`\n- `parser.ExprFrom`\n- `parser.ParseFile`\n\nNote that the scanner does not check for the invocation of command-line utilities (such as `go build`) that can indirectly trigger this vulnerability"
          }
        },
        {
          "ruleId": "applic_CVE-2023-24538",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following vulnerable functions are called:\n\n* `Template.Execute`\n\t\n* `Template.ExecuteTemplate`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-24539",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2023-24540",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2023-25153",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2023-25173",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2023-26604",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable command `systemctl` is called in a `sudoers` file."
          }
        },
        {
          "ruleId": "applic_CVE-2023-29400",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2023-29402",
          "kind": "pass",
          "message": {
            "text": "The scanner looks for Go program binaries that were built with \"cgo\" support (C language bindings)"
          }
        },
        {
          "ruleId": "applic_CVE-2023-29403",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any Go binaries exist in the image, that have the SETUID or SETGID flags enabled"
          }
        },
        {
          "ruleId": "applic_CVE-2023-29406",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-40898",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following functions are called:\n\n- `wheelfile.WheelFile()` with user-controlled input to its `1st` (`file`) argument\n- `cli.unpack_f()`\n- `cli.pack_f()`\n- `cli.convert_f()`\n\nNote: The scanner does not check for wheel command line execution because a ReDoS attack on a forked process is not considered a security issue."
          }
        },
        {
          "ruleId": "applic_CVE-2023-29409",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2023-3978",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-23491",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `certifi.where()` is called, or if any of the following functions are called with the `verify` argument set to false:\n\n* `requests.get()` \n* `requests.options()`\n* `requests.head()`\n* `requests.post()`\n* `requests.put()`\n* `requests.patch()`\n* `requests.delete()`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-37920",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `certifi.where()` is called, or if any of the following functions are called with the `verify` argument set to false:\n\n* `requests.get()` \n* `requests.options()`\n* `requests.head()`\n* `requests.post()`\n* `requests.put()`\n* `requests.patch()`\n* `requests.delete()`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-32681",
          "kind": "pass",
          "message": {
            "text": "The scanner checks for any of the following usages of the library `requests`.\nCalls for the vulnerable function:\n\n* `requests.Session.rebuild_proxies`\n\nOr, calls for the following vulnerable functions that have the `proxies` argument, but not the `allow_redirects` argument set to false:\n\n* `requests.request`\n* `requests.get`\n* `requests.options`\n* `requests.head`\n* `requests.post`\n* `requests.put`\n* `requests.patch`\n* `requests.delete`\n* `requests.send`\n* `requests.Session.request`\n* `requests.Session.get`\n* `requests.Session.options`\n* `requests.Session.head`\n* `requests.Session.post`\n* `requests.Session.put`\n* `requests.Session.patch`\n* `requests.Session.delete`\n* `requests.Session.send`\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: the proxy should have authorization information in its URL (e.g. `https://username:password@proxy:8080`)."
          }
        },
        {
          "ruleId": "applic_CVE-2019-11841",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2023-29404",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information)."
          }
        },
        {
          "ruleId": "applic_CVE-2022-23773",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable, since exploitation depends on the structure of the organization's Git repositories (see extended information)."
          }
        },
        {
          "ruleId": "applic_CVE-2023-39323",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information)."
          }
        },
        {
          "ruleId": "applic_CVE-2023-29405",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue may still not be exploitable (see extended information)."
          }
        },
        {
          "ruleId": "applic_CVE-2023-45285",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `cmd/go` tool is present in the system (the `go` executable).\nNote that even if the `go` executable is present, the issue is only exploitable via user interaction."
          }
        },
        {
          "ruleId": "applic_CVE-2023-43804",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following vulnerable functions are called, with a `headers` argument and `redirect` argument is not set to `False`:\n\n* `urllib3.request()`\n* `urllib3.request_encode_url()`\n* `urllib3.request_encode_body()`\n* `urllib3.urlopen()`\n* `urllib3.PoolManager().request()`\n* `urllib3.PoolManager().request_encode_url()`\n* `urllib3.PoolManager().request_encode_body()`\n* `urllib3.PoolManager().urlopen()`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-0216",
          "kind": "pass",
          "message": {
            "text": "When checking ELF files, the scanner checks if at least one of the vulnerable functions is called:\n\n* `d2i_PKCS7()`\n* `d2i_PKCS7_bio()`\n* `d2i_PKCS7_fp()`\n\nWhen checking Python files, the scanner checks if at least one of the vulnerable functions is called with external input to its 1st (`bytes`) argument:\n\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_der_pkcs7_certificates`\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_pem_pkcs7_certificates`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-2650",
          "kind": "pass",
          "message": {
            "text": "When checking ELF files, the scanner checks whether one of the following function is called with an external input:\n\n* Direct call to `OBJ_obj2txt()` function (for OpenSSL 1.x and OpenSSL 3.x)\n\n**Only for OpenSSL 3.x:**\n\n* OCSP: `OCSP_basic_verify()`\n\n* PKCS7/SMIME:\n`PKCS7_decrypt()`\n`PKCS7_sign()`\n`PKCS7_verify()`\n\n* CMS:\n`CMS_EncryptedData_decrypt()`\n`CMS_EncryptedData_encrypt()`\n`CMS_EnvelopedData_decrypt()`\n`CMS_final()`\n`CMS_decrypt_set1_password()`\n`CMS_RecipientInfo_decrypt()`\n`CMS_decrypt()`\n`CMS_decrypt_set1_pkey()`\n`CMS_decrypt_set1_pkey_and_peer()`\n`CMS_SignedData_verify()`\n`CMS_verify()`\n`CMS_SignerInfo_verify()`\n`CMS_compress()`\n`CMS_data_create()`\n`CMS_data_create_ex()`\n`CMS_digest_create()`\n`CMS_digest_create_ex()`\n`CMS_digest_verify()`\n`CMS_encrypt()`\n`CMS_encrypt_ex()`\n`CMS_final_digest()`\n`CMS_sign()`\n`CMS_sign_ex()`\n`CMS_add1_signer()`\n`CMS_sign_receipt()`\n`CMS_uncompress()`\n`CMS_verify_receipt()`\n\n* CMP/CRMF:\n`OSSL_CMP_get_caCerts()`\n`OSSL_CRMF_ENCRYPTEDVALUE_get1_encCert()`\n`OSSL_CRMF_pbm_new()`\n\n* TS:\n`TS_REQ_print_bio()`\n`TS_OBJ_print_bio()`\n`TS_RESP_create_response()`\n`TS_RESP_print_bio()`\n`TS_RESP_verify_response()`\n`TS_RESP_verify_token()`\n\n* ASN1:\n`ASN1_parse()`\n`X509_NAME_print_ex()`\n`X509_NAME_print_ex_fp()`\n`d2i_AutoPrivateKey()`\n`d2i_PrivateKey()`\n`X509_STORE_CTX_print_verify_cb()`\n`x509_pubkey_ex_d2i_ex()`\n\n* EVP:\n`EVP_PKCS82PKEY()`\n`EVP_PKCS82PKEY_ex()`\n`PKCS5_v2_PBE_keyivgen()`\n`PKCS5_v2_PBE_keyivgen_ex()`\n\n* ESS:\n`OSSL_ESS_check_signing_certs()`\n\nNote that the CVE is never applicable in Python, since the vulnerable functions cannot be externally invoked"
          }
        },
        {
          "ruleId": "applic_CVE-2023-43642",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable `org.xerial.snappy.SnappyInputStream` object is being initialized."
          }
        },
        {
          "ruleId": "applic_CVE-2023-34455",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable `org.xerial.snappy.SnappyInputStream` object is being initialized."
          }
        },
        {
          "ruleId": "applic_CVE-2023-39325",
          "kind": "pass",
          "message": {
            "text": "The scanner should check whether one of the functions is used:\n\n* net/http\n\n    - ListenAndServe\n    - ListenAndServeTLS\n    - Serve\n    - ServeTLS\n    - Server.ListenAndServe\n    - Server.ListenAndServeTLS\n    - Server.Serve\n    - Server.ServeTLS\n    - http2serverConn.serve\n    - http2serverConn.processHeaders\n    - http2serverConn.upgradeRequest\n    - http2serverConn.runHandler\n        \n* golang.org/x/net/http2\n\n    - Server.ServeConn\n    - serverConn.serve\n    - serverConn.processHeaders\n    - serverConn.upgradeRequest\n    - serverConn.runHandler"
          }
        },
        {
          "ruleId": "applic_CVE-2023-49083",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the following vulnerable functions are called with external input:\n\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_pem_pkcs7_certificates`\n* `cryptography.hazmat.primitives.serialization.pkcs7.load_der_pkcs7_certificates`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-45287",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following functions are called:\n\n* `Conn.Handshake()`\n\n* `Conn.HandshakeContext()`\n\n* `Conn.Read()`\n\n* `Conn.Write()`\n\n* `Dial()`\n\n* `DialWithDialer()`\n\n* `Dialer.Dial()`\n\n* `Dialer.DialContext()`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-35116",
          "kind": "pass",
          "message": {
            "text": "The scanner checks for calls to the vulnerable functions with external input:\n\n*  `ObjectMapper.writeValue()`\n*  `ObjectMapper.writeValueAsString()`\n*  `ObjectMapper.writeValueAsBytes()`\n*  `ObjectWriter.writeValue()`\n*  `ObjectWriter.writeValueAsString()`\n*  `ObjectWriter.writeValueAsBytes()`\n* `ser.DefaultSerializerProvider.serializeValue()`\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The input argument to those functions is a cyclic object (e.g. a `HashMap` object with a reference to itself)."
          }
        },
        {
          "ruleId": "applic_CVE-2023-34062",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `reactor.netty.http.server.HttpServerRoutes.directory` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2020-8908",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `com.google.common.io.Files.createTempDir()` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2023-2976",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `com.google.common.io.Files.createTempDir()` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2022-40152",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `fromXML` is called with external input to its 1st (`input`) argument."
          }
        },
        {
          "ruleId": "applic_CVE-2023-34453",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `BitShuffle.shuffle` is called with external input to its 1st (`input`) argument."
          }
        },
        {
          "ruleId": "applic_CVE-2023-34454",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `Snappy.compress()` is called with external input to its 1st (`input`) argument."
          }
        },
        {
          "ruleId": "applic_CVE-2023-34054",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `metrics()` function is called with the `enable` argument to `true` for the following classes:\n\n* ClientTransport\n\n* ServerTransport\n\n* QuicClient\n\n* QuicServer\n\n* UdpClient\n\n* UdpServer\n\n* HttpClient\n\n* HttpServer\n\n* TcpClient\n\n* TcpServer"
          }
        },
        {
          "ruleId": "applic_CVE-2024-26308",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable class `Pack200CompressorInputStream` is instantiated."
          }
        },
        {
          "ruleId": "applic_CVE-2023-50782",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the PKCS1v15 vulnerable padding is used in a decryption function."
          }
        },
        {
          "ruleId": "applic_CVE-2023-45288",
          "kind": "pass",
          "message": {
            "text": "The scanner checks if any of the following functions are called:\n\n* `net/http/ServeTLS`\n* `x/net/http2/Server/ServeConn`\n* `x/net/http2/ConfigureServer`\n\nAn additional condition (that the scanner currently does not check) should be verified to determine if the CVE is applicable: `crypto/tls/Config/NextProtos` or `net/http/TLSNextProto` are not used to disable `HTTP/2`."
          }
        },
        {
          "ruleId": "applic_CVE-2024-4741",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `SSL_free_buffers` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2023-44487",
          "kind": "pass",
          "message": {
            "text": "The scanner checks for each vendor listed here:\n\n* Tomcat: configuration enables HTTP/2 either through the XML file or Java's `addUpgradeProtocol()` method.\n* Jetty: HTTP/2 enabled through `HTTP2CServerConnectionFactory`/`HTTP2ServerConnectionFactory` class initialization. Note: it also checks whether `jenkins` enables http/2 through its configuration.\n* Nginx: check whether one of the HTTP configurations is enabling http/2.\nNote: the following parameters should be configured properly to make the vulnerability not applicable:\n`keepalive_requests` should be kept at the default setting of 1000 requests\n`http2_max_concurrent_streams` should be kept at the default setting of 128 streams\n`limit_conn and limit_req` should be set `with a reasonable setting balancing application performance and security`. \n* Netty: check whether the `http2` codec classes are used in a java class\n* NodeJS: check whether the `http2.createSecureServer()` is used\n* NGHttp2: check whether a web server is instantiated through one of the symbols `nghttp2_session_server_new` or `listen_and_serve`.\n* Go: check whether a server is instantiated through the `net/http` or `net/http2` packages"
          }
        },
        {
          "ruleId": "applic_CVE-2022-30635",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function Decoder.Decode of encoding/gob is called."
          }
        },
        {
          "ruleId": "applic_CVE-2017-11164",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///opt/couchbase/bin/goxdcr"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2017-11164",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///opt/couchbase/bin/goxdcr"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2017-11164",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///opt/couchbase/bin/pcregrep"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2017-11164",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///opt/couchbase/bin/pcregrep"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2017-11164",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///opt/couchbase/bin/pcretest"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2017-11164",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///opt/couchbase/bin/pcretest"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2017-11164",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/grep"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2017-11164",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/grep"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://jfrog.com/help/r/jfrog-security-documentation/jfrog-advanced-security",
          "name": "JFrog Secrets scanner",
          "rules": [
            {
              "id": "REQ.SECRET.GENERIC.TEXT",
              "name": "REQ.SECRET.GENERIC.TEXT",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.TEXT"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive"
              }
            },
            {
              "id": "REQ.SECRET.GENERIC.CODE",
              "name": "REQ.SECRET.GENERIC.CODE",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.CODE"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private"
              }
            },
            {
              "id": "REQ.SECRET.GENERIC.URL",
              "name": "REQ.SECRET.GENERIC.URL",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.URL"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive"
              }
            },
            {
              "id": "REQ.SECRET.KEYS",
              "name": "REQ.SECRET.KEYS",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.KEYS"
              },
              "fullDescription": {
                "text": "\nStoring an API key in the image could lead to several risks.\n\nIf the key is associated with a wide scope of privileges, attackers could extract it from a single image or firmware and use it maliciously to attack many targets. For example, if the embedded key allows querying/modifying data for all cloud user accounts, without per-user authentication, the attackers who extract it would gain access to system-wide data.\n\nIf the cloud/SaaS provider bills by key usage - for example, every million queries cost the key's owner a fixed sum of money - attackers could use the keys for their own purposes (or just as a form of vandalism), incurring a large cost to the legitimate user or operator.\n\n## Best practices\n\nUse narrow scopes for stored API keys. As much as possible, API keys should be unique per host and require additional authentication with the user's individual credentials for any sensitive actions.\n\nAvoid placing keys whose use incurs costs directly in the image. Store the key with any software or hardware protection available on the host for key storage (such as operating system key-stores, hardware cryptographic storage mechanisms or cloud-managed secure storage services such as [AWS KMS](https://aws.amazon.com/kms/)).\n\nTokens that were detected as exposed should be revoked and replaced -\n\n* [AWS Key Revocation](https://aws.amazon.com/premiumsupport/knowledge-center/delete-access-key/#:~:text=If%20you%20see%20a%20warning,the%20confirmation%20box%2C%20choose%20Deactivate.)\n* [GCP Key Revocation](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/CloudIAM/delete-api-keys.html)\n* [Azure Key Revocation](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops\u0026tabs=Windows#revoke-a-pat)\n* [GitHub Key Revocation](https://docs.github.com/en/rest/apps/oauth-applications#delete-an-app-authorization)\n",
                "markdown": "\nStoring an API key in the image could lead to several risks.\n\nIf the key is associated with a wide scope of privileges, attackers could extract it from a single image or firmware and use it maliciously to attack many targets. For example, if the embedded key allows querying/modifying data for all cloud user accounts, without per-user authentication, the attackers who extract it would gain access to system-wide data.\n\nIf the cloud/SaaS provider bills by key usage - for example, every million queries cost the key's owner a fixed sum of money - attackers could use the keys for their own purposes (or just as a form of vandalism), incurring a large cost to the legitimate user or operator.\n\n## Best practices\n\nUse narrow scopes for stored API keys. As much as possible, API keys should be unique per host and require additional authentication with the user's individual credentials for any sensitive actions.\n\nAvoid placing keys whose use incurs costs directly in the image. Store the key with any software or hardware protection available on the host for key storage (such as operating system key-stores, hardware cryptographic storage mechanisms or cloud-managed secure storage services such as [AWS KMS](https://aws.amazon.com/kms/)).\n\nTokens that were detected as exposed should be revoked and replaced -\n\n* [AWS Key Revocation](https://aws.amazon.com/premiumsupport/knowledge-center/delete-access-key/#:~:text=If%20you%20see%20a%20warning,the%20confirmation%20box%2C%20choose%20Deactivate.)\n* [GCP Key Revocation](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/CloudIAM/delete-api-keys.html)\n* [Azure Key Revocation](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops\u0026tabs=Windows#revoke-a-pat)\n* [GitHub Key Revocation](https://docs.github.com/en/rest/apps/oauth-applications#delete-an-app-authorization)\n"
              },
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private"
              }
            }
          ],
          "version": "1.0"
        }
      },
      "invocations": [
        {
          "arguments": [
            "/root/.jfrog/dependencies/analyzerManager/jas_scanner/jas_scanner",
            "scan",
            "/tmp/jfrog.cli.temp.-1718842815-569803999/config.yaml"
          ],
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "/tmp/jfrog.cli.temp.-1718842654-3334427047/image.tar"
          }
        }
      ],
      "results": []
    }
  ]
}
