{
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "informationUri": "https://docs.jfrog-applications.jfrog.io/jfrog-security-features/sca",
          "name": "JFrog Xray SCA",
          "rules": [
            {
              "id": "CVE-2022-48174_3.16:busybox_1.35.0-r17",
              "shortDescription": {
                "text": "[CVE-2022-48174] 3.16:busybox 1.35.0-r17"
              },
              "help": {
                "text": "There is a stack overflow vulnerability in ash.c:6030 in busybox before 1.35. In the environment of Internet of Vehicles, this vulnerability can be executed from command to arbitrary code execution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar `       | [1.36.1-r2]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-48174_3.16:ssl_client_1.35.0-r17",
              "shortDescription": {
                "text": "[CVE-2022-48174] 3.16:ssl_client 1.35.0-r17"
              },
              "help": {
                "text": "There is a stack overflow vulnerability in ash.c:6030 in busybox before 1.35. In the environment of Internet of Vehicles, this vulnerability can be executed from command to arbitrary code execution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar `       | [1.36.1-r2]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-43548_3.16:nodejs_16.20.2-r0",
              "shortDescription": {
                "text": "[CVE-2022-43548] 3.16:nodejs 16.20.2-r0"
              },
              "help": {
                "text": "A OS Command Injection vulnerability exists in Node.js versions \u003c14.21.1, \u003c16.18.1, \u003c18.12.1, \u003c19.0.1 due to an insufficient IsAllowedHost check that can easily be bypassed because IsIPAddress does not properly check if an IP address is invalid before making DBS requests allowing rebinding attacks.The fix for this issue in https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-32212 was incomplete and this new CVE is to complete the fix.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 8.1      | Not Covered       | `sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar `       | [18.12.1-r0]   |"
              },
              "properties": {
                "security-severity": "8.1"
              }
            },
            {
              "id": "CVE-2022-44840_3.16:binutils_2.38-r3",
              "shortDescription": {
                "text": "[CVE-2022-44840] 3.16:binutils 2.38-r3"
              },
              "help": {
                "text": "Heap buffer overflow vulnerability in binutils readelf before 2.40 via function find_section_in_set in file readelf.c.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2022-47696_3.16:binutils_2.38-r3",
              "shortDescription": {
                "text": "[CVE-2022-47696] 3.16:binutils 2.38-r3"
              },
              "help": {
                "text": "An issue was discovered Binutils objdump before 2.39.3 allows attackers to cause a denial of service or other unspecified impacts via function compare_symbols.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2024-24557_github.com/docker/docker_24.0.7+incompatible",
              "shortDescription": {
                "text": "[CVE-2024-24557] github.com/docker/docker 24.0.7+incompatible"
              },
              "help": {
                "text": "Moby is an open-source project created by Docker to enable software containerization. The classic builder cache system is prone to cache poisoning if the image is built FROM scratch. Also, changes to some instructions (most important being HEALTHCHECK and ONBUILD) would not cause a cache miss. An attacker with the knowledge of the Dockerfile someone is using could poison their cache by making them pull a specially crafted image that would be considered as a valid cache candidate for some build steps. 23.0+ users are only affected if they explicitly opted out of Buildkit (DOCKER_BUILDKIT=0 environment variable) or are using the /build API endpoint. All users on versions older than 23.0 could be impacted. Image build API endpoint (/build) and ImageBuild function from github.com/docker/docker/client is also affected as it the uses classic builder by default. Patches are included in 24.0.9 and 25.0.2 releases.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar `       | [24.0.9], [25.0.2]   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2022-47695_3.16:binutils_2.38-r3",
              "shortDescription": {
                "text": "[CVE-2022-47695] 3.16:binutils 2.38-r3"
              },
              "help": {
                "text": "An issue was discovered Binutils objdump before 2.39.3 allows attackers to cause a denial of service or other unspecified impacts via function bfd_mach_o_get_synthetic_symtab in match-o.c.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2022-45703_3.16:binutils_2.38-r3",
              "shortDescription": {
                "text": "[CVE-2022-45703] 3.16:binutils 2.38-r3"
              },
              "help": {
                "text": "Heap buffer overflow vulnerability in binutils readelf before 2.40 via function display_debug_section in file readelf.c.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2021-43803_3.16:nodejs_16.20.2-r0",
              "shortDescription": {
                "text": "[CVE-2021-43803] 3.16:nodejs 16.20.2-r0"
              },
              "help": {
                "text": "Next.js is a React framework. In versions of Next.js prior to 12.0.5 or 11.1.3, invalid or malformed URLs could lead to a server crash. In order to be affected by this issue, the deployment must use Next.js versions above 11.1.0 and below 12.0.5, Node.js above 15.0.0, and next start or a custom server. Deployments on Vercel are not affected, along with similar environments where invalid requests are filtered before reaching Next.js. Versions 12.0.5 and 11.1.3 contain patches for this issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-0466_3.16:libssl1.1_1.1.1w-r1",
              "shortDescription": {
                "text": "[CVE-2023-0466] 3.16:libssl1.1 1.1.1w-r1"
              },
              "help": {
                "text": "The function X509_VERIFY_PARAM_add0_policy() is documented to\nimplicitly enable the certificate policy check when doing certificate\nverification. However the implementation of the function does not\nenable the check which allows certificates with invalid or incorrect\npolicies to pass the certificate verification.\n\nAs suddenly enabling the policy check could break existing deployments it was\ndecided to keep the existing behavior of the X509_VERIFY_PARAM_add0_policy()\nfunction.\n\nInstead the applications that require OpenSSL to perform certificate\npolicy check need to use X509_VERIFY_PARAM_set1_policies() or explicitly\nenable the policy check by calling X509_VERIFY_PARAM_set_flags() with\nthe X509_V_FLAG_POLICY_CHECK flag argument.\n\nCertificate policy checks are disabled by default in OpenSSL and are not\ncommonly used by applications.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar `       | [3.0.8-r3]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-45288_github.com/golang/go_1.21.8",
              "shortDescription": {
                "text": "[CVE-2023-45288] github.com/golang/go 1.21.8"
              },
              "help": {
                "text": "An attacker may cause an HTTP/2 endpoint to read arbitrary amounts of header data by sending an excessive number of CONTINUATION frames. Maintaining HPACK state requires parsing and processing all HEADERS and CONTINUATION frames on a connection. When a request's headers exceed MaxHeaderBytes, no memory is allocated to store the excess headers, but they are still parsed. This permits an attacker to cause an HTTP/2 endpoint to read arbitrary amounts of header data, all associated with a request which is going to be rejected. These headers can include Huffman-encoded data which is significantly more expensive for the receiver to decode than for an attacker to send. The fix sets a limit on the amount of excess header frames we will process before closing a connection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar `       | [1.21.9], [1.22.2]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-0466_3.16:libcrypto1.1_1.1.1w-r1",
              "shortDescription": {
                "text": "[CVE-2023-0466] 3.16:libcrypto1.1 1.1.1w-r1"
              },
              "help": {
                "text": "The function X509_VERIFY_PARAM_add0_policy() is documented to\nimplicitly enable the certificate policy check when doing certificate\nverification. However the implementation of the function does not\nenable the check which allows certificates with invalid or incorrect\npolicies to pass the certificate verification.\n\nAs suddenly enabling the policy check could break existing deployments it was\ndecided to keep the existing behavior of the X509_VERIFY_PARAM_add0_policy()\nfunction.\n\nInstead the applications that require OpenSSL to perform certificate\npolicy check need to use X509_VERIFY_PARAM_set1_policies() or explicitly\nenable the policy check by calling X509_VERIFY_PARAM_set_flags() with\nthe X509_V_FLAG_POLICY_CHECK flag argument.\n\nCertificate policy checks are disabled by default in OpenSSL and are not\ncommonly used by applications.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Applicable       | `sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar `       | [3.0.8-r3]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-6129_3.16:libssl1.1_1.1.1w-r1",
              "shortDescription": {
                "text": "[CVE-2023-6129] 3.16:libssl1.1 1.1.1w-r1"
              },
              "help": {
                "text": "Issue summary: The POLY1305 MAC (message authentication code) implementation\ncontains a bug that might corrupt the internal state of applications running\non PowerPC CPU based platforms if the CPU provides vector instructions.\n\nImpact summary: If an attacker can influence whether the POLY1305 MAC\nalgorithm is used, the application state might be corrupted with various\napplication dependent consequences.\n\nThe POLY1305 MAC (message authentication code) implementation in OpenSSL for\nPowerPC CPUs restores the contents of vector registers in a different order\nthan they are saved. Thus the contents of some of these vector registers\nare corrupted when returning to the caller. The vulnerable code is used only\non newer PowerPC processors supporting the PowerISA 2.07 instructions.\n\nThe consequences of this kind of internal application state corruption can\nbe various - from no consequences, if the calling application does not\ndepend on the contents of non-volatile XMM registers at all, to the worst\nconsequences, where the attacker could get complete control of the application\nprocess. However unless the compiler uses the vector registers for storing\npointers, the most likely consequence, if any, would be an incorrect result\nof some application dependent calculations or a crash leading to a denial of\nservice.\n\nThe POLY1305 MAC algorithm is most frequently used as part of the\nCHACHA20-POLY1305 AEAD (authenticated encryption with associated data)\nalgorithm. The most common usage of this AEAD cipher is with TLS protocol\nversions 1.2 and 1.3. If this cipher is enabled on the server a malicious\nclient can influence whether this AEAD cipher is used. This implies that\nTLS server applications using OpenSSL can be potentially impacted. However\nwe are currently not aware of any concrete application that would be affected\nby this issue therefore we consider this a Low severity security issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar `       | [3.1.4-r3]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-42366_3.16:ssl_client_1.35.0-r17",
              "shortDescription": {
                "text": "[CVE-2023-42366] 3.16:ssl_client 1.35.0-r17"
              },
              "help": {
                "text": "A heap-buffer-overflow was discovered in BusyBox v.1.36.1 in the next_token function at awk.c:1159.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar `       | [1.35.0-r18]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42366_3.16:busybox_1.35.0-r17",
              "shortDescription": {
                "text": "[CVE-2023-42366] 3.16:busybox 1.35.0-r17"
              },
              "help": {
                "text": "A heap-buffer-overflow was discovered in BusyBox v.1.36.1 in the next_token function at awk.c:1159.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar `       | [1.35.0-r18]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42364_3.16:busybox_1.35.0-r17",
              "shortDescription": {
                "text": "[CVE-2023-42364] 3.16:busybox 1.35.0-r17"
              },
              "help": {
                "text": "A use-after-free vulnerability in BusyBox v.1.36.1 allows attackers to cause a denial of service via a crafted awk pattern in the awk.c evaluate function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-6129_3.16:libcrypto1.1_1.1.1w-r1",
              "shortDescription": {
                "text": "[CVE-2023-6129] 3.16:libcrypto1.1 1.1.1w-r1"
              },
              "help": {
                "text": "Issue summary: The POLY1305 MAC (message authentication code) implementation\ncontains a bug that might corrupt the internal state of applications running\non PowerPC CPU based platforms if the CPU provides vector instructions.\n\nImpact summary: If an attacker can influence whether the POLY1305 MAC\nalgorithm is used, the application state might be corrupted with various\napplication dependent consequences.\n\nThe POLY1305 MAC (message authentication code) implementation in OpenSSL for\nPowerPC CPUs restores the contents of vector registers in a different order\nthan they are saved. Thus the contents of some of these vector registers\nare corrupted when returning to the caller. The vulnerable code is used only\non newer PowerPC processors supporting the PowerISA 2.07 instructions.\n\nThe consequences of this kind of internal application state corruption can\nbe various - from no consequences, if the calling application does not\ndepend on the contents of non-volatile XMM registers at all, to the worst\nconsequences, where the attacker could get complete control of the application\nprocess. However unless the compiler uses the vector registers for storing\npointers, the most likely consequence, if any, would be an incorrect result\nof some application dependent calculations or a crash leading to a denial of\nservice.\n\nThe POLY1305 MAC algorithm is most frequently used as part of the\nCHACHA20-POLY1305 AEAD (authenticated encryption with associated data)\nalgorithm. The most common usage of this AEAD cipher is with TLS protocol\nversions 1.2 and 1.3. If this cipher is enabled on the server a malicious\nclient can influence whether this AEAD cipher is used. This implies that\nTLS server applications using OpenSSL can be potentially impacted. However\nwe are currently not aware of any concrete application that would be affected\nby this issue therefore we consider this a Low severity security issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar `       | [3.1.4-r3]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2023-42365_3.16:busybox_1.35.0-r17",
              "shortDescription": {
                "text": "[CVE-2023-42365] 3.16:busybox 1.35.0-r17"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in BusyBox v.1.36.1 via a crafted awk pattern in the awk.c copyvar function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42363_3.16:ssl_client_1.35.0-r17",
              "shortDescription": {
                "text": "[CVE-2023-42363] 3.16:ssl_client 1.35.0-r17"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in xasprintf function in xfuncs_printf.c:344 in BusyBox v.1.36.1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar `       | [1.36.1-r27]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42363_3.16:busybox_1.35.0-r17",
              "shortDescription": {
                "text": "[CVE-2023-42363] 3.16:busybox 1.35.0-r17"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in xasprintf function in xfuncs_printf.c:344 in BusyBox v.1.36.1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar `       | [1.36.1-r27]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42364_3.16:ssl_client_1.35.0-r17",
              "shortDescription": {
                "text": "[CVE-2023-42364] 3.16:ssl_client 1.35.0-r17"
              },
              "help": {
                "text": "A use-after-free vulnerability in BusyBox v.1.36.1 allows attackers to cause a denial of service via a crafted awk pattern in the awk.c evaluate function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42365_3.16:ssl_client_1.35.0-r17",
              "shortDescription": {
                "text": "[CVE-2023-42365] 3.16:ssl_client 1.35.0-r17"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in BusyBox v.1.36.1 via a crafted awk pattern in the awk.c copyvar function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2022-48065_3.16:binutils_2.38-r3",
              "shortDescription": {
                "text": "[CVE-2022-48065] 3.16:binutils 2.38-r3"
              },
              "help": {
                "text": "GNU Binutils before 2.40 was discovered to contain a memory leak vulnerability var the function find_abstract_instance in dwarf2.c.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2021-3826_3.16:libstdc++_11.2.1_git20220219-r2",
              "shortDescription": {
                "text": "[CVE-2021-3826] 3.16:libstdc++ 11.2.1_git20220219-r2"
              },
              "help": {
                "text": "Heap/stack buffer overflow in the dlang_lname function in d-demangle.c in libiberty allows attackers to potentially cause a denial of service (segmentation fault and crash) via a crafted mangled symbol.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-47010_3.16:binutils_2.38-r3",
              "shortDescription": {
                "text": "[CVE-2022-47010] 3.16:binutils 2.38-r3"
              },
              "help": {
                "text": "An issue was discovered function pr_function_type in prdbg.c in Binutils 2.34 thru 2.38, allows attackers to cause a denial of service due to memory leaks.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2022-4285_3.16:binutils_2.38-r3",
              "shortDescription": {
                "text": "[CVE-2022-4285] 3.16:binutils 2.38-r3"
              },
              "help": {
                "text": "An illegal memory access flaw was found in the binutils package. Parsing an ELF file containing corrupt symbol version information may result in a denial of service. This issue is the result of an incomplete fix for CVE-2020-16599.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2022-47007_3.16:binutils_2.38-r3",
              "shortDescription": {
                "text": "[CVE-2022-47007] 3.16:binutils 2.38-r3"
              },
              "help": {
                "text": "An issue was discovered function stab_demangle_v3_arg in stabs.c in Binutils 2.34 thru 2.38, allows attackers to cause a denial of service due to memory leaks.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2009-3767_3.16:libssl1.1_1.1.1w-r1",
              "shortDescription": {
                "text": "[CVE-2009-3767] 3.16:libssl1.1 1.1.1w-r1"
              },
              "help": {
                "text": "libraries/libldap/tls_o.c in OpenLDAP 2.2 and 2.4, and possibly other versions, when OpenSSL is used, does not properly handle a '\\0' character in a domain name in the subject's Common Name (CN) field of an X.509 certificate, which allows man-in-the-middle attackers to spoof arbitrary SSL servers via a crafted certificate issued by a legitimate Certification Authority, a related issue to CVE-2009-2408.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2022-47008_3.16:binutils_2.38-r3",
              "shortDescription": {
                "text": "[CVE-2022-47008] 3.16:binutils 2.38-r3"
              },
              "help": {
                "text": "An issue was discovered function make_tempdir, and make_tempname in bucomm.c in Binutils 2.34 thru 2.38, allows attackers to cause a denial of service due to memory leaks.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2021-3826_3.16:libgcc_11.2.1_git20220219-r2",
              "shortDescription": {
                "text": "[CVE-2021-3826] 3.16:libgcc 11.2.1_git20220219-r2"
              },
              "help": {
                "text": "Heap/stack buffer overflow in the dlang_lname function in d-demangle.c in libiberty allows attackers to potentially cause a denial of service (segmentation fault and crash) via a crafted mangled symbol.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2022-48063_3.16:binutils_2.38-r3",
              "shortDescription": {
                "text": "[CVE-2022-48063] 3.16:binutils 2.38-r3"
              },
              "help": {
                "text": "GNU Binutils before 2.40 was discovered to contain an excessive memory consumption vulnerability via the function load_separate_debug_files at dwarf2.c. The attacker could supply a crafted ELF file and cause a DNS attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2009-3767_3.16:libcrypto1.1_1.1.1w-r1",
              "shortDescription": {
                "text": "[CVE-2009-3767] 3.16:libcrypto1.1 1.1.1w-r1"
              },
              "help": {
                "text": "libraries/libldap/tls_o.c in OpenLDAP 2.2 and 2.4, and possibly other versions, when OpenSSL is used, does not properly handle a '\\0' character in a domain name in the subject's Common Name (CN) field of an X.509 certificate, which allows man-in-the-middle attackers to spoof arbitrary SSL servers via a crafted certificate issued by a legitimate Certification Authority, a related issue to CVE-2009-2408.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2022-48064_3.16:binutils_2.38-r3",
              "shortDescription": {
                "text": "[CVE-2022-48064] 3.16:binutils 2.38-r3"
              },
              "help": {
                "text": "GNU Binutils before 2.40 was discovered to contain an excessive memory consumption vulnerability via the function bfd_dwarf2_find_nearest_line_with_alt at dwarf2.c. The attacker could supply a crafted ELF file and cause a DNS attack.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2022-38127_3.16:binutils_2.38-r3",
              "shortDescription": {
                "text": "[CVE-2022-38127] 3.16:binutils 2.38-r3"
              },
              "help": {
                "text": "A NULL pointer dereference in the read_and_display_attr_value() function in binutils/dwarf.c may lead to program crash when parsing corrupt DWARF data.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2022-47011_3.16:binutils_2.38-r3",
              "shortDescription": {
                "text": "[CVE-2022-47011] 3.16:binutils 2.38-r3"
              },
              "help": {
                "text": "An issue was discovered function parse_stab_struct_fields in stabs.c in Binutils 2.34 thru 2.38, allows attackers to cause a denial of service due to memory leaks.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-45143_3.16:nodejs_16.20.2-r0",
              "shortDescription": {
                "text": "[CVE-2023-45143] 3.16:nodejs 16.20.2-r0"
              },
              "help": {
                "text": "Undici is an HTTP/1.1 client written from scratch for Node.js. Prior to version 5.26.2, Undici already cleared Authorization headers on cross-origin redirects, but did not clear `Cookie` headers. By design, `cookie` headers are forbidden request headers, disallowing them to be set in RequestInit.headers in browser environments. Since undici handles headers more liberally than the spec, there was a disconnect from the assumptions the spec made, and undici's implementation of fetch. As such this may lead to accidental leakage of cookie to a third-party site or a malicious attacker who can control the redirection target (ie. an open redirector) to leak the cookie to the third party site. This was patched in version 5.26.2. There are no known workarounds.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 3.5      | Not Covered       | `sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar `       | [18.18.2-r0]   |"
              },
              "properties": {
                "security-severity": "3.5"
              }
            },
            {
              "id": "CVE-2024-1394_3.16:libcrypto1.1_1.1.1w-r1",
              "shortDescription": {
                "text": "[CVE-2024-1394] 3.16:libcrypto1.1 1.1.1w-r1"
              },
              "help": {
                "text": "A memory leak flaw was found in Golang in the RSA encrypting/decrypting code, which might lead to a resource exhaustion vulnerability using attacker-controlled inputs​. The memory leak happens in github.com/golang-fips/openssl/openssl/rsa.go#L113. The objects leaked are pkey​ and ctx​. That function uses named return parameters to free pkey​ and ctx​ if there is an error initializing the context or setting the different properties. All return statements related to error cases follow the \"return nil, nil, fail(...)\" pattern, meaning that pkey​ and ctx​ will be nil inside the deferred function that should free them.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar `       | [3.0.0-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-27982_3.16:nodejs_16.20.2-r0",
              "shortDescription": {
                "text": "[CVE-2024-27982] 3.16:nodejs 16.20.2-r0"
              },
              "help": {
                "text": "The team has identified a critical vulnerability in the http server of the most recent version of Node, where malformed headers can lead to HTTP request smuggling. Specifically, if a space is placed before a content-length header, it is not interpreted correctly, enabling attackers to smuggle in a second request within the body of the first.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar `       | [20.12.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2022-38126_3.16:binutils_2.38-r3",
              "shortDescription": {
                "text": "[CVE-2022-38126] 3.16:binutils 2.38-r3"
              },
              "help": {
                "text": "CVE-2022-38126",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar `       | [2.39-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-1394_3.16:libssl1.1_1.1.1w-r1",
              "shortDescription": {
                "text": "[CVE-2024-1394] 3.16:libssl1.1 1.1.1w-r1"
              },
              "help": {
                "text": "A memory leak flaw was found in Golang in the RSA encrypting/decrypting code, which might lead to a resource exhaustion vulnerability using attacker-controlled inputs​. The memory leak happens in github.com/golang-fips/openssl/openssl/rsa.go#L113. The objects leaked are pkey​ and ctx​. That function uses named return parameters to free pkey​ and ctx​ if there is an error initializing the context or setting the different properties. All return statements related to error cases follow the \"return nil, nil, fail(...)\" pattern, meaning that pkey​ and ctx​ will be nil inside the deferred function that should free them.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar `       | [3.0.0-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-29827_ejs_3.1.9",
              "shortDescription": {
                "text": "[CVE-2023-29827] ejs 3.1.9"
              },
              "help": {
                "text": "ejs v3.1.9 is vulnerable to server-side template injection. If the ejs file is controllable, template injection can be implemented through the configuration settings of the closeDelimiter parameter. NOTE: this is disputed by the vendor because the render function is not intended to be used with untrusted input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-49210_3.16:libcrypto1.1_1.1.1w-r1",
              "shortDescription": {
                "text": "[CVE-2023-49210] 3.16:libcrypto1.1 1.1.1w-r1"
              },
              "help": {
                "text": "The openssl (aka node-openssl) NPM package through 2.0.0 was characterized as \"a nonsense wrapper with no real purpose\" by its author, and accepts an opts argument that contains a verb field (used for command execution). NOTE: This vulnerability only affects products that are no longer supported by the maintainer.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-49210_3.16:libssl1.1_1.1.1w-r1",
              "shortDescription": {
                "text": "[CVE-2023-49210] 3.16:libssl1.1 1.1.1w-r1"
              },
              "help": {
                "text": "The openssl (aka node-openssl) NPM package through 2.0.0 was characterized as \"a nonsense wrapper with no real purpose\" by its author, and accepts an opts argument that contains a verb field (used for command execution). NOTE: This vulnerability only affects products that are no longer supported by the maintainer.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2024-27983_3.16:nodejs_16.20.2-r0",
              "shortDescription": {
                "text": "[CVE-2024-27983] 3.16:nodejs 16.20.2-r0"
              },
              "help": {
                "text": "An attacker can make the Node.js HTTP/2 server completely unavailable by sending a small amount of HTTP/2 frames packets with a few HTTP/2 frames inside. It is possible to leave some data in nghttp2 memory after reset when headers with HTTP/2 CONTINUATION frame are sent to the server and then a TCP connection is abruptly closed by the client triggering the Http2Session destructor while header frames are still being processed (and stored in memory) causing a race condition.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Applicable       | `sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar `       | [20.12.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2016-7798_3.16:libcrypto1.1_1.1.1w-r1",
              "shortDescription": {
                "text": "[CVE-2016-7798] 3.16:libcrypto1.1 1.1.1w-r1"
              },
              "help": {
                "text": "The openssl gem for Ruby uses the same initialization vector (IV) in GCM Mode (aes-*-gcm) when the IV is set before the key, which makes it easier for context-dependent attackers to bypass the encryption protection mechanism.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar `       | [3.0.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2016-7798_3.16:libssl1.1_1.1.1w-r1",
              "shortDescription": {
                "text": "[CVE-2016-7798] 3.16:libssl1.1 1.1.1w-r1"
              },
              "help": {
                "text": "The openssl gem for Ruby uses the same initialization vector (IV) in GCM Mode (aes-*-gcm) when the IV is set before the key, which makes it easier for context-dependent attackers to bypass the encryption protection mechanism.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar `       | [3.0.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2022-47673_3.16:binutils_2.38-r3",
              "shortDescription": {
                "text": "[CVE-2022-47673] 3.16:binutils 2.38-r3"
              },
              "help": {
                "text": "An issue was discovered in Binutils addr2line before 2.39.3, function parse_module contains multiple out of bound reads which may cause a denial of service or other unspecified impacts.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Applicable       | `sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2023-25584_3.16:binutils_2.38-r3",
              "shortDescription": {
                "text": "[CVE-2023-25584] 3.16:binutils 2.38-r3"
              },
              "help": {
                "text": "An out-of-bounds read flaw was found in the parse_module function in bfd/vms-alpha.c in Binutils.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.1      | Not Applicable       | `sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.1"
              }
            },
            {
              "id": "CVE-2024-33883_ejs_3.1.9",
              "shortDescription": {
                "text": "[CVE-2024-33883] ejs 3.1.9"
              },
              "help": {
                "text": "The ejs (aka Embedded JavaScript templates) package before 3.1.10 for Node.js lacks certain pollution protection.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Applicable       | `sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar `       | [3.1.10]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            }
          ],
          "version": "3.96.1"
        }
      },
      "results": [
        {
          "ruleId": "CVE-2022-48174_3.16:busybox_1.35.0-r17",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "[CVE-2022-48174] sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-48174_3.16:ssl_client_1.35.0-r17",
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "[CVE-2022-48174] sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-43548_3.16:nodejs_16.20.2-r0",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "[CVE-2022-43548] sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-44840_3.16:binutils_2.38-r3",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "text": "[CVE-2022-44840] sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-47696_3.16:binutils_2.38-r3",
          "ruleIndex": 4,
          "level": "error",
          "message": {
            "text": "[CVE-2022-47696] sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-24557_github.com/docker/docker_24.0.7+incompatible",
          "ruleIndex": 5,
          "level": "error",
          "message": {
            "text": "[CVE-2024-24557] sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-47695_3.16:binutils_2.38-r3",
          "ruleIndex": 6,
          "level": "error",
          "message": {
            "text": "[CVE-2022-47695] sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-45703_3.16:binutils_2.38-r3",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "[CVE-2022-45703] sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-43803_3.16:nodejs_16.20.2-r0",
          "ruleIndex": 8,
          "level": "error",
          "message": {
            "text": "[CVE-2021-43803] sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0466_3.16:libssl1.1_1.1.1w-r1",
          "ruleIndex": 9,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-0466] sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45288_github.com/golang/go_1.21.8",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-45288] sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0466_3.16:libcrypto1.1_1.1.1w-r1",
          "ruleIndex": 11,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-0466] sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-6129_3.16:libssl1.1_1.1.1w-r1",
          "ruleIndex": 12,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-6129] sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42366_3.16:ssl_client_1.35.0-r17",
          "ruleIndex": 13,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42366] sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42366_3.16:busybox_1.35.0-r17",
          "ruleIndex": 14,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42366] sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42364_3.16:busybox_1.35.0-r17",
          "ruleIndex": 15,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42364] sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-6129_3.16:libcrypto1.1_1.1.1w-r1",
          "ruleIndex": 16,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-6129] sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42365_3.16:busybox_1.35.0-r17",
          "ruleIndex": 17,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42365] sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42363_3.16:ssl_client_1.35.0-r17",
          "ruleIndex": 18,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42363] sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42363_3.16:busybox_1.35.0-r17",
          "ruleIndex": 19,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42363] sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42364_3.16:ssl_client_1.35.0-r17",
          "ruleIndex": 20,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42364] sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42365_3.16:ssl_client_1.35.0-r17",
          "ruleIndex": 21,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42365] sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-48065_3.16:binutils_2.38-r3",
          "ruleIndex": 22,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-48065] sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3826_3.16:libstdc++_11.2.1_git20220219-r2",
          "ruleIndex": 23,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-3826] sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-47010_3.16:binutils_2.38-r3",
          "ruleIndex": 24,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-47010] sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-4285_3.16:binutils_2.38-r3",
          "ruleIndex": 25,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-4285] sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-47007_3.16:binutils_2.38-r3",
          "ruleIndex": 26,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-47007] sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2009-3767_3.16:libssl1.1_1.1.1w-r1",
          "ruleIndex": 27,
          "level": "warning",
          "message": {
            "text": "[CVE-2009-3767] sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-47008_3.16:binutils_2.38-r3",
          "ruleIndex": 28,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-47008] sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3826_3.16:libgcc_11.2.1_git20220219-r2",
          "ruleIndex": 29,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-3826] sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-48063_3.16:binutils_2.38-r3",
          "ruleIndex": 30,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-48063] sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2009-3767_3.16:libcrypto1.1_1.1.1w-r1",
          "ruleIndex": 31,
          "level": "warning",
          "message": {
            "text": "[CVE-2009-3767] sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-48064_3.16:binutils_2.38-r3",
          "ruleIndex": 32,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-48064] sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-38127_3.16:binutils_2.38-r3",
          "ruleIndex": 33,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-38127] sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-47011_3.16:binutils_2.38-r3",
          "ruleIndex": 34,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-47011] sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-45143_3.16:nodejs_16.20.2-r0",
          "ruleIndex": 35,
          "level": "note",
          "message": {
            "text": "[CVE-2023-45143] sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-1394_3.16:libcrypto1.1_1.1.1w-r1",
          "ruleIndex": 36,
          "level": "none",
          "message": {
            "text": "[CVE-2024-1394] sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-27982_3.16:nodejs_16.20.2-r0",
          "ruleIndex": 37,
          "level": "none",
          "message": {
            "text": "[CVE-2024-27982] sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-38126_3.16:binutils_2.38-r3",
          "ruleIndex": 38,
          "level": "none",
          "message": {
            "text": "[CVE-2022-38126] sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-1394_3.16:libssl1.1_1.1.1w-r1",
          "ruleIndex": 39,
          "level": "none",
          "message": {
            "text": "[CVE-2024-1394] sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-29827_ejs_3.1.9",
          "ruleIndex": 40,
          "level": "error",
          "message": {
            "text": "[CVE-2023-29827] sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-49210_3.16:libcrypto1.1_1.1.1w-r1",
          "ruleIndex": 41,
          "level": "error",
          "message": {
            "text": "[CVE-2023-49210] sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-49210_3.16:libssl1.1_1.1.1w-r1",
          "ruleIndex": 42,
          "level": "error",
          "message": {
            "text": "[CVE-2023-49210] sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-27983_3.16:nodejs_16.20.2-r0",
          "ruleIndex": 43,
          "level": "error",
          "message": {
            "text": "[CVE-2024-27983] sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2016-7798_3.16:libcrypto1.1_1.1.1w-r1",
          "ruleIndex": 44,
          "level": "error",
          "message": {
            "text": "[CVE-2016-7798] sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2016-7798_3.16:libssl1.1_1.1.1w-r1",
          "ruleIndex": 45,
          "level": "error",
          "message": {
            "text": "[CVE-2016-7798] sha256__5535fda0356bb3eff348b2f618314a47946d7ccfbeb880b3fc910dd7375ae140.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-47673_3.16:binutils_2.38-r3",
          "ruleIndex": 46,
          "level": "error",
          "message": {
            "text": "[CVE-2022-47673] sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-25584_3.16:binutils_2.38-r3",
          "ruleIndex": 47,
          "level": "error",
          "message": {
            "text": "[CVE-2023-25584] sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-33883_ejs_3.1.9",
          "ruleIndex": 48,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-33883] sha256__e613937709714aff4a41a1c588959b13e200a9384956cabd60cf9133d3bc994a.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://jfrog.com/help/r/jfrog-security-documentation/jfrog-advanced-security",
          "name": "JFrog Applicability Scanner",
          "rules": [
            {
              "id": "applic_CVE-2023-25584",
              "name": "CVE-2023-25584",
              "shortDescription": {
                "text": "Scanner for CVE-2023-25584"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0466",
              "name": "CVE-2023-0466",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0466"
              },
              "fullDescription": {
                "text": "The scanner checks whether `X509_VERIFY_PARAM_add0_policy()` is called.\n\nNote that calling `X509_VERIFY_PARAM_set_flags()` with the parameter `X509_V_FLAG_POLICY_CHECK` mitigates this vulnerability. The scanner currently does not check for that mitigation.",
                "markdown": "The scanner checks whether `X509_VERIFY_PARAM_add0_policy()` is called.\n\nNote that calling `X509_VERIFY_PARAM_set_flags()` with the parameter `X509_V_FLAG_POLICY_CHECK` mitigates this vulnerability. The scanner currently does not check for that mitigation."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-49210",
              "name": "CVE-2023-49210",
              "shortDescription": {
                "text": "Scanner for CVE-2023-49210"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable `openssl` function is used with external input.",
                "markdown": "The scanner checks whether the vulnerable `openssl` function is used with external input."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2024-27983",
              "name": "CVE-2024-27983",
              "shortDescription": {
                "text": "Scanner for CVE-2024-27983"
              },
              "fullDescription": {
                "text": "The scanner checks whether Node.js enables the vulnerable HTTP/2 server functionality, by checking that any of the following functions are called: \n\n* `http2.createSecureServer` \n* `http2.createServer`",
                "markdown": "The scanner checks whether Node.js enables the vulnerable HTTP/2 server functionality, by checking that any of the following functions are called: \n\n* `http2.createSecureServer` \n* `http2.createServer`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-45288",
              "name": "CVE-2023-45288",
              "shortDescription": {
                "text": "Scanner for CVE-2023-45288"
              },
              "fullDescription": {
                "text": "The scanner checks if any of the following functions are called:\n\n* `net/http/ServeTLS`\n* `x/net/http2/Server/ServeConn`\n* `x/net/http2/ConfigureServer`\n\nAn additional condition (that the scanner currently does not check) should be verified to determine if the CVE is applicable: `crypto/tls/Config/NextProtos` or `net/http/TLSNextProto` are not used to disable `HTTP/2`.",
                "markdown": "The scanner checks if any of the following functions are called:\n\n* `net/http/ServeTLS`\n* `x/net/http2/Server/ServeConn`\n* `x/net/http2/ConfigureServer`\n\nAn additional condition (that the scanner currently does not check) should be verified to determine if the CVE is applicable: `crypto/tls/Config/NextProtos` or `net/http/TLSNextProto` are not used to disable `HTTP/2`."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2024-33883",
              "name": "CVE-2024-33883",
              "shortDescription": {
                "text": "Scanner for CVE-2024-33883"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `ejs.compile()` is called.",
                "markdown": "The scanner checks whether the vulnerable function `ejs.compile()` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2016-7798",
              "name": "CVE-2016-7798",
              "shortDescription": {
                "text": "Scanner for CVE-2016-7798"
              },
              "fullDescription": {
                "text": "The scanner checks if the function `OpenSSL::Cipher.new()` is called with AES gcm is as the encryption type. \nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The AES IV initialization happens before the key initialization.",
                "markdown": "The scanner checks if the function `OpenSSL::Cipher.new()` is called with AES gcm is as the encryption type. \nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The AES IV initialization happens before the key initialization."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-29827",
              "name": "CVE-2023-29827",
              "shortDescription": {
                "text": "Scanner for CVE-2023-29827"
              },
              "fullDescription": {
                "text": "The scanner checks whether any of the following conditions are met:\n\n1. The `ejs.renderFile` function is called with an unknown third argument.\n\n2. The `ejs.compile` function is called with an unknown second argument.\n\n3. The `express.set` function is called with any of the following arguments:\n\n* `express.set(\"view engine\", \"ejs\")`\n* `express.set(\"view engine\", {USER_INPUT})`\n* `express.set({USER_INPUT}, \"ejs\")`\n* `express.set({USER_INPUT}, {USER_INPUT})`",
                "markdown": "The scanner checks whether any of the following conditions are met:\n\n1. The `ejs.renderFile` function is called with an unknown third argument.\n\n2. The `ejs.compile` function is called with an unknown second argument.\n\n3. The `express.set` function is called with any of the following arguments:\n\n* `express.set(\"view engine\", \"ejs\")`\n* `express.set(\"view engine\", {USER_INPUT})`\n* `express.set({USER_INPUT}, \"ejs\")`\n* `express.set({USER_INPUT}, {USER_INPUT})`"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-47673",
              "name": "CVE-2022-47673",
              "shortDescription": {
                "text": "Scanner for CVE-2022-47673"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable addr2line binary is used.",
                "markdown": "The scanner checks whether the vulnerable addr2line binary is used."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-48174",
              "name": "CVE-2022-48174",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-48174"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-38126",
              "name": "CVE-2022-38126",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-38126"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-27982",
              "name": "CVE-2024-27982",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-27982"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-45703",
              "name": "CVE-2022-45703",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-45703"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-6129",
              "name": "CVE-2023-6129",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-6129"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-47010",
              "name": "CVE-2022-47010",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-47010"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-48065",
              "name": "CVE-2022-48065",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-48065"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-47696",
              "name": "CVE-2022-47696",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-47696"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-47695",
              "name": "CVE-2022-47695",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-47695"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2009-3767",
              "name": "CVE-2009-3767",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2009-3767"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-43803",
              "name": "CVE-2021-43803",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-43803"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-47008",
              "name": "CVE-2022-47008",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-47008"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-47011",
              "name": "CVE-2022-47011",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-47011"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-3826",
              "name": "CVE-2021-3826",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-3826"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42364",
              "name": "CVE-2023-42364",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42364"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-43548",
              "name": "CVE-2022-43548",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-43548"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-45143",
              "name": "CVE-2023-45143",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-45143"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42363",
              "name": "CVE-2023-42363",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42363"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-48064",
              "name": "CVE-2022-48064",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-48064"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-38127",
              "name": "CVE-2022-38127",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-38127"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-44840",
              "name": "CVE-2022-44840",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-44840"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42366",
              "name": "CVE-2023-42366",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42366"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42365",
              "name": "CVE-2023-42365",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42365"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-47007",
              "name": "CVE-2022-47007",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-47007"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-48063",
              "name": "CVE-2022-48063",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-48063"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-4285",
              "name": "CVE-2022-4285",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-4285"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-1394",
              "name": "CVE-2024-1394",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-1394"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-24557",
              "name": "CVE-2024-24557",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-24557"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            }
          ],
          "version": "1.0"
        }
      },
      "invocations": [
        {
          "arguments": [
            "/root/.jfrog/dependencies/analyzerManager/jas_scanner/jas_scanner",
            "scan",
            "/tmp/jfrog.cli.temp.-1718847971-800332311/config.yaml"
          ],
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "/tmp/jfrog.cli.temp.-1718847874-63843206/image.tar"
          }
        }
      ],
      "results": [
        {
          "ruleId": "applic_CVE-2023-25584",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2023-0466",
          "message": {
            "text": "References to the vulnerable functions were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/sbin/arangod"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-49210",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable `openssl` function is used with external input."
          }
        },
        {
          "ruleId": "applic_CVE-2024-27983",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether Node.js enables the vulnerable HTTP/2 server functionality, by checking that any of the following functions are called: \n\n* `http2.createSecureServer` \n* `http2.createServer`"
          }
        },
        {
          "ruleId": "applic_CVE-2023-45288",
          "message": {
            "text": "The vulnerable function ServeTLS is called"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///usr/bin/arangodb"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2024-33883",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `ejs.compile()` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2016-7798",
          "kind": "pass",
          "message": {
            "text": "The scanner checks if the function `OpenSSL::Cipher.new()` is called with AES gcm is as the encryption type. \nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The AES IV initialization happens before the key initialization."
          }
        },
        {
          "ruleId": "applic_CVE-2023-29827",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether any of the following conditions are met:\n\n1. The `ejs.renderFile` function is called with an unknown third argument.\n\n2. The `ejs.compile` function is called with an unknown second argument.\n\n3. The `express.set` function is called with any of the following arguments:\n\n* `express.set(\"view engine\", \"ejs\")`\n* `express.set(\"view engine\", {USER_INPUT})`\n* `express.set({USER_INPUT}, \"ejs\")`\n* `express.set({USER_INPUT}, {USER_INPUT})`"
          }
        },
        {
          "ruleId": "applic_CVE-2022-47673",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable addr2line binary is used."
          }
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://jfrog.com/help/r/jfrog-security-documentation/jfrog-advanced-security",
          "name": "JFrog Secrets scanner",
          "rules": [
            {
              "id": "REQ.SECRET.GENERIC.TEXT",
              "name": "REQ.SECRET.GENERIC.TEXT",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.TEXT"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive"
              }
            },
            {
              "id": "REQ.SECRET.GENERIC.CODE",
              "name": "REQ.SECRET.GENERIC.CODE",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.CODE"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private"
              }
            },
            {
              "id": "REQ.SECRET.GENERIC.URL",
              "name": "REQ.SECRET.GENERIC.URL",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.URL"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive"
              }
            },
            {
              "id": "REQ.SECRET.KEYS",
              "name": "REQ.SECRET.KEYS",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.KEYS"
              },
              "fullDescription": {
                "text": "\nStoring an API key in the image could lead to several risks.\n\nIf the key is associated with a wide scope of privileges, attackers could extract it from a single image or firmware and use it maliciously to attack many targets. For example, if the embedded key allows querying/modifying data for all cloud user accounts, without per-user authentication, the attackers who extract it would gain access to system-wide data.\n\nIf the cloud/SaaS provider bills by key usage - for example, every million queries cost the key's owner a fixed sum of money - attackers could use the keys for their own purposes (or just as a form of vandalism), incurring a large cost to the legitimate user or operator.\n\n## Best practices\n\nUse narrow scopes for stored API keys. As much as possible, API keys should be unique per host and require additional authentication with the user's individual credentials for any sensitive actions.\n\nAvoid placing keys whose use incurs costs directly in the image. Store the key with any software or hardware protection available on the host for key storage (such as operating system key-stores, hardware cryptographic storage mechanisms or cloud-managed secure storage services such as [AWS KMS](https://aws.amazon.com/kms/)).\n\nTokens that were detected as exposed should be revoked and replaced -\n\n* [AWS Key Revocation](https://aws.amazon.com/premiumsupport/knowledge-center/delete-access-key/#:~:text=If%20you%20see%20a%20warning,the%20confirmation%20box%2C%20choose%20Deactivate.)\n* [GCP Key Revocation](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/CloudIAM/delete-api-keys.html)\n* [Azure Key Revocation](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops\u0026tabs=Windows#revoke-a-pat)\n* [GitHub Key Revocation](https://docs.github.com/en/rest/apps/oauth-applications#delete-an-app-authorization)\n",
                "markdown": "\nStoring an API key in the image could lead to several risks.\n\nIf the key is associated with a wide scope of privileges, attackers could extract it from a single image or firmware and use it maliciously to attack many targets. For example, if the embedded key allows querying/modifying data for all cloud user accounts, without per-user authentication, the attackers who extract it would gain access to system-wide data.\n\nIf the cloud/SaaS provider bills by key usage - for example, every million queries cost the key's owner a fixed sum of money - attackers could use the keys for their own purposes (or just as a form of vandalism), incurring a large cost to the legitimate user or operator.\n\n## Best practices\n\nUse narrow scopes for stored API keys. As much as possible, API keys should be unique per host and require additional authentication with the user's individual credentials for any sensitive actions.\n\nAvoid placing keys whose use incurs costs directly in the image. Store the key with any software or hardware protection available on the host for key storage (such as operating system key-stores, hardware cryptographic storage mechanisms or cloud-managed secure storage services such as [AWS KMS](https://aws.amazon.com/kms/)).\n\nTokens that were detected as exposed should be revoked and replaced -\n\n* [AWS Key Revocation](https://aws.amazon.com/premiumsupport/knowledge-center/delete-access-key/#:~:text=If%20you%20see%20a%20warning,the%20confirmation%20box%2C%20choose%20Deactivate.)\n* [GCP Key Revocation](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/CloudIAM/delete-api-keys.html)\n* [Azure Key Revocation](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops\u0026tabs=Windows#revoke-a-pat)\n* [GitHub Key Revocation](https://docs.github.com/en/rest/apps/oauth-applications#delete-an-app-authorization)\n"
              },
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private"
              }
            }
          ],
          "version": "1.0"
        }
      },
      "invocations": [
        {
          "arguments": [
            "/root/.jfrog/dependencies/analyzerManager/jas_scanner/jas_scanner",
            "scan",
            "/tmp/jfrog.cli.temp.-1718847971-800332311/config.yaml"
          ],
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "/tmp/jfrog.cli.temp.-1718847874-63843206/image.tar"
          }
        }
      ],
      "results": []
    }
  ]
}
