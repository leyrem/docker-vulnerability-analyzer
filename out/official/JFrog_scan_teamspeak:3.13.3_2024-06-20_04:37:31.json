{
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "informationUri": "https://docs.jfrog-applications.jfrog.io/jfrog-security-features/sca",
          "name": "JFrog Xray SCA",
          "rules": [
            {
              "id": "CVE-2022-1292_3.10:libcrypto1.1_1.1.1k-r0",
              "shortDescription": {
                "text": "[CVE-2022-1292] 3.10:libcrypto1.1 1.1.1k-r0"
              },
              "help": {
                "text": "The c_rehash script does not properly sanitise shell metacharacters to prevent command injection. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.3 (Affected 3.0.0,3.0.1,3.0.2). Fixed in OpenSSL 1.1.1o (Affected 1.1.1-1.1.1n). Fixed in OpenSSL 1.0.2ze (Affected 1.0.2-1.0.2zd).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Applicable       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-2068_3.10:libssl1.1_1.1.1k-r0",
              "shortDescription": {
                "text": "[CVE-2022-2068] 3.10:libssl1.1 1.1.1k-r0"
              },
              "help": {
                "text": "In addition to the c_rehash shell command injection identified in CVE-2022-1292, further circumstances where the c_rehash script does not properly sanitise shell metacharacters to prevent command injection were found by code review. When the CVE-2022-1292 was fixed it was not discovered that there are other places in the script where the file names of certificates being hashed were possibly passed to a command executed through the shell. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.4 (Affected 3.0.0,3.0.1,3.0.2,3.0.3). Fixed in OpenSSL 1.1.1p (Affected 1.1.1-1.1.1o). Fixed in OpenSSL 1.0.2zf (Affected 1.0.2-1.0.2ze).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Applicable       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-1292_3.10:libssl1.1_1.1.1k-r0",
              "shortDescription": {
                "text": "[CVE-2022-1292] 3.10:libssl1.1 1.1.1k-r0"
              },
              "help": {
                "text": "The c_rehash script does not properly sanitise shell metacharacters to prevent command injection. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.3 (Affected 3.0.0,3.0.1,3.0.2). Fixed in OpenSSL 1.1.1o (Affected 1.1.1-1.1.1n). Fixed in OpenSSL 1.0.2ze (Affected 1.0.2-1.0.2zd).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Applicable       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-2068_3.10:libcrypto1.1_1.1.1k-r0",
              "shortDescription": {
                "text": "[CVE-2022-2068] 3.10:libcrypto1.1 1.1.1k-r0"
              },
              "help": {
                "text": "In addition to the c_rehash shell command injection identified in CVE-2022-1292, further circumstances where the c_rehash script does not properly sanitise shell metacharacters to prevent command injection were found by code review. When the CVE-2022-1292 was fixed it was not discovered that there are other places in the script where the file names of certificates being hashed were possibly passed to a command executed through the shell. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.4 (Affected 3.0.0,3.0.1,3.0.2,3.0.3). Fixed in OpenSSL 1.1.1p (Affected 1.1.1-1.1.1o). Fixed in OpenSSL 1.0.2zf (Affected 1.0.2-1.0.2ze).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Applicable       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2022-48174_3.10:busybox_1.30.1-r5",
              "shortDescription": {
                "text": "[CVE-2022-48174] 3.10:busybox 1.30.1-r5"
              },
              "help": {
                "text": "There is a stack overflow vulnerability in ash.c:6030 in busybox before 1.35. In the environment of Internet of Vehicles, this vulnerability can be executed from command to arbitrary code execution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [1.36.1-r2]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2021-36159_3.10:apk-tools_2.10.6-r0",
              "shortDescription": {
                "text": "[CVE-2021-36159] 3.10:apk-tools 2.10.6-r0"
              },
              "help": {
                "text": "libfetch before 2021-07-26, as used in apk-tools, xbps, and other products, mishandles numeric strings for the FTP and HTTP protocols. The FTP passive mode implementation allows an out-of-bounds read because strtol is used to parse the relevant numbers into address bytes. It does not check if the line ends prematurely. If it does, the for-loop condition checks for the '\\0' terminator one byte too late.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.1      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [2.10.7-r0]   |"
              },
              "properties": {
                "security-severity": "9.1"
              }
            },
            {
              "id": "CVE-2022-48174_3.10:ssl_client_1.30.1-r5",
              "shortDescription": {
                "text": "[CVE-2022-48174] 3.10:ssl_client 1.30.1-r5"
              },
              "help": {
                "text": "There is a stack overflow vulnerability in ash.c:6030 in busybox before 1.35. In the environment of Internet of Vehicles, this vulnerability can be executed from command to arbitrary code execution.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [1.36.1-r2]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2021-42384_3.10:busybox_1.30.1-r5",
              "shortDescription": {
                "text": "[CVE-2021-42384] 3.10:busybox 1.30.1-r5"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the handle_special function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-42386_3.10:busybox_1.30.1-r5",
              "shortDescription": {
                "text": "[CVE-2021-42386] 3.10:busybox 1.30.1-r5"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the nvalloc function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-42382_3.10:busybox_1.30.1-r5",
              "shortDescription": {
                "text": "[CVE-2021-42382] 3.10:busybox 1.30.1-r5"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the getvar_s function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-42378_3.10:ssl_client_1.30.1-r5",
              "shortDescription": {
                "text": "[CVE-2021-42378] 3.10:ssl_client 1.30.1-r5"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the getvar_i function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-42385_3.10:busybox_1.30.1-r5",
              "shortDescription": {
                "text": "[CVE-2021-42385] 3.10:busybox 1.30.1-r5"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the evaluate function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-42383_3.10:ssl_client_1.30.1-r5",
              "shortDescription": {
                "text": "[CVE-2021-42383] 3.10:ssl_client 1.30.1-r5"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the evaluate function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-42384_3.10:ssl_client_1.30.1-r5",
              "shortDescription": {
                "text": "[CVE-2021-42384] 3.10:ssl_client 1.30.1-r5"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the handle_special function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-42380_3.10:ssl_client_1.30.1-r5",
              "shortDescription": {
                "text": "[CVE-2021-42380] 3.10:ssl_client 1.30.1-r5"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the clrvar function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-42381_3.10:busybox_1.30.1-r5",
              "shortDescription": {
                "text": "[CVE-2021-42381] 3.10:busybox 1.30.1-r5"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the hash_init function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2022-0778_3.10:libssl1.1_1.1.1k-r0",
              "shortDescription": {
                "text": "[CVE-2022-0778] 3.10:libssl1.1 1.1.1k-r0"
              },
              "help": {
                "text": "The BN_mod_sqrt() function, which computes a modular square root, contains a bug that can cause it to loop forever for non-prime moduli. Internally this function is used when parsing certificates that contain elliptic curve public keys in compressed form or explicit elliptic curve parameters with a base point encoded in compressed form. It is possible to trigger the infinite loop by crafting a certificate that has invalid explicit curve parameters. Since certificate parsing happens prior to verification of the certificate signature, any process that parses an externally supplied certificate may thus be subject to a denial of service attack. The infinite loop can also be reached when parsing crafted private keys as they can contain explicit elliptic curve parameters. Thus vulnerable situations include: - TLS clients consuming server certificates - TLS servers consuming client certificates - Hosting providers taking certificates or private keys from customers - Certificate authorities parsing certification requests from subscribers - Anything else which parses ASN.1 elliptic curve parameters Also any other applications that use the BN_mod_sqrt() where the attacker can control the parameter values are vulnerable to this DoS issue. In the OpenSSL 1.0.2 version the public key is not parsed during initial parsing of the certificate which makes it slightly harder to trigger the infinite loop. However any operation which requires the public key from the certificate will trigger the infinite loop. In particular the attacker can use a self-signed certificate to trigger the loop during verification of the certificate signature. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0. It was addressed in the releases of 1.1.1n and 3.0.2 on the 15th March 2022. Fixed in OpenSSL 3.0.2 (Affected 3.0.0,3.0.1). Fixed in OpenSSL 1.1.1n (Affected 1.1.1-1.1.1m). Fixed in OpenSSL 1.0.2zd (Affected 1.0.2-1.0.2zc).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [3.0.2-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-42381_3.10:ssl_client_1.30.1-r5",
              "shortDescription": {
                "text": "[CVE-2021-42381] 3.10:ssl_client 1.30.1-r5"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the hash_init function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-42378_3.10:busybox_1.30.1-r5",
              "shortDescription": {
                "text": "[CVE-2021-42378] 3.10:busybox 1.30.1-r5"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the getvar_i function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-42379_3.10:busybox_1.30.1-r5",
              "shortDescription": {
                "text": "[CVE-2021-42379] 3.10:busybox 1.30.1-r5"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the next_input_file function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-42383_3.10:busybox_1.30.1-r5",
              "shortDescription": {
                "text": "[CVE-2021-42383] 3.10:busybox 1.30.1-r5"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the evaluate function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-42380_3.10:busybox_1.30.1-r5",
              "shortDescription": {
                "text": "[CVE-2021-42380] 3.10:busybox 1.30.1-r5"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the clrvar function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2022-0778_3.10:libcrypto1.1_1.1.1k-r0",
              "shortDescription": {
                "text": "[CVE-2022-0778] 3.10:libcrypto1.1 1.1.1k-r0"
              },
              "help": {
                "text": "The BN_mod_sqrt() function, which computes a modular square root, contains a bug that can cause it to loop forever for non-prime moduli. Internally this function is used when parsing certificates that contain elliptic curve public keys in compressed form or explicit elliptic curve parameters with a base point encoded in compressed form. It is possible to trigger the infinite loop by crafting a certificate that has invalid explicit curve parameters. Since certificate parsing happens prior to verification of the certificate signature, any process that parses an externally supplied certificate may thus be subject to a denial of service attack. The infinite loop can also be reached when parsing crafted private keys as they can contain explicit elliptic curve parameters. Thus vulnerable situations include: - TLS clients consuming server certificates - TLS servers consuming client certificates - Hosting providers taking certificates or private keys from customers - Certificate authorities parsing certification requests from subscribers - Anything else which parses ASN.1 elliptic curve parameters Also any other applications that use the BN_mod_sqrt() where the attacker can control the parameter values are vulnerable to this DoS issue. In the OpenSSL 1.0.2 version the public key is not parsed during initial parsing of the certificate which makes it slightly harder to trigger the infinite loop. However any operation which requires the public key from the certificate will trigger the infinite loop. In particular the attacker can use a self-signed certificate to trigger the loop during verification of the certificate signature. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0. It was addressed in the releases of 1.1.1n and 3.0.2 on the 15th March 2022. Fixed in OpenSSL 3.0.2 (Affected 3.0.0,3.0.1). Fixed in OpenSSL 1.1.1n (Affected 1.1.1-1.1.1m). Fixed in OpenSSL 1.0.2zd (Affected 1.0.2-1.0.2zc).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [3.0.2-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-42386_3.10:ssl_client_1.30.1-r5",
              "shortDescription": {
                "text": "[CVE-2021-42386] 3.10:ssl_client 1.30.1-r5"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the nvalloc function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-42382_3.10:ssl_client_1.30.1-r5",
              "shortDescription": {
                "text": "[CVE-2021-42382] 3.10:ssl_client 1.30.1-r5"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the getvar_s function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-42385_3.10:ssl_client_1.30.1-r5",
              "shortDescription": {
                "text": "[CVE-2021-42385] 3.10:ssl_client 1.30.1-r5"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the evaluate function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2021-42379_3.10:ssl_client_1.30.1-r5",
              "shortDescription": {
                "text": "[CVE-2021-42379] 3.10:ssl_client 1.30.1-r5"
              },
              "help": {
                "text": "A use-after-free in Busybox's awk applet leads to denial of service and possibly code execution when processing a crafted awk pattern in the next_input_file function",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.2      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.2"
              }
            },
            {
              "id": "CVE-2000-1254_3.10:libssl1.1_1.1.1k-r0",
              "shortDescription": {
                "text": "[CVE-2000-1254] 3.10:libssl1.1 1.1.1k-r0"
              },
              "help": {
                "text": "crypto/rsa/rsa_gen.c in OpenSSL before 0.9.6 mishandles C bitwise-shift operations that exceed the size of an expression, which makes it easier for remote attackers to defeat cryptographic protection mechanisms by leveraging improper RSA key generation on 64-bit HP-UX platforms.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-37322_3.10:libstdc++_8.3.0-r0",
              "shortDescription": {
                "text": "[CVE-2021-37322] 3.10:libstdc++ 8.3.0-r0"
              },
              "help": {
                "text": "GCC c++filt v2.26 was discovered to contain a use-after-free vulnerability via the component cplus-dem.c.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__83af67e0a01318b0d14e31ec6d7dbabe5d65ab914c3fa8a10bde09624fd7dce9.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2021-37322_3.10:libgcc_8.3.0-r0",
              "shortDescription": {
                "text": "[CVE-2021-37322] 3.10:libgcc 8.3.0-r0"
              },
              "help": {
                "text": "GCC c++filt v2.26 was discovered to contain a use-after-free vulnerability via the component cplus-dem.c.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__83af67e0a01318b0d14e31ec6d7dbabe5d65ab914c3fa8a10bde09624fd7dce9.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2000-1254_3.10:libcrypto1.1_1.1.1k-r0",
              "shortDescription": {
                "text": "[CVE-2000-1254] 3.10:libcrypto1.1 1.1.1k-r0"
              },
              "help": {
                "text": "crypto/rsa/rsa_gen.c in OpenSSL before 0.9.6 mishandles C bitwise-shift operations that exceed the size of an expression, which makes it easier for remote attackers to defeat cryptographic protection mechanisms by leveraging improper RSA key generation on 64-bit HP-UX platforms.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2023-42364_3.10:ssl_client_1.30.1-r5",
              "shortDescription": {
                "text": "[CVE-2023-42364] 3.10:ssl_client 1.30.1-r5"
              },
              "help": {
                "text": "A use-after-free vulnerability in BusyBox v.1.36.1 allows attackers to cause a denial of service via a crafted awk pattern in the awk.c evaluate function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-6129_3.10:libcrypto1.1_1.1.1k-r0",
              "shortDescription": {
                "text": "[CVE-2023-6129] 3.10:libcrypto1.1 1.1.1k-r0"
              },
              "help": {
                "text": "Issue summary: The POLY1305 MAC (message authentication code) implementation\ncontains a bug that might corrupt the internal state of applications running\non PowerPC CPU based platforms if the CPU provides vector instructions.\n\nImpact summary: If an attacker can influence whether the POLY1305 MAC\nalgorithm is used, the application state might be corrupted with various\napplication dependent consequences.\n\nThe POLY1305 MAC (message authentication code) implementation in OpenSSL for\nPowerPC CPUs restores the contents of vector registers in a different order\nthan they are saved. Thus the contents of some of these vector registers\nare corrupted when returning to the caller. The vulnerable code is used only\non newer PowerPC processors supporting the PowerISA 2.07 instructions.\n\nThe consequences of this kind of internal application state corruption can\nbe various - from no consequences, if the calling application does not\ndepend on the contents of non-volatile XMM registers at all, to the worst\nconsequences, where the attacker could get complete control of the application\nprocess. However unless the compiler uses the vector registers for storing\npointers, the most likely consequence, if any, would be an incorrect result\nof some application dependent calculations or a crash leading to a denial of\nservice.\n\nThe POLY1305 MAC algorithm is most frequently used as part of the\nCHACHA20-POLY1305 AEAD (authenticated encryption with associated data)\nalgorithm. The most common usage of this AEAD cipher is with TLS protocol\nversions 1.2 and 1.3. If this cipher is enabled on the server a malicious\nclient can influence whether this AEAD cipher is used. This implies that\nTLS server applications using OpenSSL can be potentially impacted. However\nwe are currently not aware of any concrete application that would be affected\nby this issue therefore we consider this a Low severity security issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [3.1.4-r3]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2021-42375_3.10:busybox_1.30.1-r5",
              "shortDescription": {
                "text": "[CVE-2021-42375] 3.10:busybox 1.30.1-r5"
              },
              "help": {
                "text": "An incorrect handling of a special element in Busybox's ash applet leads to denial of service when processing a crafted shell command, due to the shell mistaking specific characters for reserved characters. This may be used for DoS under rare conditions of filtered command input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42365_3.10:busybox_1.30.1-r5",
              "shortDescription": {
                "text": "[CVE-2023-42365] 3.10:busybox 1.30.1-r5"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in BusyBox v.1.36.1 via a crafted awk pattern in the awk.c copyvar function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42366_3.10:ssl_client_1.30.1-r5",
              "shortDescription": {
                "text": "[CVE-2023-42366] 3.10:ssl_client 1.30.1-r5"
              },
              "help": {
                "text": "A heap-buffer-overflow was discovered in BusyBox v.1.36.1 in the next_token function at awk.c:1159.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [1.36.1-r25]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-6129_3.10:libssl1.1_1.1.1k-r0",
              "shortDescription": {
                "text": "[CVE-2023-6129] 3.10:libssl1.1 1.1.1k-r0"
              },
              "help": {
                "text": "Issue summary: The POLY1305 MAC (message authentication code) implementation\ncontains a bug that might corrupt the internal state of applications running\non PowerPC CPU based platforms if the CPU provides vector instructions.\n\nImpact summary: If an attacker can influence whether the POLY1305 MAC\nalgorithm is used, the application state might be corrupted with various\napplication dependent consequences.\n\nThe POLY1305 MAC (message authentication code) implementation in OpenSSL for\nPowerPC CPUs restores the contents of vector registers in a different order\nthan they are saved. Thus the contents of some of these vector registers\nare corrupted when returning to the caller. The vulnerable code is used only\non newer PowerPC processors supporting the PowerISA 2.07 instructions.\n\nThe consequences of this kind of internal application state corruption can\nbe various - from no consequences, if the calling application does not\ndepend on the contents of non-volatile XMM registers at all, to the worst\nconsequences, where the attacker could get complete control of the application\nprocess. However unless the compiler uses the vector registers for storing\npointers, the most likely consequence, if any, would be an incorrect result\nof some application dependent calculations or a crash leading to a denial of\nservice.\n\nThe POLY1305 MAC algorithm is most frequently used as part of the\nCHACHA20-POLY1305 AEAD (authenticated encryption with associated data)\nalgorithm. The most common usage of this AEAD cipher is with TLS protocol\nversions 1.2 and 1.3. If this cipher is enabled on the server a malicious\nclient can influence whether this AEAD cipher is used. This implies that\nTLS server applications using OpenSSL can be potentially impacted. However\nwe are currently not aware of any concrete application that would be affected\nby this issue therefore we consider this a Low severity security issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [3.1.4-r3]   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2021-42374_3.10:busybox_1.30.1-r5",
              "shortDescription": {
                "text": "[CVE-2021-42374] 3.10:busybox 1.30.1-r5"
              },
              "help": {
                "text": "An out-of-bounds heap read in Busybox's unlzma applet leads to information leak and denial of service when crafted LZMA-compressed input is decompressed. This can be triggered by any applet/format that",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-42363_3.10:busybox_1.30.1-r5",
              "shortDescription": {
                "text": "[CVE-2023-42363] 3.10:busybox 1.30.1-r5"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in xasprintf function in xfuncs_printf.c:344 in BusyBox v.1.36.1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [1.36.1-r27]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2021-42375_3.10:ssl_client_1.30.1-r5",
              "shortDescription": {
                "text": "[CVE-2021-42375] 3.10:ssl_client 1.30.1-r5"
              },
              "help": {
                "text": "An incorrect handling of a special element in Busybox's ash applet leads to denial of service when processing a crafted shell command, due to the shell mistaking specific characters for reserved characters. This may be used for DoS under rare conditions of filtered command input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42365_3.10:ssl_client_1.30.1-r5",
              "shortDescription": {
                "text": "[CVE-2023-42365] 3.10:ssl_client 1.30.1-r5"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in BusyBox v.1.36.1 via a crafted awk pattern in the awk.c copyvar function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2021-42374_3.10:ssl_client_1.30.1-r5",
              "shortDescription": {
                "text": "[CVE-2021-42374] 3.10:ssl_client 1.30.1-r5"
              },
              "help": {
                "text": "An out-of-bounds heap read in Busybox's unlzma applet leads to information leak and denial of service when crafted LZMA-compressed input is decompressed. This can be triggered by any applet/format that",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [1.34.0-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-42363_3.10:ssl_client_1.30.1-r5",
              "shortDescription": {
                "text": "[CVE-2023-42363] 3.10:ssl_client 1.30.1-r5"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in xasprintf function in xfuncs_printf.c:344 in BusyBox v.1.36.1.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [1.36.1-r27]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42364_3.10:busybox_1.30.1-r5",
              "shortDescription": {
                "text": "[CVE-2023-42364] 3.10:busybox 1.30.1-r5"
              },
              "help": {
                "text": "A use-after-free vulnerability in BusyBox v.1.36.1 allows attackers to cause a denial of service via a crafted awk pattern in the awk.c evaluate function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42366_3.10:busybox_1.30.1-r5",
              "shortDescription": {
                "text": "[CVE-2023-42366] 3.10:busybox 1.30.1-r5"
              },
              "help": {
                "text": "A heap-buffer-overflow was discovered in BusyBox v.1.36.1 in the next_token function at awk.c:1159.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [1.36.1-r25]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2021-3826_3.10:libgcc_8.3.0-r0",
              "shortDescription": {
                "text": "[CVE-2021-3826] 3.10:libgcc 8.3.0-r0"
              },
              "help": {
                "text": "Heap/stack buffer overflow in the dlang_lname function in d-demangle.c in libiberty allows attackers to potentially cause a denial of service (segmentation fault and crash) via a crafted mangled symbol.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__83af67e0a01318b0d14e31ec6d7dbabe5d65ab914c3fa8a10bde09624fd7dce9.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2021-42376_3.10:ssl_client_1.30.1-r5",
              "shortDescription": {
                "text": "[CVE-2021-42376] 3.10:ssl_client 1.30.1-r5"
              },
              "help": {
                "text": "A NULL pointer dereference in Busybox's hush applet leads to denial of service when processing a crafted shell command, due to missing validation after a \\x03 delimiter character. This may be used for DoS under very rare conditions of filtered command input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2021-4160_3.10:libssl1.1_1.1.1k-r0",
              "shortDescription": {
                "text": "[CVE-2021-4160] 3.10:libssl1.1 1.1.1k-r0"
              },
              "help": {
                "text": "There is a carry propagation bug in the MIPS32 and MIPS64 squaring procedure. Many EC algorithms are affected, including some of the TLS 1.3 default curves. Impact was not analyzed in detail, because the pre-requisites for attack are considered unlikely and include reusing private keys. Analysis suggests that attacks against RSA and DSA as a result of this defect would be very difficult to perform and are not believed likely. Attacks against DH are considered just feasible (although very difficult) because most of the work necessary to deduce information about a private key may be performed offline. The amount of resources required for such an attack would be significant. However, for an attack on TLS to be meaningful, the server would have to share the DH private key among multiple clients, which is no longer an option since CVE-2016-0701. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0.0. It was addressed in the releases of 1.1.1m and 3.0.1 on the 15th of December 2021. For the 1.0.2 release it is addressed in git commit 6fc1aaaf3 that is available to premium support customers only. It will be made available in 1.0.2zc when it is released. The issue only affects OpenSSL on MIPS platforms. Fixed in OpenSSL 3.0.1 (Affected 3.0.0). Fixed in OpenSSL 1.1.1m (Affected 1.1.1-1.1.1l). Fixed in OpenSSL 1.0.2zc-dev (Affected 1.0.2-1.0.2zb).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2021-42376_3.10:busybox_1.30.1-r5",
              "shortDescription": {
                "text": "[CVE-2021-42376] 3.10:busybox 1.30.1-r5"
              },
              "help": {
                "text": "A NULL pointer dereference in Busybox's hush applet leads to denial of service when processing a crafted shell command, due to missing validation after a \\x03 delimiter character. This may be used for DoS under very rare conditions of filtered command input.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2021-4160_3.10:libcrypto1.1_1.1.1k-r0",
              "shortDescription": {
                "text": "[CVE-2021-4160] 3.10:libcrypto1.1 1.1.1k-r0"
              },
              "help": {
                "text": "There is a carry propagation bug in the MIPS32 and MIPS64 squaring procedure. Many EC algorithms are affected, including some of the TLS 1.3 default curves. Impact was not analyzed in detail, because the pre-requisites for attack are considered unlikely and include reusing private keys. Analysis suggests that attacks against RSA and DSA as a result of this defect would be very difficult to perform and are not believed likely. Attacks against DH are considered just feasible (although very difficult) because most of the work necessary to deduce information about a private key may be performed offline. The amount of resources required for such an attack would be significant. However, for an attack on TLS to be meaningful, the server would have to share the DH private key among multiple clients, which is no longer an option since CVE-2016-0701. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0.0. It was addressed in the releases of 1.1.1m and 3.0.1 on the 15th of December 2021. For the 1.0.2 release it is addressed in git commit 6fc1aaaf3 that is available to premium support customers only. It will be made available in 1.0.2zc when it is released. The issue only affects OpenSSL on MIPS platforms. Fixed in OpenSSL 3.0.1 (Affected 3.0.0). Fixed in OpenSSL 1.1.1m (Affected 1.1.1-1.1.1l). Fixed in OpenSSL 1.0.2zc-dev (Affected 1.0.2-1.0.2zb).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2021-3826_3.10:libstdc++_8.3.0-r0",
              "shortDescription": {
                "text": "[CVE-2021-3826] 3.10:libstdc++ 8.3.0-r0"
              },
              "help": {
                "text": "Heap/stack buffer overflow in the dlang_lname function in d-demangle.c in libiberty allows attackers to potentially cause a denial of service (segmentation fault and crash) via a crafted mangled symbol.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 6.5      | Not Covered       | `sha256__83af67e0a01318b0d14e31ec6d7dbabe5d65ab914c3fa8a10bde09624fd7dce9.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "6.5"
              }
            },
            {
              "id": "CVE-2009-3767_3.10:libcrypto1.1_1.1.1k-r0",
              "shortDescription": {
                "text": "[CVE-2009-3767] 3.10:libcrypto1.1 1.1.1k-r0"
              },
              "help": {
                "text": "libraries/libldap/tls_o.c in OpenLDAP 2.2 and 2.4, and possibly other versions, when OpenSSL is used, does not properly handle a '\\0' character in a domain name in the subject's Common Name (CN) field of an X.509 certificate, which allows man-in-the-middle attackers to spoof arbitrary SSL servers via a crafted certificate issued by a legitimate Certification Authority, a related issue to CVE-2009-2408.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2009-3767_3.10:libssl1.1_1.1.1k-r0",
              "shortDescription": {
                "text": "[CVE-2009-3767] 3.10:libssl1.1 1.1.1k-r0"
              },
              "help": {
                "text": "libraries/libldap/tls_o.c in OpenLDAP 2.2 and 2.4, and possibly other versions, when OpenSSL is used, does not properly handle a '\\0' character in a domain name in the subject's Common Name (CN) field of an X.509 certificate, which allows man-in-the-middle attackers to spoof arbitrary SSL servers via a crafted certificate issued by a legitimate Certification Authority, a related issue to CVE-2009-2408.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-1394_3.10:libssl1.1_1.1.1k-r0",
              "shortDescription": {
                "text": "[CVE-2024-1394] 3.10:libssl1.1 1.1.1k-r0"
              },
              "help": {
                "text": "A memory leak flaw was found in Golang in the RSA encrypting/decrypting code, which might lead to a resource exhaustion vulnerability using attacker-controlled inputs​. The memory leak happens in github.com/golang-fips/openssl/openssl/rsa.go#L113. The objects leaked are pkey​ and ctx​. That function uses named return parameters to free pkey​ and ctx​ if there is an error initializing the context or setting the different properties. All return statements related to error cases follow the \"return nil, nil, fail(...)\" pattern, meaning that pkey​ and ctx​ will be nil inside the deferred function that should free them.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-1394_3.10:libcrypto1.1_1.1.1k-r0",
              "shortDescription": {
                "text": "[CVE-2024-1394] 3.10:libcrypto1.1 1.1.1k-r0"
              },
              "help": {
                "text": "A memory leak flaw was found in Golang in the RSA encrypting/decrypting code, which might lead to a resource exhaustion vulnerability using attacker-controlled inputs​. The memory leak happens in github.com/golang-fips/openssl/openssl/rsa.go#L113. The objects leaked are pkey​ and ctx​. That function uses named return parameters to free pkey​ and ctx​ if there is an error initializing the context or setting the different properties. All return statements related to error cases follow the \"return nil, nil, fail(...)\" pattern, meaning that pkey​ and ctx​ will be nil inside the deferred function that should free them.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-49210_3.10:libssl1.1_1.1.1k-r0",
              "shortDescription": {
                "text": "[CVE-2023-49210] 3.10:libssl1.1 1.1.1k-r0"
              },
              "help": {
                "text": "The openssl (aka node-openssl) NPM package through 2.0.0 was characterized as \"a nonsense wrapper with no real purpose\" by its author, and accepts an opts argument that contains a verb field (used for command execution). NOTE: This vulnerability only affects products that are no longer supported by the maintainer.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2021-3711_3.10:libssl1.1_1.1.1k-r0",
              "shortDescription": {
                "text": "[CVE-2021-3711] 3.10:libssl1.1 1.1.1k-r0"
              },
              "help": {
                "text": "In order to decrypt SM2 encrypted data an application is expected to call the API function EVP_PKEY_decrypt(). Typically an application will call this function twice. The first time, on entry, the \"out\" parameter can be NULL and, on exit, the \"outlen\" parameter is populated with the buffer size required to hold the decrypted plaintext. The application can then allocate a sufficiently sized buffer and call EVP_PKEY_decrypt() again, but this time passing a non-NULL value for the \"out\" parameter. A bug in the implementation of the SM2 decryption code means that the calculation of the buffer size required to hold the plaintext returned by the first call to EVP_PKEY_decrypt() can be smaller than the actual size required by the second call. This can lead to a buffer overflow when EVP_PKEY_decrypt() is called by the application a second time with a buffer that is too small. A malicious attacker who is able present SM2 content for decryption to an application could cause attacker chosen data to overflow the buffer by up to a maximum of 62 bytes altering the contents of other data held after the buffer, possibly changing application behaviour or causing the application to crash. The location of the buffer is application dependent but is typically heap allocated. Fixed in OpenSSL 1.1.1l (Affected 1.1.1-1.1.1k).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [1.1.1l-r0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2021-3711_3.10:libcrypto1.1_1.1.1k-r0",
              "shortDescription": {
                "text": "[CVE-2021-3711] 3.10:libcrypto1.1 1.1.1k-r0"
              },
              "help": {
                "text": "In order to decrypt SM2 encrypted data an application is expected to call the API function EVP_PKEY_decrypt(). Typically an application will call this function twice. The first time, on entry, the \"out\" parameter can be NULL and, on exit, the \"outlen\" parameter is populated with the buffer size required to hold the decrypted plaintext. The application can then allocate a sufficiently sized buffer and call EVP_PKEY_decrypt() again, but this time passing a non-NULL value for the \"out\" parameter. A bug in the implementation of the SM2 decryption code means that the calculation of the buffer size required to hold the plaintext returned by the first call to EVP_PKEY_decrypt() can be smaller than the actual size required by the second call. This can lead to a buffer overflow when EVP_PKEY_decrypt() is called by the application a second time with a buffer that is too small. A malicious attacker who is able present SM2 content for decryption to an application could cause attacker chosen data to overflow the buffer by up to a maximum of 62 bytes altering the contents of other data held after the buffer, possibly changing application behaviour or causing the application to crash. The location of the buffer is application dependent but is typically heap allocated. Fixed in OpenSSL 1.1.1l (Affected 1.1.1-1.1.1k).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [1.1.1l-r0]   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2023-49210_3.10:libcrypto1.1_1.1.1k-r0",
              "shortDescription": {
                "text": "[CVE-2023-49210] 3.10:libcrypto1.1 1.1.1k-r0"
              },
              "help": {
                "text": "The openssl (aka node-openssl) NPM package through 2.0.0 was characterized as \"a nonsense wrapper with no real purpose\" by its author, and accepts an opts argument that contains a verb field (used for command execution). NOTE: This vulnerability only affects products that are no longer supported by the maintainer.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 9.8      | Not Applicable       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "9.8"
              }
            },
            {
              "id": "CVE-2016-7798_3.10:libcrypto1.1_1.1.1k-r0",
              "shortDescription": {
                "text": "[CVE-2016-7798] 3.10:libcrypto1.1 1.1.1k-r0"
              },
              "help": {
                "text": "The openssl gem for Ruby uses the same initialization vector (IV) in GCM Mode (aes-*-gcm) when the IV is set before the key, which makes it easier for context-dependent attackers to bypass the encryption protection mechanism.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2016-7798_3.10:libssl1.1_1.1.1k-r0",
              "shortDescription": {
                "text": "[CVE-2016-7798] 3.10:libssl1.1 1.1.1k-r0"
              },
              "help": {
                "text": "The openssl gem for Ruby uses the same initialization vector (IV) in GCM Mode (aes-*-gcm) when the IV is set before the key, which makes it easier for context-dependent attackers to bypass the encryption protection mechanism.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2019-15847_3.10:libgcc_8.3.0-r0",
              "shortDescription": {
                "text": "[CVE-2019-15847] 3.10:libgcc 8.3.0-r0"
              },
              "help": {
                "text": "The POWER9 backend in GNU Compiler Collection (GCC) before version 10 could optimize multiple calls of the __builtin_darn intrinsic into a single call, thus reducing the entropy of the random number generator. This occurred because a volatile operation was not specified. For example, within a single execution of a program, the output of every __builtin_darn() call may be the same.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__83af67e0a01318b0d14e31ec6d7dbabe5d65ab914c3fa8a10bde09624fd7dce9.tar `       | [9.3.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-3712_3.10:libssl1.1_1.1.1k-r0",
              "shortDescription": {
                "text": "[CVE-2021-3712] 3.10:libssl1.1 1.1.1k-r0"
              },
              "help": {
                "text": "ASN.1 strings are represented internally within OpenSSL as an ASN1_STRING structure which contains a buffer holding the string data and a field holding the buffer length. This contrasts with normal C strings which are repesented as a buffer for the string data which is terminated with a NUL (0) byte. Although not a strict requirement, ASN.1 strings that are parsed using OpenSSL's own \"d2i\" functions (and other similar parsing functions) as well as any string whose value has been set with the ASN1_STRING_set() function will additionally NUL terminate the byte array in the ASN1_STRING structure. However, it is possible for applications to directly construct valid ASN1_STRING structures which do not NUL terminate the byte array by directly setting the \"data\" and \"length\" fields in the ASN1_STRING array. This can also happen by using the ASN1_STRING_set0() function. Numerous OpenSSL functions that print ASN.1 data have been found to assume that the ASN1_STRING byte array will be NUL terminated, even though this is not guaranteed for strings that have been directly constructed. Where an application requests an ASN.1 structure to be printed, and where that ASN.1 structure contains ASN1_STRINGs that have been directly constructed by the application without NUL terminating the \"data\" field, then a read buffer overrun can occur. The same thing can also occur during name constraints processing of certificates (for example if a certificate has been directly constructed by the application instead of loading it via the OpenSSL parsing functions, and the certificate contains non NUL terminated ASN1_STRING structures). It can also occur in the X509_get1_email(), X509_REQ_get1_email() and X509_get1_ocsp() functions. If a malicious actor can cause an application to directly construct an ASN1_STRING and then process it through one of the affected OpenSSL functions then this issue could be hit. This might result in a crash (causing a Denial of Service attack). It could also result in the disclosure of private memory content...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.4      | Not Applicable       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [1.1.1l-r0]   |"
              },
              "properties": {
                "security-severity": "7.4"
              }
            },
            {
              "id": "CVE-2019-15847_3.10:libstdc++_8.3.0-r0",
              "shortDescription": {
                "text": "[CVE-2019-15847] 3.10:libstdc++ 8.3.0-r0"
              },
              "help": {
                "text": "The POWER9 backend in GNU Compiler Collection (GCC) before version 10 could optimize multiple calls of the __builtin_darn intrinsic into a single call, thus reducing the entropy of the random number generator. This occurred because a volatile operation was not specified. For example, within a single execution of a program, the output of every __builtin_darn() call may be the same.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.5      | Not Applicable       | `sha256__83af67e0a01318b0d14e31ec6d7dbabe5d65ab914c3fa8a10bde09624fd7dce9.tar `       | [9.3.0-r0]   |"
              },
              "properties": {
                "security-severity": "7.5"
              }
            },
            {
              "id": "CVE-2021-3712_3.10:libcrypto1.1_1.1.1k-r0",
              "shortDescription": {
                "text": "[CVE-2021-3712] 3.10:libcrypto1.1 1.1.1k-r0"
              },
              "help": {
                "text": "ASN.1 strings are represented internally within OpenSSL as an ASN1_STRING structure which contains a buffer holding the string data and a field holding the buffer length. This contrasts with normal C strings which are repesented as a buffer for the string data which is terminated with a NUL (0) byte. Although not a strict requirement, ASN.1 strings that are parsed using OpenSSL's own \"d2i\" functions (and other similar parsing functions) as well as any string whose value has been set with the ASN1_STRING_set() function will additionally NUL terminate the byte array in the ASN1_STRING structure. However, it is possible for applications to directly construct valid ASN1_STRING structures which do not NUL terminate the byte array by directly setting the \"data\" and \"length\" fields in the ASN1_STRING array. This can also happen by using the ASN1_STRING_set0() function. Numerous OpenSSL functions that print ASN.1 data have been found to assume that the ASN1_STRING byte array will be NUL terminated, even though this is not guaranteed for strings that have been directly constructed. Where an application requests an ASN.1 structure to be printed, and where that ASN.1 structure contains ASN1_STRINGs that have been directly constructed by the application without NUL terminating the \"data\" field, then a read buffer overrun can occur. The same thing can also occur during name constraints processing of certificates (for example if a certificate has been directly constructed by the application instead of loading it via the OpenSSL parsing functions, and the certificate contains non NUL terminated ASN1_STRING structures). It can also occur in the X509_get1_email(), X509_REQ_get1_email() and X509_get1_ocsp() functions. If a malicious actor can cause an application to directly construct an ASN1_STRING and then process it through one of the affected OpenSSL functions then this issue could be hit. This might result in a crash (causing a Denial of Service attack). It could also result in the disclosure of private memory content...",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.4      | Not Applicable       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [1.1.1l-r0]   |"
              },
              "properties": {
                "security-severity": "7.4"
              }
            },
            {
              "id": "CVE-2023-0466_3.10:libssl1.1_1.1.1k-r0",
              "shortDescription": {
                "text": "[CVE-2023-0466] 3.10:libssl1.1 1.1.1k-r0"
              },
              "help": {
                "text": "The function X509_VERIFY_PARAM_add0_policy() is documented to\nimplicitly enable the certificate policy check when doing certificate\nverification. However the implementation of the function does not\nenable the check which allows certificates with invalid or incorrect\npolicies to pass the certificate verification.\n\nAs suddenly enabling the policy check could break existing deployments it was\ndecided to keep the existing behavior of the X509_VERIFY_PARAM_add0_policy()\nfunction.\n\nInstead the applications that require OpenSSL to perform certificate\npolicy check need to use X509_VERIFY_PARAM_set1_policies() or explicitly\nenable the policy check by calling X509_VERIFY_PARAM_set_flags() with\nthe X509_V_FLAG_POLICY_CHECK flag argument.\n\nCertificate policy checks are disabled by default in OpenSSL and are not\ncommonly used by applications.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [3.0.8-r3]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-0466_3.10:libcrypto1.1_1.1.1k-r0",
              "shortDescription": {
                "text": "[CVE-2023-0466] 3.10:libcrypto1.1 1.1.1k-r0"
              },
              "help": {
                "text": "The function X509_VERIFY_PARAM_add0_policy() is documented to\nimplicitly enable the certificate policy check when doing certificate\nverification. However the implementation of the function does not\nenable the check which allows certificates with invalid or incorrect\npolicies to pass the certificate verification.\n\nAs suddenly enabling the policy check could break existing deployments it was\ndecided to keep the existing behavior of the X509_VERIFY_PARAM_add0_policy()\nfunction.\n\nInstead the applications that require OpenSSL to perform certificate\npolicy check need to use X509_VERIFY_PARAM_set1_policies() or explicitly\nenable the policy check by calling X509_VERIFY_PARAM_set_flags() with\nthe X509_V_FLAG_POLICY_CHECK flag argument.\n\nCertificate policy checks are disabled by default in OpenSSL and are not\ncommonly used by applications.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [3.0.8-r3]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-2097_3.10:libssl1.1_1.1.1k-r0",
              "shortDescription": {
                "text": "[CVE-2022-2097] 3.10:libssl1.1 1.1.1k-r0"
              },
              "help": {
                "text": "AES OCB mode for 32-bit x86 platforms using the AES-NI assembly optimised implementation will not encrypt the entirety of the data under some circumstances. This could reveal sixteen bytes of data that was preexisting in the memory that wasn't written. In the special case of \"in place\" encryption, sixteen bytes of the plaintext would be revealed. Since OpenSSL does not support OCB based cipher suites for TLS and DTLS, they are both unaffected. Fixed in OpenSSL 3.0.5 (Affected 3.0.0-3.0.4). Fixed in OpenSSL 1.1.1q (Affected 1.1.1-1.1.1p).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [3.0.5-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2022-2097_3.10:libcrypto1.1_1.1.1k-r0",
              "shortDescription": {
                "text": "[CVE-2022-2097] 3.10:libcrypto1.1 1.1.1k-r0"
              },
              "help": {
                "text": "AES OCB mode for 32-bit x86 platforms using the AES-NI assembly optimised implementation will not encrypt the entirety of the data under some circumstances. This could reveal sixteen bytes of data that was preexisting in the memory that wasn't written. In the special case of \"in place\" encryption, sixteen bytes of the plaintext would be revealed. Since OpenSSL does not support OCB based cipher suites for TLS and DTLS, they are both unaffected. Fixed in OpenSSL 3.0.5 (Affected 3.0.0-3.0.4). Fixed in OpenSSL 1.1.1q (Affected 1.1.1-1.1.1p).",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Applicable       | `sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar `       | [3.0.5-r0]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            }
          ],
          "version": "3.96.1"
        }
      },
      "results": [
        {
          "ruleId": "CVE-2022-1292_3.10:libcrypto1.1_1.1.1k-r0",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "[CVE-2022-1292] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2068_3.10:libssl1.1_1.1.1k-r0",
          "ruleIndex": 1,
          "level": "error",
          "message": {
            "text": "[CVE-2022-2068] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-1292_3.10:libssl1.1_1.1.1k-r0",
          "ruleIndex": 2,
          "level": "error",
          "message": {
            "text": "[CVE-2022-1292] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2068_3.10:libcrypto1.1_1.1.1k-r0",
          "ruleIndex": 3,
          "level": "error",
          "message": {
            "text": "[CVE-2022-2068] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-48174_3.10:busybox_1.30.1-r5",
          "ruleIndex": 4,
          "level": "error",
          "message": {
            "text": "[CVE-2022-48174] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-36159_3.10:apk-tools_2.10.6-r0",
          "ruleIndex": 5,
          "level": "error",
          "message": {
            "text": "[CVE-2021-36159] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-48174_3.10:ssl_client_1.30.1-r5",
          "ruleIndex": 6,
          "level": "error",
          "message": {
            "text": "[CVE-2022-48174] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42384_3.10:busybox_1.30.1-r5",
          "ruleIndex": 7,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42384] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42386_3.10:busybox_1.30.1-r5",
          "ruleIndex": 8,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42386] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42382_3.10:busybox_1.30.1-r5",
          "ruleIndex": 9,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42382] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42378_3.10:ssl_client_1.30.1-r5",
          "ruleIndex": 10,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42378] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42385_3.10:busybox_1.30.1-r5",
          "ruleIndex": 11,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42385] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42383_3.10:ssl_client_1.30.1-r5",
          "ruleIndex": 12,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42383] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42384_3.10:ssl_client_1.30.1-r5",
          "ruleIndex": 13,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42384] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42380_3.10:ssl_client_1.30.1-r5",
          "ruleIndex": 14,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42380] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42381_3.10:busybox_1.30.1-r5",
          "ruleIndex": 15,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42381] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-0778_3.10:libssl1.1_1.1.1k-r0",
          "ruleIndex": 16,
          "level": "error",
          "message": {
            "text": "[CVE-2022-0778] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42381_3.10:ssl_client_1.30.1-r5",
          "ruleIndex": 17,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42381] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42378_3.10:busybox_1.30.1-r5",
          "ruleIndex": 18,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42378] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42379_3.10:busybox_1.30.1-r5",
          "ruleIndex": 19,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42379] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42383_3.10:busybox_1.30.1-r5",
          "ruleIndex": 20,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42383] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42380_3.10:busybox_1.30.1-r5",
          "ruleIndex": 21,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42380] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-0778_3.10:libcrypto1.1_1.1.1k-r0",
          "ruleIndex": 22,
          "level": "error",
          "message": {
            "text": "[CVE-2022-0778] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42386_3.10:ssl_client_1.30.1-r5",
          "ruleIndex": 23,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42386] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42382_3.10:ssl_client_1.30.1-r5",
          "ruleIndex": 24,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42382] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42385_3.10:ssl_client_1.30.1-r5",
          "ruleIndex": 25,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42385] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42379_3.10:ssl_client_1.30.1-r5",
          "ruleIndex": 26,
          "level": "error",
          "message": {
            "text": "[CVE-2021-42379] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2000-1254_3.10:libssl1.1_1.1.1k-r0",
          "ruleIndex": 27,
          "level": "error",
          "message": {
            "text": "[CVE-2000-1254] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-37322_3.10:libstdc++_8.3.0-r0",
          "ruleIndex": 28,
          "level": "error",
          "message": {
            "text": "[CVE-2021-37322] sha256__83af67e0a01318b0d14e31ec6d7dbabe5d65ab914c3fa8a10bde09624fd7dce9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-37322_3.10:libgcc_8.3.0-r0",
          "ruleIndex": 29,
          "level": "error",
          "message": {
            "text": "[CVE-2021-37322] sha256__83af67e0a01318b0d14e31ec6d7dbabe5d65ab914c3fa8a10bde09624fd7dce9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2000-1254_3.10:libcrypto1.1_1.1.1k-r0",
          "ruleIndex": 30,
          "level": "error",
          "message": {
            "text": "[CVE-2000-1254] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42364_3.10:ssl_client_1.30.1-r5",
          "ruleIndex": 31,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42364] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-6129_3.10:libcrypto1.1_1.1.1k-r0",
          "ruleIndex": 32,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-6129] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42375_3.10:busybox_1.30.1-r5",
          "ruleIndex": 33,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-42375] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42365_3.10:busybox_1.30.1-r5",
          "ruleIndex": 34,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42365] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42366_3.10:ssl_client_1.30.1-r5",
          "ruleIndex": 35,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42366] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-6129_3.10:libssl1.1_1.1.1k-r0",
          "ruleIndex": 36,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-6129] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42374_3.10:busybox_1.30.1-r5",
          "ruleIndex": 37,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-42374] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42363_3.10:busybox_1.30.1-r5",
          "ruleIndex": 38,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42363] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42375_3.10:ssl_client_1.30.1-r5",
          "ruleIndex": 39,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-42375] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42365_3.10:ssl_client_1.30.1-r5",
          "ruleIndex": 40,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42365] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42374_3.10:ssl_client_1.30.1-r5",
          "ruleIndex": 41,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-42374] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42363_3.10:ssl_client_1.30.1-r5",
          "ruleIndex": 42,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42363] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42364_3.10:busybox_1.30.1-r5",
          "ruleIndex": 43,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42364] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42366_3.10:busybox_1.30.1-r5",
          "ruleIndex": 44,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42366] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3826_3.10:libgcc_8.3.0-r0",
          "ruleIndex": 45,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-3826] sha256__83af67e0a01318b0d14e31ec6d7dbabe5d65ab914c3fa8a10bde09624fd7dce9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42376_3.10:ssl_client_1.30.1-r5",
          "ruleIndex": 46,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-42376] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-4160_3.10:libssl1.1_1.1.1k-r0",
          "ruleIndex": 47,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-4160] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-42376_3.10:busybox_1.30.1-r5",
          "ruleIndex": 48,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-42376] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-4160_3.10:libcrypto1.1_1.1.1k-r0",
          "ruleIndex": 49,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-4160] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3826_3.10:libstdc++_8.3.0-r0",
          "ruleIndex": 50,
          "level": "warning",
          "message": {
            "text": "[CVE-2021-3826] sha256__83af67e0a01318b0d14e31ec6d7dbabe5d65ab914c3fa8a10bde09624fd7dce9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2009-3767_3.10:libcrypto1.1_1.1.1k-r0",
          "ruleIndex": 51,
          "level": "warning",
          "message": {
            "text": "[CVE-2009-3767] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2009-3767_3.10:libssl1.1_1.1.1k-r0",
          "ruleIndex": 52,
          "level": "warning",
          "message": {
            "text": "[CVE-2009-3767] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-1394_3.10:libssl1.1_1.1.1k-r0",
          "ruleIndex": 53,
          "level": "none",
          "message": {
            "text": "[CVE-2024-1394] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-1394_3.10:libcrypto1.1_1.1.1k-r0",
          "ruleIndex": 54,
          "level": "none",
          "message": {
            "text": "[CVE-2024-1394] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-49210_3.10:libssl1.1_1.1.1k-r0",
          "ruleIndex": 55,
          "level": "error",
          "message": {
            "text": "[CVE-2023-49210] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3711_3.10:libssl1.1_1.1.1k-r0",
          "ruleIndex": 56,
          "level": "error",
          "message": {
            "text": "[CVE-2021-3711] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3711_3.10:libcrypto1.1_1.1.1k-r0",
          "ruleIndex": 57,
          "level": "error",
          "message": {
            "text": "[CVE-2021-3711] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-49210_3.10:libcrypto1.1_1.1.1k-r0",
          "ruleIndex": 58,
          "level": "error",
          "message": {
            "text": "[CVE-2023-49210] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2016-7798_3.10:libcrypto1.1_1.1.1k-r0",
          "ruleIndex": 59,
          "level": "error",
          "message": {
            "text": "[CVE-2016-7798] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2016-7798_3.10:libssl1.1_1.1.1k-r0",
          "ruleIndex": 60,
          "level": "error",
          "message": {
            "text": "[CVE-2016-7798] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-15847_3.10:libgcc_8.3.0-r0",
          "ruleIndex": 61,
          "level": "error",
          "message": {
            "text": "[CVE-2019-15847] sha256__83af67e0a01318b0d14e31ec6d7dbabe5d65ab914c3fa8a10bde09624fd7dce9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3712_3.10:libssl1.1_1.1.1k-r0",
          "ruleIndex": 62,
          "level": "error",
          "message": {
            "text": "[CVE-2021-3712] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2019-15847_3.10:libstdc++_8.3.0-r0",
          "ruleIndex": 63,
          "level": "error",
          "message": {
            "text": "[CVE-2019-15847] sha256__83af67e0a01318b0d14e31ec6d7dbabe5d65ab914c3fa8a10bde09624fd7dce9.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2021-3712_3.10:libcrypto1.1_1.1.1k-r0",
          "ruleIndex": 64,
          "level": "error",
          "message": {
            "text": "[CVE-2021-3712] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0466_3.10:libssl1.1_1.1.1k-r0",
          "ruleIndex": 65,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-0466] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-0466_3.10:libcrypto1.1_1.1.1k-r0",
          "ruleIndex": 66,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-0466] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2097_3.10:libssl1.1_1.1.1k-r0",
          "ruleIndex": 67,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-2097] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-2097_3.10:libcrypto1.1_1.1.1k-r0",
          "ruleIndex": 68,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-2097] sha256__9fb3aa2f8b8023a4bebbf92aa567caf88e38e969ada9f0ac12643b2847391635.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://jfrog.com/help/r/jfrog-security-documentation/jfrog-advanced-security",
          "name": "JFrog Applicability Scanner",
          "rules": [
            {
              "id": "applic_CVE-2019-15847",
              "name": "CVE-2019-15847",
              "shortDescription": {
                "text": "Scanner for CVE-2019-15847"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-2097",
              "name": "CVE-2022-2097",
              "shortDescription": {
                "text": "Scanner for CVE-2022-2097"
              },
              "fullDescription": {
                "text": "The scanner checks if the vulnerable function `EVP_EncryptInit_ex` is called.\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: the system's architecture is 32bit / x86.",
                "markdown": "The scanner checks if the vulnerable function `EVP_EncryptInit_ex` is called.\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: the system's architecture is 32bit / x86."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-3711",
              "name": "CVE-2021-3711",
              "shortDescription": {
                "text": "Scanner for CVE-2021-3711"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable function `EVP_PKEY_decrypt` is called.",
                "markdown": "The scanner checks whether the vulnerable function `EVP_PKEY_decrypt` is called."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-1292",
              "name": "CVE-2022-1292",
              "shortDescription": {
                "text": "Scanner for CVE-2022-1292"
              },
              "fullDescription": {
                "text": "The scanner checks for the execution of the vulnerable `c_rehash` by searching the artifact for the vulnerable command.",
                "markdown": "The scanner checks for the execution of the vulnerable `c_rehash` by searching the artifact for the vulnerable command."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2022-2068",
              "name": "CVE-2022-2068",
              "shortDescription": {
                "text": "Scanner for CVE-2022-2068"
              },
              "fullDescription": {
                "text": "The scanner checks for the execution of the vulnerable `c_rehash` by searching the artifact for the vulnerable command.",
                "markdown": "The scanner checks for the execution of the vulnerable `c_rehash` by searching the artifact for the vulnerable command."
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-0466",
              "name": "CVE-2023-0466",
              "shortDescription": {
                "text": "Scanner for CVE-2023-0466"
              },
              "fullDescription": {
                "text": "The scanner checks whether `X509_VERIFY_PARAM_add0_policy()` is called.\n\nNote that calling `X509_VERIFY_PARAM_set_flags()` with the parameter `X509_V_FLAG_POLICY_CHECK` mitigates this vulnerability. The scanner currently does not check for that mitigation.",
                "markdown": "The scanner checks whether `X509_VERIFY_PARAM_add0_policy()` is called.\n\nNote that calling `X509_VERIFY_PARAM_set_flags()` with the parameter `X509_V_FLAG_POLICY_CHECK` mitigates this vulnerability. The scanner currently does not check for that mitigation."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2023-49210",
              "name": "CVE-2023-49210",
              "shortDescription": {
                "text": "Scanner for CVE-2023-49210"
              },
              "fullDescription": {
                "text": "The scanner checks whether the vulnerable `openssl` function is used with external input.",
                "markdown": "The scanner checks whether the vulnerable `openssl` function is used with external input."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2016-7798",
              "name": "CVE-2016-7798",
              "shortDescription": {
                "text": "Scanner for CVE-2016-7798"
              },
              "fullDescription": {
                "text": "The scanner checks if the function `OpenSSL::Cipher.new()` is called with AES gcm is as the encryption type. \nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The AES IV initialization happens before the key initialization.",
                "markdown": "The scanner checks if the function `OpenSSL::Cipher.new()` is called with AES gcm is as the encryption type. \nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The AES IV initialization happens before the key initialization."
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2021-3712",
              "name": "CVE-2021-3712",
              "shortDescription": {
                "text": "Scanner for CVE-2021-3712"
              },
              "fullDescription": {
                "text": "The scanner checks whether the `ASN1_STRING` structure is created by searching for the existence of all the functions that create the `ASN1_STRING` structure or other structures that are based on the `ASN1_STRING` structure:\n\n* ASN1_STRING_new()\nASN1_STRING_type_new()\nASN1_OCTET_STRING_new()\nASN1_BIT_STRING_new()\nASN1_INTEGER_new()\nASN1_ENUMERATED_new()\nASN1_UTF8STRING_new()\nASN1_IA5STRING_new()\nASN1_UNIVERSALSTRING_new()\nASN1_BMPSTRING_new()\nASN1_GENERALSTRING_new()\nASN1_T61STRING_new()\nASN1_VISIBLESTRING_new()\nASN1_PRINTABLESTRING_new()\nASN1_PRINTABLE_new()\nDIRECTORYSTRING_new()\nDISPLAYTEXT_new()  \nASN1_GENERALIZEDTIME_new()\nASN1_UTCTIME_new()\nASN1_TIME_new()",
                "markdown": "The scanner checks whether the `ASN1_STRING` structure is created by searching for the existence of all the functions that create the `ASN1_STRING` structure or other structures that are based on the `ASN1_STRING` structure:\n\n* ASN1_STRING_new()\nASN1_STRING_type_new()\nASN1_OCTET_STRING_new()\nASN1_BIT_STRING_new()\nASN1_INTEGER_new()\nASN1_ENUMERATED_new()\nASN1_UTF8STRING_new()\nASN1_IA5STRING_new()\nASN1_UNIVERSALSTRING_new()\nASN1_BMPSTRING_new()\nASN1_GENERALSTRING_new()\nASN1_T61STRING_new()\nASN1_VISIBLESTRING_new()\nASN1_PRINTABLESTRING_new()\nASN1_PRINTABLE_new()\nDIRECTORYSTRING_new()\nDISPLAYTEXT_new()  \nASN1_GENERALIZEDTIME_new()\nASN1_UTCTIME_new()\nASN1_TIME_new()"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive",
                "security-severity": "6.9"
              }
            },
            {
              "id": "applic_CVE-2009-3767",
              "name": "CVE-2009-3767",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2009-3767"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-1394",
              "name": "CVE-2024-1394",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-1394"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-3826",
              "name": "CVE-2021-3826",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-3826"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-4160",
              "name": "CVE-2021-4160",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-4160"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42380",
              "name": "CVE-2021-42380",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42380"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42384",
              "name": "CVE-2021-42384",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42384"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-6129",
              "name": "CVE-2023-6129",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-6129"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-37322",
              "name": "CVE-2021-37322",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-37322"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42365",
              "name": "CVE-2023-42365",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42365"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42363",
              "name": "CVE-2023-42363",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42363"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-36159",
              "name": "CVE-2021-36159",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-36159"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42374",
              "name": "CVE-2021-42374",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42374"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42375",
              "name": "CVE-2021-42375",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42375"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42379",
              "name": "CVE-2021-42379",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42379"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42364",
              "name": "CVE-2023-42364",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42364"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42376",
              "name": "CVE-2021-42376",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42376"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42386",
              "name": "CVE-2021-42386",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42386"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-0778",
              "name": "CVE-2022-0778",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-0778"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42385",
              "name": "CVE-2021-42385",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42385"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-48174",
              "name": "CVE-2022-48174",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-48174"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2000-1254",
              "name": "CVE-2000-1254",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2000-1254"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42381",
              "name": "CVE-2021-42381",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42381"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42366",
              "name": "CVE-2023-42366",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42366"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42382",
              "name": "CVE-2021-42382",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42382"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42383",
              "name": "CVE-2021-42383",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42383"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2021-42378",
              "name": "CVE-2021-42378",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2021-42378"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            }
          ],
          "version": "1.0"
        }
      },
      "invocations": [
        {
          "arguments": [
            "/root/.jfrog/dependencies/analyzerManager/jas_scanner/jas_scanner",
            "scan",
            "/tmp/jfrog.cli.temp.-1718858275-4247710105/config.yaml"
          ],
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "/tmp/jfrog.cli.temp.-1718858251-3787569613/image.tar"
          }
        }
      ],
      "results": [
        {
          "ruleId": "applic_CVE-2019-15847",
          "kind": "pass",
          "message": {
            "text": ""
          }
        },
        {
          "ruleId": "applic_CVE-2022-2097",
          "kind": "pass",
          "message": {
            "text": "The scanner checks if the vulnerable function `EVP_EncryptInit_ex` is called.\n\nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: the system's architecture is 32bit / x86."
          }
        },
        {
          "ruleId": "applic_CVE-2021-3711",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable function `EVP_PKEY_decrypt` is called."
          }
        },
        {
          "ruleId": "applic_CVE-2022-1292",
          "message": {
            "text": "The vulnerable string 'c_rehash' was found in the image"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///etc/ca-certificates/update.d/certhash"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2022-2068",
          "message": {
            "text": "The vulnerable string 'c_rehash' was found in the image"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///etc/ca-certificates/update.d/certhash"
                }
              }
            }
          ]
        },
        {
          "ruleId": "applic_CVE-2023-0466",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether `X509_VERIFY_PARAM_add0_policy()` is called.\n\nNote that calling `X509_VERIFY_PARAM_set_flags()` with the parameter `X509_V_FLAG_POLICY_CHECK` mitigates this vulnerability. The scanner currently does not check for that mitigation."
          }
        },
        {
          "ruleId": "applic_CVE-2023-49210",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the vulnerable `openssl` function is used with external input."
          }
        },
        {
          "ruleId": "applic_CVE-2016-7798",
          "kind": "pass",
          "message": {
            "text": "The scanner checks if the function `OpenSSL::Cipher.new()` is called with AES gcm is as the encryption type. \nFor determining the applicability of this CVE, an additional condition (that the scanner currently does not check) should be verified: The AES IV initialization happens before the key initialization."
          }
        },
        {
          "ruleId": "applic_CVE-2021-3712",
          "kind": "pass",
          "message": {
            "text": "The scanner checks whether the `ASN1_STRING` structure is created by searching for the existence of all the functions that create the `ASN1_STRING` structure or other structures that are based on the `ASN1_STRING` structure:\n\n* ASN1_STRING_new()\nASN1_STRING_type_new()\nASN1_OCTET_STRING_new()\nASN1_BIT_STRING_new()\nASN1_INTEGER_new()\nASN1_ENUMERATED_new()\nASN1_UTF8STRING_new()\nASN1_IA5STRING_new()\nASN1_UNIVERSALSTRING_new()\nASN1_BMPSTRING_new()\nASN1_GENERALSTRING_new()\nASN1_T61STRING_new()\nASN1_VISIBLESTRING_new()\nASN1_PRINTABLESTRING_new()\nASN1_PRINTABLE_new()\nDIRECTORYSTRING_new()\nDISPLAYTEXT_new()  \nASN1_GENERALIZEDTIME_new()\nASN1_UTCTIME_new()\nASN1_TIME_new()"
          }
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://jfrog.com/help/r/jfrog-security-documentation/jfrog-advanced-security",
          "name": "JFrog Secrets scanner",
          "rules": [
            {
              "id": "REQ.SECRET.GENERIC.TEXT",
              "name": "REQ.SECRET.GENERIC.TEXT",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.TEXT"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "REQ.SECRET.GENERIC.CODE",
              "name": "REQ.SECRET.GENERIC.CODE",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.CODE"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private"
              }
            },
            {
              "id": "REQ.SECRET.GENERIC.URL",
              "name": "REQ.SECRET.GENERIC.URL",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.URL"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive"
              }
            },
            {
              "id": "REQ.SECRET.KEYS",
              "name": "REQ.SECRET.KEYS",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.KEYS"
              },
              "fullDescription": {
                "text": "\nStoring an API key in the image could lead to several risks.\n\nIf the key is associated with a wide scope of privileges, attackers could extract it from a single image or firmware and use it maliciously to attack many targets. For example, if the embedded key allows querying/modifying data for all cloud user accounts, without per-user authentication, the attackers who extract it would gain access to system-wide data.\n\nIf the cloud/SaaS provider bills by key usage - for example, every million queries cost the key's owner a fixed sum of money - attackers could use the keys for their own purposes (or just as a form of vandalism), incurring a large cost to the legitimate user or operator.\n\n## Best practices\n\nUse narrow scopes for stored API keys. As much as possible, API keys should be unique per host and require additional authentication with the user's individual credentials for any sensitive actions.\n\nAvoid placing keys whose use incurs costs directly in the image. Store the key with any software or hardware protection available on the host for key storage (such as operating system key-stores, hardware cryptographic storage mechanisms or cloud-managed secure storage services such as [AWS KMS](https://aws.amazon.com/kms/)).\n\nTokens that were detected as exposed should be revoked and replaced -\n\n* [AWS Key Revocation](https://aws.amazon.com/premiumsupport/knowledge-center/delete-access-key/#:~:text=If%20you%20see%20a%20warning,the%20confirmation%20box%2C%20choose%20Deactivate.)\n* [GCP Key Revocation](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/CloudIAM/delete-api-keys.html)\n* [Azure Key Revocation](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops\u0026tabs=Windows#revoke-a-pat)\n* [GitHub Key Revocation](https://docs.github.com/en/rest/apps/oauth-applications#delete-an-app-authorization)\n",
                "markdown": "\nStoring an API key in the image could lead to several risks.\n\nIf the key is associated with a wide scope of privileges, attackers could extract it from a single image or firmware and use it maliciously to attack many targets. For example, if the embedded key allows querying/modifying data for all cloud user accounts, without per-user authentication, the attackers who extract it would gain access to system-wide data.\n\nIf the cloud/SaaS provider bills by key usage - for example, every million queries cost the key's owner a fixed sum of money - attackers could use the keys for their own purposes (or just as a form of vandalism), incurring a large cost to the legitimate user or operator.\n\n## Best practices\n\nUse narrow scopes for stored API keys. As much as possible, API keys should be unique per host and require additional authentication with the user's individual credentials for any sensitive actions.\n\nAvoid placing keys whose use incurs costs directly in the image. Store the key with any software or hardware protection available on the host for key storage (such as operating system key-stores, hardware cryptographic storage mechanisms or cloud-managed secure storage services such as [AWS KMS](https://aws.amazon.com/kms/)).\n\nTokens that were detected as exposed should be revoked and replaced -\n\n* [AWS Key Revocation](https://aws.amazon.com/premiumsupport/knowledge-center/delete-access-key/#:~:text=If%20you%20see%20a%20warning,the%20confirmation%20box%2C%20choose%20Deactivate.)\n* [GCP Key Revocation](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/CloudIAM/delete-api-keys.html)\n* [Azure Key Revocation](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops\u0026tabs=Windows#revoke-a-pat)\n* [GitHub Key Revocation](https://docs.github.com/en/rest/apps/oauth-applications#delete-an-app-authorization)\n"
              },
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private"
              }
            }
          ],
          "version": "1.0"
        }
      },
      "invocations": [
        {
          "arguments": [
            "/root/.jfrog/dependencies/analyzerManager/jas_scanner/jas_scanner",
            "scan",
            "/tmp/jfrog.cli.temp.-1718858275-4247710105/config.yaml"
          ],
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "/tmp/jfrog.cli.temp.-1718858251-3787569613/image.tar"
          }
        }
      ],
      "results": [
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp55dcgs9p/unpacked/filesystem/blobs/sha256/3ffb254ca337dbe23212ec04210d653736fa3e6ad9d10433df3a76498072a071/opt/ts3server/doc/privilegekey_guide.txt"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 0,
                  "endLine": 90,
                  "endColumn": 0,
                  "snippet": {
                    "text": "tok************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp55dcgs9p/unpacked/filesystem/blobs/sha256/3ffb254ca337dbe23212ec04210d653736fa3e6ad9d10433df3a76498072a071/opt/ts3server/serverquerydocs/apikeyadd.txt"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 2,
                  "endLine": 19,
                  "endColumn": 2,
                  "snippet": {
                    "text": "api************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp55dcgs9p/unpacked/filesystem/blobs/sha256/3ffb254ca337dbe23212ec04210d653736fa3e6ad9d10433df3a76498072a071/opt/ts3server/serverquerydocs/permreset.txt"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 2,
                  "endLine": 14,
                  "endColumn": 2,
                  "snippet": {
                    "text": "tok************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp55dcgs9p/unpacked/filesystem/blobs/sha256/3ffb254ca337dbe23212ec04210d653736fa3e6ad9d10433df3a76498072a071/opt/ts3server/serverquerydocs/privilegekeyadd.txt"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 2,
                  "endLine": 29,
                  "endColumn": 2,
                  "snippet": {
                    "text": "tok************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp55dcgs9p/unpacked/filesystem/blobs/sha256/3ffb254ca337dbe23212ec04210d653736fa3e6ad9d10433df3a76498072a071/opt/ts3server/serverquerydocs/privilegekeydelete.txt"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 21,
                  "endLine": 13,
                  "endColumn": 21,
                  "snippet": {
                    "text": "tok************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp55dcgs9p/unpacked/filesystem/blobs/sha256/3ffb254ca337dbe23212ec04210d653736fa3e6ad9d10433df3a76498072a071/opt/ts3server/serverquerydocs/privilegekeyuse.txt"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 18,
                  "snippet": {
                    "text": "tok************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp55dcgs9p/unpacked/filesystem/blobs/sha256/3ffb254ca337dbe23212ec04210d653736fa3e6ad9d10433df3a76498072a071/opt/ts3server/serverquerydocs/queryloginadd.txt"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 40,
                  "endLine": 19,
                  "endColumn": 40,
                  "snippet": {
                    "text": "cli************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp55dcgs9p/unpacked/filesystem/blobs/sha256/3ffb254ca337dbe23212ec04210d653736fa3e6ad9d10433df3a76498072a071/opt/ts3server/serverquerydocs/queryloginadd.txt"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 41,
                  "endLine": 24,
                  "endColumn": 41,
                  "snippet": {
                    "text": "cli************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp55dcgs9p/unpacked/filesystem/blobs/sha256/3ffb254ca337dbe23212ec04210d653736fa3e6ad9d10433df3a76498072a071/opt/ts3server/serverquerydocs/servercreate.txt"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 32,
                  "endLine": 38,
                  "endColumn": 32,
                  "snippet": {
                    "text": "tok************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp55dcgs9p/unpacked/filesystem/blobs/sha256/3ffb254ca337dbe23212ec04210d653736fa3e6ad9d10433df3a76498072a071/opt/ts3server/serverquerydocs/tokenadd.txt"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 2,
                  "endLine": 18,
                  "endColumn": 2,
                  "snippet": {
                    "text": "tok************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp55dcgs9p/unpacked/filesystem/blobs/sha256/3ffb254ca337dbe23212ec04210d653736fa3e6ad9d10433df3a76498072a071/opt/ts3server/serverquerydocs/tokendelete.txt"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 14,
                  "endLine": 12,
                  "endColumn": 14,
                  "snippet": {
                    "text": "tok************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmp55dcgs9p/unpacked/filesystem/blobs/sha256/3ffb254ca337dbe23212ec04210d653736fa3e6ad9d10433df3a76498072a071/opt/ts3server/serverquerydocs/tokenuse.txt"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 11,
                  "endLine": 9,
                  "endColumn": 11,
                  "snippet": {
                    "text": "tok************"
                  }
                }
              }
            }
          ]
        }
      ]
    }
  ]
}
