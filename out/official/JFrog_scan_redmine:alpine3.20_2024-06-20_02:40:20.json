{
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "informationUri": "https://docs.jfrog-applications.jfrog.io/jfrog-security-features/sca",
          "name": "JFrog Xray SCA",
          "rules": [
            {
              "id": "CVE-2018-20225_pip_24.0",
              "shortDescription": {
                "text": "[CVE-2018-20225] pip 24.0"
              },
              "help": {
                "text": "An issue was discovered in pip (all versions) because it installs the version with the highest version number, even if the user had intended to obtain a private package from a private index. This only affects use of the --extra-index-url option, and exploitation requires that the package does not already exist in the public index (and thus the attacker can put the package there with an arbitrary version number). NOTE: it has been reported that this is intended functionality and the user is responsible for using --extra-index-url securely",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 7.8      | Not Covered       | `sha256__a7ac7388e4f112d28614807a69bc4d837e57edd69b9cd10ce61f9b807a866610.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "7.8"
              }
            },
            {
              "id": "CVE-2023-42365_3.20:ssl_client_1.36.1-r28",
              "shortDescription": {
                "text": "[CVE-2023-42365] 3.20:ssl_client 1.36.1-r28"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in BusyBox v.1.36.1 via a crafted awk pattern in the awk.c copyvar function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__02f2bcb26af5ea6d185dcf509dc795746d907ae10c53918b6944ac85447a0c72.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42365_3.20:busybox_1.36.1-r28",
              "shortDescription": {
                "text": "[CVE-2023-42365] 3.20:busybox 1.36.1-r28"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in BusyBox v.1.36.1 via a crafted awk pattern in the awk.c copyvar function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__02f2bcb26af5ea6d185dcf509dc795746d907ae10c53918b6944ac85447a0c72.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42364_3.20:busybox-binsh_1.36.1-r28",
              "shortDescription": {
                "text": "[CVE-2023-42364] 3.20:busybox-binsh 1.36.1-r28"
              },
              "help": {
                "text": "A use-after-free vulnerability in BusyBox v.1.36.1 allows attackers to cause a denial of service via a crafted awk pattern in the awk.c evaluate function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__02f2bcb26af5ea6d185dcf509dc795746d907ae10c53918b6944ac85447a0c72.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2024-37891_urllib3_1.26.18",
              "shortDescription": {
                "text": "[CVE-2024-37891] urllib3 1.26.18"
              },
              "help": {
                "text": "urllib3 is a user-friendly HTTP client library for Python. When using urllib3's proxy support with `ProxyManager`, the `Proxy-Authorization` header is only sent to the configured proxy, as expected. However, when sending HTTP requests *without* using urllib3's proxy support, it's possible to accidentally configure the `Proxy-Authorization` header even though it won't have any effect as the request is not using a forwarding proxy or a tunneling proxy. In those cases, urllib3 doesn't treat the `Proxy-Authorization` HTTP header as one carrying authentication material and thus doesn't strip the header on cross-origin redirects. Because this is a highly unlikely scenario, we believe the severity of this vulnerability is low for almost all users. Out of an abundance of caution urllib3 will automatically strip the `Proxy-Authorization` header during cross-origin redirects to avoid the small chance that users are doing this on accident. Users should use urllib3's proxy support or disable automatic redirects to achieve safe processing of the `Proxy-Authorization` header, but we still decided to strip the header by default in order to further protect users who aren't using the correct approach. We believe the number of usages affected by this advisory is low. It requires all of the following to be true to be exploited: 1. Setting the `Proxy-Authorization` header without using urllib3's built-in proxy support. 2. Not disabling HTTP redirects. 3. Either not using an HTTPS origin server or for the proxy or target origin to redirect to a malicious origin. Users are advised to update to either version 1.26.19 or version 2.2.2. Users unable to upgrade may use the `Proxy-Authorization` header with urllib3's `ProxyManager`, disable HTTP redirects using `redirects=False` when sending requests, or not user the `Proxy-Authorization` header as mitigations.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 4.4      | Not Covered       | `sha256__a7ac7388e4f112d28614807a69bc4d837e57edd69b9cd10ce61f9b807a866610.tar `       | [1.26.19], [2.2.2]   |"
              },
              "properties": {
                "security-severity": "4.4"
              }
            },
            {
              "id": "CVE-2023-42364_3.20:busybox_1.36.1-r28",
              "shortDescription": {
                "text": "[CVE-2023-42364] 3.20:busybox 1.36.1-r28"
              },
              "help": {
                "text": "A use-after-free vulnerability in BusyBox v.1.36.1 allows attackers to cause a denial of service via a crafted awk pattern in the awk.c evaluate function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__02f2bcb26af5ea6d185dcf509dc795746d907ae10c53918b6944ac85447a0c72.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2023-42364_3.20:ssl_client_1.36.1-r28",
              "shortDescription": {
                "text": "[CVE-2023-42364] 3.20:ssl_client 1.36.1-r28"
              },
              "help": {
                "text": "A use-after-free vulnerability in BusyBox v.1.36.1 allows attackers to cause a denial of service via a crafted awk pattern in the awk.c evaluate function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__02f2bcb26af5ea6d185dcf509dc795746d907ae10c53918b6944ac85447a0c72.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2024-35176_rexml_3.2.5",
              "shortDescription": {
                "text": "[CVE-2024-35176] rexml 3.2.5"
              },
              "help": {
                "text": "REXML is an XML toolkit for Ruby. The REXML gem before 3.2.6 has a denial of service vulnerability when it parses an XML that has many `\u003c`s in an attribute value. Those who need to parse untrusted XMLs may be impacted to this vulnerability. The REXML gem 3.2.7 or later include the patch to fix this vulnerability. As a workaround, don't parse untrusted XMLs.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.3      | Not Covered       | `sha256__98abec8bf14dd995305525f19414ac095302e3a5adc8e12d6f2a04debca43f9f.tar `       | [3.2.7]   |"
              },
              "properties": {
                "security-severity": "5.3"
              }
            },
            {
              "id": "CVE-2023-42365_3.20:busybox-binsh_1.36.1-r28",
              "shortDescription": {
                "text": "[CVE-2023-42365] 3.20:busybox-binsh 1.36.1-r28"
              },
              "help": {
                "text": "A use-after-free vulnerability was discovered in BusyBox v.1.36.1 via a crafted awk pattern in the awk.c copyvar function.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.5      | Not Covered       | `sha256__02f2bcb26af5ea6d185dcf509dc795746d907ae10c53918b6944ac85447a0c72.tar `       | [1.36.1-r29]   |"
              },
              "properties": {
                "security-severity": "5.5"
              }
            },
            {
              "id": "CVE-2022-3704_actionpack_6.1.7.8",
              "shortDescription": {
                "text": "[CVE-2022-3704] actionpack 6.1.7.8"
              },
              "help": {
                "text": "A vulnerability classified as problematic has been found in Ruby on Rails. This affects an unknown part of the file actionpack/lib/action_dispatch/middleware/templates/routes/_table.html.erb. The manipulation leads to cross site scripting. It is possible to initiate the attack remotely. The real existence of this vulnerability is still doubted at the moment. The name of the patch is be177e4566747b73ff63fd5f529fab564e475ed4. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-212319. NOTE: Maintainer declares that there isn’t a valid attack vector. The issue was wrongly reported as a security vulnerability by a non-member of the Rails team.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.4      | Not Covered       | `sha256__46a7d5129b0dd495a6a733edae8f54ed628ea86d5e96fb35d8ea8dcaaa180324.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.4"
              }
            },
            {
              "id": "CVE-2023-26112_configobj_5.0.8",
              "shortDescription": {
                "text": "[CVE-2023-26112] configobj 5.0.8"
              },
              "help": {
                "text": "All versions of the package configobj are vulnerable to Regular Expression Denial of Service (ReDoS) via the validate function, using (.+?)\\((.*)\\).\r\r**Note:** This is only exploitable in the case of a developer, putting the offending value in a server side configuration file.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 5.9      | Not Covered       | `sha256__a7ac7388e4f112d28614807a69bc4d837e57edd69b9cd10ce61f9b807a866610.tar `       | No fix available   |"
              },
              "properties": {
                "security-severity": "5.9"
              }
            },
            {
              "id": "CVE-2024-34459_nokogiri_1.15.6",
              "shortDescription": {
                "text": "[CVE-2024-34459] nokogiri 1.15.6"
              },
              "help": {
                "text": "An issue was discovered in xmllint (from libxml2) before 2.11.8 and 2.12.x before 2.12.7. Formatting error messages with xmllint --htmlout can result in a buffer over-read in xmlHTMLPrintFileContext in xmllint.c.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__46a7d5129b0dd495a6a733edae8f54ed628ea86d5e96fb35d8ea8dcaaa180324.tar `       | [1.16.5]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2023-52722_3.20:ghostscript_10.02.1-r0",
              "shortDescription": {
                "text": "[CVE-2023-52722] 3.20:ghostscript 10.02.1-r0"
              },
              "help": {
                "text": "An issue was discovered in Artifex Ghostscript through 10.01.0. psi/zmisc1.c, when SAFER mode is used, allows eexec seeds other than the Type 1 standard.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__a7ac7388e4f112d28614807a69bc4d837e57edd69b9cd10ce61f9b807a866610.tar `       | [10.03.1-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            },
            {
              "id": "CVE-2024-35235_3.20:cups-libs_2.4.8-r0",
              "shortDescription": {
                "text": "[CVE-2024-35235] 3.20:cups-libs 2.4.8-r0"
              },
              "help": {
                "text": "OpenPrinting CUPS is an open source printing system for Linux and other Unix-like operating systems. In versions 2.4.8 and earlier, when starting the cupsd server with a Listen configuration item pointing to a symbolic link, the cupsd process can be caused to perform an arbitrary chmod of the provided argument, providing world-writable access to the target. Given that cupsd is often running as root, this can result in the change of permission of any user or system files to be world writable. Given the aforementioned Ubuntu AppArmor context, on such systems this vulnerability is limited to those files modifiable by the cupsd process. In that specific case it was found to be possible to turn the configuration of the Listen argument into full control over the cupsd.conf and cups-files.conf configuration files. By later setting the User and Group arguments in cups-files.conf, and printing with a printer configured by PPD with a `FoomaticRIPCommandLine` argument, arbitrary user and group (not root) command execution could be achieved, which can further be used on Ubuntu systems to achieve full root command execution. Commit ff1f8a623e090dee8a8aadf12a6a4b25efac143d contains a patch for the issue.",
                "markdown": "| Severity Score | Contextual Analysis | Direct Dependencies | Fixed Versions     |\n|  :---:  |  :---:  |  :---:  |  :---:  |\n| 0.0      | Not Covered       | `sha256__a7ac7388e4f112d28614807a69bc4d837e57edd69b9cd10ce61f9b807a866610.tar `       | [2.4.9-r0]   |"
              },
              "properties": {
                "security-severity": "0.0"
              }
            }
          ],
          "version": "3.96.1"
        }
      },
      "results": [
        {
          "ruleId": "CVE-2018-20225_pip_24.0",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "[CVE-2018-20225] sha256__a7ac7388e4f112d28614807a69bc4d837e57edd69b9cd10ce61f9b807a866610.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42365_3.20:ssl_client_1.36.1-r28",
          "ruleIndex": 1,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42365] sha256__02f2bcb26af5ea6d185dcf509dc795746d907ae10c53918b6944ac85447a0c72.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42365_3.20:busybox_1.36.1-r28",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42365] sha256__02f2bcb26af5ea6d185dcf509dc795746d907ae10c53918b6944ac85447a0c72.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42364_3.20:busybox-binsh_1.36.1-r28",
          "ruleIndex": 3,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42364] sha256__02f2bcb26af5ea6d185dcf509dc795746d907ae10c53918b6944ac85447a0c72.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-37891_urllib3_1.26.18",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-37891] sha256__a7ac7388e4f112d28614807a69bc4d837e57edd69b9cd10ce61f9b807a866610.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42364_3.20:busybox_1.36.1-r28",
          "ruleIndex": 5,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42364] sha256__02f2bcb26af5ea6d185dcf509dc795746d907ae10c53918b6944ac85447a0c72.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42364_3.20:ssl_client_1.36.1-r28",
          "ruleIndex": 6,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42364] sha256__02f2bcb26af5ea6d185dcf509dc795746d907ae10c53918b6944ac85447a0c72.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-35176_rexml_3.2.5",
          "ruleIndex": 7,
          "level": "warning",
          "message": {
            "text": "[CVE-2024-35176] sha256__98abec8bf14dd995305525f19414ac095302e3a5adc8e12d6f2a04debca43f9f.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-42365_3.20:busybox-binsh_1.36.1-r28",
          "ruleIndex": 8,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-42365] sha256__02f2bcb26af5ea6d185dcf509dc795746d907ae10c53918b6944ac85447a0c72.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2022-3704_actionpack_6.1.7.8",
          "ruleIndex": 9,
          "level": "warning",
          "message": {
            "text": "[CVE-2022-3704] sha256__46a7d5129b0dd495a6a733edae8f54ed628ea86d5e96fb35d8ea8dcaaa180324.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-26112_configobj_5.0.8",
          "ruleIndex": 10,
          "level": "warning",
          "message": {
            "text": "[CVE-2023-26112] sha256__a7ac7388e4f112d28614807a69bc4d837e57edd69b9cd10ce61f9b807a866610.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-34459_nokogiri_1.15.6",
          "ruleIndex": 11,
          "level": "note",
          "message": {
            "text": "[CVE-2024-34459] sha256__46a7d5129b0dd495a6a733edae8f54ed628ea86d5e96fb35d8ea8dcaaa180324.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-52722_3.20:ghostscript_10.02.1-r0",
          "ruleIndex": 12,
          "level": "none",
          "message": {
            "text": "[CVE-2023-52722] sha256__a7ac7388e4f112d28614807a69bc4d837e57edd69b9cd10ce61f9b807a866610.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-35235_3.20:cups-libs_2.4.8-r0",
          "ruleIndex": 13,
          "level": "none",
          "message": {
            "text": "[CVE-2024-35235] sha256__a7ac7388e4f112d28614807a69bc4d837e57edd69b9cd10ce61f9b807a866610.tar "
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file://Package-Descriptor"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://jfrog.com/help/r/jfrog-security-documentation/jfrog-advanced-security",
          "name": "JFrog Applicability Scanner",
          "rules": [
            {
              "id": "applic_CVE-2023-42365",
              "name": "CVE-2023-42365",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42365"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-34459",
              "name": "CVE-2024-34459",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-34459"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-42364",
              "name": "CVE-2023-42364",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-42364"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2018-20225",
              "name": "CVE-2018-20225",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2018-20225"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-37891",
              "name": "CVE-2024-37891",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-37891"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-35235",
              "name": "CVE-2024-35235",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-35235"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-26112",
              "name": "CVE-2023-26112",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-26112"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2023-52722",
              "name": "CVE-2023-52722",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2023-52722"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2024-35176",
              "name": "CVE-2024-35176",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2024-35176"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            },
            {
              "id": "applic_CVE-2022-3704",
              "name": "CVE-2022-3704",
              "shortDescription": {
                "text": "Scanner for uncovered CVE-2022-3704"
              },
              "fullDescription": {
                "text": "",
                "markdown": ""
              },
              "properties": {
                "applicability": "not_covered"
              }
            }
          ],
          "version": "1.0"
        }
      },
      "invocations": [
        {
          "arguments": [
            "/root/.jfrog/dependencies/analyzerManager/jas_scanner/jas_scanner",
            "scan",
            "/tmp/jfrog.cli.temp.-1718851314-425251684/config.yaml"
          ],
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "/tmp/jfrog.cli.temp.-1718851220-2253079487/image.tar"
          }
        }
      ],
      "results": []
    },
    {
      "tool": {
        "driver": {
          "informationUri": "https://jfrog.com/help/r/jfrog-security-documentation/jfrog-advanced-security",
          "name": "JFrog Secrets scanner",
          "rules": [
            {
              "id": "REQ.SECRET.GENERIC.TEXT",
              "name": "REQ.SECRET.GENERIC.TEXT",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.TEXT"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "REQ.SECRET.GENERIC.CODE",
              "name": "REQ.SECRET.GENERIC.CODE",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.CODE"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "applicable",
                "conclusion": "negative",
                "security-severity": "6.9"
              }
            },
            {
              "id": "REQ.SECRET.GENERIC.URL",
              "name": "REQ.SECRET.GENERIC.URL",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.GENERIC.URL"
              },
              "fullDescription": {
                "text": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n",
                "markdown": "Storing hardcoded secrets in your source code or binary artifact could lead to several risks.\n\nIf the secret is associated with a wide scope of privileges, attackers could extract it from the source code or binary artifact and use it maliciously to attack many targets. For example, if the hardcoded password gives high-privilege access to an AWS account, the attackers may be able to query/modify company-wide sensitive data without per-user authentication.\n\n## Best practices\n\nUse safe storage when storing high-privilege secrets such as passwords and tokens, for example -\n\n* ### Environment Variables\n\nEnvironment variables are set outside of the application code, and can be dynamically passed to the application only when needed, for example -\n`SECRET_VAR=MySecret ./my_application`\nThis way, `MySecret` does not have to be hardcoded into `my_application`.\n\nNote that if your entire binary artifact is published (ex. a Docker container published to Docker Hub), the value for the environment variable must not be stored in the artifact itself (ex. inside the `Dockerfile` or one of the container's files) but rather must be passed dynamically, for example in the `docker run` call as an argument.\n\n* ### Secret management services\n\nExternal vendors offer cloud-based secret management services, that provide proper access control to each secret. The given access to each secret can be dynamically modified or even revoked. Some examples include -\n\n* [Hashicorp Vault](https://www.vaultproject.io)\n* [AWS KMS](https://aws.amazon.com/kms) (Key Management Service)\n* [Google Cloud KMS](https://cloud.google.com/security-key-management)\n\n## Least-privilege principle\n\nStoring a secret in a hardcoded manner can be made safer, by making sure the secret grants the least amount of privilege as needed by the application.\nFor example - if the application needs to read a specific table from a specific database, and the secret grants access to perform this operation **only** (meaning - no access to other tables, no write access at all) then the damage from any secret leaks is mitigated.\nThat being said, it is still not recommended to store secrets in a hardcoded manner, since this type of storage does not offer any way to revoke or moderate the usage of the secret.\n"
              },
              "properties": {
                "applicability": "not_applicable",
                "conclusion": "positive"
              }
            },
            {
              "id": "REQ.SECRET.KEYS",
              "name": "REQ.SECRET.KEYS",
              "shortDescription": {
                "text": "Scanner for REQ.SECRET.KEYS"
              },
              "fullDescription": {
                "text": "\nStoring an API key in the image could lead to several risks.\n\nIf the key is associated with a wide scope of privileges, attackers could extract it from a single image or firmware and use it maliciously to attack many targets. For example, if the embedded key allows querying/modifying data for all cloud user accounts, without per-user authentication, the attackers who extract it would gain access to system-wide data.\n\nIf the cloud/SaaS provider bills by key usage - for example, every million queries cost the key's owner a fixed sum of money - attackers could use the keys for their own purposes (or just as a form of vandalism), incurring a large cost to the legitimate user or operator.\n\n## Best practices\n\nUse narrow scopes for stored API keys. As much as possible, API keys should be unique per host and require additional authentication with the user's individual credentials for any sensitive actions.\n\nAvoid placing keys whose use incurs costs directly in the image. Store the key with any software or hardware protection available on the host for key storage (such as operating system key-stores, hardware cryptographic storage mechanisms or cloud-managed secure storage services such as [AWS KMS](https://aws.amazon.com/kms/)).\n\nTokens that were detected as exposed should be revoked and replaced -\n\n* [AWS Key Revocation](https://aws.amazon.com/premiumsupport/knowledge-center/delete-access-key/#:~:text=If%20you%20see%20a%20warning,the%20confirmation%20box%2C%20choose%20Deactivate.)\n* [GCP Key Revocation](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/CloudIAM/delete-api-keys.html)\n* [Azure Key Revocation](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops\u0026tabs=Windows#revoke-a-pat)\n* [GitHub Key Revocation](https://docs.github.com/en/rest/apps/oauth-applications#delete-an-app-authorization)\n",
                "markdown": "\nStoring an API key in the image could lead to several risks.\n\nIf the key is associated with a wide scope of privileges, attackers could extract it from a single image or firmware and use it maliciously to attack many targets. For example, if the embedded key allows querying/modifying data for all cloud user accounts, without per-user authentication, the attackers who extract it would gain access to system-wide data.\n\nIf the cloud/SaaS provider bills by key usage - for example, every million queries cost the key's owner a fixed sum of money - attackers could use the keys for their own purposes (or just as a form of vandalism), incurring a large cost to the legitimate user or operator.\n\n## Best practices\n\nUse narrow scopes for stored API keys. As much as possible, API keys should be unique per host and require additional authentication with the user's individual credentials for any sensitive actions.\n\nAvoid placing keys whose use incurs costs directly in the image. Store the key with any software or hardware protection available on the host for key storage (such as operating system key-stores, hardware cryptographic storage mechanisms or cloud-managed secure storage services such as [AWS KMS](https://aws.amazon.com/kms/)).\n\nTokens that were detected as exposed should be revoked and replaced -\n\n* [AWS Key Revocation](https://aws.amazon.com/premiumsupport/knowledge-center/delete-access-key/#:~:text=If%20you%20see%20a%20warning,the%20confirmation%20box%2C%20choose%20Deactivate.)\n* [GCP Key Revocation](https://www.trendmicro.com/cloudoneconformity/knowledge-base/gcp/CloudIAM/delete-api-keys.html)\n* [Azure Key Revocation](https://docs.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate?view=azure-devops\u0026tabs=Windows#revoke-a-pat)\n* [GitHub Key Revocation](https://docs.github.com/en/rest/apps/oauth-applications#delete-an-app-authorization)\n"
              },
              "properties": {
                "applicability": "undetermined",
                "conclusion": "private"
              }
            }
          ],
          "version": "1.0"
        }
      },
      "invocations": [
        {
          "arguments": [
            "/root/.jfrog/dependencies/analyzerManager/jas_scanner/jas_scanner",
            "scan",
            "/tmp/jfrog.cli.temp.-1718851314-425251684/config.yaml"
          ],
          "executionSuccessful": true,
          "workingDirectory": {
            "uri": "/tmp/jfrog.cli.temp.-1718851220-2253079487/image.tar"
          }
        }
      ],
      "results": [
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpprwd59dt/unpacked/filesystem/blobs/sha256/f8ce5fcb73873542ec1f37b9b190af7a3c5e79e8d24c75cd0c09c937421e99fb/usr/local/bundle/gems/tiny_tds-2.1.7/docker-compose.yml"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 6,
                  "endLine": 12,
                  "endColumn": 6,
                  "snippet": {
                    "text": "SA_************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpprwd59dt/unpacked/filesystem/blobs/sha256/f8ce5fcb73873542ec1f37b9b190af7a3c5e79e8d24c75cd0c09c937421e99fb/usr/local/bundle/gems/tiny_tds-2.1.7/docker-compose.yml"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 6,
                  "endLine": 29,
                  "endColumn": 6,
                  "snippet": {
                    "text": "SA_************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpprwd59dt/unpacked/filesystem/blobs/sha256/f8ce5fcb73873542ec1f37b9b190af7a3c5e79e8d24c75cd0c09c937421e99fb/usr/src/redmine/config/locales/bs.yml"
                },
                "region": {
                  "startLine": 1121,
                  "startColumn": 2,
                  "endLine": 1121,
                  "endColumn": 2,
                  "snippet": {
                    "text": "set************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpprwd59dt/unpacked/filesystem/blobs/sha256/f8ce5fcb73873542ec1f37b9b190af7a3c5e79e8d24c75cd0c09c937421e99fb/usr/src/redmine/config/locales/cs.yml"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 2,
                  "endLine": 271,
                  "endColumn": 2,
                  "snippet": {
                    "text": "fie************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpprwd59dt/unpacked/filesystem/blobs/sha256/f8ce5fcb73873542ec1f37b9b190af7a3c5e79e8d24c75cd0c09c937421e99fb/usr/src/redmine/config/locales/sq.yml"
                },
                "region": {
                  "startLine": 1087,
                  "startColumn": 2,
                  "endLine": 1087,
                  "endColumn": 2,
                  "snippet": {
                    "text": "lab************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpprwd59dt/unpacked/filesystem/blobs/sha256/f8ce5fcb73873542ec1f37b9b190af7a3c5e79e8d24c75cd0c09c937421e99fb/usr/src/redmine/config/locales/sq.yml"
                },
                "region": {
                  "startLine": 1088,
                  "startColumn": 2,
                  "endLine": 1088,
                  "endColumn": 2,
                  "snippet": {
                    "text": "lab************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpprwd59dt/unpacked/filesystem/blobs/sha256/f8ce5fcb73873542ec1f37b9b190af7a3c5e79e8d24c75cd0c09c937421e99fb/usr/src/redmine/config/locales/tr.yml"
                },
                "region": {
                  "startLine": 1123,
                  "startColumn": 2,
                  "endLine": 1123,
                  "endColumn": 2,
                  "snippet": {
                    "text": "err************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpprwd59dt/unpacked/filesystem/blobs/sha256/f8ce5fcb73873542ec1f37b9b190af7a3c5e79e8d24c75cd0c09c937421e99fb/usr/src/redmine/config/locales/tr.yml"
                },
                "region": {
                  "startLine": 1171,
                  "startColumn": 2,
                  "endLine": 1171,
                  "endColumn": 2,
                  "snippet": {
                    "text": "set************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpprwd59dt/unpacked/filesystem/blobs/sha256/f8ce5fcb73873542ec1f37b9b190af7a3c5e79e8d24c75cd0c09c937421e99fb/usr/src/redmine/config/locales/tr.yml"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 2,
                  "endLine": 197,
                  "endColumn": 2,
                  "snippet": {
                    "text": "mai************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpprwd59dt/unpacked/filesystem/blobs/sha256/f8ce5fcb73873542ec1f37b9b190af7a3c5e79e8d24c75cd0c09c937421e99fb/usr/src/redmine/config/locales/tr.yml"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 2,
                  "endLine": 198,
                  "endColumn": 2,
                  "snippet": {
                    "text": "mai************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpprwd59dt/unpacked/filesystem/blobs/sha256/f8ce5fcb73873542ec1f37b9b190af7a3c5e79e8d24c75cd0c09c937421e99fb/usr/src/redmine/config/locales/tr.yml"
                },
                "region": {
                  "startLine": 377,
                  "startColumn": 2,
                  "endLine": 377,
                  "endColumn": 2,
                  "snippet": {
                    "text": "lab************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpprwd59dt/unpacked/filesystem/blobs/sha256/f8ce5fcb73873542ec1f37b9b190af7a3c5e79e8d24c75cd0c09c937421e99fb/usr/src/redmine/config/locales/tr.yml"
                },
                "region": {
                  "startLine": 642,
                  "startColumn": 2,
                  "endLine": 642,
                  "endColumn": 2,
                  "snippet": {
                    "text": "but************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.TEXT",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpprwd59dt/unpacked/filesystem/blobs/sha256/f8ce5fcb73873542ec1f37b9b190af7a3c5e79e8d24c75cd0c09c937421e99fb/usr/src/redmine/extra/svn/Redmine.pm"
                },
                "region": {
                  "startLine": 487,
                  "startColumn": 14,
                  "endLine": 487,
                  "endColumn": 14,
                  "snippet": {
                    "text": "sal************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.CODE",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpprwd59dt/unpacked/filesystem/blobs/sha256/f8ce5fcb73873542ec1f37b9b190af7a3c5e79e8d24c75cd0c09c937421e99fb/usr/local/bundle/gems/actionview-6.1.7.8/lib/action_view/helpers/form_tag_helper.rb"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 47,
                  "endLine": 69,
                  "endColumn": 47,
                  "snippet": {
                    "text": "aut************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.CODE",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpprwd59dt/unpacked/filesystem/blobs/sha256/f8ce5fcb73873542ec1f37b9b190af7a3c5e79e8d24c75cd0c09c937421e99fb/usr/local/bundle/gems/activemodel-6.1.7.8/lib/active_model/secure_password.rb"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 43,
                  "endLine": 116,
                  "endColumn": 43,
                  "snippet": {
                    "text": "pas************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.CODE",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpprwd59dt/unpacked/filesystem/blobs/sha256/f8ce5fcb73873542ec1f37b9b190af7a3c5e79e8d24c75cd0c09c937421e99fb/usr/local/bundle/gems/activemodel-6.1.7.8/lib/active_model/secure_password.rb"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 15,
                  "endLine": 49,
                  "endColumn": 15,
                  "snippet": {
                    "text": "pas************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.CODE",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpprwd59dt/unpacked/filesystem/blobs/sha256/f8ce5fcb73873542ec1f37b9b190af7a3c5e79e8d24c75cd0c09c937421e99fb/usr/local/bundle/gems/activemodel-6.1.7.8/lib/active_model/secure_password.rb"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 15,
                  "endLine": 51,
                  "endColumn": 15,
                  "snippet": {
                    "text": "pas************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.CODE",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpprwd59dt/unpacked/filesystem/blobs/sha256/f8ce5fcb73873542ec1f37b9b190af7a3c5e79e8d24c75cd0c09c937421e99fb/usr/local/bundle/gems/activemodel-6.1.7.8/lib/active_model/secure_password.rb"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 15,
                  "endLine": 53,
                  "endColumn": 15,
                  "snippet": {
                    "text": "rec************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.CODE",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpprwd59dt/unpacked/filesystem/blobs/sha256/f8ce5fcb73873542ec1f37b9b190af7a3c5e79e8d24c75cd0c09c937421e99fb/usr/local/bundle/gems/net-ldap-0.17.1/lib/net/ldap.rb"
                },
                "region": {
                  "startLine": 1069,
                  "startColumn": 7,
                  "endLine": 1069,
                  "endColumn": 7,
                  "snippet": {
                    "text": "pas************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.CODE",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpprwd59dt/unpacked/filesystem/blobs/sha256/f8ce5fcb73873542ec1f37b9b190af7a3c5e79e8d24c75cd0c09c937421e99fb/usr/local/bundle/gems/net-ldap-0.17.1/lib/net/ldap.rb"
                },
                "region": {
                  "startLine": 1073,
                  "startColumn": 26,
                  "endLine": 1073,
                  "endColumn": 26,
                  "snippet": {
                    "text": "old************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.CODE",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpprwd59dt/unpacked/filesystem/blobs/sha256/f8ce5fcb73873542ec1f37b9b190af7a3c5e79e8d24c75cd0c09c937421e99fb/usr/local/bundle/gems/net-ldap-0.17.1/lib/net/ldap.rb"
                },
                "region": {
                  "startLine": 1074,
                  "startColumn": 26,
                  "endLine": 1074,
                  "endColumn": 26,
                  "snippet": {
                    "text": "new************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.CODE",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpprwd59dt/unpacked/filesystem/blobs/sha256/f8ce5fcb73873542ec1f37b9b190af7a3c5e79e8d24c75cd0c09c937421e99fb/usr/local/bundle/gems/net-ldap-0.17.1/lib/net/ldap.rb"
                },
                "region": {
                  "startLine": 1082,
                  "startColumn": 7,
                  "endLine": 1082,
                  "endColumn": 7,
                  "snippet": {
                    "text": "pas************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.CODE",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpprwd59dt/unpacked/filesystem/blobs/sha256/f8ce5fcb73873542ec1f37b9b190af7a3c5e79e8d24c75cd0c09c937421e99fb/usr/local/bundle/gems/net-ldap-0.17.1/lib/net/ldap.rb"
                },
                "region": {
                  "startLine": 1086,
                  "startColumn": 26,
                  "endLine": 1086,
                  "endColumn": 26,
                  "snippet": {
                    "text": "old************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.CODE",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpprwd59dt/unpacked/filesystem/blobs/sha256/f8ce5fcb73873542ec1f37b9b190af7a3c5e79e8d24c75cd0c09c937421e99fb/usr/local/bundle/gems/rotp-6.3.0/spec/lib/rotp/totp_spec.rb"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 0,
                  "endLine": 5,
                  "endColumn": 0,
                  "snippet": {
                    "text": "TES************"
                  }
                }
              }
            }
          ]
        },
        {
          "ruleId": "REQ.SECRET.GENERIC.CODE",
          "message": {
            "text": "Hardcoded secrets were found"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:///tmp/tmpprwd59dt/unpacked/filesystem/blobs/sha256/f8ce5fcb73873542ec1f37b9b190af7a3c5e79e8d24c75cd0c09c937421e99fb/usr/src/redmine/db/migrate/001_setup.rb"
                },
                "region": {
                  "startLine": 296,
                  "startColumn": 9,
                  "endLine": 296,
                  "endColumn": 9,
                  "snippet": {
                    "text": "has************"
                  }
                }
              }
            }
          ]
        }
      ]
    }
  ]
}
