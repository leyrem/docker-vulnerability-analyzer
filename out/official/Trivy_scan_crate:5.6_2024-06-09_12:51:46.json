{
  "version": "2.1.0",
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "runs": [
    {
      "tool": {
        "driver": {
          "fullName": "Trivy Vulnerability Scanner",
          "informationUri": "https://github.com/aquasecurity/trivy",
          "name": "Trivy",
          "rules": [
            {
              "id": "CVE-2024-32487",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "less: OS command injection"
              },
              "fullDescription": {
                "text": "less through 653 allows OS command execution via a newline character in the name of a file, because quoting is mishandled in filename.c. Exploitation typically requires use with attacker-controlled file names, such as the files extracted from an untrusted archive. Exploitation also requires the LESSOPEN environment variable, but this is set by default in many common cases."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2024-32487",
              "help": {
                "text": "Vulnerability CVE-2024-32487\nSeverity: HIGH\nPackage: less\nFixed Version: 590-4.el9_4\nLink: [CVE-2024-32487](https://avd.aquasec.com/nvd/cve-2024-32487)\nless through 653 allows OS command execution via a newline character in the name of a file, because quoting is mishandled in filename.c. Exploitation typically requires use with attacker-controlled file names, such as the files extracted from an untrusted archive. Exploitation also requires the LESSOPEN environment variable, but this is set by default in many common cases.",
                "markdown": "**Vulnerability CVE-2024-32487**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|less|590-4.el9_4|[CVE-2024-32487](https://avd.aquasec.com/nvd/cve-2024-32487)|\n\nless through 653 allows OS command execution via a newline character in the name of a file, because quoting is mishandled in filename.c. Exploitation typically requires use with attacker-controlled file names, such as the files extracted from an untrusted archive. Exploitation also requires the LESSOPEN environment variable, but this is set by default in many common cases."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "8.0",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            },
            {
              "id": "CVE-2024-28182",
              "name": "OsPackageVulnerability",
              "shortDescription": {
                "text": "nghttp2: CONTINUATION frames DoS"
              },
              "fullDescription": {
                "text": "nghttp2 is an implementation of the Hypertext Transfer Protocol version 2 in C. The nghttp2 library prior to version 1.61.0 keeps reading the unbounded number of HTTP/2 CONTINUATION frames even after a stream is reset to keep HPACK context in sync.  This causes excessive CPU usage to decode HPACK stream. nghttp2 v1.61.0 mitigates this vulnerability by limiting the number of CONTINUATION frames it accepts per stream. There is no workaround for this vulnerability."
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2024-28182",
              "help": {
                "text": "Vulnerability CVE-2024-28182\nSeverity: MEDIUM\nPackage: libnghttp2\nFixed Version: 1.43.0-5.el9_4.3\nLink: [CVE-2024-28182](https://avd.aquasec.com/nvd/cve-2024-28182)\nnghttp2 is an implementation of the Hypertext Transfer Protocol version 2 in C. The nghttp2 library prior to version 1.61.0 keeps reading the unbounded number of HTTP/2 CONTINUATION frames even after a stream is reset to keep HPACK context in sync.  This causes excessive CPU usage to decode HPACK stream. nghttp2 v1.61.0 mitigates this vulnerability by limiting the number of CONTINUATION frames it accepts per stream. There is no workaround for this vulnerability.",
                "markdown": "**Vulnerability CVE-2024-28182**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|libnghttp2|1.43.0-5.el9_4.3|[CVE-2024-28182](https://avd.aquasec.com/nvd/cve-2024-28182)|\n\nnghttp2 is an implementation of the Hypertext Transfer Protocol version 2 in C. The nghttp2 library prior to version 1.61.0 keeps reading the unbounded number of HTTP/2 CONTINUATION frames even after a stream is reset to keep HPACK context in sync.  This causes excessive CPU usage to decode HPACK stream. nghttp2 v1.61.0 mitigates this vulnerability by limiting the number of CONTINUATION frames it accepts per stream. There is no workaround for this vulnerability."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2023-2976",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "guava: insecure temporary directory creation"
              },
              "fullDescription": {
                "text": "Use of Java\u0026#39;s default temporary directory for file creation in `FileBackedOutputStream` in Google Guava versions 1.0 to 31.1 on Unix systems and Android Ice Cream Sandwich allows other users and apps on the machine with access to the default Java temporary directory to be able to access the files created by the class.\n\nEven though the security vulnerability is fixed in version 32.0.0, we recommend using version 32.0.1 as version 32.0.0 breaks some functionality under Windows.\n\n"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2023-2976",
              "help": {
                "text": "Vulnerability CVE-2023-2976\nSeverity: MEDIUM\nPackage: com.google.guava:guava\nFixed Version: 32.0.0-android\nLink: [CVE-2023-2976](https://avd.aquasec.com/nvd/cve-2023-2976)\nUse of Java's default temporary directory for file creation in `FileBackedOutputStream` in Google Guava versions 1.0 to 31.1 on Unix systems and Android Ice Cream Sandwich allows other users and apps on the machine with access to the default Java temporary directory to be able to access the files created by the class.\n\nEven though the security vulnerability is fixed in version 32.0.0, we recommend using version 32.0.1 as version 32.0.0 breaks some functionality under Windows.\n\n",
                "markdown": "**Vulnerability CVE-2023-2976**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|com.google.guava:guava|32.0.0-android|[CVE-2023-2976](https://avd.aquasec.com/nvd/cve-2023-2976)|\n\nUse of Java's default temporary directory for file creation in `FileBackedOutputStream` in Google Guava versions 1.0 to 31.1 on Unix systems and Android Ice Cream Sandwich allows other users and apps on the machine with access to the default Java temporary directory to be able to access the files created by the class.\n\nEven though the security vulnerability is fixed in version 32.0.0, we recommend using version 32.0.1 as version 32.0.0 breaks some functionality under Windows.\n\n"
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "5.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2020-8908",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "guava: local information disclosure via temporary directory created with unsafe permissions"
              },
              "fullDescription": {
                "text": "A temp directory creation vulnerability exists in all versions of Guava, allowing an attacker with access to the machine to potentially access data in a temporary directory created by the Guava API com.google.common.io.Files.createTempDir(). By default, on unix-like systems, the created directory is world-readable (readable by an attacker with access to the system). The method in question has been marked @Deprecated in versions 30.0 and later and should not be used. For Android developers, we recommend choosing a temporary directory API provided by Android, such as context.getCacheDir(). For other Java developers, we recommend migrating to the Java 7 API java.nio.file.Files.createTempDirectory() which explicitly configures permissions of 700, or configuring the Java runtime\u0026#39;s java.io.tmpdir system property to point to a location whose permissions are appropriately configured.\n\n"
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2020-8908",
              "help": {
                "text": "Vulnerability CVE-2020-8908\nSeverity: LOW\nPackage: com.google.guava:guava\nFixed Version: 32.0.0-android\nLink: [CVE-2020-8908](https://avd.aquasec.com/nvd/cve-2020-8908)\nA temp directory creation vulnerability exists in all versions of Guava, allowing an attacker with access to the machine to potentially access data in a temporary directory created by the Guava API com.google.common.io.Files.createTempDir(). By default, on unix-like systems, the created directory is world-readable (readable by an attacker with access to the system). The method in question has been marked @Deprecated in versions 30.0 and later and should not be used. For Android developers, we recommend choosing a temporary directory API provided by Android, such as context.getCacheDir(). For other Java developers, we recommend migrating to the Java 7 API java.nio.file.Files.createTempDirectory() which explicitly configures permissions of 700, or configuring the Java runtime's java.io.tmpdir system property to point to a location whose permissions are appropriately configured.\n\n",
                "markdown": "**Vulnerability CVE-2020-8908**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|LOW|com.google.guava:guava|32.0.0-android|[CVE-2020-8908](https://avd.aquasec.com/nvd/cve-2020-8908)|\n\nA temp directory creation vulnerability exists in all versions of Guava, allowing an attacker with access to the machine to potentially access data in a temporary directory created by the Guava API com.google.common.io.Files.createTempDir(). By default, on unix-like systems, the created directory is world-readable (readable by an attacker with access to the system). The method in question has been marked @Deprecated in versions 30.0 and later and should not be used. For Android developers, we recommend choosing a temporary directory API provided by Android, such as context.getCacheDir(). For other Java developers, we recommend migrating to the Java 7 API java.nio.file.Files.createTempDirectory() which explicitly configures permissions of 700, or configuring the Java runtime's java.io.tmpdir system property to point to a location whose permissions are appropriately configured.\n\n"
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "3.3",
                "tags": [
                  "vulnerability",
                  "security",
                  "LOW"
                ]
              }
            },
            {
              "id": "CVE-2024-29025",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "netty-codec-http: Allocation of Resources Without Limits or Throttling"
              },
              "fullDescription": {
                "text": "Netty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers \u0026amp; clients. The `HttpPostRequestDecoder` can be tricked to accumulate data. While the decoder can store items on the disk if configured so, there are no limits to the number of fields the form can have, an attacher can send a chunked post consisting of many small fields that will be accumulated in the `bodyListHttpData` list. The decoder cumulates bytes in the `undecodedChunk` buffer until it can decode a field, this field can cumulate data without limits. This vulnerability is fixed in 4.1.108.Final."
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2024-29025",
              "help": {
                "text": "Vulnerability CVE-2024-29025\nSeverity: MEDIUM\nPackage: io.netty:netty-codec-http\nFixed Version: 4.1.108.Final\nLink: [CVE-2024-29025](https://avd.aquasec.com/nvd/cve-2024-29025)\nNetty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers \u0026 clients. The `HttpPostRequestDecoder` can be tricked to accumulate data. While the decoder can store items on the disk if configured so, there are no limits to the number of fields the form can have, an attacher can send a chunked post consisting of many small fields that will be accumulated in the `bodyListHttpData` list. The decoder cumulates bytes in the `undecodedChunk` buffer until it can decode a field, this field can cumulate data without limits. This vulnerability is fixed in 4.1.108.Final.",
                "markdown": "**Vulnerability CVE-2024-29025**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|io.netty:netty-codec-http|4.1.108.Final|[CVE-2024-29025](https://avd.aquasec.com/nvd/cve-2024-29025)|\n\nNetty is an asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers \u0026 clients. The `HttpPostRequestDecoder` can be tricked to accumulate data. While the decoder can store items on the disk if configured so, there are no limits to the number of fields the form can have, an attacher can send a chunked post consisting of many small fields that will be accumulated in the `bodyListHttpData` list. The decoder cumulates bytes in the `undecodedChunk` buffer until it can decode a field, this field can cumulate data without limits. This vulnerability is fixed in 4.1.108.Final."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "5.3",
                "tags": [
                  "vulnerability",
                  "security",
                  "MEDIUM"
                ]
              }
            },
            {
              "id": "CVE-2024-21634",
              "name": "LanguageSpecificPackageVulnerability",
              "shortDescription": {
                "text": "Ion Java StackOverflow vulnerability"
              },
              "fullDescription": {
                "text": "Amazon Ion is a Java implementation of the Ion data notation. Prior to version 1.10.5, a potential denial-of-service issue exists in `ion-java` for applications that use `ion-java` to deserialize Ion text encoded data, or deserialize Ion text or binary encoded data into the `IonValue` model and then invoke certain `IonValue` methods on that in-memory representation. An actor could craft Ion data that, when loaded by the affected application and/or processed using the `IonValue` model, results in a `StackOverflowError` originating from the `ion-java` library. The patch is included in `ion-java` 1.10.5. As a workaround, do not load data which originated from an untrusted source or that could have been tampered with."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "helpUri": "https://avd.aquasec.com/nvd/cve-2024-21634",
              "help": {
                "text": "Vulnerability CVE-2024-21634\nSeverity: HIGH\nPackage: software.amazon.ion:ion-java\nFixed Version: 1.10.5\nLink: [CVE-2024-21634](https://avd.aquasec.com/nvd/cve-2024-21634)\nAmazon Ion is a Java implementation of the Ion data notation. Prior to version 1.10.5, a potential denial-of-service issue exists in `ion-java` for applications that use `ion-java` to deserialize Ion text encoded data, or deserialize Ion text or binary encoded data into the `IonValue` model and then invoke certain `IonValue` methods on that in-memory representation. An actor could craft Ion data that, when loaded by the affected application and/or processed using the `IonValue` model, results in a `StackOverflowError` originating from the `ion-java` library. The patch is included in `ion-java` 1.10.5. As a workaround, do not load data which originated from an untrusted source or that could have been tampered with.",
                "markdown": "**Vulnerability CVE-2024-21634**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|HIGH|software.amazon.ion:ion-java|1.10.5|[CVE-2024-21634](https://avd.aquasec.com/nvd/cve-2024-21634)|\n\nAmazon Ion is a Java implementation of the Ion data notation. Prior to version 1.10.5, a potential denial-of-service issue exists in `ion-java` for applications that use `ion-java` to deserialize Ion text encoded data, or deserialize Ion text or binary encoded data into the `IonValue` model and then invoke certain `IonValue` methods on that in-memory representation. An actor could craft Ion data that, when loaded by the affected application and/or processed using the `IonValue` model, results in a `StackOverflowError` originating from the `ion-java` library. The patch is included in `ion-java` 1.10.5. As a workaround, do not load data which originated from an untrusted source or that could have been tampered with."
              },
              "properties": {
                "precision": "very-high",
                "security-severity": "7.5",
                "tags": [
                  "vulnerability",
                  "security",
                  "HIGH"
                ]
              }
            }
          ],
          "version": "0.51.1"
        }
      },
      "results": [
        {
          "ruleId": "CVE-2024-32487",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Package: less\nInstalled Version: 590-3.el9_3\nVulnerability CVE-2024-32487\nSeverity: HIGH\nFixed Version: 590-4.el9_4\nLink: [CVE-2024-32487](https://avd.aquasec.com/nvd/cve-2024-32487)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "library/crate",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "library/crate: less@590-3.el9_3"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-28182",
          "ruleIndex": 1,
          "level": "warning",
          "message": {
            "text": "Package: libnghttp2\nInstalled Version: 1.43.0-5.el9_3.1\nVulnerability CVE-2024-28182\nSeverity: MEDIUM\nFixed Version: 1.43.0-5.el9_4.3\nLink: [CVE-2024-28182](https://avd.aquasec.com/nvd/cve-2024-28182)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "library/crate",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "library/crate: libnghttp2@1.43.0-5.el9_3.1"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2023-2976",
          "ruleIndex": 2,
          "level": "warning",
          "message": {
            "text": "Package: com.google.guava:guava\nInstalled Version: 24.1.1-jre\nVulnerability CVE-2023-2976\nSeverity: MEDIUM\nFixed Version: 32.0.0-android\nLink: [CVE-2023-2976](https://avd.aquasec.com/nvd/cve-2023-2976)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "crate/lib/guava-24.1.1-jre.jar",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "crate/lib/guava-24.1.1-jre.jar: com.google.guava:guava@24.1.1-jre"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2020-8908",
          "ruleIndex": 3,
          "level": "note",
          "message": {
            "text": "Package: com.google.guava:guava\nInstalled Version: 24.1.1-jre\nVulnerability CVE-2020-8908\nSeverity: LOW\nFixed Version: 32.0.0-android\nLink: [CVE-2020-8908](https://avd.aquasec.com/nvd/cve-2020-8908)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "crate/lib/guava-24.1.1-jre.jar",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "crate/lib/guava-24.1.1-jre.jar: com.google.guava:guava@24.1.1-jre"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-29025",
          "ruleIndex": 4,
          "level": "warning",
          "message": {
            "text": "Package: io.netty:netty-codec-http\nInstalled Version: 4.1.104.Final\nVulnerability CVE-2024-29025\nSeverity: MEDIUM\nFixed Version: 4.1.108.Final\nLink: [CVE-2024-29025](https://avd.aquasec.com/nvd/cve-2024-29025)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "crate/lib/netty-codec-http-4.1.104.Final.jar",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "crate/lib/netty-codec-http-4.1.104.Final.jar: io.netty:netty-codec-http@4.1.104.Final"
              }
            }
          ]
        },
        {
          "ruleId": "CVE-2024-21634",
          "ruleIndex": 5,
          "level": "error",
          "message": {
            "text": "Package: software.amazon.ion:ion-java\nInstalled Version: 1.0.2\nVulnerability CVE-2024-21634\nSeverity: HIGH\nFixed Version: 1.10.5\nLink: [CVE-2024-21634](https://avd.aquasec.com/nvd/cve-2024-21634)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "crate/lib/ion-java-1.0.2.jar",
                  "uriBaseId": "ROOTPATH"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 1
                }
              },
              "message": {
                "text": "crate/lib/ion-java-1.0.2.jar: software.amazon.ion:ion-java@1.0.2"
              }
            }
          ]
        }
      ],
      "columnKind": "utf16CodeUnits",
      "originalUriBaseIds": {
        "ROOTPATH": {
          "uri": "file:///"
        }
      },
      "properties": {
        "imageName": "crate:5.6",
        "repoDigests": [
          "crate@sha256:6acf34134148cdb5cb01615516ec6cab72b8ecafd3eeb615fef030a06dc5a5f7"
        ],
        "repoTags": [
          "crate:5.6"
        ]
      }
    }
  ]
}