package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strconv"
	"strings"

	"github.com/leyrem/docker-vulnerability-analyzer/utils"
)

const (
	dirSearch  = "/Users/leyremonreal/Documents/Master/thesis/docker-vulnerability-analyzer/out/verified/"
	missingTxt = "/Users/leyremonreal/Documents/Master/thesis/repo/docker-vulnerability-analyzer/out/missing/verifiedMissing.txt"
	errorTxt   = "/Users/leyremonreal/Documents/Master/thesis/repo/docker-vulnerability-analyzer/out/errors/errorFindMissing.txt"
	csvFile    = "/Users/leyremonreal/Documents/Master/thesis/thesis_crawler/imagesVerified.csv"
	scanType   = "verified"
)

func findFile(dir string, filePrefix string) (string, error) {

	numMatchedFiles := 0
	numEmptyFiles := 0

	filesDup := []string{}

	// Find files in the directory
	err := filepath.Walk(dir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if !info.IsDir() {
			// Check if the file name starts with the prefix
			if strings.HasPrefix(info.Name(), filePrefix) {

				if info.Size() == 0 {
					fmt.Println("Found empty file:", path)
					numEmptyFiles++
					err := os.Remove(path)
					if err != nil {
						// If there's an error, print it
						fmt.Printf("Error deleting file: %s: %v \n", path, err)
						return fmt.Errorf("Error deleting file: %s: %v \n", path, err)
					}
				} else {
					numMatchedFiles++
					fmt.Println("Found matching file:", path)
					filesDup = append(filesDup, path)
				}
			}
		}
		return nil
	})

	if err != nil {
		log.Printf("Error searching directory %s for file prefix: %s --> %v", dir, filePrefix, err)
		return "", fmt.Errorf("error searching directory %s for file prefix: %s --> %v", dir, filePrefix, err)
	}

	finalStr := ""

	if numEmptyFiles > 0 {
		finalStr = filePrefix + " --- empty instances found: " + strconv.Itoa(numEmptyFiles)
	}

	if numMatchedFiles != 1 {
		if numMatchedFiles == 0 {
			return finalStr + filePrefix, nil
		} else if numMatchedFiles > 1 {
			// Iterate over the array but do not include the last element
			for i := 0; i < len(filesDup)-1; i++ {
				err := os.Remove(filesDup[i])
				if err != nil {
					fmt.Printf("Error deleting duplicate file: %s: %v \n", filesDup[i], err)
					return "", fmt.Errorf("Error deleting duplicate file: %s: %v \n", filesDup[i], err)
				}
			}
			return finalStr + filePrefix + " --- multiple instances found: " + strconv.Itoa(numMatchedFiles), nil
		}
	}

	return finalStr, nil
}

func main() {
	images, err := utils.ReadCSV(csvFile, scanType)
	if err != nil {
		panic(err)
	}

	// Open the file in write mode. Create it if it doesn't exist.
	fileErr, err := os.Create(errorTxt)
	if err != nil {
		fmt.Println("Error opening error text file:", err)
		return
	}
	defer fileErr.Close()

	// Create a writer that will write to the file
	writer := bufio.NewWriter(fileErr)

	// Open the file in write mode. Create it if it doesn't exist.
	fileMissing, err := os.Create(missingTxt)
	if err != nil {
		fmt.Println("Error opening missing text file:", err)
		return
	}
	defer fileErr.Close()

	// Create a writer that will write to the file
	writerMissing := bufio.NewWriter(fileMissing)
	scannerNames := []string{"JFrog", "Trivy", "DockerScout", "Grype", "Snyk"}

	for _, img := range images[2:] {

		scannersNeeded := []string{}

		for _, scanner := range scannerNames {

			imgN := strings.Replace(img, "/", "=", -1)
			finalName := scanner + "_scan_" + imgN + "_"

			fmt.Println("Searhing for file ", finalName)

			// generate for every image name all possible prefix names
			result, err := findFile(dirSearch, finalName)

			if err != nil {
				err2 := writerMissing.Flush()
				if err2 != nil {
					fmt.Println("Error flusing missing file:", err2)
					return
				}
				_, err := writer.WriteString(err.Error() + "\n")
				if err != nil {
					fmt.Println("Error writing to error file:", err)
					return
				}
				err = writer.Flush()
				if err != nil {
					fmt.Println("Error flusing error file:", err)
					return
				}
			} else {
				if result != "" {
					if result == finalName {

						scannersNeeded = append(scannersNeeded, scanner)

					} else {
						_, err := writerMissing.WriteString(result + "\n")
						if err != nil {
							fmt.Println("Error writing to missing file:", err)
							return
						}
						err = writer.Flush()
						if err != nil {
							fmt.Println("Error flusing missing file:", err)
							return
						}
					}

				}

			}

		}
		if len(scannersNeeded) > 0 {
			_, err := writerMissing.WriteString(strings.Join(scannersNeeded, ",") + " " + img + "\n")
			if err != nil {
				fmt.Println("Error writing to missing file:", err)
				return
			}
			err = writer.Flush()
			if err != nil {
				fmt.Println("Error flusing missing file:", err)
				return
			}
		}

	}

	// Flush the buffer to ensure all data is written to the file
	err = writer.Flush()
	if err != nil {
		fmt.Println("Error flusing error file:", err)
		return
	}

	// Flush the buffer to ensure all data is written to the file
	err = writerMissing.Flush()
	if err != nil {
		fmt.Println("Error flusing missing file:", err)
		return
	}

}
