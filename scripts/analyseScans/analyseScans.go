package main

import (
	"bufio"
	"fmt"
	"io"
	"log"
	"os"
	"strings"

	"github.com/leyrem/docker-vulnerability-analyzer/analyser"
	"github.com/leyrem/docker-vulnerability-analyzer/utils"
)

const (
	LOG_FILE        = "/Users/leyremonreal/Documents/Master/thesis/docker-vulnerability-analyzer/out/log/logSponsoredAnalysis.log"
	SOURCE_DIR      = "/Users/leyremonreal/Downloads/sponsored"
	ERROR_TXT_FILE  = "/Users/leyremonreal/Documents/Master/thesis/docker-vulnerability-analyzer/out/errors/errorAnalyserSponsored.txt"
	OUTPUT_DIR      = "/Users/leyremonreal/Documents/Master/thesis/docker-vulnerability-analyzer/out/analysis/sponsored/"
	CSV_FILE        = "/Users/leyremonreal/Documents/Master/thesis/thesis_crawler/imagesSponsored.csv"
	IMAGES_CATEGORY = "sponsored"
)

func main() {

	logFile, err := os.OpenFile(LOG_FILE, os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0644)
	if err != nil {
		panic(err)
	}
	defer logFile.Close()
	// Create a MultiWriter to write to both stdout and the file
	mw := io.MultiWriter(os.Stdout, logFile)
	log.SetOutput(mw)

	images, err := utils.ReadCSV(CSV_FILE, IMAGES_CATEGORY)
	if err != nil {
		panic(err)
	}

	fileErr, err := os.Create(ERROR_TXT_FILE)
	if err != nil {
		panic(fmt.Errorf("error opening error file: %v", err))
	}
	defer fileErr.Close()

	// Create a writer that will write to the file
	writer := bufio.NewWriter(fileErr)

	for _, img := range images[2:] {

		updatedImg := strings.ReplaceAll(img, "/", "=")
		outputFileName := OUTPUT_DIR + updatedImg + "_analysis.json"

		err = analyser.GetListCVEsAllScanners(SOURCE_DIR, img, outputFileName)
		if err != nil {
			errMsg := img + " ----------- " + err.Error()
			_, err := writer.WriteString(errMsg + "\n")
			if err != nil {
				fmt.Println("Error writing to error file:", err)
				return
			}
			err = writer.Flush()
			if err != nil {
				fmt.Println("Error flushing error file:", err)
				return
			}
		}
	}

	// Flush the buffer to ensure all data is written to the file
	err = writer.Flush()
	if err != nil {
		fmt.Println("Error flusing error file:", err)
		return
	}

}
