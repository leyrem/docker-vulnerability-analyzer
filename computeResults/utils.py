import streamlit as st
import pandas as pd
import requests
import json
import numpy as np

NVD_API_KEY = "3c7af097-4e2c-4468-ba62-7519d3372834"

def parse_unique_cves_field(scanner_cve_info):
    # Initialize lists to store extracted data
    scanner_names = []
    cve_ids = []
    packages = []
    cvssv3_scores = []
    severities = []
    types = []
    is_fixeds = []
    fixed_versions = []
    
    # Fix the JSON string by replacing single quotes with double quotes
    fixed_string = scanner_cve_info.replace("'", '"')
    fixed_string = fixed_string.replace("True", "true").replace("False", "false")
    scanner_cve_info_fix = json.loads(fixed_string)


    # Extract data from each dictionary in 'scanner_cve_info'
    for item in scanner_cve_info_fix:
        scanner_names.append(item['scanner_name'])
        cve_ids.append(item['cve_info']['cve_id'])
        # Convert list to comma-separated string
        packages.append(', '.join(item['cve_info']['package']))
        cvssv3_scores.append(item['cve_info']['cvssv3_score'])
        severities.append(item['cve_info']['severity'])
        types.append(item['cve_info']['type'])
        is_fixeds.append(item['cve_info']['is_fixed'])
        fixed_versions.append(item['cve_info']['fixed_version'])

    # Create DataFrame
    df = pd.DataFrame({
        'scanner_name': scanner_names,
        'cve_id': cve_ids,
        'package': packages,
        'cvssv3_score': cvssv3_scores,
        'severity': severities,
        'type': types,
        'is_fixed': is_fixeds,
        'fixed_version': fixed_versions
    })

    return df


def get_distribution_cves_per_scanner(df_cves_detected_all_scanners, selected_scanner_name):
    
    selected_rows = df_cves_detected_all_scanners[df_cves_detected_all_scanners['scanner_name'] == selected_scanner_name]
    
    num_low_vulns = 0
    num_medium_vulns = 0
    num_high_vulns = 0
    num_critical_vulns = 0
    num_unassigned_vulns = 0
    num_diff_vulns = 0
    
    for ind, row in selected_rows.iterrows():
        if row['num_cves'] == 0 :
            continue
        for cve in  row['cves']:
            sev = cve['severity'].upper().strip()
            if sev == "MEDIUM":
                num_medium_vulns += 1
            elif sev == "HIGH":
                num_high_vulns += 1
            elif sev == "LOW":
                num_low_vulns += 1
            elif sev == "CRITICAL":
                num_critical_vulns += 1
            elif sev == "" or sev ==  "UNSPECIFIED":
                num_unassigned_vulns += 1
            else:
                num_diff_vulns += 1
     
    with st.expander("See detailed analysis"):
        st.write("The distribution  of vulnerabilities detected by scanner " + selected_scanner_name + " is:")
        col1, col2, col3 = st.columns(3)
        col1.metric(label ="Number of CRITICAL vulnerabilities", value=num_critical_vulns)
        col2.metric(label ="Number of HIGH vulnerabilities", value=num_high_vulns)
        col3.metric(label ="Number of MEDIUM vulnerabilities", value=num_medium_vulns)
    
        col4, col5, col6 = st.columns(3)
        col4.metric(label ="Number of LOW vulnerabilities", value=num_low_vulns)
        col5.metric(label ="Number of UNASSIGNED vulnerabilities", value=num_unassigned_vulns)
        col6.metric(label ="Number of vulnerabilities with different severity level", value=num_diff_vulns)
    
    
        for ind, row in selected_rows.iterrows():
            for cve in  row['cves']:
                st.json(cve)
                
                
                
def extract_severity(cve_id, scanner_cve_info_obj_df, recompute):
    
    value_sev = ""
        
    diff_severities = []
    diff_cvss_scores = []
    
    for ind, r in scanner_cve_info_obj_df.iterrows():
        
        current_sev = r['severity'].upper().strip()
        current_score = r['cvssv3_score'].upper().strip()  
        if current_sev != "":
            diff_severities.append(current_sev)
        if current_score != "":
            current_score = float(current_score)
            if current_score != 0.0 :
                diff_cvss_scores.append(current_score)
    
    diff_severities = set(diff_severities)
    diff_cvss_scores = set(diff_cvss_scores)

    if len(diff_severities) == 0:
        #st.metric(label="Severity of this vulnerability", value="UNASIGNED")
        value_sev = "UNASSIGNED"
        
        #if recompute is True:
            ###severity_recom, score_recom = get_cve_details(cve_id)
            ##if severity_recom:
                #print("recomputed sev: ", severity_recom)
                #value_sev = severity_recom.upper().strip()
            #else:
                #print("Failed to retrieve CVE details. for cve id: ", cve_id)
    
    elif len(diff_severities) >  1:
        #diff_severities = ', '.join(diff_severities)
        #st.markdown("   :red[Different severities were assigned by different scanners for this vulnerability:]")
        #st.write("      "+diff_severities)
        value_sev = "DIFFERING"
        if recompute is True:
            severity_recom, score_recom = get_cve_details(cve_id)
            if severity_recom:
                #print("recomputed sev: ", severity_recom)
                value_sev = severity_recom.upper().strip()
            #else:
                #print("Failed to retrieve CVE details. for cve id: ", cve_id)
    else:
        #st.metric(label="Severity of this vulnerability", value=list(diff_severities)[0])
        val =  list(diff_severities)[0]
        if val == "MEDIUM":
            value_sev = "MEDIUM"
        elif val == "HIGH":
            value_sev = "HIGH"
        elif val == "LOW":
            value_sev = "LOW"
        elif val == "CRITICAL":
            value_sev = "CRITICAL"
        elif val == "UNASSIGNED":
            value_sev = "UNASSIGNED"
        elif val == "UNSPECIFIED":
            value_sev = "UNASSIGNED"
        elif val == "UNKNOWN":
            value_sev = "UNASSIGNED"
        else: 
            print("UNKNWO SEV VVALUE: ")
            print(val)
        
            
    return value_sev


def get_cve_details(cve_id):
    url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?cveId={cve_id}"
    headers = {
        "apiKey": NVD_API_KEY
    }
    
    response = requests.get(url, headers=headers)
    
    if response.status_code == 200:
        cve_data = response.json()
        
        if 'vulnerabilities' in cve_data and cve_data['vulnerabilities']:
            cve_item = cve_data['vulnerabilities'][0]['cve']
            
            if 'metrics' in cve_item:
                metrics = cve_item['metrics']
                if 'cvssMetricV31' in metrics:
                    severity = None
                    score = None
                    cvss_v3 = metrics['cvssMetricV31'][0]['cvssData']
                    if 'baseSeverity' in cvss_v3:
                        severity =cvss_v3['baseSeverity']
                    if 'baseScore'in cvss_v3:
                        score = cvss_v3['baseScore']
                    return severity, score
                elif 'cvssMetricV30' in metrics:
                    severity = None
                    score = None
                    cvss_v3 = metrics['cvssMetricV30'][0]['cvssData']
                    if 'baseSeverity' in cvss_v3:
                        severity =cvss_v3['baseSeverity']     
                    if 'baseScore'in cvss_v3:
                        score = cvss_v3['baseScore']
                    return severity, score
                elif 'cvssMetricV2' in metrics:
                    severity = None
                    score = None
                    cvss_v2 = metrics['cvssMetricV2'][0]['cvssData']
                    if 'baseSeverity' in cvss_v2:
                        severity = cvss_v2['baseSeverity'] 
                    if 'baseScore'in cvss_v2:
                        score = cvss_v2['baseScore']
                    return severity, score
                else:
                    return None, None
            else:
                return None, None
    #else:
        #print(f"Failed to fetch CVE details: {response.status_code}")
    
    return None, None

def process_file(filename):
    with open(filename) as file:
        dataJSON = json.load(file)
        
    num_unique_cves = dataJSON["num_unique_cves"]
    df1 = pd.json_normalize(dataJSON, 'cves_detected_all_scanners')
    df2 = pd.json_normalize(dataJSON, 'unique_cves')
    
    return df1, df2, num_unique_cves

def compute_stats(list_scanner):
    data_array = np.array(list_scanner)
    
    
    average= np.mean(data_array).item()
    median = np.median(data_array).item()
    variance = np.var(data_array, ddof=1).item()  # ddof=1 for sample variance
    std_dev = np.std(data_array, ddof=1).item()  # ddof=1 for sample standard deviation
    min_value = np.min(data_array).item()
    max_value = np.max(data_array).item()
    range_value = max_value - min_value
    
    return average, median, variance, std_dev, min_value, max_value, range_value


def compute_severities_by_scanner(cves_list):
    
    fixed_string = cves_list.replace("'", '"')
    fixed_string = fixed_string.replace("True", "true").replace("False", "false")
    cves_list_fix = json.loads(fixed_string)
    
    num_low_vulns = 0
    num_medium_vulns = 0
    num_high_vulns = 0
    num_critical_vulns = 0
    num_unassigned_vulns = 0

    for cve in cves_list_fix:
        sev = cve["severity"].upper().strip()
        
        if sev == "MEDIUM":
            num_medium_vulns += 1
        elif sev == "HIGH":
            num_high_vulns += 1
        elif sev == "LOW":
            num_low_vulns += 1
        elif sev == "CRITICAL":
            num_critical_vulns += 1
        elif sev == "UNASSIGNED":
            num_unassigned_vulns += 1
        elif sev == "UNSPECIFIED":
            num_unassigned_vulns += 1
        elif sev == "UNKNOWN":
            num_unassigned_vulns += 1
        else: 
            print("severity VALUE UKNOWN: ")
            print(sev)
        
    return num_low_vulns, num_medium_vulns, num_high_vulns, num_critical_vulns, num_unassigned_vulns