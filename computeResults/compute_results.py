import pandas as pd
import altair as alt
import numpy as np
import json
import glob
import os
from concurrent.futures import ProcessPoolExecutor, as_completed
import itertools
from utils import parse_unique_cves_field, extract_severity, compute_severities_by_scanner, compute_stats, extract_packages, packages_by_scanner, combine_dicts, extract_fix_status, fix_statuses_by_scanner

num_images_analysed = 0
num_images_analysed_official = 689
num_images_analysed_verified = 702
num_images_analysed_sponsored = 712

class ScannerResults:
    def __init__(self, scanner_name, relative_efficacies_list, num_cves, num_cves_list, 
                 low_vulns, medium_vulns, high_vulns, critical_vulns, un_vulns, 
                 pkgs_affected_dict, fixed_vulns, not_fixed_vulns):
        self.scanner_name = scanner_name
        self.relative_efficacies_list = relative_efficacies_list
        self.num_cves = num_cves
        self.num_cves_list = num_cves_list
        self.low_vulns = low_vulns
        self.medium_vulns = medium_vulns
        self.high_vulns = high_vulns
        self.critical_vulns = critical_vulns
        self.unassigned_vulns = un_vulns  
        self.pkgs_affected_dict = pkgs_affected_dict
        self.fixed_vulns = fixed_vulns
        self.not_fixed_vulns = not_fixed_vulns
        
SELECTED_NAME = "Official_Images" # Oneof Official_Images, Verified_Images, Sponsored_Images or All_Images
RECOM_SEVERITIES = False

df_cves_detected_all_scanners = pd.DataFrame()
df_unique_cves = pd.DataFrame()

if SELECTED_NAME == "Official_Images":
    df_cves_detected_all_scanners = pd.read_csv('/home/lolijom01/df_cves_detected_all_scanners_Official_Images.csv')
    df_unique_cves = pd.read_csv('/home/lolijom01/df_unique_cves_Official_Images.csv')
    num_images_analysed = num_images_analysed_official
elif SELECTED_NAME == "Verified_Images":
    df_cves_detected_all_scanners = pd.read_csv('/home/lolijom01/df_cves_detected_all_scanners_Verified_Images.csv')
    df_unique_cves = pd.read_csv('/home/lolijom01/df_unique_cves_Verified_Images.csv')
    num_images_analysed = num_images_analysed_verified
elif SELECTED_NAME == "Sponsored_Images":
    df_cves_detected_all_scanners = pd.read_csv('/home/lolijom01/df_cves_detected_all_scanners_Sponsored_Images.csv')
    df_unique_cves = pd.read_csv('/home/lolijom01/df_unique_cves_Sponsored_Images.csv')
    num_images_analysed = num_images_analysed_sponsored
elif SELECTED_NAME == "All_Images":
    df_cves_detected_all_scanners = pd.read_csv('/home/lolijom01/df_cves_detected_all_scanners_All_Images.csv')
    df_unique_cves = pd.read_csv('/home/lolijom01/df_unique_cves_All_Images.csv')
    num_images_analysed = num_images_analysed_official +  num_images_analysed_verified + num_images_analysed_sponsored
    
# Compute the unique CVEs among all images     
unique_CVEs_all = {}
        
for index, row in df_unique_cves.iterrows():
    scanner_cve_inf = row['scanner_cve_info']
    detection_rate = row['detection_rate']
    scanner_cve_inf_df = parse_unique_cves_field(scanner_cve_inf)
    cve_id = scanner_cve_inf_df['cve_id'].iloc[0]
    
    if cve_id in unique_CVEs_all:
        unique_CVEs_all[cve_id].append(scanner_cve_inf_df)
    else:
        unique_CVEs_all[cve_id] = [scanner_cve_inf_df]
            
# Create DF to store the number of images in which each CVE is present
cves_freq_df = pd.DataFrame(columns=[
    'CVE ID', 'Images Present Count', 
    'Image Present %', 'Average Detection Rate', 
    'Packages Affected', 'Fix Status'])
    
num_low_vulns = 0
num_medium_vulns = 0
num_high_vulns = 0
num_critical_vulns = 0
num_unassigned_vulns = 0
num_diff_vulns = 0
num_reports_unmatch = 0

num_vulns_differ_fix_status = 0
num_vulns_fixed = 0
num_vulns_not_fixed = 0

i = 1

unique_pkgs_affected = {}

for key, value in unique_CVEs_all.items():
    
    value_sev_set = set()
    equal_status_set = set()
    detection_rates_list = []
    pkgs_set = set() # this is the list of affected packages for a unique CVE ID.
            
    print(f"Doing loop {i} out of: {len(unique_CVEs_all)}")
    i += 1
            
            # PARELLISE LOOP
            #with ProcessPoolExecutor() as executor:
                #futures = list(executor.map(extract_severity, itertools.repeat(key), value, itertools.repeat(False)))

                #for future in futures:
                    #value_sev_set.add(future)
        
    for scanner_cve_info_obj_df in value:
        detection_rates_list.append(len(scanner_cve_info_obj_df))
        value_sev = extract_severity(key, scanner_cve_info_obj_df, RECOM_SEVERITIES)
        pkgs = extract_packages(scanner_cve_info_obj_df)
        fixed_status = extract_fix_status(scanner_cve_info_obj_df)
        equal_status_set.add(fixed_status)
        pkgs_set.update(pkgs)
        value_sev_set.add(value_sev)
     
    stat_fix = "not_fixed"                 
    if len(equal_status_set) == 1:
        if list(equal_status_set)[0] == "fixed":
            num_vulns_fixed += 1
            stat_fix = "fixed"
        elif list(equal_status_set)[0] == "different_statuses":
            num_vulns_differ_fix_status += 1
        elif list(equal_status_set)[0] == "not_fixed":
            num_vulns_not_fixed += 1
            stat_fix = "not_fixed"
    elif len(equal_status_set) > 1:
        num_vulns_differ_fix_status += 1
        stat_fix = "different_statuses"
        
    if len(value_sev_set) == 0:
        print("ERROR OCCURRED WHILE ASSESING SEVERITIES, NO VALUE ASSIGNED")
    elif len(value_sev_set) == 1:
        val = list(value_sev_set)[0]
        if val == "LOW":
            num_low_vulns += 1
        elif val == "MEDIUM":
            num_medium_vulns += 1
        elif val == "HIGH":
            num_high_vulns += 1
        elif val == "CRITICAL":
            num_critical_vulns += 1
        elif val == "UNASSIGNED":
            num_unassigned_vulns += 1
        elif val == "DIFFERING":
            num_diff_vulns += 1
        else:
            print("UNKNOWN SEV VALUE")
            print(val)
    else:
        #num_reports_unmatch += 1
        num_diff_vulns += 1
        print("different reports found, sev set is:")
        print(value_sev_set)
        #st.write("DIFFERENT SEVERITIES ASSIGNED FOR THE SAME CVE IN DIFFERENT IMAGE RESULTS")
      
    # compute avg detection rates 
    detection_rates_array = np.array(detection_rates_list)
    avg_detection_rate = np.mean(detection_rates_array).item()

    perc = (len(value) / num_images_analysed)*100
    single_row = pd.DataFrame([{
        'CVE ID': key, 
        'Images Present Count': len(value), 
        'Image Present %': perc,
        'Average Detection Rate': avg_detection_rate,
        'Packages Affected': list(pkgs_set),
        'Fix Status': stat_fix,
    }])
    cves_freq_df = pd.concat([cves_freq_df, single_row], ignore_index=True)
    
    for item in list(pkgs_set):
        if item in unique_pkgs_affected:
            unique_pkgs_affected[item] = unique_pkgs_affected[item] + 1
        else:
            unique_pkgs_affected[item] = 1
       
#relative_efficacies_Snyk = []
#relative_efficacies_Trivy = []
#relative_efficacies_Grype = []
#relative_efficacies_DockerScout = []
#relative_efficacies_JFrog = []

#num_cves_Snyk = 0
#num_cves_Trivy = 0
#num_cves_Grype = 0
#num_cves_DockerScout = 0
#num_cves_JFrog = 0

#num_cves_Snyk_list = []
#num_cves_Trivy_list = [] 
#num_cves_Grype_list = []
#num_cves_DockerScout_list = []
#num_cves_JFrog_list = []

snyk_obj = ScannerResults(
    scanner_name="Snyk",
    relative_efficacies_list=[],
    num_cves=0,
    num_cves_list=[],
    low_vulns=0,
    medium_vulns=0,
    high_vulns=0,
    critical_vulns=0,
    un_vulns=0,
    pkgs_affected_dict={},
    fixed_vulns=0,
    not_fixed_vulns=0
)

trivy_obj = ScannerResults(
    scanner_name="Trivy",
    relative_efficacies_list=[],
    num_cves=0,
    num_cves_list=[],
    low_vulns=0,
    medium_vulns=0,
    high_vulns=0,
    critical_vulns=0,
    un_vulns=0,
    pkgs_affected_dict={},
    fixed_vulns=0,
    not_fixed_vulns=0
)

grype_obj = ScannerResults(
    scanner_name="Grype",
    relative_efficacies_list=[],
    num_cves=0,
    num_cves_list=[],
    low_vulns=0,
    medium_vulns=0,
    high_vulns=0,
    critical_vulns=0,
    un_vulns=0,
    pkgs_affected_dict={},
    fixed_vulns=0,
    not_fixed_vulns=0
)

jfrog_obj = ScannerResults(
    scanner_name="JFrog",
    relative_efficacies_list=[],
    num_cves=0,
    num_cves_list=[],
    low_vulns=0,
    medium_vulns=0,
    high_vulns=0,
    critical_vulns=0,
    un_vulns=0,
    pkgs_affected_dict={},
    fixed_vulns=0,
    not_fixed_vulns=0
)

dockerscout_obj = ScannerResults(
    scanner_name="DockerScout",
    relative_efficacies_list=[],
    num_cves=0,
    num_cves_list=[],
    low_vulns=0,
    medium_vulns=0,
    high_vulns=0,
    critical_vulns=0,
    un_vulns=0,
    pkgs_affected_dict={},
    fixed_vulns=0,
    not_fixed_vulns=0
)

for index, row in df_cves_detected_all_scanners.iterrows():
    relative_efficacy = row['relative_efficiency']
    scanner_name = row['scanner_name']
    num_cves_detected = row['num_cves']
    cves_list = row['cves']
    
    l_vulns, m_vulns, h_vulns, c_vulns, u_vulns = compute_severities_by_scanner(cves_list)
    pkgs_dict_scanner = packages_by_scanner(scanner_name, cves_list)
    fixed_yes, fixed_no = fix_statuses_by_scanner(cves_list)
    
    if scanner_name == "Snyk":
        snyk_obj.relative_efficacies_list.append(relative_efficacy)
        #relative_efficacies_Snyk.append(relative_efficacy)
        snyk_obj.num_cves += num_cves_detected
        #num_cves_Snyk += num_cves_detected
        snyk_obj.num_cves_list.append(num_cves_detected)
        #num_cves_Snyk_list.append(num_cves_detected)
        
        snyk_obj.low_vulns += l_vulns
        snyk_obj.medium_vulns += m_vulns
        snyk_obj.high_vulns += h_vulns
        snyk_obj.critical_vulns += c_vulns
        snyk_obj.unassigned_vulns += u_vulns
        
        combine_dicts(pkgs_dict_scanner, snyk_obj.pkgs_affected_dict)
        snyk_obj.fixed_vulns = fixed_yes
        snyk_obj.not_fixed_vulns = fixed_no
        
    elif scanner_name == "Trivy":
        trivy_obj.relative_efficacies_list.append(relative_efficacy)
        #relative_efficacies_Trivy.append(relative_efficacy)
        trivy_obj.num_cves += num_cves_detected
        #num_cves_Trivy += num_cves_detected
        trivy_obj.num_cves_list.append(num_cves_detected)
        #num_cves_Trivy_list.append(num_cves_detected)
        
        trivy_obj.low_vulns += l_vulns
        trivy_obj.medium_vulns += m_vulns
        trivy_obj.high_vulns += h_vulns
        trivy_obj.critical_vulns += c_vulns
        trivy_obj.unassigned_vulns += u_vulns
        
        combine_dicts(pkgs_dict_scanner, trivy_obj.pkgs_affected_dict)
        trivy_obj.fixed_vulns = fixed_yes
        trivy_obj.not_fixed_vulns = fixed_no
        
    elif scanner_name == "Grype":
        grype_obj.relative_efficacies_list.append(relative_efficacy)
        #relative_efficacies_Grype.append(relative_efficacy)
        grype_obj.num_cves += num_cves_detected
        #num_cves_Grype += num_cves_detected
        grype_obj.num_cves_list.append(num_cves_detected)
        #num_cves_Grype_list.append(num_cves_detected)
        
        grype_obj.low_vulns += l_vulns
        grype_obj.medium_vulns += m_vulns
        grype_obj.high_vulns += h_vulns
        grype_obj.critical_vulns += c_vulns
        grype_obj.unassigned_vulns += u_vulns
        
        combine_dicts(pkgs_dict_scanner, grype_obj.pkgs_affected_dict)
        grype_obj.fixed_vulns = fixed_yes
        grype_obj.not_fixed_vulns = fixed_no
        
    elif scanner_name == "DockerScout":
        dockerscout_obj.relative_efficacies_list.append(relative_efficacy)
        #relative_efficacies_DockerScout.append(relative_efficacy)
        dockerscout_obj.num_cves += num_cves_detected
        #num_cves_DockerScout += num_cves_detected
        dockerscout_obj.num_cves_list.append(num_cves_detected)
        #num_cves_DockerScout_list.append(num_cves_detected)
        
        dockerscout_obj.low_vulns += l_vulns
        dockerscout_obj.medium_vulns += m_vulns
        dockerscout_obj.high_vulns += h_vulns
        dockerscout_obj.critical_vulns += c_vulns
        dockerscout_obj.unassigned_vulns += u_vulns
        
        combine_dicts(pkgs_dict_scanner, dockerscout_obj.pkgs_affected_dict)
        dockerscout_obj.fixed_vulns = fixed_yes
        dockerscout_obj.not_fixed_vulns = fixed_no
        
    elif scanner_name == "JFrog":
        jfrog_obj.relative_efficacies_list.append(relative_efficacy)
        #relative_efficacies_JFrog.append(relative_efficacy)
        jfrog_obj.num_cves += num_cves_detected
        #num_cves_JFrog += num_cves_detected
        jfrog_obj.num_cves_list.append(num_cves_detected)
        #num_cves_JFrog_list.append(num_cves_detected)
        
        jfrog_obj.low_vulns += l_vulns
        jfrog_obj.medium_vulns += m_vulns
        jfrog_obj.high_vulns += h_vulns
        jfrog_obj.critical_vulns += c_vulns
        jfrog_obj.unassigned_vulns += u_vulns
        
        combine_dicts(pkgs_dict_scanner, jfrog_obj.pkgs_affected_dict)
        jfrog_obj.fixed_vulns = fixed_yes
        jfrog_obj.not_fixed_vulns = fixed_no

# Compute statistics
a_S_effic, m_S_effic, v_S_effic, std_S_effic, min_S_effic, max_S_effic, range_S_effic = compute_stats(snyk_obj.relative_efficacies_list)
a_T_effic, m_T_effic, v_T_effic, std_T_effic, min_T_effic, max_T_effic, range_T_effic = compute_stats(trivy_obj.relative_efficacies_list)
a_G_effic, m_G_effic, v_G_effic, std_G_effic, min_G_effic, max_G_effic, range_G_effic = compute_stats(grype_obj.relative_efficacies_list)
a_D_effic, m_D_effic, v_D_effic, std_D_effic, min_D_effic, max_D_effic, range_D_effic = compute_stats(dockerscout_obj.relative_efficacies_list)
a_J_effic, m_J_effic, v_J_effic, std_J_effic, min_J_effic, max_J_effic, range_J_effic = compute_stats(jfrog_obj.relative_efficacies_list)

a_S_cves, m_S_cves, v_S_cves, std_S_cves, min_S_cves, max_S_cves, range_S_cves = compute_stats(snyk_obj.num_cves_list)
a_T_cves, m_T_cves, v_T_cves, std_T_cves, min_T_cves, max_T_cves, range_T_cves = compute_stats(trivy_obj.num_cves_list)
a_G_cves, m_G_cves, v_G_cves, std_G_cves, min_G_cves, max_G_cves, range_G_cves = compute_stats(grype_obj.num_cves_list)
a_D_cves, m_D_cves, v_D_cves, std_D_cves, min_D_cves, max_D_cves, range_D_cves = compute_stats(dockerscout_obj.num_cves_list)
a_J_cves, m_J_cves, v_J_cves, std_J_cves, min_J_cves, max_J_cves, range_J_cves = compute_stats(jfrog_obj.num_cves_list)


data_output = {
    "images_analysed_type": SELECTED_NAME,
    "number_images_analysed": num_images_analysed,
    "num_unique_vulnerabilities": len(unique_CVEs_all),
    "low_vulnerabilities": num_low_vulns,
    "medium_vulnerabilitites": num_medium_vulns,
    "high_vulnerabilities": num_high_vulns,
    "critical_vulnerabilitites": num_critical_vulns,
    "unassigned_vulnerabilities": num_unassigned_vulns,
    "differing_vulnerabilitites": num_diff_vulns,
    "reports_dont_match_vulns": num_reports_unmatch,
    "fixed_vulnerabilities": num_vulns_fixed,
    "not_fixed_vulnerabilities": num_vulns_not_fixed,
    "vulnerabilities_different_fix_status": num_vulns_differ_fix_status,
    "Snyk_results": {
        "num_CVES_detected": snyk_obj.num_cves,
        "average_efficacy": a_S_effic,
        "median_efficacy":m_S_effic,
        "variance_efficacy":v_S_effic,
        "std_dev_efficacy":std_S_effic,
        "min_efficacy":min_S_effic, 
        "max_efficacy":max_S_effic,
        "range_efficacy":range_S_effic,
        "average_cves": a_S_cves,
        "median_cves": m_S_cves,
        "variance_cves": v_S_cves,
        "std_dev_cves": std_S_cves,
        "min_cves": min_S_cves,
        "max_cves": max_S_cves,
        "range_cves": range_S_cves,
        "low_vulns": snyk_obj.low_vulns,
        "medium_vulns": snyk_obj.medium_vulns,
        "high_vulns": snyk_obj.high_vulns,
        "critical_vulns": snyk_obj.critical_vulns,
        "unassigned_vulns": snyk_obj.unassigned_vulns,
        "fixed_vulns": snyk_obj.fixed_vulns,
        "not_fixed_vulns": snyk_obj.not_fixed_vulns,
        "pkgs_affected_dict": snyk_obj.pkgs_affected_dict
    },
    "Trivy_results": {
        "num_CVES_detected": trivy_obj.num_cves,
        "average_efficacy": a_T_effic,
        "median_efficacy":m_T_effic,
        "variance_efficacy":v_T_effic,
        "std_dev_efficacy":std_T_effic,
        "min_efficacy":min_T_effic, 
        "max_efficacy":max_T_effic,
        "range_efficacy":range_T_effic,
        "average_cves": a_T_cves,
        "median_cves": m_T_cves,
        "variance_cves": v_T_cves,
        "std_dev_cves": std_T_cves,
        "min_cves": min_T_cves,
        "max_cves": max_T_cves,
        "range_cves": range_T_cves,
        "low_vulns": trivy_obj.low_vulns,
        "medium_vulns": trivy_obj.medium_vulns,
        "high_vulns": trivy_obj.high_vulns,
        "critical_vulns": trivy_obj.critical_vulns,
        "unassigned_vulns": trivy_obj.unassigned_vulns,
        "fixed_vulns": trivy_obj.fixed_vulns,
        "not_fixed_vulns": trivy_obj.not_fixed_vulns,
        "pkgs_affected_dict": trivy_obj.pkgs_affected_dict
    },
    "Grype_results": {
        "num_CVES_detected": grype_obj.num_cves,
        "average_efficacy": a_G_effic,
        "median_efficacy":m_G_effic,
        "variance_efficacy":v_G_effic,
        "std_dev_efficacy":std_G_effic,
        "min_efficacy":min_G_effic, 
        "max_efficacy":max_G_effic,
        "range_efficacy":range_G_effic,
        "average_cves": a_G_cves,
        "median_cves": m_G_cves,
        "variance_cves": v_G_cves,
        "std_dev_cves": std_G_cves,
        "min_cves": min_G_cves,
        "max_cves": max_G_cves,
        "range_cves": range_G_cves,
         "low_vulns": grype_obj.low_vulns,
        "medium_vulns": grype_obj.medium_vulns,
        "high_vulns": grype_obj.high_vulns,
        "critical_vulns": grype_obj.critical_vulns,
        "unassigned_vulns": grype_obj.unassigned_vulns,
        "fixed_vulns": grype_obj.fixed_vulns,
        "not_fixed_vulns": grype_obj.not_fixed_vulns,
        "pkgs_affected_dict": grype_obj.pkgs_affected_dict
    },
    "JFrog_results": {
        "num_CVES_detected": jfrog_obj.num_cves,
        "average_efficacy": a_J_effic,
        "median_efficacy":m_J_effic,
        "variance_efficacy":v_J_effic,
        "std_dev_efficacy":std_J_effic,
        "min_efficacy":min_J_effic, 
        "max_efficacy":max_J_effic,
        "range_efficacy":range_J_effic,
        "average_cves": a_J_cves,
        "median_cves": m_J_cves,
        "variance_cves": v_J_cves,
        "std_dev_cves": std_J_cves,
        "min_cves": min_J_cves,
        "max_cves": max_J_cves,
        "range_cves": range_J_cves,
         "low_vulns": jfrog_obj.low_vulns,
        "medium_vulns": jfrog_obj.medium_vulns,
        "high_vulns": jfrog_obj.high_vulns,
        "critical_vulns": jfrog_obj.critical_vulns,
        "unassigned_vulns": jfrog_obj.unassigned_vulns,
        "fixed_vulns": jfrog_obj.fixed_vulns,
        "not_fixed_vulns": jfrog_obj.not_fixed_vulns,
        "pkgs_affected_dict": jfrog_obj.pkgs_affected_dict
    },
    "DockerScout_results": {
        "num_CVES_detected": dockerscout_obj.num_cves,
        "average_efficacy": a_D_effic,
        "median_efficacy":m_D_effic,
        "variance_efficacy":v_D_effic,
        "std_dev_efficacy":std_D_effic,
        "min_efficacy":min_D_effic, 
        "max_efficacy":max_D_effic,
        "range_efficacy":range_D_effic,
        "average_cves": a_D_cves,
        "median_cves": m_D_cves,
        "variance_cves": v_D_cves,
        "std_dev_cves": std_D_cves,
        "min_cves": min_D_cves,
        "max_cves": max_D_cves,
        "range_cves": range_D_cves,
         "low_vulns": dockerscout_obj.low_vulns,
        "medium_vulns": dockerscout_obj.medium_vulns,
        "high_vulns": dockerscout_obj.high_vulns,
        "critical_vulns": dockerscout_obj.critical_vulns,
        "unassigned_vulns": dockerscout_obj.unassigned_vulns,
        "fixed_vulns": dockerscout_obj.fixed_vulns,
        "not_fixed_vulns": dockerscout_obj.not_fixed_vulns,
        "pkgs_affected_dict": dockerscout_obj.pkgs_affected_dict
    }
}

json_file_name = 'out/data_results_' + SELECTED_NAME + '.json'
with open(json_file_name, 'w') as json_file:
    json.dump(data_output, json_file, indent=4)
        
                
cves_freq_df_sorted = cves_freq_df.sort_values(by='Images Present Count', ascending=False)

csv_file_name = 'out/cves_freq_sorted_df_' + SELECTED_NAME + '.csv'
# Save the DataFrame to a CSV file
cves_freq_df_sorted.to_csv(csv_file_name, index=False)

# SAVE the dataframe containg the lisst of most affected packages in all unique vulns
pkgs_freq_df = pd.DataFrame(list(unique_pkgs_affected.items()), columns=['Package', 'Count'])
pkgs_freq_df_sorted = pkgs_freq_df.sort_values(by='Count', ascending=False)
csv_file_name2 = 'out/pkgs_freq_df_' + SELECTED_NAME + '.csv'
pkgs_freq_df_sorted.to_csv(csv_file_name2, index=False)