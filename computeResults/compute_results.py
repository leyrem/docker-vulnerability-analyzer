import pandas as pd
import altair as alt
import json
import glob
import os
from concurrent.futures import ProcessPoolExecutor, as_completed
import itertools
from utils import parse_unique_cves_field, extract_severity, get_cve_details

num_images_analysed = 0
num_images_analysed_official = 689
num_images_analysed_verified = 702
num_images_analysed_sponsored = 712

SELECTED_NAME = "Official_Images" # Oneof Official_Images, Verified_Images, Sponsored_Images or All_Images
RECOM_SEVERITIES = False

df_cves_detected_all_scanners = pd.DataFrame()
df_unique_cves = pd.DataFrame()

if SELECTED_NAME == "Official_Images":
    df_cves_detected_all_scanners = pd.read_csv('/home/lolijom01/df_cves_detected_all_scanners_Official_Images.csv')
    df_unique_cves = pd.read_csv('/home/lolijom01/df_unique_cves_Official_Images.csv')
    num_images_analysed = num_images_analysed_official
elif SELECTED_NAME == "Verified_Images":
    df_cves_detected_all_scanners = pd.read_csv('/home/lolijom01/df_cves_detected_all_scanners_Verified_Images.csv')
    df_unique_cves = pd.read_csv('/home/lolijom01/df_unique_cves_Verified_Images.csv')
    num_images_analysed = num_images_analysed_verified
elif SELECTED_NAME == "Sponsored_Images":
    df_cves_detected_all_scanners = pd.read_csv('/home/lolijom01/df_cves_detected_all_scanners_Sponsored_Images.csv')
    df_unique_cves = pd.read_csv('/home/lolijom01/df_unique_cves_Sponsored_Images.csv')
    num_images_analysed = num_images_analysed_sponsored
elif SELECTED_NAME == "All_Images":
    df_cves_detected_all_scanners = pd.read_csv('/home/lolijom01/df_cves_detected_all_scanners_All_Images.csv')
    df_unique_cves = pd.read_csv('/home/lolijom01/df_unique_cves_All_Images.csv')
    num_images_analysed = num_images_analysed_official +  num_images_analysed_verified + num_images_analysed_sponsored
    
# Compute the unique CVEs among all images     
unique_CVEs_all = {}
        
for index, row in df_unique_cves.iterrows():
    scanner_cve_inf = row['scanner_cve_info']
    scanner_cve_inf_df = parse_unique_cves_field(scanner_cve_inf)
    cve_id = scanner_cve_inf_df['cve_id'].iloc[0]
    
    if cve_id in unique_CVEs_all:
        unique_CVEs_all[cve_id].append(scanner_cve_inf_df)
    else:
        unique_CVEs_all[cve_id] = [scanner_cve_inf_df]
            
# Create DF to store the number of images in which each CVE is present
cves_freq_df = pd.DataFrame(columns=['CVE ID', 'Images Present Count', 'Image Present %'])
    
num_low_vulns = 0
num_medium_vulns = 0
num_high_vulns = 0
num_critical_vulns = 0
num_unassigned_vulns = 0
num_diff_vulns = 0
num_reports_unmatch = 0

i = 1
for key, value in unique_CVEs_all.items():
    perc = (len(value) / num_images_analysed)*100
    single_row = pd.DataFrame([{'CVE ID': key, 'Images Present Count': len(value), 'Image Present %': perc}])
    cves_freq_df = pd.concat([cves_freq_df, single_row], ignore_index=True)
    value_sev_set = set()
            
    print(f"Doing loop {i} out of: {len(unique_CVEs_all)}")
    i += 1
            
            # PARELLISE LOOP
            #with ProcessPoolExecutor() as executor:
                #futures = list(executor.map(extract_severity, itertools.repeat(key), value, itertools.repeat(False)))

                #for future in futures:
                    #value_sev_set.add(future)
        
    for scanner_cve_info_obj_df in value:
        value_sev = extract_severity(key, scanner_cve_info_obj_df, RECOM_SEVERITIES)
        value_sev_set.add(value_sev)
                
    if len(value_sev_set) == 0:
        print("ERROR OCCURRED WHILE ASSESING SEVERITIES, NO VALUE ASSIGNED")
    elif len(value_sev_set) == 1:
        val = list(value_sev_set)[0]
        if val == "LOW":
            num_low_vulns += 1
        elif val == "MEDIUM":
            num_medium_vulns += 1
        elif val == "HIGH":
            num_high_vulns += 1
        elif val == "CRITICAL":
            num_critical_vulns += 1
        elif val == "UNASSIGNED":
            num_unassigned_vulns += 1
        elif val == "DIFFERING":
            num_diff_vulns += 1
        else:
            print("UNKNOWN SEV VALUE")
            print(val)
    else:
        #num_reports_unmatch += 1
        num_diff_vulns += 1
        print("different reports found, sev set is:")
        print(value_sev_set)
        #st.write("DIFFERENT SEVERITIES ASSIGNED FOR THE SAME CVE IN DIFFERENT IMAGE RESULTS")
       
       
relative_efficacies_Snyk = []
relative_efficacies_Trivy = []
relative_efficacies_Grype = []
relative_efficacies_DockerScout = []
relative_efficacies_JFrog = []

for index, row in df_cves_detected_all_scanners.iterrows():
    relative_efficacy = row['relative_efficiency']
    scanner_name = row['scanner_name']
    
    if scanner_name == "Snyk":
        relative_efficacies_Snyk.append(relative_efficacy)
    elif scanner_name == "Trivy":
        relative_efficacies_Trivy.append(relative_efficacy)
    elif scanner_name == "Grype":
        relative_efficacies_Grype.append(relative_efficacy)
    elif scanner_name == "DockerScout":
        relative_efficacies_DockerScout.append(relative_efficacy)
    elif scanner_name == "JFrog":
        relative_efficacies_JFrog.append(relative_efficacy)
        
    
     
data_output = {
    "images_analysed_type": SELECTED_NAME,
    "number_images_analysed": num_images_analysed,
    "num_unique_vulnerabilities": len(unique_CVEs_all),
    "low_vulnerabilities": num_low_vulns,
    "medium_vulnerabilitites": num_medium_vulns,
    "high_vulnerabilities": num_high_vulns,
    "critical_vulnerabilitites": num_critical_vulns,
    "unassigned_vulnerabilities": num_unassigned_vulns,
    "differing_vulnerabilitites": num_diff_vulns,
    "reports_dont_match_vulns": num_reports_unmatch,
}
json_file_name = 'out/data_results_' + SELECTED_NAME + '.json'
with open(json_file_name, 'w') as json_file:
    json.dump(data_output, json_file, indent=4)
        
                
cves_freq_df_sorted = cves_freq_df.sort_values(by='Images Present Count', ascending=False)

csv_file_name = 'out/cves_freq_sorted_df_' + SELECTED_NAME + '.csv'
# Save the DataFrame to a CSV file
cves_freq_df_sorted.to_csv(csv_file_name, index=False)