package main

import (
	"bufio"
	"encoding/csv"
	"fmt"
	"io"
	"log"
	"os"

	"github.com/leyrem/docker-vulnerability-analyzer/scanners"
)

func readCSV(fileName string, typeE string) ([]string, error) {
	// Open the CSV file
	file, err := os.Open(fileName)

	if err != nil {
		log.Printf("error opening CSV file %s: %v\n", fileName, err)
		return []string{}, fmt.Errorf("error opening CSV file %s: %v\n", fileName, err)
	}
	defer file.Close()

	// Create a new CSV reader
	reader := csv.NewReader(file)

	var imagesToDownload []string

	// Read the file line by line
	for {
		// Read a single line from the file
		record, err := reader.Read()
		// Check for end of file
		if err != nil {
			// If end of file is reached, break the loop

			if err == io.EOF {
				// If end of file is reached, break the loop
				break
			}
			log.Printf("error reading CSV file %s: %v \n", fileName, err)
			return []string{}, fmt.Errorf("error reading CSV file %s: %v \n", fileName, err)
		}

		var completeName string

		if typeE == "official" {
			completeName = record[0] + ":" + record[3]
		} else {
			completeName = record[1] + "/" + record[0] + ":" + record[3]
		}
		imagesToDownload = append(imagesToDownload, completeName)
	}
	return imagesToDownload, nil
}

func main() {
	images, err := readCSV("/root/thesis_crawler/imagesOfficialRem.csv", "official")
	if err != nil {
		panic(err)
	}

	// Open the file in write mode. Create it if it doesn't exist.
	fileErr, err := os.Create("/root/docker-vulnerability-analyzer/out/errors/error.txt")
	if err != nil {
		fmt.Println("Error opening error file:", err)
		return
	}
	defer fileErr.Close()

	// Create a writer that will write to the file
	writer := bufio.NewWriter(fileErr)

	for _, img := range images[2:] {
		err = scanners.UseAllScanners(img, "/mnt/mydata/docker-vulnerability-analyzer/out/official/new6")
		if err != nil {
			errMsg := img + " ----------- " + err.Error()
			_, err := writer.WriteString(errMsg + "\n")
			if err != nil {
				fmt.Println("Error writing to error file:", err)
				return
			}
			err = writer.Flush()
			if err != nil {
				fmt.Println("Error flusing error file:", err)
				return
			}
		}
	}

	// Flush the buffer to ensure all data is written to the file
	err = writer.Flush()
	if err != nil {
		fmt.Println("Error flusing error file:", err)
		return
	}

}
