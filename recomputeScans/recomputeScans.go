package main

import (
	"bufio"
	"fmt"
	"os"
	"strings"

	"github.com/leyrem/docker-vulnerability-analyzer/scanners"
)

const (
	TXT_FILE_SOURCE = "/root/docker-vulnerability-analyzer/out/missing/verifiedMissing.txt"
	ERROR_TXT_FILE  = "/root/docker-vulnerability-analyzer/out/errors/errorRecomputeVerified.txt"
	OUTPUT_DIR      = "/root/docker-vulnerability-analyzer/out/recomVerified"
)

type dataUnit struct {
	ScannersToUse []string
	ImageName     string
}

func readTxtFile(path string) ([]dataUnit, error) {
	// Open the file
	file, err := os.Open(path)
	if err != nil {
		return []dataUnit{}, err
	}
	defer file.Close()

	// Create a new Scanner to read from the file
	txtScan := bufio.NewScanner(file)

	res := []dataUnit{}
	// Iterate over each line
	for txtScan.Scan() {
		line := txtScan.Text()
		// Split the string by whitespace and trim spaces
		lineSplit := strings.Fields(line)

		if len(lineSplit) != 2 {
			return []dataUnit{}, fmt.Errorf("line read %s is of length different than 2", line)
		}

		// Split the string by comma
		scannersNeeded := strings.Split(lineSplit[0], ",")
		imageName := lineSplit[1]

		d := dataUnit{
			ScannersToUse: scannersNeeded,
			ImageName:     imageName,
		}
		res = append(res, d)
	}

	// Check for any errors during scanning
	if err := txtScan.Err(); err != nil {
		return []dataUnit{}, err
	}

	return res, nil
}

func main() {
	data, err := readTxtFile(TXT_FILE_SOURCE)
	if err != nil {
		panic(err)
	}

	// Open the file in write mode. Create it if it doesn't exist.
	fileErr, err := os.Create(ERROR_TXT_FILE)
	if err != nil {
		fmt.Println("Error opening error file:", err)
		return
	}
	defer fileErr.Close()

	// Create a writer that will write to the file
	writer := bufio.NewWriter(fileErr)

	for _, d := range data {
		err = scanners.UseGivenScanners(d.ScannersToUse, d.ImageName, OUTPUT_DIR)
		if err != nil {
			errMsg := d.ImageName + " ----------- " + err.Error()
			_, err := writer.WriteString(errMsg + "\n")
			if err != nil {
				fmt.Println("Error writing to error file:", err)
				return
			}
			err = writer.Flush()
			if err != nil {
				fmt.Println("Error flusing error file:", err)
				return
			}
		}
	}

	// Flush the buffer to ensure all data is written to the file
	err = writer.Flush()
	if err != nil {
		fmt.Println("Error flusing error file:", err)
		return
	}

}
