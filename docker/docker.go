package docker

import (
	"context"
	"fmt"
	"log"

	"github.com/docker/docker/api/types/image"
	"github.com/docker/docker/client"
)

type Client struct {
	Cli *client.Client
}

func CheckDockerStatus(ctx context.Context) (*Client, error) {
	// Create a Docker client
	cli, err := client.NewClientWithOpts(client.FromEnv, client.WithAPIVersionNegotiation())
	if err != nil {
		log.Printf("Error creating Docker client: %v", err)
		return nil, fmt.Errorf("error creating Docker client: %v", err)
	}

	// Ping the Docker daemon
	_, err = cli.Ping(ctx)
	if err != nil {
		log.Printf("Docker is not running\n")
		return nil, fmt.Errorf("Docker is not running")
	}

	log.Println("Docker is running")
	return &Client{Cli: cli}, nil
}

func (c *Client) PullImage(ctx context.Context, imageName string) error {
	pullOptions := image.PullOptions{}

	reader, err := c.Cli.ImagePull(ctx, imageName, pullOptions)
	if err != nil {
		log.Printf("Error pulling image %s: %v", imageName, err)
		return fmt.Errorf("Error pulling image %s: %v", imageName, err)
	}
	defer reader.Close()

	log.Printf("Image %s pulled successfully\n", imageName)
	return nil
}

func (c *Client) RemoveImage(ctx context.Context, imageName string) error {

	removeOptions := image.RemoveOptions{
		Force:         true, // Force removal if the image is being used
		PruneChildren: true, // Prune dependent layers
	}

	_, err := c.Cli.ImageRemove(ctx, imageName, removeOptions)
	if err != nil {
		log.Printf("Error removing image %s: %v", imageName, err)
		return fmt.Errorf("Error removing image %s: %v", imageName, err)
	}

	log.Printf("Image %s removed successfully\n", imageName)
	return nil
}
